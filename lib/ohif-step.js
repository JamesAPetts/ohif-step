(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ohif-step", [], factory);
	else if(typeof exports === 'object')
		exports["ohif-step"] = factory();
	else
		root["ohif-step"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/dcmjs/build/dcmje.es.js":
/*!**********************************************!*\
  !*** ./node_modules/dcmjs/build/dcmje.es.js ***!
  \**********************************************/
/*! exports provided: data, derivations, normalizers, adapters, utilities, DICOMWEB, sr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "data", function() { return data; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "derivations", function() { return derivations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizers", function() { return normalizers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adapters", function() { return adapters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utilities", function() { return utilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DICOMWEB", function() { return DICOMWEB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sr", function() { return sr; });
function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/*
  Copyright © 2018 Andrew Powell

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of this Source Code Form.
*/

const noop = () => {};
const levels = Symbol('log-levels');
const instance = Symbol('log-instance');

var MethodFactory_1 = class MethodFactory {
  constructor(logger) {
    this[instance] = logger;
    this[levels] = {
      TRACE: 0,
      DEBUG: 1,
      INFO: 2,
      WARN: 3,
      ERROR: 4,
      SILENT: 5
    };
  }

  get levels() {
    return this[levels];
  }

  get logger() {
    return this[instance];
  }

  set logger(logger) {
    this[instance] = logger;
  }

  get methods() {
    return Object.keys(this.levels)
      .map((key) => key.toLowerCase())
      .filter((key) => key !== 'silent');
  }

  // eslint-disable-next-line class-methods-use-this
  bindMethod(obj, methodName) {
    const method = obj[methodName];
    if (typeof method.bind === 'function') {
      return method.bind(obj);
    }

    try {
      return Function.prototype.bind.call(method, obj);
    } catch (e) {
      // Missing bind shim or IE8 + Modernizr, fallback to wrapping
      return function result() {
        // eslint-disable-next-line prefer-rest-params
        return Function.prototype.apply.apply(method, [obj, arguments]);
      };
    }
  }

  distillLevel(level) {
    let result = level;

    if (typeof result === 'string' && typeof this.levels[result.toUpperCase()] !== 'undefined') {
      result = this.levels[result.toUpperCase()];
    }

    if (this.levelValid(result)) {
      return result;
    }

    return false;
  }

  levelValid(level) {
    if (typeof level === 'number' && level >= 0 && level <= this.levels.SILENT) {
      return true;
    }

    return false;
  }

  /**
   * Build the best logging method possible for this env
   * Wherever possible we want to bind, not wrap, to preserve stack traces.
   * Since we're targeting modern browsers, there's no need to wait for the
   * console to become available.
   */
  // eslint-disable-next-line class-methods-use-this
  make(methodName) {
    if (methodName === 'debug') {
      // eslint-disable-next-line no-param-reassign
      methodName = 'log';
    }

    /* eslint-disable no-console */
    if (typeof console[methodName] !== 'undefined') {
      return this.bindMethod(console, methodName);
    } else if (typeof console.log !== 'undefined') {
      return this.bindMethod(console, 'log');
    }

    /* eslint-enable no-console */
    return noop;
  }

  replaceMethods(logLevel) {
    const level = this.distillLevel(logLevel);

    if (level == null) {
      throw new Error(`loglevelnext: replaceMethods() called with invalid level: ${logLevel}`);
    }

    if (!this.logger || this.logger.type !== 'LogLevel') {
      throw new TypeError(
        'loglevelnext: Logger is undefined or invalid. Please specify a valid Logger instance.'
      );
    }

    this.methods.forEach((methodName) => {
      const { [methodName.toUpperCase()]: methodLevel } = this.levels;

      this.logger[methodName] = methodLevel < level ? noop : this.make(methodName);
    });

    // Define log.log as an alias for log.debug
    this.logger.log = this.logger.debug;
  }
};

/*
  Copyright © 2018 Andrew Powell

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of this Source Code Form.
*/



const defaults = {
  level: (opts) => `[${opts.level}]`,
  name: (opts) => opts.logger.name,
  template: '{{time}} {{level}} ',
  time: () => new Date().toTimeString().split(' ')[0]
};

var PrefixFactory_1 = class PrefixFactory extends MethodFactory_1 {
  constructor(logger, options) {
    super(logger);
    this.options = Object.assign({}, defaults, options);
  }

  interpolate(level) {
    return this.options.template.replace(/{{([^{}]*)}}/g, (stache, prop) => {
      const fn = this.options[prop];

      if (fn) {
        return fn({ level, logger: this.logger });
      }

      return stache;
    });
  }

  make(methodName) {
    const og = super.make(methodName);

    return (...args) => {
      const output = this.interpolate(methodName);
      const [first] = args;

      if (typeof first === 'string') {
        // eslint-disable-next-line no-param-reassign
        args[0] = output + first;
      } else {
        args.unshift(output);
      }

      og(...args);
    };
  }
};

/*
  Copyright © 2018 Andrew Powell

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of this Source Code Form.
*/





const defaults$1 = {
  factory: null,
  level: 'warn',
  name: +new Date(),
  prefix: null
};

var LogLevel_1 = class LogLevel {
  constructor(options) {
    // implement for some _very_ loose type checking. avoids getting into a
    // circular require between MethodFactory and LogLevel
    this.type = 'LogLevel';
    this.options = Object.assign({}, defaults$1, options);
    this.methodFactory = options.factory;

    if (!this.methodFactory) {
      const factory = options.prefix
        ? new PrefixFactory_1(this, options.prefix)
        : new MethodFactory_1(this);
      this.methodFactory = factory;
    }

    if (!this.methodFactory.logger) {
      this.methodFactory.logger = this;
    }

    this.name = options.name || '<unknown>';

    // this.level is a setter, do this after setting up the factory
    this.level = this.options.level;
  }

  get factory() {
    return this.methodFactory;
  }

  set factory(factory) {
    // eslint-disable-next-line no-param-reassign
    factory.logger = this;
    this.methodFactory = factory;
    this.methodFactory.replaceMethods(this.level);
  }

  disable() {
    this.level = this.levels.SILENT;
  }

  enable() {
    this.level = this.levels.TRACE;
  }

  get level() {
    return this.currentLevel;
  }

  set level(logLevel) {
    const level = this.methodFactory.distillLevel(logLevel);

    if (level === false || level == null) {
      throw new RangeError(`loglevelnext: setLevel() called with invalid level: ${logLevel}`);
    }

    this.currentLevel = level;
    this.methodFactory.replaceMethods(level);

    if (typeof console === 'undefined' && level < this.levels.SILENT) {
      // eslint-disable-next-line no-console
      console.warn('loglevelnext: console is undefined. The log will produce no output.');
    }
  }

  get levels() {
    // eslint-disable-line class-methods-use-this
    return this.methodFactory.levels;
  }
};

var lib = createCommonjsModule(function (module) {
/*
  Copyright © 2018 Andrew Powell

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of this Source Code Form.
*/





const factories = Symbol('log-factories');

class DefaultLogger extends LogLevel_1 {
  constructor() {
    super({ name: 'default' });

    this.cache = { default: this };
    this[factories] = { MethodFactory: MethodFactory_1, PrefixFactory: PrefixFactory_1 };
  }

  get factories() {
    return this[factories];
  }

  get loggers() {
    return this.cache;
  }

  create(opts) {
    let options;

    if (typeof opts === 'string') {
      options = { name: opts };
    } else {
      options = Object.assign({}, opts);
    }

    if (!options.id) {
      options.id = options.name;
    }

    const { name, id } = options;
    const defaults = { level: this.level };

    if (typeof name !== 'string' || !name || !name.length) {
      throw new TypeError('You must supply a name when creating a logger.');
    }

    let logger = this.cache[id];
    if (!logger) {
      logger = new LogLevel_1(Object.assign({}, defaults, options));
      this.cache[id] = logger;
    }
    return logger;
  }
}

module.exports = new DefaultLogger();

// TypeScript fix
module.exports.default = module.exports;
});

/* eslint no-bitwise: 0 */
var BitArray = {
  getBytesForBinaryFrame: getBytesForBinaryFrame,
  pack: pack,
  unpack: unpack
};

function getBytesForBinaryFrame(numPixels) {
  // Check whether the 1-bit pixels exactly fit into bytes
  var remainder = numPixels % 8; // Number of bytes that work on an exact fit

  var bytesRequired = Math.floor(numPixels / 8); // Add one byte if we have a remainder

  if (remainder > 0) {
    bytesRequired++;
  }

  return bytesRequired;
}

function pack(pixelData) {
  var numPixels = pixelData.length;
  lib.log("numPixels: " + numPixels);
  var length = getBytesForBinaryFrame(numPixels); //log.log('getBytesForBinaryFrame: ' + length);

  var bitPixelData = new Uint8Array(length);
  var bytePos = 0;

  for (var i = 0; i < numPixels; i++) {
    // Compute byte position
    bytePos = Math.floor(i / 8);
    var pixValue = pixelData[i] !== 0; //log.log('i: ' + i);
    //log.log('pixValue: ' + pixValue);
    //log.log('bytePos: ' + bytePos);

    var bitPixelValue = pixValue << i % 8; //log.log('current bitPixelData: ' + bitPixelData[bytePos]);
    //log.log('this bitPixelValue: ' + bitPixelValue);

    bitPixelData[bytePos] |= bitPixelValue; //log.log('new bitPixelValue: ' + bitPixelData[bytePos]);
  }

  return bitPixelData;
} // convert a packed bitwise pixel array into a byte-per-pixel
// array with 255 corresponding to each set bit in the bit array


function unpack(bitPixelArray) {
  var bitArray = new Uint8Array(bitPixelArray);
  var byteArray = new Uint8Array(8 * bitArray.length);

  for (var byteIndex = 0; byteIndex < byteArray.length; byteIndex++) {
    var bitIndex = byteIndex % 8;
    var bitByteIndex = Math.floor(byteIndex / 8);
    byteArray[byteIndex] = 255 * ((bitArray[bitByteIndex] & 1 << bitIndex) >> bitIndex);
  }

  return byteArray;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

//http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/
function toUTF8Array(str) {
  var utf8 = [];

  for (var i = 0; i < str.length; i++) {
    var charcode = str.charCodeAt(i);
    if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {
      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);
    } else if (charcode < 0xd800 || charcode >= 0xe000) {
      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
    } // surrogate pair
    else {
        i++; // UTF-16 encodes 0x10000-0x10FFFF by
        // subtracting 0x10000 and splitting the
        // 20 bits of 0x0-0xFFFFF into two halves

        charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
        utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
      }
  }

  return utf8;
}

function toInt(val) {
  if (isNaN(val)) {
    throw new Error("Not a number: " + val);
  } else if (typeof val == "string") {
    return parseInt(val);
  } else return val;
}

function toFloat(val) {
  if (isNaN(val)) {
    throw new Error("Not a number: " + val);
  } else if (typeof val == "string") {
    return parseFloat(val);
  } else return val;
}

var BufferStream =
/*#__PURE__*/
function () {
  function BufferStream(sizeOrBuffer, littleEndian) {
    _classCallCheck(this, BufferStream);

    this.buffer = typeof sizeOrBuffer == "number" ? new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer;

    if (!this.buffer) {
      this.buffer = new ArrayBuffer(0);
    }

    this.view = new DataView(this.buffer);
    this.offset = 0;
    this.isLittleEndian = littleEndian || false;
    this.size = 0;
  }

  _createClass(BufferStream, [{
    key: "setEndian",
    value: function setEndian(isLittle) {
      this.isLittleEndian = isLittle;
    }
  }, {
    key: "writeUint8",
    value: function writeUint8(value) {
      this.checkSize(1);
      this.view.setUint8(this.offset, toInt(value));
      return this.increment(1);
    }
  }, {
    key: "writeInt8",
    value: function writeInt8(value) {
      this.checkSize(1);
      this.view.setInt8(this.offset, toInt(value));
      return this.increment(1);
    }
  }, {
    key: "writeUint16",
    value: function writeUint16(value) {
      this.checkSize(2);
      this.view.setUint16(this.offset, toInt(value), this.isLittleEndian);
      return this.increment(2);
    }
  }, {
    key: "writeInt16",
    value: function writeInt16(value) {
      this.checkSize(2);
      this.view.setInt16(this.offset, toInt(value), this.isLittleEndian);
      return this.increment(2);
    }
  }, {
    key: "writeUint32",
    value: function writeUint32(value) {
      this.checkSize(4);
      this.view.setUint32(this.offset, toInt(value), this.isLittleEndian);
      return this.increment(4);
    }
  }, {
    key: "writeInt32",
    value: function writeInt32(value) {
      this.checkSize(4);
      this.view.setInt32(this.offset, toInt(value), this.isLittleEndian);
      return this.increment(4);
    }
  }, {
    key: "writeFloat",
    value: function writeFloat(value) {
      this.checkSize(4);
      this.view.setFloat32(this.offset, toFloat(value), this.isLittleEndian);
      return this.increment(4);
    }
  }, {
    key: "writeDouble",
    value: function writeDouble(value) {
      this.checkSize(8);
      this.view.setFloat64(this.offset, toFloat(value), this.isLittleEndian);
      return this.increment(8);
    }
  }, {
    key: "writeString",
    value: function writeString(value) {
      value = value || "";
      var utf8 = toUTF8Array(value),
          bytelen = utf8.length;
      this.checkSize(bytelen);
      var startOffset = this.offset;

      for (var i = 0; i < bytelen; i++) {
        this.view.setUint8(startOffset, utf8[i]);
        startOffset++;
      }

      return this.increment(bytelen);
    }
  }, {
    key: "writeHex",
    value: function writeHex(value) {
      var len = value.length,
          blen = len / 2,
          startOffset = this.offset;
      this.checkSize(blen);

      for (var i = 0; i < len; i += 2) {
        var code = parseInt(value[i], 16),
            nextCode;

        if (i == len - 1) {
          nextCode = null;
        } else {
          nextCode = parseInt(value[i + 1], 16);
        }

        if (nextCode !== null) {
          code = code << 4 | nextCode;
        }

        this.view.setUint8(startOffset, code);
        startOffset++;
      }

      return this.increment(blen);
    }
  }, {
    key: "readUint32",
    value: function readUint32() {
      var val = this.view.getUint32(this.offset, this.isLittleEndian);
      this.increment(4);
      return val;
    }
  }, {
    key: "readUint16",
    value: function readUint16() {
      var val = this.view.getUint16(this.offset, this.isLittleEndian);
      this.increment(2);
      return val;
    }
  }, {
    key: "readUint8",
    value: function readUint8() {
      var val = this.view.getUint8(this.offset);
      this.increment(1);
      return val;
    }
  }, {
    key: "readUint8Array",
    value: function readUint8Array(length) {
      var arr = new Uint8Array(this.buffer, this.offset, length);
      this.increment(length);
      return arr;
    }
  }, {
    key: "readUint16Array",
    value: function readUint16Array(length) {
      var sixlen = length / 2,
          arr = new Uint16Array(sixlen),
          i = 0;

      while (i++ < sixlen) {
        arr[i] = this.view.getUint16(this.offset, this.isLittleEndian);
        this.offset += 2;
      }

      return arr;
    }
  }, {
    key: "readInt16",
    value: function readInt16() {
      var val = this.view.getInt16(this.offset, this.isLittleEndian);
      this.increment(2);
      return val;
    }
  }, {
    key: "readInt32",
    value: function readInt32() {
      var val = this.view.getInt32(this.offset, this.isLittleEndian);
      this.increment(4);
      return val;
    }
  }, {
    key: "readFloat",
    value: function readFloat() {
      var val = this.view.getFloat32(this.offset, this.isLittleEndian);
      this.increment(4);
      return val;
    }
  }, {
    key: "readDouble",
    value: function readDouble() {
      var val = this.view.getFloat64(this.offset, this.isLittleEndian);
      this.increment(8);
      return val;
    }
  }, {
    key: "readString",
    value: function readString(length) {
      var string = "";
      var numOfMulti = length,
          index = 0;

      while (index++ < numOfMulti) {
        var charCode = this.readUint8();
        string += String.fromCharCode(charCode);
      }

      return string;
    }
  }, {
    key: "readHex",
    value: function readHex(length) {
      var hexString = "";

      for (var i = 0; i < length; i++) {
        hexString += this.readUint8().toString(16);
      }

      return hexString;
    }
  }, {
    key: "checkSize",
    value: function checkSize(step) {
      if (this.offset + step > this.buffer.byteLength) {
        //throw new Error("Writing exceeded the size of buffer");
        //resize
        var dstSize = this.offset + step;
        var dst = new ArrayBuffer(dstSize);
        new Uint8Array(dst).set(new Uint8Array(this.buffer));
        this.buffer = dst;
        this.view = new DataView(this.buffer);
      }
    }
  }, {
    key: "concat",
    value: function concat(stream) {
      var newbuf = new ArrayBuffer(this.offset + stream.size),
          int8 = new Uint8Array(newbuf);
      int8.set(new Uint8Array(this.getBuffer(0, this.offset)));
      int8.set(new Uint8Array(stream.getBuffer(0, stream.size)), this.offset);
      this.buffer = newbuf;
      this.view = new DataView(this.buffer);
      this.offset += stream.size;
      this.size = this.offset;
      return this.buffer.byteLength;
    }
  }, {
    key: "increment",
    value: function increment(step) {
      this.offset += step;

      if (this.offset > this.size) {
        this.size = this.offset;
      }

      return step;
    }
  }, {
    key: "getBuffer",
    value: function getBuffer(start, end) {
      if (!start && !end) {
        start = 0;
        end = this.size;
      }

      return this.buffer.slice(start, end);
    }
  }, {
    key: "more",
    value: function more(length) {
      if (this.offset + length > this.buffer.byteLength) {
        throw new Error("Request more than currently allocated buffer");
      }

      var newBuf = this.buffer.slice(this.offset, this.offset + length);
      this.increment(length);
      return new ReadBufferStream(newBuf);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.offset = 0;
      return this;
    }
  }, {
    key: "end",
    value: function end() {
      return this.offset >= this.buffer.byteLength;
    }
  }, {
    key: "toEnd",
    value: function toEnd() {
      this.offset = this.buffer.byteLength;
    }
  }]);

  return BufferStream;
}();

var ReadBufferStream =
/*#__PURE__*/
function (_BufferStream) {
  _inherits(ReadBufferStream, _BufferStream);

  function ReadBufferStream(buffer, littleEndian) {
    var _this;

    _classCallCheck(this, ReadBufferStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReadBufferStream).call(this, buffer, littleEndian));
    _this.size = _this.buffer.byteLength;
    return _this;
  }

  return ReadBufferStream;
}(BufferStream);

var WriteBufferStream =
/*#__PURE__*/
function (_BufferStream2) {
  _inherits(WriteBufferStream, _BufferStream2);

  function WriteBufferStream(buffer, littleEndian) {
    var _this2;

    _classCallCheck(this, WriteBufferStream);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WriteBufferStream).call(this, buffer, littleEndian));
    _this2.size = 0;
    return _this2;
  }

  return WriteBufferStream;
}(BufferStream);

function paddingLeft(paddingValue, string) {
  return String(paddingValue + string).slice(-paddingValue.length);
}

function rtrim(str) {
  return str.replace(/\s*$/g, "");
}

function tagFromNumbers(group, element) {
  return new Tag((group << 16 | element) >>> 0);
}

function readTag(stream) {
  var group = stream.readUint16(),
      element = stream.readUint16();
  var tag = tagFromNumbers(group, element);
  return tag;
}

var binaryVRs = ["FL", "FD", "SL", "SS", "UL", "US", "AT"],
    explicitVRs = ["OB", "OW", "OF", "SQ", "UC", "UR", "UT", "UN"],
    singleVRs = ["SQ", "OF", "OW", "OB", "UN"];

var ValueRepresentation =
/*#__PURE__*/
function () {
  function ValueRepresentation(type) {
    _classCallCheck(this, ValueRepresentation);

    this.type = type;
    this.multi = false;
  }

  _createClass(ValueRepresentation, [{
    key: "isBinary",
    value: function isBinary() {
      return binaryVRs.indexOf(this.type) != -1;
    }
  }, {
    key: "allowMultiple",
    value: function allowMultiple() {
      return !this.isBinary() && singleVRs.indexOf(this.type) == -1;
    }
  }, {
    key: "isExplicit",
    value: function isExplicit() {
      return explicitVRs.indexOf(this.type) != -1;
    }
  }, {
    key: "read",
    value: function read(stream, length, syntax) {
      if (this.fixed && this.maxLength) {
        if (!length) return this.defaultValue;
        if (this.maxLength != length) lib.error("Invalid length for fixed length tag, vr " + this.type + ", length " + this.maxLength + " != " + length);
      }

      return this.readBytes(stream, length, syntax);
    }
  }, {
    key: "readBytes",
    value: function readBytes(stream, length) {
      return stream.readString(length);
    }
  }, {
    key: "readNullPaddedString",
    value: function readNullPaddedString(stream, length) {
      if (!length) return "";
      var str = stream.readString(length - 1);

      if (stream.readUint8() != 0) {
        stream.increment(-1);
        str += stream.readString(1);
      }

      return str;
    }
  }, {
    key: "writeFilledString",
    value: function writeFilledString(stream, value, length) {
      if (length < this.maxLength && length >= 0) {
        var written = 0;
        if (length > 0) written += stream.writeString(value);
        var zeroLength = this.maxLength - length;
        written += stream.writeHex(this.fillWith.repeat(zeroLength));
        return written;
      } else if (length == this.maxLength) {
        return stream.writeString(value);
      } else {
        throw "Length mismatch";
      }
    }
  }, {
    key: "write",
    value: function write(stream, type) {
      var args = Array.from(arguments);

      if (args[2] === null || args[2] === "" || args[2] === undefined) {
        return [stream.writeString("")];
      } else {
        var written = [],
            valueArgs = args.slice(2),
            func = stream["write" + type];

        if (Array.isArray(valueArgs[0])) {
          if (valueArgs[0].length < 1) {
            written.push(0);
          } else {
            var self = this;
            valueArgs[0].forEach(function (v, k) {
              if (self.allowMultiple() && k > 0) {
                stream.writeHex("5C"); //byteCount++;
              }

              var singularArgs = [v].concat(valueArgs.slice(1));
              var byteCount = func.apply(stream, singularArgs);
              written.push(byteCount);
            });
          }
        } else {
          written.push(func.apply(stream, valueArgs));
        }

        return written;
      }
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value, lengths) {
      var valid = true,
          valarr = Array.isArray(value) ? value : [value],
          total = 0;

      for (var i = 0; i < valarr.length; i++) {
        var checkValue = valarr[i],
            checklen = lengths[i],
            isString = false,
            displaylen = checklen;

        if (this.checkLength) {
          valid = this.checkLength(checkValue);
        } else if (this.maxCharLength) {
          var check = this.maxCharLength; //, checklen = checkValue.length;

          valid = checkValue.length <= check;
          displaylen = checkValue.length;
          isString = true;
        } else if (this.maxLength) {
          valid = checklen <= this.maxLength;
        }

        var errmsg = "Value exceeds max length, vr: " + this.type + ", value: " + checkValue + ", length: " + displaylen;

        if (!valid) {
          if (isString) lib.log(errmsg);else throw new Error(errmsg);
        }

        total += checklen;
      }

      if (this.allowMultiple()) {
        total += valarr.length ? valarr.length - 1 : 0;
      } //check for odd


      var written = total;

      if (total & 1) {
        stream.writeHex(this.padByte);
        written++;
      }

      return written;
    }
  }], [{
    key: "createByTypeString",
    value: function createByTypeString(type) {
      var vr = null;
      if (type == "AE") vr = new ApplicationEntity();else if (type == "AS") vr = new AgeString();else if (type == "AT") vr = new AttributeTag();else if (type == "CS") vr = new CodeString();else if (type == "DA") vr = new DateValue();else if (type == "DS") vr = new DecimalString();else if (type == "DT") vr = new DateTime();else if (type == "FL") vr = new FloatingPointSingle();else if (type == "FD") vr = new FloatingPointDouble();else if (type == "IS") vr = new IntegerString();else if (type == "LO") vr = new LongString();else if (type == "LT") vr = new LongText();else if (type == "OB") vr = new OtherByteString();else if (type == "OD") vr = new OtherDoubleString();else if (type == "OF") vr = new OtherFloatString();else if (type == "OW") vr = new OtherWordString();else if (type == "PN") vr = new PersonName();else if (type == "SH") vr = new ShortString();else if (type == "SL") vr = new SignedLong();else if (type == "SQ") vr = new SequenceOfItems();else if (type == "SS") vr = new SignedShort();else if (type == "ST") vr = new ShortText();else if (type == "TM") vr = new TimeValue();else if (type == "UC") vr = new UnlimitedCharacters();else if (type == "UI") vr = new UniqueIdentifier();else if (type == "UL") vr = new UnsignedLong();else if (type == "UN") vr = new UnknownValue();else if (type == "UR") vr = new UniversalResource();else if (type == "US") vr = new UnsignedShort();else if (type == "UT") vr = new UnlimitedText();else if (type == "ox") {
        // TODO: determine VR based on context (could be 1 byte pixel data)
        // https://github.com/dgobbi/vtk-dicom/issues/38
        lib.error("Invalid vr type " + type + " - using OW");
        vr = new OtherWordString();
      } else if (type == "xs") {
        lib.error("Invalid vr type " + type + " - using US");
        vr = new UnsignedShort();
      } else {
        lib.error("Invalid vr type " + type + " - using UN");
        vr = new UnknownValue();
      }
      return vr;
    }
  }]);

  return ValueRepresentation;
}();

var StringRepresentation =
/*#__PURE__*/
function (_ValueRepresentation) {
  _inherits(StringRepresentation, _ValueRepresentation);

  function StringRepresentation(type) {
    _classCallCheck(this, StringRepresentation);

    return _possibleConstructorReturn(this, _getPrototypeOf(StringRepresentation).call(this, type));
  }

  _createClass(StringRepresentation, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return stream.readString(length);
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      var written = _get(_getPrototypeOf(StringRepresentation.prototype), "write", this).call(this, stream, "String", value);

      return _get(_getPrototypeOf(StringRepresentation.prototype), "writeBytes", this).call(this, stream, value, written);
    }
  }]);

  return StringRepresentation;
}(ValueRepresentation);

var BinaryRepresentation =
/*#__PURE__*/
function (_ValueRepresentation2) {
  _inherits(BinaryRepresentation, _ValueRepresentation2);

  function BinaryRepresentation(type) {
    _classCallCheck(this, BinaryRepresentation);

    return _possibleConstructorReturn(this, _getPrototypeOf(BinaryRepresentation).call(this, type));
  }

  _createClass(BinaryRepresentation, [{
    key: "writeBytes",
    value: function writeBytes(stream, value, syntax, isEncapsulated) {
      var i;
      var binaryStream;

      if (isEncapsulated) {
        var fragmentSize = 1024 * 20,
            frames = value.length,
            startOffset = [];
        binaryStream = new WriteBufferStream(1024 * 1024 * 20, stream.isLittleEndian);

        for (i = 0; i < frames; i++) {
          startOffset.push(binaryStream.size);
          var frameBuffer = value[i],
              frameStream = new ReadBufferStream(frameBuffer),
              fragmentsLength = Math.ceil(frameStream.size / fragmentSize);

          for (var j = 0, fragmentStart = 0; j < fragmentsLength; j++) {
            var fragmentEnd = fragmentStart + fragmentSize;

            if (j == fragmentsLength - 1) {
              fragmentEnd = frameStream.size;
            }

            var fragStream = new ReadBufferStream(frameStream.getBuffer(fragmentStart, fragmentEnd));
            fragmentStart = fragmentEnd;
            binaryStream.writeUint16(0xfffe);
            binaryStream.writeUint16(0xe000);
            binaryStream.writeUint32(fragStream.size);
            binaryStream.concat(fragStream);
          }
        }

        stream.writeUint16(0xfffe);
        stream.writeUint16(0xe000);
        stream.writeUint32(startOffset.length * 4);

        for (i = 0; i < startOffset.length; i++) {
          stream.writeUint32(startOffset[i]);
        }

        stream.concat(binaryStream);
        stream.writeUint16(0xfffe);
        stream.writeUint16(0xe0dd);
        stream.writeUint32(0x0);
        var written = 8 + binaryStream.size + startOffset.length * 4 + 8;

        if (written & 1) {
          stream.writeHex(this.padByte);
          written++;
        }

        return 0xffffffff;
      } else {
        var binaryData = value[0];
        binaryStream = new ReadBufferStream(binaryData);
        stream.concat(binaryStream);
        return _get(_getPrototypeOf(BinaryRepresentation.prototype), "writeBytes", this).call(this, stream, binaryData, [binaryStream.size]);
      }
    }
  }, {
    key: "readBytes",
    value: function readBytes(stream, length) {
      if (length == 0xffffffff) {
        var itemTagValue = Tag.readTag(stream),
            frames = [];

        if (itemTagValue.is(0xfffee000)) {
          var itemLength = stream.readUint32(),
              numOfFrames = 1,
              offsets = [];

          if (itemLength > 0x0) {
            //has frames
            numOfFrames = itemLength / 4;
            var i = 0;

            while (i++ < numOfFrames) {
              offsets.push(stream.readUint32());
            }
          } else {
            offsets = [0];
          }

          for (var _i = 0; _i < offsets.length; _i++) {
            var nextTag = Tag.readTag(stream);

            if (!nextTag.is(0xfffee000)) {
              break;
            }

            var frameItemLength = stream.readUint32();
            var fragmentStream = stream.more(frameItemLength);
            frames.push(fragmentStream.buffer);
          } // Read SequenceDelimitationItem Tag


          stream.readUint32(); // Read SequenceDelimitationItem value.

          stream.readUint32();
        } else {
          throw new Error("Item tag not found after undefined binary length");
        }

        return frames;
      } else {
        var bytes;
        /*if (this.type == 'OW') {
            bytes = stream.readUint16Array(length);
        } else if (this.type == 'OB') {
            bytes = stream.readUint8Array(length);
        }*/

        bytes = stream.more(length).buffer;
        return [bytes];
      }
    }
  }]);

  return BinaryRepresentation;
}(ValueRepresentation);

var ApplicationEntity =
/*#__PURE__*/
function (_StringRepresentation) {
  _inherits(ApplicationEntity, _StringRepresentation);

  function ApplicationEntity() {
    var _this;

    _classCallCheck(this, ApplicationEntity);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationEntity).call(this, "AE"));
    _this.maxLength = 16;
    _this.padByte = "20";
    _this.fillWith = "20";
    return _this;
  }

  _createClass(ApplicationEntity, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return stream.readString(length).trim();
    }
  }]);

  return ApplicationEntity;
}(StringRepresentation);

var CodeString =
/*#__PURE__*/
function (_StringRepresentation2) {
  _inherits(CodeString, _StringRepresentation2);

  function CodeString() {
    var _this2;

    _classCallCheck(this, CodeString);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CodeString).call(this, "CS"));
    _this2.maxLength = 16;
    _this2.padByte = "20";
    return _this2;
  }

  _createClass(CodeString, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length).trim();
      return stream.readString(length).trim();
    }
  }]);

  return CodeString;
}(StringRepresentation);

var AgeString =
/*#__PURE__*/
function (_StringRepresentation3) {
  _inherits(AgeString, _StringRepresentation3);

  function AgeString() {
    var _this3;

    _classCallCheck(this, AgeString);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AgeString).call(this, "AS"));
    _this3.maxLength = 4;
    _this3.padByte = "20";
    _this3.fixed = true;
    _this3.defaultValue = "";
    return _this3;
  }

  return AgeString;
}(StringRepresentation);

var AttributeTag =
/*#__PURE__*/
function (_ValueRepresentation3) {
  _inherits(AttributeTag, _ValueRepresentation3);

  function AttributeTag() {
    var _this4;

    _classCallCheck(this, AttributeTag);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(AttributeTag).call(this, "AT"));
    _this4.maxLength = 4;
    _this4.valueLength = 4;
    _this4.padByte = "00";
    _this4.fixed = true;
    return _this4;
  }

  _createClass(AttributeTag, [{
    key: "readBytes",
    value: function readBytes(stream) {
      var group = stream.readUint16(),
          element = stream.readUint16();
      return tagFromNumbers(group, element).value;
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(AttributeTag.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(AttributeTag.prototype), "write", this).call(this, stream, "Uint32", value));
    }
  }]);

  return AttributeTag;
}(ValueRepresentation);

var DateValue =
/*#__PURE__*/
function (_StringRepresentation4) {
  _inherits(DateValue, _StringRepresentation4);

  function DateValue(value) {
    var _this5;

    _classCallCheck(this, DateValue);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(DateValue).call(this, "DA", value));
    _this5.maxLength = 18;
    _this5.padByte = "20"; //this.fixed = true;

    _this5.defaultValue = "";
    return _this5;
  }

  return DateValue;
}(StringRepresentation);

var DecimalString =
/*#__PURE__*/
function (_StringRepresentation5) {
  _inherits(DecimalString, _StringRepresentation5);

  function DecimalString() {
    var _this6;

    _classCallCheck(this, DecimalString);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(DecimalString).call(this, "DS"));
    _this6.maxLength = 16;
    _this6.padByte = "20";
    return _this6;
  }

  _createClass(DecimalString, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length).trim();
      var ds = stream.readString(length);
      ds = ds.replace(/[^0-9.\\\-+e]/gi, "");
      return ds;
    }
  }]);

  return DecimalString;
}(StringRepresentation);

var DateTime =
/*#__PURE__*/
function (_StringRepresentation6) {
  _inherits(DateTime, _StringRepresentation6);

  function DateTime() {
    var _this7;

    _classCallCheck(this, DateTime);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(DateTime).call(this, "DT"));
    _this7.maxLength = 26;
    _this7.padByte = "20";
    return _this7;
  }

  return DateTime;
}(StringRepresentation);

var FloatingPointSingle =
/*#__PURE__*/
function (_ValueRepresentation4) {
  _inherits(FloatingPointSingle, _ValueRepresentation4);

  function FloatingPointSingle() {
    var _this8;

    _classCallCheck(this, FloatingPointSingle);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(FloatingPointSingle).call(this, "FL"));
    _this8.maxLength = 4;
    _this8.padByte = "00";
    _this8.fixed = true;
    _this8.defaultValue = 0.0;
    return _this8;
  }

  _createClass(FloatingPointSingle, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readFloat();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(FloatingPointSingle.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(FloatingPointSingle.prototype), "write", this).call(this, stream, "Float", value));
    }
  }]);

  return FloatingPointSingle;
}(ValueRepresentation);

var FloatingPointDouble =
/*#__PURE__*/
function (_ValueRepresentation5) {
  _inherits(FloatingPointDouble, _ValueRepresentation5);

  function FloatingPointDouble() {
    var _this9;

    _classCallCheck(this, FloatingPointDouble);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(FloatingPointDouble).call(this, "FD"));
    _this9.maxLength = 8;
    _this9.padByte = "00";
    _this9.fixed = true;
    _this9.defaultValue = 0.0;
    return _this9;
  }

  _createClass(FloatingPointDouble, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readDouble();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(FloatingPointDouble.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(FloatingPointDouble.prototype), "write", this).call(this, stream, "Double", value));
    }
  }]);

  return FloatingPointDouble;
}(ValueRepresentation);

var IntegerString =
/*#__PURE__*/
function (_StringRepresentation7) {
  _inherits(IntegerString, _StringRepresentation7);

  function IntegerString() {
    var _this10;

    _classCallCheck(this, IntegerString);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(IntegerString).call(this, "IS"));
    _this10.maxLength = 12;
    _this10.padByte = "20";
    return _this10;
  }

  _createClass(IntegerString, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length);
      return stream.readString(length).trim();
    }
  }]);

  return IntegerString;
}(StringRepresentation);

var LongString =
/*#__PURE__*/
function (_StringRepresentation8) {
  _inherits(LongString, _StringRepresentation8);

  function LongString() {
    var _this11;

    _classCallCheck(this, LongString);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(LongString).call(this, "LO"));
    _this11.maxCharLength = 64;
    _this11.padByte = "20";
    return _this11;
  }

  _createClass(LongString, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length).trim();
      return stream.readString(length).trim();
    }
  }]);

  return LongString;
}(StringRepresentation);

var LongText =
/*#__PURE__*/
function (_StringRepresentation9) {
  _inherits(LongText, _StringRepresentation9);

  function LongText() {
    var _this12;

    _classCallCheck(this, LongText);

    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(LongText).call(this, "LT"));
    _this12.maxCharLength = 10240;
    _this12.padByte = "20";
    return _this12;
  }

  _createClass(LongText, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return rtrim(this.readNullPaddedString(stream, length));
      return rtrim(stream.readString(length));
    }
  }]);

  return LongText;
}(StringRepresentation);

var PersonName =
/*#__PURE__*/
function (_StringRepresentation10) {
  _inherits(PersonName, _StringRepresentation10);

  function PersonName() {
    var _this13;

    _classCallCheck(this, PersonName);

    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(PersonName).call(this, "PN"));
    _this13.maxLength = null;
    _this13.padByte = "20";
    return _this13;
  }

  _createClass(PersonName, [{
    key: "checkLength",
    value: function checkLength(value) {
      var components = [];

      if (_typeof(value) === "object" && value !== null) {
        // In DICOM JSON, components are encoded as a mapping (object),
        // where the keys are one or more of the following: "Alphabetic",
        // "Ideographic", "Phonetic".
        // http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_F.2.2.html
        components = Object.keys(value).forEach(function (key) {
          return value[key];
        });
      } else if (typeof value === "string" || value instanceof String) {
        // In DICOM Part10, components are encoded as a string,
        // where components ("Alphabetic", "Ideographic", "Phonetic")
        // are separated by the "=" delimeter.
        // http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.2.html
        components = value.split(/\=/);
      }

      for (var i in components) {
        var cmp = components[i];
        if (cmp.length > 64) return false;
      }

      return true;
    }
  }, {
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return rtrim(this.readNullPaddedString(stream, length));
      return rtrim(stream.readString(length));
    }
  }]);

  return PersonName;
}(StringRepresentation);

var ShortString =
/*#__PURE__*/
function (_StringRepresentation11) {
  _inherits(ShortString, _StringRepresentation11);

  function ShortString() {
    var _this14;

    _classCallCheck(this, ShortString);

    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(ShortString).call(this, "SH"));
    _this14.maxCharLength = 16;
    _this14.padByte = "20";
    return _this14;
  }

  _createClass(ShortString, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length).trim();
      return stream.readString(length).trim();
    }
  }]);

  return ShortString;
}(StringRepresentation);

var SignedLong =
/*#__PURE__*/
function (_ValueRepresentation6) {
  _inherits(SignedLong, _ValueRepresentation6);

  function SignedLong() {
    var _this15;

    _classCallCheck(this, SignedLong);

    _this15 = _possibleConstructorReturn(this, _getPrototypeOf(SignedLong).call(this, "SL"));
    _this15.maxLength = 4;
    _this15.padByte = "00";
    _this15.fixed = true;
    _this15.defaultValue = 0;
    return _this15;
  }

  _createClass(SignedLong, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readInt32();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(SignedLong.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(SignedLong.prototype), "write", this).call(this, stream, "Int32", value));
    }
  }]);

  return SignedLong;
}(ValueRepresentation);

var SequenceOfItems =
/*#__PURE__*/
function (_ValueRepresentation7) {
  _inherits(SequenceOfItems, _ValueRepresentation7);

  function SequenceOfItems() {
    var _this16;

    _classCallCheck(this, SequenceOfItems);

    _this16 = _possibleConstructorReturn(this, _getPrototypeOf(SequenceOfItems).call(this, "SQ"));
    _this16.maxLength = null;
    _this16.padByte = "00";
    _this16.noMultiple = true;
    return _this16;
  }

  _createClass(SequenceOfItems, [{
    key: "readBytes",
    value: function readBytes(stream, sqlength, syntax) {
      if (sqlength == 0x0) {
        return []; //contains no dataset
      } else {
        var undefLength = sqlength == 0xffffffff,
            elements = [],
            read = 0;
        /* eslint-disable-next-line no-constant-condition */

        while (true) {
          var tag = readTag(stream),
              length = null;
          read += 4;

          if (tag.is(0xfffee0dd)) {
            stream.readUint32();
            break;
          } else if (!undefLength && read == sqlength) {
            break;
          } else if (tag.is(0xfffee000)) {
            length = stream.readUint32();
            read += 4;
            var itemStream = null,
                toRead = 0,
                undef = length == 0xffffffff;

            if (undef) {
              var stack = 0;
              /* eslint-disable-next-line no-constant-condition */

              while (1) {
                var g = stream.readUint16();

                if (g == 0xfffe) {
                  var ge = stream.readUint16();

                  if (ge == 0xe00d) {
                    stack--;

                    if (stack < 0) {
                      stream.increment(4);
                      read += 8;
                      break;
                    } else {
                      toRead += 4;
                    }
                  } else if (ge == 0xe000) {
                    stack++;
                    toRead += 4;
                  } else {
                    toRead += 2;
                    stream.increment(-2);
                  }
                } else {
                  toRead += 2;
                }
              }
            } else {
              toRead = length;
            }

            if (toRead) {
              stream.increment(undef ? -toRead - 8 : 0);
              itemStream = stream.more(toRead); //parseElements

              read += toRead;
              if (undef) stream.increment(8);
              var items = DicomMessage.read(itemStream, syntax);
              elements.push(items);
            }

            if (!undefLength && read == sqlength) {
              break;
            }
          }
        }

        return elements;
      }
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value, syntax) {
      var written = 0;

      if (value) {
        for (var i = 0; i < value.length; i++) {
          var item = value[i];

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xfffe);

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xe000);

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint32", 0xffffffff);

          written += DicomMessage.write(item, stream, syntax);

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xfffe);

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xe00d);

          _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint32", 0x00000000);

          written += 16;
        }
      }

      _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xfffe);

      _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint16", 0xe0dd);

      _get(_getPrototypeOf(SequenceOfItems.prototype), "write", this).call(this, stream, "Uint32", 0x00000000);

      written += 8;
      return _get(_getPrototypeOf(SequenceOfItems.prototype), "writeBytes", this).call(this, stream, value, [written]);
    }
  }]);

  return SequenceOfItems;
}(ValueRepresentation);

var SignedShort =
/*#__PURE__*/
function (_ValueRepresentation8) {
  _inherits(SignedShort, _ValueRepresentation8);

  function SignedShort() {
    var _this17;

    _classCallCheck(this, SignedShort);

    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(SignedShort).call(this, "SS"));
    _this17.maxLength = 2;
    _this17.valueLength = 2;
    _this17.padByte = "00";
    _this17.fixed = true;
    _this17.defaultValue = 0;
    return _this17;
  }

  _createClass(SignedShort, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readInt16();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(SignedShort.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(SignedShort.prototype), "write", this).call(this, stream, "Int16", value));
    }
  }]);

  return SignedShort;
}(ValueRepresentation);

var ShortText =
/*#__PURE__*/
function (_StringRepresentation12) {
  _inherits(ShortText, _StringRepresentation12);

  function ShortText() {
    var _this18;

    _classCallCheck(this, ShortText);

    _this18 = _possibleConstructorReturn(this, _getPrototypeOf(ShortText).call(this, "ST"));
    _this18.maxCharLength = 1024;
    _this18.padByte = "20";
    return _this18;
  }

  _createClass(ShortText, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return rtrim(this.readNullPaddedString(stream, length));
      return rtrim(stream.readString(length));
    }
  }]);

  return ShortText;
}(StringRepresentation);

var TimeValue =
/*#__PURE__*/
function (_StringRepresentation13) {
  _inherits(TimeValue, _StringRepresentation13);

  function TimeValue() {
    var _this19;

    _classCallCheck(this, TimeValue);

    _this19 = _possibleConstructorReturn(this, _getPrototypeOf(TimeValue).call(this, "TM"));
    _this19.maxLength = 14;
    _this19.padByte = "20";
    return _this19;
  }

  _createClass(TimeValue, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return rtrim(stream.readString(length));
    }
  }]);

  return TimeValue;
}(StringRepresentation);

var UnlimitedCharacters =
/*#__PURE__*/
function (_StringRepresentation14) {
  _inherits(UnlimitedCharacters, _StringRepresentation14);

  function UnlimitedCharacters() {
    var _this20;

    _classCallCheck(this, UnlimitedCharacters);

    _this20 = _possibleConstructorReturn(this, _getPrototypeOf(UnlimitedCharacters).call(this, "UC"));
    _this20.maxLength = null;
    _this20.multi = true;
    _this20.padByte = "20";
    return _this20;
  }

  _createClass(UnlimitedCharacters, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return rtrim(stream.readString(length));
    }
  }]);

  return UnlimitedCharacters;
}(StringRepresentation);

var UnlimitedText =
/*#__PURE__*/
function (_StringRepresentation15) {
  _inherits(UnlimitedText, _StringRepresentation15);

  function UnlimitedText() {
    var _this21;

    _classCallCheck(this, UnlimitedText);

    _this21 = _possibleConstructorReturn(this, _getPrototypeOf(UnlimitedText).call(this, "UT"));
    _this21.maxLength = null;
    _this21.padByte = "20";
    return _this21;
  }

  _createClass(UnlimitedText, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      //return this.readNullPaddedString(stream, length);
      return rtrim(stream.readString(length));
    }
  }]);

  return UnlimitedText;
}(StringRepresentation);

var UnsignedShort =
/*#__PURE__*/
function (_ValueRepresentation9) {
  _inherits(UnsignedShort, _ValueRepresentation9);

  function UnsignedShort() {
    var _this22;

    _classCallCheck(this, UnsignedShort);

    _this22 = _possibleConstructorReturn(this, _getPrototypeOf(UnsignedShort).call(this, "US"));
    _this22.maxLength = 2;
    _this22.padByte = "00";
    _this22.fixed = true;
    _this22.defaultValue = 0;
    return _this22;
  }

  _createClass(UnsignedShort, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readUint16();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(UnsignedShort.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(UnsignedShort.prototype), "write", this).call(this, stream, "Uint16", value));
    }
  }]);

  return UnsignedShort;
}(ValueRepresentation);

var UnsignedLong =
/*#__PURE__*/
function (_ValueRepresentation10) {
  _inherits(UnsignedLong, _ValueRepresentation10);

  function UnsignedLong() {
    var _this23;

    _classCallCheck(this, UnsignedLong);

    _this23 = _possibleConstructorReturn(this, _getPrototypeOf(UnsignedLong).call(this, "UL"));
    _this23.maxLength = 4;
    _this23.padByte = "00";
    _this23.fixed = true;
    _this23.defaultValue = 0;
    return _this23;
  }

  _createClass(UnsignedLong, [{
    key: "readBytes",
    value: function readBytes(stream) {
      return stream.readUint32();
    }
  }, {
    key: "writeBytes",
    value: function writeBytes(stream, value) {
      return _get(_getPrototypeOf(UnsignedLong.prototype), "writeBytes", this).call(this, stream, value, _get(_getPrototypeOf(UnsignedLong.prototype), "write", this).call(this, stream, "Uint32", value));
    }
  }]);

  return UnsignedLong;
}(ValueRepresentation);

var UniqueIdentifier =
/*#__PURE__*/
function (_StringRepresentation16) {
  _inherits(UniqueIdentifier, _StringRepresentation16);

  function UniqueIdentifier() {
    var _this24;

    _classCallCheck(this, UniqueIdentifier);

    _this24 = _possibleConstructorReturn(this, _getPrototypeOf(UniqueIdentifier).call(this, "UI"));
    _this24.maxLength = 64;
    _this24.padByte = "00";
    return _this24;
  }

  _createClass(UniqueIdentifier, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return this.readNullPaddedString(stream, length).replace(/[^0-9.]/g, "");
    }
  }]);

  return UniqueIdentifier;
}(StringRepresentation);

var UniversalResource =
/*#__PURE__*/
function (_StringRepresentation17) {
  _inherits(UniversalResource, _StringRepresentation17);

  function UniversalResource() {
    var _this25;

    _classCallCheck(this, UniversalResource);

    _this25 = _possibleConstructorReturn(this, _getPrototypeOf(UniversalResource).call(this, "UR"));
    _this25.maxLength = null;
    _this25.padByte = "20";
    return _this25;
  }

  _createClass(UniversalResource, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return stream.readString(length);
    }
  }]);

  return UniversalResource;
}(StringRepresentation);

var UnknownValue =
/*#__PURE__*/
function (_StringRepresentation18) {
  _inherits(UnknownValue, _StringRepresentation18);

  function UnknownValue() {
    var _this26;

    _classCallCheck(this, UnknownValue);

    _this26 = _possibleConstructorReturn(this, _getPrototypeOf(UnknownValue).call(this, "UN"));
    _this26.maxLength = null;
    _this26.padByte = "00";
    _this26.noMultiple = true;
    return _this26;
  }

  _createClass(UnknownValue, [{
    key: "readBytes",
    value: function readBytes(stream, length) {
      return stream.readString(length);
    }
  }]);

  return UnknownValue;
}(StringRepresentation);

var OtherWordString =
/*#__PURE__*/
function (_BinaryRepresentation) {
  _inherits(OtherWordString, _BinaryRepresentation);

  function OtherWordString() {
    var _this27;

    _classCallCheck(this, OtherWordString);

    _this27 = _possibleConstructorReturn(this, _getPrototypeOf(OtherWordString).call(this, "OW"));
    _this27.maxLength = null;
    _this27.padByte = "00";
    _this27.noMultiple = true;
    return _this27;
  }

  return OtherWordString;
}(BinaryRepresentation);

var OtherByteString =
/*#__PURE__*/
function (_BinaryRepresentation2) {
  _inherits(OtherByteString, _BinaryRepresentation2);

  function OtherByteString() {
    var _this28;

    _classCallCheck(this, OtherByteString);

    _this28 = _possibleConstructorReturn(this, _getPrototypeOf(OtherByteString).call(this, "OB"));
    _this28.maxLength = null;
    _this28.padByte = "00";
    _this28.noMultiple = true;
    return _this28;
  }

  return OtherByteString;
}(BinaryRepresentation);

var OtherDoubleString =
/*#__PURE__*/
function (_BinaryRepresentation3) {
  _inherits(OtherDoubleString, _BinaryRepresentation3);

  function OtherDoubleString() {
    var _this29;

    _classCallCheck(this, OtherDoubleString);

    _this29 = _possibleConstructorReturn(this, _getPrototypeOf(OtherDoubleString).call(this, "OD"));
    _this29.maxLength = null;
    _this29.padByte = "00";
    _this29.noMultiple = true;
    return _this29;
  }

  return OtherDoubleString;
}(BinaryRepresentation);

var OtherFloatString =
/*#__PURE__*/
function (_BinaryRepresentation4) {
  _inherits(OtherFloatString, _BinaryRepresentation4);

  function OtherFloatString() {
    var _this30;

    _classCallCheck(this, OtherFloatString);

    _this30 = _possibleConstructorReturn(this, _getPrototypeOf(OtherFloatString).call(this, "OF"));
    _this30.maxLength = null;
    _this30.padByte = "00";
    _this30.noMultiple = true;
    return _this30;
  }

  return OtherFloatString;
}(BinaryRepresentation);

var IMPLICIT_LITTLE_ENDIAN = "1.2.840.10008.1.2";
var EXPLICIT_LITTLE_ENDIAN = "1.2.840.10008.1.2.1";

var Tag =
/*#__PURE__*/
function () {
  function Tag(value) {
    _classCallCheck(this, Tag);

    this.value = value;
  }

  _createClass(Tag, [{
    key: "toString",
    value: function toString() {
      return "(" + paddingLeft("0000", this.group().toString(16).toUpperCase()) + "," + paddingLeft("0000", this.element().toString(16).toUpperCase()) + ")";
    }
  }, {
    key: "toCleanString",
    value: function toCleanString() {
      return paddingLeft("0000", this.group().toString(16).toUpperCase()) + paddingLeft("0000", this.element().toString(16).toUpperCase());
    }
  }, {
    key: "is",
    value: function is(t) {
      return this.value == t;
    }
  }, {
    key: "group",
    value: function group() {
      return this.value >>> 16;
    }
  }, {
    key: "element",
    value: function element() {
      return this.value & 0xffff;
    }
  }, {
    key: "isPixelDataTag",
    value: function isPixelDataTag() {
      return this.is(0x7fe00010);
    }
  }, {
    key: "write",
    value: function write(stream, vrType, values, syntax) {
      var vr = ValueRepresentation.createByTypeString(vrType),
          useSyntax = DicomMessage._normalizeSyntax(syntax);

      var implicit = useSyntax == IMPLICIT_LITTLE_ENDIAN ? true : false,
          isLittleEndian = useSyntax == IMPLICIT_LITTLE_ENDIAN || useSyntax == EXPLICIT_LITTLE_ENDIAN ? true : false,
          isEncapsulated = DicomMessage.isEncapsulated(syntax);
      var oldEndian = stream.isLittleEndian;
      stream.setEndian(isLittleEndian);
      stream.writeUint16(this.group());
      stream.writeUint16(this.element());
      var tagStream = new WriteBufferStream(256),
          valueLength;
      tagStream.setEndian(isLittleEndian);

      if (vrType == "OW" || vrType == "OB") {
        valueLength = vr.writeBytes(tagStream, values, useSyntax, isEncapsulated);
      } else {
        valueLength = vr.writeBytes(tagStream, values, useSyntax);
      }

      if (vrType == "SQ") {
        valueLength = 0xffffffff;
      }

      var written = tagStream.size + 4;

      if (implicit) {
        stream.writeUint32(valueLength);
        written += 4;
      } else {
        if (vr.isExplicit()) {
          stream.writeString(vr.type);
          stream.writeHex("0000");
          stream.writeUint32(valueLength);
          written += 8;
        } else {
          stream.writeString(vr.type);
          stream.writeUint16(valueLength);
          written += 4;
        }
      }

      stream.concat(tagStream);
      stream.setEndian(oldEndian);
      return written;
    }
  }], [{
    key: "fromString",
    value: function fromString(str) {
      var group = parseInt(str.substring(0, 4), 16),
          element = parseInt(str.substring(4), 16);
      return Tag.fromNumbers(group, element);
    }
  }, {
    key: "fromPString",
    value: function fromPString(str) {
      var group = parseInt(str.substring(1, 5), 16),
          element = parseInt(str.substring(6, 10), 16);
      return Tag.fromNumbers(group, element);
    }
  }, {
    key: "fromNumbers",
    value: function fromNumbers(group, element) {
      return new Tag((group << 16 | element) >>> 0);
    }
  }, {
    key: "readTag",
    value: function readTag(stream) {
      var group = stream.readUint16(),
          element = stream.readUint16();
      return Tag.fromNumbers(group, element);
    }
  }]);

  return Tag;
}();

var dictionary={"(0000,0000)":{tag:"(0000,0000)",vr:"UL",name:"CommandGroupLength",vm:"1",version:"DICOM"},"(0000,0002)":{tag:"(0000,0002)",vr:"UI",name:"AffectedSOPClassUID",vm:"1",version:"DICOM"},"(0000,0003)":{tag:"(0000,0003)",vr:"UI",name:"RequestedSOPClassUID",vm:"1",version:"DICOM"},"(0000,0100)":{tag:"(0000,0100)",vr:"US",name:"CommandField",vm:"1",version:"DICOM"},"(0000,0110)":{tag:"(0000,0110)",vr:"US",name:"MessageID",vm:"1",version:"DICOM"},"(0000,0120)":{tag:"(0000,0120)",vr:"US",name:"MessageIDBeingRespondedTo",vm:"1",version:"DICOM"},"(0000,0600)":{tag:"(0000,0600)",vr:"AE",name:"MoveDestination",vm:"1",version:"DICOM"},"(0000,0700)":{tag:"(0000,0700)",vr:"US",name:"Priority",vm:"1",version:"DICOM"},"(0000,0800)":{tag:"(0000,0800)",vr:"US",name:"CommandDataSetType",vm:"1",version:"DICOM"},"(0000,0900)":{tag:"(0000,0900)",vr:"US",name:"Status",vm:"1",version:"DICOM"},"(0000,0901)":{tag:"(0000,0901)",vr:"AT",name:"OffendingElement",vm:"1-n",version:"DICOM"},"(0000,0902)":{tag:"(0000,0902)",vr:"LO",name:"ErrorComment",vm:"1",version:"DICOM"},"(0000,0903)":{tag:"(0000,0903)",vr:"US",name:"ErrorID",vm:"1",version:"DICOM"},"(0000,1000)":{tag:"(0000,1000)",vr:"UI",name:"AffectedSOPInstanceUID",vm:"1",version:"DICOM"},"(0000,1001)":{tag:"(0000,1001)",vr:"UI",name:"RequestedSOPInstanceUID",vm:"1",version:"DICOM"},"(0000,1002)":{tag:"(0000,1002)",vr:"US",name:"EventTypeID",vm:"1",version:"DICOM"},"(0000,1005)":{tag:"(0000,1005)",vr:"AT",name:"AttributeIdentifierList",vm:"1-n",version:"DICOM"},"(0000,1008)":{tag:"(0000,1008)",vr:"US",name:"ActionTypeID",vm:"1",version:"DICOM"},"(0000,1020)":{tag:"(0000,1020)",vr:"US",name:"NumberOfRemainingSuboperations",vm:"1",version:"DICOM"},"(0000,1021)":{tag:"(0000,1021)",vr:"US",name:"NumberOfCompletedSuboperations",vm:"1",version:"DICOM"},"(0000,1022)":{tag:"(0000,1022)",vr:"US",name:"NumberOfFailedSuboperations",vm:"1",version:"DICOM"},"(0000,1023)":{tag:"(0000,1023)",vr:"US",name:"NumberOfWarningSuboperations",vm:"1",version:"DICOM"},"(0000,1030)":{tag:"(0000,1030)",vr:"AE",name:"MoveOriginatorApplicationEntityTitle",vm:"1",version:"DICOM"},"(0000,1031)":{tag:"(0000,1031)",vr:"US",name:"MoveOriginatorMessageID",vm:"1",version:"DICOM"},"(0002,0000)":{tag:"(0002,0000)",vr:"UL",name:"FileMetaInformationGroupLength",vm:"1",version:"DICOM"},"(0002,0001)":{tag:"(0002,0001)",vr:"OB",name:"FileMetaInformationVersion",vm:"1",version:"DICOM"},"(0002,0002)":{tag:"(0002,0002)",vr:"UI",name:"MediaStorageSOPClassUID",vm:"1",version:"DICOM"},"(0002,0003)":{tag:"(0002,0003)",vr:"UI",name:"MediaStorageSOPInstanceUID",vm:"1",version:"DICOM"},"(0002,0010)":{tag:"(0002,0010)",vr:"UI",name:"TransferSyntaxUID",vm:"1",version:"DICOM"},"(0002,0012)":{tag:"(0002,0012)",vr:"UI",name:"ImplementationClassUID",vm:"1",version:"DICOM"},"(0002,0013)":{tag:"(0002,0013)",vr:"SH",name:"ImplementationVersionName",vm:"1",version:"DICOM"},"(0002,0016)":{tag:"(0002,0016)",vr:"AE",name:"SourceApplicationEntityTitle",vm:"1",version:"DICOM"},"(0002,0017)":{tag:"(0002,0017)",vr:"AE",name:"SendingApplicationEntityTitle",vm:"1",version:"DICOM"},"(0002,0018)":{tag:"(0002,0018)",vr:"AE",name:"ReceivingApplicationEntityTitle",vm:"1",version:"DICOM"},"(0002,0100)":{tag:"(0002,0100)",vr:"UI",name:"PrivateInformationCreatorUID",vm:"1",version:"DICOM"},"(0002,0102)":{tag:"(0002,0102)",vr:"OB",name:"PrivateInformation",vm:"1",version:"DICOM"},"(0004,1130)":{tag:"(0004,1130)",vr:"CS",name:"FileSetID",vm:"1",version:"DICOM"},"(0004,1141)":{tag:"(0004,1141)",vr:"CS",name:"FileSetDescriptorFileID",vm:"1-8",version:"DICOM"},"(0004,1142)":{tag:"(0004,1142)",vr:"CS",name:"SpecificCharacterSetOfFileSetDescriptorFile",vm:"1",version:"DICOM"},"(0004,1200)":{tag:"(0004,1200)",vr:"up",name:"OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity",vm:"1",version:"DICOM"},"(0004,1202)":{tag:"(0004,1202)",vr:"up",name:"OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity",vm:"1",version:"DICOM"},"(0004,1212)":{tag:"(0004,1212)",vr:"US",name:"FileSetConsistencyFlag",vm:"1",version:"DICOM"},"(0004,1220)":{tag:"(0004,1220)",vr:"SQ",name:"DirectoryRecordSequence",vm:"1",version:"DICOM"},"(0004,1400)":{tag:"(0004,1400)",vr:"up",name:"OffsetOfTheNextDirectoryRecord",vm:"1",version:"DICOM"},"(0004,1410)":{tag:"(0004,1410)",vr:"US",name:"RecordInUseFlag",vm:"1",version:"DICOM"},"(0004,1420)":{tag:"(0004,1420)",vr:"up",name:"OffsetOfReferencedLowerLevelDirectoryEntity",vm:"1",version:"DICOM"},"(0004,1430)":{tag:"(0004,1430)",vr:"CS",name:"DirectoryRecordType",vm:"1",version:"DICOM"},"(0004,1432)":{tag:"(0004,1432)",vr:"UI",name:"PrivateRecordUID",vm:"1",version:"DICOM"},"(0004,1500)":{tag:"(0004,1500)",vr:"CS",name:"ReferencedFileID",vm:"1-8",version:"DICOM"},"(0004,1510)":{tag:"(0004,1510)",vr:"UI",name:"ReferencedSOPClassUIDInFile",vm:"1",version:"DICOM"},"(0004,1511)":{tag:"(0004,1511)",vr:"UI",name:"ReferencedSOPInstanceUIDInFile",vm:"1",version:"DICOM"},"(0004,1512)":{tag:"(0004,1512)",vr:"UI",name:"ReferencedTransferSyntaxUIDInFile",vm:"1",version:"DICOM"},"(0004,151A)":{tag:"(0004,151A)",vr:"UI",name:"ReferencedRelatedGeneralSOPClassUIDInFile",vm:"1-n",version:"DICOM"},"(0008,0005)":{tag:"(0008,0005)",vr:"CS",name:"SpecificCharacterSet",vm:"1-n",version:"DICOM"},"(0008,0006)":{tag:"(0008,0006)",vr:"SQ",name:"LanguageCodeSequence",vm:"1",version:"DICOM"},"(0008,0008)":{tag:"(0008,0008)",vr:"CS",name:"ImageType",vm:"2-n",version:"DICOM"},"(0008,0012)":{tag:"(0008,0012)",vr:"DA",name:"InstanceCreationDate",vm:"1",version:"DICOM"},"(0008,0013)":{tag:"(0008,0013)",vr:"TM",name:"InstanceCreationTime",vm:"1",version:"DICOM"},"(0008,0014)":{tag:"(0008,0014)",vr:"UI",name:"InstanceCreatorUID",vm:"1",version:"DICOM"},"(0008,0015)":{tag:"(0008,0015)",vr:"DT",name:"InstanceCoercionDateTime",vm:"1",version:"DICOM"},"(0008,0016)":{tag:"(0008,0016)",vr:"UI",name:"SOPClassUID",vm:"1",version:"DICOM"},"(0008,0018)":{tag:"(0008,0018)",vr:"UI",name:"SOPInstanceUID",vm:"1",version:"DICOM"},"(0008,001A)":{tag:"(0008,001A)",vr:"UI",name:"RelatedGeneralSOPClassUID",vm:"1-n",version:"DICOM"},"(0008,001B)":{tag:"(0008,001B)",vr:"UI",name:"OriginalSpecializedSOPClassUID",vm:"1",version:"DICOM"},"(0008,0020)":{tag:"(0008,0020)",vr:"DA",name:"StudyDate",vm:"1",version:"DICOM"},"(0008,0021)":{tag:"(0008,0021)",vr:"DA",name:"SeriesDate",vm:"1",version:"DICOM"},"(0008,0022)":{tag:"(0008,0022)",vr:"DA",name:"AcquisitionDate",vm:"1",version:"DICOM"},"(0008,0023)":{tag:"(0008,0023)",vr:"DA",name:"ContentDate",vm:"1",version:"DICOM"},"(0008,002A)":{tag:"(0008,002A)",vr:"DT",name:"AcquisitionDateTime",vm:"1",version:"DICOM"},"(0008,0030)":{tag:"(0008,0030)",vr:"TM",name:"StudyTime",vm:"1",version:"DICOM"},"(0008,0031)":{tag:"(0008,0031)",vr:"TM",name:"SeriesTime",vm:"1",version:"DICOM"},"(0008,0032)":{tag:"(0008,0032)",vr:"TM",name:"AcquisitionTime",vm:"1",version:"DICOM"},"(0008,0033)":{tag:"(0008,0033)",vr:"TM",name:"ContentTime",vm:"1",version:"DICOM"},"(0008,0050)":{tag:"(0008,0050)",vr:"SH",name:"AccessionNumber",vm:"1",version:"DICOM"},"(0008,0051)":{tag:"(0008,0051)",vr:"SQ",name:"IssuerOfAccessionNumberSequence",vm:"1",version:"DICOM"},"(0008,0052)":{tag:"(0008,0052)",vr:"CS",name:"QueryRetrieveLevel",vm:"1",version:"DICOM"},"(0008,0053)":{tag:"(0008,0053)",vr:"CS",name:"QueryRetrieveView",vm:"1",version:"DICOM"},"(0008,0054)":{tag:"(0008,0054)",vr:"AE",name:"RetrieveAETitle",vm:"1-n",version:"DICOM"},"(0008,0056)":{tag:"(0008,0056)",vr:"CS",name:"InstanceAvailability",vm:"1",version:"DICOM"},"(0008,0058)":{tag:"(0008,0058)",vr:"UI",name:"FailedSOPInstanceUIDList",vm:"1-n",version:"DICOM"},"(0008,0060)":{tag:"(0008,0060)",vr:"CS",name:"Modality",vm:"1",version:"DICOM"},"(0008,0061)":{tag:"(0008,0061)",vr:"CS",name:"ModalitiesInStudy",vm:"1-n",version:"DICOM"},"(0008,0062)":{tag:"(0008,0062)",vr:"UI",name:"SOPClassesInStudy",vm:"1-n",version:"DICOM"},"(0008,0064)":{tag:"(0008,0064)",vr:"CS",name:"ConversionType",vm:"1",version:"DICOM"},"(0008,0068)":{tag:"(0008,0068)",vr:"CS",name:"PresentationIntentType",vm:"1",version:"DICOM"},"(0008,0070)":{tag:"(0008,0070)",vr:"LO",name:"Manufacturer",vm:"1",version:"DICOM"},"(0008,0080)":{tag:"(0008,0080)",vr:"LO",name:"InstitutionName",vm:"1",version:"DICOM"},"(0008,0081)":{tag:"(0008,0081)",vr:"ST",name:"InstitutionAddress",vm:"1",version:"DICOM"},"(0008,0082)":{tag:"(0008,0082)",vr:"SQ",name:"InstitutionCodeSequence",vm:"1",version:"DICOM"},"(0008,0090)":{tag:"(0008,0090)",vr:"PN",name:"ReferringPhysicianName",vm:"1",version:"DICOM"},"(0008,0092)":{tag:"(0008,0092)",vr:"ST",name:"ReferringPhysicianAddress",vm:"1",version:"DICOM"},"(0008,0094)":{tag:"(0008,0094)",vr:"SH",name:"ReferringPhysicianTelephoneNumbers",vm:"1-n",version:"DICOM"},"(0008,0096)":{tag:"(0008,0096)",vr:"SQ",name:"ReferringPhysicianIdentificationSequence",vm:"1",version:"DICOM"},"(0008,009C)":{tag:"(0008,009C)",vr:"PN",name:"ConsultingPhysicianName",vm:"1-n",version:"DICOM"},"(0008,009D)":{tag:"(0008,009D)",vr:"SQ",name:"ConsultingPhysicianIdentificationSequence",vm:"1",version:"DICOM"},"(0008,0100)":{tag:"(0008,0100)",vr:"SH",name:"CodeValue",vm:"1",version:"DICOM"},"(0008,0101)":{tag:"(0008,0101)",vr:"LO",name:"ExtendedCodeValue",vm:"1",version:"DICOM/DICOS"},"(0008,0102)":{tag:"(0008,0102)",vr:"SH",name:"CodingSchemeDesignator",vm:"1",version:"DICOM"},"(0008,0103)":{tag:"(0008,0103)",vr:"SH",name:"CodingSchemeVersion",vm:"1",version:"DICOM"},"(0008,0104)":{tag:"(0008,0104)",vr:"LO",name:"CodeMeaning",vm:"1",version:"DICOM"},"(0008,0105)":{tag:"(0008,0105)",vr:"CS",name:"MappingResource",vm:"1",version:"DICOM"},"(0008,0106)":{tag:"(0008,0106)",vr:"DT",name:"ContextGroupVersion",vm:"1",version:"DICOM"},"(0008,0107)":{tag:"(0008,0107)",vr:"DT",name:"ContextGroupLocalVersion",vm:"1",version:"DICOM"},"(0008,0108)":{tag:"(0008,0108)",vr:"LT",name:"ExtendedCodeMeaning",vm:"1",version:"DICOM/DICOS"},"(0008,010B)":{tag:"(0008,010B)",vr:"CS",name:"ContextGroupExtensionFlag",vm:"1",version:"DICOM"},"(0008,010C)":{tag:"(0008,010C)",vr:"UI",name:"CodingSchemeUID",vm:"1",version:"DICOM"},"(0008,010D)":{tag:"(0008,010D)",vr:"UI",name:"ContextGroupExtensionCreatorUID",vm:"1",version:"DICOM"},"(0008,010F)":{tag:"(0008,010F)",vr:"CS",name:"ContextIdentifier",vm:"1",version:"DICOM"},"(0008,0110)":{tag:"(0008,0110)",vr:"SQ",name:"CodingSchemeIdentificationSequence",vm:"1",version:"DICOM"},"(0008,0112)":{tag:"(0008,0112)",vr:"LO",name:"CodingSchemeRegistry",vm:"1",version:"DICOM"},"(0008,0114)":{tag:"(0008,0114)",vr:"ST",name:"CodingSchemeExternalID",vm:"1",version:"DICOM"},"(0008,0115)":{tag:"(0008,0115)",vr:"ST",name:"CodingSchemeName",vm:"1",version:"DICOM"},"(0008,0116)":{tag:"(0008,0116)",vr:"ST",name:"CodingSchemeResponsibleOrganization",vm:"1",version:"DICOM"},"(0008,0117)":{tag:"(0008,0117)",vr:"UI",name:"ContextUID",vm:"1",version:"DICOM"},"(0008,0118)":{tag:"(0008,0118)",vr:"UI",name:"MappingResourceUID",vm:"1",version:"DICOM"},"(0008,0119)":{tag:"(0008,0119)",vr:"UC",name:"LongCodeValue",vm:"1",version:"DICOM"},"(0008,0120)":{tag:"(0008,0120)",vr:"UR",name:"URNCodeValue",vm:"1",version:"DICOM"},"(0008,0121)":{tag:"(0008,0121)",vr:"SQ",name:"EquivalentCodeSequence",vm:"1",version:"DICOM"},"(0008,0201)":{tag:"(0008,0201)",vr:"SH",name:"TimezoneOffsetFromUTC",vm:"1",version:"DICOM"},"(0008,0300)":{tag:"(0008,0300)",vr:"SQ",name:"PrivateDataElementCharacteristicsSequence",vm:"1",version:"DICOM"},"(0008,0301)":{tag:"(0008,0301)",vr:"US",name:"PrivateGroupReference",vm:"1",version:"DICOM"},"(0008,0302)":{tag:"(0008,0302)",vr:"LO",name:"PrivateCreatorReference",vm:"1",version:"DICOM"},"(0008,0303)":{tag:"(0008,0303)",vr:"CS",name:"BlockIdentifyingInformationStatus",vm:"1",version:"DICOM"},"(0008,0304)":{tag:"(0008,0304)",vr:"US",name:"NonidentifyingPrivateElements",vm:"1-n",version:"DICOM"},"(0008,0305)":{tag:"(0008,0305)",vr:"SQ",name:"DeidentificationActionSequence",vm:"1",version:"DICOM"},"(0008,0306)":{tag:"(0008,0306)",vr:"US",name:"IdentifyingPrivateElements",vm:"1-n",version:"DICOM"},"(0008,0307)":{tag:"(0008,0307)",vr:"CS",name:"DeidentificationAction",vm:"1",version:"DICOM"},"(0008,1010)":{tag:"(0008,1010)",vr:"SH",name:"StationName",vm:"1",version:"DICOM"},"(0008,1030)":{tag:"(0008,1030)",vr:"LO",name:"StudyDescription",vm:"1",version:"DICOM"},"(0008,1032)":{tag:"(0008,1032)",vr:"SQ",name:"ProcedureCodeSequence",vm:"1",version:"DICOM"},"(0008,103E)":{tag:"(0008,103E)",vr:"LO",name:"SeriesDescription",vm:"1",version:"DICOM"},"(0008,103F)":{tag:"(0008,103F)",vr:"SQ",name:"SeriesDescriptionCodeSequence",vm:"1",version:"DICOM"},"(0008,1040)":{tag:"(0008,1040)",vr:"LO",name:"InstitutionalDepartmentName",vm:"1",version:"DICOM"},"(0008,1048)":{tag:"(0008,1048)",vr:"PN",name:"PhysiciansOfRecord",vm:"1-n",version:"DICOM"},"(0008,1049)":{tag:"(0008,1049)",vr:"SQ",name:"PhysiciansOfRecordIdentificationSequence",vm:"1",version:"DICOM"},"(0008,1050)":{tag:"(0008,1050)",vr:"PN",name:"PerformingPhysicianName",vm:"1-n",version:"DICOM"},"(0008,1052)":{tag:"(0008,1052)",vr:"SQ",name:"PerformingPhysicianIdentificationSequence",vm:"1",version:"DICOM"},"(0008,1060)":{tag:"(0008,1060)",vr:"PN",name:"NameOfPhysiciansReadingStudy",vm:"1-n",version:"DICOM"},"(0008,1062)":{tag:"(0008,1062)",vr:"SQ",name:"PhysiciansReadingStudyIdentificationSequence",vm:"1",version:"DICOM"},"(0008,1070)":{tag:"(0008,1070)",vr:"PN",name:"OperatorsName",vm:"1-n",version:"DICOM"},"(0008,1072)":{tag:"(0008,1072)",vr:"SQ",name:"OperatorIdentificationSequence",vm:"1",version:"DICOM"},"(0008,1080)":{tag:"(0008,1080)",vr:"LO",name:"AdmittingDiagnosesDescription",vm:"1-n",version:"DICOM"},"(0008,1084)":{tag:"(0008,1084)",vr:"SQ",name:"AdmittingDiagnosesCodeSequence",vm:"1",version:"DICOM"},"(0008,1090)":{tag:"(0008,1090)",vr:"LO",name:"ManufacturerModelName",vm:"1",version:"DICOM"},"(0008,1110)":{tag:"(0008,1110)",vr:"SQ",name:"ReferencedStudySequence",vm:"1",version:"DICOM"},"(0008,1111)":{tag:"(0008,1111)",vr:"SQ",name:"ReferencedPerformedProcedureStepSequence",vm:"1",version:"DICOM"},"(0008,1115)":{tag:"(0008,1115)",vr:"SQ",name:"ReferencedSeriesSequence",vm:"1",version:"DICOM"},"(0008,1120)":{tag:"(0008,1120)",vr:"SQ",name:"ReferencedPatientSequence",vm:"1",version:"DICOM"},"(0008,1125)":{tag:"(0008,1125)",vr:"SQ",name:"ReferencedVisitSequence",vm:"1",version:"DICOM"},"(0008,1134)":{tag:"(0008,1134)",vr:"SQ",name:"ReferencedStereometricInstanceSequence",vm:"1",version:"DICOM"},"(0008,113A)":{tag:"(0008,113A)",vr:"SQ",name:"ReferencedWaveformSequence",vm:"1",version:"DICOM"},"(0008,1140)":{tag:"(0008,1140)",vr:"SQ",name:"ReferencedImageSequence",vm:"1",version:"DICOM"},"(0008,114A)":{tag:"(0008,114A)",vr:"SQ",name:"ReferencedInstanceSequence",vm:"1",version:"DICOM"},"(0008,114B)":{tag:"(0008,114B)",vr:"SQ",name:"ReferencedRealWorldValueMappingInstanceSequence",vm:"1",version:"DICOM"},"(0008,1150)":{tag:"(0008,1150)",vr:"UI",name:"ReferencedSOPClassUID",vm:"1",version:"DICOM"},"(0008,1155)":{tag:"(0008,1155)",vr:"UI",name:"ReferencedSOPInstanceUID",vm:"1",version:"DICOM"},"(0008,115A)":{tag:"(0008,115A)",vr:"UI",name:"SOPClassesSupported",vm:"1-n",version:"DICOM"},"(0008,1160)":{tag:"(0008,1160)",vr:"IS",name:"ReferencedFrameNumber",vm:"1-n",version:"DICOM"},"(0008,1161)":{tag:"(0008,1161)",vr:"UL",name:"SimpleFrameList",vm:"1-n",version:"DICOM"},"(0008,1162)":{tag:"(0008,1162)",vr:"UL",name:"CalculatedFrameList",vm:"3-3n",version:"DICOM"},"(0008,1163)":{tag:"(0008,1163)",vr:"FD",name:"TimeRange",vm:"2",version:"DICOM"},"(0008,1164)":{tag:"(0008,1164)",vr:"SQ",name:"FrameExtractionSequence",vm:"1",version:"DICOM"},"(0008,1167)":{tag:"(0008,1167)",vr:"UI",name:"MultiFrameSourceSOPInstanceUID",vm:"1",version:"DICOM"},"(0008,1190)":{tag:"(0008,1190)",vr:"UR",name:"RetrieveURL",vm:"1",version:"DICOM"},"(0008,1195)":{tag:"(0008,1195)",vr:"UI",name:"TransactionUID",vm:"1",version:"DICOM"},"(0008,1196)":{tag:"(0008,1196)",vr:"US",name:"WarningReason",vm:"1",version:"DICOM"},"(0008,1197)":{tag:"(0008,1197)",vr:"US",name:"FailureReason",vm:"1",version:"DICOM"},"(0008,1198)":{tag:"(0008,1198)",vr:"SQ",name:"FailedSOPSequence",vm:"1",version:"DICOM"},"(0008,1199)":{tag:"(0008,1199)",vr:"SQ",name:"ReferencedSOPSequence",vm:"1",version:"DICOM"},"(0008,1200)":{tag:"(0008,1200)",vr:"SQ",name:"StudiesContainingOtherReferencedInstancesSequence",vm:"1",version:"DICOM"},"(0008,1250)":{tag:"(0008,1250)",vr:"SQ",name:"RelatedSeriesSequence",vm:"1",version:"DICOM"},"(0008,2111)":{tag:"(0008,2111)",vr:"ST",name:"DerivationDescription",vm:"1",version:"DICOM"},"(0008,2112)":{tag:"(0008,2112)",vr:"SQ",name:"SourceImageSequence",vm:"1",version:"DICOM"},"(0008,2120)":{tag:"(0008,2120)",vr:"SH",name:"StageName",vm:"1",version:"DICOM"},"(0008,2122)":{tag:"(0008,2122)",vr:"IS",name:"StageNumber",vm:"1",version:"DICOM"},"(0008,2124)":{tag:"(0008,2124)",vr:"IS",name:"NumberOfStages",vm:"1",version:"DICOM"},"(0008,2127)":{tag:"(0008,2127)",vr:"SH",name:"ViewName",vm:"1",version:"DICOM"},"(0008,2128)":{tag:"(0008,2128)",vr:"IS",name:"ViewNumber",vm:"1",version:"DICOM"},"(0008,2129)":{tag:"(0008,2129)",vr:"IS",name:"NumberOfEventTimers",vm:"1",version:"DICOM"},"(0008,212A)":{tag:"(0008,212A)",vr:"IS",name:"NumberOfViewsInStage",vm:"1",version:"DICOM"},"(0008,2130)":{tag:"(0008,2130)",vr:"DS",name:"EventElapsedTimes",vm:"1-n",version:"DICOM"},"(0008,2132)":{tag:"(0008,2132)",vr:"LO",name:"EventTimerNames",vm:"1-n",version:"DICOM"},"(0008,2133)":{tag:"(0008,2133)",vr:"SQ",name:"EventTimerSequence",vm:"1",version:"DICOM"},"(0008,2134)":{tag:"(0008,2134)",vr:"FD",name:"EventTimeOffset",vm:"1",version:"DICOM"},"(0008,2135)":{tag:"(0008,2135)",vr:"SQ",name:"EventCodeSequence",vm:"1",version:"DICOM"},"(0008,2142)":{tag:"(0008,2142)",vr:"IS",name:"StartTrim",vm:"1",version:"DICOM"},"(0008,2143)":{tag:"(0008,2143)",vr:"IS",name:"StopTrim",vm:"1",version:"DICOM"},"(0008,2144)":{tag:"(0008,2144)",vr:"IS",name:"RecommendedDisplayFrameRate",vm:"1",version:"DICOM"},"(0008,2218)":{tag:"(0008,2218)",vr:"SQ",name:"AnatomicRegionSequence",vm:"1",version:"DICOM"},"(0008,2220)":{tag:"(0008,2220)",vr:"SQ",name:"AnatomicRegionModifierSequence",vm:"1",version:"DICOM"},"(0008,2228)":{tag:"(0008,2228)",vr:"SQ",name:"PrimaryAnatomicStructureSequence",vm:"1",version:"DICOM"},"(0008,2229)":{tag:"(0008,2229)",vr:"SQ",name:"AnatomicStructureSpaceOrRegionSequence",vm:"1",version:"DICOM"},"(0008,2230)":{tag:"(0008,2230)",vr:"SQ",name:"PrimaryAnatomicStructureModifierSequence",vm:"1",version:"DICOM"},"(0008,3001)":{tag:"(0008,3001)",vr:"SQ",name:"AlternateRepresentationSequence",vm:"1",version:"DICOM"},"(0008,3010)":{tag:"(0008,3010)",vr:"UI",name:"IrradiationEventUID",vm:"1-n",version:"DICOM"},"(0008,3011)":{tag:"(0008,3011)",vr:"SQ",name:"SourceIrradiationEventSequence",vm:"1",version:"DICOM"},"(0008,3012)":{tag:"(0008,3012)",vr:"UI",name:"RadiopharmaceuticalAdministrationEventUID",vm:"1",version:"DICOM"},"(0008,9007)":{tag:"(0008,9007)",vr:"CS",name:"FrameType",vm:"4",version:"DICOM"},"(0008,9092)":{tag:"(0008,9092)",vr:"SQ",name:"ReferencedImageEvidenceSequence",vm:"1",version:"DICOM"},"(0008,9121)":{tag:"(0008,9121)",vr:"SQ",name:"ReferencedRawDataSequence",vm:"1",version:"DICOM"},"(0008,9123)":{tag:"(0008,9123)",vr:"UI",name:"CreatorVersionUID",vm:"1",version:"DICOM"},"(0008,9124)":{tag:"(0008,9124)",vr:"SQ",name:"DerivationImageSequence",vm:"1",version:"DICOM"},"(0008,9154)":{tag:"(0008,9154)",vr:"SQ",name:"SourceImageEvidenceSequence",vm:"1",version:"DICOM"},"(0008,9205)":{tag:"(0008,9205)",vr:"CS",name:"PixelPresentation",vm:"1",version:"DICOM"},"(0008,9206)":{tag:"(0008,9206)",vr:"CS",name:"VolumetricProperties",vm:"1",version:"DICOM"},"(0008,9207)":{tag:"(0008,9207)",vr:"CS",name:"VolumeBasedCalculationTechnique",vm:"1",version:"DICOM"},"(0008,9208)":{tag:"(0008,9208)",vr:"CS",name:"ComplexImageComponent",vm:"1",version:"DICOM"},"(0008,9209)":{tag:"(0008,9209)",vr:"CS",name:"AcquisitionContrast",vm:"1",version:"DICOM"},"(0008,9215)":{tag:"(0008,9215)",vr:"SQ",name:"DerivationCodeSequence",vm:"1",version:"DICOM"},"(0008,9237)":{tag:"(0008,9237)",vr:"SQ",name:"ReferencedPresentationStateSequence",vm:"1",version:"DICOM"},"(0008,9410)":{tag:"(0008,9410)",vr:"SQ",name:"ReferencedOtherPlaneSequence",vm:"1",version:"DICOM"},"(0008,9458)":{tag:"(0008,9458)",vr:"SQ",name:"FrameDisplaySequence",vm:"1",version:"DICOM"},"(0008,9459)":{tag:"(0008,9459)",vr:"FL",name:"RecommendedDisplayFrameRateInFloat",vm:"1",version:"DICOM"},"(0008,9460)":{tag:"(0008,9460)",vr:"CS",name:"SkipFrameRangeFlag",vm:"1",version:"DICOM"},"(0010,0010)":{tag:"(0010,0010)",vr:"PN",name:"PatientName",vm:"1",version:"DICOM"},"(0010,0020)":{tag:"(0010,0020)",vr:"LO",name:"PatientID",vm:"1",version:"DICOM"},"(0010,0021)":{tag:"(0010,0021)",vr:"LO",name:"IssuerOfPatientID",vm:"1",version:"DICOM"},"(0010,0022)":{tag:"(0010,0022)",vr:"CS",name:"TypeOfPatientID",vm:"1",version:"DICOM"},"(0010,0024)":{tag:"(0010,0024)",vr:"SQ",name:"IssuerOfPatientIDQualifiersSequence",vm:"1",version:"DICOM"},"(0010,0030)":{tag:"(0010,0030)",vr:"DA",name:"PatientBirthDate",vm:"1",version:"DICOM"},"(0010,0032)":{tag:"(0010,0032)",vr:"TM",name:"PatientBirthTime",vm:"1",version:"DICOM"},"(0010,0040)":{tag:"(0010,0040)",vr:"CS",name:"PatientSex",vm:"1",version:"DICOM"},"(0010,0050)":{tag:"(0010,0050)",vr:"SQ",name:"PatientInsurancePlanCodeSequence",vm:"1",version:"DICOM"},"(0010,0101)":{tag:"(0010,0101)",vr:"SQ",name:"PatientPrimaryLanguageCodeSequence",vm:"1",version:"DICOM"},"(0010,0102)":{tag:"(0010,0102)",vr:"SQ",name:"PatientPrimaryLanguageModifierCodeSequence",vm:"1",version:"DICOM"},"(0010,0200)":{tag:"(0010,0200)",vr:"CS",name:"QualityControlSubject",vm:"1",version:"DICOM"},"(0010,0201)":{tag:"(0010,0201)",vr:"SQ",name:"QualityControlSubjectTypeCodeSequence",vm:"1",version:"DICOM"},"(0010,1000)":{tag:"(0010,1000)",vr:"LO",name:"OtherPatientIDs",vm:"1-n",version:"DICOM"},"(0010,1001)":{tag:"(0010,1001)",vr:"PN",name:"OtherPatientNames",vm:"1-n",version:"DICOM"},"(0010,1002)":{tag:"(0010,1002)",vr:"SQ",name:"OtherPatientIDsSequence",vm:"1",version:"DICOM"},"(0010,1005)":{tag:"(0010,1005)",vr:"PN",name:"PatientBirthName",vm:"1",version:"DICOM"},"(0010,1010)":{tag:"(0010,1010)",vr:"AS",name:"PatientAge",vm:"1",version:"DICOM"},"(0010,1020)":{tag:"(0010,1020)",vr:"DS",name:"PatientSize",vm:"1",version:"DICOM"},"(0010,1021)":{tag:"(0010,1021)",vr:"SQ",name:"PatientSizeCodeSequence",vm:"1",version:"DICOM"},"(0010,1030)":{tag:"(0010,1030)",vr:"DS",name:"PatientWeight",vm:"1",version:"DICOM"},"(0010,1040)":{tag:"(0010,1040)",vr:"LO",name:"PatientAddress",vm:"1",version:"DICOM"},"(0010,1060)":{tag:"(0010,1060)",vr:"PN",name:"PatientMotherBirthName",vm:"1",version:"DICOM"},"(0010,1080)":{tag:"(0010,1080)",vr:"LO",name:"MilitaryRank",vm:"1",version:"DICOM"},"(0010,1081)":{tag:"(0010,1081)",vr:"LO",name:"BranchOfService",vm:"1",version:"DICOM"},"(0010,1090)":{tag:"(0010,1090)",vr:"LO",name:"MedicalRecordLocator",vm:"1",version:"DICOM"},"(0010,1100)":{tag:"(0010,1100)",vr:"SQ",name:"ReferencedPatientPhotoSequence",vm:"1",version:"DICOM"},"(0010,2000)":{tag:"(0010,2000)",vr:"LO",name:"MedicalAlerts",vm:"1-n",version:"DICOM"},"(0010,2110)":{tag:"(0010,2110)",vr:"LO",name:"Allergies",vm:"1-n",version:"DICOM"},"(0010,2150)":{tag:"(0010,2150)",vr:"LO",name:"CountryOfResidence",vm:"1",version:"DICOM"},"(0010,2152)":{tag:"(0010,2152)",vr:"LO",name:"RegionOfResidence",vm:"1",version:"DICOM"},"(0010,2154)":{tag:"(0010,2154)",vr:"SH",name:"PatientTelephoneNumbers",vm:"1-n",version:"DICOM"},"(0010,2155)":{tag:"(0010,2155)",vr:"LT",name:"PatientTelecomInformation",vm:"1",version:"DICOM"},"(0010,2160)":{tag:"(0010,2160)",vr:"SH",name:"EthnicGroup",vm:"1",version:"DICOM"},"(0010,2180)":{tag:"(0010,2180)",vr:"SH",name:"Occupation",vm:"1",version:"DICOM"},"(0010,21A0)":{tag:"(0010,21A0)",vr:"CS",name:"SmokingStatus",vm:"1",version:"DICOM"},"(0010,21B0)":{tag:"(0010,21B0)",vr:"LT",name:"AdditionalPatientHistory",vm:"1",version:"DICOM"},"(0010,21C0)":{tag:"(0010,21C0)",vr:"US",name:"PregnancyStatus",vm:"1",version:"DICOM"},"(0010,21D0)":{tag:"(0010,21D0)",vr:"DA",name:"LastMenstrualDate",vm:"1",version:"DICOM"},"(0010,21F0)":{tag:"(0010,21F0)",vr:"LO",name:"PatientReligiousPreference",vm:"1",version:"DICOM"},"(0010,2201)":{tag:"(0010,2201)",vr:"LO",name:"PatientSpeciesDescription",vm:"1",version:"DICOM"},"(0010,2202)":{tag:"(0010,2202)",vr:"SQ",name:"PatientSpeciesCodeSequence",vm:"1",version:"DICOM"},"(0010,2203)":{tag:"(0010,2203)",vr:"CS",name:"PatientSexNeutered",vm:"1",version:"DICOM"},"(0010,2210)":{tag:"(0010,2210)",vr:"CS",name:"AnatomicalOrientationType",vm:"1",version:"DICOM"},"(0010,2292)":{tag:"(0010,2292)",vr:"LO",name:"PatientBreedDescription",vm:"1",version:"DICOM"},"(0010,2293)":{tag:"(0010,2293)",vr:"SQ",name:"PatientBreedCodeSequence",vm:"1",version:"DICOM"},"(0010,2294)":{tag:"(0010,2294)",vr:"SQ",name:"BreedRegistrationSequence",vm:"1",version:"DICOM"},"(0010,2295)":{tag:"(0010,2295)",vr:"LO",name:"BreedRegistrationNumber",vm:"1",version:"DICOM"},"(0010,2296)":{tag:"(0010,2296)",vr:"SQ",name:"BreedRegistryCodeSequence",vm:"1",version:"DICOM"},"(0010,2297)":{tag:"(0010,2297)",vr:"PN",name:"ResponsiblePerson",vm:"1",version:"DICOM"},"(0010,2298)":{tag:"(0010,2298)",vr:"CS",name:"ResponsiblePersonRole",vm:"1",version:"DICOM"},"(0010,2299)":{tag:"(0010,2299)",vr:"LO",name:"ResponsibleOrganization",vm:"1",version:"DICOM"},"(0010,4000)":{tag:"(0010,4000)",vr:"LT",name:"PatientComments",vm:"1",version:"DICOM"},"(0010,9431)":{tag:"(0010,9431)",vr:"FL",name:"ExaminedBodyThickness",vm:"1",version:"DICOM"},"(0012,0010)":{tag:"(0012,0010)",vr:"LO",name:"ClinicalTrialSponsorName",vm:"1",version:"DICOM"},"(0012,0020)":{tag:"(0012,0020)",vr:"LO",name:"ClinicalTrialProtocolID",vm:"1",version:"DICOM"},"(0012,0021)":{tag:"(0012,0021)",vr:"LO",name:"ClinicalTrialProtocolName",vm:"1",version:"DICOM"},"(0012,0030)":{tag:"(0012,0030)",vr:"LO",name:"ClinicalTrialSiteID",vm:"1",version:"DICOM"},"(0012,0031)":{tag:"(0012,0031)",vr:"LO",name:"ClinicalTrialSiteName",vm:"1",version:"DICOM"},"(0012,0040)":{tag:"(0012,0040)",vr:"LO",name:"ClinicalTrialSubjectID",vm:"1",version:"DICOM"},"(0012,0042)":{tag:"(0012,0042)",vr:"LO",name:"ClinicalTrialSubjectReadingID",vm:"1",version:"DICOM"},"(0012,0050)":{tag:"(0012,0050)",vr:"LO",name:"ClinicalTrialTimePointID",vm:"1",version:"DICOM"},"(0012,0051)":{tag:"(0012,0051)",vr:"ST",name:"ClinicalTrialTimePointDescription",vm:"1",version:"DICOM"},"(0012,0060)":{tag:"(0012,0060)",vr:"LO",name:"ClinicalTrialCoordinatingCenterName",vm:"1",version:"DICOM"},"(0012,0062)":{tag:"(0012,0062)",vr:"CS",name:"PatientIdentityRemoved",vm:"1",version:"DICOM"},"(0012,0063)":{tag:"(0012,0063)",vr:"LO",name:"DeidentificationMethod",vm:"1-n",version:"DICOM"},"(0012,0064)":{tag:"(0012,0064)",vr:"SQ",name:"DeidentificationMethodCodeSequence",vm:"1",version:"DICOM"},"(0012,0071)":{tag:"(0012,0071)",vr:"LO",name:"ClinicalTrialSeriesID",vm:"1",version:"DICOM"},"(0012,0072)":{tag:"(0012,0072)",vr:"LO",name:"ClinicalTrialSeriesDescription",vm:"1",version:"DICOM"},"(0012,0081)":{tag:"(0012,0081)",vr:"LO",name:"ClinicalTrialProtocolEthicsCommitteeName",vm:"1",version:"DICOM"},"(0012,0082)":{tag:"(0012,0082)",vr:"LO",name:"ClinicalTrialProtocolEthicsCommitteeApprovalNumber",vm:"1",version:"DICOM"},"(0012,0083)":{tag:"(0012,0083)",vr:"SQ",name:"ConsentForClinicalTrialUseSequence",vm:"1",version:"DICOM"},"(0012,0084)":{tag:"(0012,0084)",vr:"CS",name:"DistributionType",vm:"1",version:"DICOM"},"(0012,0085)":{tag:"(0012,0085)",vr:"CS",name:"ConsentForDistributionFlag",vm:"1",version:"DICOM"},"(0014,0025)":{tag:"(0014,0025)",vr:"ST",name:"ComponentManufacturingProcedure",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0028)":{tag:"(0014,0028)",vr:"ST",name:"ComponentManufacturer",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0030)":{tag:"(0014,0030)",vr:"DS",name:"MaterialThickness",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0032)":{tag:"(0014,0032)",vr:"DS",name:"MaterialPipeDiameter",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0034)":{tag:"(0014,0034)",vr:"DS",name:"MaterialIsolationDiameter",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0042)":{tag:"(0014,0042)",vr:"ST",name:"MaterialGrade",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0044)":{tag:"(0014,0044)",vr:"ST",name:"MaterialPropertiesDescription",vm:"1-n",version:"DICOM/DICONDE"},"(0014,0046)":{tag:"(0014,0046)",vr:"LT",name:"MaterialNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,0050)":{tag:"(0014,0050)",vr:"CS",name:"ComponentShape",vm:"1",version:"DICOM/DICONDE"},"(0014,0052)":{tag:"(0014,0052)",vr:"CS",name:"CurvatureType",vm:"1",version:"DICOM/DICONDE"},"(0014,0054)":{tag:"(0014,0054)",vr:"DS",name:"OuterDiameter",vm:"1",version:"DICOM/DICONDE"},"(0014,0056)":{tag:"(0014,0056)",vr:"DS",name:"InnerDiameter",vm:"1",version:"DICOM/DICONDE"},"(0014,1010)":{tag:"(0014,1010)",vr:"ST",name:"ActualEnvironmentalConditions",vm:"1",version:"DICOM/DICONDE"},"(0014,1020)":{tag:"(0014,1020)",vr:"DA",name:"ExpiryDate",vm:"1",version:"DICOM/DICONDE"},"(0014,1040)":{tag:"(0014,1040)",vr:"ST",name:"EnvironmentalConditions",vm:"1",version:"DICOM/DICONDE"},"(0014,2002)":{tag:"(0014,2002)",vr:"SQ",name:"EvaluatorSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2004)":{tag:"(0014,2004)",vr:"IS",name:"EvaluatorNumber",vm:"1",version:"DICOM/DICONDE"},"(0014,2006)":{tag:"(0014,2006)",vr:"PN",name:"EvaluatorName",vm:"1",version:"DICOM/DICONDE"},"(0014,2008)":{tag:"(0014,2008)",vr:"IS",name:"EvaluationAttempt",vm:"1",version:"DICOM/DICONDE"},"(0014,2012)":{tag:"(0014,2012)",vr:"SQ",name:"IndicationSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2014)":{tag:"(0014,2014)",vr:"IS",name:"IndicationNumber",vm:"1",version:"DICOM/DICONDE"},"(0014,2016)":{tag:"(0014,2016)",vr:"SH",name:"IndicationLabel",vm:"1",version:"DICOM/DICONDE"},"(0014,2018)":{tag:"(0014,2018)",vr:"ST",name:"IndicationDescription",vm:"1",version:"DICOM/DICONDE"},"(0014,201A)":{tag:"(0014,201A)",vr:"CS",name:"IndicationType",vm:"1-n",version:"DICOM/DICONDE"},"(0014,201C)":{tag:"(0014,201C)",vr:"CS",name:"IndicationDisposition",vm:"1",version:"DICOM/DICONDE"},"(0014,201E)":{tag:"(0014,201E)",vr:"SQ",name:"IndicationROISequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2030)":{tag:"(0014,2030)",vr:"SQ",name:"IndicationPhysicalPropertySequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2032)":{tag:"(0014,2032)",vr:"SH",name:"PropertyLabel",vm:"1",version:"DICOM/DICONDE"},"(0014,2202)":{tag:"(0014,2202)",vr:"IS",name:"CoordinateSystemNumberOfAxes",vm:"1",version:"DICOM/DICONDE"},"(0014,2204)":{tag:"(0014,2204)",vr:"SQ",name:"CoordinateSystemAxesSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2206)":{tag:"(0014,2206)",vr:"ST",name:"CoordinateSystemAxisDescription",vm:"1",version:"DICOM/DICONDE"},"(0014,2208)":{tag:"(0014,2208)",vr:"CS",name:"CoordinateSystemDataSetMapping",vm:"1",version:"DICOM/DICONDE"},"(0014,220A)":{tag:"(0014,220A)",vr:"IS",name:"CoordinateSystemAxisNumber",vm:"1",version:"DICOM/DICONDE"},"(0014,220C)":{tag:"(0014,220C)",vr:"CS",name:"CoordinateSystemAxisType",vm:"1",version:"DICOM/DICONDE"},"(0014,220E)":{tag:"(0014,220E)",vr:"CS",name:"CoordinateSystemAxisUnits",vm:"1",version:"DICOM/DICONDE"},"(0014,2210)":{tag:"(0014,2210)",vr:"OB",name:"CoordinateSystemAxisValues",vm:"1",version:"DICOM/DICONDE"},"(0014,2220)":{tag:"(0014,2220)",vr:"SQ",name:"CoordinateSystemTransformSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,2222)":{tag:"(0014,2222)",vr:"ST",name:"TransformDescription",vm:"1",version:"DICOM/DICONDE"},"(0014,2224)":{tag:"(0014,2224)",vr:"IS",name:"TransformNumberOfAxes",vm:"1",version:"DICOM/DICONDE"},"(0014,2226)":{tag:"(0014,2226)",vr:"IS",name:"TransformOrderOfAxes",vm:"1-n",version:"DICOM/DICONDE"},"(0014,2228)":{tag:"(0014,2228)",vr:"CS",name:"TransformedAxisUnits",vm:"1",version:"DICOM/DICONDE"},"(0014,222A)":{tag:"(0014,222A)",vr:"DS",name:"CoordinateSystemTransformRotationAndScaleMatrix",vm:"1-n",version:"DICOM/DICONDE"},"(0014,222C)":{tag:"(0014,222C)",vr:"DS",name:"CoordinateSystemTransformTranslationMatrix",vm:"1-n",version:"DICOM/DICONDE"},"(0014,3011)":{tag:"(0014,3011)",vr:"DS",name:"InternalDetectorFrameTime",vm:"1",version:"DICOM/DICONDE"},"(0014,3012)":{tag:"(0014,3012)",vr:"DS",name:"NumberOfFramesIntegrated",vm:"1",version:"DICOM/DICONDE"},"(0014,3020)":{tag:"(0014,3020)",vr:"SQ",name:"DetectorTemperatureSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,3022)":{tag:"(0014,3022)",vr:"ST",name:"SensorName",vm:"1",version:"DICOM/DICONDE"},"(0014,3024)":{tag:"(0014,3024)",vr:"DS",name:"HorizontalOffsetOfSensor",vm:"1",version:"DICOM/DICONDE"},"(0014,3026)":{tag:"(0014,3026)",vr:"DS",name:"VerticalOffsetOfSensor",vm:"1",version:"DICOM/DICONDE"},"(0014,3028)":{tag:"(0014,3028)",vr:"DS",name:"SensorTemperature",vm:"1",version:"DICOM/DICONDE"},"(0014,3040)":{tag:"(0014,3040)",vr:"SQ",name:"DarkCurrentSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,3050)":{tag:"(0014,3050)",vr:"ox",name:"DarkCurrentCounts",vm:"1",version:"DICOM/DICONDE"},"(0014,3060)":{tag:"(0014,3060)",vr:"SQ",name:"GainCorrectionReferenceSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,3070)":{tag:"(0014,3070)",vr:"ox",name:"AirCounts",vm:"1",version:"DICOM/DICONDE"},"(0014,3071)":{tag:"(0014,3071)",vr:"DS",name:"KVUsedInGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3072)":{tag:"(0014,3072)",vr:"DS",name:"MAUsedInGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3073)":{tag:"(0014,3073)",vr:"DS",name:"NumberOfFramesUsedForIntegration",vm:"1",version:"DICOM/DICONDE"},"(0014,3074)":{tag:"(0014,3074)",vr:"LO",name:"FilterMaterialUsedInGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3075)":{tag:"(0014,3075)",vr:"DS",name:"FilterThicknessUsedInGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3076)":{tag:"(0014,3076)",vr:"DA",name:"DateOfGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3077)":{tag:"(0014,3077)",vr:"TM",name:"TimeOfGainCalibration",vm:"1",version:"DICOM/DICONDE"},"(0014,3080)":{tag:"(0014,3080)",vr:"OB",name:"BadPixelImage",vm:"1",version:"DICOM/DICONDE"},"(0014,3099)":{tag:"(0014,3099)",vr:"LT",name:"CalibrationNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,4002)":{tag:"(0014,4002)",vr:"SQ",name:"PulserEquipmentSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4004)":{tag:"(0014,4004)",vr:"CS",name:"PulserType",vm:"1",version:"DICOM/DICONDE"},"(0014,4006)":{tag:"(0014,4006)",vr:"LT",name:"PulserNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,4008)":{tag:"(0014,4008)",vr:"SQ",name:"ReceiverEquipmentSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,400A)":{tag:"(0014,400A)",vr:"CS",name:"AmplifierType",vm:"1",version:"DICOM/DICONDE"},"(0014,400C)":{tag:"(0014,400C)",vr:"LT",name:"ReceiverNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,400E)":{tag:"(0014,400E)",vr:"SQ",name:"PreAmplifierEquipmentSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,400F)":{tag:"(0014,400F)",vr:"LT",name:"PreAmplifierNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,4010)":{tag:"(0014,4010)",vr:"SQ",name:"TransmitTransducerSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4011)":{tag:"(0014,4011)",vr:"SQ",name:"ReceiveTransducerSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4012)":{tag:"(0014,4012)",vr:"US",name:"NumberOfElements",vm:"1",version:"DICOM/DICONDE"},"(0014,4013)":{tag:"(0014,4013)",vr:"CS",name:"ElementShape",vm:"1",version:"DICOM/DICONDE"},"(0014,4014)":{tag:"(0014,4014)",vr:"DS",name:"ElementDimensionA",vm:"1",version:"DICOM/DICONDE"},"(0014,4015)":{tag:"(0014,4015)",vr:"DS",name:"ElementDimensionB",vm:"1",version:"DICOM/DICONDE"},"(0014,4016)":{tag:"(0014,4016)",vr:"DS",name:"ElementPitchA",vm:"1",version:"DICOM/DICONDE"},"(0014,4017)":{tag:"(0014,4017)",vr:"DS",name:"MeasuredBeamDimensionA",vm:"1",version:"DICOM/DICONDE"},"(0014,4018)":{tag:"(0014,4018)",vr:"DS",name:"MeasuredBeamDimensionB",vm:"1",version:"DICOM/DICONDE"},"(0014,4019)":{tag:"(0014,4019)",vr:"DS",name:"LocationOfMeasuredBeamDiameter",vm:"1",version:"DICOM/DICONDE"},"(0014,401A)":{tag:"(0014,401A)",vr:"DS",name:"NominalFrequency",vm:"1",version:"DICOM/DICONDE"},"(0014,401B)":{tag:"(0014,401B)",vr:"DS",name:"MeasuredCenterFrequency",vm:"1",version:"DICOM/DICONDE"},"(0014,401C)":{tag:"(0014,401C)",vr:"DS",name:"MeasuredBandwidth",vm:"1",version:"DICOM/DICONDE"},"(0014,401D)":{tag:"(0014,401D)",vr:"DS",name:"ElementPitchB",vm:"1",version:"DICOM/DICONDE"},"(0014,4020)":{tag:"(0014,4020)",vr:"SQ",name:"PulserSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4022)":{tag:"(0014,4022)",vr:"DS",name:"PulseWidth",vm:"1",version:"DICOM/DICONDE"},"(0014,4024)":{tag:"(0014,4024)",vr:"DS",name:"ExcitationFrequency",vm:"1",version:"DICOM/DICONDE"},"(0014,4026)":{tag:"(0014,4026)",vr:"CS",name:"ModulationType",vm:"1",version:"DICOM/DICONDE"},"(0014,4028)":{tag:"(0014,4028)",vr:"DS",name:"Damping",vm:"1",version:"DICOM/DICONDE"},"(0014,4030)":{tag:"(0014,4030)",vr:"SQ",name:"ReceiverSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4031)":{tag:"(0014,4031)",vr:"DS",name:"AcquiredSoundpathLength",vm:"1",version:"DICOM/DICONDE"},"(0014,4032)":{tag:"(0014,4032)",vr:"CS",name:"AcquisitionCompressionType",vm:"1",version:"DICOM/DICONDE"},"(0014,4033)":{tag:"(0014,4033)",vr:"IS",name:"AcquisitionSampleSize",vm:"1",version:"DICOM/DICONDE"},"(0014,4034)":{tag:"(0014,4034)",vr:"DS",name:"RectifierSmoothing",vm:"1",version:"DICOM/DICONDE"},"(0014,4035)":{tag:"(0014,4035)",vr:"SQ",name:"DACSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4036)":{tag:"(0014,4036)",vr:"CS",name:"DACType",vm:"1",version:"DICOM/DICONDE"},"(0014,4038)":{tag:"(0014,4038)",vr:"DS",name:"DACGainPoints",vm:"1-n",version:"DICOM/DICONDE"},"(0014,403A)":{tag:"(0014,403A)",vr:"DS",name:"DACTimePoints",vm:"1-n",version:"DICOM/DICONDE"},"(0014,403C)":{tag:"(0014,403C)",vr:"DS",name:"DACAmplitude",vm:"1-n",version:"DICOM/DICONDE"},"(0014,4040)":{tag:"(0014,4040)",vr:"SQ",name:"PreAmplifierSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4050)":{tag:"(0014,4050)",vr:"SQ",name:"TransmitTransducerSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4051)":{tag:"(0014,4051)",vr:"SQ",name:"ReceiveTransducerSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4052)":{tag:"(0014,4052)",vr:"DS",name:"IncidentAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,4054)":{tag:"(0014,4054)",vr:"ST",name:"CouplingTechnique",vm:"1",version:"DICOM/DICONDE"},"(0014,4056)":{tag:"(0014,4056)",vr:"ST",name:"CouplingMedium",vm:"1",version:"DICOM/DICONDE"},"(0014,4057)":{tag:"(0014,4057)",vr:"DS",name:"CouplingVelocity",vm:"1",version:"DICOM/DICONDE"},"(0014,4058)":{tag:"(0014,4058)",vr:"DS",name:"ProbeCenterLocationX",vm:"1",version:"DICOM/DICONDE"},"(0014,4059)":{tag:"(0014,4059)",vr:"DS",name:"ProbeCenterLocationZ",vm:"1",version:"DICOM/DICONDE"},"(0014,405A)":{tag:"(0014,405A)",vr:"DS",name:"SoundPathLength",vm:"1",version:"DICOM/DICONDE"},"(0014,405C)":{tag:"(0014,405C)",vr:"ST",name:"DelayLawIdentifier",vm:"1",version:"DICOM/DICONDE"},"(0014,4060)":{tag:"(0014,4060)",vr:"SQ",name:"GateSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4062)":{tag:"(0014,4062)",vr:"DS",name:"GateThreshold",vm:"1",version:"DICOM/DICONDE"},"(0014,4064)":{tag:"(0014,4064)",vr:"DS",name:"VelocityOfSound",vm:"1",version:"DICOM/DICONDE"},"(0014,4070)":{tag:"(0014,4070)",vr:"SQ",name:"CalibrationSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4072)":{tag:"(0014,4072)",vr:"ST",name:"CalibrationProcedure",vm:"1",version:"DICOM/DICONDE"},"(0014,4074)":{tag:"(0014,4074)",vr:"SH",name:"ProcedureVersion",vm:"1",version:"DICOM/DICONDE"},"(0014,4076)":{tag:"(0014,4076)",vr:"DA",name:"ProcedureCreationDate",vm:"1",version:"DICOM/DICONDE"},"(0014,4078)":{tag:"(0014,4078)",vr:"DA",name:"ProcedureExpirationDate",vm:"1",version:"DICOM/DICONDE"},"(0014,407A)":{tag:"(0014,407A)",vr:"DA",name:"ProcedureLastModifiedDate",vm:"1",version:"DICOM/DICONDE"},"(0014,407C)":{tag:"(0014,407C)",vr:"TM",name:"CalibrationTime",vm:"1-n",version:"DICOM/DICONDE"},"(0014,407E)":{tag:"(0014,407E)",vr:"DA",name:"CalibrationDate",vm:"1-n",version:"DICOM/DICONDE"},"(0014,4080)":{tag:"(0014,4080)",vr:"SQ",name:"ProbeDriveEquipmentSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4081)":{tag:"(0014,4081)",vr:"CS",name:"DriveType",vm:"1",version:"DICOM/DICONDE"},"(0014,4082)":{tag:"(0014,4082)",vr:"LT",name:"ProbeDriveNotes",vm:"1",version:"DICOM/DICONDE"},"(0014,4083)":{tag:"(0014,4083)",vr:"SQ",name:"DriveProbeSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4084)":{tag:"(0014,4084)",vr:"DS",name:"ProbeInductance",vm:"1",version:"DICOM/DICONDE"},"(0014,4085)":{tag:"(0014,4085)",vr:"DS",name:"ProbeResistance",vm:"1",version:"DICOM/DICONDE"},"(0014,4086)":{tag:"(0014,4086)",vr:"SQ",name:"ReceiveProbeSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4087)":{tag:"(0014,4087)",vr:"SQ",name:"ProbeDriveSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4088)":{tag:"(0014,4088)",vr:"DS",name:"BridgeResistors",vm:"1",version:"DICOM/DICONDE"},"(0014,4089)":{tag:"(0014,4089)",vr:"DS",name:"ProbeOrientationAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,408B)":{tag:"(0014,408B)",vr:"DS",name:"UserSelectedGainY",vm:"1",version:"DICOM/DICONDE"},"(0014,408C)":{tag:"(0014,408C)",vr:"DS",name:"UserSelectedPhase",vm:"1",version:"DICOM/DICONDE"},"(0014,408D)":{tag:"(0014,408D)",vr:"DS",name:"UserSelectedOffsetX",vm:"1",version:"DICOM/DICONDE"},"(0014,408E)":{tag:"(0014,408E)",vr:"DS",name:"UserSelectedOffsetY",vm:"1",version:"DICOM/DICONDE"},"(0014,4091)":{tag:"(0014,4091)",vr:"SQ",name:"ChannelSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,4092)":{tag:"(0014,4092)",vr:"DS",name:"ChannelThreshold",vm:"1",version:"DICOM/DICONDE"},"(0014,409A)":{tag:"(0014,409A)",vr:"SQ",name:"ScannerSettingsSequence",vm:"1",version:"DICOM/DICONDE"},"(0014,409B)":{tag:"(0014,409B)",vr:"ST",name:"ScanProcedure",vm:"1",version:"DICOM/DICONDE"},"(0014,409C)":{tag:"(0014,409C)",vr:"DS",name:"TranslationRateX",vm:"1",version:"DICOM/DICONDE"},"(0014,409D)":{tag:"(0014,409D)",vr:"DS",name:"TranslationRateY",vm:"1",version:"DICOM/DICONDE"},"(0014,409F)":{tag:"(0014,409F)",vr:"DS",name:"ChannelOverlap",vm:"1",version:"DICOM/DICONDE"},"(0014,40A0)":{tag:"(0014,40A0)",vr:"LO",name:"ImageQualityIndicatorType",vm:"1",version:"DICOM/DICONDE"},"(0014,40A1)":{tag:"(0014,40A1)",vr:"LO",name:"ImageQualityIndicatorMaterial",vm:"1",version:"DICOM/DICONDE"},"(0014,40A2)":{tag:"(0014,40A2)",vr:"LO",name:"ImageQualityIndicatorSize",vm:"1",version:"DICOM/DICONDE"},"(0014,5002)":{tag:"(0014,5002)",vr:"IS",name:"LINACEnergy",vm:"1",version:"DICOM/DICONDE"},"(0014,5004)":{tag:"(0014,5004)",vr:"IS",name:"LINACOutput",vm:"1",version:"DICOM/DICONDE"},"(0014,5100)":{tag:"(0014,5100)",vr:"US",name:"ActiveAperture",vm:"1",version:"DICOM/DICONDE"},"(0014,5101)":{tag:"(0014,5101)",vr:"DS",name:"TotalAperture",vm:"1",version:"DICOM/DICONDE"},"(0014,5102)":{tag:"(0014,5102)",vr:"DS",name:"ApertureElevation",vm:"1",version:"DICOM/DICONDE"},"(0014,5103)":{tag:"(0014,5103)",vr:"DS",name:"MainLobeAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,5104)":{tag:"(0014,5104)",vr:"DS",name:"MainRoofAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,5105)":{tag:"(0014,5105)",vr:"CS",name:"ConnectorType",vm:"1",version:"DICOM/DICONDE"},"(0014,5106)":{tag:"(0014,5106)",vr:"SH",name:"WedgeModelNumber",vm:"1",version:"DICOM/DICONDE"},"(0014,5107)":{tag:"(0014,5107)",vr:"DS",name:"WedgeAngleFloat",vm:"1",version:"DICOM/DICONDE"},"(0014,5108)":{tag:"(0014,5108)",vr:"DS",name:"WedgeRoofAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,5109)":{tag:"(0014,5109)",vr:"CS",name:"WedgeElement1Position",vm:"1",version:"DICOM/DICONDE"},"(0014,510A)":{tag:"(0014,510A)",vr:"DS",name:"WedgeMaterialVelocity",vm:"1",version:"DICOM/DICONDE"},"(0014,510B)":{tag:"(0014,510B)",vr:"SH",name:"WedgeMaterial",vm:"1",version:"DICOM/DICONDE"},"(0014,510C)":{tag:"(0014,510C)",vr:"DS",name:"WedgeOffsetZ",vm:"1",version:"DICOM/DICONDE"},"(0014,510D)":{tag:"(0014,510D)",vr:"DS",name:"WedgeOriginOffsetX",vm:"1",version:"DICOM/DICONDE"},"(0014,510E)":{tag:"(0014,510E)",vr:"DS",name:"WedgeTimeDelay",vm:"1",version:"DICOM/DICONDE"},"(0014,510F)":{tag:"(0014,510F)",vr:"SH",name:"WedgeName",vm:"1",version:"DICOM/DICONDE"},"(0014,5110)":{tag:"(0014,5110)",vr:"SH",name:"WedgeManufacturerName",vm:"1",version:"DICOM/DICONDE"},"(0014,5111)":{tag:"(0014,5111)",vr:"LO",name:"WedgeDescription",vm:"1",version:"DICOM/DICONDE"},"(0014,5112)":{tag:"(0014,5112)",vr:"DS",name:"NominalBeamAngle",vm:"1",version:"DICOM/DICONDE"},"(0014,5113)":{tag:"(0014,5113)",vr:"DS",name:"WedgeOffsetX",vm:"1",version:"DICOM/DICONDE"},"(0014,5114)":{tag:"(0014,5114)",vr:"DS",name:"WedgeOffsetY",vm:"1",version:"DICOM/DICONDE"},"(0014,5115)":{tag:"(0014,5115)",vr:"DS",name:"WedgeTotalLength",vm:"1",version:"DICOM/DICONDE"},"(0014,5116)":{tag:"(0014,5116)",vr:"DS",name:"WedgeInContactLength",vm:"1",version:"DICOM/DICONDE"},"(0014,5117)":{tag:"(0014,5117)",vr:"DS",name:"WedgeFrontGap",vm:"1",version:"DICOM/DICONDE"},"(0014,5118)":{tag:"(0014,5118)",vr:"DS",name:"WedgeTotalHeight",vm:"1",version:"DICOM/DICONDE"},"(0014,5119)":{tag:"(0014,5119)",vr:"DS",name:"WedgeFrontHeight",vm:"1",version:"DICOM/DICONDE"},"(0014,511A)":{tag:"(0014,511A)",vr:"DS",name:"WedgeRearHeight",vm:"1",version:"DICOM/DICONDE"},"(0014,511B)":{tag:"(0014,511B)",vr:"DS",name:"WedgeTotalWidth",vm:"1",version:"DICOM/DICONDE"},"(0014,511C)":{tag:"(0014,511C)",vr:"DS",name:"WedgeInContactWidth",vm:"1",version:"DICOM/DICONDE"},"(0014,511D)":{tag:"(0014,511D)",vr:"DS",name:"WedgeChamferHeight",vm:"1",version:"DICOM/DICONDE"},"(0014,511E)":{tag:"(0014,511E)",vr:"CS",name:"WedgeCurve",vm:"1",version:"DICOM/DICONDE"},"(0014,511F)":{tag:"(0014,511F)",vr:"DS",name:"RadiusAlongWedge",vm:"1",version:"DICOM/DICONDE"},"(0018,0010)":{tag:"(0018,0010)",vr:"LO",name:"ContrastBolusAgent",vm:"1",version:"DICOM"},"(0018,0012)":{tag:"(0018,0012)",vr:"SQ",name:"ContrastBolusAgentSequence",vm:"1",version:"DICOM"},"(0018,0013)":{tag:"(0018,0013)",vr:"FL",name:"ContrastBolusT1Relaxivity",vm:"1",version:"DICOM"},"(0018,0014)":{tag:"(0018,0014)",vr:"SQ",name:"ContrastBolusAdministrationRouteSequence",vm:"1",version:"DICOM"},"(0018,0015)":{tag:"(0018,0015)",vr:"CS",name:"BodyPartExamined",vm:"1",version:"DICOM"},"(0018,0020)":{tag:"(0018,0020)",vr:"CS",name:"ScanningSequence",vm:"1-n",version:"DICOM"},"(0018,0021)":{tag:"(0018,0021)",vr:"CS",name:"SequenceVariant",vm:"1-n",version:"DICOM"},"(0018,0022)":{tag:"(0018,0022)",vr:"CS",name:"ScanOptions",vm:"1-n",version:"DICOM"},"(0018,0023)":{tag:"(0018,0023)",vr:"CS",name:"MRAcquisitionType",vm:"1",version:"DICOM"},"(0018,0024)":{tag:"(0018,0024)",vr:"SH",name:"SequenceName",vm:"1",version:"DICOM"},"(0018,0025)":{tag:"(0018,0025)",vr:"CS",name:"AngioFlag",vm:"1",version:"DICOM"},"(0018,0026)":{tag:"(0018,0026)",vr:"SQ",name:"InterventionDrugInformationSequence",vm:"1",version:"DICOM"},"(0018,0027)":{tag:"(0018,0027)",vr:"TM",name:"InterventionDrugStopTime",vm:"1",version:"DICOM"},"(0018,0028)":{tag:"(0018,0028)",vr:"DS",name:"InterventionDrugDose",vm:"1",version:"DICOM"},"(0018,0029)":{tag:"(0018,0029)",vr:"SQ",name:"InterventionDrugCodeSequence",vm:"1",version:"DICOM"},"(0018,002A)":{tag:"(0018,002A)",vr:"SQ",name:"AdditionalDrugSequence",vm:"1",version:"DICOM"},"(0018,0031)":{tag:"(0018,0031)",vr:"LO",name:"Radiopharmaceutical",vm:"1",version:"DICOM"},"(0018,0034)":{tag:"(0018,0034)",vr:"LO",name:"InterventionDrugName",vm:"1",version:"DICOM"},"(0018,0035)":{tag:"(0018,0035)",vr:"TM",name:"InterventionDrugStartTime",vm:"1",version:"DICOM"},"(0018,0036)":{tag:"(0018,0036)",vr:"SQ",name:"InterventionSequence",vm:"1",version:"DICOM"},"(0018,0038)":{tag:"(0018,0038)",vr:"CS",name:"InterventionStatus",vm:"1",version:"DICOM"},"(0018,003A)":{tag:"(0018,003A)",vr:"ST",name:"InterventionDescription",vm:"1",version:"DICOM"},"(0018,0040)":{tag:"(0018,0040)",vr:"IS",name:"CineRate",vm:"1",version:"DICOM"},"(0018,0042)":{tag:"(0018,0042)",vr:"CS",name:"InitialCineRunState",vm:"1",version:"DICOM"},"(0018,0050)":{tag:"(0018,0050)",vr:"DS",name:"SliceThickness",vm:"1",version:"DICOM"},"(0018,0060)":{tag:"(0018,0060)",vr:"DS",name:"KVP",vm:"1",version:"DICOM"},"(0018,0070)":{tag:"(0018,0070)",vr:"IS",name:"CountsAccumulated",vm:"1",version:"DICOM"},"(0018,0071)":{tag:"(0018,0071)",vr:"CS",name:"AcquisitionTerminationCondition",vm:"1",version:"DICOM"},"(0018,0072)":{tag:"(0018,0072)",vr:"DS",name:"EffectiveDuration",vm:"1",version:"DICOM"},"(0018,0073)":{tag:"(0018,0073)",vr:"CS",name:"AcquisitionStartCondition",vm:"1",version:"DICOM"},"(0018,0074)":{tag:"(0018,0074)",vr:"IS",name:"AcquisitionStartConditionData",vm:"1",version:"DICOM"},"(0018,0075)":{tag:"(0018,0075)",vr:"IS",name:"AcquisitionTerminationConditionData",vm:"1",version:"DICOM"},"(0018,0080)":{tag:"(0018,0080)",vr:"DS",name:"RepetitionTime",vm:"1",version:"DICOM"},"(0018,0081)":{tag:"(0018,0081)",vr:"DS",name:"EchoTime",vm:"1",version:"DICOM"},"(0018,0082)":{tag:"(0018,0082)",vr:"DS",name:"InversionTime",vm:"1",version:"DICOM"},"(0018,0083)":{tag:"(0018,0083)",vr:"DS",name:"NumberOfAverages",vm:"1",version:"DICOM"},"(0018,0084)":{tag:"(0018,0084)",vr:"DS",name:"ImagingFrequency",vm:"1",version:"DICOM"},"(0018,0085)":{tag:"(0018,0085)",vr:"SH",name:"ImagedNucleus",vm:"1",version:"DICOM"},"(0018,0086)":{tag:"(0018,0086)",vr:"IS",name:"EchoNumbers",vm:"1-n",version:"DICOM"},"(0018,0087)":{tag:"(0018,0087)",vr:"DS",name:"MagneticFieldStrength",vm:"1",version:"DICOM"},"(0018,0088)":{tag:"(0018,0088)",vr:"DS",name:"SpacingBetweenSlices",vm:"1",version:"DICOM"},"(0018,0089)":{tag:"(0018,0089)",vr:"IS",name:"NumberOfPhaseEncodingSteps",vm:"1",version:"DICOM"},"(0018,0090)":{tag:"(0018,0090)",vr:"DS",name:"DataCollectionDiameter",vm:"1",version:"DICOM"},"(0018,0091)":{tag:"(0018,0091)",vr:"IS",name:"EchoTrainLength",vm:"1",version:"DICOM"},"(0018,0093)":{tag:"(0018,0093)",vr:"DS",name:"PercentSampling",vm:"1",version:"DICOM"},"(0018,0094)":{tag:"(0018,0094)",vr:"DS",name:"PercentPhaseFieldOfView",vm:"1",version:"DICOM"},"(0018,0095)":{tag:"(0018,0095)",vr:"DS",name:"PixelBandwidth",vm:"1",version:"DICOM"},"(0018,1000)":{tag:"(0018,1000)",vr:"LO",name:"DeviceSerialNumber",vm:"1",version:"DICOM"},"(0018,1002)":{tag:"(0018,1002)",vr:"UI",name:"DeviceUID",vm:"1",version:"DICOM"},"(0018,1003)":{tag:"(0018,1003)",vr:"LO",name:"DeviceID",vm:"1",version:"DICOM"},"(0018,1004)":{tag:"(0018,1004)",vr:"LO",name:"PlateID",vm:"1",version:"DICOM"},"(0018,1005)":{tag:"(0018,1005)",vr:"LO",name:"GeneratorID",vm:"1",version:"DICOM"},"(0018,1006)":{tag:"(0018,1006)",vr:"LO",name:"GridID",vm:"1",version:"DICOM"},"(0018,1007)":{tag:"(0018,1007)",vr:"LO",name:"CassetteID",vm:"1",version:"DICOM"},"(0018,1008)":{tag:"(0018,1008)",vr:"LO",name:"GantryID",vm:"1",version:"DICOM"},"(0018,1010)":{tag:"(0018,1010)",vr:"LO",name:"SecondaryCaptureDeviceID",vm:"1",version:"DICOM"},"(0018,1012)":{tag:"(0018,1012)",vr:"DA",name:"DateOfSecondaryCapture",vm:"1",version:"DICOM"},"(0018,1014)":{tag:"(0018,1014)",vr:"TM",name:"TimeOfSecondaryCapture",vm:"1",version:"DICOM"},"(0018,1016)":{tag:"(0018,1016)",vr:"LO",name:"SecondaryCaptureDeviceManufacturer",vm:"1",version:"DICOM"},"(0018,1018)":{tag:"(0018,1018)",vr:"LO",name:"SecondaryCaptureDeviceManufacturerModelName",vm:"1",version:"DICOM"},"(0018,1019)":{tag:"(0018,1019)",vr:"LO",name:"SecondaryCaptureDeviceSoftwareVersions",vm:"1-n",version:"DICOM"},"(0018,1020)":{tag:"(0018,1020)",vr:"LO",name:"SoftwareVersions",vm:"1-n",version:"DICOM"},"(0018,1022)":{tag:"(0018,1022)",vr:"SH",name:"VideoImageFormatAcquired",vm:"1",version:"DICOM"},"(0018,1023)":{tag:"(0018,1023)",vr:"LO",name:"DigitalImageFormatAcquired",vm:"1",version:"DICOM"},"(0018,1030)":{tag:"(0018,1030)",vr:"LO",name:"ProtocolName",vm:"1",version:"DICOM"},"(0018,1040)":{tag:"(0018,1040)",vr:"LO",name:"ContrastBolusRoute",vm:"1",version:"DICOM"},"(0018,1041)":{tag:"(0018,1041)",vr:"DS",name:"ContrastBolusVolume",vm:"1",version:"DICOM"},"(0018,1042)":{tag:"(0018,1042)",vr:"TM",name:"ContrastBolusStartTime",vm:"1",version:"DICOM"},"(0018,1043)":{tag:"(0018,1043)",vr:"TM",name:"ContrastBolusStopTime",vm:"1",version:"DICOM"},"(0018,1044)":{tag:"(0018,1044)",vr:"DS",name:"ContrastBolusTotalDose",vm:"1",version:"DICOM"},"(0018,1045)":{tag:"(0018,1045)",vr:"IS",name:"SyringeCounts",vm:"1",version:"DICOM"},"(0018,1046)":{tag:"(0018,1046)",vr:"DS",name:"ContrastFlowRate",vm:"1-n",version:"DICOM"},"(0018,1047)":{tag:"(0018,1047)",vr:"DS",name:"ContrastFlowDuration",vm:"1-n",version:"DICOM"},"(0018,1048)":{tag:"(0018,1048)",vr:"CS",name:"ContrastBolusIngredient",vm:"1",version:"DICOM"},"(0018,1049)":{tag:"(0018,1049)",vr:"DS",name:"ContrastBolusIngredientConcentration",vm:"1",version:"DICOM"},"(0018,1050)":{tag:"(0018,1050)",vr:"DS",name:"SpatialResolution",vm:"1",version:"DICOM"},"(0018,1060)":{tag:"(0018,1060)",vr:"DS",name:"TriggerTime",vm:"1",version:"DICOM"},"(0018,1061)":{tag:"(0018,1061)",vr:"LO",name:"TriggerSourceOrType",vm:"1",version:"DICOM"},"(0018,1062)":{tag:"(0018,1062)",vr:"IS",name:"NominalInterval",vm:"1",version:"DICOM"},"(0018,1063)":{tag:"(0018,1063)",vr:"DS",name:"FrameTime",vm:"1",version:"DICOM"},"(0018,1064)":{tag:"(0018,1064)",vr:"LO",name:"CardiacFramingType",vm:"1",version:"DICOM"},"(0018,1065)":{tag:"(0018,1065)",vr:"DS",name:"FrameTimeVector",vm:"1-n",version:"DICOM"},"(0018,1066)":{tag:"(0018,1066)",vr:"DS",name:"FrameDelay",vm:"1",version:"DICOM"},"(0018,1067)":{tag:"(0018,1067)",vr:"DS",name:"ImageTriggerDelay",vm:"1",version:"DICOM"},"(0018,1068)":{tag:"(0018,1068)",vr:"DS",name:"MultiplexGroupTimeOffset",vm:"1",version:"DICOM"},"(0018,1069)":{tag:"(0018,1069)",vr:"DS",name:"TriggerTimeOffset",vm:"1",version:"DICOM"},"(0018,106A)":{tag:"(0018,106A)",vr:"CS",name:"SynchronizationTrigger",vm:"1",version:"DICOM"},"(0018,106C)":{tag:"(0018,106C)",vr:"US",name:"SynchronizationChannel",vm:"2",version:"DICOM"},"(0018,106E)":{tag:"(0018,106E)",vr:"UL",name:"TriggerSamplePosition",vm:"1",version:"DICOM"},"(0018,1070)":{tag:"(0018,1070)",vr:"LO",name:"RadiopharmaceuticalRoute",vm:"1",version:"DICOM"},"(0018,1071)":{tag:"(0018,1071)",vr:"DS",name:"RadiopharmaceuticalVolume",vm:"1",version:"DICOM"},"(0018,1072)":{tag:"(0018,1072)",vr:"TM",name:"RadiopharmaceuticalStartTime",vm:"1",version:"DICOM"},"(0018,1073)":{tag:"(0018,1073)",vr:"TM",name:"RadiopharmaceuticalStopTime",vm:"1",version:"DICOM"},"(0018,1074)":{tag:"(0018,1074)",vr:"DS",name:"RadionuclideTotalDose",vm:"1",version:"DICOM"},"(0018,1075)":{tag:"(0018,1075)",vr:"DS",name:"RadionuclideHalfLife",vm:"1",version:"DICOM"},"(0018,1076)":{tag:"(0018,1076)",vr:"DS",name:"RadionuclidePositronFraction",vm:"1",version:"DICOM"},"(0018,1077)":{tag:"(0018,1077)",vr:"DS",name:"RadiopharmaceuticalSpecificActivity",vm:"1",version:"DICOM"},"(0018,1078)":{tag:"(0018,1078)",vr:"DT",name:"RadiopharmaceuticalStartDateTime",vm:"1",version:"DICOM"},"(0018,1079)":{tag:"(0018,1079)",vr:"DT",name:"RadiopharmaceuticalStopDateTime",vm:"1",version:"DICOM"},"(0018,1080)":{tag:"(0018,1080)",vr:"CS",name:"BeatRejectionFlag",vm:"1",version:"DICOM"},"(0018,1081)":{tag:"(0018,1081)",vr:"IS",name:"LowRRValue",vm:"1",version:"DICOM"},"(0018,1082)":{tag:"(0018,1082)",vr:"IS",name:"HighRRValue",vm:"1",version:"DICOM"},"(0018,1083)":{tag:"(0018,1083)",vr:"IS",name:"IntervalsAcquired",vm:"1",version:"DICOM"},"(0018,1084)":{tag:"(0018,1084)",vr:"IS",name:"IntervalsRejected",vm:"1",version:"DICOM"},"(0018,1085)":{tag:"(0018,1085)",vr:"LO",name:"PVCRejection",vm:"1",version:"DICOM"},"(0018,1086)":{tag:"(0018,1086)",vr:"IS",name:"SkipBeats",vm:"1",version:"DICOM"},"(0018,1088)":{tag:"(0018,1088)",vr:"IS",name:"HeartRate",vm:"1",version:"DICOM"},"(0018,1090)":{tag:"(0018,1090)",vr:"IS",name:"CardiacNumberOfImages",vm:"1",version:"DICOM"},"(0018,1094)":{tag:"(0018,1094)",vr:"IS",name:"TriggerWindow",vm:"1",version:"DICOM"},"(0018,1100)":{tag:"(0018,1100)",vr:"DS",name:"ReconstructionDiameter",vm:"1",version:"DICOM"},"(0018,1110)":{tag:"(0018,1110)",vr:"DS",name:"DistanceSourceToDetector",vm:"1",version:"DICOM"},"(0018,1111)":{tag:"(0018,1111)",vr:"DS",name:"DistanceSourceToPatient",vm:"1",version:"DICOM"},"(0018,1114)":{tag:"(0018,1114)",vr:"DS",name:"EstimatedRadiographicMagnificationFactor",vm:"1",version:"DICOM"},"(0018,1120)":{tag:"(0018,1120)",vr:"DS",name:"GantryDetectorTilt",vm:"1",version:"DICOM"},"(0018,1121)":{tag:"(0018,1121)",vr:"DS",name:"GantryDetectorSlew",vm:"1",version:"DICOM"},"(0018,1130)":{tag:"(0018,1130)",vr:"DS",name:"TableHeight",vm:"1",version:"DICOM"},"(0018,1131)":{tag:"(0018,1131)",vr:"DS",name:"TableTraverse",vm:"1",version:"DICOM"},"(0018,1134)":{tag:"(0018,1134)",vr:"CS",name:"TableMotion",vm:"1",version:"DICOM"},"(0018,1135)":{tag:"(0018,1135)",vr:"DS",name:"TableVerticalIncrement",vm:"1-n",version:"DICOM"},"(0018,1136)":{tag:"(0018,1136)",vr:"DS",name:"TableLateralIncrement",vm:"1-n",version:"DICOM"},"(0018,1137)":{tag:"(0018,1137)",vr:"DS",name:"TableLongitudinalIncrement",vm:"1-n",version:"DICOM"},"(0018,1138)":{tag:"(0018,1138)",vr:"DS",name:"TableAngle",vm:"1",version:"DICOM"},"(0018,113A)":{tag:"(0018,113A)",vr:"CS",name:"TableType",vm:"1",version:"DICOM"},"(0018,1140)":{tag:"(0018,1140)",vr:"CS",name:"RotationDirection",vm:"1",version:"DICOM"},"(0018,1142)":{tag:"(0018,1142)",vr:"DS",name:"RadialPosition",vm:"1-n",version:"DICOM"},"(0018,1143)":{tag:"(0018,1143)",vr:"DS",name:"ScanArc",vm:"1",version:"DICOM"},"(0018,1144)":{tag:"(0018,1144)",vr:"DS",name:"AngularStep",vm:"1",version:"DICOM"},"(0018,1145)":{tag:"(0018,1145)",vr:"DS",name:"CenterOfRotationOffset",vm:"1",version:"DICOM"},"(0018,1147)":{tag:"(0018,1147)",vr:"CS",name:"FieldOfViewShape",vm:"1",version:"DICOM"},"(0018,1149)":{tag:"(0018,1149)",vr:"IS",name:"FieldOfViewDimensions",vm:"1-2",version:"DICOM"},"(0018,1150)":{tag:"(0018,1150)",vr:"IS",name:"ExposureTime",vm:"1",version:"DICOM"},"(0018,1151)":{tag:"(0018,1151)",vr:"IS",name:"XRayTubeCurrent",vm:"1",version:"DICOM"},"(0018,1152)":{tag:"(0018,1152)",vr:"IS",name:"Exposure",vm:"1",version:"DICOM"},"(0018,1153)":{tag:"(0018,1153)",vr:"IS",name:"ExposureInuAs",vm:"1",version:"DICOM"},"(0018,1154)":{tag:"(0018,1154)",vr:"DS",name:"AveragePulseWidth",vm:"1",version:"DICOM"},"(0018,1155)":{tag:"(0018,1155)",vr:"CS",name:"RadiationSetting",vm:"1",version:"DICOM"},"(0018,1156)":{tag:"(0018,1156)",vr:"CS",name:"RectificationType",vm:"1",version:"DICOM"},"(0018,115A)":{tag:"(0018,115A)",vr:"CS",name:"RadiationMode",vm:"1",version:"DICOM"},"(0018,115E)":{tag:"(0018,115E)",vr:"DS",name:"ImageAndFluoroscopyAreaDoseProduct",vm:"1",version:"DICOM"},"(0018,1160)":{tag:"(0018,1160)",vr:"SH",name:"FilterType",vm:"1",version:"DICOM"},"(0018,1161)":{tag:"(0018,1161)",vr:"LO",name:"TypeOfFilters",vm:"1-n",version:"DICOM"},"(0018,1162)":{tag:"(0018,1162)",vr:"DS",name:"IntensifierSize",vm:"1",version:"DICOM"},"(0018,1164)":{tag:"(0018,1164)",vr:"DS",name:"ImagerPixelSpacing",vm:"2",version:"DICOM"},"(0018,1166)":{tag:"(0018,1166)",vr:"CS",name:"Grid",vm:"1-n",version:"DICOM"},"(0018,1170)":{tag:"(0018,1170)",vr:"IS",name:"GeneratorPower",vm:"1",version:"DICOM"},"(0018,1180)":{tag:"(0018,1180)",vr:"SH",name:"CollimatorGridName",vm:"1",version:"DICOM"},"(0018,1181)":{tag:"(0018,1181)",vr:"CS",name:"CollimatorType",vm:"1",version:"DICOM"},"(0018,1182)":{tag:"(0018,1182)",vr:"IS",name:"FocalDistance",vm:"1-2",version:"DICOM"},"(0018,1183)":{tag:"(0018,1183)",vr:"DS",name:"XFocusCenter",vm:"1-2",version:"DICOM"},"(0018,1184)":{tag:"(0018,1184)",vr:"DS",name:"YFocusCenter",vm:"1-2",version:"DICOM"},"(0018,1190)":{tag:"(0018,1190)",vr:"DS",name:"FocalSpots",vm:"1-n",version:"DICOM"},"(0018,1191)":{tag:"(0018,1191)",vr:"CS",name:"AnodeTargetMaterial",vm:"1",version:"DICOM"},"(0018,11A0)":{tag:"(0018,11A0)",vr:"DS",name:"BodyPartThickness",vm:"1",version:"DICOM"},"(0018,11A2)":{tag:"(0018,11A2)",vr:"DS",name:"CompressionForce",vm:"1",version:"DICOM"},"(0018,11A4)":{tag:"(0018,11A4)",vr:"LO",name:"PaddleDescription",vm:"1",version:"DICOM"},"(0018,1200)":{tag:"(0018,1200)",vr:"DA",name:"DateOfLastCalibration",vm:"1-n",version:"DICOM"},"(0018,1201)":{tag:"(0018,1201)",vr:"TM",name:"TimeOfLastCalibration",vm:"1-n",version:"DICOM"},"(0018,1202)":{tag:"(0018,1202)",vr:"DT",name:"DateTimeOfLastCalibration",vm:"1",version:"DICOM"},"(0018,1210)":{tag:"(0018,1210)",vr:"SH",name:"ConvolutionKernel",vm:"1-n",version:"DICOM"},"(0018,1242)":{tag:"(0018,1242)",vr:"IS",name:"ActualFrameDuration",vm:"1",version:"DICOM"},"(0018,1243)":{tag:"(0018,1243)",vr:"IS",name:"CountRate",vm:"1",version:"DICOM"},"(0018,1244)":{tag:"(0018,1244)",vr:"US",name:"PreferredPlaybackSequencing",vm:"1",version:"DICOM"},"(0018,1250)":{tag:"(0018,1250)",vr:"SH",name:"ReceiveCoilName",vm:"1",version:"DICOM"},"(0018,1251)":{tag:"(0018,1251)",vr:"SH",name:"TransmitCoilName",vm:"1",version:"DICOM"},"(0018,1260)":{tag:"(0018,1260)",vr:"SH",name:"PlateType",vm:"1",version:"DICOM"},"(0018,1261)":{tag:"(0018,1261)",vr:"LO",name:"PhosphorType",vm:"1",version:"DICOM"},"(0018,1300)":{tag:"(0018,1300)",vr:"DS",name:"ScanVelocity",vm:"1",version:"DICOM"},"(0018,1301)":{tag:"(0018,1301)",vr:"CS",name:"WholeBodyTechnique",vm:"1-n",version:"DICOM"},"(0018,1302)":{tag:"(0018,1302)",vr:"IS",name:"ScanLength",vm:"1",version:"DICOM"},"(0018,1310)":{tag:"(0018,1310)",vr:"US",name:"AcquisitionMatrix",vm:"4",version:"DICOM"},"(0018,1312)":{tag:"(0018,1312)",vr:"CS",name:"InPlanePhaseEncodingDirection",vm:"1",version:"DICOM"},"(0018,1314)":{tag:"(0018,1314)",vr:"DS",name:"FlipAngle",vm:"1",version:"DICOM"},"(0018,1315)":{tag:"(0018,1315)",vr:"CS",name:"VariableFlipAngleFlag",vm:"1",version:"DICOM"},"(0018,1316)":{tag:"(0018,1316)",vr:"DS",name:"SAR",vm:"1",version:"DICOM"},"(0018,1318)":{tag:"(0018,1318)",vr:"DS",name:"dBdt",vm:"1",version:"DICOM"},"(0018,1400)":{tag:"(0018,1400)",vr:"LO",name:"AcquisitionDeviceProcessingDescription",vm:"1",version:"DICOM"},"(0018,1401)":{tag:"(0018,1401)",vr:"LO",name:"AcquisitionDeviceProcessingCode",vm:"1",version:"DICOM"},"(0018,1402)":{tag:"(0018,1402)",vr:"CS",name:"CassetteOrientation",vm:"1",version:"DICOM"},"(0018,1403)":{tag:"(0018,1403)",vr:"CS",name:"CassetteSize",vm:"1",version:"DICOM"},"(0018,1404)":{tag:"(0018,1404)",vr:"US",name:"ExposuresOnPlate",vm:"1",version:"DICOM"},"(0018,1405)":{tag:"(0018,1405)",vr:"IS",name:"RelativeXRayExposure",vm:"1",version:"DICOM"},"(0018,1411)":{tag:"(0018,1411)",vr:"DS",name:"ExposureIndex",vm:"1",version:"DICOM"},"(0018,1412)":{tag:"(0018,1412)",vr:"DS",name:"TargetExposureIndex",vm:"1",version:"DICOM"},"(0018,1413)":{tag:"(0018,1413)",vr:"DS",name:"DeviationIndex",vm:"1",version:"DICOM"},"(0018,1450)":{tag:"(0018,1450)",vr:"DS",name:"ColumnAngulation",vm:"1",version:"DICOM"},"(0018,1460)":{tag:"(0018,1460)",vr:"DS",name:"TomoLayerHeight",vm:"1",version:"DICOM"},"(0018,1470)":{tag:"(0018,1470)",vr:"DS",name:"TomoAngle",vm:"1",version:"DICOM"},"(0018,1480)":{tag:"(0018,1480)",vr:"DS",name:"TomoTime",vm:"1",version:"DICOM"},"(0018,1490)":{tag:"(0018,1490)",vr:"CS",name:"TomoType",vm:"1",version:"DICOM"},"(0018,1491)":{tag:"(0018,1491)",vr:"CS",name:"TomoClass",vm:"1",version:"DICOM"},"(0018,1495)":{tag:"(0018,1495)",vr:"IS",name:"NumberOfTomosynthesisSourceImages",vm:"1",version:"DICOM"},"(0018,1500)":{tag:"(0018,1500)",vr:"CS",name:"PositionerMotion",vm:"1",version:"DICOM"},"(0018,1508)":{tag:"(0018,1508)",vr:"CS",name:"PositionerType",vm:"1",version:"DICOM"},"(0018,1510)":{tag:"(0018,1510)",vr:"DS",name:"PositionerPrimaryAngle",vm:"1",version:"DICOM"},"(0018,1511)":{tag:"(0018,1511)",vr:"DS",name:"PositionerSecondaryAngle",vm:"1",version:"DICOM"},"(0018,1520)":{tag:"(0018,1520)",vr:"DS",name:"PositionerPrimaryAngleIncrement",vm:"1-n",version:"DICOM"},"(0018,1521)":{tag:"(0018,1521)",vr:"DS",name:"PositionerSecondaryAngleIncrement",vm:"1-n",version:"DICOM"},"(0018,1530)":{tag:"(0018,1530)",vr:"DS",name:"DetectorPrimaryAngle",vm:"1",version:"DICOM"},"(0018,1531)":{tag:"(0018,1531)",vr:"DS",name:"DetectorSecondaryAngle",vm:"1",version:"DICOM"},"(0018,1600)":{tag:"(0018,1600)",vr:"CS",name:"ShutterShape",vm:"1-3",version:"DICOM"},"(0018,1602)":{tag:"(0018,1602)",vr:"IS",name:"ShutterLeftVerticalEdge",vm:"1",version:"DICOM"},"(0018,1604)":{tag:"(0018,1604)",vr:"IS",name:"ShutterRightVerticalEdge",vm:"1",version:"DICOM"},"(0018,1606)":{tag:"(0018,1606)",vr:"IS",name:"ShutterUpperHorizontalEdge",vm:"1",version:"DICOM"},"(0018,1608)":{tag:"(0018,1608)",vr:"IS",name:"ShutterLowerHorizontalEdge",vm:"1",version:"DICOM"},"(0018,1610)":{tag:"(0018,1610)",vr:"IS",name:"CenterOfCircularShutter",vm:"2",version:"DICOM"},"(0018,1612)":{tag:"(0018,1612)",vr:"IS",name:"RadiusOfCircularShutter",vm:"1",version:"DICOM"},"(0018,1620)":{tag:"(0018,1620)",vr:"IS",name:"VerticesOfThePolygonalShutter",vm:"2-2n",version:"DICOM"},"(0018,1622)":{tag:"(0018,1622)",vr:"US",name:"ShutterPresentationValue",vm:"1",version:"DICOM"},"(0018,1623)":{tag:"(0018,1623)",vr:"US",name:"ShutterOverlayGroup",vm:"1",version:"DICOM"},"(0018,1624)":{tag:"(0018,1624)",vr:"US",name:"ShutterPresentationColorCIELabValue",vm:"3",version:"DICOM"},"(0018,1700)":{tag:"(0018,1700)",vr:"CS",name:"CollimatorShape",vm:"1-3",version:"DICOM"},"(0018,1702)":{tag:"(0018,1702)",vr:"IS",name:"CollimatorLeftVerticalEdge",vm:"1",version:"DICOM"},"(0018,1704)":{tag:"(0018,1704)",vr:"IS",name:"CollimatorRightVerticalEdge",vm:"1",version:"DICOM"},"(0018,1706)":{tag:"(0018,1706)",vr:"IS",name:"CollimatorUpperHorizontalEdge",vm:"1",version:"DICOM"},"(0018,1708)":{tag:"(0018,1708)",vr:"IS",name:"CollimatorLowerHorizontalEdge",vm:"1",version:"DICOM"},"(0018,1710)":{tag:"(0018,1710)",vr:"IS",name:"CenterOfCircularCollimator",vm:"2",version:"DICOM"},"(0018,1712)":{tag:"(0018,1712)",vr:"IS",name:"RadiusOfCircularCollimator",vm:"1",version:"DICOM"},"(0018,1720)":{tag:"(0018,1720)",vr:"IS",name:"VerticesOfThePolygonalCollimator",vm:"2-2n",version:"DICOM"},"(0018,1800)":{tag:"(0018,1800)",vr:"CS",name:"AcquisitionTimeSynchronized",vm:"1",version:"DICOM"},"(0018,1801)":{tag:"(0018,1801)",vr:"SH",name:"TimeSource",vm:"1",version:"DICOM"},"(0018,1802)":{tag:"(0018,1802)",vr:"CS",name:"TimeDistributionProtocol",vm:"1",version:"DICOM"},"(0018,1803)":{tag:"(0018,1803)",vr:"LO",name:"NTPSourceAddress",vm:"1",version:"DICOM"},"(0018,2001)":{tag:"(0018,2001)",vr:"IS",name:"PageNumberVector",vm:"1-n",version:"DICOM"},"(0018,2002)":{tag:"(0018,2002)",vr:"SH",name:"FrameLabelVector",vm:"1-n",version:"DICOM"},"(0018,2003)":{tag:"(0018,2003)",vr:"DS",name:"FramePrimaryAngleVector",vm:"1-n",version:"DICOM"},"(0018,2004)":{tag:"(0018,2004)",vr:"DS",name:"FrameSecondaryAngleVector",vm:"1-n",version:"DICOM"},"(0018,2005)":{tag:"(0018,2005)",vr:"DS",name:"SliceLocationVector",vm:"1-n",version:"DICOM"},"(0018,2006)":{tag:"(0018,2006)",vr:"SH",name:"DisplayWindowLabelVector",vm:"1-n",version:"DICOM"},"(0018,2010)":{tag:"(0018,2010)",vr:"DS",name:"NominalScannedPixelSpacing",vm:"2",version:"DICOM"},"(0018,2020)":{tag:"(0018,2020)",vr:"CS",name:"DigitizingDeviceTransportDirection",vm:"1",version:"DICOM"},"(0018,2030)":{tag:"(0018,2030)",vr:"DS",name:"RotationOfScannedFilm",vm:"1",version:"DICOM"},"(0018,2041)":{tag:"(0018,2041)",vr:"SQ",name:"BiopsyTargetSequence",vm:"1",version:"DICOM"},"(0018,2042)":{tag:"(0018,2042)",vr:"UI",name:"TargetUID",vm:"1",version:"DICOM"},"(0018,2043)":{tag:"(0018,2043)",vr:"FL",name:"LocalizingCursorPosition",vm:"2",version:"DICOM"},"(0018,2044)":{tag:"(0018,2044)",vr:"FL",name:"CalculatedTargetPosition",vm:"3",version:"DICOM"},"(0018,2045)":{tag:"(0018,2045)",vr:"SH",name:"TargetLabel",vm:"1",version:"DICOM"},"(0018,2046)":{tag:"(0018,2046)",vr:"FL",name:"DisplayedZValue",vm:"1",version:"DICOM"},"(0018,3100)":{tag:"(0018,3100)",vr:"CS",name:"IVUSAcquisition",vm:"1",version:"DICOM"},"(0018,3101)":{tag:"(0018,3101)",vr:"DS",name:"IVUSPullbackRate",vm:"1",version:"DICOM"},"(0018,3102)":{tag:"(0018,3102)",vr:"DS",name:"IVUSGatedRate",vm:"1",version:"DICOM"},"(0018,3103)":{tag:"(0018,3103)",vr:"IS",name:"IVUSPullbackStartFrameNumber",vm:"1",version:"DICOM"},"(0018,3104)":{tag:"(0018,3104)",vr:"IS",name:"IVUSPullbackStopFrameNumber",vm:"1",version:"DICOM"},"(0018,3105)":{tag:"(0018,3105)",vr:"IS",name:"LesionNumber",vm:"1-n",version:"DICOM"},"(0018,5000)":{tag:"(0018,5000)",vr:"SH",name:"OutputPower",vm:"1-n",version:"DICOM"},"(0018,5010)":{tag:"(0018,5010)",vr:"LO",name:"TransducerData",vm:"1-n",version:"DICOM"},"(0018,5012)":{tag:"(0018,5012)",vr:"DS",name:"FocusDepth",vm:"1",version:"DICOM"},"(0018,5020)":{tag:"(0018,5020)",vr:"LO",name:"ProcessingFunction",vm:"1",version:"DICOM"},"(0018,5022)":{tag:"(0018,5022)",vr:"DS",name:"MechanicalIndex",vm:"1",version:"DICOM"},"(0018,5024)":{tag:"(0018,5024)",vr:"DS",name:"BoneThermalIndex",vm:"1",version:"DICOM"},"(0018,5026)":{tag:"(0018,5026)",vr:"DS",name:"CranialThermalIndex",vm:"1",version:"DICOM"},"(0018,5027)":{tag:"(0018,5027)",vr:"DS",name:"SoftTissueThermalIndex",vm:"1",version:"DICOM"},"(0018,5028)":{tag:"(0018,5028)",vr:"DS",name:"SoftTissueFocusThermalIndex",vm:"1",version:"DICOM"},"(0018,5029)":{tag:"(0018,5029)",vr:"DS",name:"SoftTissueSurfaceThermalIndex",vm:"1",version:"DICOM"},"(0018,5050)":{tag:"(0018,5050)",vr:"IS",name:"DepthOfScanField",vm:"1",version:"DICOM"},"(0018,5100)":{tag:"(0018,5100)",vr:"CS",name:"PatientPosition",vm:"1",version:"DICOM"},"(0018,5101)":{tag:"(0018,5101)",vr:"CS",name:"ViewPosition",vm:"1",version:"DICOM"},"(0018,5104)":{tag:"(0018,5104)",vr:"SQ",name:"ProjectionEponymousNameCodeSequence",vm:"1",version:"DICOM"},"(0018,6000)":{tag:"(0018,6000)",vr:"DS",name:"Sensitivity",vm:"1",version:"DICOM"},"(0018,6011)":{tag:"(0018,6011)",vr:"SQ",name:"SequenceOfUltrasoundRegions",vm:"1",version:"DICOM"},"(0018,6012)":{tag:"(0018,6012)",vr:"US",name:"RegionSpatialFormat",vm:"1",version:"DICOM"},"(0018,6014)":{tag:"(0018,6014)",vr:"US",name:"RegionDataType",vm:"1",version:"DICOM"},"(0018,6016)":{tag:"(0018,6016)",vr:"UL",name:"RegionFlags",vm:"1",version:"DICOM"},"(0018,6018)":{tag:"(0018,6018)",vr:"UL",name:"RegionLocationMinX0",vm:"1",version:"DICOM"},"(0018,601A)":{tag:"(0018,601A)",vr:"UL",name:"RegionLocationMinY0",vm:"1",version:"DICOM"},"(0018,601C)":{tag:"(0018,601C)",vr:"UL",name:"RegionLocationMaxX1",vm:"1",version:"DICOM"},"(0018,601E)":{tag:"(0018,601E)",vr:"UL",name:"RegionLocationMaxY1",vm:"1",version:"DICOM"},"(0018,6020)":{tag:"(0018,6020)",vr:"SL",name:"ReferencePixelX0",vm:"1",version:"DICOM"},"(0018,6022)":{tag:"(0018,6022)",vr:"SL",name:"ReferencePixelY0",vm:"1",version:"DICOM"},"(0018,6024)":{tag:"(0018,6024)",vr:"US",name:"PhysicalUnitsXDirection",vm:"1",version:"DICOM"},"(0018,6026)":{tag:"(0018,6026)",vr:"US",name:"PhysicalUnitsYDirection",vm:"1",version:"DICOM"},"(0018,6028)":{tag:"(0018,6028)",vr:"FD",name:"ReferencePixelPhysicalValueX",vm:"1",version:"DICOM"},"(0018,602A)":{tag:"(0018,602A)",vr:"FD",name:"ReferencePixelPhysicalValueY",vm:"1",version:"DICOM"},"(0018,602C)":{tag:"(0018,602C)",vr:"FD",name:"PhysicalDeltaX",vm:"1",version:"DICOM"},"(0018,602E)":{tag:"(0018,602E)",vr:"FD",name:"PhysicalDeltaY",vm:"1",version:"DICOM"},"(0018,6030)":{tag:"(0018,6030)",vr:"UL",name:"TransducerFrequency",vm:"1",version:"DICOM"},"(0018,6031)":{tag:"(0018,6031)",vr:"CS",name:"TransducerType",vm:"1",version:"DICOM"},"(0018,6032)":{tag:"(0018,6032)",vr:"UL",name:"PulseRepetitionFrequency",vm:"1",version:"DICOM"},"(0018,6034)":{tag:"(0018,6034)",vr:"FD",name:"DopplerCorrectionAngle",vm:"1",version:"DICOM"},"(0018,6036)":{tag:"(0018,6036)",vr:"FD",name:"SteeringAngle",vm:"1",version:"DICOM"},"(0018,6039)":{tag:"(0018,6039)",vr:"SL",name:"DopplerSampleVolumeXPosition",vm:"1",version:"DICOM"},"(0018,603B)":{tag:"(0018,603B)",vr:"SL",name:"DopplerSampleVolumeYPosition",vm:"1",version:"DICOM"},"(0018,603D)":{tag:"(0018,603D)",vr:"SL",name:"TMLinePositionX0",vm:"1",version:"DICOM"},"(0018,603F)":{tag:"(0018,603F)",vr:"SL",name:"TMLinePositionY0",vm:"1",version:"DICOM"},"(0018,6041)":{tag:"(0018,6041)",vr:"SL",name:"TMLinePositionX1",vm:"1",version:"DICOM"},"(0018,6043)":{tag:"(0018,6043)",vr:"SL",name:"TMLinePositionY1",vm:"1",version:"DICOM"},"(0018,6044)":{tag:"(0018,6044)",vr:"US",name:"PixelComponentOrganization",vm:"1",version:"DICOM"},"(0018,6046)":{tag:"(0018,6046)",vr:"UL",name:"PixelComponentMask",vm:"1",version:"DICOM"},"(0018,6048)":{tag:"(0018,6048)",vr:"UL",name:"PixelComponentRangeStart",vm:"1",version:"DICOM"},"(0018,604A)":{tag:"(0018,604A)",vr:"UL",name:"PixelComponentRangeStop",vm:"1",version:"DICOM"},"(0018,604C)":{tag:"(0018,604C)",vr:"US",name:"PixelComponentPhysicalUnits",vm:"1",version:"DICOM"},"(0018,604E)":{tag:"(0018,604E)",vr:"US",name:"PixelComponentDataType",vm:"1",version:"DICOM"},"(0018,6050)":{tag:"(0018,6050)",vr:"UL",name:"NumberOfTableBreakPoints",vm:"1",version:"DICOM"},"(0018,6052)":{tag:"(0018,6052)",vr:"UL",name:"TableOfXBreakPoints",vm:"1-n",version:"DICOM"},"(0018,6054)":{tag:"(0018,6054)",vr:"FD",name:"TableOfYBreakPoints",vm:"1-n",version:"DICOM"},"(0018,6056)":{tag:"(0018,6056)",vr:"UL",name:"NumberOfTableEntries",vm:"1",version:"DICOM"},"(0018,6058)":{tag:"(0018,6058)",vr:"UL",name:"TableOfPixelValues",vm:"1-n",version:"DICOM"},"(0018,605A)":{tag:"(0018,605A)",vr:"FL",name:"TableOfParameterValues",vm:"1-n",version:"DICOM"},"(0018,6060)":{tag:"(0018,6060)",vr:"FL",name:"RWaveTimeVector",vm:"1-n",version:"DICOM"},"(0018,7000)":{tag:"(0018,7000)",vr:"CS",name:"DetectorConditionsNominalFlag",vm:"1",version:"DICOM"},"(0018,7001)":{tag:"(0018,7001)",vr:"DS",name:"DetectorTemperature",vm:"1",version:"DICOM"},"(0018,7004)":{tag:"(0018,7004)",vr:"CS",name:"DetectorType",vm:"1",version:"DICOM"},"(0018,7005)":{tag:"(0018,7005)",vr:"CS",name:"DetectorConfiguration",vm:"1",version:"DICOM"},"(0018,7006)":{tag:"(0018,7006)",vr:"LT",name:"DetectorDescription",vm:"1",version:"DICOM"},"(0018,7008)":{tag:"(0018,7008)",vr:"LT",name:"DetectorMode",vm:"1",version:"DICOM"},"(0018,700A)":{tag:"(0018,700A)",vr:"SH",name:"DetectorID",vm:"1",version:"DICOM"},"(0018,700C)":{tag:"(0018,700C)",vr:"DA",name:"DateOfLastDetectorCalibration",vm:"1",version:"DICOM"},"(0018,700E)":{tag:"(0018,700E)",vr:"TM",name:"TimeOfLastDetectorCalibration",vm:"1",version:"DICOM"},"(0018,7010)":{tag:"(0018,7010)",vr:"IS",name:"ExposuresOnDetectorSinceLastCalibration",vm:"1",version:"DICOM"},"(0018,7011)":{tag:"(0018,7011)",vr:"IS",name:"ExposuresOnDetectorSinceManufactured",vm:"1",version:"DICOM"},"(0018,7012)":{tag:"(0018,7012)",vr:"DS",name:"DetectorTimeSinceLastExposure",vm:"1",version:"DICOM"},"(0018,7014)":{tag:"(0018,7014)",vr:"DS",name:"DetectorActiveTime",vm:"1",version:"DICOM"},"(0018,7016)":{tag:"(0018,7016)",vr:"DS",name:"DetectorActivationOffsetFromExposure",vm:"1",version:"DICOM"},"(0018,701A)":{tag:"(0018,701A)",vr:"DS",name:"DetectorBinning",vm:"2",version:"DICOM"},"(0018,7020)":{tag:"(0018,7020)",vr:"DS",name:"DetectorElementPhysicalSize",vm:"2",version:"DICOM"},"(0018,7022)":{tag:"(0018,7022)",vr:"DS",name:"DetectorElementSpacing",vm:"2",version:"DICOM"},"(0018,7024)":{tag:"(0018,7024)",vr:"CS",name:"DetectorActiveShape",vm:"1",version:"DICOM"},"(0018,7026)":{tag:"(0018,7026)",vr:"DS",name:"DetectorActiveDimensions",vm:"1-2",version:"DICOM"},"(0018,7028)":{tag:"(0018,7028)",vr:"DS",name:"DetectorActiveOrigin",vm:"2",version:"DICOM"},"(0018,702A)":{tag:"(0018,702A)",vr:"LO",name:"DetectorManufacturerName",vm:"1",version:"DICOM"},"(0018,702B)":{tag:"(0018,702B)",vr:"LO",name:"DetectorManufacturerModelName",vm:"1",version:"DICOM"},"(0018,7030)":{tag:"(0018,7030)",vr:"DS",name:"FieldOfViewOrigin",vm:"2",version:"DICOM"},"(0018,7032)":{tag:"(0018,7032)",vr:"DS",name:"FieldOfViewRotation",vm:"1",version:"DICOM"},"(0018,7034)":{tag:"(0018,7034)",vr:"CS",name:"FieldOfViewHorizontalFlip",vm:"1",version:"DICOM"},"(0018,7036)":{tag:"(0018,7036)",vr:"FL",name:"PixelDataAreaOriginRelativeToFOV",vm:"2",version:"DICOM"},"(0018,7038)":{tag:"(0018,7038)",vr:"FL",name:"PixelDataAreaRotationAngleRelativeToFOV",vm:"1",version:"DICOM"},"(0018,7040)":{tag:"(0018,7040)",vr:"LT",name:"GridAbsorbingMaterial",vm:"1",version:"DICOM"},"(0018,7041)":{tag:"(0018,7041)",vr:"LT",name:"GridSpacingMaterial",vm:"1",version:"DICOM"},"(0018,7042)":{tag:"(0018,7042)",vr:"DS",name:"GridThickness",vm:"1",version:"DICOM"},"(0018,7044)":{tag:"(0018,7044)",vr:"DS",name:"GridPitch",vm:"1",version:"DICOM"},"(0018,7046)":{tag:"(0018,7046)",vr:"IS",name:"GridAspectRatio",vm:"2",version:"DICOM"},"(0018,7048)":{tag:"(0018,7048)",vr:"DS",name:"GridPeriod",vm:"1",version:"DICOM"},"(0018,704C)":{tag:"(0018,704C)",vr:"DS",name:"GridFocalDistance",vm:"1",version:"DICOM"},"(0018,7050)":{tag:"(0018,7050)",vr:"CS",name:"FilterMaterial",vm:"1-n",version:"DICOM"},"(0018,7052)":{tag:"(0018,7052)",vr:"DS",name:"FilterThicknessMinimum",vm:"1-n",version:"DICOM"},"(0018,7054)":{tag:"(0018,7054)",vr:"DS",name:"FilterThicknessMaximum",vm:"1-n",version:"DICOM"},"(0018,7056)":{tag:"(0018,7056)",vr:"FL",name:"FilterBeamPathLengthMinimum",vm:"1-n",version:"DICOM"},"(0018,7058)":{tag:"(0018,7058)",vr:"FL",name:"FilterBeamPathLengthMaximum",vm:"1-n",version:"DICOM"},"(0018,7060)":{tag:"(0018,7060)",vr:"CS",name:"ExposureControlMode",vm:"1",version:"DICOM"},"(0018,7062)":{tag:"(0018,7062)",vr:"LT",name:"ExposureControlModeDescription",vm:"1",version:"DICOM"},"(0018,7064)":{tag:"(0018,7064)",vr:"CS",name:"ExposureStatus",vm:"1",version:"DICOM"},"(0018,7065)":{tag:"(0018,7065)",vr:"DS",name:"PhototimerSetting",vm:"1",version:"DICOM"},"(0018,8150)":{tag:"(0018,8150)",vr:"DS",name:"ExposureTimeInuS",vm:"1",version:"DICOM"},"(0018,8151)":{tag:"(0018,8151)",vr:"DS",name:"XRayTubeCurrentInuA",vm:"1",version:"DICOM"},"(0018,9004)":{tag:"(0018,9004)",vr:"CS",name:"ContentQualification",vm:"1",version:"DICOM"},"(0018,9005)":{tag:"(0018,9005)",vr:"SH",name:"PulseSequenceName",vm:"1",version:"DICOM"},"(0018,9006)":{tag:"(0018,9006)",vr:"SQ",name:"MRImagingModifierSequence",vm:"1",version:"DICOM"},"(0018,9008)":{tag:"(0018,9008)",vr:"CS",name:"EchoPulseSequence",vm:"1",version:"DICOM"},"(0018,9009)":{tag:"(0018,9009)",vr:"CS",name:"InversionRecovery",vm:"1",version:"DICOM"},"(0018,9010)":{tag:"(0018,9010)",vr:"CS",name:"FlowCompensation",vm:"1",version:"DICOM"},"(0018,9011)":{tag:"(0018,9011)",vr:"CS",name:"MultipleSpinEcho",vm:"1",version:"DICOM"},"(0018,9012)":{tag:"(0018,9012)",vr:"CS",name:"MultiPlanarExcitation",vm:"1",version:"DICOM"},"(0018,9014)":{tag:"(0018,9014)",vr:"CS",name:"PhaseContrast",vm:"1",version:"DICOM"},"(0018,9015)":{tag:"(0018,9015)",vr:"CS",name:"TimeOfFlightContrast",vm:"1",version:"DICOM"},"(0018,9016)":{tag:"(0018,9016)",vr:"CS",name:"Spoiling",vm:"1",version:"DICOM"},"(0018,9017)":{tag:"(0018,9017)",vr:"CS",name:"SteadyStatePulseSequence",vm:"1",version:"DICOM"},"(0018,9018)":{tag:"(0018,9018)",vr:"CS",name:"EchoPlanarPulseSequence",vm:"1",version:"DICOM"},"(0018,9019)":{tag:"(0018,9019)",vr:"FD",name:"TagAngleFirstAxis",vm:"1",version:"DICOM"},"(0018,9020)":{tag:"(0018,9020)",vr:"CS",name:"MagnetizationTransfer",vm:"1",version:"DICOM"},"(0018,9021)":{tag:"(0018,9021)",vr:"CS",name:"T2Preparation",vm:"1",version:"DICOM"},"(0018,9022)":{tag:"(0018,9022)",vr:"CS",name:"BloodSignalNulling",vm:"1",version:"DICOM"},"(0018,9024)":{tag:"(0018,9024)",vr:"CS",name:"SaturationRecovery",vm:"1",version:"DICOM"},"(0018,9025)":{tag:"(0018,9025)",vr:"CS",name:"SpectrallySelectedSuppression",vm:"1",version:"DICOM"},"(0018,9026)":{tag:"(0018,9026)",vr:"CS",name:"SpectrallySelectedExcitation",vm:"1",version:"DICOM"},"(0018,9027)":{tag:"(0018,9027)",vr:"CS",name:"SpatialPresaturation",vm:"1",version:"DICOM"},"(0018,9028)":{tag:"(0018,9028)",vr:"CS",name:"Tagging",vm:"1",version:"DICOM"},"(0018,9029)":{tag:"(0018,9029)",vr:"CS",name:"OversamplingPhase",vm:"1",version:"DICOM"},"(0018,9030)":{tag:"(0018,9030)",vr:"FD",name:"TagSpacingFirstDimension",vm:"1",version:"DICOM"},"(0018,9032)":{tag:"(0018,9032)",vr:"CS",name:"GeometryOfKSpaceTraversal",vm:"1",version:"DICOM"},"(0018,9033)":{tag:"(0018,9033)",vr:"CS",name:"SegmentedKSpaceTraversal",vm:"1",version:"DICOM"},"(0018,9034)":{tag:"(0018,9034)",vr:"CS",name:"RectilinearPhaseEncodeReordering",vm:"1",version:"DICOM"},"(0018,9035)":{tag:"(0018,9035)",vr:"FD",name:"TagThickness",vm:"1",version:"DICOM"},"(0018,9036)":{tag:"(0018,9036)",vr:"CS",name:"PartialFourierDirection",vm:"1",version:"DICOM"},"(0018,9037)":{tag:"(0018,9037)",vr:"CS",name:"CardiacSynchronizationTechnique",vm:"1",version:"DICOM"},"(0018,9041)":{tag:"(0018,9041)",vr:"LO",name:"ReceiveCoilManufacturerName",vm:"1",version:"DICOM"},"(0018,9042)":{tag:"(0018,9042)",vr:"SQ",name:"MRReceiveCoilSequence",vm:"1",version:"DICOM"},"(0018,9043)":{tag:"(0018,9043)",vr:"CS",name:"ReceiveCoilType",vm:"1",version:"DICOM"},"(0018,9044)":{tag:"(0018,9044)",vr:"CS",name:"QuadratureReceiveCoil",vm:"1",version:"DICOM"},"(0018,9045)":{tag:"(0018,9045)",vr:"SQ",name:"MultiCoilDefinitionSequence",vm:"1",version:"DICOM"},"(0018,9046)":{tag:"(0018,9046)",vr:"LO",name:"MultiCoilConfiguration",vm:"1",version:"DICOM"},"(0018,9047)":{tag:"(0018,9047)",vr:"SH",name:"MultiCoilElementName",vm:"1",version:"DICOM"},"(0018,9048)":{tag:"(0018,9048)",vr:"CS",name:"MultiCoilElementUsed",vm:"1",version:"DICOM"},"(0018,9049)":{tag:"(0018,9049)",vr:"SQ",name:"MRTransmitCoilSequence",vm:"1",version:"DICOM"},"(0018,9050)":{tag:"(0018,9050)",vr:"LO",name:"TransmitCoilManufacturerName",vm:"1",version:"DICOM"},"(0018,9051)":{tag:"(0018,9051)",vr:"CS",name:"TransmitCoilType",vm:"1",version:"DICOM"},"(0018,9052)":{tag:"(0018,9052)",vr:"FD",name:"SpectralWidth",vm:"1-2",version:"DICOM"},"(0018,9053)":{tag:"(0018,9053)",vr:"FD",name:"ChemicalShiftReference",vm:"1-2",version:"DICOM"},"(0018,9054)":{tag:"(0018,9054)",vr:"CS",name:"VolumeLocalizationTechnique",vm:"1",version:"DICOM"},"(0018,9058)":{tag:"(0018,9058)",vr:"US",name:"MRAcquisitionFrequencyEncodingSteps",vm:"1",version:"DICOM"},"(0018,9059)":{tag:"(0018,9059)",vr:"CS",name:"Decoupling",vm:"1",version:"DICOM"},"(0018,9060)":{tag:"(0018,9060)",vr:"CS",name:"DecoupledNucleus",vm:"1-2",version:"DICOM"},"(0018,9061)":{tag:"(0018,9061)",vr:"FD",name:"DecouplingFrequency",vm:"1-2",version:"DICOM"},"(0018,9062)":{tag:"(0018,9062)",vr:"CS",name:"DecouplingMethod",vm:"1",version:"DICOM"},"(0018,9063)":{tag:"(0018,9063)",vr:"FD",name:"DecouplingChemicalShiftReference",vm:"1-2",version:"DICOM"},"(0018,9064)":{tag:"(0018,9064)",vr:"CS",name:"KSpaceFiltering",vm:"1",version:"DICOM"},"(0018,9065)":{tag:"(0018,9065)",vr:"CS",name:"TimeDomainFiltering",vm:"1-2",version:"DICOM"},"(0018,9066)":{tag:"(0018,9066)",vr:"US",name:"NumberOfZeroFills",vm:"1-2",version:"DICOM"},"(0018,9067)":{tag:"(0018,9067)",vr:"CS",name:"BaselineCorrection",vm:"1",version:"DICOM"},"(0018,9069)":{tag:"(0018,9069)",vr:"FD",name:"ParallelReductionFactorInPlane",vm:"1",version:"DICOM"},"(0018,9070)":{tag:"(0018,9070)",vr:"FD",name:"CardiacRRIntervalSpecified",vm:"1",version:"DICOM"},"(0018,9073)":{tag:"(0018,9073)",vr:"FD",name:"AcquisitionDuration",vm:"1",version:"DICOM"},"(0018,9074)":{tag:"(0018,9074)",vr:"DT",name:"FrameAcquisitionDateTime",vm:"1",version:"DICOM"},"(0018,9075)":{tag:"(0018,9075)",vr:"CS",name:"DiffusionDirectionality",vm:"1",version:"DICOM"},"(0018,9076)":{tag:"(0018,9076)",vr:"SQ",name:"DiffusionGradientDirectionSequence",vm:"1",version:"DICOM"},"(0018,9077)":{tag:"(0018,9077)",vr:"CS",name:"ParallelAcquisition",vm:"1",version:"DICOM"},"(0018,9078)":{tag:"(0018,9078)",vr:"CS",name:"ParallelAcquisitionTechnique",vm:"1",version:"DICOM"},"(0018,9079)":{tag:"(0018,9079)",vr:"FD",name:"InversionTimes",vm:"1-n",version:"DICOM"},"(0018,9080)":{tag:"(0018,9080)",vr:"ST",name:"MetaboliteMapDescription",vm:"1",version:"DICOM"},"(0018,9081)":{tag:"(0018,9081)",vr:"CS",name:"PartialFourier",vm:"1",version:"DICOM"},"(0018,9082)":{tag:"(0018,9082)",vr:"FD",name:"EffectiveEchoTime",vm:"1",version:"DICOM"},"(0018,9083)":{tag:"(0018,9083)",vr:"SQ",name:"MetaboliteMapCodeSequence",vm:"1",version:"DICOM"},"(0018,9084)":{tag:"(0018,9084)",vr:"SQ",name:"ChemicalShiftSequence",vm:"1",version:"DICOM"},"(0018,9085)":{tag:"(0018,9085)",vr:"CS",name:"CardiacSignalSource",vm:"1",version:"DICOM"},"(0018,9087)":{tag:"(0018,9087)",vr:"FD",name:"DiffusionBValue",vm:"1",version:"DICOM"},"(0018,9089)":{tag:"(0018,9089)",vr:"FD",name:"DiffusionGradientOrientation",vm:"3",version:"DICOM"},"(0018,9090)":{tag:"(0018,9090)",vr:"FD",name:"VelocityEncodingDirection",vm:"3",version:"DICOM"},"(0018,9091)":{tag:"(0018,9091)",vr:"FD",name:"VelocityEncodingMinimumValue",vm:"1",version:"DICOM"},"(0018,9092)":{tag:"(0018,9092)",vr:"SQ",name:"VelocityEncodingAcquisitionSequence",vm:"1",version:"DICOM"},"(0018,9093)":{tag:"(0018,9093)",vr:"US",name:"NumberOfKSpaceTrajectories",vm:"1",version:"DICOM"},"(0018,9094)":{tag:"(0018,9094)",vr:"CS",name:"CoverageOfKSpace",vm:"1",version:"DICOM"},"(0018,9095)":{tag:"(0018,9095)",vr:"UL",name:"SpectroscopyAcquisitionPhaseRows",vm:"1",version:"DICOM"},"(0018,9098)":{tag:"(0018,9098)",vr:"FD",name:"TransmitterFrequency",vm:"1-2",version:"DICOM"},"(0018,9100)":{tag:"(0018,9100)",vr:"CS",name:"ResonantNucleus",vm:"1-2",version:"DICOM"},"(0018,9101)":{tag:"(0018,9101)",vr:"CS",name:"FrequencyCorrection",vm:"1",version:"DICOM"},"(0018,9103)":{tag:"(0018,9103)",vr:"SQ",name:"MRSpectroscopyFOVGeometrySequence",vm:"1",version:"DICOM"},"(0018,9104)":{tag:"(0018,9104)",vr:"FD",name:"SlabThickness",vm:"1",version:"DICOM"},"(0018,9105)":{tag:"(0018,9105)",vr:"FD",name:"SlabOrientation",vm:"3",version:"DICOM"},"(0018,9106)":{tag:"(0018,9106)",vr:"FD",name:"MidSlabPosition",vm:"3",version:"DICOM"},"(0018,9107)":{tag:"(0018,9107)",vr:"SQ",name:"MRSpatialSaturationSequence",vm:"1",version:"DICOM"},"(0018,9112)":{tag:"(0018,9112)",vr:"SQ",name:"MRTimingAndRelatedParametersSequence",vm:"1",version:"DICOM"},"(0018,9114)":{tag:"(0018,9114)",vr:"SQ",name:"MREchoSequence",vm:"1",version:"DICOM"},"(0018,9115)":{tag:"(0018,9115)",vr:"SQ",name:"MRModifierSequence",vm:"1",version:"DICOM"},"(0018,9117)":{tag:"(0018,9117)",vr:"SQ",name:"MRDiffusionSequence",vm:"1",version:"DICOM"},"(0018,9118)":{tag:"(0018,9118)",vr:"SQ",name:"CardiacSynchronizationSequence",vm:"1",version:"DICOM"},"(0018,9119)":{tag:"(0018,9119)",vr:"SQ",name:"MRAveragesSequence",vm:"1",version:"DICOM"},"(0018,9125)":{tag:"(0018,9125)",vr:"SQ",name:"MRFOVGeometrySequence",vm:"1",version:"DICOM"},"(0018,9126)":{tag:"(0018,9126)",vr:"SQ",name:"VolumeLocalizationSequence",vm:"1",version:"DICOM"},"(0018,9127)":{tag:"(0018,9127)",vr:"UL",name:"SpectroscopyAcquisitionDataColumns",vm:"1",version:"DICOM"},"(0018,9147)":{tag:"(0018,9147)",vr:"CS",name:"DiffusionAnisotropyType",vm:"1",version:"DICOM"},"(0018,9151)":{tag:"(0018,9151)",vr:"DT",name:"FrameReferenceDateTime",vm:"1",version:"DICOM"},"(0018,9152)":{tag:"(0018,9152)",vr:"SQ",name:"MRMetaboliteMapSequence",vm:"1",version:"DICOM"},"(0018,9155)":{tag:"(0018,9155)",vr:"FD",name:"ParallelReductionFactorOutOfPlane",vm:"1",version:"DICOM"},"(0018,9159)":{tag:"(0018,9159)",vr:"UL",name:"SpectroscopyAcquisitionOutOfPlanePhaseSteps",vm:"1",version:"DICOM"},"(0018,9168)":{tag:"(0018,9168)",vr:"FD",name:"ParallelReductionFactorSecondInPlane",vm:"1",version:"DICOM"},"(0018,9169)":{tag:"(0018,9169)",vr:"CS",name:"CardiacBeatRejectionTechnique",vm:"1",version:"DICOM"},"(0018,9170)":{tag:"(0018,9170)",vr:"CS",name:"RespiratoryMotionCompensationTechnique",vm:"1",version:"DICOM"},"(0018,9171)":{tag:"(0018,9171)",vr:"CS",name:"RespiratorySignalSource",vm:"1",version:"DICOM"},"(0018,9172)":{tag:"(0018,9172)",vr:"CS",name:"BulkMotionCompensationTechnique",vm:"1",version:"DICOM"},"(0018,9173)":{tag:"(0018,9173)",vr:"CS",name:"BulkMotionSignalSource",vm:"1",version:"DICOM"},"(0018,9174)":{tag:"(0018,9174)",vr:"CS",name:"ApplicableSafetyStandardAgency",vm:"1",version:"DICOM"},"(0018,9175)":{tag:"(0018,9175)",vr:"LO",name:"ApplicableSafetyStandardDescription",vm:"1",version:"DICOM"},"(0018,9176)":{tag:"(0018,9176)",vr:"SQ",name:"OperatingModeSequence",vm:"1",version:"DICOM"},"(0018,9177)":{tag:"(0018,9177)",vr:"CS",name:"OperatingModeType",vm:"1",version:"DICOM"},"(0018,9178)":{tag:"(0018,9178)",vr:"CS",name:"OperatingMode",vm:"1",version:"DICOM"},"(0018,9179)":{tag:"(0018,9179)",vr:"CS",name:"SpecificAbsorptionRateDefinition",vm:"1",version:"DICOM"},"(0018,9180)":{tag:"(0018,9180)",vr:"CS",name:"GradientOutputType",vm:"1",version:"DICOM"},"(0018,9181)":{tag:"(0018,9181)",vr:"FD",name:"SpecificAbsorptionRateValue",vm:"1",version:"DICOM"},"(0018,9182)":{tag:"(0018,9182)",vr:"FD",name:"GradientOutput",vm:"1",version:"DICOM"},"(0018,9183)":{tag:"(0018,9183)",vr:"CS",name:"FlowCompensationDirection",vm:"1",version:"DICOM"},"(0018,9184)":{tag:"(0018,9184)",vr:"FD",name:"TaggingDelay",vm:"1",version:"DICOM"},"(0018,9185)":{tag:"(0018,9185)",vr:"ST",name:"RespiratoryMotionCompensationTechniqueDescription",vm:"1",version:"DICOM"},"(0018,9186)":{tag:"(0018,9186)",vr:"SH",name:"RespiratorySignalSourceID",vm:"1",version:"DICOM"},"(0018,9197)":{tag:"(0018,9197)",vr:"SQ",name:"MRVelocityEncodingSequence",vm:"1",version:"DICOM"},"(0018,9198)":{tag:"(0018,9198)",vr:"CS",name:"FirstOrderPhaseCorrection",vm:"1",version:"DICOM"},"(0018,9199)":{tag:"(0018,9199)",vr:"CS",name:"WaterReferencedPhaseCorrection",vm:"1",version:"DICOM"},"(0018,9200)":{tag:"(0018,9200)",vr:"CS",name:"MRSpectroscopyAcquisitionType",vm:"1",version:"DICOM"},"(0018,9214)":{tag:"(0018,9214)",vr:"CS",name:"RespiratoryCyclePosition",vm:"1",version:"DICOM"},"(0018,9217)":{tag:"(0018,9217)",vr:"FD",name:"VelocityEncodingMaximumValue",vm:"1",version:"DICOM"},"(0018,9218)":{tag:"(0018,9218)",vr:"FD",name:"TagSpacingSecondDimension",vm:"1",version:"DICOM"},"(0018,9219)":{tag:"(0018,9219)",vr:"SS",name:"TagAngleSecondAxis",vm:"1",version:"DICOM"},"(0018,9220)":{tag:"(0018,9220)",vr:"FD",name:"FrameAcquisitionDuration",vm:"1",version:"DICOM"},"(0018,9226)":{tag:"(0018,9226)",vr:"SQ",name:"MRImageFrameTypeSequence",vm:"1",version:"DICOM"},"(0018,9227)":{tag:"(0018,9227)",vr:"SQ",name:"MRSpectroscopyFrameTypeSequence",vm:"1",version:"DICOM"},"(0018,9231)":{tag:"(0018,9231)",vr:"US",name:"MRAcquisitionPhaseEncodingStepsInPlane",vm:"1",version:"DICOM"},"(0018,9232)":{tag:"(0018,9232)",vr:"US",name:"MRAcquisitionPhaseEncodingStepsOutOfPlane",vm:"1",version:"DICOM"},"(0018,9234)":{tag:"(0018,9234)",vr:"UL",name:"SpectroscopyAcquisitionPhaseColumns",vm:"1",version:"DICOM"},"(0018,9236)":{tag:"(0018,9236)",vr:"CS",name:"CardiacCyclePosition",vm:"1",version:"DICOM"},"(0018,9239)":{tag:"(0018,9239)",vr:"SQ",name:"SpecificAbsorptionRateSequence",vm:"1",version:"DICOM"},"(0018,9240)":{tag:"(0018,9240)",vr:"US",name:"RFEchoTrainLength",vm:"1",version:"DICOM"},"(0018,9241)":{tag:"(0018,9241)",vr:"US",name:"GradientEchoTrainLength",vm:"1",version:"DICOM"},"(0018,9250)":{tag:"(0018,9250)",vr:"CS",name:"ArterialSpinLabelingContrast",vm:"1",version:"DICOM"},"(0018,9251)":{tag:"(0018,9251)",vr:"SQ",name:"MRArterialSpinLabelingSequence",vm:"1",version:"DICOM"},"(0018,9252)":{tag:"(0018,9252)",vr:"LO",name:"ASLTechniqueDescription",vm:"1",version:"DICOM"},"(0018,9253)":{tag:"(0018,9253)",vr:"US",name:"ASLSlabNumber",vm:"1",version:"DICOM"},"(0018,9254)":{tag:"(0018,9254)",vr:"FD",name:"ASLSlabThickness",vm:"1",version:"DICOM"},"(0018,9255)":{tag:"(0018,9255)",vr:"FD",name:"ASLSlabOrientation",vm:"3",version:"DICOM"},"(0018,9256)":{tag:"(0018,9256)",vr:"FD",name:"ASLMidSlabPosition",vm:"3",version:"DICOM"},"(0018,9257)":{tag:"(0018,9257)",vr:"CS",name:"ASLContext",vm:"1",version:"DICOM"},"(0018,9258)":{tag:"(0018,9258)",vr:"UL",name:"ASLPulseTrainDuration",vm:"1",version:"DICOM"},"(0018,9259)":{tag:"(0018,9259)",vr:"CS",name:"ASLCrusherFlag",vm:"1",version:"DICOM"},"(0018,925A)":{tag:"(0018,925A)",vr:"FD",name:"ASLCrusherFlowLimit",vm:"1",version:"DICOM"},"(0018,925B)":{tag:"(0018,925B)",vr:"LO",name:"ASLCrusherDescription",vm:"1",version:"DICOM"},"(0018,925C)":{tag:"(0018,925C)",vr:"CS",name:"ASLBolusCutoffFlag",vm:"1",version:"DICOM"},"(0018,925D)":{tag:"(0018,925D)",vr:"SQ",name:"ASLBolusCutoffTimingSequence",vm:"1",version:"DICOM"},"(0018,925E)":{tag:"(0018,925E)",vr:"LO",name:"ASLBolusCutoffTechnique",vm:"1",version:"DICOM"},"(0018,925F)":{tag:"(0018,925F)",vr:"UL",name:"ASLBolusCutoffDelayTime",vm:"1",version:"DICOM"},"(0018,9260)":{tag:"(0018,9260)",vr:"SQ",name:"ASLSlabSequence",vm:"1",version:"DICOM"},"(0018,9295)":{tag:"(0018,9295)",vr:"FD",name:"ChemicalShiftMinimumIntegrationLimitInppm",vm:"1",version:"DICOM"},"(0018,9296)":{tag:"(0018,9296)",vr:"FD",name:"ChemicalShiftMaximumIntegrationLimitInppm",vm:"1",version:"DICOM"},"(0018,9297)":{tag:"(0018,9297)",vr:"CS",name:"WaterReferenceAcquisition",vm:"1",version:"DICOM"},"(0018,9298)":{tag:"(0018,9298)",vr:"IS",name:"EchoPeakPosition",vm:"1",version:"DICOM"},"(0018,9301)":{tag:"(0018,9301)",vr:"SQ",name:"CTAcquisitionTypeSequence",vm:"1",version:"DICOM"},"(0018,9302)":{tag:"(0018,9302)",vr:"CS",name:"AcquisitionType",vm:"1",version:"DICOM"},"(0018,9303)":{tag:"(0018,9303)",vr:"FD",name:"TubeAngle",vm:"1",version:"DICOM"},"(0018,9304)":{tag:"(0018,9304)",vr:"SQ",name:"CTAcquisitionDetailsSequence",vm:"1",version:"DICOM"},"(0018,9305)":{tag:"(0018,9305)",vr:"FD",name:"RevolutionTime",vm:"1",version:"DICOM"},"(0018,9306)":{tag:"(0018,9306)",vr:"FD",name:"SingleCollimationWidth",vm:"1",version:"DICOM"},"(0018,9307)":{tag:"(0018,9307)",vr:"FD",name:"TotalCollimationWidth",vm:"1",version:"DICOM"},"(0018,9308)":{tag:"(0018,9308)",vr:"SQ",name:"CTTableDynamicsSequence",vm:"1",version:"DICOM"},"(0018,9309)":{tag:"(0018,9309)",vr:"FD",name:"TableSpeed",vm:"1",version:"DICOM"},"(0018,9310)":{tag:"(0018,9310)",vr:"FD",name:"TableFeedPerRotation",vm:"1",version:"DICOM"},"(0018,9311)":{tag:"(0018,9311)",vr:"FD",name:"SpiralPitchFactor",vm:"1",version:"DICOM"},"(0018,9312)":{tag:"(0018,9312)",vr:"SQ",name:"CTGeometrySequence",vm:"1",version:"DICOM"},"(0018,9313)":{tag:"(0018,9313)",vr:"FD",name:"DataCollectionCenterPatient",vm:"3",version:"DICOM"},"(0018,9314)":{tag:"(0018,9314)",vr:"SQ",name:"CTReconstructionSequence",vm:"1",version:"DICOM"},"(0018,9315)":{tag:"(0018,9315)",vr:"CS",name:"ReconstructionAlgorithm",vm:"1",version:"DICOM"},"(0018,9316)":{tag:"(0018,9316)",vr:"CS",name:"ConvolutionKernelGroup",vm:"1",version:"DICOM"},"(0018,9317)":{tag:"(0018,9317)",vr:"FD",name:"ReconstructionFieldOfView",vm:"2",version:"DICOM"},"(0018,9318)":{tag:"(0018,9318)",vr:"FD",name:"ReconstructionTargetCenterPatient",vm:"3",version:"DICOM"},"(0018,9319)":{tag:"(0018,9319)",vr:"FD",name:"ReconstructionAngle",vm:"1",version:"DICOM"},"(0018,9320)":{tag:"(0018,9320)",vr:"SH",name:"ImageFilter",vm:"1",version:"DICOM"},"(0018,9321)":{tag:"(0018,9321)",vr:"SQ",name:"CTExposureSequence",vm:"1",version:"DICOM"},"(0018,9322)":{tag:"(0018,9322)",vr:"FD",name:"ReconstructionPixelSpacing",vm:"2",version:"DICOM"},"(0018,9323)":{tag:"(0018,9323)",vr:"CS",name:"ExposureModulationType",vm:"1",version:"DICOM"},"(0018,9324)":{tag:"(0018,9324)",vr:"FD",name:"EstimatedDoseSaving",vm:"1",version:"DICOM"},"(0018,9325)":{tag:"(0018,9325)",vr:"SQ",name:"CTXRayDetailsSequence",vm:"1",version:"DICOM"},"(0018,9326)":{tag:"(0018,9326)",vr:"SQ",name:"CTPositionSequence",vm:"1",version:"DICOM"},"(0018,9327)":{tag:"(0018,9327)",vr:"FD",name:"TablePosition",vm:"1",version:"DICOM"},"(0018,9328)":{tag:"(0018,9328)",vr:"FD",name:"ExposureTimeInms",vm:"1",version:"DICOM"},"(0018,9329)":{tag:"(0018,9329)",vr:"SQ",name:"CTImageFrameTypeSequence",vm:"1",version:"DICOM"},"(0018,9330)":{tag:"(0018,9330)",vr:"FD",name:"XRayTubeCurrentInmA",vm:"1",version:"DICOM"},"(0018,9332)":{tag:"(0018,9332)",vr:"FD",name:"ExposureInmAs",vm:"1",version:"DICOM"},"(0018,9333)":{tag:"(0018,9333)",vr:"CS",name:"ConstantVolumeFlag",vm:"1",version:"DICOM"},"(0018,9334)":{tag:"(0018,9334)",vr:"CS",name:"FluoroscopyFlag",vm:"1",version:"DICOM"},"(0018,9335)":{tag:"(0018,9335)",vr:"FD",name:"DistanceSourceToDataCollectionCenter",vm:"1",version:"DICOM"},"(0018,9337)":{tag:"(0018,9337)",vr:"US",name:"ContrastBolusAgentNumber",vm:"1",version:"DICOM"},"(0018,9338)":{tag:"(0018,9338)",vr:"SQ",name:"ContrastBolusIngredientCodeSequence",vm:"1",version:"DICOM"},"(0018,9340)":{tag:"(0018,9340)",vr:"SQ",name:"ContrastAdministrationProfileSequence",vm:"1",version:"DICOM"},"(0018,9341)":{tag:"(0018,9341)",vr:"SQ",name:"ContrastBolusUsageSequence",vm:"1",version:"DICOM"},"(0018,9342)":{tag:"(0018,9342)",vr:"CS",name:"ContrastBolusAgentAdministered",vm:"1",version:"DICOM"},"(0018,9343)":{tag:"(0018,9343)",vr:"CS",name:"ContrastBolusAgentDetected",vm:"1",version:"DICOM"},"(0018,9344)":{tag:"(0018,9344)",vr:"CS",name:"ContrastBolusAgentPhase",vm:"1",version:"DICOM"},"(0018,9345)":{tag:"(0018,9345)",vr:"FD",name:"CTDIvol",vm:"1",version:"DICOM"},"(0018,9346)":{tag:"(0018,9346)",vr:"SQ",name:"CTDIPhantomTypeCodeSequence",vm:"1",version:"DICOM"},"(0018,9351)":{tag:"(0018,9351)",vr:"FL",name:"CalciumScoringMassFactorPatient",vm:"1",version:"DICOM"},"(0018,9352)":{tag:"(0018,9352)",vr:"FL",name:"CalciumScoringMassFactorDevice",vm:"3",version:"DICOM"},"(0018,9353)":{tag:"(0018,9353)",vr:"FL",name:"EnergyWeightingFactor",vm:"1",version:"DICOM"},"(0018,9360)":{tag:"(0018,9360)",vr:"SQ",name:"CTAdditionalXRaySourceSequence",vm:"1",version:"DICOM"},"(0018,9401)":{tag:"(0018,9401)",vr:"SQ",name:"ProjectionPixelCalibrationSequence",vm:"1",version:"DICOM"},"(0018,9402)":{tag:"(0018,9402)",vr:"FL",name:"DistanceSourceToIsocenter",vm:"1",version:"DICOM"},"(0018,9403)":{tag:"(0018,9403)",vr:"FL",name:"DistanceObjectToTableTop",vm:"1",version:"DICOM"},"(0018,9404)":{tag:"(0018,9404)",vr:"FL",name:"ObjectPixelSpacingInCenterOfBeam",vm:"2",version:"DICOM"},"(0018,9405)":{tag:"(0018,9405)",vr:"SQ",name:"PositionerPositionSequence",vm:"1",version:"DICOM"},"(0018,9406)":{tag:"(0018,9406)",vr:"SQ",name:"TablePositionSequence",vm:"1",version:"DICOM"},"(0018,9407)":{tag:"(0018,9407)",vr:"SQ",name:"CollimatorShapeSequence",vm:"1",version:"DICOM"},"(0018,9410)":{tag:"(0018,9410)",vr:"CS",name:"PlanesInAcquisition",vm:"1",version:"DICOM"},"(0018,9412)":{tag:"(0018,9412)",vr:"SQ",name:"XAXRFFrameCharacteristicsSequence",vm:"1",version:"DICOM"},"(0018,9417)":{tag:"(0018,9417)",vr:"SQ",name:"FrameAcquisitionSequence",vm:"1",version:"DICOM"},"(0018,9420)":{tag:"(0018,9420)",vr:"CS",name:"XRayReceptorType",vm:"1",version:"DICOM"},"(0018,9423)":{tag:"(0018,9423)",vr:"LO",name:"AcquisitionProtocolName",vm:"1",version:"DICOM"},"(0018,9424)":{tag:"(0018,9424)",vr:"LT",name:"AcquisitionProtocolDescription",vm:"1",version:"DICOM"},"(0018,9425)":{tag:"(0018,9425)",vr:"CS",name:"ContrastBolusIngredientOpaque",vm:"1",version:"DICOM"},"(0018,9426)":{tag:"(0018,9426)",vr:"FL",name:"DistanceReceptorPlaneToDetectorHousing",vm:"1",version:"DICOM"},"(0018,9427)":{tag:"(0018,9427)",vr:"CS",name:"IntensifierActiveShape",vm:"1",version:"DICOM"},"(0018,9428)":{tag:"(0018,9428)",vr:"FL",name:"IntensifierActiveDimensions",vm:"1-2",version:"DICOM"},"(0018,9429)":{tag:"(0018,9429)",vr:"FL",name:"PhysicalDetectorSize",vm:"2",version:"DICOM"},"(0018,9430)":{tag:"(0018,9430)",vr:"FL",name:"PositionOfIsocenterProjection",vm:"2",version:"DICOM"},"(0018,9432)":{tag:"(0018,9432)",vr:"SQ",name:"FieldOfViewSequence",vm:"1",version:"DICOM"},"(0018,9433)":{tag:"(0018,9433)",vr:"LO",name:"FieldOfViewDescription",vm:"1",version:"DICOM"},"(0018,9434)":{tag:"(0018,9434)",vr:"SQ",name:"ExposureControlSensingRegionsSequence",vm:"1",version:"DICOM"},"(0018,9435)":{tag:"(0018,9435)",vr:"CS",name:"ExposureControlSensingRegionShape",vm:"1",version:"DICOM"},"(0018,9436)":{tag:"(0018,9436)",vr:"SS",name:"ExposureControlSensingRegionLeftVerticalEdge",vm:"1",version:"DICOM"},"(0018,9437)":{tag:"(0018,9437)",vr:"SS",name:"ExposureControlSensingRegionRightVerticalEdge",vm:"1",version:"DICOM"},"(0018,9438)":{tag:"(0018,9438)",vr:"SS",name:"ExposureControlSensingRegionUpperHorizontalEdge",vm:"1",version:"DICOM"},"(0018,9439)":{tag:"(0018,9439)",vr:"SS",name:"ExposureControlSensingRegionLowerHorizontalEdge",vm:"1",version:"DICOM"},"(0018,9440)":{tag:"(0018,9440)",vr:"SS",name:"CenterOfCircularExposureControlSensingRegion",vm:"2",version:"DICOM"},"(0018,9441)":{tag:"(0018,9441)",vr:"US",name:"RadiusOfCircularExposureControlSensingRegion",vm:"1",version:"DICOM"},"(0018,9442)":{tag:"(0018,9442)",vr:"SS",name:"VerticesOfThePolygonalExposureControlSensingRegion",vm:"2-n",version:"DICOM"},"(0018,9447)":{tag:"(0018,9447)",vr:"FL",name:"ColumnAngulationPatient",vm:"1",version:"DICOM"},"(0018,9449)":{tag:"(0018,9449)",vr:"FL",name:"BeamAngle",vm:"1",version:"DICOM"},"(0018,9451)":{tag:"(0018,9451)",vr:"SQ",name:"FrameDetectorParametersSequence",vm:"1",version:"DICOM"},"(0018,9452)":{tag:"(0018,9452)",vr:"FL",name:"CalculatedAnatomyThickness",vm:"1",version:"DICOM"},"(0018,9455)":{tag:"(0018,9455)",vr:"SQ",name:"CalibrationSequence",vm:"1",version:"DICOM"},"(0018,9456)":{tag:"(0018,9456)",vr:"SQ",name:"ObjectThicknessSequence",vm:"1",version:"DICOM"},"(0018,9457)":{tag:"(0018,9457)",vr:"CS",name:"PlaneIdentification",vm:"1",version:"DICOM"},"(0018,9461)":{tag:"(0018,9461)",vr:"FL",name:"FieldOfViewDimensionsInFloat",vm:"1-2",version:"DICOM"},"(0018,9462)":{tag:"(0018,9462)",vr:"SQ",name:"IsocenterReferenceSystemSequence",vm:"1",version:"DICOM"},"(0018,9463)":{tag:"(0018,9463)",vr:"FL",name:"PositionerIsocenterPrimaryAngle",vm:"1",version:"DICOM"},"(0018,9464)":{tag:"(0018,9464)",vr:"FL",name:"PositionerIsocenterSecondaryAngle",vm:"1",version:"DICOM"},"(0018,9465)":{tag:"(0018,9465)",vr:"FL",name:"PositionerIsocenterDetectorRotationAngle",vm:"1",version:"DICOM"},"(0018,9466)":{tag:"(0018,9466)",vr:"FL",name:"TableXPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9467)":{tag:"(0018,9467)",vr:"FL",name:"TableYPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9468)":{tag:"(0018,9468)",vr:"FL",name:"TableZPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9469)":{tag:"(0018,9469)",vr:"FL",name:"TableHorizontalRotationAngle",vm:"1",version:"DICOM"},"(0018,9470)":{tag:"(0018,9470)",vr:"FL",name:"TableHeadTiltAngle",vm:"1",version:"DICOM"},"(0018,9471)":{tag:"(0018,9471)",vr:"FL",name:"TableCradleTiltAngle",vm:"1",version:"DICOM"},"(0018,9472)":{tag:"(0018,9472)",vr:"SQ",name:"FrameDisplayShutterSequence",vm:"1",version:"DICOM"},"(0018,9473)":{tag:"(0018,9473)",vr:"FL",name:"AcquiredImageAreaDoseProduct",vm:"1",version:"DICOM"},"(0018,9474)":{tag:"(0018,9474)",vr:"CS",name:"CArmPositionerTabletopRelationship",vm:"1",version:"DICOM"},"(0018,9476)":{tag:"(0018,9476)",vr:"SQ",name:"XRayGeometrySequence",vm:"1",version:"DICOM"},"(0018,9477)":{tag:"(0018,9477)",vr:"SQ",name:"IrradiationEventIdentificationSequence",vm:"1",version:"DICOM"},"(0018,9504)":{tag:"(0018,9504)",vr:"SQ",name:"XRay3DFrameTypeSequence",vm:"1",version:"DICOM"},"(0018,9506)":{tag:"(0018,9506)",vr:"SQ",name:"ContributingSourcesSequence",vm:"1",version:"DICOM"},"(0018,9507)":{tag:"(0018,9507)",vr:"SQ",name:"XRay3DAcquisitionSequence",vm:"1",version:"DICOM"},"(0018,9508)":{tag:"(0018,9508)",vr:"FL",name:"PrimaryPositionerScanArc",vm:"1",version:"DICOM"},"(0018,9509)":{tag:"(0018,9509)",vr:"FL",name:"SecondaryPositionerScanArc",vm:"1",version:"DICOM"},"(0018,9510)":{tag:"(0018,9510)",vr:"FL",name:"PrimaryPositionerScanStartAngle",vm:"1",version:"DICOM"},"(0018,9511)":{tag:"(0018,9511)",vr:"FL",name:"SecondaryPositionerScanStartAngle",vm:"1",version:"DICOM"},"(0018,9514)":{tag:"(0018,9514)",vr:"FL",name:"PrimaryPositionerIncrement",vm:"1",version:"DICOM"},"(0018,9515)":{tag:"(0018,9515)",vr:"FL",name:"SecondaryPositionerIncrement",vm:"1",version:"DICOM"},"(0018,9516)":{tag:"(0018,9516)",vr:"DT",name:"StartAcquisitionDateTime",vm:"1",version:"DICOM"},"(0018,9517)":{tag:"(0018,9517)",vr:"DT",name:"EndAcquisitionDateTime",vm:"1",version:"DICOM"},"(0018,9518)":{tag:"(0018,9518)",vr:"SS",name:"PrimaryPositionerIncrementSign",vm:"1",version:"DICOM"},"(0018,9519)":{tag:"(0018,9519)",vr:"SS",name:"SecondaryPositionerIncrementSign",vm:"1",version:"DICOM"},"(0018,9524)":{tag:"(0018,9524)",vr:"LO",name:"ApplicationName",vm:"1",version:"DICOM"},"(0018,9525)":{tag:"(0018,9525)",vr:"LO",name:"ApplicationVersion",vm:"1",version:"DICOM"},"(0018,9526)":{tag:"(0018,9526)",vr:"LO",name:"ApplicationManufacturer",vm:"1",version:"DICOM"},"(0018,9527)":{tag:"(0018,9527)",vr:"CS",name:"AlgorithmType",vm:"1",version:"DICOM"},"(0018,9528)":{tag:"(0018,9528)",vr:"LO",name:"AlgorithmDescription",vm:"1",version:"DICOM"},"(0018,9530)":{tag:"(0018,9530)",vr:"SQ",name:"XRay3DReconstructionSequence",vm:"1",version:"DICOM"},"(0018,9531)":{tag:"(0018,9531)",vr:"LO",name:"ReconstructionDescription",vm:"1",version:"DICOM"},"(0018,9538)":{tag:"(0018,9538)",vr:"SQ",name:"PerProjectionAcquisitionSequence",vm:"1",version:"DICOM"},"(0018,9541)":{tag:"(0018,9541)",vr:"SQ",name:"DetectorPositionSequence",vm:"1",version:"DICOM"},"(0018,9542)":{tag:"(0018,9542)",vr:"SQ",name:"XRayAcquisitionDoseSequence",vm:"1",version:"DICOM"},"(0018,9543)":{tag:"(0018,9543)",vr:"FD",name:"XRaySourceIsocenterPrimaryAngle",vm:"1",version:"DICOM"},"(0018,9544)":{tag:"(0018,9544)",vr:"FD",name:"XRaySourceIsocenterSecondaryAngle",vm:"1",version:"DICOM"},"(0018,9545)":{tag:"(0018,9545)",vr:"FD",name:"BreastSupportIsocenterPrimaryAngle",vm:"1",version:"DICOM"},"(0018,9546)":{tag:"(0018,9546)",vr:"FD",name:"BreastSupportIsocenterSecondaryAngle",vm:"1",version:"DICOM"},"(0018,9547)":{tag:"(0018,9547)",vr:"FD",name:"BreastSupportXPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9548)":{tag:"(0018,9548)",vr:"FD",name:"BreastSupportYPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9549)":{tag:"(0018,9549)",vr:"FD",name:"BreastSupportZPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9550)":{tag:"(0018,9550)",vr:"FD",name:"DetectorIsocenterPrimaryAngle",vm:"1",version:"DICOM"},"(0018,9551)":{tag:"(0018,9551)",vr:"FD",name:"DetectorIsocenterSecondaryAngle",vm:"1",version:"DICOM"},"(0018,9552)":{tag:"(0018,9552)",vr:"FD",name:"DetectorXPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9553)":{tag:"(0018,9553)",vr:"FD",name:"DetectorYPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9554)":{tag:"(0018,9554)",vr:"FD",name:"DetectorZPositionToIsocenter",vm:"1",version:"DICOM"},"(0018,9555)":{tag:"(0018,9555)",vr:"SQ",name:"XRayGridSequence",vm:"1",version:"DICOM"},"(0018,9556)":{tag:"(0018,9556)",vr:"SQ",name:"XRayFilterSequence",vm:"1",version:"DICOM"},"(0018,9557)":{tag:"(0018,9557)",vr:"FD",name:"DetectorActiveAreaTLHCPosition",vm:"3",version:"DICOM"},"(0018,9558)":{tag:"(0018,9558)",vr:"FD",name:"DetectorActiveAreaOrientation",vm:"6",version:"DICOM"},"(0018,9559)":{tag:"(0018,9559)",vr:"CS",name:"PositionerPrimaryAngleDirection",vm:"1",version:"DICOM"},"(0018,9601)":{tag:"(0018,9601)",vr:"SQ",name:"DiffusionBMatrixSequence",vm:"1",version:"DICOM"},"(0018,9602)":{tag:"(0018,9602)",vr:"FD",name:"DiffusionBValueXX",vm:"1",version:"DICOM"},"(0018,9603)":{tag:"(0018,9603)",vr:"FD",name:"DiffusionBValueXY",vm:"1",version:"DICOM"},"(0018,9604)":{tag:"(0018,9604)",vr:"FD",name:"DiffusionBValueXZ",vm:"1",version:"DICOM"},"(0018,9605)":{tag:"(0018,9605)",vr:"FD",name:"DiffusionBValueYY",vm:"1",version:"DICOM"},"(0018,9606)":{tag:"(0018,9606)",vr:"FD",name:"DiffusionBValueYZ",vm:"1",version:"DICOM"},"(0018,9607)":{tag:"(0018,9607)",vr:"FD",name:"DiffusionBValueZZ",vm:"1",version:"DICOM"},"(0018,9701)":{tag:"(0018,9701)",vr:"DT",name:"DecayCorrectionDateTime",vm:"1",version:"DICOM"},"(0018,9715)":{tag:"(0018,9715)",vr:"FD",name:"StartDensityThreshold",vm:"1",version:"DICOM"},"(0018,9716)":{tag:"(0018,9716)",vr:"FD",name:"StartRelativeDensityDifferenceThreshold",vm:"1",version:"DICOM"},"(0018,9717)":{tag:"(0018,9717)",vr:"FD",name:"StartCardiacTriggerCountThreshold",vm:"1",version:"DICOM"},"(0018,9718)":{tag:"(0018,9718)",vr:"FD",name:"StartRespiratoryTriggerCountThreshold",vm:"1",version:"DICOM"},"(0018,9719)":{tag:"(0018,9719)",vr:"FD",name:"TerminationCountsThreshold",vm:"1",version:"DICOM"},"(0018,9720)":{tag:"(0018,9720)",vr:"FD",name:"TerminationDensityThreshold",vm:"1",version:"DICOM"},"(0018,9721)":{tag:"(0018,9721)",vr:"FD",name:"TerminationRelativeDensityThreshold",vm:"1",version:"DICOM"},"(0018,9722)":{tag:"(0018,9722)",vr:"FD",name:"TerminationTimeThreshold",vm:"1",version:"DICOM"},"(0018,9723)":{tag:"(0018,9723)",vr:"FD",name:"TerminationCardiacTriggerCountThreshold",vm:"1",version:"DICOM"},"(0018,9724)":{tag:"(0018,9724)",vr:"FD",name:"TerminationRespiratoryTriggerCountThreshold",vm:"1",version:"DICOM"},"(0018,9725)":{tag:"(0018,9725)",vr:"CS",name:"DetectorGeometry",vm:"1",version:"DICOM"},"(0018,9726)":{tag:"(0018,9726)",vr:"FD",name:"TransverseDetectorSeparation",vm:"1",version:"DICOM"},"(0018,9727)":{tag:"(0018,9727)",vr:"FD",name:"AxialDetectorDimension",vm:"1",version:"DICOM"},"(0018,9729)":{tag:"(0018,9729)",vr:"US",name:"RadiopharmaceuticalAgentNumber",vm:"1",version:"DICOM"},"(0018,9732)":{tag:"(0018,9732)",vr:"SQ",name:"PETFrameAcquisitionSequence",vm:"1",version:"DICOM"},"(0018,9733)":{tag:"(0018,9733)",vr:"SQ",name:"PETDetectorMotionDetailsSequence",vm:"1",version:"DICOM"},"(0018,9734)":{tag:"(0018,9734)",vr:"SQ",name:"PETTableDynamicsSequence",vm:"1",version:"DICOM"},"(0018,9735)":{tag:"(0018,9735)",vr:"SQ",name:"PETPositionSequence",vm:"1",version:"DICOM"},"(0018,9736)":{tag:"(0018,9736)",vr:"SQ",name:"PETFrameCorrectionFactorsSequence",vm:"1",version:"DICOM"},"(0018,9737)":{tag:"(0018,9737)",vr:"SQ",name:"RadiopharmaceuticalUsageSequence",vm:"1",version:"DICOM"},"(0018,9738)":{tag:"(0018,9738)",vr:"CS",name:"AttenuationCorrectionSource",vm:"1",version:"DICOM"},"(0018,9739)":{tag:"(0018,9739)",vr:"US",name:"NumberOfIterations",vm:"1",version:"DICOM"},"(0018,9740)":{tag:"(0018,9740)",vr:"US",name:"NumberOfSubsets",vm:"1",version:"DICOM"},"(0018,9749)":{tag:"(0018,9749)",vr:"SQ",name:"PETReconstructionSequence",vm:"1",version:"DICOM"},"(0018,9751)":{tag:"(0018,9751)",vr:"SQ",name:"PETFrameTypeSequence",vm:"1",version:"DICOM"},"(0018,9755)":{tag:"(0018,9755)",vr:"CS",name:"TimeOfFlightInformationUsed",vm:"1",version:"DICOM"},"(0018,9756)":{tag:"(0018,9756)",vr:"CS",name:"ReconstructionType",vm:"1",version:"DICOM"},"(0018,9758)":{tag:"(0018,9758)",vr:"CS",name:"DecayCorrected",vm:"1",version:"DICOM"},"(0018,9759)":{tag:"(0018,9759)",vr:"CS",name:"AttenuationCorrected",vm:"1",version:"DICOM"},"(0018,9760)":{tag:"(0018,9760)",vr:"CS",name:"ScatterCorrected",vm:"1",version:"DICOM"},"(0018,9761)":{tag:"(0018,9761)",vr:"CS",name:"DeadTimeCorrected",vm:"1",version:"DICOM"},"(0018,9762)":{tag:"(0018,9762)",vr:"CS",name:"GantryMotionCorrected",vm:"1",version:"DICOM"},"(0018,9763)":{tag:"(0018,9763)",vr:"CS",name:"PatientMotionCorrected",vm:"1",version:"DICOM"},"(0018,9764)":{tag:"(0018,9764)",vr:"CS",name:"CountLossNormalizationCorrected",vm:"1",version:"DICOM"},"(0018,9765)":{tag:"(0018,9765)",vr:"CS",name:"RandomsCorrected",vm:"1",version:"DICOM"},"(0018,9766)":{tag:"(0018,9766)",vr:"CS",name:"NonUniformRadialSamplingCorrected",vm:"1",version:"DICOM"},"(0018,9767)":{tag:"(0018,9767)",vr:"CS",name:"SensitivityCalibrated",vm:"1",version:"DICOM"},"(0018,9768)":{tag:"(0018,9768)",vr:"CS",name:"DetectorNormalizationCorrection",vm:"1",version:"DICOM"},"(0018,9769)":{tag:"(0018,9769)",vr:"CS",name:"IterativeReconstructionMethod",vm:"1",version:"DICOM"},"(0018,9770)":{tag:"(0018,9770)",vr:"CS",name:"AttenuationCorrectionTemporalRelationship",vm:"1",version:"DICOM"},"(0018,9771)":{tag:"(0018,9771)",vr:"SQ",name:"PatientPhysiologicalStateSequence",vm:"1",version:"DICOM"},"(0018,9772)":{tag:"(0018,9772)",vr:"SQ",name:"PatientPhysiologicalStateCodeSequence",vm:"1",version:"DICOM"},"(0018,9801)":{tag:"(0018,9801)",vr:"FD",name:"DepthsOfFocus",vm:"1-n",version:"DICOM"},"(0018,9803)":{tag:"(0018,9803)",vr:"SQ",name:"ExcludedIntervalsSequence",vm:"1",version:"DICOM"},"(0018,9804)":{tag:"(0018,9804)",vr:"DT",name:"ExclusionStartDateTime",vm:"1",version:"DICOM"},"(0018,9805)":{tag:"(0018,9805)",vr:"FD",name:"ExclusionDuration",vm:"1",version:"DICOM"},"(0018,9806)":{tag:"(0018,9806)",vr:"SQ",name:"USImageDescriptionSequence",vm:"1",version:"DICOM"},"(0018,9807)":{tag:"(0018,9807)",vr:"SQ",name:"ImageDataTypeSequence",vm:"1",version:"DICOM"},"(0018,9808)":{tag:"(0018,9808)",vr:"CS",name:"DataType",vm:"1",version:"DICOM"},"(0018,9809)":{tag:"(0018,9809)",vr:"SQ",name:"TransducerScanPatternCodeSequence",vm:"1",version:"DICOM"},"(0018,980B)":{tag:"(0018,980B)",vr:"CS",name:"AliasedDataType",vm:"1",version:"DICOM"},"(0018,980C)":{tag:"(0018,980C)",vr:"CS",name:"PositionMeasuringDeviceUsed",vm:"1",version:"DICOM"},"(0018,980D)":{tag:"(0018,980D)",vr:"SQ",name:"TransducerGeometryCodeSequence",vm:"1",version:"DICOM"},"(0018,980E)":{tag:"(0018,980E)",vr:"SQ",name:"TransducerBeamSteeringCodeSequence",vm:"1",version:"DICOM"},"(0018,980F)":{tag:"(0018,980F)",vr:"SQ",name:"TransducerApplicationCodeSequence",vm:"1",version:"DICOM"},"(0018,9810)":{tag:"(0018,9810)",vr:"xs",name:"ZeroVelocityPixelValue",vm:"1",version:"DICOM"},"(0018,A001)":{tag:"(0018,A001)",vr:"SQ",name:"ContributingEquipmentSequence",vm:"1",version:"DICOM"},"(0018,A002)":{tag:"(0018,A002)",vr:"DT",name:"ContributionDateTime",vm:"1",version:"DICOM"},"(0018,A003)":{tag:"(0018,A003)",vr:"ST",name:"ContributionDescription",vm:"1",version:"DICOM"},"(0020,000D)":{tag:"(0020,000D)",vr:"UI",name:"StudyInstanceUID",vm:"1",version:"DICOM"},"(0020,000E)":{tag:"(0020,000E)",vr:"UI",name:"SeriesInstanceUID",vm:"1",version:"DICOM"},"(0020,0010)":{tag:"(0020,0010)",vr:"SH",name:"StudyID",vm:"1",version:"DICOM"},"(0020,0011)":{tag:"(0020,0011)",vr:"IS",name:"SeriesNumber",vm:"1",version:"DICOM"},"(0020,0012)":{tag:"(0020,0012)",vr:"IS",name:"AcquisitionNumber",vm:"1",version:"DICOM"},"(0020,0013)":{tag:"(0020,0013)",vr:"IS",name:"InstanceNumber",vm:"1",version:"DICOM"},"(0020,0019)":{tag:"(0020,0019)",vr:"IS",name:"ItemNumber",vm:"1",version:"DICOM"},"(0020,0020)":{tag:"(0020,0020)",vr:"CS",name:"PatientOrientation",vm:"2",version:"DICOM"},"(0020,0032)":{tag:"(0020,0032)",vr:"DS",name:"ImagePositionPatient",vm:"3",version:"DICOM"},"(0020,0037)":{tag:"(0020,0037)",vr:"DS",name:"ImageOrientationPatient",vm:"6",version:"DICOM"},"(0020,0052)":{tag:"(0020,0052)",vr:"UI",name:"FrameOfReferenceUID",vm:"1",version:"DICOM"},"(0020,0060)":{tag:"(0020,0060)",vr:"CS",name:"Laterality",vm:"1",version:"DICOM"},"(0020,0062)":{tag:"(0020,0062)",vr:"CS",name:"ImageLaterality",vm:"1",version:"DICOM"},"(0020,0100)":{tag:"(0020,0100)",vr:"IS",name:"TemporalPositionIdentifier",vm:"1",version:"DICOM"},"(0020,0105)":{tag:"(0020,0105)",vr:"IS",name:"NumberOfTemporalPositions",vm:"1",version:"DICOM"},"(0020,0110)":{tag:"(0020,0110)",vr:"DS",name:"TemporalResolution",vm:"1",version:"DICOM"},"(0020,0200)":{tag:"(0020,0200)",vr:"UI",name:"SynchronizationFrameOfReferenceUID",vm:"1",version:"DICOM"},"(0020,0242)":{tag:"(0020,0242)",vr:"UI",name:"SOPInstanceUIDOfConcatenationSource",vm:"1",version:"DICOM"},"(0020,1002)":{tag:"(0020,1002)",vr:"IS",name:"ImagesInAcquisition",vm:"1",version:"DICOM"},"(0020,1040)":{tag:"(0020,1040)",vr:"LO",name:"PositionReferenceIndicator",vm:"1",version:"DICOM"},"(0020,1041)":{tag:"(0020,1041)",vr:"DS",name:"SliceLocation",vm:"1",version:"DICOM"},"(0020,1200)":{tag:"(0020,1200)",vr:"IS",name:"NumberOfPatientRelatedStudies",vm:"1",version:"DICOM"},"(0020,1202)":{tag:"(0020,1202)",vr:"IS",name:"NumberOfPatientRelatedSeries",vm:"1",version:"DICOM"},"(0020,1204)":{tag:"(0020,1204)",vr:"IS",name:"NumberOfPatientRelatedInstances",vm:"1",version:"DICOM"},"(0020,1206)":{tag:"(0020,1206)",vr:"IS",name:"NumberOfStudyRelatedSeries",vm:"1",version:"DICOM"},"(0020,1208)":{tag:"(0020,1208)",vr:"IS",name:"NumberOfStudyRelatedInstances",vm:"1",version:"DICOM"},"(0020,1209)":{tag:"(0020,1209)",vr:"IS",name:"NumberOfSeriesRelatedInstances",vm:"1",version:"DICOM"},"(0020,4000)":{tag:"(0020,4000)",vr:"LT",name:"ImageComments",vm:"1",version:"DICOM"},"(0020,9056)":{tag:"(0020,9056)",vr:"SH",name:"StackID",vm:"1",version:"DICOM"},"(0020,9057)":{tag:"(0020,9057)",vr:"UL",name:"InStackPositionNumber",vm:"1",version:"DICOM"},"(0020,9071)":{tag:"(0020,9071)",vr:"SQ",name:"FrameAnatomySequence",vm:"1",version:"DICOM"},"(0020,9072)":{tag:"(0020,9072)",vr:"CS",name:"FrameLaterality",vm:"1",version:"DICOM"},"(0020,9111)":{tag:"(0020,9111)",vr:"SQ",name:"FrameContentSequence",vm:"1",version:"DICOM"},"(0020,9113)":{tag:"(0020,9113)",vr:"SQ",name:"PlanePositionSequence",vm:"1",version:"DICOM"},"(0020,9116)":{tag:"(0020,9116)",vr:"SQ",name:"PlaneOrientationSequence",vm:"1",version:"DICOM"},"(0020,9128)":{tag:"(0020,9128)",vr:"UL",name:"TemporalPositionIndex",vm:"1",version:"DICOM"},"(0020,9153)":{tag:"(0020,9153)",vr:"FD",name:"NominalCardiacTriggerDelayTime",vm:"1",version:"DICOM"},"(0020,9154)":{tag:"(0020,9154)",vr:"FL",name:"NominalCardiacTriggerTimePriorToRPeak",vm:"1",version:"DICOM"},"(0020,9155)":{tag:"(0020,9155)",vr:"FL",name:"ActualCardiacTriggerTimePriorToRPeak",vm:"1",version:"DICOM"},"(0020,9156)":{tag:"(0020,9156)",vr:"US",name:"FrameAcquisitionNumber",vm:"1",version:"DICOM"},"(0020,9157)":{tag:"(0020,9157)",vr:"UL",name:"DimensionIndexValues",vm:"1-n",version:"DICOM"},"(0020,9158)":{tag:"(0020,9158)",vr:"LT",name:"FrameComments",vm:"1",version:"DICOM"},"(0020,9161)":{tag:"(0020,9161)",vr:"UI",name:"ConcatenationUID",vm:"1",version:"DICOM"},"(0020,9162)":{tag:"(0020,9162)",vr:"US",name:"InConcatenationNumber",vm:"1",version:"DICOM"},"(0020,9163)":{tag:"(0020,9163)",vr:"US",name:"InConcatenationTotalNumber",vm:"1",version:"DICOM"},"(0020,9164)":{tag:"(0020,9164)",vr:"UI",name:"DimensionOrganizationUID",vm:"1",version:"DICOM"},"(0020,9165)":{tag:"(0020,9165)",vr:"AT",name:"DimensionIndexPointer",vm:"1",version:"DICOM"},"(0020,9167)":{tag:"(0020,9167)",vr:"AT",name:"FunctionalGroupPointer",vm:"1",version:"DICOM"},"(0020,9170)":{tag:"(0020,9170)",vr:"SQ",name:"UnassignedSharedConvertedAttributesSequence",vm:"1",version:"DICOM"},"(0020,9171)":{tag:"(0020,9171)",vr:"SQ",name:"UnassignedPerFrameConvertedAttributesSequence",vm:"1",version:"DICOM"},"(0020,9172)":{tag:"(0020,9172)",vr:"SQ",name:"ConversionSourceAttributesSequence",vm:"1",version:"DICOM"},"(0020,9213)":{tag:"(0020,9213)",vr:"LO",name:"DimensionIndexPrivateCreator",vm:"1",version:"DICOM"},"(0020,9221)":{tag:"(0020,9221)",vr:"SQ",name:"DimensionOrganizationSequence",vm:"1",version:"DICOM"},"(0020,9222)":{tag:"(0020,9222)",vr:"SQ",name:"DimensionIndexSequence",vm:"1",version:"DICOM"},"(0020,9228)":{tag:"(0020,9228)",vr:"UL",name:"ConcatenationFrameOffsetNumber",vm:"1",version:"DICOM"},"(0020,9238)":{tag:"(0020,9238)",vr:"LO",name:"FunctionalGroupPrivateCreator",vm:"1",version:"DICOM"},"(0020,9241)":{tag:"(0020,9241)",vr:"FL",name:"NominalPercentageOfCardiacPhase",vm:"1",version:"DICOM"},"(0020,9245)":{tag:"(0020,9245)",vr:"FL",name:"NominalPercentageOfRespiratoryPhase",vm:"1",version:"DICOM"},"(0020,9246)":{tag:"(0020,9246)",vr:"FL",name:"StartingRespiratoryAmplitude",vm:"1",version:"DICOM"},"(0020,9247)":{tag:"(0020,9247)",vr:"CS",name:"StartingRespiratoryPhase",vm:"1",version:"DICOM"},"(0020,9248)":{tag:"(0020,9248)",vr:"FL",name:"EndingRespiratoryAmplitude",vm:"1",version:"DICOM"},"(0020,9249)":{tag:"(0020,9249)",vr:"CS",name:"EndingRespiratoryPhase",vm:"1",version:"DICOM"},"(0020,9250)":{tag:"(0020,9250)",vr:"CS",name:"RespiratoryTriggerType",vm:"1",version:"DICOM"},"(0020,9251)":{tag:"(0020,9251)",vr:"FD",name:"RRIntervalTimeNominal",vm:"1",version:"DICOM"},"(0020,9252)":{tag:"(0020,9252)",vr:"FD",name:"ActualCardiacTriggerDelayTime",vm:"1",version:"DICOM"},"(0020,9253)":{tag:"(0020,9253)",vr:"SQ",name:"RespiratorySynchronizationSequence",vm:"1",version:"DICOM"},"(0020,9254)":{tag:"(0020,9254)",vr:"FD",name:"RespiratoryIntervalTime",vm:"1",version:"DICOM"},"(0020,9255)":{tag:"(0020,9255)",vr:"FD",name:"NominalRespiratoryTriggerDelayTime",vm:"1",version:"DICOM"},"(0020,9256)":{tag:"(0020,9256)",vr:"FD",name:"RespiratoryTriggerDelayThreshold",vm:"1",version:"DICOM"},"(0020,9257)":{tag:"(0020,9257)",vr:"FD",name:"ActualRespiratoryTriggerDelayTime",vm:"1",version:"DICOM"},"(0020,9301)":{tag:"(0020,9301)",vr:"FD",name:"ImagePositionVolume",vm:"3",version:"DICOM"},"(0020,9302)":{tag:"(0020,9302)",vr:"FD",name:"ImageOrientationVolume",vm:"6",version:"DICOM"},"(0020,9307)":{tag:"(0020,9307)",vr:"CS",name:"UltrasoundAcquisitionGeometry",vm:"1",version:"DICOM"},"(0020,9308)":{tag:"(0020,9308)",vr:"FD",name:"ApexPosition",vm:"3",version:"DICOM"},"(0020,9309)":{tag:"(0020,9309)",vr:"FD",name:"VolumeToTransducerMappingMatrix",vm:"16",version:"DICOM"},"(0020,930A)":{tag:"(0020,930A)",vr:"FD",name:"VolumeToTableMappingMatrix",vm:"16",version:"DICOM"},"(0020,930B)":{tag:"(0020,930B)",vr:"CS",name:"VolumeToTransducerRelationship",vm:"1",version:"DICOM"},"(0020,930C)":{tag:"(0020,930C)",vr:"CS",name:"PatientFrameOfReferenceSource",vm:"1",version:"DICOM"},"(0020,930D)":{tag:"(0020,930D)",vr:"FD",name:"TemporalPositionTimeOffset",vm:"1",version:"DICOM"},"(0020,930E)":{tag:"(0020,930E)",vr:"SQ",name:"PlanePositionVolumeSequence",vm:"1",version:"DICOM"},"(0020,930F)":{tag:"(0020,930F)",vr:"SQ",name:"PlaneOrientationVolumeSequence",vm:"1",version:"DICOM"},"(0020,9310)":{tag:"(0020,9310)",vr:"SQ",name:"TemporalPositionSequence",vm:"1",version:"DICOM"},"(0020,9311)":{tag:"(0020,9311)",vr:"CS",name:"DimensionOrganizationType",vm:"1",version:"DICOM"},"(0020,9312)":{tag:"(0020,9312)",vr:"UI",name:"VolumeFrameOfReferenceUID",vm:"1",version:"DICOM"},"(0020,9313)":{tag:"(0020,9313)",vr:"UI",name:"TableFrameOfReferenceUID",vm:"1",version:"DICOM"},"(0020,9421)":{tag:"(0020,9421)",vr:"LO",name:"DimensionDescriptionLabel",vm:"1",version:"DICOM"},"(0020,9450)":{tag:"(0020,9450)",vr:"SQ",name:"PatientOrientationInFrameSequence",vm:"1",version:"DICOM"},"(0020,9453)":{tag:"(0020,9453)",vr:"LO",name:"FrameLabel",vm:"1",version:"DICOM"},"(0020,9518)":{tag:"(0020,9518)",vr:"US",name:"AcquisitionIndex",vm:"1-n",version:"DICOM"},"(0020,9529)":{tag:"(0020,9529)",vr:"SQ",name:"ContributingSOPInstancesReferenceSequence",vm:"1",version:"DICOM"},"(0020,9536)":{tag:"(0020,9536)",vr:"US",name:"ReconstructionIndex",vm:"1",version:"DICOM"},"(0022,0001)":{tag:"(0022,0001)",vr:"US",name:"LightPathFilterPassThroughWavelength",vm:"1",version:"DICOM"},"(0022,0002)":{tag:"(0022,0002)",vr:"US",name:"LightPathFilterPassBand",vm:"2",version:"DICOM"},"(0022,0003)":{tag:"(0022,0003)",vr:"US",name:"ImagePathFilterPassThroughWavelength",vm:"1",version:"DICOM"},"(0022,0004)":{tag:"(0022,0004)",vr:"US",name:"ImagePathFilterPassBand",vm:"2",version:"DICOM"},"(0022,0005)":{tag:"(0022,0005)",vr:"CS",name:"PatientEyeMovementCommanded",vm:"1",version:"DICOM"},"(0022,0006)":{tag:"(0022,0006)",vr:"SQ",name:"PatientEyeMovementCommandCodeSequence",vm:"1",version:"DICOM"},"(0022,0007)":{tag:"(0022,0007)",vr:"FL",name:"SphericalLensPower",vm:"1",version:"DICOM"},"(0022,0008)":{tag:"(0022,0008)",vr:"FL",name:"CylinderLensPower",vm:"1",version:"DICOM"},"(0022,0009)":{tag:"(0022,0009)",vr:"FL",name:"CylinderAxis",vm:"1",version:"DICOM"},"(0022,000A)":{tag:"(0022,000A)",vr:"FL",name:"EmmetropicMagnification",vm:"1",version:"DICOM"},"(0022,000B)":{tag:"(0022,000B)",vr:"FL",name:"IntraOcularPressure",vm:"1",version:"DICOM"},"(0022,000C)":{tag:"(0022,000C)",vr:"FL",name:"HorizontalFieldOfView",vm:"1",version:"DICOM"},"(0022,000D)":{tag:"(0022,000D)",vr:"CS",name:"PupilDilated",vm:"1",version:"DICOM"},"(0022,000E)":{tag:"(0022,000E)",vr:"FL",name:"DegreeOfDilation",vm:"1",version:"DICOM"},"(0022,0010)":{tag:"(0022,0010)",vr:"FL",name:"StereoBaselineAngle",vm:"1",version:"DICOM"},"(0022,0011)":{tag:"(0022,0011)",vr:"FL",name:"StereoBaselineDisplacement",vm:"1",version:"DICOM"},"(0022,0012)":{tag:"(0022,0012)",vr:"FL",name:"StereoHorizontalPixelOffset",vm:"1",version:"DICOM"},"(0022,0013)":{tag:"(0022,0013)",vr:"FL",name:"StereoVerticalPixelOffset",vm:"1",version:"DICOM"},"(0022,0014)":{tag:"(0022,0014)",vr:"FL",name:"StereoRotation",vm:"1",version:"DICOM"},"(0022,0015)":{tag:"(0022,0015)",vr:"SQ",name:"AcquisitionDeviceTypeCodeSequence",vm:"1",version:"DICOM"},"(0022,0016)":{tag:"(0022,0016)",vr:"SQ",name:"IlluminationTypeCodeSequence",vm:"1",version:"DICOM"},"(0022,0017)":{tag:"(0022,0017)",vr:"SQ",name:"LightPathFilterTypeStackCodeSequence",vm:"1",version:"DICOM"},"(0022,0018)":{tag:"(0022,0018)",vr:"SQ",name:"ImagePathFilterTypeStackCodeSequence",vm:"1",version:"DICOM"},"(0022,0019)":{tag:"(0022,0019)",vr:"SQ",name:"LensesCodeSequence",vm:"1",version:"DICOM"},"(0022,001A)":{tag:"(0022,001A)",vr:"SQ",name:"ChannelDescriptionCodeSequence",vm:"1",version:"DICOM"},"(0022,001B)":{tag:"(0022,001B)",vr:"SQ",name:"RefractiveStateSequence",vm:"1",version:"DICOM"},"(0022,001C)":{tag:"(0022,001C)",vr:"SQ",name:"MydriaticAgentCodeSequence",vm:"1",version:"DICOM"},"(0022,001D)":{tag:"(0022,001D)",vr:"SQ",name:"RelativeImagePositionCodeSequence",vm:"1",version:"DICOM"},"(0022,001E)":{tag:"(0022,001E)",vr:"FL",name:"CameraAngleOfView",vm:"1",version:"DICOM"},"(0022,0020)":{tag:"(0022,0020)",vr:"SQ",name:"StereoPairsSequence",vm:"1",version:"DICOM"},"(0022,0021)":{tag:"(0022,0021)",vr:"SQ",name:"LeftImageSequence",vm:"1",version:"DICOM"},"(0022,0022)":{tag:"(0022,0022)",vr:"SQ",name:"RightImageSequence",vm:"1",version:"DICOM"},"(0022,0028)":{tag:"(0022,0028)",vr:"CS",name:"StereoPairsPresent",vm:"1",version:"DICOM"},"(0022,0030)":{tag:"(0022,0030)",vr:"FL",name:"AxialLengthOfTheEye",vm:"1",version:"DICOM"},"(0022,0031)":{tag:"(0022,0031)",vr:"SQ",name:"OphthalmicFrameLocationSequence",vm:"1",version:"DICOM"},"(0022,0032)":{tag:"(0022,0032)",vr:"FL",name:"ReferenceCoordinates",vm:"2-2n",version:"DICOM"},"(0022,0035)":{tag:"(0022,0035)",vr:"FL",name:"DepthSpatialResolution",vm:"1",version:"DICOM"},"(0022,0036)":{tag:"(0022,0036)",vr:"FL",name:"MaximumDepthDistortion",vm:"1",version:"DICOM"},"(0022,0037)":{tag:"(0022,0037)",vr:"FL",name:"AlongScanSpatialResolution",vm:"1",version:"DICOM"},"(0022,0038)":{tag:"(0022,0038)",vr:"FL",name:"MaximumAlongScanDistortion",vm:"1",version:"DICOM"},"(0022,0039)":{tag:"(0022,0039)",vr:"CS",name:"OphthalmicImageOrientation",vm:"1",version:"DICOM"},"(0022,0041)":{tag:"(0022,0041)",vr:"FL",name:"DepthOfTransverseImage",vm:"1",version:"DICOM"},"(0022,0042)":{tag:"(0022,0042)",vr:"SQ",name:"MydriaticAgentConcentrationUnitsSequence",vm:"1",version:"DICOM"},"(0022,0048)":{tag:"(0022,0048)",vr:"FL",name:"AcrossScanSpatialResolution",vm:"1",version:"DICOM"},"(0022,0049)":{tag:"(0022,0049)",vr:"FL",name:"MaximumAcrossScanDistortion",vm:"1",version:"DICOM"},"(0022,004E)":{tag:"(0022,004E)",vr:"DS",name:"MydriaticAgentConcentration",vm:"1",version:"DICOM"},"(0022,0055)":{tag:"(0022,0055)",vr:"FL",name:"IlluminationWaveLength",vm:"1",version:"DICOM"},"(0022,0056)":{tag:"(0022,0056)",vr:"FL",name:"IlluminationPower",vm:"1",version:"DICOM"},"(0022,0057)":{tag:"(0022,0057)",vr:"FL",name:"IlluminationBandwidth",vm:"1",version:"DICOM"},"(0022,0058)":{tag:"(0022,0058)",vr:"SQ",name:"MydriaticAgentSequence",vm:"1",version:"DICOM"},"(0022,1007)":{tag:"(0022,1007)",vr:"SQ",name:"OphthalmicAxialMeasurementsRightEyeSequence",vm:"1",version:"DICOM"},"(0022,1008)":{tag:"(0022,1008)",vr:"SQ",name:"OphthalmicAxialMeasurementsLeftEyeSequence",vm:"1",version:"DICOM"},"(0022,1009)":{tag:"(0022,1009)",vr:"CS",name:"OphthalmicAxialMeasurementsDeviceType",vm:"1",version:"DICOM"},"(0022,1010)":{tag:"(0022,1010)",vr:"CS",name:"OphthalmicAxialLengthMeasurementsType",vm:"1",version:"DICOM"},"(0022,1012)":{tag:"(0022,1012)",vr:"SQ",name:"OphthalmicAxialLengthSequence",vm:"1",version:"DICOM"},"(0022,1019)":{tag:"(0022,1019)",vr:"FL",name:"OphthalmicAxialLength",vm:"1",version:"DICOM"},"(0022,1024)":{tag:"(0022,1024)",vr:"SQ",name:"LensStatusCodeSequence",vm:"1",version:"DICOM"},"(0022,1025)":{tag:"(0022,1025)",vr:"SQ",name:"VitreousStatusCodeSequence",vm:"1",version:"DICOM"},"(0022,1028)":{tag:"(0022,1028)",vr:"SQ",name:"IOLFormulaCodeSequence",vm:"1",version:"DICOM"},"(0022,1029)":{tag:"(0022,1029)",vr:"LO",name:"IOLFormulaDetail",vm:"1",version:"DICOM"},"(0022,1033)":{tag:"(0022,1033)",vr:"FL",name:"KeratometerIndex",vm:"1",version:"DICOM"},"(0022,1035)":{tag:"(0022,1035)",vr:"SQ",name:"SourceOfOphthalmicAxialLengthCodeSequence",vm:"1",version:"DICOM"},"(0022,1037)":{tag:"(0022,1037)",vr:"FL",name:"TargetRefraction",vm:"1",version:"DICOM"},"(0022,1039)":{tag:"(0022,1039)",vr:"CS",name:"RefractiveProcedureOccurred",vm:"1",version:"DICOM"},"(0022,1040)":{tag:"(0022,1040)",vr:"SQ",name:"RefractiveSurgeryTypeCodeSequence",vm:"1",version:"DICOM"},"(0022,1044)":{tag:"(0022,1044)",vr:"SQ",name:"OphthalmicUltrasoundMethodCodeSequence",vm:"1",version:"DICOM"},"(0022,1050)":{tag:"(0022,1050)",vr:"SQ",name:"OphthalmicAxialLengthMeasurementsSequence",vm:"1",version:"DICOM"},"(0022,1053)":{tag:"(0022,1053)",vr:"FL",name:"IOLPower",vm:"1",version:"DICOM"},"(0022,1054)":{tag:"(0022,1054)",vr:"FL",name:"PredictedRefractiveError",vm:"1",version:"DICOM"},"(0022,1059)":{tag:"(0022,1059)",vr:"FL",name:"OphthalmicAxialLengthVelocity",vm:"1",version:"DICOM"},"(0022,1065)":{tag:"(0022,1065)",vr:"LO",name:"LensStatusDescription",vm:"1",version:"DICOM"},"(0022,1066)":{tag:"(0022,1066)",vr:"LO",name:"VitreousStatusDescription",vm:"1",version:"DICOM"},"(0022,1090)":{tag:"(0022,1090)",vr:"SQ",name:"IOLPowerSequence",vm:"1",version:"DICOM"},"(0022,1092)":{tag:"(0022,1092)",vr:"SQ",name:"LensConstantSequence",vm:"1",version:"DICOM"},"(0022,1093)":{tag:"(0022,1093)",vr:"LO",name:"IOLManufacturer",vm:"1",version:"DICOM"},"(0022,1095)":{tag:"(0022,1095)",vr:"LO",name:"ImplantName",vm:"1",version:"DICOM"},"(0022,1096)":{tag:"(0022,1096)",vr:"SQ",name:"KeratometryMeasurementTypeCodeSequence",vm:"1",version:"DICOM"},"(0022,1097)":{tag:"(0022,1097)",vr:"LO",name:"ImplantPartNumber",vm:"1",version:"DICOM"},"(0022,1100)":{tag:"(0022,1100)",vr:"SQ",name:"ReferencedOphthalmicAxialMeasurementsSequence",vm:"1",version:"DICOM"},"(0022,1101)":{tag:"(0022,1101)",vr:"SQ",name:"OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence",vm:"1",version:"DICOM"},"(0022,1103)":{tag:"(0022,1103)",vr:"SQ",name:"RefractiveErrorBeforeRefractiveSurgeryCodeSequence",vm:"1",version:"DICOM"},"(0022,1121)":{tag:"(0022,1121)",vr:"FL",name:"IOLPowerForExactEmmetropia",vm:"1",version:"DICOM"},"(0022,1122)":{tag:"(0022,1122)",vr:"FL",name:"IOLPowerForExactTargetRefraction",vm:"1",version:"DICOM"},"(0022,1125)":{tag:"(0022,1125)",vr:"SQ",name:"AnteriorChamberDepthDefinitionCodeSequence",vm:"1",version:"DICOM"},"(0022,1127)":{tag:"(0022,1127)",vr:"SQ",name:"LensThicknessSequence",vm:"1",version:"DICOM"},"(0022,1128)":{tag:"(0022,1128)",vr:"SQ",name:"AnteriorChamberDepthSequence",vm:"1",version:"DICOM"},"(0022,1130)":{tag:"(0022,1130)",vr:"FL",name:"LensThickness",vm:"1",version:"DICOM"},"(0022,1131)":{tag:"(0022,1131)",vr:"FL",name:"AnteriorChamberDepth",vm:"1",version:"DICOM"},"(0022,1132)":{tag:"(0022,1132)",vr:"SQ",name:"SourceOfLensThicknessDataCodeSequence",vm:"1",version:"DICOM"},"(0022,1133)":{tag:"(0022,1133)",vr:"SQ",name:"SourceOfAnteriorChamberDepthDataCodeSequence",vm:"1",version:"DICOM"},"(0022,1134)":{tag:"(0022,1134)",vr:"SQ",name:"SourceOfRefractiveMeasurementsSequence",vm:"1",version:"DICOM"},"(0022,1135)":{tag:"(0022,1135)",vr:"SQ",name:"SourceOfRefractiveMeasurementsCodeSequence",vm:"1",version:"DICOM"},"(0022,1140)":{tag:"(0022,1140)",vr:"CS",name:"OphthalmicAxialLengthMeasurementModified",vm:"1",version:"DICOM"},"(0022,1150)":{tag:"(0022,1150)",vr:"SQ",name:"OphthalmicAxialLengthDataSourceCodeSequence",vm:"1",version:"DICOM"},"(0022,1155)":{tag:"(0022,1155)",vr:"FL",name:"SignalToNoiseRatio",vm:"1",version:"DICOM"},"(0022,1159)":{tag:"(0022,1159)",vr:"LO",name:"OphthalmicAxialLengthDataSourceDescription",vm:"1",version:"DICOM"},"(0022,1210)":{tag:"(0022,1210)",vr:"SQ",name:"OphthalmicAxialLengthMeasurementsTotalLengthSequence",vm:"1",version:"DICOM"},"(0022,1211)":{tag:"(0022,1211)",vr:"SQ",name:"OphthalmicAxialLengthMeasurementsSegmentalLengthSequence",vm:"1",version:"DICOM"},"(0022,1212)":{tag:"(0022,1212)",vr:"SQ",name:"OphthalmicAxialLengthMeasurementsLengthSummationSequence",vm:"1",version:"DICOM"},"(0022,1220)":{tag:"(0022,1220)",vr:"SQ",name:"UltrasoundOphthalmicAxialLengthMeasurementsSequence",vm:"1",version:"DICOM"},"(0022,1225)":{tag:"(0022,1225)",vr:"SQ",name:"OpticalOphthalmicAxialLengthMeasurementsSequence",vm:"1",version:"DICOM"},"(0022,1230)":{tag:"(0022,1230)",vr:"SQ",name:"UltrasoundSelectedOphthalmicAxialLengthSequence",vm:"1",version:"DICOM"},"(0022,1250)":{tag:"(0022,1250)",vr:"SQ",name:"OphthalmicAxialLengthSelectionMethodCodeSequence",vm:"1",version:"DICOM"},"(0022,1255)":{tag:"(0022,1255)",vr:"SQ",name:"OpticalSelectedOphthalmicAxialLengthSequence",vm:"1",version:"DICOM"},"(0022,1257)":{tag:"(0022,1257)",vr:"SQ",name:"SelectedSegmentalOphthalmicAxialLengthSequence",vm:"1",version:"DICOM"},"(0022,1260)":{tag:"(0022,1260)",vr:"SQ",name:"SelectedTotalOphthalmicAxialLengthSequence",vm:"1",version:"DICOM"},"(0022,1262)":{tag:"(0022,1262)",vr:"SQ",name:"OphthalmicAxialLengthQualityMetricSequence",vm:"1",version:"DICOM"},"(0022,1300)":{tag:"(0022,1300)",vr:"SQ",name:"IntraocularLensCalculationsRightEyeSequence",vm:"1",version:"DICOM"},"(0022,1310)":{tag:"(0022,1310)",vr:"SQ",name:"IntraocularLensCalculationsLeftEyeSequence",vm:"1",version:"DICOM"},"(0022,1330)":{tag:"(0022,1330)",vr:"SQ",name:"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence",vm:"1",version:"DICOM"},"(0022,1415)":{tag:"(0022,1415)",vr:"CS",name:"OphthalmicMappingDeviceType",vm:"1",version:"DICOM"},"(0022,1420)":{tag:"(0022,1420)",vr:"SQ",name:"AcquisitionMethodCodeSequence",vm:"1",version:"DICOM"},"(0022,1423)":{tag:"(0022,1423)",vr:"SQ",name:"AcquisitionMethodAlgorithmSequence",vm:"1",version:"DICOM"},"(0022,1436)":{tag:"(0022,1436)",vr:"SQ",name:"OphthalmicThicknessMapTypeCodeSequence",vm:"1",version:"DICOM"},"(0022,1443)":{tag:"(0022,1443)",vr:"SQ",name:"OphthalmicThicknessMappingNormalsSequence",vm:"1",version:"DICOM"},"(0022,1445)":{tag:"(0022,1445)",vr:"SQ",name:"RetinalThicknessDefinitionCodeSequence",vm:"1",version:"DICOM"},"(0022,1450)":{tag:"(0022,1450)",vr:"SQ",name:"PixelValueMappingToCodedConceptSequence",vm:"1",version:"DICOM"},"(0022,1452)":{tag:"(0022,1452)",vr:"xs",name:"MappedPixelValue",vm:"1",version:"DICOM"},"(0022,1454)":{tag:"(0022,1454)",vr:"LO",name:"PixelValueMappingExplanation",vm:"1",version:"DICOM"},"(0022,1458)":{tag:"(0022,1458)",vr:"SQ",name:"OphthalmicThicknessMapQualityThresholdSequence",vm:"1",version:"DICOM"},"(0022,1460)":{tag:"(0022,1460)",vr:"FL",name:"OphthalmicThicknessMapThresholdQualityRating",vm:"1",version:"DICOM"},"(0022,1463)":{tag:"(0022,1463)",vr:"FL",name:"AnatomicStructureReferencePoint",vm:"2",version:"DICOM"},"(0022,1465)":{tag:"(0022,1465)",vr:"SQ",name:"RegistrationToLocalizerSequence",vm:"1",version:"DICOM"},"(0022,1466)":{tag:"(0022,1466)",vr:"CS",name:"RegisteredLocalizerUnits",vm:"1",version:"DICOM"},"(0022,1467)":{tag:"(0022,1467)",vr:"FL",name:"RegisteredLocalizerTopLeftHandCorner",vm:"2",version:"DICOM"},"(0022,1468)":{tag:"(0022,1468)",vr:"FL",name:"RegisteredLocalizerBottomRightHandCorner",vm:"2",version:"DICOM"},"(0022,1470)":{tag:"(0022,1470)",vr:"SQ",name:"OphthalmicThicknessMapQualityRatingSequence",vm:"1",version:"DICOM"},"(0022,1472)":{tag:"(0022,1472)",vr:"SQ",name:"RelevantOPTAttributesSequence",vm:"1",version:"DICOM"},"(0022,1512)":{tag:"(0022,1512)",vr:"SQ",name:"TransformationMethodCodeSequence",vm:"1",version:"DICOM"},"(0022,1513)":{tag:"(0022,1513)",vr:"SQ",name:"TransformationAlgorithmSequence",vm:"1",version:"DICOM"},"(0022,1515)":{tag:"(0022,1515)",vr:"CS",name:"OphthalmicAxialLengthMethod",vm:"1",version:"DICOM"},"(0022,1517)":{tag:"(0022,1517)",vr:"FL",name:"OphthalmicFOV",vm:"1",version:"DICOM"},"(0022,1518)":{tag:"(0022,1518)",vr:"SQ",name:"TwoDimensionalToThreeDimensionalMapSequence",vm:"1",version:"DICOM"},"(0022,1525)":{tag:"(0022,1525)",vr:"SQ",name:"WideFieldOphthalmicPhotographyQualityRatingSequence",vm:"1",version:"DICOM"},"(0022,1526)":{tag:"(0022,1526)",vr:"SQ",name:"WideFieldOphthalmicPhotographyQualityThresholdSequence",vm:"1",version:"DICOM"},"(0022,1527)":{tag:"(0022,1527)",vr:"FL",name:"WideFieldOphthalmicPhotographyThresholdQualityRating",vm:"1",version:"DICOM"},"(0022,1528)":{tag:"(0022,1528)",vr:"FL",name:"XCoordinatesCenterPixelViewAngle",vm:"1",version:"DICOM"},"(0022,1529)":{tag:"(0022,1529)",vr:"FL",name:"YCoordinatesCenterPixelViewAngle",vm:"1",version:"DICOM"},"(0022,1530)":{tag:"(0022,1530)",vr:"UL",name:"NumberOfMapPoints",vm:"1",version:"DICOM"},"(0022,1531)":{tag:"(0022,1531)",vr:"OF",name:"TwoDimensionalToThreeDimensionalMapData",vm:"1",version:"DICOM"},"(0024,0010)":{tag:"(0024,0010)",vr:"FL",name:"VisualFieldHorizontalExtent",vm:"1",version:"DICOM"},"(0024,0011)":{tag:"(0024,0011)",vr:"FL",name:"VisualFieldVerticalExtent",vm:"1",version:"DICOM"},"(0024,0012)":{tag:"(0024,0012)",vr:"CS",name:"VisualFieldShape",vm:"1",version:"DICOM"},"(0024,0016)":{tag:"(0024,0016)",vr:"SQ",name:"ScreeningTestModeCodeSequence",vm:"1",version:"DICOM"},"(0024,0018)":{tag:"(0024,0018)",vr:"FL",name:"MaximumStimulusLuminance",vm:"1",version:"DICOM"},"(0024,0020)":{tag:"(0024,0020)",vr:"FL",name:"BackgroundLuminance",vm:"1",version:"DICOM"},"(0024,0021)":{tag:"(0024,0021)",vr:"SQ",name:"StimulusColorCodeSequence",vm:"1",version:"DICOM"},"(0024,0024)":{tag:"(0024,0024)",vr:"SQ",name:"BackgroundIlluminationColorCodeSequence",vm:"1",version:"DICOM"},"(0024,0025)":{tag:"(0024,0025)",vr:"FL",name:"StimulusArea",vm:"1",version:"DICOM"},"(0024,0028)":{tag:"(0024,0028)",vr:"FL",name:"StimulusPresentationTime",vm:"1",version:"DICOM"},"(0024,0032)":{tag:"(0024,0032)",vr:"SQ",name:"FixationSequence",vm:"1",version:"DICOM"},"(0024,0033)":{tag:"(0024,0033)",vr:"SQ",name:"FixationMonitoringCodeSequence",vm:"1",version:"DICOM"},"(0024,0034)":{tag:"(0024,0034)",vr:"SQ",name:"VisualFieldCatchTrialSequence",vm:"1",version:"DICOM"},"(0024,0035)":{tag:"(0024,0035)",vr:"US",name:"FixationCheckedQuantity",vm:"1",version:"DICOM"},"(0024,0036)":{tag:"(0024,0036)",vr:"US",name:"PatientNotProperlyFixatedQuantity",vm:"1",version:"DICOM"},"(0024,0037)":{tag:"(0024,0037)",vr:"CS",name:"PresentedVisualStimuliDataFlag",vm:"1",version:"DICOM"},"(0024,0038)":{tag:"(0024,0038)",vr:"US",name:"NumberOfVisualStimuli",vm:"1",version:"DICOM"},"(0024,0039)":{tag:"(0024,0039)",vr:"CS",name:"ExcessiveFixationLossesDataFlag",vm:"1",version:"DICOM"},"(0024,0040)":{tag:"(0024,0040)",vr:"CS",name:"ExcessiveFixationLosses",vm:"1",version:"DICOM"},"(0024,0042)":{tag:"(0024,0042)",vr:"US",name:"StimuliRetestingQuantity",vm:"1",version:"DICOM"},"(0024,0044)":{tag:"(0024,0044)",vr:"LT",name:"CommentsOnPatientPerformanceOfVisualField",vm:"1",version:"DICOM"},"(0024,0045)":{tag:"(0024,0045)",vr:"CS",name:"FalseNegativesEstimateFlag",vm:"1",version:"DICOM"},"(0024,0046)":{tag:"(0024,0046)",vr:"FL",name:"FalseNegativesEstimate",vm:"1",version:"DICOM"},"(0024,0048)":{tag:"(0024,0048)",vr:"US",name:"NegativeCatchTrialsQuantity",vm:"1",version:"DICOM"},"(0024,0050)":{tag:"(0024,0050)",vr:"US",name:"FalseNegativesQuantity",vm:"1",version:"DICOM"},"(0024,0051)":{tag:"(0024,0051)",vr:"CS",name:"ExcessiveFalseNegativesDataFlag",vm:"1",version:"DICOM"},"(0024,0052)":{tag:"(0024,0052)",vr:"CS",name:"ExcessiveFalseNegatives",vm:"1",version:"DICOM"},"(0024,0053)":{tag:"(0024,0053)",vr:"CS",name:"FalsePositivesEstimateFlag",vm:"1",version:"DICOM"},"(0024,0054)":{tag:"(0024,0054)",vr:"FL",name:"FalsePositivesEstimate",vm:"1",version:"DICOM"},"(0024,0055)":{tag:"(0024,0055)",vr:"CS",name:"CatchTrialsDataFlag",vm:"1",version:"DICOM"},"(0024,0056)":{tag:"(0024,0056)",vr:"US",name:"PositiveCatchTrialsQuantity",vm:"1",version:"DICOM"},"(0024,0057)":{tag:"(0024,0057)",vr:"CS",name:"TestPointNormalsDataFlag",vm:"1",version:"DICOM"},"(0024,0058)":{tag:"(0024,0058)",vr:"SQ",name:"TestPointNormalsSequence",vm:"1",version:"DICOM"},"(0024,0059)":{tag:"(0024,0059)",vr:"CS",name:"GlobalDeviationProbabilityNormalsFlag",vm:"1",version:"DICOM"},"(0024,0060)":{tag:"(0024,0060)",vr:"US",name:"FalsePositivesQuantity",vm:"1",version:"DICOM"},"(0024,0061)":{tag:"(0024,0061)",vr:"CS",name:"ExcessiveFalsePositivesDataFlag",vm:"1",version:"DICOM"},"(0024,0062)":{tag:"(0024,0062)",vr:"CS",name:"ExcessiveFalsePositives",vm:"1",version:"DICOM"},"(0024,0063)":{tag:"(0024,0063)",vr:"CS",name:"VisualFieldTestNormalsFlag",vm:"1",version:"DICOM"},"(0024,0064)":{tag:"(0024,0064)",vr:"SQ",name:"ResultsNormalsSequence",vm:"1",version:"DICOM"},"(0024,0065)":{tag:"(0024,0065)",vr:"SQ",name:"AgeCorrectedSensitivityDeviationAlgorithmSequence",vm:"1",version:"DICOM"},"(0024,0066)":{tag:"(0024,0066)",vr:"FL",name:"GlobalDeviationFromNormal",vm:"1",version:"DICOM"},"(0024,0067)":{tag:"(0024,0067)",vr:"SQ",name:"GeneralizedDefectSensitivityDeviationAlgorithmSequence",vm:"1",version:"DICOM"},"(0024,0068)":{tag:"(0024,0068)",vr:"FL",name:"LocalizedDeviationFromNormal",vm:"1",version:"DICOM"},"(0024,0069)":{tag:"(0024,0069)",vr:"LO",name:"PatientReliabilityIndicator",vm:"1",version:"DICOM"},"(0024,0070)":{tag:"(0024,0070)",vr:"FL",name:"VisualFieldMeanSensitivity",vm:"1",version:"DICOM"},"(0024,0071)":{tag:"(0024,0071)",vr:"FL",name:"GlobalDeviationProbability",vm:"1",version:"DICOM"},"(0024,0072)":{tag:"(0024,0072)",vr:"CS",name:"LocalDeviationProbabilityNormalsFlag",vm:"1",version:"DICOM"},"(0024,0073)":{tag:"(0024,0073)",vr:"FL",name:"LocalizedDeviationProbability",vm:"1",version:"DICOM"},"(0024,0074)":{tag:"(0024,0074)",vr:"CS",name:"ShortTermFluctuationCalculated",vm:"1",version:"DICOM"},"(0024,0075)":{tag:"(0024,0075)",vr:"FL",name:"ShortTermFluctuation",vm:"1",version:"DICOM"},"(0024,0076)":{tag:"(0024,0076)",vr:"CS",name:"ShortTermFluctuationProbabilityCalculated",vm:"1",version:"DICOM"},"(0024,0077)":{tag:"(0024,0077)",vr:"FL",name:"ShortTermFluctuationProbability",vm:"1",version:"DICOM"},"(0024,0078)":{tag:"(0024,0078)",vr:"CS",name:"CorrectedLocalizedDeviationFromNormalCalculated",vm:"1",version:"DICOM"},"(0024,0079)":{tag:"(0024,0079)",vr:"FL",name:"CorrectedLocalizedDeviationFromNormal",vm:"1",version:"DICOM"},"(0024,0080)":{tag:"(0024,0080)",vr:"CS",name:"CorrectedLocalizedDeviationFromNormalProbabilityCalculated",vm:"1",version:"DICOM"},"(0024,0081)":{tag:"(0024,0081)",vr:"FL",name:"CorrectedLocalizedDeviationFromNormalProbability",vm:"1",version:"DICOM"},"(0024,0083)":{tag:"(0024,0083)",vr:"SQ",name:"GlobalDeviationProbabilitySequence",vm:"1",version:"DICOM"},"(0024,0085)":{tag:"(0024,0085)",vr:"SQ",name:"LocalizedDeviationProbabilitySequence",vm:"1",version:"DICOM"},"(0024,0086)":{tag:"(0024,0086)",vr:"CS",name:"FovealSensitivityMeasured",vm:"1",version:"DICOM"},"(0024,0087)":{tag:"(0024,0087)",vr:"FL",name:"FovealSensitivity",vm:"1",version:"DICOM"},"(0024,0088)":{tag:"(0024,0088)",vr:"FL",name:"VisualFieldTestDuration",vm:"1",version:"DICOM"},"(0024,0089)":{tag:"(0024,0089)",vr:"SQ",name:"VisualFieldTestPointSequence",vm:"1",version:"DICOM"},"(0024,0090)":{tag:"(0024,0090)",vr:"FL",name:"VisualFieldTestPointXCoordinate",vm:"1",version:"DICOM"},"(0024,0091)":{tag:"(0024,0091)",vr:"FL",name:"VisualFieldTestPointYCoordinate",vm:"1",version:"DICOM"},"(0024,0092)":{tag:"(0024,0092)",vr:"FL",name:"AgeCorrectedSensitivityDeviationValue",vm:"1",version:"DICOM"},"(0024,0093)":{tag:"(0024,0093)",vr:"CS",name:"StimulusResults",vm:"1",version:"DICOM"},"(0024,0094)":{tag:"(0024,0094)",vr:"FL",name:"SensitivityValue",vm:"1",version:"DICOM"},"(0024,0095)":{tag:"(0024,0095)",vr:"CS",name:"RetestStimulusSeen",vm:"1",version:"DICOM"},"(0024,0096)":{tag:"(0024,0096)",vr:"FL",name:"RetestSensitivityValue",vm:"1",version:"DICOM"},"(0024,0097)":{tag:"(0024,0097)",vr:"SQ",name:"VisualFieldTestPointNormalsSequence",vm:"1",version:"DICOM"},"(0024,0098)":{tag:"(0024,0098)",vr:"FL",name:"QuantifiedDefect",vm:"1",version:"DICOM"},"(0024,0100)":{tag:"(0024,0100)",vr:"FL",name:"AgeCorrectedSensitivityDeviationProbabilityValue",vm:"1",version:"DICOM"},"(0024,0102)":{tag:"(0024,0102)",vr:"CS",name:"GeneralizedDefectCorrectedSensitivityDeviationFlag",vm:"1",version:"DICOM"},"(0024,0103)":{tag:"(0024,0103)",vr:"FL",name:"GeneralizedDefectCorrectedSensitivityDeviationValue",vm:"1",version:"DICOM"},"(0024,0104)":{tag:"(0024,0104)",vr:"FL",name:"GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue",vm:"1",version:"DICOM"},"(0024,0105)":{tag:"(0024,0105)",vr:"FL",name:"MinimumSensitivityValue",vm:"1",version:"DICOM"},"(0024,0106)":{tag:"(0024,0106)",vr:"CS",name:"BlindSpotLocalized",vm:"1",version:"DICOM"},"(0024,0107)":{tag:"(0024,0107)",vr:"FL",name:"BlindSpotXCoordinate",vm:"1",version:"DICOM"},"(0024,0108)":{tag:"(0024,0108)",vr:"FL",name:"BlindSpotYCoordinate",vm:"1",version:"DICOM"},"(0024,0110)":{tag:"(0024,0110)",vr:"SQ",name:"VisualAcuityMeasurementSequence",vm:"1",version:"DICOM"},"(0024,0112)":{tag:"(0024,0112)",vr:"SQ",name:"RefractiveParametersUsedOnPatientSequence",vm:"1",version:"DICOM"},"(0024,0113)":{tag:"(0024,0113)",vr:"CS",name:"MeasurementLaterality",vm:"1",version:"DICOM"},"(0024,0114)":{tag:"(0024,0114)",vr:"SQ",name:"OphthalmicPatientClinicalInformationLeftEyeSequence",vm:"1",version:"DICOM"},"(0024,0115)":{tag:"(0024,0115)",vr:"SQ",name:"OphthalmicPatientClinicalInformationRightEyeSequence",vm:"1",version:"DICOM"},"(0024,0117)":{tag:"(0024,0117)",vr:"CS",name:"FovealPointNormativeDataFlag",vm:"1",version:"DICOM"},"(0024,0118)":{tag:"(0024,0118)",vr:"FL",name:"FovealPointProbabilityValue",vm:"1",version:"DICOM"},"(0024,0120)":{tag:"(0024,0120)",vr:"CS",name:"ScreeningBaselineMeasured",vm:"1",version:"DICOM"},"(0024,0122)":{tag:"(0024,0122)",vr:"SQ",name:"ScreeningBaselineMeasuredSequence",vm:"1",version:"DICOM"},"(0024,0124)":{tag:"(0024,0124)",vr:"CS",name:"ScreeningBaselineType",vm:"1",version:"DICOM"},"(0024,0126)":{tag:"(0024,0126)",vr:"FL",name:"ScreeningBaselineValue",vm:"1",version:"DICOM"},"(0024,0202)":{tag:"(0024,0202)",vr:"LO",name:"AlgorithmSource",vm:"1",version:"DICOM"},"(0024,0306)":{tag:"(0024,0306)",vr:"LO",name:"DataSetName",vm:"1",version:"DICOM"},"(0024,0307)":{tag:"(0024,0307)",vr:"LO",name:"DataSetVersion",vm:"1",version:"DICOM"},"(0024,0308)":{tag:"(0024,0308)",vr:"LO",name:"DataSetSource",vm:"1",version:"DICOM"},"(0024,0309)":{tag:"(0024,0309)",vr:"LO",name:"DataSetDescription",vm:"1",version:"DICOM"},"(0024,0317)":{tag:"(0024,0317)",vr:"SQ",name:"VisualFieldTestReliabilityGlobalIndexSequence",vm:"1",version:"DICOM"},"(0024,0320)":{tag:"(0024,0320)",vr:"SQ",name:"VisualFieldGlobalResultsIndexSequence",vm:"1",version:"DICOM"},"(0024,0325)":{tag:"(0024,0325)",vr:"SQ",name:"DataObservationSequence",vm:"1",version:"DICOM"},"(0024,0338)":{tag:"(0024,0338)",vr:"CS",name:"IndexNormalsFlag",vm:"1",version:"DICOM"},"(0024,0341)":{tag:"(0024,0341)",vr:"FL",name:"IndexProbability",vm:"1",version:"DICOM"},"(0024,0344)":{tag:"(0024,0344)",vr:"SQ",name:"IndexProbabilitySequence",vm:"1",version:"DICOM"},"(0028,0002)":{tag:"(0028,0002)",vr:"US",name:"SamplesPerPixel",vm:"1",version:"DICOM"},"(0028,0003)":{tag:"(0028,0003)",vr:"US",name:"SamplesPerPixelUsed",vm:"1",version:"DICOM"},"(0028,0004)":{tag:"(0028,0004)",vr:"CS",name:"PhotometricInterpretation",vm:"1",version:"DICOM"},"(0028,0006)":{tag:"(0028,0006)",vr:"US",name:"PlanarConfiguration",vm:"1",version:"DICOM"},"(0028,0008)":{tag:"(0028,0008)",vr:"IS",name:"NumberOfFrames",vm:"1",version:"DICOM"},"(0028,0009)":{tag:"(0028,0009)",vr:"AT",name:"FrameIncrementPointer",vm:"1-n",version:"DICOM"},"(0028,000A)":{tag:"(0028,000A)",vr:"AT",name:"FrameDimensionPointer",vm:"1-n",version:"DICOM"},"(0028,0010)":{tag:"(0028,0010)",vr:"US",name:"Rows",vm:"1",version:"DICOM"},"(0028,0011)":{tag:"(0028,0011)",vr:"US",name:"Columns",vm:"1",version:"DICOM"},"(0028,0014)":{tag:"(0028,0014)",vr:"US",name:"UltrasoundColorDataPresent",vm:"1",version:"DICOM"},"(0028,0030)":{tag:"(0028,0030)",vr:"DS",name:"PixelSpacing",vm:"2",version:"DICOM"},"(0028,0031)":{tag:"(0028,0031)",vr:"DS",name:"ZoomFactor",vm:"2",version:"DICOM"},"(0028,0032)":{tag:"(0028,0032)",vr:"DS",name:"ZoomCenter",vm:"2",version:"DICOM"},"(0028,0034)":{tag:"(0028,0034)",vr:"IS",name:"PixelAspectRatio",vm:"2",version:"DICOM"},"(0028,0051)":{tag:"(0028,0051)",vr:"CS",name:"CorrectedImage",vm:"1-n",version:"DICOM"},"(0028,0100)":{tag:"(0028,0100)",vr:"US",name:"BitsAllocated",vm:"1",version:"DICOM"},"(0028,0101)":{tag:"(0028,0101)",vr:"US",name:"BitsStored",vm:"1",version:"DICOM"},"(0028,0102)":{tag:"(0028,0102)",vr:"US",name:"HighBit",vm:"1",version:"DICOM"},"(0028,0103)":{tag:"(0028,0103)",vr:"US",name:"PixelRepresentation",vm:"1",version:"DICOM"},"(0028,0106)":{tag:"(0028,0106)",vr:"xs",name:"SmallestImagePixelValue",vm:"1",version:"DICOM"},"(0028,0107)":{tag:"(0028,0107)",vr:"xs",name:"LargestImagePixelValue",vm:"1",version:"DICOM"},"(0028,0108)":{tag:"(0028,0108)",vr:"xs",name:"SmallestPixelValueInSeries",vm:"1",version:"DICOM"},"(0028,0109)":{tag:"(0028,0109)",vr:"xs",name:"LargestPixelValueInSeries",vm:"1",version:"DICOM"},"(0028,0120)":{tag:"(0028,0120)",vr:"xs",name:"PixelPaddingValue",vm:"1",version:"DICOM"},"(0028,0121)":{tag:"(0028,0121)",vr:"xs",name:"PixelPaddingRangeLimit",vm:"1",version:"DICOM"},"(0028,0122)":{tag:"(0028,0122)",vr:"FL",name:"FloatPixelPaddingValue",vm:"1",version:"DICOM"},"(0028,0123)":{tag:"(0028,0123)",vr:"FD",name:"DoubleFloatPixelPaddingValue",vm:"1",version:"DICOM"},"(0028,0124)":{tag:"(0028,0124)",vr:"FL",name:"FloatPixelPaddingRangeLimit",vm:"1",version:"DICOM"},"(0028,0125)":{tag:"(0028,0125)",vr:"FD",name:"DoubleFloatPixelPaddingRangeLimit",vm:"1",version:"DICOM"},"(0028,0300)":{tag:"(0028,0300)",vr:"CS",name:"QualityControlImage",vm:"1",version:"DICOM"},"(0028,0301)":{tag:"(0028,0301)",vr:"CS",name:"BurnedInAnnotation",vm:"1",version:"DICOM"},"(0028,0302)":{tag:"(0028,0302)",vr:"CS",name:"RecognizableVisualFeatures",vm:"1",version:"DICOM"},"(0028,0303)":{tag:"(0028,0303)",vr:"CS",name:"LongitudinalTemporalInformationModified",vm:"1",version:"DICOM"},"(0028,0304)":{tag:"(0028,0304)",vr:"UI",name:"ReferencedColorPaletteInstanceUID",vm:"1",version:"DICOM"},"(0028,0A02)":{tag:"(0028,0A02)",vr:"CS",name:"PixelSpacingCalibrationType",vm:"1",version:"DICOM"},"(0028,0A04)":{tag:"(0028,0A04)",vr:"LO",name:"PixelSpacingCalibrationDescription",vm:"1",version:"DICOM"},"(0028,1040)":{tag:"(0028,1040)",vr:"CS",name:"PixelIntensityRelationship",vm:"1",version:"DICOM"},"(0028,1041)":{tag:"(0028,1041)",vr:"SS",name:"PixelIntensityRelationshipSign",vm:"1",version:"DICOM"},"(0028,1050)":{tag:"(0028,1050)",vr:"DS",name:"WindowCenter",vm:"1-n",version:"DICOM"},"(0028,1051)":{tag:"(0028,1051)",vr:"DS",name:"WindowWidth",vm:"1-n",version:"DICOM"},"(0028,1052)":{tag:"(0028,1052)",vr:"DS",name:"RescaleIntercept",vm:"1",version:"DICOM"},"(0028,1053)":{tag:"(0028,1053)",vr:"DS",name:"RescaleSlope",vm:"1",version:"DICOM"},"(0028,1054)":{tag:"(0028,1054)",vr:"LO",name:"RescaleType",vm:"1",version:"DICOM"},"(0028,1055)":{tag:"(0028,1055)",vr:"LO",name:"WindowCenterWidthExplanation",vm:"1-n",version:"DICOM"},"(0028,1056)":{tag:"(0028,1056)",vr:"CS",name:"VOILUTFunction",vm:"1",version:"DICOM"},"(0028,1090)":{tag:"(0028,1090)",vr:"CS",name:"RecommendedViewingMode",vm:"1",version:"DICOM"},"(0028,1101)":{tag:"(0028,1101)",vr:"xs",name:"RedPaletteColorLookupTableDescriptor",vm:"3",version:"DICOM"},"(0028,1102)":{tag:"(0028,1102)",vr:"xs",name:"GreenPaletteColorLookupTableDescriptor",vm:"3",version:"DICOM"},"(0028,1103)":{tag:"(0028,1103)",vr:"xs",name:"BluePaletteColorLookupTableDescriptor",vm:"3",version:"DICOM"},"(0028,1104)":{tag:"(0028,1104)",vr:"US",name:"AlphaPaletteColorLookupTableDescriptor",vm:"3",version:"DICOM"},"(0028,1199)":{tag:"(0028,1199)",vr:"UI",name:"PaletteColorLookupTableUID",vm:"1",version:"DICOM"},"(0028,1201)":{tag:"(0028,1201)",vr:"OW",name:"RedPaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1202)":{tag:"(0028,1202)",vr:"OW",name:"GreenPaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1203)":{tag:"(0028,1203)",vr:"OW",name:"BluePaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1204)":{tag:"(0028,1204)",vr:"OW",name:"AlphaPaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1221)":{tag:"(0028,1221)",vr:"OW",name:"SegmentedRedPaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1222)":{tag:"(0028,1222)",vr:"OW",name:"SegmentedGreenPaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1223)":{tag:"(0028,1223)",vr:"OW",name:"SegmentedBluePaletteColorLookupTableData",vm:"1",version:"DICOM"},"(0028,1300)":{tag:"(0028,1300)",vr:"CS",name:"BreastImplantPresent",vm:"1",version:"DICOM"},"(0028,1350)":{tag:"(0028,1350)",vr:"CS",name:"PartialView",vm:"1",version:"DICOM"},"(0028,1351)":{tag:"(0028,1351)",vr:"ST",name:"PartialViewDescription",vm:"1",version:"DICOM"},"(0028,1352)":{tag:"(0028,1352)",vr:"SQ",name:"PartialViewCodeSequence",vm:"1",version:"DICOM"},"(0028,135A)":{tag:"(0028,135A)",vr:"CS",name:"SpatialLocationsPreserved",vm:"1",version:"DICOM"},"(0028,1401)":{tag:"(0028,1401)",vr:"SQ",name:"DataFrameAssignmentSequence",vm:"1",version:"DICOM"},"(0028,1402)":{tag:"(0028,1402)",vr:"CS",name:"DataPathAssignment",vm:"1",version:"DICOM"},"(0028,1403)":{tag:"(0028,1403)",vr:"US",name:"BitsMappedToColorLookupTable",vm:"1",version:"DICOM"},"(0028,1404)":{tag:"(0028,1404)",vr:"SQ",name:"BlendingLUT1Sequence",vm:"1",version:"DICOM"},"(0028,1405)":{tag:"(0028,1405)",vr:"CS",name:"BlendingLUT1TransferFunction",vm:"1",version:"DICOM"},"(0028,1406)":{tag:"(0028,1406)",vr:"FD",name:"BlendingWeightConstant",vm:"1",version:"DICOM"},"(0028,1407)":{tag:"(0028,1407)",vr:"US",name:"BlendingLookupTableDescriptor",vm:"3",version:"DICOM"},"(0028,1408)":{tag:"(0028,1408)",vr:"OW",name:"BlendingLookupTableData",vm:"1",version:"DICOM"},"(0028,140B)":{tag:"(0028,140B)",vr:"SQ",name:"EnhancedPaletteColorLookupTableSequence",vm:"1",version:"DICOM"},"(0028,140C)":{tag:"(0028,140C)",vr:"SQ",name:"BlendingLUT2Sequence",vm:"1",version:"DICOM"},"(0028,140D)":{tag:"(0028,140D)",vr:"CS",name:"BlendingLUT2TransferFunction",vm:"1",version:"DICOM"},"(0028,140E)":{tag:"(0028,140E)",vr:"CS",name:"DataPathID",vm:"1",version:"DICOM"},"(0028,140F)":{tag:"(0028,140F)",vr:"CS",name:"RGBLUTTransferFunction",vm:"1",version:"DICOM"},"(0028,1410)":{tag:"(0028,1410)",vr:"CS",name:"AlphaLUTTransferFunction",vm:"1",version:"DICOM"},"(0028,2000)":{tag:"(0028,2000)",vr:"OB",name:"ICCProfile",vm:"1",version:"DICOM"},"(0028,2110)":{tag:"(0028,2110)",vr:"CS",name:"LossyImageCompression",vm:"1",version:"DICOM"},"(0028,2112)":{tag:"(0028,2112)",vr:"DS",name:"LossyImageCompressionRatio",vm:"1-n",version:"DICOM"},"(0028,2114)":{tag:"(0028,2114)",vr:"CS",name:"LossyImageCompressionMethod",vm:"1-n",version:"DICOM"},"(0028,3000)":{tag:"(0028,3000)",vr:"SQ",name:"ModalityLUTSequence",vm:"1",version:"DICOM"},"(0028,3002)":{tag:"(0028,3002)",vr:"xs",name:"LUTDescriptor",vm:"3",version:"DICOM"},"(0028,3003)":{tag:"(0028,3003)",vr:"LO",name:"LUTExplanation",vm:"1",version:"DICOM"},"(0028,3004)":{tag:"(0028,3004)",vr:"LO",name:"ModalityLUTType",vm:"1",version:"DICOM"},"(0028,3006)":{tag:"(0028,3006)",vr:"lt",name:"LUTData",vm:"1-n",version:"DICOM"},"(0028,3010)":{tag:"(0028,3010)",vr:"SQ",name:"VOILUTSequence",vm:"1",version:"DICOM"},"(0028,3110)":{tag:"(0028,3110)",vr:"SQ",name:"SoftcopyVOILUTSequence",vm:"1",version:"DICOM"},"(0028,6010)":{tag:"(0028,6010)",vr:"US",name:"RepresentativeFrameNumber",vm:"1",version:"DICOM"},"(0028,6020)":{tag:"(0028,6020)",vr:"US",name:"FrameNumbersOfInterest",vm:"1-n",version:"DICOM"},"(0028,6022)":{tag:"(0028,6022)",vr:"LO",name:"FrameOfInterestDescription",vm:"1-n",version:"DICOM"},"(0028,6023)":{tag:"(0028,6023)",vr:"CS",name:"FrameOfInterestType",vm:"1-n",version:"DICOM"},"(0028,6040)":{tag:"(0028,6040)",vr:"US",name:"RWavePointer",vm:"1-n",version:"DICOM"},"(0028,6100)":{tag:"(0028,6100)",vr:"SQ",name:"MaskSubtractionSequence",vm:"1",version:"DICOM"},"(0028,6101)":{tag:"(0028,6101)",vr:"CS",name:"MaskOperation",vm:"1",version:"DICOM"},"(0028,6102)":{tag:"(0028,6102)",vr:"US",name:"ApplicableFrameRange",vm:"2-2n",version:"DICOM"},"(0028,6110)":{tag:"(0028,6110)",vr:"US",name:"MaskFrameNumbers",vm:"1-n",version:"DICOM"},"(0028,6112)":{tag:"(0028,6112)",vr:"US",name:"ContrastFrameAveraging",vm:"1",version:"DICOM"},"(0028,6114)":{tag:"(0028,6114)",vr:"FL",name:"MaskSubPixelShift",vm:"2",version:"DICOM"},"(0028,6120)":{tag:"(0028,6120)",vr:"SS",name:"TIDOffset",vm:"1",version:"DICOM"},"(0028,6190)":{tag:"(0028,6190)",vr:"ST",name:"MaskOperationExplanation",vm:"1",version:"DICOM"},"(0028,7000)":{tag:"(0028,7000)",vr:"SQ",name:"EquipmentAdministratorSequence",vm:"1",version:"DICOM"},"(0028,7001)":{tag:"(0028,7001)",vr:"US",name:"NumberOfDisplaySubsystems",vm:"1",version:"DICOM"},"(0028,7002)":{tag:"(0028,7002)",vr:"US",name:"CurrentConfigurationID",vm:"1",version:"DICOM"},"(0028,7003)":{tag:"(0028,7003)",vr:"US",name:"DisplaySubsystemID",vm:"1",version:"DICOM"},"(0028,7004)":{tag:"(0028,7004)",vr:"SH",name:"DisplaySubsystemName",vm:"1",version:"DICOM"},"(0028,7005)":{tag:"(0028,7005)",vr:"LO",name:"DisplaySubsystemDescription",vm:"1",version:"DICOM"},"(0028,7006)":{tag:"(0028,7006)",vr:"CS",name:"SystemStatus",vm:"1",version:"DICOM"},"(0028,7007)":{tag:"(0028,7007)",vr:"LO",name:"SystemStatusComment",vm:"1",version:"DICOM"},"(0028,7008)":{tag:"(0028,7008)",vr:"SQ",name:"TargetLuminanceCharacteristicsSequence",vm:"1",version:"DICOM"},"(0028,7009)":{tag:"(0028,7009)",vr:"US",name:"LuminanceCharacteristicsID",vm:"1",version:"DICOM"},"(0028,700A)":{tag:"(0028,700A)",vr:"SQ",name:"DisplaySubsystemConfigurationSequence",vm:"1",version:"DICOM"},"(0028,700B)":{tag:"(0028,700B)",vr:"US",name:"ConfigurationID",vm:"1",version:"DICOM"},"(0028,700C)":{tag:"(0028,700C)",vr:"SH",name:"ConfigurationName",vm:"1",version:"DICOM"},"(0028,700D)":{tag:"(0028,700D)",vr:"LO",name:"ConfigurationDescription",vm:"1",version:"DICOM"},"(0028,700E)":{tag:"(0028,700E)",vr:"US",name:"ReferencedTargetLuminanceCharacteristicsID",vm:"1",version:"DICOM"},"(0028,700F)":{tag:"(0028,700F)",vr:"SQ",name:"QAResultsSequence",vm:"1",version:"DICOM"},"(0028,7010)":{tag:"(0028,7010)",vr:"SQ",name:"DisplaySubsystemQAResultsSequence",vm:"1",version:"DICOM"},"(0028,7011)":{tag:"(0028,7011)",vr:"SQ",name:"ConfigurationQAResultsSequence",vm:"1",version:"DICOM"},"(0028,7012)":{tag:"(0028,7012)",vr:"SQ",name:"MeasurementEquipmentSequence",vm:"1",version:"DICOM"},"(0028,7013)":{tag:"(0028,7013)",vr:"CS",name:"MeasurementFunctions",vm:"1-n",version:"DICOM"},"(0028,7014)":{tag:"(0028,7014)",vr:"CS",name:"MeasurementEquipmentType",vm:"1",version:"DICOM"},"(0028,7015)":{tag:"(0028,7015)",vr:"SQ",name:"VisualEvaluationResultSequence",vm:"1",version:"DICOM"},"(0028,7016)":{tag:"(0028,7016)",vr:"SQ",name:"DisplayCalibrationResultSequence",vm:"1",version:"DICOM"},"(0028,7017)":{tag:"(0028,7017)",vr:"US",name:"DDLValue",vm:"1",version:"DICOM"},"(0028,7018)":{tag:"(0028,7018)",vr:"FL",name:"CIExyWhitePoint",vm:"2",version:"DICOM"},"(0028,7019)":{tag:"(0028,7019)",vr:"CS",name:"DisplayFunctionType",vm:"1",version:"DICOM"},"(0028,701A)":{tag:"(0028,701A)",vr:"FL",name:"GammaValue",vm:"1",version:"DICOM"},"(0028,701B)":{tag:"(0028,701B)",vr:"US",name:"NumberOfLuminancePoints",vm:"1",version:"DICOM"},"(0028,701C)":{tag:"(0028,701C)",vr:"SQ",name:"LuminanceResponseSequence",vm:"1",version:"DICOM"},"(0028,701D)":{tag:"(0028,701D)",vr:"FL",name:"TargetMinimumLuminance",vm:"1",version:"DICOM"},"(0028,701E)":{tag:"(0028,701E)",vr:"FL",name:"TargetMaximumLuminance",vm:"1",version:"DICOM"},"(0028,701F)":{tag:"(0028,701F)",vr:"FL",name:"LuminanceValue",vm:"1",version:"DICOM"},"(0028,7020)":{tag:"(0028,7020)",vr:"LO",name:"LuminanceResponseDescription",vm:"1",version:"DICOM"},"(0028,7021)":{tag:"(0028,7021)",vr:"CS",name:"WhitePointFlag",vm:"1",version:"DICOM"},"(0028,7022)":{tag:"(0028,7022)",vr:"SQ",name:"DisplayDeviceTypeCodeSequence",vm:"1",version:"DICOM"},"(0028,7023)":{tag:"(0028,7023)",vr:"SQ",name:"DisplaySubsystemSequence",vm:"1",version:"DICOM"},"(0028,7024)":{tag:"(0028,7024)",vr:"SQ",name:"LuminanceResultSequence",vm:"1",version:"DICOM"},"(0028,7025)":{tag:"(0028,7025)",vr:"CS",name:"AmbientLightValueSource",vm:"1",version:"DICOM"},"(0028,7026)":{tag:"(0028,7026)",vr:"CS",name:"MeasuredCharacteristics",vm:"1-n",version:"DICOM"},"(0028,7027)":{tag:"(0028,7027)",vr:"SQ",name:"LuminanceUniformityResultSequence",vm:"1",version:"DICOM"},"(0028,7028)":{tag:"(0028,7028)",vr:"SQ",name:"VisualEvaluationTestSequence",vm:"1",version:"DICOM"},"(0028,7029)":{tag:"(0028,7029)",vr:"CS",name:"TestResult",vm:"1",version:"DICOM"},"(0028,702A)":{tag:"(0028,702A)",vr:"LO",name:"TestResultComment",vm:"1",version:"DICOM"},"(0028,702B)":{tag:"(0028,702B)",vr:"CS",name:"TestImageValidation",vm:"1",version:"DICOM"},"(0028,702C)":{tag:"(0028,702C)",vr:"SQ",name:"TestPatternCodeSequence",vm:"1",version:"DICOM"},"(0028,702D)":{tag:"(0028,702D)",vr:"SQ",name:"MeasurementPatternCodeSequence",vm:"1",version:"DICOM"},"(0028,702E)":{tag:"(0028,702E)",vr:"SQ",name:"VisualEvaluationMethodCodeSequence",vm:"1",version:"DICOM"},"(0028,7FE0)":{tag:"(0028,7FE0)",vr:"UR",name:"PixelDataProviderURL",vm:"1",version:"DICOM"},"(0028,9001)":{tag:"(0028,9001)",vr:"UL",name:"DataPointRows",vm:"1",version:"DICOM"},"(0028,9002)":{tag:"(0028,9002)",vr:"UL",name:"DataPointColumns",vm:"1",version:"DICOM"},"(0028,9003)":{tag:"(0028,9003)",vr:"CS",name:"SignalDomainColumns",vm:"1",version:"DICOM"},"(0028,9108)":{tag:"(0028,9108)",vr:"CS",name:"DataRepresentation",vm:"1",version:"DICOM"},"(0028,9110)":{tag:"(0028,9110)",vr:"SQ",name:"PixelMeasuresSequence",vm:"1",version:"DICOM"},"(0028,9132)":{tag:"(0028,9132)",vr:"SQ",name:"FrameVOILUTSequence",vm:"1",version:"DICOM"},"(0028,9145)":{tag:"(0028,9145)",vr:"SQ",name:"PixelValueTransformationSequence",vm:"1",version:"DICOM"},"(0028,9235)":{tag:"(0028,9235)",vr:"CS",name:"SignalDomainRows",vm:"1",version:"DICOM"},"(0028,9411)":{tag:"(0028,9411)",vr:"FL",name:"DisplayFilterPercentage",vm:"1",version:"DICOM"},"(0028,9415)":{tag:"(0028,9415)",vr:"SQ",name:"FramePixelShiftSequence",vm:"1",version:"DICOM"},"(0028,9416)":{tag:"(0028,9416)",vr:"US",name:"SubtractionItemID",vm:"1",version:"DICOM"},"(0028,9422)":{tag:"(0028,9422)",vr:"SQ",name:"PixelIntensityRelationshipLUTSequence",vm:"1",version:"DICOM"},"(0028,9443)":{tag:"(0028,9443)",vr:"SQ",name:"FramePixelDataPropertiesSequence",vm:"1",version:"DICOM"},"(0028,9444)":{tag:"(0028,9444)",vr:"CS",name:"GeometricalProperties",vm:"1",version:"DICOM"},"(0028,9445)":{tag:"(0028,9445)",vr:"FL",name:"GeometricMaximumDistortion",vm:"1",version:"DICOM"},"(0028,9446)":{tag:"(0028,9446)",vr:"CS",name:"ImageProcessingApplied",vm:"1-n",version:"DICOM"},"(0028,9454)":{tag:"(0028,9454)",vr:"CS",name:"MaskSelectionMode",vm:"1",version:"DICOM"},"(0028,9474)":{tag:"(0028,9474)",vr:"CS",name:"LUTFunction",vm:"1",version:"DICOM"},"(0028,9478)":{tag:"(0028,9478)",vr:"FL",name:"MaskVisibilityPercentage",vm:"1",version:"DICOM"},"(0028,9501)":{tag:"(0028,9501)",vr:"SQ",name:"PixelShiftSequence",vm:"1",version:"DICOM"},"(0028,9502)":{tag:"(0028,9502)",vr:"SQ",name:"RegionPixelShiftSequence",vm:"1",version:"DICOM"},"(0028,9503)":{tag:"(0028,9503)",vr:"SS",name:"VerticesOfTheRegion",vm:"2-2n",version:"DICOM"},"(0028,9505)":{tag:"(0028,9505)",vr:"SQ",name:"MultiFramePresentationSequence",vm:"1",version:"DICOM"},"(0028,9506)":{tag:"(0028,9506)",vr:"US",name:"PixelShiftFrameRange",vm:"2-2n",version:"DICOM"},"(0028,9507)":{tag:"(0028,9507)",vr:"US",name:"LUTFrameRange",vm:"2-2n",version:"DICOM"},"(0028,9520)":{tag:"(0028,9520)",vr:"DS",name:"ImageToEquipmentMappingMatrix",vm:"16",version:"DICOM"},"(0028,9537)":{tag:"(0028,9537)",vr:"CS",name:"EquipmentCoordinateSystemIdentification",vm:"1",version:"DICOM"},"(0032,1031)":{tag:"(0032,1031)",vr:"SQ",name:"RequestingPhysicianIdentificationSequence",vm:"1",version:"DICOM"},"(0032,1032)":{tag:"(0032,1032)",vr:"PN",name:"RequestingPhysician",vm:"1",version:"DICOM"},"(0032,1033)":{tag:"(0032,1033)",vr:"LO",name:"RequestingService",vm:"1",version:"DICOM"},"(0032,1034)":{tag:"(0032,1034)",vr:"SQ",name:"RequestingServiceCodeSequence",vm:"1",version:"DICOM"},"(0032,1060)":{tag:"(0032,1060)",vr:"LO",name:"RequestedProcedureDescription",vm:"1",version:"DICOM"},"(0032,1064)":{tag:"(0032,1064)",vr:"SQ",name:"RequestedProcedureCodeSequence",vm:"1",version:"DICOM"},"(0032,1070)":{tag:"(0032,1070)",vr:"LO",name:"RequestedContrastAgent",vm:"1",version:"DICOM"},"(0038,0004)":{tag:"(0038,0004)",vr:"SQ",name:"ReferencedPatientAliasSequence",vm:"1",version:"DICOM"},"(0038,0008)":{tag:"(0038,0008)",vr:"CS",name:"VisitStatusID",vm:"1",version:"DICOM"},"(0038,0010)":{tag:"(0038,0010)",vr:"LO",name:"AdmissionID",vm:"1",version:"DICOM"},"(0038,0014)":{tag:"(0038,0014)",vr:"SQ",name:"IssuerOfAdmissionIDSequence",vm:"1",version:"DICOM"},"(0038,0016)":{tag:"(0038,0016)",vr:"LO",name:"RouteOfAdmissions",vm:"1",version:"DICOM"},"(0038,0020)":{tag:"(0038,0020)",vr:"DA",name:"AdmittingDate",vm:"1",version:"DICOM"},"(0038,0021)":{tag:"(0038,0021)",vr:"TM",name:"AdmittingTime",vm:"1",version:"DICOM"},"(0038,0050)":{tag:"(0038,0050)",vr:"LO",name:"SpecialNeeds",vm:"1",version:"DICOM"},"(0038,0060)":{tag:"(0038,0060)",vr:"LO",name:"ServiceEpisodeID",vm:"1",version:"DICOM"},"(0038,0062)":{tag:"(0038,0062)",vr:"LO",name:"ServiceEpisodeDescription",vm:"1",version:"DICOM"},"(0038,0064)":{tag:"(0038,0064)",vr:"SQ",name:"IssuerOfServiceEpisodeIDSequence",vm:"1",version:"DICOM"},"(0038,0100)":{tag:"(0038,0100)",vr:"SQ",name:"PertinentDocumentsSequence",vm:"1",version:"DICOM"},"(0038,0101)":{tag:"(0038,0101)",vr:"SQ",name:"PertinentResourcesSequence",vm:"1",version:"DICOM"},"(0038,0102)":{tag:"(0038,0102)",vr:"LO",name:"ResourceDescription",vm:"1",version:"DICOM"},"(0038,0300)":{tag:"(0038,0300)",vr:"LO",name:"CurrentPatientLocation",vm:"1",version:"DICOM"},"(0038,0400)":{tag:"(0038,0400)",vr:"LO",name:"PatientInstitutionResidence",vm:"1",version:"DICOM"},"(0038,0500)":{tag:"(0038,0500)",vr:"LO",name:"PatientState",vm:"1",version:"DICOM"},"(0038,0502)":{tag:"(0038,0502)",vr:"SQ",name:"PatientClinicalTrialParticipationSequence",vm:"1",version:"DICOM"},"(0038,4000)":{tag:"(0038,4000)",vr:"LT",name:"VisitComments",vm:"1",version:"DICOM"},"(003A,0004)":{tag:"(003A,0004)",vr:"CS",name:"WaveformOriginality",vm:"1",version:"DICOM"},"(003A,0005)":{tag:"(003A,0005)",vr:"US",name:"NumberOfWaveformChannels",vm:"1",version:"DICOM"},"(003A,0010)":{tag:"(003A,0010)",vr:"UL",name:"NumberOfWaveformSamples",vm:"1",version:"DICOM"},"(003A,001A)":{tag:"(003A,001A)",vr:"DS",name:"SamplingFrequency",vm:"1",version:"DICOM"},"(003A,0020)":{tag:"(003A,0020)",vr:"SH",name:"MultiplexGroupLabel",vm:"1",version:"DICOM"},"(003A,0200)":{tag:"(003A,0200)",vr:"SQ",name:"ChannelDefinitionSequence",vm:"1",version:"DICOM"},"(003A,0202)":{tag:"(003A,0202)",vr:"IS",name:"WaveformChannelNumber",vm:"1",version:"DICOM"},"(003A,0203)":{tag:"(003A,0203)",vr:"SH",name:"ChannelLabel",vm:"1",version:"DICOM"},"(003A,0205)":{tag:"(003A,0205)",vr:"CS",name:"ChannelStatus",vm:"1-n",version:"DICOM"},"(003A,0208)":{tag:"(003A,0208)",vr:"SQ",name:"ChannelSourceSequence",vm:"1",version:"DICOM"},"(003A,0209)":{tag:"(003A,0209)",vr:"SQ",name:"ChannelSourceModifiersSequence",vm:"1",version:"DICOM"},"(003A,020A)":{tag:"(003A,020A)",vr:"SQ",name:"SourceWaveformSequence",vm:"1",version:"DICOM"},"(003A,020C)":{tag:"(003A,020C)",vr:"LO",name:"ChannelDerivationDescription",vm:"1",version:"DICOM"},"(003A,0210)":{tag:"(003A,0210)",vr:"DS",name:"ChannelSensitivity",vm:"1",version:"DICOM"},"(003A,0211)":{tag:"(003A,0211)",vr:"SQ",name:"ChannelSensitivityUnitsSequence",vm:"1",version:"DICOM"},"(003A,0212)":{tag:"(003A,0212)",vr:"DS",name:"ChannelSensitivityCorrectionFactor",vm:"1",version:"DICOM"},"(003A,0213)":{tag:"(003A,0213)",vr:"DS",name:"ChannelBaseline",vm:"1",version:"DICOM"},"(003A,0214)":{tag:"(003A,0214)",vr:"DS",name:"ChannelTimeSkew",vm:"1",version:"DICOM"},"(003A,0215)":{tag:"(003A,0215)",vr:"DS",name:"ChannelSampleSkew",vm:"1",version:"DICOM"},"(003A,0218)":{tag:"(003A,0218)",vr:"DS",name:"ChannelOffset",vm:"1",version:"DICOM"},"(003A,021A)":{tag:"(003A,021A)",vr:"US",name:"WaveformBitsStored",vm:"1",version:"DICOM"},"(003A,0220)":{tag:"(003A,0220)",vr:"DS",name:"FilterLowFrequency",vm:"1",version:"DICOM"},"(003A,0221)":{tag:"(003A,0221)",vr:"DS",name:"FilterHighFrequency",vm:"1",version:"DICOM"},"(003A,0222)":{tag:"(003A,0222)",vr:"DS",name:"NotchFilterFrequency",vm:"1",version:"DICOM"},"(003A,0223)":{tag:"(003A,0223)",vr:"DS",name:"NotchFilterBandwidth",vm:"1",version:"DICOM"},"(003A,0230)":{tag:"(003A,0230)",vr:"FL",name:"WaveformDataDisplayScale",vm:"1",version:"DICOM"},"(003A,0231)":{tag:"(003A,0231)",vr:"US",name:"WaveformDisplayBackgroundCIELabValue",vm:"3",version:"DICOM"},"(003A,0240)":{tag:"(003A,0240)",vr:"SQ",name:"WaveformPresentationGroupSequence",vm:"1",version:"DICOM"},"(003A,0241)":{tag:"(003A,0241)",vr:"US",name:"PresentationGroupNumber",vm:"1",version:"DICOM"},"(003A,0242)":{tag:"(003A,0242)",vr:"SQ",name:"ChannelDisplaySequence",vm:"1",version:"DICOM"},"(003A,0244)":{tag:"(003A,0244)",vr:"US",name:"ChannelRecommendedDisplayCIELabValue",vm:"3",version:"DICOM"},"(003A,0245)":{tag:"(003A,0245)",vr:"FL",name:"ChannelPosition",vm:"1",version:"DICOM"},"(003A,0246)":{tag:"(003A,0246)",vr:"CS",name:"DisplayShadingFlag",vm:"1",version:"DICOM"},"(003A,0247)":{tag:"(003A,0247)",vr:"FL",name:"FractionalChannelDisplayScale",vm:"1",version:"DICOM"},"(003A,0248)":{tag:"(003A,0248)",vr:"FL",name:"AbsoluteChannelDisplayScale",vm:"1",version:"DICOM"},"(003A,0300)":{tag:"(003A,0300)",vr:"SQ",name:"MultiplexedAudioChannelsDescriptionCodeSequence",vm:"1",version:"DICOM"},"(003A,0301)":{tag:"(003A,0301)",vr:"IS",name:"ChannelIdentificationCode",vm:"1",version:"DICOM"},"(003A,0302)":{tag:"(003A,0302)",vr:"CS",name:"ChannelMode",vm:"1",version:"DICOM"},"(0040,0001)":{tag:"(0040,0001)",vr:"AE",name:"ScheduledStationAETitle",vm:"1-n",version:"DICOM"},"(0040,0002)":{tag:"(0040,0002)",vr:"DA",name:"ScheduledProcedureStepStartDate",vm:"1",version:"DICOM"},"(0040,0003)":{tag:"(0040,0003)",vr:"TM",name:"ScheduledProcedureStepStartTime",vm:"1",version:"DICOM"},"(0040,0004)":{tag:"(0040,0004)",vr:"DA",name:"ScheduledProcedureStepEndDate",vm:"1",version:"DICOM"},"(0040,0005)":{tag:"(0040,0005)",vr:"TM",name:"ScheduledProcedureStepEndTime",vm:"1",version:"DICOM"},"(0040,0006)":{tag:"(0040,0006)",vr:"PN",name:"ScheduledPerformingPhysicianName",vm:"1",version:"DICOM"},"(0040,0007)":{tag:"(0040,0007)",vr:"LO",name:"ScheduledProcedureStepDescription",vm:"1",version:"DICOM"},"(0040,0008)":{tag:"(0040,0008)",vr:"SQ",name:"ScheduledProtocolCodeSequence",vm:"1",version:"DICOM"},"(0040,0009)":{tag:"(0040,0009)",vr:"SH",name:"ScheduledProcedureStepID",vm:"1",version:"DICOM"},"(0040,000A)":{tag:"(0040,000A)",vr:"SQ",name:"StageCodeSequence",vm:"1",version:"DICOM"},"(0040,000B)":{tag:"(0040,000B)",vr:"SQ",name:"ScheduledPerformingPhysicianIdentificationSequence",vm:"1",version:"DICOM"},"(0040,0010)":{tag:"(0040,0010)",vr:"SH",name:"ScheduledStationName",vm:"1-n",version:"DICOM"},"(0040,0011)":{tag:"(0040,0011)",vr:"SH",name:"ScheduledProcedureStepLocation",vm:"1",version:"DICOM"},"(0040,0012)":{tag:"(0040,0012)",vr:"LO",name:"PreMedication",vm:"1",version:"DICOM"},"(0040,0020)":{tag:"(0040,0020)",vr:"CS",name:"ScheduledProcedureStepStatus",vm:"1",version:"DICOM"},"(0040,0026)":{tag:"(0040,0026)",vr:"SQ",name:"OrderPlacerIdentifierSequence",vm:"1",version:"DICOM"},"(0040,0027)":{tag:"(0040,0027)",vr:"SQ",name:"OrderFillerIdentifierSequence",vm:"1",version:"DICOM"},"(0040,0031)":{tag:"(0040,0031)",vr:"UT",name:"LocalNamespaceEntityID",vm:"1",version:"DICOM"},"(0040,0032)":{tag:"(0040,0032)",vr:"UT",name:"UniversalEntityID",vm:"1",version:"DICOM"},"(0040,0033)":{tag:"(0040,0033)",vr:"CS",name:"UniversalEntityIDType",vm:"1",version:"DICOM"},"(0040,0035)":{tag:"(0040,0035)",vr:"CS",name:"IdentifierTypeCode",vm:"1",version:"DICOM"},"(0040,0036)":{tag:"(0040,0036)",vr:"SQ",name:"AssigningFacilitySequence",vm:"1",version:"DICOM"},"(0040,0039)":{tag:"(0040,0039)",vr:"SQ",name:"AssigningJurisdictionCodeSequence",vm:"1",version:"DICOM"},"(0040,003A)":{tag:"(0040,003A)",vr:"SQ",name:"AssigningAgencyOrDepartmentCodeSequence",vm:"1",version:"DICOM"},"(0040,0100)":{tag:"(0040,0100)",vr:"SQ",name:"ScheduledProcedureStepSequence",vm:"1",version:"DICOM"},"(0040,0220)":{tag:"(0040,0220)",vr:"SQ",name:"ReferencedNonImageCompositeSOPInstanceSequence",vm:"1",version:"DICOM"},"(0040,0241)":{tag:"(0040,0241)",vr:"AE",name:"PerformedStationAETitle",vm:"1",version:"DICOM"},"(0040,0242)":{tag:"(0040,0242)",vr:"SH",name:"PerformedStationName",vm:"1",version:"DICOM"},"(0040,0243)":{tag:"(0040,0243)",vr:"SH",name:"PerformedLocation",vm:"1",version:"DICOM"},"(0040,0244)":{tag:"(0040,0244)",vr:"DA",name:"PerformedProcedureStepStartDate",vm:"1",version:"DICOM"},"(0040,0245)":{tag:"(0040,0245)",vr:"TM",name:"PerformedProcedureStepStartTime",vm:"1",version:"DICOM"},"(0040,0250)":{tag:"(0040,0250)",vr:"DA",name:"PerformedProcedureStepEndDate",vm:"1",version:"DICOM"},"(0040,0251)":{tag:"(0040,0251)",vr:"TM",name:"PerformedProcedureStepEndTime",vm:"1",version:"DICOM"},"(0040,0252)":{tag:"(0040,0252)",vr:"CS",name:"PerformedProcedureStepStatus",vm:"1",version:"DICOM"},"(0040,0253)":{tag:"(0040,0253)",vr:"SH",name:"PerformedProcedureStepID",vm:"1",version:"DICOM"},"(0040,0254)":{tag:"(0040,0254)",vr:"LO",name:"PerformedProcedureStepDescription",vm:"1",version:"DICOM"},"(0040,0255)":{tag:"(0040,0255)",vr:"LO",name:"PerformedProcedureTypeDescription",vm:"1",version:"DICOM"},"(0040,0260)":{tag:"(0040,0260)",vr:"SQ",name:"PerformedProtocolCodeSequence",vm:"1",version:"DICOM"},"(0040,0261)":{tag:"(0040,0261)",vr:"CS",name:"PerformedProtocolType",vm:"1",version:"DICOM"},"(0040,0270)":{tag:"(0040,0270)",vr:"SQ",name:"ScheduledStepAttributesSequence",vm:"1",version:"DICOM"},"(0040,0275)":{tag:"(0040,0275)",vr:"SQ",name:"RequestAttributesSequence",vm:"1",version:"DICOM"},"(0040,0280)":{tag:"(0040,0280)",vr:"ST",name:"CommentsOnThePerformedProcedureStep",vm:"1",version:"DICOM"},"(0040,0281)":{tag:"(0040,0281)",vr:"SQ",name:"PerformedProcedureStepDiscontinuationReasonCodeSequence",vm:"1",version:"DICOM"},"(0040,0293)":{tag:"(0040,0293)",vr:"SQ",name:"QuantitySequence",vm:"1",version:"DICOM"},"(0040,0294)":{tag:"(0040,0294)",vr:"DS",name:"Quantity",vm:"1",version:"DICOM"},"(0040,0295)":{tag:"(0040,0295)",vr:"SQ",name:"MeasuringUnitsSequence",vm:"1",version:"DICOM"},"(0040,0296)":{tag:"(0040,0296)",vr:"SQ",name:"BillingItemSequence",vm:"1",version:"DICOM"},"(0040,0300)":{tag:"(0040,0300)",vr:"US",name:"TotalTimeOfFluoroscopy",vm:"1",version:"DICOM"},"(0040,0301)":{tag:"(0040,0301)",vr:"US",name:"TotalNumberOfExposures",vm:"1",version:"DICOM"},"(0040,0302)":{tag:"(0040,0302)",vr:"US",name:"EntranceDose",vm:"1",version:"DICOM"},"(0040,0303)":{tag:"(0040,0303)",vr:"US",name:"ExposedArea",vm:"1-2",version:"DICOM"},"(0040,0306)":{tag:"(0040,0306)",vr:"DS",name:"DistanceSourceToEntrance",vm:"1",version:"DICOM"},"(0040,030E)":{tag:"(0040,030E)",vr:"SQ",name:"ExposureDoseSequence",vm:"1",version:"DICOM"},"(0040,0310)":{tag:"(0040,0310)",vr:"ST",name:"CommentsOnRadiationDose",vm:"1",version:"DICOM"},"(0040,0312)":{tag:"(0040,0312)",vr:"DS",name:"XRayOutput",vm:"1",version:"DICOM"},"(0040,0314)":{tag:"(0040,0314)",vr:"DS",name:"HalfValueLayer",vm:"1",version:"DICOM"},"(0040,0316)":{tag:"(0040,0316)",vr:"DS",name:"OrganDose",vm:"1",version:"DICOM"},"(0040,0318)":{tag:"(0040,0318)",vr:"CS",name:"OrganExposed",vm:"1",version:"DICOM"},"(0040,0320)":{tag:"(0040,0320)",vr:"SQ",name:"BillingProcedureStepSequence",vm:"1",version:"DICOM"},"(0040,0321)":{tag:"(0040,0321)",vr:"SQ",name:"FilmConsumptionSequence",vm:"1",version:"DICOM"},"(0040,0324)":{tag:"(0040,0324)",vr:"SQ",name:"BillingSuppliesAndDevicesSequence",vm:"1",version:"DICOM"},"(0040,0340)":{tag:"(0040,0340)",vr:"SQ",name:"PerformedSeriesSequence",vm:"1",version:"DICOM"},"(0040,0400)":{tag:"(0040,0400)",vr:"LT",name:"CommentsOnTheScheduledProcedureStep",vm:"1",version:"DICOM"},"(0040,0440)":{tag:"(0040,0440)",vr:"SQ",name:"ProtocolContextSequence",vm:"1",version:"DICOM"},"(0040,0441)":{tag:"(0040,0441)",vr:"SQ",name:"ContentItemModifierSequence",vm:"1",version:"DICOM"},"(0040,0500)":{tag:"(0040,0500)",vr:"SQ",name:"ScheduledSpecimenSequence",vm:"1",version:"DICOM"},"(0040,0512)":{tag:"(0040,0512)",vr:"LO",name:"ContainerIdentifier",vm:"1",version:"DICOM"},"(0040,0513)":{tag:"(0040,0513)",vr:"SQ",name:"IssuerOfTheContainerIdentifierSequence",vm:"1",version:"DICOM"},"(0040,0515)":{tag:"(0040,0515)",vr:"SQ",name:"AlternateContainerIdentifierSequence",vm:"1",version:"DICOM"},"(0040,0518)":{tag:"(0040,0518)",vr:"SQ",name:"ContainerTypeCodeSequence",vm:"1",version:"DICOM"},"(0040,051A)":{tag:"(0040,051A)",vr:"LO",name:"ContainerDescription",vm:"1",version:"DICOM"},"(0040,0520)":{tag:"(0040,0520)",vr:"SQ",name:"ContainerComponentSequence",vm:"1",version:"DICOM"},"(0040,0551)":{tag:"(0040,0551)",vr:"LO",name:"SpecimenIdentifier",vm:"1",version:"DICOM"},"(0040,0554)":{tag:"(0040,0554)",vr:"UI",name:"SpecimenUID",vm:"1",version:"DICOM"},"(0040,0555)":{tag:"(0040,0555)",vr:"SQ",name:"AcquisitionContextSequence",vm:"1",version:"DICOM"},"(0040,0556)":{tag:"(0040,0556)",vr:"ST",name:"AcquisitionContextDescription",vm:"1",version:"DICOM"},"(0040,0560)":{tag:"(0040,0560)",vr:"SQ",name:"SpecimenDescriptionSequence",vm:"1",version:"DICOM"},"(0040,0562)":{tag:"(0040,0562)",vr:"SQ",name:"IssuerOfTheSpecimenIdentifierSequence",vm:"1",version:"DICOM"},"(0040,059A)":{tag:"(0040,059A)",vr:"SQ",name:"SpecimenTypeCodeSequence",vm:"1",version:"DICOM"},"(0040,0600)":{tag:"(0040,0600)",vr:"LO",name:"SpecimenShortDescription",vm:"1",version:"DICOM"},"(0040,0602)":{tag:"(0040,0602)",vr:"UT",name:"SpecimenDetailedDescription",vm:"1",version:"DICOM"},"(0040,0610)":{tag:"(0040,0610)",vr:"SQ",name:"SpecimenPreparationSequence",vm:"1",version:"DICOM"},"(0040,0612)":{tag:"(0040,0612)",vr:"SQ",name:"SpecimenPreparationStepContentItemSequence",vm:"1",version:"DICOM"},"(0040,0620)":{tag:"(0040,0620)",vr:"SQ",name:"SpecimenLocalizationContentItemSequence",vm:"1",version:"DICOM"},"(0040,071A)":{tag:"(0040,071A)",vr:"SQ",name:"ImageCenterPointCoordinatesSequence",vm:"1",version:"DICOM"},"(0040,072A)":{tag:"(0040,072A)",vr:"DS",name:"XOffsetInSlideCoordinateSystem",vm:"1",version:"DICOM"},"(0040,073A)":{tag:"(0040,073A)",vr:"DS",name:"YOffsetInSlideCoordinateSystem",vm:"1",version:"DICOM"},"(0040,074A)":{tag:"(0040,074A)",vr:"DS",name:"ZOffsetInSlideCoordinateSystem",vm:"1",version:"DICOM"},"(0040,08EA)":{tag:"(0040,08EA)",vr:"SQ",name:"MeasurementUnitsCodeSequence",vm:"1",version:"DICOM"},"(0040,1001)":{tag:"(0040,1001)",vr:"SH",name:"RequestedProcedureID",vm:"1",version:"DICOM"},"(0040,1002)":{tag:"(0040,1002)",vr:"LO",name:"ReasonForTheRequestedProcedure",vm:"1",version:"DICOM"},"(0040,1003)":{tag:"(0040,1003)",vr:"SH",name:"RequestedProcedurePriority",vm:"1",version:"DICOM"},"(0040,1004)":{tag:"(0040,1004)",vr:"LO",name:"PatientTransportArrangements",vm:"1",version:"DICOM"},"(0040,1005)":{tag:"(0040,1005)",vr:"LO",name:"RequestedProcedureLocation",vm:"1",version:"DICOM"},"(0040,1008)":{tag:"(0040,1008)",vr:"LO",name:"ConfidentialityCode",vm:"1",version:"DICOM"},"(0040,1009)":{tag:"(0040,1009)",vr:"SH",name:"ReportingPriority",vm:"1",version:"DICOM"},"(0040,100A)":{tag:"(0040,100A)",vr:"SQ",name:"ReasonForRequestedProcedureCodeSequence",vm:"1",version:"DICOM"},"(0040,1010)":{tag:"(0040,1010)",vr:"PN",name:"NamesOfIntendedRecipientsOfResults",vm:"1-n",version:"DICOM"},"(0040,1011)":{tag:"(0040,1011)",vr:"SQ",name:"IntendedRecipientsOfResultsIdentificationSequence",vm:"1",version:"DICOM"},"(0040,1012)":{tag:"(0040,1012)",vr:"SQ",name:"ReasonForPerformedProcedureCodeSequence",vm:"1",version:"DICOM"},"(0040,1101)":{tag:"(0040,1101)",vr:"SQ",name:"PersonIdentificationCodeSequence",vm:"1",version:"DICOM"},"(0040,1102)":{tag:"(0040,1102)",vr:"ST",name:"PersonAddress",vm:"1",version:"DICOM"},"(0040,1103)":{tag:"(0040,1103)",vr:"LO",name:"PersonTelephoneNumbers",vm:"1-n",version:"DICOM"},"(0040,1104)":{tag:"(0040,1104)",vr:"LT",name:"PersonTelecomInformation",vm:"1",version:"DICOM"},"(0040,1400)":{tag:"(0040,1400)",vr:"LT",name:"RequestedProcedureComments",vm:"1",version:"DICOM"},"(0040,2004)":{tag:"(0040,2004)",vr:"DA",name:"IssueDateOfImagingServiceRequest",vm:"1",version:"DICOM"},"(0040,2005)":{tag:"(0040,2005)",vr:"TM",name:"IssueTimeOfImagingServiceRequest",vm:"1",version:"DICOM"},"(0040,2008)":{tag:"(0040,2008)",vr:"PN",name:"OrderEnteredBy",vm:"1",version:"DICOM"},"(0040,2009)":{tag:"(0040,2009)",vr:"SH",name:"OrderEntererLocation",vm:"1",version:"DICOM"},"(0040,2010)":{tag:"(0040,2010)",vr:"SH",name:"OrderCallbackPhoneNumber",vm:"1",version:"DICOM"},"(0040,2011)":{tag:"(0040,2011)",vr:"LT",name:"OrderCallbackTelecomInformation",vm:"1",version:"DICOM"},"(0040,2016)":{tag:"(0040,2016)",vr:"LO",name:"PlacerOrderNumberImagingServiceRequest",vm:"1",version:"DICOM"},"(0040,2017)":{tag:"(0040,2017)",vr:"LO",name:"FillerOrderNumberImagingServiceRequest",vm:"1",version:"DICOM"},"(0040,2400)":{tag:"(0040,2400)",vr:"LT",name:"ImagingServiceRequestComments",vm:"1",version:"DICOM"},"(0040,3001)":{tag:"(0040,3001)",vr:"LO",name:"ConfidentialityConstraintOnPatientDataDescription",vm:"1",version:"DICOM"},"(0040,4005)":{tag:"(0040,4005)",vr:"DT",name:"ScheduledProcedureStepStartDateTime",vm:"1",version:"DICOM"},"(0040,4007)":{tag:"(0040,4007)",vr:"SQ",name:"PerformedProcessingApplicationsCodeSequence",vm:"1",version:"DICOM"},"(0040,4009)":{tag:"(0040,4009)",vr:"SQ",name:"HumanPerformerCodeSequence",vm:"1",version:"DICOM"},"(0040,4010)":{tag:"(0040,4010)",vr:"DT",name:"ScheduledProcedureStepModificationDateTime",vm:"1",version:"DICOM"},"(0040,4011)":{tag:"(0040,4011)",vr:"DT",name:"ExpectedCompletionDateTime",vm:"1",version:"DICOM"},"(0040,4018)":{tag:"(0040,4018)",vr:"SQ",name:"ScheduledWorkitemCodeSequence",vm:"1",version:"DICOM"},"(0040,4019)":{tag:"(0040,4019)",vr:"SQ",name:"PerformedWorkitemCodeSequence",vm:"1",version:"DICOM"},"(0040,4020)":{tag:"(0040,4020)",vr:"CS",name:"InputAvailabilityFlag",vm:"1",version:"DICOM"},"(0040,4021)":{tag:"(0040,4021)",vr:"SQ",name:"InputInformationSequence",vm:"1",version:"DICOM"},"(0040,4025)":{tag:"(0040,4025)",vr:"SQ",name:"ScheduledStationNameCodeSequence",vm:"1",version:"DICOM"},"(0040,4026)":{tag:"(0040,4026)",vr:"SQ",name:"ScheduledStationClassCodeSequence",vm:"1",version:"DICOM"},"(0040,4027)":{tag:"(0040,4027)",vr:"SQ",name:"ScheduledStationGeographicLocationCodeSequence",vm:"1",version:"DICOM"},"(0040,4028)":{tag:"(0040,4028)",vr:"SQ",name:"PerformedStationNameCodeSequence",vm:"1",version:"DICOM"},"(0040,4029)":{tag:"(0040,4029)",vr:"SQ",name:"PerformedStationClassCodeSequence",vm:"1",version:"DICOM"},"(0040,4030)":{tag:"(0040,4030)",vr:"SQ",name:"PerformedStationGeographicLocationCodeSequence",vm:"1",version:"DICOM"},"(0040,4033)":{tag:"(0040,4033)",vr:"SQ",name:"OutputInformationSequence",vm:"1",version:"DICOM"},"(0040,4034)":{tag:"(0040,4034)",vr:"SQ",name:"ScheduledHumanPerformersSequence",vm:"1",version:"DICOM"},"(0040,4035)":{tag:"(0040,4035)",vr:"SQ",name:"ActualHumanPerformersSequence",vm:"1",version:"DICOM"},"(0040,4036)":{tag:"(0040,4036)",vr:"LO",name:"HumanPerformerOrganization",vm:"1",version:"DICOM"},"(0040,4037)":{tag:"(0040,4037)",vr:"PN",name:"HumanPerformerName",vm:"1",version:"DICOM"},"(0040,4040)":{tag:"(0040,4040)",vr:"CS",name:"RawDataHandling",vm:"1",version:"DICOM"},"(0040,4041)":{tag:"(0040,4041)",vr:"CS",name:"InputReadinessState",vm:"1",version:"DICOM"},"(0040,4050)":{tag:"(0040,4050)",vr:"DT",name:"PerformedProcedureStepStartDateTime",vm:"1",version:"DICOM"},"(0040,4051)":{tag:"(0040,4051)",vr:"DT",name:"PerformedProcedureStepEndDateTime",vm:"1",version:"DICOM"},"(0040,4052)":{tag:"(0040,4052)",vr:"DT",name:"ProcedureStepCancellationDateTime",vm:"1",version:"DICOM"},"(0040,8302)":{tag:"(0040,8302)",vr:"DS",name:"EntranceDoseInmGy",vm:"1",version:"DICOM"},"(0040,9092)":{tag:"(0040,9092)",vr:"SQ",name:"ParametricMapFrameTypeSequence",vm:"1",version:"DICOM"},"(0040,9094)":{tag:"(0040,9094)",vr:"SQ",name:"ReferencedImageRealWorldValueMappingSequence",vm:"1",version:"DICOM"},"(0040,9096)":{tag:"(0040,9096)",vr:"SQ",name:"RealWorldValueMappingSequence",vm:"1",version:"DICOM"},"(0040,9098)":{tag:"(0040,9098)",vr:"SQ",name:"PixelValueMappingCodeSequence",vm:"1",version:"DICOM"},"(0040,9210)":{tag:"(0040,9210)",vr:"SH",name:"LUTLabel",vm:"1",version:"DICOM"},"(0040,9211)":{tag:"(0040,9211)",vr:"xs",name:"RealWorldValueLastValueMapped",vm:"1",version:"DICOM"},"(0040,9212)":{tag:"(0040,9212)",vr:"FD",name:"RealWorldValueLUTData",vm:"1-n",version:"DICOM"},"(0040,9216)":{tag:"(0040,9216)",vr:"xs",name:"RealWorldValueFirstValueMapped",vm:"1",version:"DICOM"},"(0040,9220)":{tag:"(0040,9220)",vr:"SQ",name:"QuantityDefinitionSequence",vm:"1",version:"DICOM"},"(0040,9224)":{tag:"(0040,9224)",vr:"FD",name:"RealWorldValueIntercept",vm:"1",version:"DICOM"},"(0040,9225)":{tag:"(0040,9225)",vr:"FD",name:"RealWorldValueSlope",vm:"1",version:"DICOM"},"(0040,A010)":{tag:"(0040,A010)",vr:"CS",name:"RelationshipType",vm:"1",version:"DICOM"},"(0040,A027)":{tag:"(0040,A027)",vr:"LO",name:"VerifyingOrganization",vm:"1",version:"DICOM"},"(0040,A030)":{tag:"(0040,A030)",vr:"DT",name:"VerificationDateTime",vm:"1",version:"DICOM"},"(0040,A032)":{tag:"(0040,A032)",vr:"DT",name:"ObservationDateTime",vm:"1",version:"DICOM"},"(0040,A040)":{tag:"(0040,A040)",vr:"CS",name:"ValueType",vm:"1",version:"DICOM"},"(0040,A043)":{tag:"(0040,A043)",vr:"SQ",name:"ConceptNameCodeSequence",vm:"1",version:"DICOM"},"(0040,A050)":{tag:"(0040,A050)",vr:"CS",name:"ContinuityOfContent",vm:"1",version:"DICOM"},"(0040,A073)":{tag:"(0040,A073)",vr:"SQ",name:"VerifyingObserverSequence",vm:"1",version:"DICOM"},"(0040,A075)":{tag:"(0040,A075)",vr:"PN",name:"VerifyingObserverName",vm:"1",version:"DICOM"},"(0040,A078)":{tag:"(0040,A078)",vr:"SQ",name:"AuthorObserverSequence",vm:"1",version:"DICOM"},"(0040,A07A)":{tag:"(0040,A07A)",vr:"SQ",name:"ParticipantSequence",vm:"1",version:"DICOM"},"(0040,A07C)":{tag:"(0040,A07C)",vr:"SQ",name:"CustodialOrganizationSequence",vm:"1",version:"DICOM"},"(0040,A080)":{tag:"(0040,A080)",vr:"CS",name:"ParticipationType",vm:"1",version:"DICOM"},"(0040,A082)":{tag:"(0040,A082)",vr:"DT",name:"ParticipationDateTime",vm:"1",version:"DICOM"},"(0040,A084)":{tag:"(0040,A084)",vr:"CS",name:"ObserverType",vm:"1",version:"DICOM"},"(0040,A088)":{tag:"(0040,A088)",vr:"SQ",name:"VerifyingObserverIdentificationCodeSequence",vm:"1",version:"DICOM"},"(0040,A0B0)":{tag:"(0040,A0B0)",vr:"US",name:"ReferencedWaveformChannels",vm:"2-2n",version:"DICOM"},"(0040,A120)":{tag:"(0040,A120)",vr:"DT",name:"DateTime",vm:"1",version:"DICOM"},"(0040,A121)":{tag:"(0040,A121)",vr:"DA",name:"Date",vm:"1",version:"DICOM"},"(0040,A122)":{tag:"(0040,A122)",vr:"TM",name:"Time",vm:"1",version:"DICOM"},"(0040,A123)":{tag:"(0040,A123)",vr:"PN",name:"PersonName",vm:"1",version:"DICOM"},"(0040,A124)":{tag:"(0040,A124)",vr:"UI",name:"UID",vm:"1",version:"DICOM"},"(0040,A130)":{tag:"(0040,A130)",vr:"CS",name:"TemporalRangeType",vm:"1",version:"DICOM"},"(0040,A132)":{tag:"(0040,A132)",vr:"UL",name:"ReferencedSamplePositions",vm:"1-n",version:"DICOM"},"(0040,A136)":{tag:"(0040,A136)",vr:"US",name:"ReferencedFrameNumbers",vm:"1-n",version:"DICOM"},"(0040,A138)":{tag:"(0040,A138)",vr:"DS",name:"ReferencedTimeOffsets",vm:"1-n",version:"DICOM"},"(0040,A13A)":{tag:"(0040,A13A)",vr:"DT",name:"ReferencedDateTime",vm:"1-n",version:"DICOM"},"(0040,A160)":{tag:"(0040,A160)",vr:"UT",name:"TextValue",vm:"1",version:"DICOM"},"(0040,A161)":{tag:"(0040,A161)",vr:"FD",name:"FloatingPointValue",vm:"1-n",version:"DICOM"},"(0040,A162)":{tag:"(0040,A162)",vr:"SL",name:"RationalNumeratorValue",vm:"1-n",version:"DICOM"},"(0040,A163)":{tag:"(0040,A163)",vr:"UL",name:"RationalDenominatorValue",vm:"1-n",version:"DICOM"},"(0040,A168)":{tag:"(0040,A168)",vr:"SQ",name:"ConceptCodeSequence",vm:"1",version:"DICOM"},"(0040,A170)":{tag:"(0040,A170)",vr:"SQ",name:"PurposeOfReferenceCodeSequence",vm:"1",version:"DICOM"},"(0040,A171)":{tag:"(0040,A171)",vr:"UI",name:"ObservationUID",vm:"1",version:"DICOM"},"(0040,A180)":{tag:"(0040,A180)",vr:"US",name:"AnnotationGroupNumber",vm:"1",version:"DICOM"},"(0040,A195)":{tag:"(0040,A195)",vr:"SQ",name:"ModifierCodeSequence",vm:"1",version:"DICOM"},"(0040,A300)":{tag:"(0040,A300)",vr:"SQ",name:"MeasuredValueSequence",vm:"1",version:"DICOM"},"(0040,A301)":{tag:"(0040,A301)",vr:"SQ",name:"NumericValueQualifierCodeSequence",vm:"1",version:"DICOM"},"(0040,A30A)":{tag:"(0040,A30A)",vr:"DS",name:"NumericValue",vm:"1-n",version:"DICOM"},"(0040,A360)":{tag:"(0040,A360)",vr:"SQ",name:"PredecessorDocumentsSequence",vm:"1",version:"DICOM"},"(0040,A370)":{tag:"(0040,A370)",vr:"SQ",name:"ReferencedRequestSequence",vm:"1",version:"DICOM"},"(0040,A372)":{tag:"(0040,A372)",vr:"SQ",name:"PerformedProcedureCodeSequence",vm:"1",version:"DICOM"},"(0040,A375)":{tag:"(0040,A375)",vr:"SQ",name:"CurrentRequestedProcedureEvidenceSequence",vm:"1",version:"DICOM"},"(0040,A385)":{tag:"(0040,A385)",vr:"SQ",name:"PertinentOtherEvidenceSequence",vm:"1",version:"DICOM"},"(0040,A390)":{tag:"(0040,A390)",vr:"SQ",name:"HL7StructuredDocumentReferenceSequence",vm:"1",version:"DICOM"},"(0040,A491)":{tag:"(0040,A491)",vr:"CS",name:"CompletionFlag",vm:"1",version:"DICOM"},"(0040,A492)":{tag:"(0040,A492)",vr:"LO",name:"CompletionFlagDescription",vm:"1",version:"DICOM"},"(0040,A493)":{tag:"(0040,A493)",vr:"CS",name:"VerificationFlag",vm:"1",version:"DICOM"},"(0040,A494)":{tag:"(0040,A494)",vr:"CS",name:"ArchiveRequested",vm:"1",version:"DICOM"},"(0040,A496)":{tag:"(0040,A496)",vr:"CS",name:"PreliminaryFlag",vm:"1",version:"DICOM"},"(0040,A504)":{tag:"(0040,A504)",vr:"SQ",name:"ContentTemplateSequence",vm:"1",version:"DICOM"},"(0040,A525)":{tag:"(0040,A525)",vr:"SQ",name:"IdenticalDocumentsSequence",vm:"1",version:"DICOM"},"(0040,A730)":{tag:"(0040,A730)",vr:"SQ",name:"ContentSequence",vm:"1",version:"DICOM"},"(0040,B020)":{tag:"(0040,B020)",vr:"SQ",name:"WaveformAnnotationSequence",vm:"1",version:"DICOM"},"(0040,DB00)":{tag:"(0040,DB00)",vr:"CS",name:"TemplateIdentifier",vm:"1",version:"DICOM"},"(0040,DB73)":{tag:"(0040,DB73)",vr:"UL",name:"ReferencedContentItemIdentifier",vm:"1-n",version:"DICOM"},"(0040,E001)":{tag:"(0040,E001)",vr:"ST",name:"HL7InstanceIdentifier",vm:"1",version:"DICOM"},"(0040,E004)":{tag:"(0040,E004)",vr:"DT",name:"HL7DocumentEffectiveTime",vm:"1",version:"DICOM"},"(0040,E006)":{tag:"(0040,E006)",vr:"SQ",name:"HL7DocumentTypeCodeSequence",vm:"1",version:"DICOM"},"(0040,E008)":{tag:"(0040,E008)",vr:"SQ",name:"DocumentClassCodeSequence",vm:"1",version:"DICOM"},"(0040,E010)":{tag:"(0040,E010)",vr:"UR",name:"RetrieveURI",vm:"1",version:"DICOM"},"(0040,E011)":{tag:"(0040,E011)",vr:"UI",name:"RetrieveLocationUID",vm:"1",version:"DICOM"},"(0040,E020)":{tag:"(0040,E020)",vr:"CS",name:"TypeOfInstances",vm:"1",version:"DICOM"},"(0040,E021)":{tag:"(0040,E021)",vr:"SQ",name:"DICOMRetrievalSequence",vm:"1",version:"DICOM"},"(0040,E022)":{tag:"(0040,E022)",vr:"SQ",name:"DICOMMediaRetrievalSequence",vm:"1",version:"DICOM"},"(0040,E023)":{tag:"(0040,E023)",vr:"SQ",name:"WADORetrievalSequence",vm:"1",version:"DICOM"},"(0040,E024)":{tag:"(0040,E024)",vr:"SQ",name:"XDSRetrievalSequence",vm:"1",version:"DICOM"},"(0040,E025)":{tag:"(0040,E025)",vr:"SQ",name:"WADORSRetrievalSequence",vm:"1",version:"DICOM"},"(0040,E030)":{tag:"(0040,E030)",vr:"UI",name:"RepositoryUniqueID",vm:"1",version:"DICOM"},"(0040,E031)":{tag:"(0040,E031)",vr:"UI",name:"HomeCommunityID",vm:"1",version:"DICOM"},"(0042,0010)":{tag:"(0042,0010)",vr:"ST",name:"DocumentTitle",vm:"1",version:"DICOM"},"(0042,0011)":{tag:"(0042,0011)",vr:"OB",name:"EncapsulatedDocument",vm:"1",version:"DICOM"},"(0042,0012)":{tag:"(0042,0012)",vr:"LO",name:"MIMETypeOfEncapsulatedDocument",vm:"1",version:"DICOM"},"(0042,0013)":{tag:"(0042,0013)",vr:"SQ",name:"SourceInstanceSequence",vm:"1",version:"DICOM"},"(0042,0014)":{tag:"(0042,0014)",vr:"LO",name:"ListOfMIMETypes",vm:"1-n",version:"DICOM"},"(0044,0001)":{tag:"(0044,0001)",vr:"ST",name:"ProductPackageIdentifier",vm:"1",version:"DICOM"},"(0044,0002)":{tag:"(0044,0002)",vr:"CS",name:"SubstanceAdministrationApproval",vm:"1",version:"DICOM"},"(0044,0003)":{tag:"(0044,0003)",vr:"LT",name:"ApprovalStatusFurtherDescription",vm:"1",version:"DICOM"},"(0044,0004)":{tag:"(0044,0004)",vr:"DT",name:"ApprovalStatusDateTime",vm:"1",version:"DICOM"},"(0044,0007)":{tag:"(0044,0007)",vr:"SQ",name:"ProductTypeCodeSequence",vm:"1",version:"DICOM"},"(0044,0008)":{tag:"(0044,0008)",vr:"LO",name:"ProductName",vm:"1-n",version:"DICOM"},"(0044,0009)":{tag:"(0044,0009)",vr:"LT",name:"ProductDescription",vm:"1",version:"DICOM"},"(0044,000A)":{tag:"(0044,000A)",vr:"LO",name:"ProductLotIdentifier",vm:"1",version:"DICOM"},"(0044,000B)":{tag:"(0044,000B)",vr:"DT",name:"ProductExpirationDateTime",vm:"1",version:"DICOM"},"(0044,0010)":{tag:"(0044,0010)",vr:"DT",name:"SubstanceAdministrationDateTime",vm:"1",version:"DICOM"},"(0044,0011)":{tag:"(0044,0011)",vr:"LO",name:"SubstanceAdministrationNotes",vm:"1",version:"DICOM"},"(0044,0012)":{tag:"(0044,0012)",vr:"LO",name:"SubstanceAdministrationDeviceID",vm:"1",version:"DICOM"},"(0044,0013)":{tag:"(0044,0013)",vr:"SQ",name:"ProductParameterSequence",vm:"1",version:"DICOM"},"(0044,0019)":{tag:"(0044,0019)",vr:"SQ",name:"SubstanceAdministrationParameterSequence",vm:"1",version:"DICOM"},"(0046,0012)":{tag:"(0046,0012)",vr:"LO",name:"LensDescription",vm:"1",version:"DICOM"},"(0046,0014)":{tag:"(0046,0014)",vr:"SQ",name:"RightLensSequence",vm:"1",version:"DICOM"},"(0046,0015)":{tag:"(0046,0015)",vr:"SQ",name:"LeftLensSequence",vm:"1",version:"DICOM"},"(0046,0016)":{tag:"(0046,0016)",vr:"SQ",name:"UnspecifiedLateralityLensSequence",vm:"1",version:"DICOM"},"(0046,0018)":{tag:"(0046,0018)",vr:"SQ",name:"CylinderSequence",vm:"1",version:"DICOM"},"(0046,0028)":{tag:"(0046,0028)",vr:"SQ",name:"PrismSequence",vm:"1",version:"DICOM"},"(0046,0030)":{tag:"(0046,0030)",vr:"FD",name:"HorizontalPrismPower",vm:"1",version:"DICOM"},"(0046,0032)":{tag:"(0046,0032)",vr:"CS",name:"HorizontalPrismBase",vm:"1",version:"DICOM"},"(0046,0034)":{tag:"(0046,0034)",vr:"FD",name:"VerticalPrismPower",vm:"1",version:"DICOM"},"(0046,0036)":{tag:"(0046,0036)",vr:"CS",name:"VerticalPrismBase",vm:"1",version:"DICOM"},"(0046,0038)":{tag:"(0046,0038)",vr:"CS",name:"LensSegmentType",vm:"1",version:"DICOM"},"(0046,0040)":{tag:"(0046,0040)",vr:"FD",name:"OpticalTransmittance",vm:"1",version:"DICOM"},"(0046,0042)":{tag:"(0046,0042)",vr:"FD",name:"ChannelWidth",vm:"1",version:"DICOM"},"(0046,0044)":{tag:"(0046,0044)",vr:"FD",name:"PupilSize",vm:"1",version:"DICOM"},"(0046,0046)":{tag:"(0046,0046)",vr:"FD",name:"CornealSize",vm:"1",version:"DICOM"},"(0046,0050)":{tag:"(0046,0050)",vr:"SQ",name:"AutorefractionRightEyeSequence",vm:"1",version:"DICOM"},"(0046,0052)":{tag:"(0046,0052)",vr:"SQ",name:"AutorefractionLeftEyeSequence",vm:"1",version:"DICOM"},"(0046,0060)":{tag:"(0046,0060)",vr:"FD",name:"DistancePupillaryDistance",vm:"1",version:"DICOM"},"(0046,0062)":{tag:"(0046,0062)",vr:"FD",name:"NearPupillaryDistance",vm:"1",version:"DICOM"},"(0046,0063)":{tag:"(0046,0063)",vr:"FD",name:"IntermediatePupillaryDistance",vm:"1",version:"DICOM"},"(0046,0064)":{tag:"(0046,0064)",vr:"FD",name:"OtherPupillaryDistance",vm:"1",version:"DICOM"},"(0046,0070)":{tag:"(0046,0070)",vr:"SQ",name:"KeratometryRightEyeSequence",vm:"1",version:"DICOM"},"(0046,0071)":{tag:"(0046,0071)",vr:"SQ",name:"KeratometryLeftEyeSequence",vm:"1",version:"DICOM"},"(0046,0074)":{tag:"(0046,0074)",vr:"SQ",name:"SteepKeratometricAxisSequence",vm:"1",version:"DICOM"},"(0046,0075)":{tag:"(0046,0075)",vr:"FD",name:"RadiusOfCurvature",vm:"1",version:"DICOM"},"(0046,0076)":{tag:"(0046,0076)",vr:"FD",name:"KeratometricPower",vm:"1",version:"DICOM"},"(0046,0077)":{tag:"(0046,0077)",vr:"FD",name:"KeratometricAxis",vm:"1",version:"DICOM"},"(0046,0080)":{tag:"(0046,0080)",vr:"SQ",name:"FlatKeratometricAxisSequence",vm:"1",version:"DICOM"},"(0046,0092)":{tag:"(0046,0092)",vr:"CS",name:"BackgroundColor",vm:"1",version:"DICOM"},"(0046,0094)":{tag:"(0046,0094)",vr:"CS",name:"Optotype",vm:"1",version:"DICOM"},"(0046,0095)":{tag:"(0046,0095)",vr:"CS",name:"OptotypePresentation",vm:"1",version:"DICOM"},"(0046,0097)":{tag:"(0046,0097)",vr:"SQ",name:"SubjectiveRefractionRightEyeSequence",vm:"1",version:"DICOM"},"(0046,0098)":{tag:"(0046,0098)",vr:"SQ",name:"SubjectiveRefractionLeftEyeSequence",vm:"1",version:"DICOM"},"(0046,0100)":{tag:"(0046,0100)",vr:"SQ",name:"AddNearSequence",vm:"1",version:"DICOM"},"(0046,0101)":{tag:"(0046,0101)",vr:"SQ",name:"AddIntermediateSequence",vm:"1",version:"DICOM"},"(0046,0102)":{tag:"(0046,0102)",vr:"SQ",name:"AddOtherSequence",vm:"1",version:"DICOM"},"(0046,0104)":{tag:"(0046,0104)",vr:"FD",name:"AddPower",vm:"1",version:"DICOM"},"(0046,0106)":{tag:"(0046,0106)",vr:"FD",name:"ViewingDistance",vm:"1",version:"DICOM"},"(0046,0121)":{tag:"(0046,0121)",vr:"SQ",name:"VisualAcuityTypeCodeSequence",vm:"1",version:"DICOM"},"(0046,0122)":{tag:"(0046,0122)",vr:"SQ",name:"VisualAcuityRightEyeSequence",vm:"1",version:"DICOM"},"(0046,0123)":{tag:"(0046,0123)",vr:"SQ",name:"VisualAcuityLeftEyeSequence",vm:"1",version:"DICOM"},"(0046,0124)":{tag:"(0046,0124)",vr:"SQ",name:"VisualAcuityBothEyesOpenSequence",vm:"1",version:"DICOM"},"(0046,0125)":{tag:"(0046,0125)",vr:"CS",name:"ViewingDistanceType",vm:"1",version:"DICOM"},"(0046,0135)":{tag:"(0046,0135)",vr:"SS",name:"VisualAcuityModifiers",vm:"2",version:"DICOM"},"(0046,0137)":{tag:"(0046,0137)",vr:"FD",name:"DecimalVisualAcuity",vm:"1",version:"DICOM"},"(0046,0139)":{tag:"(0046,0139)",vr:"LO",name:"OptotypeDetailedDefinition",vm:"1",version:"DICOM"},"(0046,0145)":{tag:"(0046,0145)",vr:"SQ",name:"ReferencedRefractiveMeasurementsSequence",vm:"1",version:"DICOM"},"(0046,0146)":{tag:"(0046,0146)",vr:"FD",name:"SpherePower",vm:"1",version:"DICOM"},"(0046,0147)":{tag:"(0046,0147)",vr:"FD",name:"CylinderPower",vm:"1",version:"DICOM"},"(0046,0201)":{tag:"(0046,0201)",vr:"CS",name:"CornealTopographySurface",vm:"1",version:"DICOM"},"(0046,0202)":{tag:"(0046,0202)",vr:"FL",name:"CornealVertexLocation",vm:"2",version:"DICOM"},"(0046,0203)":{tag:"(0046,0203)",vr:"FL",name:"PupilCentroidXCoordinate",vm:"1",version:"DICOM"},"(0046,0204)":{tag:"(0046,0204)",vr:"FL",name:"PupilCentroidYCoordinate",vm:"1",version:"DICOM"},"(0046,0205)":{tag:"(0046,0205)",vr:"FL",name:"EquivalentPupilRadius",vm:"1",version:"DICOM"},"(0046,0207)":{tag:"(0046,0207)",vr:"SQ",name:"CornealTopographyMapTypeCodeSequence",vm:"1",version:"DICOM"},"(0046,0208)":{tag:"(0046,0208)",vr:"IS",name:"VerticesOfTheOutlineOfPupil",vm:"2-2n",version:"DICOM"},"(0046,0210)":{tag:"(0046,0210)",vr:"SQ",name:"CornealTopographyMappingNormalsSequence",vm:"1",version:"DICOM"},"(0046,0211)":{tag:"(0046,0211)",vr:"SQ",name:"MaximumCornealCurvatureSequence",vm:"1",version:"DICOM"},"(0046,0212)":{tag:"(0046,0212)",vr:"FL",name:"MaximumCornealCurvature",vm:"1",version:"DICOM"},"(0046,0213)":{tag:"(0046,0213)",vr:"FL",name:"MaximumCornealCurvatureLocation",vm:"2",version:"DICOM"},"(0046,0215)":{tag:"(0046,0215)",vr:"SQ",name:"MinimumKeratometricSequence",vm:"1",version:"DICOM"},"(0046,0218)":{tag:"(0046,0218)",vr:"SQ",name:"SimulatedKeratometricCylinderSequence",vm:"1",version:"DICOM"},"(0046,0220)":{tag:"(0046,0220)",vr:"FL",name:"AverageCornealPower",vm:"1",version:"DICOM"},"(0046,0224)":{tag:"(0046,0224)",vr:"FL",name:"CornealISValue",vm:"1",version:"DICOM"},"(0046,0227)":{tag:"(0046,0227)",vr:"FL",name:"AnalyzedArea",vm:"1",version:"DICOM"},"(0046,0230)":{tag:"(0046,0230)",vr:"FL",name:"SurfaceRegularityIndex",vm:"1",version:"DICOM"},"(0046,0232)":{tag:"(0046,0232)",vr:"FL",name:"SurfaceAsymmetryIndex",vm:"1",version:"DICOM"},"(0046,0234)":{tag:"(0046,0234)",vr:"FL",name:"CornealEccentricityIndex",vm:"1",version:"DICOM"},"(0046,0236)":{tag:"(0046,0236)",vr:"FL",name:"KeratoconusPredictionIndex",vm:"1",version:"DICOM"},"(0046,0238)":{tag:"(0046,0238)",vr:"FL",name:"DecimalPotentialVisualAcuity",vm:"1",version:"DICOM"},"(0046,0242)":{tag:"(0046,0242)",vr:"CS",name:"CornealTopographyMapQualityEvaluation",vm:"1",version:"DICOM"},"(0046,0244)":{tag:"(0046,0244)",vr:"SQ",name:"SourceImageCornealProcessedDataSequence",vm:"1",version:"DICOM"},"(0046,0247)":{tag:"(0046,0247)",vr:"FL",name:"CornealPointLocation",vm:"3",version:"DICOM"},"(0046,0248)":{tag:"(0046,0248)",vr:"CS",name:"CornealPointEstimated",vm:"1",version:"DICOM"},"(0046,0249)":{tag:"(0046,0249)",vr:"FL",name:"AxialPower",vm:"1",version:"DICOM"},"(0046,0250)":{tag:"(0046,0250)",vr:"FL",name:"TangentialPower",vm:"1",version:"DICOM"},"(0046,0251)":{tag:"(0046,0251)",vr:"FL",name:"RefractivePower",vm:"1",version:"DICOM"},"(0046,0252)":{tag:"(0046,0252)",vr:"FL",name:"RelativeElevation",vm:"1",version:"DICOM"},"(0046,0253)":{tag:"(0046,0253)",vr:"FL",name:"CornealWavefront",vm:"1",version:"DICOM"},"(0048,0001)":{tag:"(0048,0001)",vr:"FL",name:"ImagedVolumeWidth",vm:"1",version:"DICOM"},"(0048,0002)":{tag:"(0048,0002)",vr:"FL",name:"ImagedVolumeHeight",vm:"1",version:"DICOM"},"(0048,0003)":{tag:"(0048,0003)",vr:"FL",name:"ImagedVolumeDepth",vm:"1",version:"DICOM"},"(0048,0006)":{tag:"(0048,0006)",vr:"UL",name:"TotalPixelMatrixColumns",vm:"1",version:"DICOM"},"(0048,0007)":{tag:"(0048,0007)",vr:"UL",name:"TotalPixelMatrixRows",vm:"1",version:"DICOM"},"(0048,0008)":{tag:"(0048,0008)",vr:"SQ",name:"TotalPixelMatrixOriginSequence",vm:"1",version:"DICOM"},"(0048,0010)":{tag:"(0048,0010)",vr:"CS",name:"SpecimenLabelInImage",vm:"1",version:"DICOM"},"(0048,0011)":{tag:"(0048,0011)",vr:"CS",name:"FocusMethod",vm:"1",version:"DICOM"},"(0048,0012)":{tag:"(0048,0012)",vr:"CS",name:"ExtendedDepthOfField",vm:"1",version:"DICOM"},"(0048,0013)":{tag:"(0048,0013)",vr:"US",name:"NumberOfFocalPlanes",vm:"1",version:"DICOM"},"(0048,0014)":{tag:"(0048,0014)",vr:"FL",name:"DistanceBetweenFocalPlanes",vm:"1",version:"DICOM"},"(0048,0015)":{tag:"(0048,0015)",vr:"US",name:"RecommendedAbsentPixelCIELabValue",vm:"3",version:"DICOM"},"(0048,0100)":{tag:"(0048,0100)",vr:"SQ",name:"IlluminatorTypeCodeSequence",vm:"1",version:"DICOM"},"(0048,0102)":{tag:"(0048,0102)",vr:"DS",name:"ImageOrientationSlide",vm:"6",version:"DICOM"},"(0048,0105)":{tag:"(0048,0105)",vr:"SQ",name:"OpticalPathSequence",vm:"1",version:"DICOM"},"(0048,0106)":{tag:"(0048,0106)",vr:"SH",name:"OpticalPathIdentifier",vm:"1",version:"DICOM"},"(0048,0107)":{tag:"(0048,0107)",vr:"ST",name:"OpticalPathDescription",vm:"1",version:"DICOM"},"(0048,0108)":{tag:"(0048,0108)",vr:"SQ",name:"IlluminationColorCodeSequence",vm:"1",version:"DICOM"},"(0048,0110)":{tag:"(0048,0110)",vr:"SQ",name:"SpecimenReferenceSequence",vm:"1",version:"DICOM"},"(0048,0111)":{tag:"(0048,0111)",vr:"DS",name:"CondenserLensPower",vm:"1",version:"DICOM"},"(0048,0112)":{tag:"(0048,0112)",vr:"DS",name:"ObjectiveLensPower",vm:"1",version:"DICOM"},"(0048,0113)":{tag:"(0048,0113)",vr:"DS",name:"ObjectiveLensNumericalAperture",vm:"1",version:"DICOM"},"(0048,0120)":{tag:"(0048,0120)",vr:"SQ",name:"PaletteColorLookupTableSequence",vm:"1",version:"DICOM"},"(0048,0200)":{tag:"(0048,0200)",vr:"SQ",name:"ReferencedImageNavigationSequence",vm:"1",version:"DICOM"},"(0048,0201)":{tag:"(0048,0201)",vr:"US",name:"TopLeftHandCornerOfLocalizerArea",vm:"2",version:"DICOM"},"(0048,0202)":{tag:"(0048,0202)",vr:"US",name:"BottomRightHandCornerOfLocalizerArea",vm:"2",version:"DICOM"},"(0048,0207)":{tag:"(0048,0207)",vr:"SQ",name:"OpticalPathIdentificationSequence",vm:"1",version:"DICOM"},"(0048,021A)":{tag:"(0048,021A)",vr:"SQ",name:"PlanePositionSlideSequence",vm:"1",version:"DICOM"},"(0048,021E)":{tag:"(0048,021E)",vr:"SL",name:"ColumnPositionInTotalImagePixelMatrix",vm:"1",version:"DICOM"},"(0048,021F)":{tag:"(0048,021F)",vr:"SL",name:"RowPositionInTotalImagePixelMatrix",vm:"1",version:"DICOM"},"(0048,0301)":{tag:"(0048,0301)",vr:"CS",name:"PixelOriginInterpretation",vm:"1",version:"DICOM"},"(0050,0004)":{tag:"(0050,0004)",vr:"CS",name:"CalibrationImage",vm:"1",version:"DICOM"},"(0050,0010)":{tag:"(0050,0010)",vr:"SQ",name:"DeviceSequence",vm:"1",version:"DICOM"},"(0050,0012)":{tag:"(0050,0012)",vr:"SQ",name:"ContainerComponentTypeCodeSequence",vm:"1",version:"DICOM"},"(0050,0013)":{tag:"(0050,0013)",vr:"FD",name:"ContainerComponentThickness",vm:"1",version:"DICOM"},"(0050,0014)":{tag:"(0050,0014)",vr:"DS",name:"DeviceLength",vm:"1",version:"DICOM"},"(0050,0015)":{tag:"(0050,0015)",vr:"FD",name:"ContainerComponentWidth",vm:"1",version:"DICOM"},"(0050,0016)":{tag:"(0050,0016)",vr:"DS",name:"DeviceDiameter",vm:"1",version:"DICOM"},"(0050,0017)":{tag:"(0050,0017)",vr:"CS",name:"DeviceDiameterUnits",vm:"1",version:"DICOM"},"(0050,0018)":{tag:"(0050,0018)",vr:"DS",name:"DeviceVolume",vm:"1",version:"DICOM"},"(0050,0019)":{tag:"(0050,0019)",vr:"DS",name:"InterMarkerDistance",vm:"1",version:"DICOM"},"(0050,001A)":{tag:"(0050,001A)",vr:"CS",name:"ContainerComponentMaterial",vm:"1",version:"DICOM"},"(0050,001B)":{tag:"(0050,001B)",vr:"LO",name:"ContainerComponentID",vm:"1",version:"DICOM"},"(0050,001C)":{tag:"(0050,001C)",vr:"FD",name:"ContainerComponentLength",vm:"1",version:"DICOM"},"(0050,001D)":{tag:"(0050,001D)",vr:"FD",name:"ContainerComponentDiameter",vm:"1",version:"DICOM"},"(0050,001E)":{tag:"(0050,001E)",vr:"LO",name:"ContainerComponentDescription",vm:"1",version:"DICOM"},"(0050,0020)":{tag:"(0050,0020)",vr:"LO",name:"DeviceDescription",vm:"1",version:"DICOM"},"(0052,0001)":{tag:"(0052,0001)",vr:"FL",name:"ContrastBolusIngredientPercentByVolume",vm:"1",version:"DICOM"},"(0052,0002)":{tag:"(0052,0002)",vr:"FD",name:"OCTFocalDistance",vm:"1",version:"DICOM"},"(0052,0003)":{tag:"(0052,0003)",vr:"FD",name:"BeamSpotSize",vm:"1",version:"DICOM"},"(0052,0004)":{tag:"(0052,0004)",vr:"FD",name:"EffectiveRefractiveIndex",vm:"1",version:"DICOM"},"(0052,0006)":{tag:"(0052,0006)",vr:"CS",name:"OCTAcquisitionDomain",vm:"1",version:"DICOM"},"(0052,0007)":{tag:"(0052,0007)",vr:"FD",name:"OCTOpticalCenterWavelength",vm:"1",version:"DICOM"},"(0052,0008)":{tag:"(0052,0008)",vr:"FD",name:"AxialResolution",vm:"1",version:"DICOM"},"(0052,0009)":{tag:"(0052,0009)",vr:"FD",name:"RangingDepth",vm:"1",version:"DICOM"},"(0052,0011)":{tag:"(0052,0011)",vr:"FD",name:"ALineRate",vm:"1",version:"DICOM"},"(0052,0012)":{tag:"(0052,0012)",vr:"US",name:"ALinesPerFrame",vm:"1",version:"DICOM"},"(0052,0013)":{tag:"(0052,0013)",vr:"FD",name:"CatheterRotationalRate",vm:"1",version:"DICOM"},"(0052,0014)":{tag:"(0052,0014)",vr:"FD",name:"ALinePixelSpacing",vm:"1",version:"DICOM"},"(0052,0016)":{tag:"(0052,0016)",vr:"SQ",name:"ModeOfPercutaneousAccessSequence",vm:"1",version:"DICOM"},"(0052,0025)":{tag:"(0052,0025)",vr:"SQ",name:"IntravascularOCTFrameTypeSequence",vm:"1",version:"DICOM"},"(0052,0026)":{tag:"(0052,0026)",vr:"CS",name:"OCTZOffsetApplied",vm:"1",version:"DICOM"},"(0052,0027)":{tag:"(0052,0027)",vr:"SQ",name:"IntravascularFrameContentSequence",vm:"1",version:"DICOM"},"(0052,0028)":{tag:"(0052,0028)",vr:"FD",name:"IntravascularLongitudinalDistance",vm:"1",version:"DICOM"},"(0052,0029)":{tag:"(0052,0029)",vr:"SQ",name:"IntravascularOCTFrameContentSequence",vm:"1",version:"DICOM"},"(0052,0030)":{tag:"(0052,0030)",vr:"SS",name:"OCTZOffsetCorrection",vm:"1",version:"DICOM"},"(0052,0031)":{tag:"(0052,0031)",vr:"CS",name:"CatheterDirectionOfRotation",vm:"1",version:"DICOM"},"(0052,0033)":{tag:"(0052,0033)",vr:"FD",name:"SeamLineLocation",vm:"1",version:"DICOM"},"(0052,0034)":{tag:"(0052,0034)",vr:"FD",name:"FirstALineLocation",vm:"1",version:"DICOM"},"(0052,0036)":{tag:"(0052,0036)",vr:"US",name:"SeamLineIndex",vm:"1",version:"DICOM"},"(0052,0038)":{tag:"(0052,0038)",vr:"US",name:"NumberOfPaddedALines",vm:"1",version:"DICOM"},"(0052,0039)":{tag:"(0052,0039)",vr:"CS",name:"InterpolationType",vm:"1",version:"DICOM"},"(0052,003A)":{tag:"(0052,003A)",vr:"CS",name:"RefractiveIndexApplied",vm:"1",version:"DICOM"},"(0054,0010)":{tag:"(0054,0010)",vr:"US",name:"EnergyWindowVector",vm:"1-n",version:"DICOM"},"(0054,0011)":{tag:"(0054,0011)",vr:"US",name:"NumberOfEnergyWindows",vm:"1",version:"DICOM"},"(0054,0012)":{tag:"(0054,0012)",vr:"SQ",name:"EnergyWindowInformationSequence",vm:"1",version:"DICOM"},"(0054,0013)":{tag:"(0054,0013)",vr:"SQ",name:"EnergyWindowRangeSequence",vm:"1",version:"DICOM"},"(0054,0014)":{tag:"(0054,0014)",vr:"DS",name:"EnergyWindowLowerLimit",vm:"1",version:"DICOM"},"(0054,0015)":{tag:"(0054,0015)",vr:"DS",name:"EnergyWindowUpperLimit",vm:"1",version:"DICOM"},"(0054,0016)":{tag:"(0054,0016)",vr:"SQ",name:"RadiopharmaceuticalInformationSequence",vm:"1",version:"DICOM"},"(0054,0017)":{tag:"(0054,0017)",vr:"IS",name:"ResidualSyringeCounts",vm:"1",version:"DICOM"},"(0054,0018)":{tag:"(0054,0018)",vr:"SH",name:"EnergyWindowName",vm:"1",version:"DICOM"},"(0054,0020)":{tag:"(0054,0020)",vr:"US",name:"DetectorVector",vm:"1-n",version:"DICOM"},"(0054,0021)":{tag:"(0054,0021)",vr:"US",name:"NumberOfDetectors",vm:"1",version:"DICOM"},"(0054,0022)":{tag:"(0054,0022)",vr:"SQ",name:"DetectorInformationSequence",vm:"1",version:"DICOM"},"(0054,0030)":{tag:"(0054,0030)",vr:"US",name:"PhaseVector",vm:"1-n",version:"DICOM"},"(0054,0031)":{tag:"(0054,0031)",vr:"US",name:"NumberOfPhases",vm:"1",version:"DICOM"},"(0054,0032)":{tag:"(0054,0032)",vr:"SQ",name:"PhaseInformationSequence",vm:"1",version:"DICOM"},"(0054,0033)":{tag:"(0054,0033)",vr:"US",name:"NumberOfFramesInPhase",vm:"1",version:"DICOM"},"(0054,0036)":{tag:"(0054,0036)",vr:"IS",name:"PhaseDelay",vm:"1",version:"DICOM"},"(0054,0038)":{tag:"(0054,0038)",vr:"IS",name:"PauseBetweenFrames",vm:"1",version:"DICOM"},"(0054,0039)":{tag:"(0054,0039)",vr:"CS",name:"PhaseDescription",vm:"1",version:"DICOM"},"(0054,0050)":{tag:"(0054,0050)",vr:"US",name:"RotationVector",vm:"1-n",version:"DICOM"},"(0054,0051)":{tag:"(0054,0051)",vr:"US",name:"NumberOfRotations",vm:"1",version:"DICOM"},"(0054,0052)":{tag:"(0054,0052)",vr:"SQ",name:"RotationInformationSequence",vm:"1",version:"DICOM"},"(0054,0053)":{tag:"(0054,0053)",vr:"US",name:"NumberOfFramesInRotation",vm:"1",version:"DICOM"},"(0054,0060)":{tag:"(0054,0060)",vr:"US",name:"RRIntervalVector",vm:"1-n",version:"DICOM"},"(0054,0061)":{tag:"(0054,0061)",vr:"US",name:"NumberOfRRIntervals",vm:"1",version:"DICOM"},"(0054,0062)":{tag:"(0054,0062)",vr:"SQ",name:"GatedInformationSequence",vm:"1",version:"DICOM"},"(0054,0063)":{tag:"(0054,0063)",vr:"SQ",name:"DataInformationSequence",vm:"1",version:"DICOM"},"(0054,0070)":{tag:"(0054,0070)",vr:"US",name:"TimeSlotVector",vm:"1-n",version:"DICOM"},"(0054,0071)":{tag:"(0054,0071)",vr:"US",name:"NumberOfTimeSlots",vm:"1",version:"DICOM"},"(0054,0072)":{tag:"(0054,0072)",vr:"SQ",name:"TimeSlotInformationSequence",vm:"1",version:"DICOM"},"(0054,0073)":{tag:"(0054,0073)",vr:"DS",name:"TimeSlotTime",vm:"1",version:"DICOM"},"(0054,0080)":{tag:"(0054,0080)",vr:"US",name:"SliceVector",vm:"1-n",version:"DICOM"},"(0054,0081)":{tag:"(0054,0081)",vr:"US",name:"NumberOfSlices",vm:"1",version:"DICOM"},"(0054,0090)":{tag:"(0054,0090)",vr:"US",name:"AngularViewVector",vm:"1-n",version:"DICOM"},"(0054,0100)":{tag:"(0054,0100)",vr:"US",name:"TimeSliceVector",vm:"1-n",version:"DICOM"},"(0054,0101)":{tag:"(0054,0101)",vr:"US",name:"NumberOfTimeSlices",vm:"1",version:"DICOM"},"(0054,0200)":{tag:"(0054,0200)",vr:"DS",name:"StartAngle",vm:"1",version:"DICOM"},"(0054,0202)":{tag:"(0054,0202)",vr:"CS",name:"TypeOfDetectorMotion",vm:"1",version:"DICOM"},"(0054,0210)":{tag:"(0054,0210)",vr:"IS",name:"TriggerVector",vm:"1-n",version:"DICOM"},"(0054,0211)":{tag:"(0054,0211)",vr:"US",name:"NumberOfTriggersInPhase",vm:"1",version:"DICOM"},"(0054,0220)":{tag:"(0054,0220)",vr:"SQ",name:"ViewCodeSequence",vm:"1",version:"DICOM"},"(0054,0222)":{tag:"(0054,0222)",vr:"SQ",name:"ViewModifierCodeSequence",vm:"1",version:"DICOM"},"(0054,0300)":{tag:"(0054,0300)",vr:"SQ",name:"RadionuclideCodeSequence",vm:"1",version:"DICOM"},"(0054,0302)":{tag:"(0054,0302)",vr:"SQ",name:"AdministrationRouteCodeSequence",vm:"1",version:"DICOM"},"(0054,0304)":{tag:"(0054,0304)",vr:"SQ",name:"RadiopharmaceuticalCodeSequence",vm:"1",version:"DICOM"},"(0054,0306)":{tag:"(0054,0306)",vr:"SQ",name:"CalibrationDataSequence",vm:"1",version:"DICOM"},"(0054,0308)":{tag:"(0054,0308)",vr:"US",name:"EnergyWindowNumber",vm:"1",version:"DICOM"},"(0054,0400)":{tag:"(0054,0400)",vr:"SH",name:"ImageID",vm:"1",version:"DICOM"},"(0054,0410)":{tag:"(0054,0410)",vr:"SQ",name:"PatientOrientationCodeSequence",vm:"1",version:"DICOM"},"(0054,0412)":{tag:"(0054,0412)",vr:"SQ",name:"PatientOrientationModifierCodeSequence",vm:"1",version:"DICOM"},"(0054,0414)":{tag:"(0054,0414)",vr:"SQ",name:"PatientGantryRelationshipCodeSequence",vm:"1",version:"DICOM"},"(0054,0500)":{tag:"(0054,0500)",vr:"CS",name:"SliceProgressionDirection",vm:"1",version:"DICOM"},"(0054,0501)":{tag:"(0054,0501)",vr:"CS",name:"ScanProgressionDirection",vm:"1",version:"DICOM"},"(0054,1000)":{tag:"(0054,1000)",vr:"CS",name:"SeriesType",vm:"2",version:"DICOM"},"(0054,1001)":{tag:"(0054,1001)",vr:"CS",name:"Units",vm:"1",version:"DICOM"},"(0054,1002)":{tag:"(0054,1002)",vr:"CS",name:"CountsSource",vm:"1",version:"DICOM"},"(0054,1004)":{tag:"(0054,1004)",vr:"CS",name:"ReprojectionMethod",vm:"1",version:"DICOM"},"(0054,1006)":{tag:"(0054,1006)",vr:"CS",name:"SUVType",vm:"1",version:"DICOM"},"(0054,1100)":{tag:"(0054,1100)",vr:"CS",name:"RandomsCorrectionMethod",vm:"1",version:"DICOM"},"(0054,1101)":{tag:"(0054,1101)",vr:"LO",name:"AttenuationCorrectionMethod",vm:"1",version:"DICOM"},"(0054,1102)":{tag:"(0054,1102)",vr:"CS",name:"DecayCorrection",vm:"1",version:"DICOM"},"(0054,1103)":{tag:"(0054,1103)",vr:"LO",name:"ReconstructionMethod",vm:"1",version:"DICOM"},"(0054,1104)":{tag:"(0054,1104)",vr:"LO",name:"DetectorLinesOfResponseUsed",vm:"1",version:"DICOM"},"(0054,1105)":{tag:"(0054,1105)",vr:"LO",name:"ScatterCorrectionMethod",vm:"1",version:"DICOM"},"(0054,1200)":{tag:"(0054,1200)",vr:"DS",name:"AxialAcceptance",vm:"1",version:"DICOM"},"(0054,1201)":{tag:"(0054,1201)",vr:"IS",name:"AxialMash",vm:"2",version:"DICOM"},"(0054,1202)":{tag:"(0054,1202)",vr:"IS",name:"TransverseMash",vm:"1",version:"DICOM"},"(0054,1203)":{tag:"(0054,1203)",vr:"DS",name:"DetectorElementSize",vm:"2",version:"DICOM"},"(0054,1210)":{tag:"(0054,1210)",vr:"DS",name:"CoincidenceWindowWidth",vm:"1",version:"DICOM"},"(0054,1220)":{tag:"(0054,1220)",vr:"CS",name:"SecondaryCountsType",vm:"1-n",version:"DICOM"},"(0054,1300)":{tag:"(0054,1300)",vr:"DS",name:"FrameReferenceTime",vm:"1",version:"DICOM"},"(0054,1310)":{tag:"(0054,1310)",vr:"IS",name:"PrimaryPromptsCountsAccumulated",vm:"1",version:"DICOM"},"(0054,1311)":{tag:"(0054,1311)",vr:"IS",name:"SecondaryCountsAccumulated",vm:"1-n",version:"DICOM"},"(0054,1320)":{tag:"(0054,1320)",vr:"DS",name:"SliceSensitivityFactor",vm:"1",version:"DICOM"},"(0054,1321)":{tag:"(0054,1321)",vr:"DS",name:"DecayFactor",vm:"1",version:"DICOM"},"(0054,1322)":{tag:"(0054,1322)",vr:"DS",name:"DoseCalibrationFactor",vm:"1",version:"DICOM"},"(0054,1323)":{tag:"(0054,1323)",vr:"DS",name:"ScatterFractionFactor",vm:"1",version:"DICOM"},"(0054,1324)":{tag:"(0054,1324)",vr:"DS",name:"DeadTimeFactor",vm:"1",version:"DICOM"},"(0054,1330)":{tag:"(0054,1330)",vr:"US",name:"ImageIndex",vm:"1",version:"DICOM"},"(0060,3000)":{tag:"(0060,3000)",vr:"SQ",name:"HistogramSequence",vm:"1",version:"DICOM"},"(0060,3002)":{tag:"(0060,3002)",vr:"US",name:"HistogramNumberOfBins",vm:"1",version:"DICOM"},"(0060,3004)":{tag:"(0060,3004)",vr:"xs",name:"HistogramFirstBinValue",vm:"1",version:"DICOM"},"(0060,3006)":{tag:"(0060,3006)",vr:"xs",name:"HistogramLastBinValue",vm:"1",version:"DICOM"},"(0060,3008)":{tag:"(0060,3008)",vr:"US",name:"HistogramBinWidth",vm:"1",version:"DICOM"},"(0060,3010)":{tag:"(0060,3010)",vr:"LO",name:"HistogramExplanation",vm:"1",version:"DICOM"},"(0060,3020)":{tag:"(0060,3020)",vr:"UL",name:"HistogramData",vm:"1-n",version:"DICOM"},"(0062,0001)":{tag:"(0062,0001)",vr:"CS",name:"SegmentationType",vm:"1",version:"DICOM"},"(0062,0002)":{tag:"(0062,0002)",vr:"SQ",name:"SegmentSequence",vm:"1",version:"DICOM"},"(0062,0003)":{tag:"(0062,0003)",vr:"SQ",name:"SegmentedPropertyCategoryCodeSequence",vm:"1",version:"DICOM"},"(0062,0004)":{tag:"(0062,0004)",vr:"US",name:"SegmentNumber",vm:"1",version:"DICOM"},"(0062,0005)":{tag:"(0062,0005)",vr:"LO",name:"SegmentLabel",vm:"1",version:"DICOM"},"(0062,0006)":{tag:"(0062,0006)",vr:"ST",name:"SegmentDescription",vm:"1",version:"DICOM"},"(0062,0008)":{tag:"(0062,0008)",vr:"CS",name:"SegmentAlgorithmType",vm:"1",version:"DICOM"},"(0062,0009)":{tag:"(0062,0009)",vr:"LO",name:"SegmentAlgorithmName",vm:"1",version:"DICOM"},"(0062,000A)":{tag:"(0062,000A)",vr:"SQ",name:"SegmentIdentificationSequence",vm:"1",version:"DICOM"},"(0062,000B)":{tag:"(0062,000B)",vr:"US",name:"ReferencedSegmentNumber",vm:"1-n",version:"DICOM"},"(0062,000C)":{tag:"(0062,000C)",vr:"US",name:"RecommendedDisplayGrayscaleValue",vm:"1",version:"DICOM"},"(0062,000D)":{tag:"(0062,000D)",vr:"US",name:"RecommendedDisplayCIELabValue",vm:"3",version:"DICOM"},"(0062,000E)":{tag:"(0062,000E)",vr:"US",name:"MaximumFractionalValue",vm:"1",version:"DICOM"},"(0062,000F)":{tag:"(0062,000F)",vr:"SQ",name:"SegmentedPropertyTypeCodeSequence",vm:"1",version:"DICOM"},"(0062,0010)":{tag:"(0062,0010)",vr:"CS",name:"SegmentationFractionalType",vm:"1",version:"DICOM"},"(0062,0011)":{tag:"(0062,0011)",vr:"SQ",name:"SegmentedPropertyTypeModifierCodeSequence",vm:"1",version:"DICOM"},"(0062,0012)":{tag:"(0062,0012)",vr:"SQ",name:"UsedSegmentsSequence",vm:"1",version:"DICOM"},"(0064,0002)":{tag:"(0064,0002)",vr:"SQ",name:"DeformableRegistrationSequence",vm:"1",version:"DICOM"},"(0064,0003)":{tag:"(0064,0003)",vr:"UI",name:"SourceFrameOfReferenceUID",vm:"1",version:"DICOM"},"(0064,0005)":{tag:"(0064,0005)",vr:"SQ",name:"DeformableRegistrationGridSequence",vm:"1",version:"DICOM"},"(0064,0007)":{tag:"(0064,0007)",vr:"UL",name:"GridDimensions",vm:"3",version:"DICOM"},"(0064,0008)":{tag:"(0064,0008)",vr:"FD",name:"GridResolution",vm:"3",version:"DICOM"},"(0064,0009)":{tag:"(0064,0009)",vr:"OF",name:"VectorGridData",vm:"1",version:"DICOM"},"(0064,000F)":{tag:"(0064,000F)",vr:"SQ",name:"PreDeformationMatrixRegistrationSequence",vm:"1",version:"DICOM"},"(0064,0010)":{tag:"(0064,0010)",vr:"SQ",name:"PostDeformationMatrixRegistrationSequence",vm:"1",version:"DICOM"},"(0066,0001)":{tag:"(0066,0001)",vr:"UL",name:"NumberOfSurfaces",vm:"1",version:"DICOM"},"(0066,0002)":{tag:"(0066,0002)",vr:"SQ",name:"SurfaceSequence",vm:"1",version:"DICOM"},"(0066,0003)":{tag:"(0066,0003)",vr:"UL",name:"SurfaceNumber",vm:"1",version:"DICOM"},"(0066,0004)":{tag:"(0066,0004)",vr:"LT",name:"SurfaceComments",vm:"1",version:"DICOM"},"(0066,0009)":{tag:"(0066,0009)",vr:"CS",name:"SurfaceProcessing",vm:"1",version:"DICOM"},"(0066,000A)":{tag:"(0066,000A)",vr:"FL",name:"SurfaceProcessingRatio",vm:"1",version:"DICOM"},"(0066,000B)":{tag:"(0066,000B)",vr:"LO",name:"SurfaceProcessingDescription",vm:"1",version:"DICOM"},"(0066,000C)":{tag:"(0066,000C)",vr:"FL",name:"RecommendedPresentationOpacity",vm:"1",version:"DICOM"},"(0066,000D)":{tag:"(0066,000D)",vr:"CS",name:"RecommendedPresentationType",vm:"1",version:"DICOM"},"(0066,000E)":{tag:"(0066,000E)",vr:"CS",name:"FiniteVolume",vm:"1",version:"DICOM"},"(0066,0010)":{tag:"(0066,0010)",vr:"CS",name:"Manifold",vm:"1",version:"DICOM"},"(0066,0011)":{tag:"(0066,0011)",vr:"SQ",name:"SurfacePointsSequence",vm:"1",version:"DICOM"},"(0066,0012)":{tag:"(0066,0012)",vr:"SQ",name:"SurfacePointsNormalsSequence",vm:"1",version:"DICOM"},"(0066,0013)":{tag:"(0066,0013)",vr:"SQ",name:"SurfaceMeshPrimitivesSequence",vm:"1",version:"DICOM"},"(0066,0015)":{tag:"(0066,0015)",vr:"UL",name:"NumberOfSurfacePoints",vm:"1",version:"DICOM"},"(0066,0016)":{tag:"(0066,0016)",vr:"OF",name:"PointCoordinatesData",vm:"1",version:"DICOM"},"(0066,0017)":{tag:"(0066,0017)",vr:"FL",name:"PointPositionAccuracy",vm:"3",version:"DICOM"},"(0066,0018)":{tag:"(0066,0018)",vr:"FL",name:"MeanPointDistance",vm:"1",version:"DICOM"},"(0066,0019)":{tag:"(0066,0019)",vr:"FL",name:"MaximumPointDistance",vm:"1",version:"DICOM"},"(0066,001A)":{tag:"(0066,001A)",vr:"FL",name:"PointsBoundingBoxCoordinates",vm:"6",version:"DICOM"},"(0066,001B)":{tag:"(0066,001B)",vr:"FL",name:"AxisOfRotation",vm:"3",version:"DICOM"},"(0066,001C)":{tag:"(0066,001C)",vr:"FL",name:"CenterOfRotation",vm:"3",version:"DICOM"},"(0066,001E)":{tag:"(0066,001E)",vr:"UL",name:"NumberOfVectors",vm:"1",version:"DICOM"},"(0066,001F)":{tag:"(0066,001F)",vr:"US",name:"VectorDimensionality",vm:"1",version:"DICOM"},"(0066,0020)":{tag:"(0066,0020)",vr:"FL",name:"VectorAccuracy",vm:"1-n",version:"DICOM"},"(0066,0021)":{tag:"(0066,0021)",vr:"OF",name:"VectorCoordinateData",vm:"1",version:"DICOM"},"(0066,0023)":{tag:"(0066,0023)",vr:"OW",name:"TrianglePointIndexList",vm:"1",version:"DICOM"},"(0066,0024)":{tag:"(0066,0024)",vr:"OW",name:"EdgePointIndexList",vm:"1",version:"DICOM"},"(0066,0025)":{tag:"(0066,0025)",vr:"OW",name:"VertexPointIndexList",vm:"1",version:"DICOM"},"(0066,0026)":{tag:"(0066,0026)",vr:"SQ",name:"TriangleStripSequence",vm:"1",version:"DICOM"},"(0066,0027)":{tag:"(0066,0027)",vr:"SQ",name:"TriangleFanSequence",vm:"1",version:"DICOM"},"(0066,0028)":{tag:"(0066,0028)",vr:"SQ",name:"LineSequence",vm:"1",version:"DICOM"},"(0066,0029)":{tag:"(0066,0029)",vr:"OW",name:"PrimitivePointIndexList",vm:"1",version:"DICOM"},"(0066,002A)":{tag:"(0066,002A)",vr:"UL",name:"SurfaceCount",vm:"1",version:"DICOM"},"(0066,002B)":{tag:"(0066,002B)",vr:"SQ",name:"ReferencedSurfaceSequence",vm:"1",version:"DICOM"},"(0066,002C)":{tag:"(0066,002C)",vr:"UL",name:"ReferencedSurfaceNumber",vm:"1",version:"DICOM"},"(0066,002D)":{tag:"(0066,002D)",vr:"SQ",name:"SegmentSurfaceGenerationAlgorithmIdentificationSequence",vm:"1",version:"DICOM"},"(0066,002E)":{tag:"(0066,002E)",vr:"SQ",name:"SegmentSurfaceSourceInstanceSequence",vm:"1",version:"DICOM"},"(0066,002F)":{tag:"(0066,002F)",vr:"SQ",name:"AlgorithmFamilyCodeSequence",vm:"1",version:"DICOM"},"(0066,0030)":{tag:"(0066,0030)",vr:"SQ",name:"AlgorithmNameCodeSequence",vm:"1",version:"DICOM"},"(0066,0031)":{tag:"(0066,0031)",vr:"LO",name:"AlgorithmVersion",vm:"1",version:"DICOM"},"(0066,0032)":{tag:"(0066,0032)",vr:"LT",name:"AlgorithmParameters",vm:"1",version:"DICOM"},"(0066,0034)":{tag:"(0066,0034)",vr:"SQ",name:"FacetSequence",vm:"1",version:"DICOM"},"(0066,0035)":{tag:"(0066,0035)",vr:"SQ",name:"SurfaceProcessingAlgorithmIdentificationSequence",vm:"1",version:"DICOM"},"(0066,0036)":{tag:"(0066,0036)",vr:"LO",name:"AlgorithmName",vm:"1",version:"DICOM"},"(0066,0037)":{tag:"(0066,0037)",vr:"FL",name:"RecommendedPointRadius",vm:"1",version:"DICOM"},"(0066,0038)":{tag:"(0066,0038)",vr:"FL",name:"RecommendedLineThickness",vm:"1",version:"DICOM"},"(0066,0040)":{tag:"(0066,0040)",vr:"UL",name:"LongPrimitivePointIndexList",vm:"1-n",version:"DICOM"},"(0066,0041)":{tag:"(0066,0041)",vr:"UL",name:"LongTrianglePointIndexList",vm:"3-3n",version:"DICOM"},"(0066,0042)":{tag:"(0066,0042)",vr:"UL",name:"LongEdgePointIndexList",vm:"2-2n",version:"DICOM"},"(0066,0043)":{tag:"(0066,0043)",vr:"UL",name:"LongVertexPointIndexList",vm:"1-n",version:"DICOM"},"(0068,6210)":{tag:"(0068,6210)",vr:"LO",name:"ImplantSize",vm:"1",version:"DICOM"},"(0068,6221)":{tag:"(0068,6221)",vr:"LO",name:"ImplantTemplateVersion",vm:"1",version:"DICOM"},"(0068,6222)":{tag:"(0068,6222)",vr:"SQ",name:"ReplacedImplantTemplateSequence",vm:"1",version:"DICOM"},"(0068,6223)":{tag:"(0068,6223)",vr:"CS",name:"ImplantType",vm:"1",version:"DICOM"},"(0068,6224)":{tag:"(0068,6224)",vr:"SQ",name:"DerivationImplantTemplateSequence",vm:"1",version:"DICOM"},"(0068,6225)":{tag:"(0068,6225)",vr:"SQ",name:"OriginalImplantTemplateSequence",vm:"1",version:"DICOM"},"(0068,6226)":{tag:"(0068,6226)",vr:"DT",name:"EffectiveDateTime",vm:"1",version:"DICOM"},"(0068,6230)":{tag:"(0068,6230)",vr:"SQ",name:"ImplantTargetAnatomySequence",vm:"1",version:"DICOM"},"(0068,6260)":{tag:"(0068,6260)",vr:"SQ",name:"InformationFromManufacturerSequence",vm:"1",version:"DICOM"},"(0068,6265)":{tag:"(0068,6265)",vr:"SQ",name:"NotificationFromManufacturerSequence",vm:"1",version:"DICOM"},"(0068,6270)":{tag:"(0068,6270)",vr:"DT",name:"InformationIssueDateTime",vm:"1",version:"DICOM"},"(0068,6280)":{tag:"(0068,6280)",vr:"ST",name:"InformationSummary",vm:"1",version:"DICOM"},"(0068,62A0)":{tag:"(0068,62A0)",vr:"SQ",name:"ImplantRegulatoryDisapprovalCodeSequence",vm:"1",version:"DICOM"},"(0068,62A5)":{tag:"(0068,62A5)",vr:"FD",name:"OverallTemplateSpatialTolerance",vm:"1",version:"DICOM"},"(0068,62C0)":{tag:"(0068,62C0)",vr:"SQ",name:"HPGLDocumentSequence",vm:"1",version:"DICOM"},"(0068,62D0)":{tag:"(0068,62D0)",vr:"US",name:"HPGLDocumentID",vm:"1",version:"DICOM"},"(0068,62D5)":{tag:"(0068,62D5)",vr:"LO",name:"HPGLDocumentLabel",vm:"1",version:"DICOM"},"(0068,62E0)":{tag:"(0068,62E0)",vr:"SQ",name:"ViewOrientationCodeSequence",vm:"1",version:"DICOM"},"(0068,62F0)":{tag:"(0068,62F0)",vr:"FD",name:"ViewOrientationModifier",vm:"9",version:"DICOM"},"(0068,62F2)":{tag:"(0068,62F2)",vr:"FD",name:"HPGLDocumentScaling",vm:"1",version:"DICOM"},"(0068,6300)":{tag:"(0068,6300)",vr:"OB",name:"HPGLDocument",vm:"1",version:"DICOM"},"(0068,6310)":{tag:"(0068,6310)",vr:"US",name:"HPGLContourPenNumber",vm:"1",version:"DICOM"},"(0068,6320)":{tag:"(0068,6320)",vr:"SQ",name:"HPGLPenSequence",vm:"1",version:"DICOM"},"(0068,6330)":{tag:"(0068,6330)",vr:"US",name:"HPGLPenNumber",vm:"1",version:"DICOM"},"(0068,6340)":{tag:"(0068,6340)",vr:"LO",name:"HPGLPenLabel",vm:"1",version:"DICOM"},"(0068,6345)":{tag:"(0068,6345)",vr:"ST",name:"HPGLPenDescription",vm:"1",version:"DICOM"},"(0068,6346)":{tag:"(0068,6346)",vr:"FD",name:"RecommendedRotationPoint",vm:"2",version:"DICOM"},"(0068,6347)":{tag:"(0068,6347)",vr:"FD",name:"BoundingRectangle",vm:"4",version:"DICOM"},"(0068,6350)":{tag:"(0068,6350)",vr:"US",name:"ImplantTemplate3DModelSurfaceNumber",vm:"1-n",version:"DICOM"},"(0068,6360)":{tag:"(0068,6360)",vr:"SQ",name:"SurfaceModelDescriptionSequence",vm:"1",version:"DICOM"},"(0068,6380)":{tag:"(0068,6380)",vr:"LO",name:"SurfaceModelLabel",vm:"1",version:"DICOM"},"(0068,6390)":{tag:"(0068,6390)",vr:"FD",name:"SurfaceModelScalingFactor",vm:"1",version:"DICOM"},"(0068,63A0)":{tag:"(0068,63A0)",vr:"SQ",name:"MaterialsCodeSequence",vm:"1",version:"DICOM"},"(0068,63A4)":{tag:"(0068,63A4)",vr:"SQ",name:"CoatingMaterialsCodeSequence",vm:"1",version:"DICOM"},"(0068,63A8)":{tag:"(0068,63A8)",vr:"SQ",name:"ImplantTypeCodeSequence",vm:"1",version:"DICOM"},"(0068,63AC)":{tag:"(0068,63AC)",vr:"SQ",name:"FixationMethodCodeSequence",vm:"1",version:"DICOM"},"(0068,63B0)":{tag:"(0068,63B0)",vr:"SQ",name:"MatingFeatureSetsSequence",vm:"1",version:"DICOM"},"(0068,63C0)":{tag:"(0068,63C0)",vr:"US",name:"MatingFeatureSetID",vm:"1",version:"DICOM"},"(0068,63D0)":{tag:"(0068,63D0)",vr:"LO",name:"MatingFeatureSetLabel",vm:"1",version:"DICOM"},"(0068,63E0)":{tag:"(0068,63E0)",vr:"SQ",name:"MatingFeatureSequence",vm:"1",version:"DICOM"},"(0068,63F0)":{tag:"(0068,63F0)",vr:"US",name:"MatingFeatureID",vm:"1",version:"DICOM"},"(0068,6400)":{tag:"(0068,6400)",vr:"SQ",name:"MatingFeatureDegreeOfFreedomSequence",vm:"1",version:"DICOM"},"(0068,6410)":{tag:"(0068,6410)",vr:"US",name:"DegreeOfFreedomID",vm:"1",version:"DICOM"},"(0068,6420)":{tag:"(0068,6420)",vr:"CS",name:"DegreeOfFreedomType",vm:"1",version:"DICOM"},"(0068,6430)":{tag:"(0068,6430)",vr:"SQ",name:"TwoDMatingFeatureCoordinatesSequence",vm:"1",version:"DICOM"},"(0068,6440)":{tag:"(0068,6440)",vr:"US",name:"ReferencedHPGLDocumentID",vm:"1",version:"DICOM"},"(0068,6450)":{tag:"(0068,6450)",vr:"FD",name:"TwoDMatingPoint",vm:"2",version:"DICOM"},"(0068,6460)":{tag:"(0068,6460)",vr:"FD",name:"TwoDMatingAxes",vm:"4",version:"DICOM"},"(0068,6470)":{tag:"(0068,6470)",vr:"SQ",name:"TwoDDegreeOfFreedomSequence",vm:"1",version:"DICOM"},"(0068,6490)":{tag:"(0068,6490)",vr:"FD",name:"ThreeDDegreeOfFreedomAxis",vm:"3",version:"DICOM"},"(0068,64A0)":{tag:"(0068,64A0)",vr:"FD",name:"RangeOfFreedom",vm:"2",version:"DICOM"},"(0068,64C0)":{tag:"(0068,64C0)",vr:"FD",name:"ThreeDMatingPoint",vm:"3",version:"DICOM"},"(0068,64D0)":{tag:"(0068,64D0)",vr:"FD",name:"ThreeDMatingAxes",vm:"9",version:"DICOM"},"(0068,64F0)":{tag:"(0068,64F0)",vr:"FD",name:"TwoDDegreeOfFreedomAxis",vm:"3",version:"DICOM"},"(0068,6500)":{tag:"(0068,6500)",vr:"SQ",name:"PlanningLandmarkPointSequence",vm:"1",version:"DICOM"},"(0068,6510)":{tag:"(0068,6510)",vr:"SQ",name:"PlanningLandmarkLineSequence",vm:"1",version:"DICOM"},"(0068,6520)":{tag:"(0068,6520)",vr:"SQ",name:"PlanningLandmarkPlaneSequence",vm:"1",version:"DICOM"},"(0068,6530)":{tag:"(0068,6530)",vr:"US",name:"PlanningLandmarkID",vm:"1",version:"DICOM"},"(0068,6540)":{tag:"(0068,6540)",vr:"LO",name:"PlanningLandmarkDescription",vm:"1",version:"DICOM"},"(0068,6545)":{tag:"(0068,6545)",vr:"SQ",name:"PlanningLandmarkIdentificationCodeSequence",vm:"1",version:"DICOM"},"(0068,6550)":{tag:"(0068,6550)",vr:"SQ",name:"TwoDPointCoordinatesSequence",vm:"1",version:"DICOM"},"(0068,6560)":{tag:"(0068,6560)",vr:"FD",name:"TwoDPointCoordinates",vm:"2",version:"DICOM"},"(0068,6590)":{tag:"(0068,6590)",vr:"FD",name:"ThreeDPointCoordinates",vm:"3",version:"DICOM"},"(0068,65A0)":{tag:"(0068,65A0)",vr:"SQ",name:"TwoDLineCoordinatesSequence",vm:"1",version:"DICOM"},"(0068,65B0)":{tag:"(0068,65B0)",vr:"FD",name:"TwoDLineCoordinates",vm:"4",version:"DICOM"},"(0068,65D0)":{tag:"(0068,65D0)",vr:"FD",name:"ThreeDLineCoordinates",vm:"6",version:"DICOM"},"(0068,65E0)":{tag:"(0068,65E0)",vr:"SQ",name:"TwoDPlaneCoordinatesSequence",vm:"1",version:"DICOM"},"(0068,65F0)":{tag:"(0068,65F0)",vr:"FD",name:"TwoDPlaneIntersection",vm:"4",version:"DICOM"},"(0068,6610)":{tag:"(0068,6610)",vr:"FD",name:"ThreeDPlaneOrigin",vm:"3",version:"DICOM"},"(0068,6620)":{tag:"(0068,6620)",vr:"FD",name:"ThreeDPlaneNormal",vm:"3",version:"DICOM"},"(0070,0001)":{tag:"(0070,0001)",vr:"SQ",name:"GraphicAnnotationSequence",vm:"1",version:"DICOM"},"(0070,0002)":{tag:"(0070,0002)",vr:"CS",name:"GraphicLayer",vm:"1",version:"DICOM"},"(0070,0003)":{tag:"(0070,0003)",vr:"CS",name:"BoundingBoxAnnotationUnits",vm:"1",version:"DICOM"},"(0070,0004)":{tag:"(0070,0004)",vr:"CS",name:"AnchorPointAnnotationUnits",vm:"1",version:"DICOM"},"(0070,0005)":{tag:"(0070,0005)",vr:"CS",name:"GraphicAnnotationUnits",vm:"1",version:"DICOM"},"(0070,0006)":{tag:"(0070,0006)",vr:"ST",name:"UnformattedTextValue",vm:"1",version:"DICOM"},"(0070,0008)":{tag:"(0070,0008)",vr:"SQ",name:"TextObjectSequence",vm:"1",version:"DICOM"},"(0070,0009)":{tag:"(0070,0009)",vr:"SQ",name:"GraphicObjectSequence",vm:"1",version:"DICOM"},"(0070,0010)":{tag:"(0070,0010)",vr:"FL",name:"BoundingBoxTopLeftHandCorner",vm:"2",version:"DICOM"},"(0070,0011)":{tag:"(0070,0011)",vr:"FL",name:"BoundingBoxBottomRightHandCorner",vm:"2",version:"DICOM"},"(0070,0012)":{tag:"(0070,0012)",vr:"CS",name:"BoundingBoxTextHorizontalJustification",vm:"1",version:"DICOM"},"(0070,0014)":{tag:"(0070,0014)",vr:"FL",name:"AnchorPoint",vm:"2",version:"DICOM"},"(0070,0015)":{tag:"(0070,0015)",vr:"CS",name:"AnchorPointVisibility",vm:"1",version:"DICOM"},"(0070,0020)":{tag:"(0070,0020)",vr:"US",name:"GraphicDimensions",vm:"1",version:"DICOM"},"(0070,0021)":{tag:"(0070,0021)",vr:"US",name:"NumberOfGraphicPoints",vm:"1",version:"DICOM"},"(0070,0022)":{tag:"(0070,0022)",vr:"FL",name:"GraphicData",vm:"2-n",version:"DICOM"},"(0070,0023)":{tag:"(0070,0023)",vr:"CS",name:"GraphicType",vm:"1",version:"DICOM"},"(0070,0024)":{tag:"(0070,0024)",vr:"CS",name:"GraphicFilled",vm:"1",version:"DICOM"},"(0070,0041)":{tag:"(0070,0041)",vr:"CS",name:"ImageHorizontalFlip",vm:"1",version:"DICOM"},"(0070,0042)":{tag:"(0070,0042)",vr:"US",name:"ImageRotation",vm:"1",version:"DICOM"},"(0070,0052)":{tag:"(0070,0052)",vr:"SL",name:"DisplayedAreaTopLeftHandCorner",vm:"2",version:"DICOM"},"(0070,0053)":{tag:"(0070,0053)",vr:"SL",name:"DisplayedAreaBottomRightHandCorner",vm:"2",version:"DICOM"},"(0070,005A)":{tag:"(0070,005A)",vr:"SQ",name:"DisplayedAreaSelectionSequence",vm:"1",version:"DICOM"},"(0070,0060)":{tag:"(0070,0060)",vr:"SQ",name:"GraphicLayerSequence",vm:"1",version:"DICOM"},"(0070,0062)":{tag:"(0070,0062)",vr:"IS",name:"GraphicLayerOrder",vm:"1",version:"DICOM"},"(0070,0066)":{tag:"(0070,0066)",vr:"US",name:"GraphicLayerRecommendedDisplayGrayscaleValue",vm:"1",version:"DICOM"},"(0070,0068)":{tag:"(0070,0068)",vr:"LO",name:"GraphicLayerDescription",vm:"1",version:"DICOM"},"(0070,0080)":{tag:"(0070,0080)",vr:"CS",name:"ContentLabel",vm:"1",version:"DICOM"},"(0070,0081)":{tag:"(0070,0081)",vr:"LO",name:"ContentDescription",vm:"1",version:"DICOM"},"(0070,0082)":{tag:"(0070,0082)",vr:"DA",name:"PresentationCreationDate",vm:"1",version:"DICOM"},"(0070,0083)":{tag:"(0070,0083)",vr:"TM",name:"PresentationCreationTime",vm:"1",version:"DICOM"},"(0070,0084)":{tag:"(0070,0084)",vr:"PN",name:"ContentCreatorName",vm:"1",version:"DICOM"},"(0070,0086)":{tag:"(0070,0086)",vr:"SQ",name:"ContentCreatorIdentificationCodeSequence",vm:"1",version:"DICOM"},"(0070,0087)":{tag:"(0070,0087)",vr:"SQ",name:"AlternateContentDescriptionSequence",vm:"1",version:"DICOM"},"(0070,0100)":{tag:"(0070,0100)",vr:"CS",name:"PresentationSizeMode",vm:"1",version:"DICOM"},"(0070,0101)":{tag:"(0070,0101)",vr:"DS",name:"PresentationPixelSpacing",vm:"2",version:"DICOM"},"(0070,0102)":{tag:"(0070,0102)",vr:"IS",name:"PresentationPixelAspectRatio",vm:"2",version:"DICOM"},"(0070,0103)":{tag:"(0070,0103)",vr:"FL",name:"PresentationPixelMagnificationRatio",vm:"1",version:"DICOM"},"(0070,0207)":{tag:"(0070,0207)",vr:"LO",name:"GraphicGroupLabel",vm:"1",version:"DICOM"},"(0070,0208)":{tag:"(0070,0208)",vr:"ST",name:"GraphicGroupDescription",vm:"1",version:"DICOM"},"(0070,0209)":{tag:"(0070,0209)",vr:"SQ",name:"CompoundGraphicSequence",vm:"1",version:"DICOM"},"(0070,0226)":{tag:"(0070,0226)",vr:"UL",name:"CompoundGraphicInstanceID",vm:"1",version:"DICOM"},"(0070,0227)":{tag:"(0070,0227)",vr:"LO",name:"FontName",vm:"1",version:"DICOM"},"(0070,0228)":{tag:"(0070,0228)",vr:"CS",name:"FontNameType",vm:"1",version:"DICOM"},"(0070,0229)":{tag:"(0070,0229)",vr:"LO",name:"CSSFontName",vm:"1",version:"DICOM"},"(0070,0230)":{tag:"(0070,0230)",vr:"FD",name:"RotationAngle",vm:"1",version:"DICOM"},"(0070,0231)":{tag:"(0070,0231)",vr:"SQ",name:"TextStyleSequence",vm:"1",version:"DICOM"},"(0070,0232)":{tag:"(0070,0232)",vr:"SQ",name:"LineStyleSequence",vm:"1",version:"DICOM"},"(0070,0233)":{tag:"(0070,0233)",vr:"SQ",name:"FillStyleSequence",vm:"1",version:"DICOM"},"(0070,0234)":{tag:"(0070,0234)",vr:"SQ",name:"GraphicGroupSequence",vm:"1",version:"DICOM"},"(0070,0241)":{tag:"(0070,0241)",vr:"US",name:"TextColorCIELabValue",vm:"3",version:"DICOM"},"(0070,0242)":{tag:"(0070,0242)",vr:"CS",name:"HorizontalAlignment",vm:"1",version:"DICOM"},"(0070,0243)":{tag:"(0070,0243)",vr:"CS",name:"VerticalAlignment",vm:"1",version:"DICOM"},"(0070,0244)":{tag:"(0070,0244)",vr:"CS",name:"ShadowStyle",vm:"1",version:"DICOM"},"(0070,0245)":{tag:"(0070,0245)",vr:"FL",name:"ShadowOffsetX",vm:"1",version:"DICOM"},"(0070,0246)":{tag:"(0070,0246)",vr:"FL",name:"ShadowOffsetY",vm:"1",version:"DICOM"},"(0070,0247)":{tag:"(0070,0247)",vr:"US",name:"ShadowColorCIELabValue",vm:"3",version:"DICOM"},"(0070,0248)":{tag:"(0070,0248)",vr:"CS",name:"Underlined",vm:"1",version:"DICOM"},"(0070,0249)":{tag:"(0070,0249)",vr:"CS",name:"Bold",vm:"1",version:"DICOM"},"(0070,0250)":{tag:"(0070,0250)",vr:"CS",name:"Italic",vm:"1",version:"DICOM"},"(0070,0251)":{tag:"(0070,0251)",vr:"US",name:"PatternOnColorCIELabValue",vm:"3",version:"DICOM"},"(0070,0252)":{tag:"(0070,0252)",vr:"US",name:"PatternOffColorCIELabValue",vm:"3",version:"DICOM"},"(0070,0253)":{tag:"(0070,0253)",vr:"FL",name:"LineThickness",vm:"1",version:"DICOM"},"(0070,0254)":{tag:"(0070,0254)",vr:"CS",name:"LineDashingStyle",vm:"1",version:"DICOM"},"(0070,0255)":{tag:"(0070,0255)",vr:"UL",name:"LinePattern",vm:"1",version:"DICOM"},"(0070,0256)":{tag:"(0070,0256)",vr:"OB",name:"FillPattern",vm:"1",version:"DICOM"},"(0070,0257)":{tag:"(0070,0257)",vr:"CS",name:"FillMode",vm:"1",version:"DICOM"},"(0070,0258)":{tag:"(0070,0258)",vr:"FL",name:"ShadowOpacity",vm:"1",version:"DICOM"},"(0070,0261)":{tag:"(0070,0261)",vr:"FL",name:"GapLength",vm:"1",version:"DICOM"},"(0070,0262)":{tag:"(0070,0262)",vr:"FL",name:"DiameterOfVisibility",vm:"1",version:"DICOM"},"(0070,0273)":{tag:"(0070,0273)",vr:"FL",name:"RotationPoint",vm:"2",version:"DICOM"},"(0070,0274)":{tag:"(0070,0274)",vr:"CS",name:"TickAlignment",vm:"1",version:"DICOM"},"(0070,0278)":{tag:"(0070,0278)",vr:"CS",name:"ShowTickLabel",vm:"1",version:"DICOM"},"(0070,0279)":{tag:"(0070,0279)",vr:"CS",name:"TickLabelAlignment",vm:"1",version:"DICOM"},"(0070,0282)":{tag:"(0070,0282)",vr:"CS",name:"CompoundGraphicUnits",vm:"1",version:"DICOM"},"(0070,0284)":{tag:"(0070,0284)",vr:"FL",name:"PatternOnOpacity",vm:"1",version:"DICOM"},"(0070,0285)":{tag:"(0070,0285)",vr:"FL",name:"PatternOffOpacity",vm:"1",version:"DICOM"},"(0070,0287)":{tag:"(0070,0287)",vr:"SQ",name:"MajorTicksSequence",vm:"1",version:"DICOM"},"(0070,0288)":{tag:"(0070,0288)",vr:"FL",name:"TickPosition",vm:"1",version:"DICOM"},"(0070,0289)":{tag:"(0070,0289)",vr:"SH",name:"TickLabel",vm:"1",version:"DICOM"},"(0070,0294)":{tag:"(0070,0294)",vr:"CS",name:"CompoundGraphicType",vm:"1",version:"DICOM"},"(0070,0295)":{tag:"(0070,0295)",vr:"UL",name:"GraphicGroupID",vm:"1",version:"DICOM"},"(0070,0306)":{tag:"(0070,0306)",vr:"CS",name:"ShapeType",vm:"1",version:"DICOM"},"(0070,0308)":{tag:"(0070,0308)",vr:"SQ",name:"RegistrationSequence",vm:"1",version:"DICOM"},"(0070,0309)":{tag:"(0070,0309)",vr:"SQ",name:"MatrixRegistrationSequence",vm:"1",version:"DICOM"},"(0070,030A)":{tag:"(0070,030A)",vr:"SQ",name:"MatrixSequence",vm:"1",version:"DICOM"},"(0070,030C)":{tag:"(0070,030C)",vr:"CS",name:"FrameOfReferenceTransformationMatrixType",vm:"1",version:"DICOM"},"(0070,030D)":{tag:"(0070,030D)",vr:"SQ",name:"RegistrationTypeCodeSequence",vm:"1",version:"DICOM"},"(0070,030F)":{tag:"(0070,030F)",vr:"ST",name:"FiducialDescription",vm:"1",version:"DICOM"},"(0070,0310)":{tag:"(0070,0310)",vr:"SH",name:"FiducialIdentifier",vm:"1",version:"DICOM"},"(0070,0311)":{tag:"(0070,0311)",vr:"SQ",name:"FiducialIdentifierCodeSequence",vm:"1",version:"DICOM"},"(0070,0312)":{tag:"(0070,0312)",vr:"FD",name:"ContourUncertaintyRadius",vm:"1",version:"DICOM"},"(0070,0314)":{tag:"(0070,0314)",vr:"SQ",name:"UsedFiducialsSequence",vm:"1",version:"DICOM"},"(0070,0318)":{tag:"(0070,0318)",vr:"SQ",name:"GraphicCoordinatesDataSequence",vm:"1",version:"DICOM"},"(0070,031A)":{tag:"(0070,031A)",vr:"UI",name:"FiducialUID",vm:"1",version:"DICOM"},"(0070,031C)":{tag:"(0070,031C)",vr:"SQ",name:"FiducialSetSequence",vm:"1",version:"DICOM"},"(0070,031E)":{tag:"(0070,031E)",vr:"SQ",name:"FiducialSequence",vm:"1",version:"DICOM"},"(0070,0401)":{tag:"(0070,0401)",vr:"US",name:"GraphicLayerRecommendedDisplayCIELabValue",vm:"3",version:"DICOM"},"(0070,0402)":{tag:"(0070,0402)",vr:"SQ",name:"BlendingSequence",vm:"1",version:"DICOM"},"(0070,0403)":{tag:"(0070,0403)",vr:"FL",name:"RelativeOpacity",vm:"1",version:"DICOM"},"(0070,0404)":{tag:"(0070,0404)",vr:"SQ",name:"ReferencedSpatialRegistrationSequence",vm:"1",version:"DICOM"},"(0070,0405)":{tag:"(0070,0405)",vr:"CS",name:"BlendingPosition",vm:"1",version:"DICOM"},"(0072,0002)":{tag:"(0072,0002)",vr:"SH",name:"HangingProtocolName",vm:"1",version:"DICOM"},"(0072,0004)":{tag:"(0072,0004)",vr:"LO",name:"HangingProtocolDescription",vm:"1",version:"DICOM"},"(0072,0006)":{tag:"(0072,0006)",vr:"CS",name:"HangingProtocolLevel",vm:"1",version:"DICOM"},"(0072,0008)":{tag:"(0072,0008)",vr:"LO",name:"HangingProtocolCreator",vm:"1",version:"DICOM"},"(0072,000A)":{tag:"(0072,000A)",vr:"DT",name:"HangingProtocolCreationDateTime",vm:"1",version:"DICOM"},"(0072,000C)":{tag:"(0072,000C)",vr:"SQ",name:"HangingProtocolDefinitionSequence",vm:"1",version:"DICOM"},"(0072,000E)":{tag:"(0072,000E)",vr:"SQ",name:"HangingProtocolUserIdentificationCodeSequence",vm:"1",version:"DICOM"},"(0072,0010)":{tag:"(0072,0010)",vr:"LO",name:"HangingProtocolUserGroupName",vm:"1",version:"DICOM"},"(0072,0012)":{tag:"(0072,0012)",vr:"SQ",name:"SourceHangingProtocolSequence",vm:"1",version:"DICOM"},"(0072,0014)":{tag:"(0072,0014)",vr:"US",name:"NumberOfPriorsReferenced",vm:"1",version:"DICOM"},"(0072,0020)":{tag:"(0072,0020)",vr:"SQ",name:"ImageSetsSequence",vm:"1",version:"DICOM"},"(0072,0022)":{tag:"(0072,0022)",vr:"SQ",name:"ImageSetSelectorSequence",vm:"1",version:"DICOM"},"(0072,0024)":{tag:"(0072,0024)",vr:"CS",name:"ImageSetSelectorUsageFlag",vm:"1",version:"DICOM"},"(0072,0026)":{tag:"(0072,0026)",vr:"AT",name:"SelectorAttribute",vm:"1",version:"DICOM"},"(0072,0028)":{tag:"(0072,0028)",vr:"US",name:"SelectorValueNumber",vm:"1",version:"DICOM"},"(0072,0030)":{tag:"(0072,0030)",vr:"SQ",name:"TimeBasedImageSetsSequence",vm:"1",version:"DICOM"},"(0072,0032)":{tag:"(0072,0032)",vr:"US",name:"ImageSetNumber",vm:"1",version:"DICOM"},"(0072,0034)":{tag:"(0072,0034)",vr:"CS",name:"ImageSetSelectorCategory",vm:"1",version:"DICOM"},"(0072,0038)":{tag:"(0072,0038)",vr:"US",name:"RelativeTime",vm:"2",version:"DICOM"},"(0072,003A)":{tag:"(0072,003A)",vr:"CS",name:"RelativeTimeUnits",vm:"1",version:"DICOM"},"(0072,003C)":{tag:"(0072,003C)",vr:"SS",name:"AbstractPriorValue",vm:"2",version:"DICOM"},"(0072,003E)":{tag:"(0072,003E)",vr:"SQ",name:"AbstractPriorCodeSequence",vm:"1",version:"DICOM"},"(0072,0040)":{tag:"(0072,0040)",vr:"LO",name:"ImageSetLabel",vm:"1",version:"DICOM"},"(0072,0050)":{tag:"(0072,0050)",vr:"CS",name:"SelectorAttributeVR",vm:"1",version:"DICOM"},"(0072,0052)":{tag:"(0072,0052)",vr:"AT",name:"SelectorSequencePointer",vm:"1-n",version:"DICOM"},"(0072,0054)":{tag:"(0072,0054)",vr:"LO",name:"SelectorSequencePointerPrivateCreator",vm:"1-n",version:"DICOM"},"(0072,0056)":{tag:"(0072,0056)",vr:"LO",name:"SelectorAttributePrivateCreator",vm:"1",version:"DICOM"},"(0072,0060)":{tag:"(0072,0060)",vr:"AT",name:"SelectorATValue",vm:"1-n",version:"DICOM"},"(0072,0062)":{tag:"(0072,0062)",vr:"CS",name:"SelectorCSValue",vm:"1-n",version:"DICOM"},"(0072,0064)":{tag:"(0072,0064)",vr:"IS",name:"SelectorISValue",vm:"1-n",version:"DICOM"},"(0072,0066)":{tag:"(0072,0066)",vr:"LO",name:"SelectorLOValue",vm:"1-n",version:"DICOM"},"(0072,0068)":{tag:"(0072,0068)",vr:"LT",name:"SelectorLTValue",vm:"1",version:"DICOM"},"(0072,006A)":{tag:"(0072,006A)",vr:"PN",name:"SelectorPNValue",vm:"1-n",version:"DICOM"},"(0072,006C)":{tag:"(0072,006C)",vr:"SH",name:"SelectorSHValue",vm:"1-n",version:"DICOM"},"(0072,006E)":{tag:"(0072,006E)",vr:"ST",name:"SelectorSTValue",vm:"1",version:"DICOM"},"(0072,0070)":{tag:"(0072,0070)",vr:"UT",name:"SelectorUTValue",vm:"1",version:"DICOM"},"(0072,0072)":{tag:"(0072,0072)",vr:"DS",name:"SelectorDSValue",vm:"1-n",version:"DICOM"},"(0072,0074)":{tag:"(0072,0074)",vr:"FD",name:"SelectorFDValue",vm:"1-n",version:"DICOM"},"(0072,0076)":{tag:"(0072,0076)",vr:"FL",name:"SelectorFLValue",vm:"1-n",version:"DICOM"},"(0072,0078)":{tag:"(0072,0078)",vr:"UL",name:"SelectorULValue",vm:"1-n",version:"DICOM"},"(0072,007A)":{tag:"(0072,007A)",vr:"US",name:"SelectorUSValue",vm:"1-n",version:"DICOM"},"(0072,007C)":{tag:"(0072,007C)",vr:"SL",name:"SelectorSLValue",vm:"1-n",version:"DICOM"},"(0072,007E)":{tag:"(0072,007E)",vr:"SS",name:"SelectorSSValue",vm:"1-n",version:"DICOM"},"(0072,007F)":{tag:"(0072,007F)",vr:"UI",name:"SelectorUIValue",vm:"1-n",version:"DICOM"},"(0072,0080)":{tag:"(0072,0080)",vr:"SQ",name:"SelectorCodeSequenceValue",vm:"1",version:"DICOM"},"(0072,0100)":{tag:"(0072,0100)",vr:"US",name:"NumberOfScreens",vm:"1",version:"DICOM"},"(0072,0102)":{tag:"(0072,0102)",vr:"SQ",name:"NominalScreenDefinitionSequence",vm:"1",version:"DICOM"},"(0072,0104)":{tag:"(0072,0104)",vr:"US",name:"NumberOfVerticalPixels",vm:"1",version:"DICOM"},"(0072,0106)":{tag:"(0072,0106)",vr:"US",name:"NumberOfHorizontalPixels",vm:"1",version:"DICOM"},"(0072,0108)":{tag:"(0072,0108)",vr:"FD",name:"DisplayEnvironmentSpatialPosition",vm:"4",version:"DICOM"},"(0072,010A)":{tag:"(0072,010A)",vr:"US",name:"ScreenMinimumGrayscaleBitDepth",vm:"1",version:"DICOM"},"(0072,010C)":{tag:"(0072,010C)",vr:"US",name:"ScreenMinimumColorBitDepth",vm:"1",version:"DICOM"},"(0072,010E)":{tag:"(0072,010E)",vr:"US",name:"ApplicationMaximumRepaintTime",vm:"1",version:"DICOM"},"(0072,0200)":{tag:"(0072,0200)",vr:"SQ",name:"DisplaySetsSequence",vm:"1",version:"DICOM"},"(0072,0202)":{tag:"(0072,0202)",vr:"US",name:"DisplaySetNumber",vm:"1",version:"DICOM"},"(0072,0203)":{tag:"(0072,0203)",vr:"LO",name:"DisplaySetLabel",vm:"1",version:"DICOM"},"(0072,0204)":{tag:"(0072,0204)",vr:"US",name:"DisplaySetPresentationGroup",vm:"1",version:"DICOM"},"(0072,0206)":{tag:"(0072,0206)",vr:"LO",name:"DisplaySetPresentationGroupDescription",vm:"1",version:"DICOM"},"(0072,0208)":{tag:"(0072,0208)",vr:"CS",name:"PartialDataDisplayHandling",vm:"1",version:"DICOM"},"(0072,0210)":{tag:"(0072,0210)",vr:"SQ",name:"SynchronizedScrollingSequence",vm:"1",version:"DICOM"},"(0072,0212)":{tag:"(0072,0212)",vr:"US",name:"DisplaySetScrollingGroup",vm:"2-n",version:"DICOM"},"(0072,0214)":{tag:"(0072,0214)",vr:"SQ",name:"NavigationIndicatorSequence",vm:"1",version:"DICOM"},"(0072,0216)":{tag:"(0072,0216)",vr:"US",name:"NavigationDisplaySet",vm:"1",version:"DICOM"},"(0072,0218)":{tag:"(0072,0218)",vr:"US",name:"ReferenceDisplaySets",vm:"1-n",version:"DICOM"},"(0072,0300)":{tag:"(0072,0300)",vr:"SQ",name:"ImageBoxesSequence",vm:"1",version:"DICOM"},"(0072,0302)":{tag:"(0072,0302)",vr:"US",name:"ImageBoxNumber",vm:"1",version:"DICOM"},"(0072,0304)":{tag:"(0072,0304)",vr:"CS",name:"ImageBoxLayoutType",vm:"1",version:"DICOM"},"(0072,0306)":{tag:"(0072,0306)",vr:"US",name:"ImageBoxTileHorizontalDimension",vm:"1",version:"DICOM"},"(0072,0308)":{tag:"(0072,0308)",vr:"US",name:"ImageBoxTileVerticalDimension",vm:"1",version:"DICOM"},"(0072,0310)":{tag:"(0072,0310)",vr:"CS",name:"ImageBoxScrollDirection",vm:"1",version:"DICOM"},"(0072,0312)":{tag:"(0072,0312)",vr:"CS",name:"ImageBoxSmallScrollType",vm:"1",version:"DICOM"},"(0072,0314)":{tag:"(0072,0314)",vr:"US",name:"ImageBoxSmallScrollAmount",vm:"1",version:"DICOM"},"(0072,0316)":{tag:"(0072,0316)",vr:"CS",name:"ImageBoxLargeScrollType",vm:"1",version:"DICOM"},"(0072,0318)":{tag:"(0072,0318)",vr:"US",name:"ImageBoxLargeScrollAmount",vm:"1",version:"DICOM"},"(0072,0320)":{tag:"(0072,0320)",vr:"US",name:"ImageBoxOverlapPriority",vm:"1",version:"DICOM"},"(0072,0330)":{tag:"(0072,0330)",vr:"FD",name:"CineRelativeToRealTime",vm:"1",version:"DICOM"},"(0072,0400)":{tag:"(0072,0400)",vr:"SQ",name:"FilterOperationsSequence",vm:"1",version:"DICOM"},"(0072,0402)":{tag:"(0072,0402)",vr:"CS",name:"FilterByCategory",vm:"1",version:"DICOM"},"(0072,0404)":{tag:"(0072,0404)",vr:"CS",name:"FilterByAttributePresence",vm:"1",version:"DICOM"},"(0072,0406)":{tag:"(0072,0406)",vr:"CS",name:"FilterByOperator",vm:"1",version:"DICOM"},"(0072,0420)":{tag:"(0072,0420)",vr:"US",name:"StructuredDisplayBackgroundCIELabValue",vm:"3",version:"DICOM"},"(0072,0421)":{tag:"(0072,0421)",vr:"US",name:"EmptyImageBoxCIELabValue",vm:"3",version:"DICOM"},"(0072,0422)":{tag:"(0072,0422)",vr:"SQ",name:"StructuredDisplayImageBoxSequence",vm:"1",version:"DICOM"},"(0072,0424)":{tag:"(0072,0424)",vr:"SQ",name:"StructuredDisplayTextBoxSequence",vm:"1",version:"DICOM"},"(0072,0427)":{tag:"(0072,0427)",vr:"SQ",name:"ReferencedFirstFrameSequence",vm:"1",version:"DICOM"},"(0072,0430)":{tag:"(0072,0430)",vr:"SQ",name:"ImageBoxSynchronizationSequence",vm:"1",version:"DICOM"},"(0072,0432)":{tag:"(0072,0432)",vr:"US",name:"SynchronizedImageBoxList",vm:"2-n",version:"DICOM"},"(0072,0434)":{tag:"(0072,0434)",vr:"CS",name:"TypeOfSynchronization",vm:"1",version:"DICOM"},"(0072,0500)":{tag:"(0072,0500)",vr:"CS",name:"BlendingOperationType",vm:"1",version:"DICOM"},"(0072,0510)":{tag:"(0072,0510)",vr:"CS",name:"ReformattingOperationType",vm:"1",version:"DICOM"},"(0072,0512)":{tag:"(0072,0512)",vr:"FD",name:"ReformattingThickness",vm:"1",version:"DICOM"},"(0072,0514)":{tag:"(0072,0514)",vr:"FD",name:"ReformattingInterval",vm:"1",version:"DICOM"},"(0072,0516)":{tag:"(0072,0516)",vr:"CS",name:"ReformattingOperationInitialViewDirection",vm:"1",version:"DICOM"},"(0072,0520)":{tag:"(0072,0520)",vr:"CS",name:"ThreeDRenderingType",vm:"1-n",version:"DICOM"},"(0072,0600)":{tag:"(0072,0600)",vr:"SQ",name:"SortingOperationsSequence",vm:"1",version:"DICOM"},"(0072,0602)":{tag:"(0072,0602)",vr:"CS",name:"SortByCategory",vm:"1",version:"DICOM"},"(0072,0604)":{tag:"(0072,0604)",vr:"CS",name:"SortingDirection",vm:"1",version:"DICOM"},"(0072,0700)":{tag:"(0072,0700)",vr:"CS",name:"DisplaySetPatientOrientation",vm:"2",version:"DICOM"},"(0072,0702)":{tag:"(0072,0702)",vr:"CS",name:"VOIType",vm:"1",version:"DICOM"},"(0072,0704)":{tag:"(0072,0704)",vr:"CS",name:"PseudoColorType",vm:"1",version:"DICOM"},"(0072,0705)":{tag:"(0072,0705)",vr:"SQ",name:"PseudoColorPaletteInstanceReferenceSequence",vm:"1",version:"DICOM"},"(0072,0706)":{tag:"(0072,0706)",vr:"CS",name:"ShowGrayscaleInverted",vm:"1",version:"DICOM"},"(0072,0710)":{tag:"(0072,0710)",vr:"CS",name:"ShowImageTrueSizeFlag",vm:"1",version:"DICOM"},"(0072,0712)":{tag:"(0072,0712)",vr:"CS",name:"ShowGraphicAnnotationFlag",vm:"1",version:"DICOM"},"(0072,0714)":{tag:"(0072,0714)",vr:"CS",name:"ShowPatientDemographicsFlag",vm:"1",version:"DICOM"},"(0072,0716)":{tag:"(0072,0716)",vr:"CS",name:"ShowAcquisitionTechniquesFlag",vm:"1",version:"DICOM"},"(0072,0717)":{tag:"(0072,0717)",vr:"CS",name:"DisplaySetHorizontalJustification",vm:"1",version:"DICOM"},"(0072,0718)":{tag:"(0072,0718)",vr:"CS",name:"DisplaySetVerticalJustification",vm:"1",version:"DICOM"},"(0074,0120)":{tag:"(0074,0120)",vr:"FD",name:"ContinuationStartMeterset",vm:"1",version:"DICOM"},"(0074,0121)":{tag:"(0074,0121)",vr:"FD",name:"ContinuationEndMeterset",vm:"1",version:"DICOM"},"(0074,1000)":{tag:"(0074,1000)",vr:"CS",name:"ProcedureStepState",vm:"1",version:"DICOM"},"(0074,1002)":{tag:"(0074,1002)",vr:"SQ",name:"ProcedureStepProgressInformationSequence",vm:"1",version:"DICOM"},"(0074,1004)":{tag:"(0074,1004)",vr:"DS",name:"ProcedureStepProgress",vm:"1",version:"DICOM"},"(0074,1006)":{tag:"(0074,1006)",vr:"ST",name:"ProcedureStepProgressDescription",vm:"1",version:"DICOM"},"(0074,1008)":{tag:"(0074,1008)",vr:"SQ",name:"ProcedureStepCommunicationsURISequence",vm:"1",version:"DICOM"},"(0074,100A)":{tag:"(0074,100A)",vr:"UR",name:"ContactURI",vm:"1",version:"DICOM"},"(0074,100C)":{tag:"(0074,100C)",vr:"LO",name:"ContactDisplayName",vm:"1",version:"DICOM"},"(0074,100E)":{tag:"(0074,100E)",vr:"SQ",name:"ProcedureStepDiscontinuationReasonCodeSequence",vm:"1",version:"DICOM"},"(0074,1020)":{tag:"(0074,1020)",vr:"SQ",name:"BeamTaskSequence",vm:"1",version:"DICOM"},"(0074,1022)":{tag:"(0074,1022)",vr:"CS",name:"BeamTaskType",vm:"1",version:"DICOM"},"(0074,1025)":{tag:"(0074,1025)",vr:"CS",name:"AutosequenceFlag",vm:"1",version:"DICOM"},"(0074,1026)":{tag:"(0074,1026)",vr:"FD",name:"TableTopVerticalAdjustedPosition",vm:"1",version:"DICOM"},"(0074,1027)":{tag:"(0074,1027)",vr:"FD",name:"TableTopLongitudinalAdjustedPosition",vm:"1",version:"DICOM"},"(0074,1028)":{tag:"(0074,1028)",vr:"FD",name:"TableTopLateralAdjustedPosition",vm:"1",version:"DICOM"},"(0074,102A)":{tag:"(0074,102A)",vr:"FD",name:"PatientSupportAdjustedAngle",vm:"1",version:"DICOM"},"(0074,102B)":{tag:"(0074,102B)",vr:"FD",name:"TableTopEccentricAdjustedAngle",vm:"1",version:"DICOM"},"(0074,102C)":{tag:"(0074,102C)",vr:"FD",name:"TableTopPitchAdjustedAngle",vm:"1",version:"DICOM"},"(0074,102D)":{tag:"(0074,102D)",vr:"FD",name:"TableTopRollAdjustedAngle",vm:"1",version:"DICOM"},"(0074,1030)":{tag:"(0074,1030)",vr:"SQ",name:"DeliveryVerificationImageSequence",vm:"1",version:"DICOM"},"(0074,1032)":{tag:"(0074,1032)",vr:"CS",name:"VerificationImageTiming",vm:"1",version:"DICOM"},"(0074,1034)":{tag:"(0074,1034)",vr:"CS",name:"DoubleExposureFlag",vm:"1",version:"DICOM"},"(0074,1036)":{tag:"(0074,1036)",vr:"CS",name:"DoubleExposureOrdering",vm:"1",version:"DICOM"},"(0074,1040)":{tag:"(0074,1040)",vr:"SQ",name:"RelatedReferenceRTImageSequence",vm:"1",version:"DICOM"},"(0074,1042)":{tag:"(0074,1042)",vr:"SQ",name:"GeneralMachineVerificationSequence",vm:"1",version:"DICOM"},"(0074,1044)":{tag:"(0074,1044)",vr:"SQ",name:"ConventionalMachineVerificationSequence",vm:"1",version:"DICOM"},"(0074,1046)":{tag:"(0074,1046)",vr:"SQ",name:"IonMachineVerificationSequence",vm:"1",version:"DICOM"},"(0074,1048)":{tag:"(0074,1048)",vr:"SQ",name:"FailedAttributesSequence",vm:"1",version:"DICOM"},"(0074,104A)":{tag:"(0074,104A)",vr:"SQ",name:"OverriddenAttributesSequence",vm:"1",version:"DICOM"},"(0074,104C)":{tag:"(0074,104C)",vr:"SQ",name:"ConventionalControlPointVerificationSequence",vm:"1",version:"DICOM"},"(0074,104E)":{tag:"(0074,104E)",vr:"SQ",name:"IonControlPointVerificationSequence",vm:"1",version:"DICOM"},"(0074,1050)":{tag:"(0074,1050)",vr:"SQ",name:"AttributeOccurrenceSequence",vm:"1",version:"DICOM"},"(0074,1052)":{tag:"(0074,1052)",vr:"AT",name:"AttributeOccurrencePointer",vm:"1",version:"DICOM"},"(0074,1054)":{tag:"(0074,1054)",vr:"UL",name:"AttributeItemSelector",vm:"1",version:"DICOM"},"(0074,1056)":{tag:"(0074,1056)",vr:"LO",name:"AttributeOccurrencePrivateCreator",vm:"1",version:"DICOM"},"(0074,1057)":{tag:"(0074,1057)",vr:"IS",name:"SelectorSequencePointerItems",vm:"1-n",version:"DICOM"},"(0074,1200)":{tag:"(0074,1200)",vr:"CS",name:"ScheduledProcedureStepPriority",vm:"1",version:"DICOM"},"(0074,1202)":{tag:"(0074,1202)",vr:"LO",name:"WorklistLabel",vm:"1",version:"DICOM"},"(0074,1204)":{tag:"(0074,1204)",vr:"LO",name:"ProcedureStepLabel",vm:"1",version:"DICOM"},"(0074,1210)":{tag:"(0074,1210)",vr:"SQ",name:"ScheduledProcessingParametersSequence",vm:"1",version:"DICOM"},"(0074,1212)":{tag:"(0074,1212)",vr:"SQ",name:"PerformedProcessingParametersSequence",vm:"1",version:"DICOM"},"(0074,1216)":{tag:"(0074,1216)",vr:"SQ",name:"UnifiedProcedureStepPerformedProcedureSequence",vm:"1",version:"DICOM"},"(0074,1224)":{tag:"(0074,1224)",vr:"SQ",name:"ReplacedProcedureStepSequence",vm:"1",version:"DICOM"},"(0074,1230)":{tag:"(0074,1230)",vr:"LO",name:"DeletionLock",vm:"1",version:"DICOM"},"(0074,1234)":{tag:"(0074,1234)",vr:"AE",name:"ReceivingAE",vm:"1",version:"DICOM"},"(0074,1236)":{tag:"(0074,1236)",vr:"AE",name:"RequestingAE",vm:"1",version:"DICOM"},"(0074,1238)":{tag:"(0074,1238)",vr:"LT",name:"ReasonForCancellation",vm:"1",version:"DICOM"},"(0074,1242)":{tag:"(0074,1242)",vr:"CS",name:"SCPStatus",vm:"1",version:"DICOM"},"(0074,1244)":{tag:"(0074,1244)",vr:"CS",name:"SubscriptionListStatus",vm:"1",version:"DICOM"},"(0074,1246)":{tag:"(0074,1246)",vr:"CS",name:"UnifiedProcedureStepListStatus",vm:"1",version:"DICOM"},"(0074,1324)":{tag:"(0074,1324)",vr:"UL",name:"BeamOrderIndex",vm:"1",version:"DICOM"},"(0074,1338)":{tag:"(0074,1338)",vr:"FD",name:"DoubleExposureMeterset",vm:"1",version:"DICOM"},"(0074,133A)":{tag:"(0074,133A)",vr:"FD",name:"DoubleExposureFieldDelta",vm:"4",version:"DICOM"},"(0076,0001)":{tag:"(0076,0001)",vr:"LO",name:"ImplantAssemblyTemplateName",vm:"1",version:"DICOM"},"(0076,0003)":{tag:"(0076,0003)",vr:"LO",name:"ImplantAssemblyTemplateIssuer",vm:"1",version:"DICOM"},"(0076,0006)":{tag:"(0076,0006)",vr:"LO",name:"ImplantAssemblyTemplateVersion",vm:"1",version:"DICOM"},"(0076,0008)":{tag:"(0076,0008)",vr:"SQ",name:"ReplacedImplantAssemblyTemplateSequence",vm:"1",version:"DICOM"},"(0076,000A)":{tag:"(0076,000A)",vr:"CS",name:"ImplantAssemblyTemplateType",vm:"1",version:"DICOM"},"(0076,000C)":{tag:"(0076,000C)",vr:"SQ",name:"OriginalImplantAssemblyTemplateSequence",vm:"1",version:"DICOM"},"(0076,000E)":{tag:"(0076,000E)",vr:"SQ",name:"DerivationImplantAssemblyTemplateSequence",vm:"1",version:"DICOM"},"(0076,0010)":{tag:"(0076,0010)",vr:"SQ",name:"ImplantAssemblyTemplateTargetAnatomySequence",vm:"1",version:"DICOM"},"(0076,0020)":{tag:"(0076,0020)",vr:"SQ",name:"ProcedureTypeCodeSequence",vm:"1",version:"DICOM"},"(0076,0030)":{tag:"(0076,0030)",vr:"LO",name:"SurgicalTechnique",vm:"1",version:"DICOM"},"(0076,0032)":{tag:"(0076,0032)",vr:"SQ",name:"ComponentTypesSequence",vm:"1",version:"DICOM"},"(0076,0034)":{tag:"(0076,0034)",vr:"CS",name:"ComponentTypeCodeSequence",vm:"1",version:"DICOM"},"(0076,0036)":{tag:"(0076,0036)",vr:"CS",name:"ExclusiveComponentType",vm:"1",version:"DICOM"},"(0076,0038)":{tag:"(0076,0038)",vr:"CS",name:"MandatoryComponentType",vm:"1",version:"DICOM"},"(0076,0040)":{tag:"(0076,0040)",vr:"SQ",name:"ComponentSequence",vm:"1",version:"DICOM"},"(0076,0055)":{tag:"(0076,0055)",vr:"US",name:"ComponentID",vm:"1",version:"DICOM"},"(0076,0060)":{tag:"(0076,0060)",vr:"SQ",name:"ComponentAssemblySequence",vm:"1",version:"DICOM"},"(0076,0070)":{tag:"(0076,0070)",vr:"US",name:"Component1ReferencedID",vm:"1",version:"DICOM"},"(0076,0080)":{tag:"(0076,0080)",vr:"US",name:"Component1ReferencedMatingFeatureSetID",vm:"1",version:"DICOM"},"(0076,0090)":{tag:"(0076,0090)",vr:"US",name:"Component1ReferencedMatingFeatureID",vm:"1",version:"DICOM"},"(0076,00A0)":{tag:"(0076,00A0)",vr:"US",name:"Component2ReferencedID",vm:"1",version:"DICOM"},"(0076,00B0)":{tag:"(0076,00B0)",vr:"US",name:"Component2ReferencedMatingFeatureSetID",vm:"1",version:"DICOM"},"(0076,00C0)":{tag:"(0076,00C0)",vr:"US",name:"Component2ReferencedMatingFeatureID",vm:"1",version:"DICOM"},"(0078,0001)":{tag:"(0078,0001)",vr:"LO",name:"ImplantTemplateGroupName",vm:"1",version:"DICOM"},"(0078,0010)":{tag:"(0078,0010)",vr:"ST",name:"ImplantTemplateGroupDescription",vm:"1",version:"DICOM"},"(0078,0020)":{tag:"(0078,0020)",vr:"LO",name:"ImplantTemplateGroupIssuer",vm:"1",version:"DICOM"},"(0078,0024)":{tag:"(0078,0024)",vr:"LO",name:"ImplantTemplateGroupVersion",vm:"1",version:"DICOM"},"(0078,0026)":{tag:"(0078,0026)",vr:"SQ",name:"ReplacedImplantTemplateGroupSequence",vm:"1",version:"DICOM"},"(0078,0028)":{tag:"(0078,0028)",vr:"SQ",name:"ImplantTemplateGroupTargetAnatomySequence",vm:"1",version:"DICOM"},"(0078,002A)":{tag:"(0078,002A)",vr:"SQ",name:"ImplantTemplateGroupMembersSequence",vm:"1",version:"DICOM"},"(0078,002E)":{tag:"(0078,002E)",vr:"US",name:"ImplantTemplateGroupMemberID",vm:"1",version:"DICOM"},"(0078,0050)":{tag:"(0078,0050)",vr:"FD",name:"ThreeDImplantTemplateGroupMemberMatchingPoint",vm:"3",version:"DICOM"},"(0078,0060)":{tag:"(0078,0060)",vr:"FD",name:"ThreeDImplantTemplateGroupMemberMatchingAxes",vm:"9",version:"DICOM"},"(0078,0070)":{tag:"(0078,0070)",vr:"SQ",name:"ImplantTemplateGroupMemberMatching2DCoordinatesSequence",vm:"1",version:"DICOM"},"(0078,0090)":{tag:"(0078,0090)",vr:"FD",name:"TwoDImplantTemplateGroupMemberMatchingPoint",vm:"2",version:"DICOM"},"(0078,00A0)":{tag:"(0078,00A0)",vr:"FD",name:"TwoDImplantTemplateGroupMemberMatchingAxes",vm:"4",version:"DICOM"},"(0078,00B0)":{tag:"(0078,00B0)",vr:"SQ",name:"ImplantTemplateGroupVariationDimensionSequence",vm:"1",version:"DICOM"},"(0078,00B2)":{tag:"(0078,00B2)",vr:"LO",name:"ImplantTemplateGroupVariationDimensionName",vm:"1",version:"DICOM"},"(0078,00B4)":{tag:"(0078,00B4)",vr:"SQ",name:"ImplantTemplateGroupVariationDimensionRankSequence",vm:"1",version:"DICOM"},"(0078,00B6)":{tag:"(0078,00B6)",vr:"US",name:"ReferencedImplantTemplateGroupMemberID",vm:"1",version:"DICOM"},"(0078,00B8)":{tag:"(0078,00B8)",vr:"US",name:"ImplantTemplateGroupVariationDimensionRank",vm:"1",version:"DICOM"},"(0080,0001)":{tag:"(0080,0001)",vr:"SQ",name:"SurfaceScanAcquisitionTypeCodeSequence",vm:"1",version:"DICOM"},"(0080,0002)":{tag:"(0080,0002)",vr:"SQ",name:"SurfaceScanModeCodeSequence",vm:"1",version:"DICOM"},"(0080,0003)":{tag:"(0080,0003)",vr:"SQ",name:"RegistrationMethodCodeSequence",vm:"1",version:"DICOM"},"(0080,0004)":{tag:"(0080,0004)",vr:"FD",name:"ShotDurationTime",vm:"1",version:"DICOM"},"(0080,0005)":{tag:"(0080,0005)",vr:"FD",name:"ShotOffsetTime",vm:"1",version:"DICOM"},"(0080,0006)":{tag:"(0080,0006)",vr:"US",name:"SurfacePointPresentationValueData",vm:"1-n",version:"DICOM"},"(0080,0007)":{tag:"(0080,0007)",vr:"US",name:"SurfacePointColorCIELabValueData",vm:"3-3n",version:"DICOM"},"(0080,0008)":{tag:"(0080,0008)",vr:"SQ",name:"UVMappingSequence",vm:"1",version:"DICOM"},"(0080,0009)":{tag:"(0080,0009)",vr:"SH",name:"TextureLabel",vm:"1",version:"DICOM"},"(0080,0010)":{tag:"(0080,0010)",vr:"OF",name:"UValueData",vm:"1-n",version:"DICOM"},"(0080,0011)":{tag:"(0080,0011)",vr:"OF",name:"VValueData",vm:"1-n",version:"DICOM"},"(0080,0012)":{tag:"(0080,0012)",vr:"SQ",name:"ReferencedTextureSequence",vm:"1",version:"DICOM"},"(0080,0013)":{tag:"(0080,0013)",vr:"SQ",name:"ReferencedSurfaceDataSequence",vm:"1",version:"DICOM"},"(0088,0130)":{tag:"(0088,0130)",vr:"SH",name:"StorageMediaFileSetID",vm:"1",version:"DICOM"},"(0088,0140)":{tag:"(0088,0140)",vr:"UI",name:"StorageMediaFileSetUID",vm:"1",version:"DICOM"},"(0088,0200)":{tag:"(0088,0200)",vr:"SQ",name:"IconImageSequence",vm:"1",version:"DICOM"},"(0100,0410)":{tag:"(0100,0410)",vr:"CS",name:"SOPInstanceStatus",vm:"1",version:"DICOM"},"(0100,0420)":{tag:"(0100,0420)",vr:"DT",name:"SOPAuthorizationDateTime",vm:"1",version:"DICOM"},"(0100,0424)":{tag:"(0100,0424)",vr:"LT",name:"SOPAuthorizationComment",vm:"1",version:"DICOM"},"(0100,0426)":{tag:"(0100,0426)",vr:"LO",name:"AuthorizationEquipmentCertificationNumber",vm:"1",version:"DICOM"},"(0400,0005)":{tag:"(0400,0005)",vr:"US",name:"MACIDNumber",vm:"1",version:"DICOM"},"(0400,0010)":{tag:"(0400,0010)",vr:"UI",name:"MACCalculationTransferSyntaxUID",vm:"1",version:"DICOM"},"(0400,0015)":{tag:"(0400,0015)",vr:"CS",name:"MACAlgorithm",vm:"1",version:"DICOM"},"(0400,0020)":{tag:"(0400,0020)",vr:"AT",name:"DataElementsSigned",vm:"1-n",version:"DICOM"},"(0400,0100)":{tag:"(0400,0100)",vr:"UI",name:"DigitalSignatureUID",vm:"1",version:"DICOM"},"(0400,0105)":{tag:"(0400,0105)",vr:"DT",name:"DigitalSignatureDateTime",vm:"1",version:"DICOM"},"(0400,0110)":{tag:"(0400,0110)",vr:"CS",name:"CertificateType",vm:"1",version:"DICOM"},"(0400,0115)":{tag:"(0400,0115)",vr:"OB",name:"CertificateOfSigner",vm:"1",version:"DICOM"},"(0400,0120)":{tag:"(0400,0120)",vr:"OB",name:"Signature",vm:"1",version:"DICOM"},"(0400,0305)":{tag:"(0400,0305)",vr:"CS",name:"CertifiedTimestampType",vm:"1",version:"DICOM"},"(0400,0310)":{tag:"(0400,0310)",vr:"OB",name:"CertifiedTimestamp",vm:"1",version:"DICOM"},"(0400,0401)":{tag:"(0400,0401)",vr:"SQ",name:"DigitalSignaturePurposeCodeSequence",vm:"1",version:"DICOM"},"(0400,0402)":{tag:"(0400,0402)",vr:"SQ",name:"ReferencedDigitalSignatureSequence",vm:"1",version:"DICOM"},"(0400,0403)":{tag:"(0400,0403)",vr:"SQ",name:"ReferencedSOPInstanceMACSequence",vm:"1",version:"DICOM"},"(0400,0404)":{tag:"(0400,0404)",vr:"OB",name:"MAC",vm:"1",version:"DICOM"},"(0400,0500)":{tag:"(0400,0500)",vr:"SQ",name:"EncryptedAttributesSequence",vm:"1",version:"DICOM"},"(0400,0510)":{tag:"(0400,0510)",vr:"UI",name:"EncryptedContentTransferSyntaxUID",vm:"1",version:"DICOM"},"(0400,0520)":{tag:"(0400,0520)",vr:"OB",name:"EncryptedContent",vm:"1",version:"DICOM"},"(0400,0550)":{tag:"(0400,0550)",vr:"SQ",name:"ModifiedAttributesSequence",vm:"1",version:"DICOM"},"(0400,0561)":{tag:"(0400,0561)",vr:"SQ",name:"OriginalAttributesSequence",vm:"1",version:"DICOM"},"(0400,0562)":{tag:"(0400,0562)",vr:"DT",name:"AttributeModificationDateTime",vm:"1",version:"DICOM"},"(0400,0563)":{tag:"(0400,0563)",vr:"LO",name:"ModifyingSystem",vm:"1",version:"DICOM"},"(0400,0564)":{tag:"(0400,0564)",vr:"LO",name:"SourceOfPreviousValues",vm:"1",version:"DICOM"},"(0400,0565)":{tag:"(0400,0565)",vr:"CS",name:"ReasonForTheAttributeModification",vm:"1",version:"DICOM"},"(2000,0010)":{tag:"(2000,0010)",vr:"IS",name:"NumberOfCopies",vm:"1",version:"DICOM"},"(2000,001E)":{tag:"(2000,001E)",vr:"SQ",name:"PrinterConfigurationSequence",vm:"1",version:"DICOM"},"(2000,0020)":{tag:"(2000,0020)",vr:"CS",name:"PrintPriority",vm:"1",version:"DICOM"},"(2000,0030)":{tag:"(2000,0030)",vr:"CS",name:"MediumType",vm:"1",version:"DICOM"},"(2000,0040)":{tag:"(2000,0040)",vr:"CS",name:"FilmDestination",vm:"1",version:"DICOM"},"(2000,0050)":{tag:"(2000,0050)",vr:"LO",name:"FilmSessionLabel",vm:"1",version:"DICOM"},"(2000,0060)":{tag:"(2000,0060)",vr:"IS",name:"MemoryAllocation",vm:"1",version:"DICOM"},"(2000,0061)":{tag:"(2000,0061)",vr:"IS",name:"MaximumMemoryAllocation",vm:"1",version:"DICOM"},"(2000,00A0)":{tag:"(2000,00A0)",vr:"US",name:"MemoryBitDepth",vm:"1",version:"DICOM"},"(2000,00A1)":{tag:"(2000,00A1)",vr:"US",name:"PrintingBitDepth",vm:"1",version:"DICOM"},"(2000,00A2)":{tag:"(2000,00A2)",vr:"SQ",name:"MediaInstalledSequence",vm:"1",version:"DICOM"},"(2000,00A4)":{tag:"(2000,00A4)",vr:"SQ",name:"OtherMediaAvailableSequence",vm:"1",version:"DICOM"},"(2000,00A8)":{tag:"(2000,00A8)",vr:"SQ",name:"SupportedImageDisplayFormatsSequence",vm:"1",version:"DICOM"},"(2000,0500)":{tag:"(2000,0500)",vr:"SQ",name:"ReferencedFilmBoxSequence",vm:"1",version:"DICOM"},"(2010,0010)":{tag:"(2010,0010)",vr:"ST",name:"ImageDisplayFormat",vm:"1",version:"DICOM"},"(2010,0030)":{tag:"(2010,0030)",vr:"CS",name:"AnnotationDisplayFormatID",vm:"1",version:"DICOM"},"(2010,0040)":{tag:"(2010,0040)",vr:"CS",name:"FilmOrientation",vm:"1",version:"DICOM"},"(2010,0050)":{tag:"(2010,0050)",vr:"CS",name:"FilmSizeID",vm:"1",version:"DICOM"},"(2010,0052)":{tag:"(2010,0052)",vr:"CS",name:"PrinterResolutionID",vm:"1",version:"DICOM"},"(2010,0054)":{tag:"(2010,0054)",vr:"CS",name:"DefaultPrinterResolutionID",vm:"1",version:"DICOM"},"(2010,0060)":{tag:"(2010,0060)",vr:"CS",name:"MagnificationType",vm:"1",version:"DICOM"},"(2010,0080)":{tag:"(2010,0080)",vr:"CS",name:"SmoothingType",vm:"1",version:"DICOM"},"(2010,00A6)":{tag:"(2010,00A6)",vr:"CS",name:"DefaultMagnificationType",vm:"1",version:"DICOM"},"(2010,00A7)":{tag:"(2010,00A7)",vr:"CS",name:"OtherMagnificationTypesAvailable",vm:"1-n",version:"DICOM"},"(2010,00A8)":{tag:"(2010,00A8)",vr:"CS",name:"DefaultSmoothingType",vm:"1",version:"DICOM"},"(2010,00A9)":{tag:"(2010,00A9)",vr:"CS",name:"OtherSmoothingTypesAvailable",vm:"1-n",version:"DICOM"},"(2010,0100)":{tag:"(2010,0100)",vr:"CS",name:"BorderDensity",vm:"1",version:"DICOM"},"(2010,0110)":{tag:"(2010,0110)",vr:"CS",name:"EmptyImageDensity",vm:"1",version:"DICOM"},"(2010,0120)":{tag:"(2010,0120)",vr:"US",name:"MinDensity",vm:"1",version:"DICOM"},"(2010,0130)":{tag:"(2010,0130)",vr:"US",name:"MaxDensity",vm:"1",version:"DICOM"},"(2010,0140)":{tag:"(2010,0140)",vr:"CS",name:"Trim",vm:"1",version:"DICOM"},"(2010,0150)":{tag:"(2010,0150)",vr:"ST",name:"ConfigurationInformation",vm:"1",version:"DICOM"},"(2010,0152)":{tag:"(2010,0152)",vr:"LT",name:"ConfigurationInformationDescription",vm:"1",version:"DICOM"},"(2010,0154)":{tag:"(2010,0154)",vr:"IS",name:"MaximumCollatedFilms",vm:"1",version:"DICOM"},"(2010,015E)":{tag:"(2010,015E)",vr:"US",name:"Illumination",vm:"1",version:"DICOM"},"(2010,0160)":{tag:"(2010,0160)",vr:"US",name:"ReflectedAmbientLight",vm:"1",version:"DICOM"},"(2010,0376)":{tag:"(2010,0376)",vr:"DS",name:"PrinterPixelSpacing",vm:"2",version:"DICOM"},"(2010,0500)":{tag:"(2010,0500)",vr:"SQ",name:"ReferencedFilmSessionSequence",vm:"1",version:"DICOM"},"(2010,0510)":{tag:"(2010,0510)",vr:"SQ",name:"ReferencedImageBoxSequence",vm:"1",version:"DICOM"},"(2010,0520)":{tag:"(2010,0520)",vr:"SQ",name:"ReferencedBasicAnnotationBoxSequence",vm:"1",version:"DICOM"},"(2020,0010)":{tag:"(2020,0010)",vr:"US",name:"ImageBoxPosition",vm:"1",version:"DICOM"},"(2020,0020)":{tag:"(2020,0020)",vr:"CS",name:"Polarity",vm:"1",version:"DICOM"},"(2020,0030)":{tag:"(2020,0030)",vr:"DS",name:"RequestedImageSize",vm:"1",version:"DICOM"},"(2020,0040)":{tag:"(2020,0040)",vr:"CS",name:"RequestedDecimateCropBehavior",vm:"1",version:"DICOM"},"(2020,0050)":{tag:"(2020,0050)",vr:"CS",name:"RequestedResolutionID",vm:"1",version:"DICOM"},"(2020,00A0)":{tag:"(2020,00A0)",vr:"CS",name:"RequestedImageSizeFlag",vm:"1",version:"DICOM"},"(2020,00A2)":{tag:"(2020,00A2)",vr:"CS",name:"DecimateCropResult",vm:"1",version:"DICOM"},"(2020,0110)":{tag:"(2020,0110)",vr:"SQ",name:"BasicGrayscaleImageSequence",vm:"1",version:"DICOM"},"(2020,0111)":{tag:"(2020,0111)",vr:"SQ",name:"BasicColorImageSequence",vm:"1",version:"DICOM"},"(2030,0010)":{tag:"(2030,0010)",vr:"US",name:"AnnotationPosition",vm:"1",version:"DICOM"},"(2030,0020)":{tag:"(2030,0020)",vr:"LO",name:"TextString",vm:"1",version:"DICOM"},"(2050,0010)":{tag:"(2050,0010)",vr:"SQ",name:"PresentationLUTSequence",vm:"1",version:"DICOM"},"(2050,0020)":{tag:"(2050,0020)",vr:"CS",name:"PresentationLUTShape",vm:"1",version:"DICOM"},"(2050,0500)":{tag:"(2050,0500)",vr:"SQ",name:"ReferencedPresentationLUTSequence",vm:"1",version:"DICOM"},"(2100,0020)":{tag:"(2100,0020)",vr:"CS",name:"ExecutionStatus",vm:"1",version:"DICOM"},"(2100,0030)":{tag:"(2100,0030)",vr:"CS",name:"ExecutionStatusInfo",vm:"1",version:"DICOM"},"(2100,0040)":{tag:"(2100,0040)",vr:"DA",name:"CreationDate",vm:"1",version:"DICOM"},"(2100,0050)":{tag:"(2100,0050)",vr:"TM",name:"CreationTime",vm:"1",version:"DICOM"},"(2100,0070)":{tag:"(2100,0070)",vr:"AE",name:"Originator",vm:"1",version:"DICOM"},"(2100,0160)":{tag:"(2100,0160)",vr:"SH",name:"OwnerID",vm:"1",version:"DICOM"},"(2100,0170)":{tag:"(2100,0170)",vr:"IS",name:"NumberOfFilms",vm:"1",version:"DICOM"},"(2110,0010)":{tag:"(2110,0010)",vr:"CS",name:"PrinterStatus",vm:"1",version:"DICOM"},"(2110,0020)":{tag:"(2110,0020)",vr:"CS",name:"PrinterStatusInfo",vm:"1",version:"DICOM"},"(2110,0030)":{tag:"(2110,0030)",vr:"LO",name:"PrinterName",vm:"1",version:"DICOM"},"(2200,0001)":{tag:"(2200,0001)",vr:"CS",name:"LabelUsingInformationExtractedFromInstances",vm:"1",version:"DICOM"},"(2200,0002)":{tag:"(2200,0002)",vr:"UT",name:"LabelText",vm:"1",version:"DICOM"},"(2200,0003)":{tag:"(2200,0003)",vr:"CS",name:"LabelStyleSelection",vm:"1",version:"DICOM"},"(2200,0004)":{tag:"(2200,0004)",vr:"LT",name:"MediaDisposition",vm:"1",version:"DICOM"},"(2200,0005)":{tag:"(2200,0005)",vr:"LT",name:"BarcodeValue",vm:"1",version:"DICOM"},"(2200,0006)":{tag:"(2200,0006)",vr:"CS",name:"BarcodeSymbology",vm:"1",version:"DICOM"},"(2200,0007)":{tag:"(2200,0007)",vr:"CS",name:"AllowMediaSplitting",vm:"1",version:"DICOM"},"(2200,0008)":{tag:"(2200,0008)",vr:"CS",name:"IncludeNonDICOMObjects",vm:"1",version:"DICOM"},"(2200,0009)":{tag:"(2200,0009)",vr:"CS",name:"IncludeDisplayApplication",vm:"1",version:"DICOM"},"(2200,000A)":{tag:"(2200,000A)",vr:"CS",name:"PreserveCompositeInstancesAfterMediaCreation",vm:"1",version:"DICOM"},"(2200,000B)":{tag:"(2200,000B)",vr:"US",name:"TotalNumberOfPiecesOfMediaCreated",vm:"1",version:"DICOM"},"(2200,000C)":{tag:"(2200,000C)",vr:"LO",name:"RequestedMediaApplicationProfile",vm:"1",version:"DICOM"},"(2200,000D)":{tag:"(2200,000D)",vr:"SQ",name:"ReferencedStorageMediaSequence",vm:"1",version:"DICOM"},"(2200,000E)":{tag:"(2200,000E)",vr:"AT",name:"FailureAttributes",vm:"1-n",version:"DICOM"},"(2200,000F)":{tag:"(2200,000F)",vr:"CS",name:"AllowLossyCompression",vm:"1",version:"DICOM"},"(2200,0020)":{tag:"(2200,0020)",vr:"CS",name:"RequestPriority",vm:"1",version:"DICOM"},"(3002,0002)":{tag:"(3002,0002)",vr:"SH",name:"RTImageLabel",vm:"1",version:"DICOM"},"(3002,0003)":{tag:"(3002,0003)",vr:"LO",name:"RTImageName",vm:"1",version:"DICOM"},"(3002,0004)":{tag:"(3002,0004)",vr:"ST",name:"RTImageDescription",vm:"1",version:"DICOM"},"(3002,000A)":{tag:"(3002,000A)",vr:"CS",name:"ReportedValuesOrigin",vm:"1",version:"DICOM"},"(3002,000C)":{tag:"(3002,000C)",vr:"CS",name:"RTImagePlane",vm:"1",version:"DICOM"},"(3002,000D)":{tag:"(3002,000D)",vr:"DS",name:"XRayImageReceptorTranslation",vm:"3",version:"DICOM"},"(3002,000E)":{tag:"(3002,000E)",vr:"DS",name:"XRayImageReceptorAngle",vm:"1",version:"DICOM"},"(3002,0010)":{tag:"(3002,0010)",vr:"DS",name:"RTImageOrientation",vm:"6",version:"DICOM"},"(3002,0011)":{tag:"(3002,0011)",vr:"DS",name:"ImagePlanePixelSpacing",vm:"2",version:"DICOM"},"(3002,0012)":{tag:"(3002,0012)",vr:"DS",name:"RTImagePosition",vm:"2",version:"DICOM"},"(3002,0020)":{tag:"(3002,0020)",vr:"SH",name:"RadiationMachineName",vm:"1",version:"DICOM"},"(3002,0022)":{tag:"(3002,0022)",vr:"DS",name:"RadiationMachineSAD",vm:"1",version:"DICOM"},"(3002,0024)":{tag:"(3002,0024)",vr:"DS",name:"RadiationMachineSSD",vm:"1",version:"DICOM"},"(3002,0026)":{tag:"(3002,0026)",vr:"DS",name:"RTImageSID",vm:"1",version:"DICOM"},"(3002,0028)":{tag:"(3002,0028)",vr:"DS",name:"SourceToReferenceObjectDistance",vm:"1",version:"DICOM"},"(3002,0029)":{tag:"(3002,0029)",vr:"IS",name:"FractionNumber",vm:"1",version:"DICOM"},"(3002,0030)":{tag:"(3002,0030)",vr:"SQ",name:"ExposureSequence",vm:"1",version:"DICOM"},"(3002,0032)":{tag:"(3002,0032)",vr:"DS",name:"MetersetExposure",vm:"1",version:"DICOM"},"(3002,0034)":{tag:"(3002,0034)",vr:"DS",name:"DiaphragmPosition",vm:"4",version:"DICOM"},"(3002,0040)":{tag:"(3002,0040)",vr:"SQ",name:"FluenceMapSequence",vm:"1",version:"DICOM"},"(3002,0041)":{tag:"(3002,0041)",vr:"CS",name:"FluenceDataSource",vm:"1",version:"DICOM"},"(3002,0042)":{tag:"(3002,0042)",vr:"DS",name:"FluenceDataScale",vm:"1",version:"DICOM"},"(3002,0050)":{tag:"(3002,0050)",vr:"SQ",name:"PrimaryFluenceModeSequence",vm:"1",version:"DICOM"},"(3002,0051)":{tag:"(3002,0051)",vr:"CS",name:"FluenceMode",vm:"1",version:"DICOM"},"(3002,0052)":{tag:"(3002,0052)",vr:"SH",name:"FluenceModeID",vm:"1",version:"DICOM"},"(3004,0001)":{tag:"(3004,0001)",vr:"CS",name:"DVHType",vm:"1",version:"DICOM"},"(3004,0002)":{tag:"(3004,0002)",vr:"CS",name:"DoseUnits",vm:"1",version:"DICOM"},"(3004,0004)":{tag:"(3004,0004)",vr:"CS",name:"DoseType",vm:"1",version:"DICOM"},"(3004,0005)":{tag:"(3004,0005)",vr:"CS",name:"SpatialTransformOfDose",vm:"1",version:"DICOM"},"(3004,0006)":{tag:"(3004,0006)",vr:"LO",name:"DoseComment",vm:"1",version:"DICOM"},"(3004,0008)":{tag:"(3004,0008)",vr:"DS",name:"NormalizationPoint",vm:"3",version:"DICOM"},"(3004,000A)":{tag:"(3004,000A)",vr:"CS",name:"DoseSummationType",vm:"1",version:"DICOM"},"(3004,000C)":{tag:"(3004,000C)",vr:"DS",name:"GridFrameOffsetVector",vm:"2-n",version:"DICOM"},"(3004,000E)":{tag:"(3004,000E)",vr:"DS",name:"DoseGridScaling",vm:"1",version:"DICOM"},"(3004,0010)":{tag:"(3004,0010)",vr:"SQ",name:"RTDoseROISequence",vm:"1",version:"DICOM"},"(3004,0012)":{tag:"(3004,0012)",vr:"DS",name:"DoseValue",vm:"1",version:"DICOM"},"(3004,0014)":{tag:"(3004,0014)",vr:"CS",name:"TissueHeterogeneityCorrection",vm:"1-3",version:"DICOM"},"(3004,0040)":{tag:"(3004,0040)",vr:"DS",name:"DVHNormalizationPoint",vm:"3",version:"DICOM"},"(3004,0042)":{tag:"(3004,0042)",vr:"DS",name:"DVHNormalizationDoseValue",vm:"1",version:"DICOM"},"(3004,0050)":{tag:"(3004,0050)",vr:"SQ",name:"DVHSequence",vm:"1",version:"DICOM"},"(3004,0052)":{tag:"(3004,0052)",vr:"DS",name:"DVHDoseScaling",vm:"1",version:"DICOM"},"(3004,0054)":{tag:"(3004,0054)",vr:"CS",name:"DVHVolumeUnits",vm:"1",version:"DICOM"},"(3004,0056)":{tag:"(3004,0056)",vr:"IS",name:"DVHNumberOfBins",vm:"1",version:"DICOM"},"(3004,0058)":{tag:"(3004,0058)",vr:"DS",name:"DVHData",vm:"2-2n",version:"DICOM"},"(3004,0060)":{tag:"(3004,0060)",vr:"SQ",name:"DVHReferencedROISequence",vm:"1",version:"DICOM"},"(3004,0062)":{tag:"(3004,0062)",vr:"CS",name:"DVHROIContributionType",vm:"1",version:"DICOM"},"(3004,0070)":{tag:"(3004,0070)",vr:"DS",name:"DVHMinimumDose",vm:"1",version:"DICOM"},"(3004,0072)":{tag:"(3004,0072)",vr:"DS",name:"DVHMaximumDose",vm:"1",version:"DICOM"},"(3004,0074)":{tag:"(3004,0074)",vr:"DS",name:"DVHMeanDose",vm:"1",version:"DICOM"},"(3006,0002)":{tag:"(3006,0002)",vr:"SH",name:"StructureSetLabel",vm:"1",version:"DICOM"},"(3006,0004)":{tag:"(3006,0004)",vr:"LO",name:"StructureSetName",vm:"1",version:"DICOM"},"(3006,0006)":{tag:"(3006,0006)",vr:"ST",name:"StructureSetDescription",vm:"1",version:"DICOM"},"(3006,0008)":{tag:"(3006,0008)",vr:"DA",name:"StructureSetDate",vm:"1",version:"DICOM"},"(3006,0009)":{tag:"(3006,0009)",vr:"TM",name:"StructureSetTime",vm:"1",version:"DICOM"},"(3006,0010)":{tag:"(3006,0010)",vr:"SQ",name:"ReferencedFrameOfReferenceSequence",vm:"1",version:"DICOM"},"(3006,0012)":{tag:"(3006,0012)",vr:"SQ",name:"RTReferencedStudySequence",vm:"1",version:"DICOM"},"(3006,0014)":{tag:"(3006,0014)",vr:"SQ",name:"RTReferencedSeriesSequence",vm:"1",version:"DICOM"},"(3006,0016)":{tag:"(3006,0016)",vr:"SQ",name:"ContourImageSequence",vm:"1",version:"DICOM"},"(3006,0018)":{tag:"(3006,0018)",vr:"SQ",name:"PredecessorStructureSetSequence",vm:"1",version:"DICOM"},"(3006,0020)":{tag:"(3006,0020)",vr:"SQ",name:"StructureSetROISequence",vm:"1",version:"DICOM"},"(3006,0022)":{tag:"(3006,0022)",vr:"IS",name:"ROINumber",vm:"1",version:"DICOM"},"(3006,0024)":{tag:"(3006,0024)",vr:"UI",name:"ReferencedFrameOfReferenceUID",vm:"1",version:"DICOM"},"(3006,0026)":{tag:"(3006,0026)",vr:"LO",name:"ROIName",vm:"1",version:"DICOM"},"(3006,0028)":{tag:"(3006,0028)",vr:"ST",name:"ROIDescription",vm:"1",version:"DICOM"},"(3006,002A)":{tag:"(3006,002A)",vr:"IS",name:"ROIDisplayColor",vm:"3",version:"DICOM"},"(3006,002C)":{tag:"(3006,002C)",vr:"DS",name:"ROIVolume",vm:"1",version:"DICOM"},"(3006,0030)":{tag:"(3006,0030)",vr:"SQ",name:"RTRelatedROISequence",vm:"1",version:"DICOM"},"(3006,0033)":{tag:"(3006,0033)",vr:"CS",name:"RTROIRelationship",vm:"1",version:"DICOM"},"(3006,0036)":{tag:"(3006,0036)",vr:"CS",name:"ROIGenerationAlgorithm",vm:"1",version:"DICOM"},"(3006,0038)":{tag:"(3006,0038)",vr:"LO",name:"ROIGenerationDescription",vm:"1",version:"DICOM"},"(3006,0039)":{tag:"(3006,0039)",vr:"SQ",name:"ROIContourSequence",vm:"1",version:"DICOM"},"(3006,0040)":{tag:"(3006,0040)",vr:"SQ",name:"ContourSequence",vm:"1",version:"DICOM"},"(3006,0042)":{tag:"(3006,0042)",vr:"CS",name:"ContourGeometricType",vm:"1",version:"DICOM"},"(3006,0044)":{tag:"(3006,0044)",vr:"DS",name:"ContourSlabThickness",vm:"1",version:"DICOM"},"(3006,0045)":{tag:"(3006,0045)",vr:"DS",name:"ContourOffsetVector",vm:"3",version:"DICOM"},"(3006,0046)":{tag:"(3006,0046)",vr:"IS",name:"NumberOfContourPoints",vm:"1",version:"DICOM"},"(3006,0048)":{tag:"(3006,0048)",vr:"IS",name:"ContourNumber",vm:"1",version:"DICOM"},"(3006,0049)":{tag:"(3006,0049)",vr:"IS",name:"AttachedContours",vm:"1-n",version:"DICOM"},"(3006,0050)":{tag:"(3006,0050)",vr:"DS",name:"ContourData",vm:"3-3n",version:"DICOM"},"(3006,0080)":{tag:"(3006,0080)",vr:"SQ",name:"RTROIObservationsSequence",vm:"1",version:"DICOM"},"(3006,0082)":{tag:"(3006,0082)",vr:"IS",name:"ObservationNumber",vm:"1",version:"DICOM"},"(3006,0084)":{tag:"(3006,0084)",vr:"IS",name:"ReferencedROINumber",vm:"1",version:"DICOM"},"(3006,0085)":{tag:"(3006,0085)",vr:"SH",name:"ROIObservationLabel",vm:"1",version:"DICOM"},"(3006,0086)":{tag:"(3006,0086)",vr:"SQ",name:"RTROIIdentificationCodeSequence",vm:"1",version:"DICOM"},"(3006,0088)":{tag:"(3006,0088)",vr:"ST",name:"ROIObservationDescription",vm:"1",version:"DICOM"},"(3006,00A0)":{tag:"(3006,00A0)",vr:"SQ",name:"RelatedRTROIObservationsSequence",vm:"1",version:"DICOM"},"(3006,00A4)":{tag:"(3006,00A4)",vr:"CS",name:"RTROIInterpretedType",vm:"1",version:"DICOM"},"(3006,00A6)":{tag:"(3006,00A6)",vr:"PN",name:"ROIInterpreter",vm:"1",version:"DICOM"},"(3006,00B0)":{tag:"(3006,00B0)",vr:"SQ",name:"ROIPhysicalPropertiesSequence",vm:"1",version:"DICOM"},"(3006,00B2)":{tag:"(3006,00B2)",vr:"CS",name:"ROIPhysicalProperty",vm:"1",version:"DICOM"},"(3006,00B4)":{tag:"(3006,00B4)",vr:"DS",name:"ROIPhysicalPropertyValue",vm:"1",version:"DICOM"},"(3006,00B6)":{tag:"(3006,00B6)",vr:"SQ",name:"ROIElementalCompositionSequence",vm:"1",version:"DICOM"},"(3006,00B7)":{tag:"(3006,00B7)",vr:"US",name:"ROIElementalCompositionAtomicNumber",vm:"1",version:"DICOM"},"(3006,00B8)":{tag:"(3006,00B8)",vr:"FL",name:"ROIElementalCompositionAtomicMassFraction",vm:"1",version:"DICOM"},"(3006,00B9)":{tag:"(3006,00B9)",vr:"SQ",name:"AdditionalRTROIIdentificationCodeSequence",vm:"1",version:"DICOM"},"(3006,00C6)":{tag:"(3006,00C6)",vr:"DS",name:"FrameOfReferenceTransformationMatrix",vm:"16",version:"DICOM"},"(3006,00C8)":{tag:"(3006,00C8)",vr:"LO",name:"FrameOfReferenceTransformationComment",vm:"1",version:"DICOM"},"(3008,0010)":{tag:"(3008,0010)",vr:"SQ",name:"MeasuredDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,0012)":{tag:"(3008,0012)",vr:"ST",name:"MeasuredDoseDescription",vm:"1",version:"DICOM"},"(3008,0014)":{tag:"(3008,0014)",vr:"CS",name:"MeasuredDoseType",vm:"1",version:"DICOM"},"(3008,0016)":{tag:"(3008,0016)",vr:"DS",name:"MeasuredDoseValue",vm:"1",version:"DICOM"},"(3008,0020)":{tag:"(3008,0020)",vr:"SQ",name:"TreatmentSessionBeamSequence",vm:"1",version:"DICOM"},"(3008,0021)":{tag:"(3008,0021)",vr:"SQ",name:"TreatmentSessionIonBeamSequence",vm:"1",version:"DICOM"},"(3008,0022)":{tag:"(3008,0022)",vr:"IS",name:"CurrentFractionNumber",vm:"1",version:"DICOM"},"(3008,0024)":{tag:"(3008,0024)",vr:"DA",name:"TreatmentControlPointDate",vm:"1",version:"DICOM"},"(3008,0025)":{tag:"(3008,0025)",vr:"TM",name:"TreatmentControlPointTime",vm:"1",version:"DICOM"},"(3008,002A)":{tag:"(3008,002A)",vr:"CS",name:"TreatmentTerminationStatus",vm:"1",version:"DICOM"},"(3008,002B)":{tag:"(3008,002B)",vr:"SH",name:"TreatmentTerminationCode",vm:"1",version:"DICOM"},"(3008,002C)":{tag:"(3008,002C)",vr:"CS",name:"TreatmentVerificationStatus",vm:"1",version:"DICOM"},"(3008,0030)":{tag:"(3008,0030)",vr:"SQ",name:"ReferencedTreatmentRecordSequence",vm:"1",version:"DICOM"},"(3008,0032)":{tag:"(3008,0032)",vr:"DS",name:"SpecifiedPrimaryMeterset",vm:"1",version:"DICOM"},"(3008,0033)":{tag:"(3008,0033)",vr:"DS",name:"SpecifiedSecondaryMeterset",vm:"1",version:"DICOM"},"(3008,0036)":{tag:"(3008,0036)",vr:"DS",name:"DeliveredPrimaryMeterset",vm:"1",version:"DICOM"},"(3008,0037)":{tag:"(3008,0037)",vr:"DS",name:"DeliveredSecondaryMeterset",vm:"1",version:"DICOM"},"(3008,003A)":{tag:"(3008,003A)",vr:"DS",name:"SpecifiedTreatmentTime",vm:"1",version:"DICOM"},"(3008,003B)":{tag:"(3008,003B)",vr:"DS",name:"DeliveredTreatmentTime",vm:"1",version:"DICOM"},"(3008,0040)":{tag:"(3008,0040)",vr:"SQ",name:"ControlPointDeliverySequence",vm:"1",version:"DICOM"},"(3008,0041)":{tag:"(3008,0041)",vr:"SQ",name:"IonControlPointDeliverySequence",vm:"1",version:"DICOM"},"(3008,0042)":{tag:"(3008,0042)",vr:"DS",name:"SpecifiedMeterset",vm:"1",version:"DICOM"},"(3008,0044)":{tag:"(3008,0044)",vr:"DS",name:"DeliveredMeterset",vm:"1",version:"DICOM"},"(3008,0045)":{tag:"(3008,0045)",vr:"FL",name:"MetersetRateSet",vm:"1",version:"DICOM"},"(3008,0046)":{tag:"(3008,0046)",vr:"FL",name:"MetersetRateDelivered",vm:"1",version:"DICOM"},"(3008,0047)":{tag:"(3008,0047)",vr:"FL",name:"ScanSpotMetersetsDelivered",vm:"1-n",version:"DICOM"},"(3008,0048)":{tag:"(3008,0048)",vr:"DS",name:"DoseRateDelivered",vm:"1",version:"DICOM"},"(3008,0050)":{tag:"(3008,0050)",vr:"SQ",name:"TreatmentSummaryCalculatedDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,0052)":{tag:"(3008,0052)",vr:"DS",name:"CumulativeDoseToDoseReference",vm:"1",version:"DICOM"},"(3008,0054)":{tag:"(3008,0054)",vr:"DA",name:"FirstTreatmentDate",vm:"1",version:"DICOM"},"(3008,0056)":{tag:"(3008,0056)",vr:"DA",name:"MostRecentTreatmentDate",vm:"1",version:"DICOM"},"(3008,005A)":{tag:"(3008,005A)",vr:"IS",name:"NumberOfFractionsDelivered",vm:"1",version:"DICOM"},"(3008,0060)":{tag:"(3008,0060)",vr:"SQ",name:"OverrideSequence",vm:"1",version:"DICOM"},"(3008,0061)":{tag:"(3008,0061)",vr:"AT",name:"ParameterSequencePointer",vm:"1",version:"DICOM"},"(3008,0062)":{tag:"(3008,0062)",vr:"AT",name:"OverrideParameterPointer",vm:"1",version:"DICOM"},"(3008,0063)":{tag:"(3008,0063)",vr:"IS",name:"ParameterItemIndex",vm:"1",version:"DICOM"},"(3008,0064)":{tag:"(3008,0064)",vr:"IS",name:"MeasuredDoseReferenceNumber",vm:"1",version:"DICOM"},"(3008,0065)":{tag:"(3008,0065)",vr:"AT",name:"ParameterPointer",vm:"1",version:"DICOM"},"(3008,0066)":{tag:"(3008,0066)",vr:"ST",name:"OverrideReason",vm:"1",version:"DICOM"},"(3008,0068)":{tag:"(3008,0068)",vr:"SQ",name:"CorrectedParameterSequence",vm:"1",version:"DICOM"},"(3008,006A)":{tag:"(3008,006A)",vr:"FL",name:"CorrectionValue",vm:"1",version:"DICOM"},"(3008,0070)":{tag:"(3008,0070)",vr:"SQ",name:"CalculatedDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,0072)":{tag:"(3008,0072)",vr:"IS",name:"CalculatedDoseReferenceNumber",vm:"1",version:"DICOM"},"(3008,0074)":{tag:"(3008,0074)",vr:"ST",name:"CalculatedDoseReferenceDescription",vm:"1",version:"DICOM"},"(3008,0076)":{tag:"(3008,0076)",vr:"DS",name:"CalculatedDoseReferenceDoseValue",vm:"1",version:"DICOM"},"(3008,0078)":{tag:"(3008,0078)",vr:"DS",name:"StartMeterset",vm:"1",version:"DICOM"},"(3008,007A)":{tag:"(3008,007A)",vr:"DS",name:"EndMeterset",vm:"1",version:"DICOM"},"(3008,0080)":{tag:"(3008,0080)",vr:"SQ",name:"ReferencedMeasuredDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,0082)":{tag:"(3008,0082)",vr:"IS",name:"ReferencedMeasuredDoseReferenceNumber",vm:"1",version:"DICOM"},"(3008,0090)":{tag:"(3008,0090)",vr:"SQ",name:"ReferencedCalculatedDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,0092)":{tag:"(3008,0092)",vr:"IS",name:"ReferencedCalculatedDoseReferenceNumber",vm:"1",version:"DICOM"},"(3008,00A0)":{tag:"(3008,00A0)",vr:"SQ",name:"BeamLimitingDeviceLeafPairsSequence",vm:"1",version:"DICOM"},"(3008,00B0)":{tag:"(3008,00B0)",vr:"SQ",name:"RecordedWedgeSequence",vm:"1",version:"DICOM"},"(3008,00C0)":{tag:"(3008,00C0)",vr:"SQ",name:"RecordedCompensatorSequence",vm:"1",version:"DICOM"},"(3008,00D0)":{tag:"(3008,00D0)",vr:"SQ",name:"RecordedBlockSequence",vm:"1",version:"DICOM"},"(3008,00E0)":{tag:"(3008,00E0)",vr:"SQ",name:"TreatmentSummaryMeasuredDoseReferenceSequence",vm:"1",version:"DICOM"},"(3008,00F0)":{tag:"(3008,00F0)",vr:"SQ",name:"RecordedSnoutSequence",vm:"1",version:"DICOM"},"(3008,00F2)":{tag:"(3008,00F2)",vr:"SQ",name:"RecordedRangeShifterSequence",vm:"1",version:"DICOM"},"(3008,00F4)":{tag:"(3008,00F4)",vr:"SQ",name:"RecordedLateralSpreadingDeviceSequence",vm:"1",version:"DICOM"},"(3008,00F6)":{tag:"(3008,00F6)",vr:"SQ",name:"RecordedRangeModulatorSequence",vm:"1",version:"DICOM"},"(3008,0100)":{tag:"(3008,0100)",vr:"SQ",name:"RecordedSourceSequence",vm:"1",version:"DICOM"},"(3008,0105)":{tag:"(3008,0105)",vr:"LO",name:"SourceSerialNumber",vm:"1",version:"DICOM"},"(3008,0110)":{tag:"(3008,0110)",vr:"SQ",name:"TreatmentSessionApplicationSetupSequence",vm:"1",version:"DICOM"},"(3008,0116)":{tag:"(3008,0116)",vr:"CS",name:"ApplicationSetupCheck",vm:"1",version:"DICOM"},"(3008,0120)":{tag:"(3008,0120)",vr:"SQ",name:"RecordedBrachyAccessoryDeviceSequence",vm:"1",version:"DICOM"},"(3008,0122)":{tag:"(3008,0122)",vr:"IS",name:"ReferencedBrachyAccessoryDeviceNumber",vm:"1",version:"DICOM"},"(3008,0130)":{tag:"(3008,0130)",vr:"SQ",name:"RecordedChannelSequence",vm:"1",version:"DICOM"},"(3008,0132)":{tag:"(3008,0132)",vr:"DS",name:"SpecifiedChannelTotalTime",vm:"1",version:"DICOM"},"(3008,0134)":{tag:"(3008,0134)",vr:"DS",name:"DeliveredChannelTotalTime",vm:"1",version:"DICOM"},"(3008,0136)":{tag:"(3008,0136)",vr:"IS",name:"SpecifiedNumberOfPulses",vm:"1",version:"DICOM"},"(3008,0138)":{tag:"(3008,0138)",vr:"IS",name:"DeliveredNumberOfPulses",vm:"1",version:"DICOM"},"(3008,013A)":{tag:"(3008,013A)",vr:"DS",name:"SpecifiedPulseRepetitionInterval",vm:"1",version:"DICOM"},"(3008,013C)":{tag:"(3008,013C)",vr:"DS",name:"DeliveredPulseRepetitionInterval",vm:"1",version:"DICOM"},"(3008,0140)":{tag:"(3008,0140)",vr:"SQ",name:"RecordedSourceApplicatorSequence",vm:"1",version:"DICOM"},"(3008,0142)":{tag:"(3008,0142)",vr:"IS",name:"ReferencedSourceApplicatorNumber",vm:"1",version:"DICOM"},"(3008,0150)":{tag:"(3008,0150)",vr:"SQ",name:"RecordedChannelShieldSequence",vm:"1",version:"DICOM"},"(3008,0152)":{tag:"(3008,0152)",vr:"IS",name:"ReferencedChannelShieldNumber",vm:"1",version:"DICOM"},"(3008,0160)":{tag:"(3008,0160)",vr:"SQ",name:"BrachyControlPointDeliveredSequence",vm:"1",version:"DICOM"},"(3008,0162)":{tag:"(3008,0162)",vr:"DA",name:"SafePositionExitDate",vm:"1",version:"DICOM"},"(3008,0164)":{tag:"(3008,0164)",vr:"TM",name:"SafePositionExitTime",vm:"1",version:"DICOM"},"(3008,0166)":{tag:"(3008,0166)",vr:"DA",name:"SafePositionReturnDate",vm:"1",version:"DICOM"},"(3008,0168)":{tag:"(3008,0168)",vr:"TM",name:"SafePositionReturnTime",vm:"1",version:"DICOM"},"(3008,0171)":{tag:"(3008,0171)",vr:"SQ",name:"PulseSpecificBrachyControlPointDeliveredSequence",vm:"1",version:"DICOM"},"(3008,0172)":{tag:"(3008,0172)",vr:"US",name:"PulseNumber",vm:"1",version:"DICOM"},"(3008,0173)":{tag:"(3008,0173)",vr:"SQ",name:"BrachyPulseControlPointDeliveredSequence",vm:"1",version:"DICOM"},"(3008,0200)":{tag:"(3008,0200)",vr:"CS",name:"CurrentTreatmentStatus",vm:"1",version:"DICOM"},"(3008,0202)":{tag:"(3008,0202)",vr:"ST",name:"TreatmentStatusComment",vm:"1",version:"DICOM"},"(3008,0220)":{tag:"(3008,0220)",vr:"SQ",name:"FractionGroupSummarySequence",vm:"1",version:"DICOM"},"(3008,0223)":{tag:"(3008,0223)",vr:"IS",name:"ReferencedFractionNumber",vm:"1",version:"DICOM"},"(3008,0224)":{tag:"(3008,0224)",vr:"CS",name:"FractionGroupType",vm:"1",version:"DICOM"},"(3008,0230)":{tag:"(3008,0230)",vr:"CS",name:"BeamStopperPosition",vm:"1",version:"DICOM"},"(3008,0240)":{tag:"(3008,0240)",vr:"SQ",name:"FractionStatusSummarySequence",vm:"1",version:"DICOM"},"(3008,0250)":{tag:"(3008,0250)",vr:"DA",name:"TreatmentDate",vm:"1",version:"DICOM"},"(3008,0251)":{tag:"(3008,0251)",vr:"TM",name:"TreatmentTime",vm:"1",version:"DICOM"},"(300A,0002)":{tag:"(300A,0002)",vr:"SH",name:"RTPlanLabel",vm:"1",version:"DICOM"},"(300A,0003)":{tag:"(300A,0003)",vr:"LO",name:"RTPlanName",vm:"1",version:"DICOM"},"(300A,0004)":{tag:"(300A,0004)",vr:"ST",name:"RTPlanDescription",vm:"1",version:"DICOM"},"(300A,0006)":{tag:"(300A,0006)",vr:"DA",name:"RTPlanDate",vm:"1",version:"DICOM"},"(300A,0007)":{tag:"(300A,0007)",vr:"TM",name:"RTPlanTime",vm:"1",version:"DICOM"},"(300A,0009)":{tag:"(300A,0009)",vr:"LO",name:"TreatmentProtocols",vm:"1-n",version:"DICOM"},"(300A,000A)":{tag:"(300A,000A)",vr:"CS",name:"PlanIntent",vm:"1",version:"DICOM"},"(300A,000B)":{tag:"(300A,000B)",vr:"LO",name:"TreatmentSites",vm:"1-n",version:"DICOM"},"(300A,000C)":{tag:"(300A,000C)",vr:"CS",name:"RTPlanGeometry",vm:"1",version:"DICOM"},"(300A,000E)":{tag:"(300A,000E)",vr:"ST",name:"PrescriptionDescription",vm:"1",version:"DICOM"},"(300A,0010)":{tag:"(300A,0010)",vr:"SQ",name:"DoseReferenceSequence",vm:"1",version:"DICOM"},"(300A,0012)":{tag:"(300A,0012)",vr:"IS",name:"DoseReferenceNumber",vm:"1",version:"DICOM"},"(300A,0013)":{tag:"(300A,0013)",vr:"UI",name:"DoseReferenceUID",vm:"1",version:"DICOM"},"(300A,0014)":{tag:"(300A,0014)",vr:"CS",name:"DoseReferenceStructureType",vm:"1",version:"DICOM"},"(300A,0015)":{tag:"(300A,0015)",vr:"CS",name:"NominalBeamEnergyUnit",vm:"1",version:"DICOM"},"(300A,0016)":{tag:"(300A,0016)",vr:"LO",name:"DoseReferenceDescription",vm:"1",version:"DICOM"},"(300A,0018)":{tag:"(300A,0018)",vr:"DS",name:"DoseReferencePointCoordinates",vm:"3",version:"DICOM"},"(300A,001A)":{tag:"(300A,001A)",vr:"DS",name:"NominalPriorDose",vm:"1",version:"DICOM"},"(300A,0020)":{tag:"(300A,0020)",vr:"CS",name:"DoseReferenceType",vm:"1",version:"DICOM"},"(300A,0021)":{tag:"(300A,0021)",vr:"DS",name:"ConstraintWeight",vm:"1",version:"DICOM"},"(300A,0022)":{tag:"(300A,0022)",vr:"DS",name:"DeliveryWarningDose",vm:"1",version:"DICOM"},"(300A,0023)":{tag:"(300A,0023)",vr:"DS",name:"DeliveryMaximumDose",vm:"1",version:"DICOM"},"(300A,0025)":{tag:"(300A,0025)",vr:"DS",name:"TargetMinimumDose",vm:"1",version:"DICOM"},"(300A,0026)":{tag:"(300A,0026)",vr:"DS",name:"TargetPrescriptionDose",vm:"1",version:"DICOM"},"(300A,0027)":{tag:"(300A,0027)",vr:"DS",name:"TargetMaximumDose",vm:"1",version:"DICOM"},"(300A,0028)":{tag:"(300A,0028)",vr:"DS",name:"TargetUnderdoseVolumeFraction",vm:"1",version:"DICOM"},"(300A,002A)":{tag:"(300A,002A)",vr:"DS",name:"OrganAtRiskFullVolumeDose",vm:"1",version:"DICOM"},"(300A,002B)":{tag:"(300A,002B)",vr:"DS",name:"OrganAtRiskLimitDose",vm:"1",version:"DICOM"},"(300A,002C)":{tag:"(300A,002C)",vr:"DS",name:"OrganAtRiskMaximumDose",vm:"1",version:"DICOM"},"(300A,002D)":{tag:"(300A,002D)",vr:"DS",name:"OrganAtRiskOverdoseVolumeFraction",vm:"1",version:"DICOM"},"(300A,0040)":{tag:"(300A,0040)",vr:"SQ",name:"ToleranceTableSequence",vm:"1",version:"DICOM"},"(300A,0042)":{tag:"(300A,0042)",vr:"IS",name:"ToleranceTableNumber",vm:"1",version:"DICOM"},"(300A,0043)":{tag:"(300A,0043)",vr:"SH",name:"ToleranceTableLabel",vm:"1",version:"DICOM"},"(300A,0044)":{tag:"(300A,0044)",vr:"DS",name:"GantryAngleTolerance",vm:"1",version:"DICOM"},"(300A,0046)":{tag:"(300A,0046)",vr:"DS",name:"BeamLimitingDeviceAngleTolerance",vm:"1",version:"DICOM"},"(300A,0048)":{tag:"(300A,0048)",vr:"SQ",name:"BeamLimitingDeviceToleranceSequence",vm:"1",version:"DICOM"},"(300A,004A)":{tag:"(300A,004A)",vr:"DS",name:"BeamLimitingDevicePositionTolerance",vm:"1",version:"DICOM"},"(300A,004B)":{tag:"(300A,004B)",vr:"FL",name:"SnoutPositionTolerance",vm:"1",version:"DICOM"},"(300A,004C)":{tag:"(300A,004C)",vr:"DS",name:"PatientSupportAngleTolerance",vm:"1",version:"DICOM"},"(300A,004E)":{tag:"(300A,004E)",vr:"DS",name:"TableTopEccentricAngleTolerance",vm:"1",version:"DICOM"},"(300A,004F)":{tag:"(300A,004F)",vr:"FL",name:"TableTopPitchAngleTolerance",vm:"1",version:"DICOM"},"(300A,0050)":{tag:"(300A,0050)",vr:"FL",name:"TableTopRollAngleTolerance",vm:"1",version:"DICOM"},"(300A,0051)":{tag:"(300A,0051)",vr:"DS",name:"TableTopVerticalPositionTolerance",vm:"1",version:"DICOM"},"(300A,0052)":{tag:"(300A,0052)",vr:"DS",name:"TableTopLongitudinalPositionTolerance",vm:"1",version:"DICOM"},"(300A,0053)":{tag:"(300A,0053)",vr:"DS",name:"TableTopLateralPositionTolerance",vm:"1",version:"DICOM"},"(300A,0055)":{tag:"(300A,0055)",vr:"CS",name:"RTPlanRelationship",vm:"1",version:"DICOM"},"(300A,0070)":{tag:"(300A,0070)",vr:"SQ",name:"FractionGroupSequence",vm:"1",version:"DICOM"},"(300A,0071)":{tag:"(300A,0071)",vr:"IS",name:"FractionGroupNumber",vm:"1",version:"DICOM"},"(300A,0072)":{tag:"(300A,0072)",vr:"LO",name:"FractionGroupDescription",vm:"1",version:"DICOM"},"(300A,0078)":{tag:"(300A,0078)",vr:"IS",name:"NumberOfFractionsPlanned",vm:"1",version:"DICOM"},"(300A,0079)":{tag:"(300A,0079)",vr:"IS",name:"NumberOfFractionPatternDigitsPerDay",vm:"1",version:"DICOM"},"(300A,007A)":{tag:"(300A,007A)",vr:"IS",name:"RepeatFractionCycleLength",vm:"1",version:"DICOM"},"(300A,007B)":{tag:"(300A,007B)",vr:"LT",name:"FractionPattern",vm:"1",version:"DICOM"},"(300A,0080)":{tag:"(300A,0080)",vr:"IS",name:"NumberOfBeams",vm:"1",version:"DICOM"},"(300A,0082)":{tag:"(300A,0082)",vr:"DS",name:"BeamDoseSpecificationPoint",vm:"3",version:"DICOM"},"(300A,0084)":{tag:"(300A,0084)",vr:"DS",name:"BeamDose",vm:"1",version:"DICOM"},"(300A,0086)":{tag:"(300A,0086)",vr:"DS",name:"BeamMeterset",vm:"1",version:"DICOM"},"(300A,008B)":{tag:"(300A,008B)",vr:"CS",name:"BeamDoseMeaning",vm:"1",version:"DICOM"},"(300A,008C)":{tag:"(300A,008C)",vr:"SQ",name:"BeamDoseVerificationControlPointSequence",vm:"1",version:"DICOM"},"(300A,008D)":{tag:"(300A,008D)",vr:"FL",name:"AverageBeamDosePointDepth",vm:"1",version:"DICOM"},"(300A,008E)":{tag:"(300A,008E)",vr:"FL",name:"AverageBeamDosePointEquivalentDepth",vm:"1",version:"DICOM"},"(300A,008F)":{tag:"(300A,008F)",vr:"FL",name:"AverageBeamDosePointSSD",vm:"1",version:"DICOM"},"(300A,00A0)":{tag:"(300A,00A0)",vr:"IS",name:"NumberOfBrachyApplicationSetups",vm:"1",version:"DICOM"},"(300A,00A2)":{tag:"(300A,00A2)",vr:"DS",name:"BrachyApplicationSetupDoseSpecificationPoint",vm:"3",version:"DICOM"},"(300A,00A4)":{tag:"(300A,00A4)",vr:"DS",name:"BrachyApplicationSetupDose",vm:"1",version:"DICOM"},"(300A,00B0)":{tag:"(300A,00B0)",vr:"SQ",name:"BeamSequence",vm:"1",version:"DICOM"},"(300A,00B2)":{tag:"(300A,00B2)",vr:"SH",name:"TreatmentMachineName",vm:"1",version:"DICOM"},"(300A,00B3)":{tag:"(300A,00B3)",vr:"CS",name:"PrimaryDosimeterUnit",vm:"1",version:"DICOM"},"(300A,00B4)":{tag:"(300A,00B4)",vr:"DS",name:"SourceAxisDistance",vm:"1",version:"DICOM"},"(300A,00B6)":{tag:"(300A,00B6)",vr:"SQ",name:"BeamLimitingDeviceSequence",vm:"1",version:"DICOM"},"(300A,00B8)":{tag:"(300A,00B8)",vr:"CS",name:"RTBeamLimitingDeviceType",vm:"1",version:"DICOM"},"(300A,00BA)":{tag:"(300A,00BA)",vr:"DS",name:"SourceToBeamLimitingDeviceDistance",vm:"1",version:"DICOM"},"(300A,00BB)":{tag:"(300A,00BB)",vr:"FL",name:"IsocenterToBeamLimitingDeviceDistance",vm:"1",version:"DICOM"},"(300A,00BC)":{tag:"(300A,00BC)",vr:"IS",name:"NumberOfLeafJawPairs",vm:"1",version:"DICOM"},"(300A,00BE)":{tag:"(300A,00BE)",vr:"DS",name:"LeafPositionBoundaries",vm:"3-n",version:"DICOM"},"(300A,00C0)":{tag:"(300A,00C0)",vr:"IS",name:"BeamNumber",vm:"1",version:"DICOM"},"(300A,00C2)":{tag:"(300A,00C2)",vr:"LO",name:"BeamName",vm:"1",version:"DICOM"},"(300A,00C3)":{tag:"(300A,00C3)",vr:"ST",name:"BeamDescription",vm:"1",version:"DICOM"},"(300A,00C4)":{tag:"(300A,00C4)",vr:"CS",name:"BeamType",vm:"1",version:"DICOM"},"(300A,00C5)":{tag:"(300A,00C5)",vr:"FD",name:"BeamDeliveryDurationLimit",vm:"1",version:"DICOM"},"(300A,00C6)":{tag:"(300A,00C6)",vr:"CS",name:"RadiationType",vm:"1",version:"DICOM"},"(300A,00C7)":{tag:"(300A,00C7)",vr:"CS",name:"HighDoseTechniqueType",vm:"1",version:"DICOM"},"(300A,00C8)":{tag:"(300A,00C8)",vr:"IS",name:"ReferenceImageNumber",vm:"1",version:"DICOM"},"(300A,00CA)":{tag:"(300A,00CA)",vr:"SQ",name:"PlannedVerificationImageSequence",vm:"1",version:"DICOM"},"(300A,00CC)":{tag:"(300A,00CC)",vr:"LO",name:"ImagingDeviceSpecificAcquisitionParameters",vm:"1-n",version:"DICOM"},"(300A,00CE)":{tag:"(300A,00CE)",vr:"CS",name:"TreatmentDeliveryType",vm:"1",version:"DICOM"},"(300A,00D0)":{tag:"(300A,00D0)",vr:"IS",name:"NumberOfWedges",vm:"1",version:"DICOM"},"(300A,00D1)":{tag:"(300A,00D1)",vr:"SQ",name:"WedgeSequence",vm:"1",version:"DICOM"},"(300A,00D2)":{tag:"(300A,00D2)",vr:"IS",name:"WedgeNumber",vm:"1",version:"DICOM"},"(300A,00D3)":{tag:"(300A,00D3)",vr:"CS",name:"WedgeType",vm:"1",version:"DICOM"},"(300A,00D4)":{tag:"(300A,00D4)",vr:"SH",name:"WedgeID",vm:"1",version:"DICOM"},"(300A,00D5)":{tag:"(300A,00D5)",vr:"IS",name:"WedgeAngle",vm:"1",version:"DICOM"},"(300A,00D6)":{tag:"(300A,00D6)",vr:"DS",name:"WedgeFactor",vm:"1",version:"DICOM"},"(300A,00D7)":{tag:"(300A,00D7)",vr:"FL",name:"TotalWedgeTrayWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,00D8)":{tag:"(300A,00D8)",vr:"DS",name:"WedgeOrientation",vm:"1",version:"DICOM"},"(300A,00D9)":{tag:"(300A,00D9)",vr:"FL",name:"IsocenterToWedgeTrayDistance",vm:"1",version:"DICOM"},"(300A,00DA)":{tag:"(300A,00DA)",vr:"DS",name:"SourceToWedgeTrayDistance",vm:"1",version:"DICOM"},"(300A,00DB)":{tag:"(300A,00DB)",vr:"FL",name:"WedgeThinEdgePosition",vm:"1",version:"DICOM"},"(300A,00DC)":{tag:"(300A,00DC)",vr:"SH",name:"BolusID",vm:"1",version:"DICOM"},"(300A,00DD)":{tag:"(300A,00DD)",vr:"ST",name:"BolusDescription",vm:"1",version:"DICOM"},"(300A,00DE)":{tag:"(300A,00DE)",vr:"DS",name:"EffectiveWedgeAngle",vm:"1",version:"DICOM"},"(300A,00E0)":{tag:"(300A,00E0)",vr:"IS",name:"NumberOfCompensators",vm:"1",version:"DICOM"},"(300A,00E1)":{tag:"(300A,00E1)",vr:"SH",name:"MaterialID",vm:"1",version:"DICOM"},"(300A,00E2)":{tag:"(300A,00E2)",vr:"DS",name:"TotalCompensatorTrayFactor",vm:"1",version:"DICOM"},"(300A,00E3)":{tag:"(300A,00E3)",vr:"SQ",name:"CompensatorSequence",vm:"1",version:"DICOM"},"(300A,00E4)":{tag:"(300A,00E4)",vr:"IS",name:"CompensatorNumber",vm:"1",version:"DICOM"},"(300A,00E5)":{tag:"(300A,00E5)",vr:"SH",name:"CompensatorID",vm:"1",version:"DICOM"},"(300A,00E6)":{tag:"(300A,00E6)",vr:"DS",name:"SourceToCompensatorTrayDistance",vm:"1",version:"DICOM"},"(300A,00E7)":{tag:"(300A,00E7)",vr:"IS",name:"CompensatorRows",vm:"1",version:"DICOM"},"(300A,00E8)":{tag:"(300A,00E8)",vr:"IS",name:"CompensatorColumns",vm:"1",version:"DICOM"},"(300A,00E9)":{tag:"(300A,00E9)",vr:"DS",name:"CompensatorPixelSpacing",vm:"2",version:"DICOM"},"(300A,00EA)":{tag:"(300A,00EA)",vr:"DS",name:"CompensatorPosition",vm:"2",version:"DICOM"},"(300A,00EB)":{tag:"(300A,00EB)",vr:"DS",name:"CompensatorTransmissionData",vm:"1-n",version:"DICOM"},"(300A,00EC)":{tag:"(300A,00EC)",vr:"DS",name:"CompensatorThicknessData",vm:"1-n",version:"DICOM"},"(300A,00ED)":{tag:"(300A,00ED)",vr:"IS",name:"NumberOfBoli",vm:"1",version:"DICOM"},"(300A,00EE)":{tag:"(300A,00EE)",vr:"CS",name:"CompensatorType",vm:"1",version:"DICOM"},"(300A,00EF)":{tag:"(300A,00EF)",vr:"SH",name:"CompensatorTrayID",vm:"1",version:"DICOM"},"(300A,00F0)":{tag:"(300A,00F0)",vr:"IS",name:"NumberOfBlocks",vm:"1",version:"DICOM"},"(300A,00F2)":{tag:"(300A,00F2)",vr:"DS",name:"TotalBlockTrayFactor",vm:"1",version:"DICOM"},"(300A,00F3)":{tag:"(300A,00F3)",vr:"FL",name:"TotalBlockTrayWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,00F4)":{tag:"(300A,00F4)",vr:"SQ",name:"BlockSequence",vm:"1",version:"DICOM"},"(300A,00F5)":{tag:"(300A,00F5)",vr:"SH",name:"BlockTrayID",vm:"1",version:"DICOM"},"(300A,00F6)":{tag:"(300A,00F6)",vr:"DS",name:"SourceToBlockTrayDistance",vm:"1",version:"DICOM"},"(300A,00F7)":{tag:"(300A,00F7)",vr:"FL",name:"IsocenterToBlockTrayDistance",vm:"1",version:"DICOM"},"(300A,00F8)":{tag:"(300A,00F8)",vr:"CS",name:"BlockType",vm:"1",version:"DICOM"},"(300A,00F9)":{tag:"(300A,00F9)",vr:"LO",name:"AccessoryCode",vm:"1",version:"DICOM"},"(300A,00FA)":{tag:"(300A,00FA)",vr:"CS",name:"BlockDivergence",vm:"1",version:"DICOM"},"(300A,00FB)":{tag:"(300A,00FB)",vr:"CS",name:"BlockMountingPosition",vm:"1",version:"DICOM"},"(300A,00FC)":{tag:"(300A,00FC)",vr:"IS",name:"BlockNumber",vm:"1",version:"DICOM"},"(300A,00FE)":{tag:"(300A,00FE)",vr:"LO",name:"BlockName",vm:"1",version:"DICOM"},"(300A,0100)":{tag:"(300A,0100)",vr:"DS",name:"BlockThickness",vm:"1",version:"DICOM"},"(300A,0102)":{tag:"(300A,0102)",vr:"DS",name:"BlockTransmission",vm:"1",version:"DICOM"},"(300A,0104)":{tag:"(300A,0104)",vr:"IS",name:"BlockNumberOfPoints",vm:"1",version:"DICOM"},"(300A,0106)":{tag:"(300A,0106)",vr:"DS",name:"BlockData",vm:"2-2n",version:"DICOM"},"(300A,0107)":{tag:"(300A,0107)",vr:"SQ",name:"ApplicatorSequence",vm:"1",version:"DICOM"},"(300A,0108)":{tag:"(300A,0108)",vr:"SH",name:"ApplicatorID",vm:"1",version:"DICOM"},"(300A,0109)":{tag:"(300A,0109)",vr:"CS",name:"ApplicatorType",vm:"1",version:"DICOM"},"(300A,010A)":{tag:"(300A,010A)",vr:"LO",name:"ApplicatorDescription",vm:"1",version:"DICOM"},"(300A,010C)":{tag:"(300A,010C)",vr:"DS",name:"CumulativeDoseReferenceCoefficient",vm:"1",version:"DICOM"},"(300A,010E)":{tag:"(300A,010E)",vr:"DS",name:"FinalCumulativeMetersetWeight",vm:"1",version:"DICOM"},"(300A,0110)":{tag:"(300A,0110)",vr:"IS",name:"NumberOfControlPoints",vm:"1",version:"DICOM"},"(300A,0111)":{tag:"(300A,0111)",vr:"SQ",name:"ControlPointSequence",vm:"1",version:"DICOM"},"(300A,0112)":{tag:"(300A,0112)",vr:"IS",name:"ControlPointIndex",vm:"1",version:"DICOM"},"(300A,0114)":{tag:"(300A,0114)",vr:"DS",name:"NominalBeamEnergy",vm:"1",version:"DICOM"},"(300A,0115)":{tag:"(300A,0115)",vr:"DS",name:"DoseRateSet",vm:"1",version:"DICOM"},"(300A,0116)":{tag:"(300A,0116)",vr:"SQ",name:"WedgePositionSequence",vm:"1",version:"DICOM"},"(300A,0118)":{tag:"(300A,0118)",vr:"CS",name:"WedgePosition",vm:"1",version:"DICOM"},"(300A,011A)":{tag:"(300A,011A)",vr:"SQ",name:"BeamLimitingDevicePositionSequence",vm:"1",version:"DICOM"},"(300A,011C)":{tag:"(300A,011C)",vr:"DS",name:"LeafJawPositions",vm:"2-2n",version:"DICOM"},"(300A,011E)":{tag:"(300A,011E)",vr:"DS",name:"GantryAngle",vm:"1",version:"DICOM"},"(300A,011F)":{tag:"(300A,011F)",vr:"CS",name:"GantryRotationDirection",vm:"1",version:"DICOM"},"(300A,0120)":{tag:"(300A,0120)",vr:"DS",name:"BeamLimitingDeviceAngle",vm:"1",version:"DICOM"},"(300A,0121)":{tag:"(300A,0121)",vr:"CS",name:"BeamLimitingDeviceRotationDirection",vm:"1",version:"DICOM"},"(300A,0122)":{tag:"(300A,0122)",vr:"DS",name:"PatientSupportAngle",vm:"1",version:"DICOM"},"(300A,0123)":{tag:"(300A,0123)",vr:"CS",name:"PatientSupportRotationDirection",vm:"1",version:"DICOM"},"(300A,0124)":{tag:"(300A,0124)",vr:"DS",name:"TableTopEccentricAxisDistance",vm:"1",version:"DICOM"},"(300A,0125)":{tag:"(300A,0125)",vr:"DS",name:"TableTopEccentricAngle",vm:"1",version:"DICOM"},"(300A,0126)":{tag:"(300A,0126)",vr:"CS",name:"TableTopEccentricRotationDirection",vm:"1",version:"DICOM"},"(300A,0128)":{tag:"(300A,0128)",vr:"DS",name:"TableTopVerticalPosition",vm:"1",version:"DICOM"},"(300A,0129)":{tag:"(300A,0129)",vr:"DS",name:"TableTopLongitudinalPosition",vm:"1",version:"DICOM"},"(300A,012A)":{tag:"(300A,012A)",vr:"DS",name:"TableTopLateralPosition",vm:"1",version:"DICOM"},"(300A,012C)":{tag:"(300A,012C)",vr:"DS",name:"IsocenterPosition",vm:"3",version:"DICOM"},"(300A,012E)":{tag:"(300A,012E)",vr:"DS",name:"SurfaceEntryPoint",vm:"3",version:"DICOM"},"(300A,0130)":{tag:"(300A,0130)",vr:"DS",name:"SourceToSurfaceDistance",vm:"1",version:"DICOM"},"(300A,0131)":{tag:"(300A,0131)",vr:"FL",name:"AverageBeamDosePointSourceToExternalContourSurfaceDistance",vm:"1",version:"DICOM"},"(300A,0132)":{tag:"(300A,0132)",vr:"FL",name:"SourceToExternalContourDistance",vm:"1",version:"DICOM"},"(300A,0133)":{tag:"(300A,0133)",vr:"FL",name:"ExternalContourEntryPoint",vm:"3",version:"DICOM"},"(300A,0134)":{tag:"(300A,0134)",vr:"DS",name:"CumulativeMetersetWeight",vm:"1",version:"DICOM"},"(300A,0140)":{tag:"(300A,0140)",vr:"FL",name:"TableTopPitchAngle",vm:"1",version:"DICOM"},"(300A,0142)":{tag:"(300A,0142)",vr:"CS",name:"TableTopPitchRotationDirection",vm:"1",version:"DICOM"},"(300A,0144)":{tag:"(300A,0144)",vr:"FL",name:"TableTopRollAngle",vm:"1",version:"DICOM"},"(300A,0146)":{tag:"(300A,0146)",vr:"CS",name:"TableTopRollRotationDirection",vm:"1",version:"DICOM"},"(300A,0148)":{tag:"(300A,0148)",vr:"FL",name:"HeadFixationAngle",vm:"1",version:"DICOM"},"(300A,014A)":{tag:"(300A,014A)",vr:"FL",name:"GantryPitchAngle",vm:"1",version:"DICOM"},"(300A,014C)":{tag:"(300A,014C)",vr:"CS",name:"GantryPitchRotationDirection",vm:"1",version:"DICOM"},"(300A,014E)":{tag:"(300A,014E)",vr:"FL",name:"GantryPitchAngleTolerance",vm:"1",version:"DICOM"},"(300A,0180)":{tag:"(300A,0180)",vr:"SQ",name:"PatientSetupSequence",vm:"1",version:"DICOM"},"(300A,0182)":{tag:"(300A,0182)",vr:"IS",name:"PatientSetupNumber",vm:"1",version:"DICOM"},"(300A,0183)":{tag:"(300A,0183)",vr:"LO",name:"PatientSetupLabel",vm:"1",version:"DICOM"},"(300A,0184)":{tag:"(300A,0184)",vr:"LO",name:"PatientAdditionalPosition",vm:"1",version:"DICOM"},"(300A,0190)":{tag:"(300A,0190)",vr:"SQ",name:"FixationDeviceSequence",vm:"1",version:"DICOM"},"(300A,0192)":{tag:"(300A,0192)",vr:"CS",name:"FixationDeviceType",vm:"1",version:"DICOM"},"(300A,0194)":{tag:"(300A,0194)",vr:"SH",name:"FixationDeviceLabel",vm:"1",version:"DICOM"},"(300A,0196)":{tag:"(300A,0196)",vr:"ST",name:"FixationDeviceDescription",vm:"1",version:"DICOM"},"(300A,0198)":{tag:"(300A,0198)",vr:"SH",name:"FixationDevicePosition",vm:"1",version:"DICOM"},"(300A,0199)":{tag:"(300A,0199)",vr:"FL",name:"FixationDevicePitchAngle",vm:"1",version:"DICOM"},"(300A,019A)":{tag:"(300A,019A)",vr:"FL",name:"FixationDeviceRollAngle",vm:"1",version:"DICOM"},"(300A,01A0)":{tag:"(300A,01A0)",vr:"SQ",name:"ShieldingDeviceSequence",vm:"1",version:"DICOM"},"(300A,01A2)":{tag:"(300A,01A2)",vr:"CS",name:"ShieldingDeviceType",vm:"1",version:"DICOM"},"(300A,01A4)":{tag:"(300A,01A4)",vr:"SH",name:"ShieldingDeviceLabel",vm:"1",version:"DICOM"},"(300A,01A6)":{tag:"(300A,01A6)",vr:"ST",name:"ShieldingDeviceDescription",vm:"1",version:"DICOM"},"(300A,01A8)":{tag:"(300A,01A8)",vr:"SH",name:"ShieldingDevicePosition",vm:"1",version:"DICOM"},"(300A,01B0)":{tag:"(300A,01B0)",vr:"CS",name:"SetupTechnique",vm:"1",version:"DICOM"},"(300A,01B2)":{tag:"(300A,01B2)",vr:"ST",name:"SetupTechniqueDescription",vm:"1",version:"DICOM"},"(300A,01B4)":{tag:"(300A,01B4)",vr:"SQ",name:"SetupDeviceSequence",vm:"1",version:"DICOM"},"(300A,01B6)":{tag:"(300A,01B6)",vr:"CS",name:"SetupDeviceType",vm:"1",version:"DICOM"},"(300A,01B8)":{tag:"(300A,01B8)",vr:"SH",name:"SetupDeviceLabel",vm:"1",version:"DICOM"},"(300A,01BA)":{tag:"(300A,01BA)",vr:"ST",name:"SetupDeviceDescription",vm:"1",version:"DICOM"},"(300A,01BC)":{tag:"(300A,01BC)",vr:"DS",name:"SetupDeviceParameter",vm:"1",version:"DICOM"},"(300A,01D0)":{tag:"(300A,01D0)",vr:"ST",name:"SetupReferenceDescription",vm:"1",version:"DICOM"},"(300A,01D2)":{tag:"(300A,01D2)",vr:"DS",name:"TableTopVerticalSetupDisplacement",vm:"1",version:"DICOM"},"(300A,01D4)":{tag:"(300A,01D4)",vr:"DS",name:"TableTopLongitudinalSetupDisplacement",vm:"1",version:"DICOM"},"(300A,01D6)":{tag:"(300A,01D6)",vr:"DS",name:"TableTopLateralSetupDisplacement",vm:"1",version:"DICOM"},"(300A,0200)":{tag:"(300A,0200)",vr:"CS",name:"BrachyTreatmentTechnique",vm:"1",version:"DICOM"},"(300A,0202)":{tag:"(300A,0202)",vr:"CS",name:"BrachyTreatmentType",vm:"1",version:"DICOM"},"(300A,0206)":{tag:"(300A,0206)",vr:"SQ",name:"TreatmentMachineSequence",vm:"1",version:"DICOM"},"(300A,0210)":{tag:"(300A,0210)",vr:"SQ",name:"SourceSequence",vm:"1",version:"DICOM"},"(300A,0212)":{tag:"(300A,0212)",vr:"IS",name:"SourceNumber",vm:"1",version:"DICOM"},"(300A,0214)":{tag:"(300A,0214)",vr:"CS",name:"SourceType",vm:"1",version:"DICOM"},"(300A,0216)":{tag:"(300A,0216)",vr:"LO",name:"SourceManufacturer",vm:"1",version:"DICOM"},"(300A,0218)":{tag:"(300A,0218)",vr:"DS",name:"ActiveSourceDiameter",vm:"1",version:"DICOM"},"(300A,021A)":{tag:"(300A,021A)",vr:"DS",name:"ActiveSourceLength",vm:"1",version:"DICOM"},"(300A,021B)":{tag:"(300A,021B)",vr:"SH",name:"SourceModelID",vm:"1",version:"DICOM"},"(300A,021C)":{tag:"(300A,021C)",vr:"LO",name:"SourceDescription",vm:"1",version:"DICOM"},"(300A,0222)":{tag:"(300A,0222)",vr:"DS",name:"SourceEncapsulationNominalThickness",vm:"1",version:"DICOM"},"(300A,0224)":{tag:"(300A,0224)",vr:"DS",name:"SourceEncapsulationNominalTransmission",vm:"1",version:"DICOM"},"(300A,0226)":{tag:"(300A,0226)",vr:"LO",name:"SourceIsotopeName",vm:"1",version:"DICOM"},"(300A,0228)":{tag:"(300A,0228)",vr:"DS",name:"SourceIsotopeHalfLife",vm:"1",version:"DICOM"},"(300A,0229)":{tag:"(300A,0229)",vr:"CS",name:"SourceStrengthUnits",vm:"1",version:"DICOM"},"(300A,022A)":{tag:"(300A,022A)",vr:"DS",name:"ReferenceAirKermaRate",vm:"1",version:"DICOM"},"(300A,022B)":{tag:"(300A,022B)",vr:"DS",name:"SourceStrength",vm:"1",version:"DICOM"},"(300A,022C)":{tag:"(300A,022C)",vr:"DA",name:"SourceStrengthReferenceDate",vm:"1",version:"DICOM"},"(300A,022E)":{tag:"(300A,022E)",vr:"TM",name:"SourceStrengthReferenceTime",vm:"1",version:"DICOM"},"(300A,0230)":{tag:"(300A,0230)",vr:"SQ",name:"ApplicationSetupSequence",vm:"1",version:"DICOM"},"(300A,0232)":{tag:"(300A,0232)",vr:"CS",name:"ApplicationSetupType",vm:"1",version:"DICOM"},"(300A,0234)":{tag:"(300A,0234)",vr:"IS",name:"ApplicationSetupNumber",vm:"1",version:"DICOM"},"(300A,0236)":{tag:"(300A,0236)",vr:"LO",name:"ApplicationSetupName",vm:"1",version:"DICOM"},"(300A,0238)":{tag:"(300A,0238)",vr:"LO",name:"ApplicationSetupManufacturer",vm:"1",version:"DICOM"},"(300A,0240)":{tag:"(300A,0240)",vr:"IS",name:"TemplateNumber",vm:"1",version:"DICOM"},"(300A,0242)":{tag:"(300A,0242)",vr:"SH",name:"TemplateType",vm:"1",version:"DICOM"},"(300A,0244)":{tag:"(300A,0244)",vr:"LO",name:"TemplateName",vm:"1",version:"DICOM"},"(300A,0250)":{tag:"(300A,0250)",vr:"DS",name:"TotalReferenceAirKerma",vm:"1",version:"DICOM"},"(300A,0260)":{tag:"(300A,0260)",vr:"SQ",name:"BrachyAccessoryDeviceSequence",vm:"1",version:"DICOM"},"(300A,0262)":{tag:"(300A,0262)",vr:"IS",name:"BrachyAccessoryDeviceNumber",vm:"1",version:"DICOM"},"(300A,0263)":{tag:"(300A,0263)",vr:"SH",name:"BrachyAccessoryDeviceID",vm:"1",version:"DICOM"},"(300A,0264)":{tag:"(300A,0264)",vr:"CS",name:"BrachyAccessoryDeviceType",vm:"1",version:"DICOM"},"(300A,0266)":{tag:"(300A,0266)",vr:"LO",name:"BrachyAccessoryDeviceName",vm:"1",version:"DICOM"},"(300A,026A)":{tag:"(300A,026A)",vr:"DS",name:"BrachyAccessoryDeviceNominalThickness",vm:"1",version:"DICOM"},"(300A,026C)":{tag:"(300A,026C)",vr:"DS",name:"BrachyAccessoryDeviceNominalTransmission",vm:"1",version:"DICOM"},"(300A,0280)":{tag:"(300A,0280)",vr:"SQ",name:"ChannelSequence",vm:"1",version:"DICOM"},"(300A,0282)":{tag:"(300A,0282)",vr:"IS",name:"ChannelNumber",vm:"1",version:"DICOM"},"(300A,0284)":{tag:"(300A,0284)",vr:"DS",name:"ChannelLength",vm:"1",version:"DICOM"},"(300A,0286)":{tag:"(300A,0286)",vr:"DS",name:"ChannelTotalTime",vm:"1",version:"DICOM"},"(300A,0288)":{tag:"(300A,0288)",vr:"CS",name:"SourceMovementType",vm:"1",version:"DICOM"},"(300A,028A)":{tag:"(300A,028A)",vr:"IS",name:"NumberOfPulses",vm:"1",version:"DICOM"},"(300A,028C)":{tag:"(300A,028C)",vr:"DS",name:"PulseRepetitionInterval",vm:"1",version:"DICOM"},"(300A,0290)":{tag:"(300A,0290)",vr:"IS",name:"SourceApplicatorNumber",vm:"1",version:"DICOM"},"(300A,0291)":{tag:"(300A,0291)",vr:"SH",name:"SourceApplicatorID",vm:"1",version:"DICOM"},"(300A,0292)":{tag:"(300A,0292)",vr:"CS",name:"SourceApplicatorType",vm:"1",version:"DICOM"},"(300A,0294)":{tag:"(300A,0294)",vr:"LO",name:"SourceApplicatorName",vm:"1",version:"DICOM"},"(300A,0296)":{tag:"(300A,0296)",vr:"DS",name:"SourceApplicatorLength",vm:"1",version:"DICOM"},"(300A,0298)":{tag:"(300A,0298)",vr:"LO",name:"SourceApplicatorManufacturer",vm:"1",version:"DICOM"},"(300A,029C)":{tag:"(300A,029C)",vr:"DS",name:"SourceApplicatorWallNominalThickness",vm:"1",version:"DICOM"},"(300A,029E)":{tag:"(300A,029E)",vr:"DS",name:"SourceApplicatorWallNominalTransmission",vm:"1",version:"DICOM"},"(300A,02A0)":{tag:"(300A,02A0)",vr:"DS",name:"SourceApplicatorStepSize",vm:"1",version:"DICOM"},"(300A,02A2)":{tag:"(300A,02A2)",vr:"IS",name:"TransferTubeNumber",vm:"1",version:"DICOM"},"(300A,02A4)":{tag:"(300A,02A4)",vr:"DS",name:"TransferTubeLength",vm:"1",version:"DICOM"},"(300A,02B0)":{tag:"(300A,02B0)",vr:"SQ",name:"ChannelShieldSequence",vm:"1",version:"DICOM"},"(300A,02B2)":{tag:"(300A,02B2)",vr:"IS",name:"ChannelShieldNumber",vm:"1",version:"DICOM"},"(300A,02B3)":{tag:"(300A,02B3)",vr:"SH",name:"ChannelShieldID",vm:"1",version:"DICOM"},"(300A,02B4)":{tag:"(300A,02B4)",vr:"LO",name:"ChannelShieldName",vm:"1",version:"DICOM"},"(300A,02B8)":{tag:"(300A,02B8)",vr:"DS",name:"ChannelShieldNominalThickness",vm:"1",version:"DICOM"},"(300A,02BA)":{tag:"(300A,02BA)",vr:"DS",name:"ChannelShieldNominalTransmission",vm:"1",version:"DICOM"},"(300A,02C8)":{tag:"(300A,02C8)",vr:"DS",name:"FinalCumulativeTimeWeight",vm:"1",version:"DICOM"},"(300A,02D0)":{tag:"(300A,02D0)",vr:"SQ",name:"BrachyControlPointSequence",vm:"1",version:"DICOM"},"(300A,02D2)":{tag:"(300A,02D2)",vr:"DS",name:"ControlPointRelativePosition",vm:"1",version:"DICOM"},"(300A,02D4)":{tag:"(300A,02D4)",vr:"DS",name:"ControlPoint3DPosition",vm:"3",version:"DICOM"},"(300A,02D6)":{tag:"(300A,02D6)",vr:"DS",name:"CumulativeTimeWeight",vm:"1",version:"DICOM"},"(300A,02E0)":{tag:"(300A,02E0)",vr:"CS",name:"CompensatorDivergence",vm:"1",version:"DICOM"},"(300A,02E1)":{tag:"(300A,02E1)",vr:"CS",name:"CompensatorMountingPosition",vm:"1",version:"DICOM"},"(300A,02E2)":{tag:"(300A,02E2)",vr:"DS",name:"SourceToCompensatorDistance",vm:"1-n",version:"DICOM"},"(300A,02E3)":{tag:"(300A,02E3)",vr:"FL",name:"TotalCompensatorTrayWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,02E4)":{tag:"(300A,02E4)",vr:"FL",name:"IsocenterToCompensatorTrayDistance",vm:"1",version:"DICOM"},"(300A,02E5)":{tag:"(300A,02E5)",vr:"FL",name:"CompensatorColumnOffset",vm:"1",version:"DICOM"},"(300A,02E6)":{tag:"(300A,02E6)",vr:"FL",name:"IsocenterToCompensatorDistances",vm:"1-n",version:"DICOM"},"(300A,02E7)":{tag:"(300A,02E7)",vr:"FL",name:"CompensatorRelativeStoppingPowerRatio",vm:"1",version:"DICOM"},"(300A,02E8)":{tag:"(300A,02E8)",vr:"FL",name:"CompensatorMillingToolDiameter",vm:"1",version:"DICOM"},"(300A,02EA)":{tag:"(300A,02EA)",vr:"SQ",name:"IonRangeCompensatorSequence",vm:"1",version:"DICOM"},"(300A,02EB)":{tag:"(300A,02EB)",vr:"LT",name:"CompensatorDescription",vm:"1",version:"DICOM"},"(300A,0302)":{tag:"(300A,0302)",vr:"IS",name:"RadiationMassNumber",vm:"1",version:"DICOM"},"(300A,0304)":{tag:"(300A,0304)",vr:"IS",name:"RadiationAtomicNumber",vm:"1",version:"DICOM"},"(300A,0306)":{tag:"(300A,0306)",vr:"SS",name:"RadiationChargeState",vm:"1",version:"DICOM"},"(300A,0308)":{tag:"(300A,0308)",vr:"CS",name:"ScanMode",vm:"1",version:"DICOM"},"(300A,030A)":{tag:"(300A,030A)",vr:"FL",name:"VirtualSourceAxisDistances",vm:"2",version:"DICOM"},"(300A,030C)":{tag:"(300A,030C)",vr:"SQ",name:"SnoutSequence",vm:"1",version:"DICOM"},"(300A,030D)":{tag:"(300A,030D)",vr:"FL",name:"SnoutPosition",vm:"1",version:"DICOM"},"(300A,030F)":{tag:"(300A,030F)",vr:"SH",name:"SnoutID",vm:"1",version:"DICOM"},"(300A,0312)":{tag:"(300A,0312)",vr:"IS",name:"NumberOfRangeShifters",vm:"1",version:"DICOM"},"(300A,0314)":{tag:"(300A,0314)",vr:"SQ",name:"RangeShifterSequence",vm:"1",version:"DICOM"},"(300A,0316)":{tag:"(300A,0316)",vr:"IS",name:"RangeShifterNumber",vm:"1",version:"DICOM"},"(300A,0318)":{tag:"(300A,0318)",vr:"SH",name:"RangeShifterID",vm:"1",version:"DICOM"},"(300A,0320)":{tag:"(300A,0320)",vr:"CS",name:"RangeShifterType",vm:"1",version:"DICOM"},"(300A,0322)":{tag:"(300A,0322)",vr:"LO",name:"RangeShifterDescription",vm:"1",version:"DICOM"},"(300A,0330)":{tag:"(300A,0330)",vr:"IS",name:"NumberOfLateralSpreadingDevices",vm:"1",version:"DICOM"},"(300A,0332)":{tag:"(300A,0332)",vr:"SQ",name:"LateralSpreadingDeviceSequence",vm:"1",version:"DICOM"},"(300A,0334)":{tag:"(300A,0334)",vr:"IS",name:"LateralSpreadingDeviceNumber",vm:"1",version:"DICOM"},"(300A,0336)":{tag:"(300A,0336)",vr:"SH",name:"LateralSpreadingDeviceID",vm:"1",version:"DICOM"},"(300A,0338)":{tag:"(300A,0338)",vr:"CS",name:"LateralSpreadingDeviceType",vm:"1",version:"DICOM"},"(300A,033A)":{tag:"(300A,033A)",vr:"LO",name:"LateralSpreadingDeviceDescription",vm:"1",version:"DICOM"},"(300A,033C)":{tag:"(300A,033C)",vr:"FL",name:"LateralSpreadingDeviceWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,0340)":{tag:"(300A,0340)",vr:"IS",name:"NumberOfRangeModulators",vm:"1",version:"DICOM"},"(300A,0342)":{tag:"(300A,0342)",vr:"SQ",name:"RangeModulatorSequence",vm:"1",version:"DICOM"},"(300A,0344)":{tag:"(300A,0344)",vr:"IS",name:"RangeModulatorNumber",vm:"1",version:"DICOM"},"(300A,0346)":{tag:"(300A,0346)",vr:"SH",name:"RangeModulatorID",vm:"1",version:"DICOM"},"(300A,0348)":{tag:"(300A,0348)",vr:"CS",name:"RangeModulatorType",vm:"1",version:"DICOM"},"(300A,034A)":{tag:"(300A,034A)",vr:"LO",name:"RangeModulatorDescription",vm:"1",version:"DICOM"},"(300A,034C)":{tag:"(300A,034C)",vr:"SH",name:"BeamCurrentModulationID",vm:"1",version:"DICOM"},"(300A,0350)":{tag:"(300A,0350)",vr:"CS",name:"PatientSupportType",vm:"1",version:"DICOM"},"(300A,0352)":{tag:"(300A,0352)",vr:"SH",name:"PatientSupportID",vm:"1",version:"DICOM"},"(300A,0354)":{tag:"(300A,0354)",vr:"LO",name:"PatientSupportAccessoryCode",vm:"1",version:"DICOM"},"(300A,0356)":{tag:"(300A,0356)",vr:"FL",name:"FixationLightAzimuthalAngle",vm:"1",version:"DICOM"},"(300A,0358)":{tag:"(300A,0358)",vr:"FL",name:"FixationLightPolarAngle",vm:"1",version:"DICOM"},"(300A,035A)":{tag:"(300A,035A)",vr:"FL",name:"MetersetRate",vm:"1",version:"DICOM"},"(300A,0360)":{tag:"(300A,0360)",vr:"SQ",name:"RangeShifterSettingsSequence",vm:"1",version:"DICOM"},"(300A,0362)":{tag:"(300A,0362)",vr:"LO",name:"RangeShifterSetting",vm:"1",version:"DICOM"},"(300A,0364)":{tag:"(300A,0364)",vr:"FL",name:"IsocenterToRangeShifterDistance",vm:"1",version:"DICOM"},"(300A,0366)":{tag:"(300A,0366)",vr:"FL",name:"RangeShifterWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,0370)":{tag:"(300A,0370)",vr:"SQ",name:"LateralSpreadingDeviceSettingsSequence",vm:"1",version:"DICOM"},"(300A,0372)":{tag:"(300A,0372)",vr:"LO",name:"LateralSpreadingDeviceSetting",vm:"1",version:"DICOM"},"(300A,0374)":{tag:"(300A,0374)",vr:"FL",name:"IsocenterToLateralSpreadingDeviceDistance",vm:"1",version:"DICOM"},"(300A,0380)":{tag:"(300A,0380)",vr:"SQ",name:"RangeModulatorSettingsSequence",vm:"1",version:"DICOM"},"(300A,0382)":{tag:"(300A,0382)",vr:"FL",name:"RangeModulatorGatingStartValue",vm:"1",version:"DICOM"},"(300A,0384)":{tag:"(300A,0384)",vr:"FL",name:"RangeModulatorGatingStopValue",vm:"1",version:"DICOM"},"(300A,0386)":{tag:"(300A,0386)",vr:"FL",name:"RangeModulatorGatingStartWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,0388)":{tag:"(300A,0388)",vr:"FL",name:"RangeModulatorGatingStopWaterEquivalentThickness",vm:"1",version:"DICOM"},"(300A,038A)":{tag:"(300A,038A)",vr:"FL",name:"IsocenterToRangeModulatorDistance",vm:"1",version:"DICOM"},"(300A,0390)":{tag:"(300A,0390)",vr:"SH",name:"ScanSpotTuneID",vm:"1",version:"DICOM"},"(300A,0392)":{tag:"(300A,0392)",vr:"IS",name:"NumberOfScanSpotPositions",vm:"1",version:"DICOM"},"(300A,0394)":{tag:"(300A,0394)",vr:"FL",name:"ScanSpotPositionMap",vm:"1-n",version:"DICOM"},"(300A,0396)":{tag:"(300A,0396)",vr:"FL",name:"ScanSpotMetersetWeights",vm:"1-n",version:"DICOM"},"(300A,0398)":{tag:"(300A,0398)",vr:"FL",name:"ScanningSpotSize",vm:"2",version:"DICOM"},"(300A,039A)":{tag:"(300A,039A)",vr:"IS",name:"NumberOfPaintings",vm:"1",version:"DICOM"},"(300A,03A0)":{tag:"(300A,03A0)",vr:"SQ",name:"IonToleranceTableSequence",vm:"1",version:"DICOM"},"(300A,03A2)":{tag:"(300A,03A2)",vr:"SQ",name:"IonBeamSequence",vm:"1",version:"DICOM"},"(300A,03A4)":{tag:"(300A,03A4)",vr:"SQ",name:"IonBeamLimitingDeviceSequence",vm:"1",version:"DICOM"},"(300A,03A6)":{tag:"(300A,03A6)",vr:"SQ",name:"IonBlockSequence",vm:"1",version:"DICOM"},"(300A,03A8)":{tag:"(300A,03A8)",vr:"SQ",name:"IonControlPointSequence",vm:"1",version:"DICOM"},"(300A,03AA)":{tag:"(300A,03AA)",vr:"SQ",name:"IonWedgeSequence",vm:"1",version:"DICOM"},"(300A,03AC)":{tag:"(300A,03AC)",vr:"SQ",name:"IonWedgePositionSequence",vm:"1",version:"DICOM"},"(300A,0401)":{tag:"(300A,0401)",vr:"SQ",name:"ReferencedSetupImageSequence",vm:"1",version:"DICOM"},"(300A,0402)":{tag:"(300A,0402)",vr:"ST",name:"SetupImageComment",vm:"1",version:"DICOM"},"(300A,0410)":{tag:"(300A,0410)",vr:"SQ",name:"MotionSynchronizationSequence",vm:"1",version:"DICOM"},"(300A,0412)":{tag:"(300A,0412)",vr:"FL",name:"ControlPointOrientation",vm:"3",version:"DICOM"},"(300A,0420)":{tag:"(300A,0420)",vr:"SQ",name:"GeneralAccessorySequence",vm:"1",version:"DICOM"},"(300A,0421)":{tag:"(300A,0421)",vr:"SH",name:"GeneralAccessoryID",vm:"1",version:"DICOM"},"(300A,0422)":{tag:"(300A,0422)",vr:"ST",name:"GeneralAccessoryDescription",vm:"1",version:"DICOM"},"(300A,0423)":{tag:"(300A,0423)",vr:"CS",name:"GeneralAccessoryType",vm:"1",version:"DICOM"},"(300A,0424)":{tag:"(300A,0424)",vr:"IS",name:"GeneralAccessoryNumber",vm:"1",version:"DICOM"},"(300A,0425)":{tag:"(300A,0425)",vr:"FL",name:"SourceToGeneralAccessoryDistance",vm:"1",version:"DICOM"},"(300A,0431)":{tag:"(300A,0431)",vr:"SQ",name:"ApplicatorGeometrySequence",vm:"1",version:"DICOM"},"(300A,0432)":{tag:"(300A,0432)",vr:"CS",name:"ApplicatorApertureShape",vm:"1",version:"DICOM"},"(300A,0433)":{tag:"(300A,0433)",vr:"FL",name:"ApplicatorOpening",vm:"1",version:"DICOM"},"(300A,0434)":{tag:"(300A,0434)",vr:"FL",name:"ApplicatorOpeningX",vm:"1",version:"DICOM"},"(300A,0435)":{tag:"(300A,0435)",vr:"FL",name:"ApplicatorOpeningY",vm:"1",version:"DICOM"},"(300A,0436)":{tag:"(300A,0436)",vr:"FL",name:"SourceToApplicatorMountingPositionDistance",vm:"1",version:"DICOM"},"(300A,0440)":{tag:"(300A,0440)",vr:"IS",name:"NumberOfBlockSlabItems",vm:"1",version:"DICOM"},"(300A,0441)":{tag:"(300A,0441)",vr:"SQ",name:"BlockSlabSequence",vm:"1",version:"DICOM"},"(300A,0442)":{tag:"(300A,0442)",vr:"DS",name:"BlockSlabThickness",vm:"1",version:"DICOM"},"(300A,0443)":{tag:"(300A,0443)",vr:"US",name:"BlockSlabNumber",vm:"1",version:"DICOM"},"(300A,0450)":{tag:"(300A,0450)",vr:"SQ",name:"DeviceMotionControlSequence",vm:"1",version:"DICOM"},"(300A,0451)":{tag:"(300A,0451)",vr:"CS",name:"DeviceMotionExecutionMode",vm:"1",version:"DICOM"},"(300A,0452)":{tag:"(300A,0452)",vr:"CS",name:"DeviceMotionObservationMode",vm:"1",version:"DICOM"},"(300A,0453)":{tag:"(300A,0453)",vr:"SQ",name:"DeviceMotionParameterCodeSequence",vm:"1",version:"DICOM"},"(300C,0002)":{tag:"(300C,0002)",vr:"SQ",name:"ReferencedRTPlanSequence",vm:"1",version:"DICOM"},"(300C,0004)":{tag:"(300C,0004)",vr:"SQ",name:"ReferencedBeamSequence",vm:"1",version:"DICOM"},"(300C,0006)":{tag:"(300C,0006)",vr:"IS",name:"ReferencedBeamNumber",vm:"1",version:"DICOM"},"(300C,0007)":{tag:"(300C,0007)",vr:"IS",name:"ReferencedReferenceImageNumber",vm:"1",version:"DICOM"},"(300C,0008)":{tag:"(300C,0008)",vr:"DS",name:"StartCumulativeMetersetWeight",vm:"1",version:"DICOM"},"(300C,0009)":{tag:"(300C,0009)",vr:"DS",name:"EndCumulativeMetersetWeight",vm:"1",version:"DICOM"},"(300C,000A)":{tag:"(300C,000A)",vr:"SQ",name:"ReferencedBrachyApplicationSetupSequence",vm:"1",version:"DICOM"},"(300C,000C)":{tag:"(300C,000C)",vr:"IS",name:"ReferencedBrachyApplicationSetupNumber",vm:"1",version:"DICOM"},"(300C,000E)":{tag:"(300C,000E)",vr:"IS",name:"ReferencedSourceNumber",vm:"1",version:"DICOM"},"(300C,0020)":{tag:"(300C,0020)",vr:"SQ",name:"ReferencedFractionGroupSequence",vm:"1",version:"DICOM"},"(300C,0022)":{tag:"(300C,0022)",vr:"IS",name:"ReferencedFractionGroupNumber",vm:"1",version:"DICOM"},"(300C,0040)":{tag:"(300C,0040)",vr:"SQ",name:"ReferencedVerificationImageSequence",vm:"1",version:"DICOM"},"(300C,0042)":{tag:"(300C,0042)",vr:"SQ",name:"ReferencedReferenceImageSequence",vm:"1",version:"DICOM"},"(300C,0050)":{tag:"(300C,0050)",vr:"SQ",name:"ReferencedDoseReferenceSequence",vm:"1",version:"DICOM"},"(300C,0051)":{tag:"(300C,0051)",vr:"IS",name:"ReferencedDoseReferenceNumber",vm:"1",version:"DICOM"},"(300C,0055)":{tag:"(300C,0055)",vr:"SQ",name:"BrachyReferencedDoseReferenceSequence",vm:"1",version:"DICOM"},"(300C,0060)":{tag:"(300C,0060)",vr:"SQ",name:"ReferencedStructureSetSequence",vm:"1",version:"DICOM"},"(300C,006A)":{tag:"(300C,006A)",vr:"IS",name:"ReferencedPatientSetupNumber",vm:"1",version:"DICOM"},"(300C,0080)":{tag:"(300C,0080)",vr:"SQ",name:"ReferencedDoseSequence",vm:"1",version:"DICOM"},"(300C,00A0)":{tag:"(300C,00A0)",vr:"IS",name:"ReferencedToleranceTableNumber",vm:"1",version:"DICOM"},"(300C,00B0)":{tag:"(300C,00B0)",vr:"SQ",name:"ReferencedBolusSequence",vm:"1",version:"DICOM"},"(300C,00C0)":{tag:"(300C,00C0)",vr:"IS",name:"ReferencedWedgeNumber",vm:"1",version:"DICOM"},"(300C,00D0)":{tag:"(300C,00D0)",vr:"IS",name:"ReferencedCompensatorNumber",vm:"1",version:"DICOM"},"(300C,00E0)":{tag:"(300C,00E0)",vr:"IS",name:"ReferencedBlockNumber",vm:"1",version:"DICOM"},"(300C,00F0)":{tag:"(300C,00F0)",vr:"IS",name:"ReferencedControlPointIndex",vm:"1",version:"DICOM"},"(300C,00F2)":{tag:"(300C,00F2)",vr:"SQ",name:"ReferencedControlPointSequence",vm:"1",version:"DICOM"},"(300C,00F4)":{tag:"(300C,00F4)",vr:"IS",name:"ReferencedStartControlPointIndex",vm:"1",version:"DICOM"},"(300C,00F6)":{tag:"(300C,00F6)",vr:"IS",name:"ReferencedStopControlPointIndex",vm:"1",version:"DICOM"},"(300C,0100)":{tag:"(300C,0100)",vr:"IS",name:"ReferencedRangeShifterNumber",vm:"1",version:"DICOM"},"(300C,0102)":{tag:"(300C,0102)",vr:"IS",name:"ReferencedLateralSpreadingDeviceNumber",vm:"1",version:"DICOM"},"(300C,0104)":{tag:"(300C,0104)",vr:"IS",name:"ReferencedRangeModulatorNumber",vm:"1",version:"DICOM"},"(300C,0111)":{tag:"(300C,0111)",vr:"SQ",name:"OmittedBeamTaskSequence",vm:"1",version:"DICOM"},"(300C,0112)":{tag:"(300C,0112)",vr:"CS",name:"ReasonForOmission",vm:"1",version:"DICOM"},"(300C,0113)":{tag:"(300C,0113)",vr:"LO",name:"ReasonForOmissionDescription",vm:"1",version:"DICOM"},"(300E,0002)":{tag:"(300E,0002)",vr:"CS",name:"ApprovalStatus",vm:"1",version:"DICOM"},"(300E,0004)":{tag:"(300E,0004)",vr:"DA",name:"ReviewDate",vm:"1",version:"DICOM"},"(300E,0005)":{tag:"(300E,0005)",vr:"TM",name:"ReviewTime",vm:"1",version:"DICOM"},"(300E,0008)":{tag:"(300E,0008)",vr:"PN",name:"ReviewerName",vm:"1",version:"DICOM"},"(4010,0001)":{tag:"(4010,0001)",vr:"CS",name:"LowEnergyDetectors",vm:"1",version:"DICOM/DICOS"},"(4010,0002)":{tag:"(4010,0002)",vr:"CS",name:"HighEnergyDetectors",vm:"1",version:"DICOM/DICOS"},"(4010,0004)":{tag:"(4010,0004)",vr:"SQ",name:"DetectorGeometrySequence",vm:"1",version:"DICOM/DICOS"},"(4010,1001)":{tag:"(4010,1001)",vr:"SQ",name:"ThreatROIVoxelSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1004)":{tag:"(4010,1004)",vr:"FL",name:"ThreatROIBase",vm:"3",version:"DICOM/DICOS"},"(4010,1005)":{tag:"(4010,1005)",vr:"FL",name:"ThreatROIExtents",vm:"3",version:"DICOM/DICOS"},"(4010,1006)":{tag:"(4010,1006)",vr:"OB",name:"ThreatROIBitmap",vm:"1",version:"DICOM/DICOS"},"(4010,1007)":{tag:"(4010,1007)",vr:"SH",name:"RouteSegmentID",vm:"1",version:"DICOM/DICOS"},"(4010,1008)":{tag:"(4010,1008)",vr:"CS",name:"GantryType",vm:"1",version:"DICOM/DICOS"},"(4010,1009)":{tag:"(4010,1009)",vr:"CS",name:"OOIOwnerType",vm:"1",version:"DICOM/DICOS"},"(4010,100A)":{tag:"(4010,100A)",vr:"SQ",name:"RouteSegmentSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1010)":{tag:"(4010,1010)",vr:"US",name:"PotentialThreatObjectID",vm:"1",version:"DICOM/DICOS"},"(4010,1011)":{tag:"(4010,1011)",vr:"SQ",name:"ThreatSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1012)":{tag:"(4010,1012)",vr:"CS",name:"ThreatCategory",vm:"1",version:"DICOM/DICOS"},"(4010,1013)":{tag:"(4010,1013)",vr:"LT",name:"ThreatCategoryDescription",vm:"1",version:"DICOM/DICOS"},"(4010,1014)":{tag:"(4010,1014)",vr:"CS",name:"ATDAbilityAssessment",vm:"1",version:"DICOM/DICOS"},"(4010,1015)":{tag:"(4010,1015)",vr:"CS",name:"ATDAssessmentFlag",vm:"1",version:"DICOM/DICOS"},"(4010,1016)":{tag:"(4010,1016)",vr:"FL",name:"ATDAssessmentProbability",vm:"1",version:"DICOM/DICOS"},"(4010,1017)":{tag:"(4010,1017)",vr:"FL",name:"Mass",vm:"1",version:"DICOM/DICOS"},"(4010,1018)":{tag:"(4010,1018)",vr:"FL",name:"Density",vm:"1",version:"DICOM/DICOS"},"(4010,1019)":{tag:"(4010,1019)",vr:"FL",name:"ZEffective",vm:"1",version:"DICOM/DICOS"},"(4010,101A)":{tag:"(4010,101A)",vr:"SH",name:"BoardingPassID",vm:"1",version:"DICOM/DICOS"},"(4010,101B)":{tag:"(4010,101B)",vr:"FL",name:"CenterOfMass",vm:"3",version:"DICOM/DICOS"},"(4010,101C)":{tag:"(4010,101C)",vr:"FL",name:"CenterOfPTO",vm:"3",version:"DICOM/DICOS"},"(4010,101D)":{tag:"(4010,101D)",vr:"FL",name:"BoundingPolygon",vm:"6-n",version:"DICOM/DICOS"},"(4010,101E)":{tag:"(4010,101E)",vr:"SH",name:"RouteSegmentStartLocationID",vm:"1",version:"DICOM/DICOS"},"(4010,101F)":{tag:"(4010,101F)",vr:"SH",name:"RouteSegmentEndLocationID",vm:"1",version:"DICOM/DICOS"},"(4010,1020)":{tag:"(4010,1020)",vr:"CS",name:"RouteSegmentLocationIDType",vm:"1",version:"DICOM/DICOS"},"(4010,1021)":{tag:"(4010,1021)",vr:"CS",name:"AbortReason",vm:"1-n",version:"DICOM/DICOS"},"(4010,1023)":{tag:"(4010,1023)",vr:"FL",name:"VolumeOfPTO",vm:"1",version:"DICOM/DICOS"},"(4010,1024)":{tag:"(4010,1024)",vr:"CS",name:"AbortFlag",vm:"1",version:"DICOM/DICOS"},"(4010,1025)":{tag:"(4010,1025)",vr:"DT",name:"RouteSegmentStartTime",vm:"1",version:"DICOM/DICOS"},"(4010,1026)":{tag:"(4010,1026)",vr:"DT",name:"RouteSegmentEndTime",vm:"1",version:"DICOM/DICOS"},"(4010,1027)":{tag:"(4010,1027)",vr:"CS",name:"TDRType",vm:"1",version:"DICOM/DICOS"},"(4010,1028)":{tag:"(4010,1028)",vr:"CS",name:"InternationalRouteSegment",vm:"1",version:"DICOM/DICOS"},"(4010,1029)":{tag:"(4010,1029)",vr:"LO",name:"ThreatDetectionAlgorithmandVersion",vm:"1-n",version:"DICOM/DICOS"},"(4010,102A)":{tag:"(4010,102A)",vr:"SH",name:"AssignedLocation",vm:"1",version:"DICOM/DICOS"},"(4010,102B)":{tag:"(4010,102B)",vr:"DT",name:"AlarmDecisionTime",vm:"1",version:"DICOM/DICOS"},"(4010,1031)":{tag:"(4010,1031)",vr:"CS",name:"AlarmDecision",vm:"1",version:"DICOM/DICOS"},"(4010,1033)":{tag:"(4010,1033)",vr:"US",name:"NumberOfTotalObjects",vm:"1",version:"DICOM/DICOS"},"(4010,1034)":{tag:"(4010,1034)",vr:"US",name:"NumberOfAlarmObjects",vm:"1",version:"DICOM/DICOS"},"(4010,1037)":{tag:"(4010,1037)",vr:"SQ",name:"PTORepresentationSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1038)":{tag:"(4010,1038)",vr:"SQ",name:"ATDAssessmentSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1039)":{tag:"(4010,1039)",vr:"CS",name:"TIPType",vm:"1",version:"DICOM/DICOS"},"(4010,103A)":{tag:"(4010,103A)",vr:"CS",name:"DICOSVersion",vm:"1",version:"DICOM/DICOS"},"(4010,1041)":{tag:"(4010,1041)",vr:"DT",name:"OOIOwnerCreationTime",vm:"1",version:"DICOM/DICOS"},"(4010,1042)":{tag:"(4010,1042)",vr:"CS",name:"OOIType",vm:"1",version:"DICOM/DICOS"},"(4010,1043)":{tag:"(4010,1043)",vr:"FL",name:"OOISize",vm:"3",version:"DICOM/DICOS"},"(4010,1044)":{tag:"(4010,1044)",vr:"CS",name:"AcquisitionStatus",vm:"1",version:"DICOM/DICOS"},"(4010,1045)":{tag:"(4010,1045)",vr:"SQ",name:"BasisMaterialsCodeSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1046)":{tag:"(4010,1046)",vr:"CS",name:"PhantomType",vm:"1",version:"DICOM/DICOS"},"(4010,1047)":{tag:"(4010,1047)",vr:"SQ",name:"OOIOwnerSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1048)":{tag:"(4010,1048)",vr:"CS",name:"ScanType",vm:"1",version:"DICOM/DICOS"},"(4010,1051)":{tag:"(4010,1051)",vr:"LO",name:"ItineraryID",vm:"1",version:"DICOM/DICOS"},"(4010,1052)":{tag:"(4010,1052)",vr:"SH",name:"ItineraryIDType",vm:"1",version:"DICOM/DICOS"},"(4010,1053)":{tag:"(4010,1053)",vr:"LO",name:"ItineraryIDAssigningAuthority",vm:"1",version:"DICOM/DICOS"},"(4010,1054)":{tag:"(4010,1054)",vr:"SH",name:"RouteID",vm:"1",version:"DICOM/DICOS"},"(4010,1055)":{tag:"(4010,1055)",vr:"SH",name:"RouteIDAssigningAuthority",vm:"1",version:"DICOM/DICOS"},"(4010,1056)":{tag:"(4010,1056)",vr:"CS",name:"InboundArrivalType",vm:"1",version:"DICOM/DICOS"},"(4010,1058)":{tag:"(4010,1058)",vr:"SH",name:"CarrierID",vm:"1",version:"DICOM/DICOS"},"(4010,1059)":{tag:"(4010,1059)",vr:"CS",name:"CarrierIDAssigningAuthority",vm:"1",version:"DICOM/DICOS"},"(4010,1060)":{tag:"(4010,1060)",vr:"FL",name:"SourceOrientation",vm:"3",version:"DICOM/DICOS"},"(4010,1061)":{tag:"(4010,1061)",vr:"FL",name:"SourcePosition",vm:"3",version:"DICOM/DICOS"},"(4010,1062)":{tag:"(4010,1062)",vr:"FL",name:"BeltHeight",vm:"1",version:"DICOM/DICOS"},"(4010,1064)":{tag:"(4010,1064)",vr:"SQ",name:"AlgorithmRoutingCodeSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1067)":{tag:"(4010,1067)",vr:"CS",name:"TransportClassification",vm:"1",version:"DICOM/DICOS"},"(4010,1068)":{tag:"(4010,1068)",vr:"LT",name:"OOITypeDescriptor",vm:"1",version:"DICOM/DICOS"},"(4010,1069)":{tag:"(4010,1069)",vr:"FL",name:"TotalProcessingTime",vm:"1",version:"DICOM/DICOS"},"(4010,106C)":{tag:"(4010,106C)",vr:"OB",name:"DetectorCalibrationData",vm:"1",version:"DICOM/DICOS"},"(4010,106D)":{tag:"(4010,106D)",vr:"CS",name:"AdditionalScreeningPerformed",vm:"1",version:"DICOM/DICOS"},"(4010,106E)":{tag:"(4010,106E)",vr:"CS",name:"AdditionalInspectionSelectionCriteria",vm:"1",version:"DICOM/DICOS"},"(4010,106F)":{tag:"(4010,106F)",vr:"SQ",name:"AdditionalInspectionMethodSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1070)":{tag:"(4010,1070)",vr:"CS",name:"AITDeviceType",vm:"1",version:"DICOM/DICOS"},"(4010,1071)":{tag:"(4010,1071)",vr:"SQ",name:"QRMeasurementsSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1072)":{tag:"(4010,1072)",vr:"SQ",name:"TargetMaterialSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1073)":{tag:"(4010,1073)",vr:"FD",name:"SNRThreshold",vm:"1",version:"DICOM/DICOS"},"(4010,1075)":{tag:"(4010,1075)",vr:"DS",name:"ImageScaleRepresentation",vm:"1",version:"DICOM/DICOS"},"(4010,1076)":{tag:"(4010,1076)",vr:"SQ",name:"ReferencedPTOSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1077)":{tag:"(4010,1077)",vr:"SQ",name:"ReferencedTDRInstanceSequence",vm:"1",version:"DICOM/DICOS"},"(4010,1078)":{tag:"(4010,1078)",vr:"ST",name:"PTOLocationDescription",vm:"1",version:"DICOM/DICOS"},"(4010,1079)":{tag:"(4010,1079)",vr:"SQ",name:"AnomalyLocatorIndicatorSequence",vm:"1",version:"DICOM/DICOS"},"(4010,107A)":{tag:"(4010,107A)",vr:"FL",name:"AnomalyLocatorIndicator",vm:"3",version:"DICOM/DICOS"},"(4010,107B)":{tag:"(4010,107B)",vr:"SQ",name:"PTORegionSequence",vm:"1",version:"DICOM/DICOS"},"(4010,107C)":{tag:"(4010,107C)",vr:"CS",name:"InspectionSelectionCriteria",vm:"1",version:"DICOM/DICOS"},"(4010,107D)":{tag:"(4010,107D)",vr:"SQ",name:"SecondaryInspectionMethodSequence",vm:"1",version:"DICOM/DICOS"},"(4010,107E)":{tag:"(4010,107E)",vr:"DS",name:"PRCSToRCSOrientation",vm:"6",version:"DICOM/DICOS"},"(4FFE,0001)":{tag:"(4FFE,0001)",vr:"SQ",name:"MACParametersSequence",vm:"1",version:"DICOM"},"(5200,9229)":{tag:"(5200,9229)",vr:"SQ",name:"SharedFunctionalGroupsSequence",vm:"1",version:"DICOM"},"(5200,9230)":{tag:"(5200,9230)",vr:"SQ",name:"PerFrameFunctionalGroupsSequence",vm:"1",version:"DICOM"},"(5400,0100)":{tag:"(5400,0100)",vr:"SQ",name:"WaveformSequence",vm:"1",version:"DICOM"},"(5400,0110)":{tag:"(5400,0110)",vr:"ox",name:"ChannelMinimumValue",vm:"1",version:"DICOM"},"(5400,0112)":{tag:"(5400,0112)",vr:"ox",name:"ChannelMaximumValue",vm:"1",version:"DICOM"},"(5400,1004)":{tag:"(5400,1004)",vr:"US",name:"WaveformBitsAllocated",vm:"1",version:"DICOM"},"(5400,1006)":{tag:"(5400,1006)",vr:"CS",name:"WaveformSampleInterpretation",vm:"1",version:"DICOM"},"(5400,100A)":{tag:"(5400,100A)",vr:"ox",name:"WaveformPaddingValue",vm:"1",version:"DICOM"},"(5400,1010)":{tag:"(5400,1010)",vr:"ox",name:"WaveformData",vm:"1",version:"DICOM"},"(5600,0010)":{tag:"(5600,0010)",vr:"OF",name:"FirstOrderPhaseCorrectionAngle",vm:"1",version:"DICOM"},"(5600,0020)":{tag:"(5600,0020)",vr:"OF",name:"SpectroscopyData",vm:"1",version:"DICOM"},"(6000-60FF,0010)":{tag:"(6000-60FF,0010)",vr:"US",name:"OverlayRows",vm:"1",version:"DICOM"},"(6000-60FF,0011)":{tag:"(6000-60FF,0011)",vr:"US",name:"OverlayColumns",vm:"1",version:"DICOM"},"(6000-60FF,0015)":{tag:"(6000-60FF,0015)",vr:"IS",name:"NumberOfFramesInOverlay",vm:"1",version:"DICOM"},"(6000-60FF,0022)":{tag:"(6000-60FF,0022)",vr:"LO",name:"OverlayDescription",vm:"1",version:"DICOM"},"(6000-60FF,0040)":{tag:"(6000-60FF,0040)",vr:"CS",name:"OverlayType",vm:"1",version:"DICOM"},"(6000-60FF,0045)":{tag:"(6000-60FF,0045)",vr:"LO",name:"OverlaySubtype",vm:"1",version:"DICOM"},"(6000-60FF,0050)":{tag:"(6000-60FF,0050)",vr:"SS",name:"OverlayOrigin",vm:"2",version:"DICOM"},"(6000-60FF,0051)":{tag:"(6000-60FF,0051)",vr:"US",name:"ImageFrameOrigin",vm:"1",version:"DICOM"},"(6000-60FF,0100)":{tag:"(6000-60FF,0100)",vr:"US",name:"OverlayBitsAllocated",vm:"1",version:"DICOM"},"(6000-60FF,0102)":{tag:"(6000-60FF,0102)",vr:"US",name:"OverlayBitPosition",vm:"1",version:"DICOM"},"(6000-60FF,1001)":{tag:"(6000-60FF,1001)",vr:"CS",name:"OverlayActivationLayer",vm:"1",version:"DICOM"},"(6000-60FF,1301)":{tag:"(6000-60FF,1301)",vr:"IS",name:"ROIArea",vm:"1",version:"DICOM"},"(6000-60FF,1302)":{tag:"(6000-60FF,1302)",vr:"DS",name:"ROIMean",vm:"1",version:"DICOM"},"(6000-60FF,1303)":{tag:"(6000-60FF,1303)",vr:"DS",name:"ROIStandardDeviation",vm:"1",version:"DICOM"},"(6000-60FF,1500)":{tag:"(6000-60FF,1500)",vr:"LO",name:"OverlayLabel",vm:"1",version:"DICOM"},"(6000-60FF,3000)":{tag:"(6000-60FF,3000)",vr:"ox",name:"OverlayData",vm:"1",version:"DICOM"},"(7FE0,0008)":{tag:"(7FE0,0008)",vr:"OF",name:"FloatPixelData",vm:"1",version:"DICOM"},"(7FE0,0009)":{tag:"(7FE0,0009)",vr:"OD",name:"DoubleFloatPixelData",vm:"1",version:"DICOM"},"(7FE0,0010)":{tag:"(7FE0,0010)",vr:"ox",name:"PixelData",vm:"1",version:"DICOM"},"(FFFA,FFFA)":{tag:"(FFFA,FFFA)",vr:"SQ",name:"DigitalSignaturesSequence",vm:"1",version:"DICOM"},"(FFFC,FFFC)":{tag:"(FFFC,FFFC)",vr:"OB",name:"DataSetTrailingPadding",vm:"1",version:"DICOM"},"(FFFE,E000)":{tag:"(FFFE,E000)",vr:"na",name:"Item",vm:"1",version:"DICOM"},"(FFFE,E00D)":{tag:"(FFFE,E00D)",vr:"na",name:"ItemDelimitationItem",vm:"1",version:"DICOM"},"(FFFE,E0DD)":{tag:"(FFFE,E0DD)",vr:"na",name:"SequenceDelimitationItem",vm:"1",version:"DICOM"},"(0028,1224)":{tag:"(0028,1224)",vr:"OW",name:"SegmentedAlphaPaletteColorLookupTableData",vm:"1",version:"Supplement_156"},"(0070,1101)":{tag:"(0070,1101)",vr:"UI",name:"PresentationDisplayCollectionUID",vm:"1",version:"Supplement_156"},"(0070,1102)":{tag:"(0070,1102)",vr:"UI",name:"PresentationSequenceCollectionUID",vm:"1",version:"Supplement_156"},"(0070,1103)":{tag:"(0070,1103)",vr:"US",name:"PresentationSequencePositionIndex",vm:"1",version:"Supplement_156"},"(0070,1104)":{tag:"(0070,1104)",vr:"SQ",name:"RenderedImageReferenceSequence",vm:"1",version:"Supplement_156"},"(0070,1201)":{tag:"(0070,1201)",vr:"SQ",name:"VolumetricPresentationStateInputSequence",vm:"1",version:"Supplement_156"},"(0070,1202)":{tag:"(0070,1202)",vr:"CS",name:"PresentationInputType",vm:"1",version:"Supplement_156"},"(0070,1203)":{tag:"(0070,1203)",vr:"US",name:"InputSequencePositionIndex",vm:"1",version:"Supplement_156"},"(0070,1204)":{tag:"(0070,1204)",vr:"CS",name:"Crop",vm:"1",version:"Supplement_156"},"(0070,1205)":{tag:"(0070,1205)",vr:"US",name:"CroppingSpecificationIndex",vm:"1-n",version:"Supplement_156"},"(0070,1206)":{tag:"(0070,1206)",vr:"CS",name:"CompositingMethod",vm:"1",version:"Supplement_156"},"(0070,1207)":{tag:"(0070,1207)",vr:"US",name:"VolumetricPresentationInputNumber",vm:"1",version:"Supplement_156"},"(0070,1208)":{tag:"(0070,1208)",vr:"CS",name:"ImageVolumeGeometry",vm:"1",version:"Supplement_156"},"(0070,1301)":{tag:"(0070,1301)",vr:"SQ",name:"VolumeCroppingSequence",vm:"1",version:"Supplement_156"},"(0070,1302)":{tag:"(0070,1302)",vr:"CS",name:"VolumeCroppingMethod",vm:"1",version:"Supplement_156"},"(0070,1303)":{tag:"(0070,1303)",vr:"FD",name:"BoundingBoxCrop",vm:"6",version:"Supplement_156"},"(0070,1304)":{tag:"(0070,1304)",vr:"SQ",name:"ObliqueCroppingPlaneSequence",vm:"1",version:"Supplement_156"},"(0070,1305)":{tag:"(0070,1305)",vr:"FD",name:"ObliqueCroppingPlane",vm:"4",version:"Supplement_156"},"(0070,1306)":{tag:"(0070,1306)",vr:"FD",name:"ObliqueCroppingPlaneNormal",vm:"3",version:"Supplement_156"},"(0070,1309)":{tag:"(0070,1309)",vr:"US",name:"CroppingSpecificationNumber",vm:"1",version:"Supplement_156"},"(0070,1501)":{tag:"(0070,1501)",vr:"CS",name:"MultiPlanarReconstructionStyle",vm:"1",version:"Supplement_156"},"(0070,1502)":{tag:"(0070,1502)",vr:"CS",name:"MPRThicknessType",vm:"1",version:"Supplement_156"},"(0070,1503)":{tag:"(0070,1503)",vr:"FD",name:"MPRSlabThickness",vm:"1",version:"Supplement_156"},"(0070,1505)":{tag:"(0070,1505)",vr:"FD",name:"MPRTopLeftHandCorner",vm:"3",version:"Supplement_156"},"(0070,1507)":{tag:"(0070,1507)",vr:"FD",name:"MPRViewWidthDirection",vm:"3",version:"Supplement_156"},"(0070,1508)":{tag:"(0070,1508)",vr:"FD",name:"MPRViewWidth",vm:"1",version:"Supplement_156"},"(0070,150C)":{tag:"(0070,150C)",vr:"FL",name:"NumberOfVolumetricCurvePoints",vm:"1",version:"Supplement_156"},"(0070,150D)":{tag:"(0070,150D)",vr:"OD",name:"VolumetricCurvePoints",vm:"1",version:"Supplement_156"},"(0070,1511)":{tag:"(0070,1511)",vr:"FD",name:"MPRViewHeightDirection",vm:"3",version:"Supplement_156"},"(0070,1512)":{tag:"(0070,1512)",vr:"FD",name:"MPRViewHeight",vm:"1",version:"Supplement_156"},"(0070,1801)":{tag:"(0070,1801)",vr:"SQ",name:"PresentationStateClassificationComponentSequence",vm:"1",version:"Supplement_156"},"(0070,1802)":{tag:"(0070,1802)",vr:"CS",name:"ComponentType",vm:"1",version:"Supplement_156"},"(0070,1803)":{tag:"(0070,1803)",vr:"SQ",name:"ComponentInputSequence",vm:"1",version:"Supplement_156"},"(0070,1804)":{tag:"(0070,1804)",vr:"US",name:"VolumetricPresentationInputIndex",vm:"1",version:"Supplement_156"},"(0070,1805)":{tag:"(0070,1805)",vr:"SQ",name:"PresentationStateCompositorComponentSequence",vm:"1",version:"Supplement_156"},"(0070,1806)":{tag:"(0070,1806)",vr:"SQ",name:"WeightingTransferFunctionSequence",vm:"1",version:"Supplement_156"},"(0070,1807)":{tag:"(0070,1807)",vr:"US",name:"WeightingLookupTableDescriptor",vm:"3",version:"Supplement_156"},"(0070,1808)":{tag:"(0070,1808)",vr:"OB",name:"WeightingLookupTableData",vm:"1",version:"Supplement_156"},"(0070,1901)":{tag:"(0070,1901)",vr:"SQ",name:"VolumetricAnnotationSequence",vm:"1",version:"Supplement_156"},"(0070,1903)":{tag:"(0070,1903)",vr:"SQ",name:"ReferencedStructuredContextSequence",vm:"1",version:"Supplement_156"},"(0070,1904)":{tag:"(0070,1904)",vr:"UI",name:"ReferencedContentItem",vm:"1",version:"Supplement_156"},"(0070,1905)":{tag:"(0070,1905)",vr:"SQ",name:"VolumetricPresentationInputAnnotationSequence",vm:"1",version:"Supplement_156"},"(0070,1907)":{tag:"(0070,1907)",vr:"CS",name:"AnnotationClipping",vm:"1",version:"Supplement_156"},"(0070,1A01)":{tag:"(0070,1A01)",vr:"CS",name:"PresentationAnimationStyle",vm:"1",version:"Supplement_156"},"(0070,1A03)":{tag:"(0070,1A03)",vr:"FD",name:"RecommendedAnimationRate",vm:"1",version:"Supplement_156"},"(0070,1A04)":{tag:"(0070,1A04)",vr:"SQ",name:"AnimationCurveSequence",vm:"1",version:"Supplement_156"},"(0070,1A05)":{tag:"(0070,1A05)",vr:"FD",name:"AnimationStepSize",vm:"1",version:"Supplement_156"},"(0040,4070)":{tag:"(0040,4070)",vr:"SQ",name:"OutputDestinationSequence",vm:"1",version:"CP_1441"},"(0040,4071)":{tag:"(0040,4071)",vr:"SQ",name:"DICOMStorageSequence",vm:"1",version:"CP_1441"},"(0040,4072)":{tag:"(0040,4072)",vr:"SQ",name:"STOWRSStorageSequence",vm:"1",version:"CP_1441"},"(0040,4073)":{tag:"(0040,4073)",vr:"UR",name:"StorageURL",vm:"1",version:"CP_1441"},"(0040,4074)":{tag:"(0040,4074)",vr:"SQ",name:"XDSStorageSequence",vm:"1",version:"CP_1441"},"(0028,2002)":{tag:"(0028,2002)",vr:"CS",name:"ColorSpace",vm:"1",version:"CP_1454"},"(0040,9213)":{tag:"(0040,9213)",vr:"FD",name:"DoubleFloatRealWorldValueLastValueMapped",vm:"1",version:"CP_1458"},"(0040,9214)":{tag:"(0040,9214)",vr:"FD",name:"DoubleFloatRealWorldValueFirstValueMapped",vm:"1",version:"CP_1458"},"(0018,1320)":{tag:"(0018,1320)",vr:"FL",name:"B1rms",vm:"1",version:"CP_1461"},"(0009-o-FFFF,0000)":{tag:"(0009-o-FFFF,0000)",vr:"UL",name:"PrivateGroupLength",vm:"1",version:"PRIVATE"},"(0009-o-FFFF,0010-u-00FF)":{tag:"(0009-o-FFFF,0010-u-00FF)",vr:"LO",name:"PrivateCreator",vm:"1",version:"PRIVATE"},"(0001-o-0007,0000)":{tag:"(0001-o-0007,0000)",vr:"UL",name:"IllegalGroupLength",vm:"1",version:"ILLEGAL"},"(0001-o-0007,0010-u-00FF)":{tag:"(0001-o-0007,0010-u-00FF)",vr:"LO",name:"IllegalPrivateCreator",vm:"1",version:"ILLEGAL"},"(0000-u-FFFF,0000)":{tag:"(0000-u-FFFF,0000)",vr:"UL",name:"GenericGroupLength",vm:"1",version:"GENERIC"},"(0000,0001)":{tag:"(0000,0001)",vr:"UL",name:"RETIRED_CommandLengthToEnd",vm:"1",version:"DICOM/retired"},"(0000,0010)":{tag:"(0000,0010)",vr:"SH",name:"RETIRED_CommandRecognitionCode",vm:"1",version:"DICOM/retired"},"(0000,0200)":{tag:"(0000,0200)",vr:"AE",name:"RETIRED_Initiator",vm:"1",version:"DICOM/retired"},"(0000,0300)":{tag:"(0000,0300)",vr:"AE",name:"RETIRED_Receiver",vm:"1",version:"DICOM/retired"},"(0000,0400)":{tag:"(0000,0400)",vr:"AE",name:"RETIRED_FindLocation",vm:"1",version:"DICOM/retired"},"(0000,0850)":{tag:"(0000,0850)",vr:"US",name:"RETIRED_NumberOfMatches",vm:"1",version:"DICOM/retired"},"(0000,0860)":{tag:"(0000,0860)",vr:"US",name:"RETIRED_ResponseSequenceNumber",vm:"1",version:"DICOM/retired"},"(0000,4000)":{tag:"(0000,4000)",vr:"LT",name:"RETIRED_DialogReceiver",vm:"1",version:"DICOM/retired"},"(0000,4010)":{tag:"(0000,4010)",vr:"LT",name:"RETIRED_TerminalType",vm:"1",version:"DICOM/retired"},"(0000,5010)":{tag:"(0000,5010)",vr:"SH",name:"RETIRED_MessageSetID",vm:"1",version:"DICOM/retired"},"(0000,5020)":{tag:"(0000,5020)",vr:"SH",name:"RETIRED_EndMessageID",vm:"1",version:"DICOM/retired"},"(0000,5110)":{tag:"(0000,5110)",vr:"LT",name:"RETIRED_DisplayFormat",vm:"1",version:"DICOM/retired"},"(0000,5120)":{tag:"(0000,5120)",vr:"LT",name:"RETIRED_PagePositionID",vm:"1",version:"DICOM/retired"},"(0000,5130)":{tag:"(0000,5130)",vr:"CS",name:"RETIRED_TextFormatID",vm:"1",version:"DICOM/retired"},"(0000,5140)":{tag:"(0000,5140)",vr:"CS",name:"RETIRED_NormalReverse",vm:"1",version:"DICOM/retired"},"(0000,5150)":{tag:"(0000,5150)",vr:"CS",name:"RETIRED_AddGrayScale",vm:"1",version:"DICOM/retired"},"(0000,5160)":{tag:"(0000,5160)",vr:"CS",name:"RETIRED_Borders",vm:"1",version:"DICOM/retired"},"(0000,5170)":{tag:"(0000,5170)",vr:"IS",name:"RETIRED_Copies",vm:"1",version:"DICOM/retired"},"(0000,5180)":{tag:"(0000,5180)",vr:"CS",name:"RETIRED_CommandMagnificationType",vm:"1",version:"DICOM/retired"},"(0000,5190)":{tag:"(0000,5190)",vr:"CS",name:"RETIRED_Erase",vm:"1",version:"DICOM/retired"},"(0000,51A0)":{tag:"(0000,51A0)",vr:"CS",name:"RETIRED_Print",vm:"1",version:"DICOM/retired"},"(0000,51B0)":{tag:"(0000,51B0)",vr:"US",name:"RETIRED_Overlays",vm:"1-n",version:"DICOM/retired"},"(0004,1504)":{tag:"(0004,1504)",vr:"up",name:"RETIRED_MRDRDirectoryRecordOffset",vm:"1",version:"DICOM/retired"},"(0004,1600)":{tag:"(0004,1600)",vr:"UL",name:"RETIRED_NumberOfReferences",vm:"1",version:"DICOM/retired"},"(0008,0001)":{tag:"(0008,0001)",vr:"UL",name:"RETIRED_LengthToEnd",vm:"1",version:"DICOM/retired"},"(0008,0010)":{tag:"(0008,0010)",vr:"SH",name:"RETIRED_RecognitionCode",vm:"1",version:"DICOM/retired"},"(0008,0024)":{tag:"(0008,0024)",vr:"DA",name:"RETIRED_OverlayDate",vm:"1",version:"DICOM/retired"},"(0008,0025)":{tag:"(0008,0025)",vr:"DA",name:"RETIRED_CurveDate",vm:"1",version:"DICOM/retired"},"(0008,0034)":{tag:"(0008,0034)",vr:"TM",name:"RETIRED_OverlayTime",vm:"1",version:"DICOM/retired"},"(0008,0035)":{tag:"(0008,0035)",vr:"TM",name:"RETIRED_CurveTime",vm:"1",version:"DICOM/retired"},"(0008,0040)":{tag:"(0008,0040)",vr:"US",name:"RETIRED_DataSetType",vm:"1",version:"DICOM/retired"},"(0008,0041)":{tag:"(0008,0041)",vr:"LO",name:"RETIRED_DataSetSubtype",vm:"1",version:"DICOM/retired"},"(0008,0042)":{tag:"(0008,0042)",vr:"CS",name:"RETIRED_NuclearMedicineSeriesType",vm:"1",version:"DICOM/retired"},"(0008,1000)":{tag:"(0008,1000)",vr:"AE",name:"RETIRED_NetworkID",vm:"1",version:"DICOM/retired"},"(0008,1100)":{tag:"(0008,1100)",vr:"SQ",name:"RETIRED_ReferencedResultsSequence",vm:"1",version:"DICOM/retired"},"(0008,1130)":{tag:"(0008,1130)",vr:"SQ",name:"RETIRED_ReferencedOverlaySequence",vm:"1",version:"DICOM/retired"},"(0008,1145)":{tag:"(0008,1145)",vr:"SQ",name:"RETIRED_ReferencedCurveSequence",vm:"1",version:"DICOM/retired"},"(0008,2110)":{tag:"(0008,2110)",vr:"CS",name:"RETIRED_LossyImageCompressionRetired",vm:"1",version:"DICOM/retired"},"(0008,2200)":{tag:"(0008,2200)",vr:"CS",name:"RETIRED_TransducerPosition",vm:"1",version:"DICOM/retired"},"(0008,2204)":{tag:"(0008,2204)",vr:"CS",name:"RETIRED_TransducerOrientation",vm:"1",version:"DICOM/retired"},"(0008,2208)":{tag:"(0008,2208)",vr:"CS",name:"RETIRED_AnatomicStructure",vm:"1",version:"DICOM/retired"},"(0008,2240)":{tag:"(0008,2240)",vr:"SQ",name:"RETIRED_TransducerPositionSequence",vm:"1",version:"DICOM/retired"},"(0008,2242)":{tag:"(0008,2242)",vr:"SQ",name:"RETIRED_TransducerPositionModifierSequence",vm:"1",version:"DICOM/retired"},"(0008,2244)":{tag:"(0008,2244)",vr:"SQ",name:"RETIRED_TransducerOrientationSequence",vm:"1",version:"DICOM/retired"},"(0008,2246)":{tag:"(0008,2246)",vr:"SQ",name:"RETIRED_TransducerOrientationModifierSequence",vm:"1",version:"DICOM/retired"},"(0008,2251)":{tag:"(0008,2251)",vr:"SQ",name:"RETIRED_AnatomicStructureSpaceOrRegionCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,2253)":{tag:"(0008,2253)",vr:"SQ",name:"RETIRED_AnatomicPortalOfEntranceCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,2255)":{tag:"(0008,2255)",vr:"SQ",name:"RETIRED_AnatomicApproachDirectionCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,2256)":{tag:"(0008,2256)",vr:"ST",name:"RETIRED_AnatomicPerspectiveDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0008,2257)":{tag:"(0008,2257)",vr:"SQ",name:"RETIRED_AnatomicPerspectiveCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,2258)":{tag:"(0008,2258)",vr:"ST",name:"RETIRED_AnatomicLocationOfExaminingInstrumentDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0008,2259)":{tag:"(0008,2259)",vr:"SQ",name:"RETIRED_AnatomicLocationOfExaminingInstrumentCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,225A)":{tag:"(0008,225A)",vr:"SQ",name:"RETIRED_AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,225C)":{tag:"(0008,225C)",vr:"SQ",name:"RETIRED_OnAxisBackgroundAnatomicStructureCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0008,4000)":{tag:"(0008,4000)",vr:"LT",name:"RETIRED_IdentifyingComments",vm:"1",version:"DICOM/retired"},"(0010,1050)":{tag:"(0010,1050)",vr:"LO",name:"RETIRED_InsurancePlanIdentification",vm:"1-n",version:"DICOM/retired"},"(0014,0023)":{tag:"(0014,0023)",vr:"ST",name:"RETIRED_CADFileFormat",vm:"1-n",version:"DICOM/retired"},"(0014,0024)":{tag:"(0014,0024)",vr:"ST",name:"RETIRED_ComponentReferenceSystem",vm:"1-n",version:"DICOM/retired"},"(0014,0045)":{tag:"(0014,0045)",vr:"ST",name:"RETIRED_MaterialPropertiesFileFormatRetired",vm:"1-n",version:"DICOM/retired"},"(0018,0030)":{tag:"(0018,0030)",vr:"LO",name:"RETIRED_Radionuclide",vm:"1-n",version:"DICOM/retired"},"(0018,0032)":{tag:"(0018,0032)",vr:"DS",name:"RETIRED_EnergyWindowCenterline",vm:"1",version:"DICOM/retired"},"(0018,0033)":{tag:"(0018,0033)",vr:"DS",name:"RETIRED_EnergyWindowTotalWidth",vm:"1-n",version:"DICOM/retired"},"(0018,0037)":{tag:"(0018,0037)",vr:"CS",name:"RETIRED_TherapyType",vm:"1",version:"DICOM/retired"},"(0018,0039)":{tag:"(0018,0039)",vr:"CS",name:"RETIRED_TherapyDescription",vm:"1",version:"DICOM/retired"},"(0018,1011)":{tag:"(0018,1011)",vr:"LO",name:"RETIRED_HardcopyCreationDeviceID",vm:"1",version:"DICOM/retired"},"(0018,1017)":{tag:"(0018,1017)",vr:"LO",name:"RETIRED_HardcopyDeviceManufacturer",vm:"1",version:"DICOM/retired"},"(0018,101A)":{tag:"(0018,101A)",vr:"LO",name:"RETIRED_HardcopyDeviceSoftwareVersion",vm:"1-n",version:"DICOM/retired"},"(0018,101B)":{tag:"(0018,101B)",vr:"LO",name:"RETIRED_HardcopyDeviceManufacturerModelName",vm:"1",version:"DICOM/retired"},"(0018,1141)":{tag:"(0018,1141)",vr:"DS",name:"RETIRED_AngularPosition",vm:"1",version:"DICOM/retired"},"(0018,1146)":{tag:"(0018,1146)",vr:"DS",name:"RETIRED_RotationOffset",vm:"1-n",version:"DICOM/retired"},"(0018,1240)":{tag:"(0018,1240)",vr:"IS",name:"RETIRED_UpperLowerPixelValues",vm:"1-n",version:"DICOM/retired"},"(0018,4000)":{tag:"(0018,4000)",vr:"LT",name:"RETIRED_AcquisitionComments",vm:"1",version:"DICOM/retired"},"(0018,5021)":{tag:"(0018,5021)",vr:"LO",name:"RETIRED_PostprocessingFunction",vm:"1",version:"DICOM/retired"},"(0018,5030)":{tag:"(0018,5030)",vr:"DS",name:"RETIRED_DynamicRange",vm:"1",version:"DICOM/retired"},"(0018,5040)":{tag:"(0018,5040)",vr:"DS",name:"RETIRED_TotalGain",vm:"1",version:"DICOM/retired"},"(0018,5210)":{tag:"(0018,5210)",vr:"DS",name:"RETIRED_ImageTransformationMatrix",vm:"6",version:"DICOM/retired"},"(0018,5212)":{tag:"(0018,5212)",vr:"DS",name:"RETIRED_ImageTranslationVector",vm:"3",version:"DICOM/retired"},"(0018,6038)":{tag:"(0018,6038)",vr:"UL",name:"RETIRED_DopplerSampleVolumeXPositionRetired",vm:"1",version:"DICOM/retired"},"(0018,603A)":{tag:"(0018,603A)",vr:"UL",name:"RETIRED_DopplerSampleVolumeYPositionRetired",vm:"1",version:"DICOM/retired"},"(0018,603C)":{tag:"(0018,603C)",vr:"UL",name:"RETIRED_TMLinePositionX0Retired",vm:"1",version:"DICOM/retired"},"(0018,603E)":{tag:"(0018,603E)",vr:"UL",name:"RETIRED_TMLinePositionY0Retired",vm:"1",version:"DICOM/retired"},"(0018,6040)":{tag:"(0018,6040)",vr:"UL",name:"RETIRED_TMLinePositionX1Retired",vm:"1",version:"DICOM/retired"},"(0018,6042)":{tag:"(0018,6042)",vr:"UL",name:"RETIRED_TMLinePositionY1Retired",vm:"1",version:"DICOM/retired"},"(0018,9096)":{tag:"(0018,9096)",vr:"FD",name:"RETIRED_ParallelReductionFactorInPlaneRetired",vm:"1",version:"DICOM/retired"},"(0018,9166)":{tag:"(0018,9166)",vr:"CS",name:"RETIRED_BulkMotionStatus",vm:"1",version:"DICOM/retired"},"(0018,9195)":{tag:"(0018,9195)",vr:"FD",name:"RETIRED_ChemicalShiftMinimumIntegrationLimitInHz",vm:"1",version:"DICOM/retired"},"(0018,9196)":{tag:"(0018,9196)",vr:"FD",name:"RETIRED_ChemicalShiftMaximumIntegrationLimitInHz",vm:"1",version:"DICOM/retired"},"(0020,0014)":{tag:"(0020,0014)",vr:"IS",name:"RETIRED_IsotopeNumber",vm:"1",version:"DICOM/retired"},"(0020,0015)":{tag:"(0020,0015)",vr:"IS",name:"RETIRED_PhaseNumber",vm:"1",version:"DICOM/retired"},"(0020,0016)":{tag:"(0020,0016)",vr:"IS",name:"RETIRED_IntervalNumber",vm:"1",version:"DICOM/retired"},"(0020,0017)":{tag:"(0020,0017)",vr:"IS",name:"RETIRED_TimeSlotNumber",vm:"1",version:"DICOM/retired"},"(0020,0018)":{tag:"(0020,0018)",vr:"IS",name:"RETIRED_AngleNumber",vm:"1",version:"DICOM/retired"},"(0020,0022)":{tag:"(0020,0022)",vr:"IS",name:"RETIRED_OverlayNumber",vm:"1",version:"DICOM/retired"},"(0020,0024)":{tag:"(0020,0024)",vr:"IS",name:"RETIRED_CurveNumber",vm:"1",version:"DICOM/retired"},"(0020,0026)":{tag:"(0020,0026)",vr:"IS",name:"RETIRED_LUTNumber",vm:"1",version:"DICOM/retired"},"(0020,0030)":{tag:"(0020,0030)",vr:"DS",name:"RETIRED_ImagePosition",vm:"3",version:"DICOM/retired"},"(0020,0035)":{tag:"(0020,0035)",vr:"DS",name:"RETIRED_ImageOrientation",vm:"6",version:"DICOM/retired"},"(0020,0050)":{tag:"(0020,0050)",vr:"DS",name:"RETIRED_Location",vm:"1",version:"DICOM/retired"},"(0020,0070)":{tag:"(0020,0070)",vr:"LO",name:"RETIRED_ImageGeometryType",vm:"1",version:"DICOM/retired"},"(0020,0080)":{tag:"(0020,0080)",vr:"CS",name:"RETIRED_MaskingImage",vm:"1-n",version:"DICOM/retired"},"(0020,00AA)":{tag:"(0020,00AA)",vr:"IS",name:"RETIRED_ReportNumber",vm:"1",version:"DICOM/retired"},"(0020,1000)":{tag:"(0020,1000)",vr:"IS",name:"RETIRED_SeriesInStudy",vm:"1",version:"DICOM/retired"},"(0020,1001)":{tag:"(0020,1001)",vr:"IS",name:"RETIRED_AcquisitionsInSeries",vm:"1",version:"DICOM/retired"},"(0020,1003)":{tag:"(0020,1003)",vr:"IS",name:"RETIRED_ImagesInSeries",vm:"1",version:"DICOM/retired"},"(0020,1004)":{tag:"(0020,1004)",vr:"IS",name:"RETIRED_AcquisitionsInStudy",vm:"1",version:"DICOM/retired"},"(0020,1005)":{tag:"(0020,1005)",vr:"IS",name:"RETIRED_ImagesInStudy",vm:"1",version:"DICOM/retired"},"(0020,1020)":{tag:"(0020,1020)",vr:"LO",name:"RETIRED_Reference",vm:"1-n",version:"DICOM/retired"},"(0020,1070)":{tag:"(0020,1070)",vr:"IS",name:"RETIRED_OtherStudyNumbers",vm:"1-n",version:"DICOM/retired"},"(0020,3100-31FF)":{tag:"(0020,3100-31FF)",vr:"CS",name:"RETIRED_SourceImageIDs",vm:"1-n",version:"DICOM/retired"},"(0020,3401)":{tag:"(0020,3401)",vr:"CS",name:"RETIRED_ModifyingDeviceID",vm:"1",version:"DICOM/retired"},"(0020,3402)":{tag:"(0020,3402)",vr:"CS",name:"RETIRED_ModifiedImageID",vm:"1",version:"DICOM/retired"},"(0020,3403)":{tag:"(0020,3403)",vr:"DA",name:"RETIRED_ModifiedImageDate",vm:"1",version:"DICOM/retired"},"(0020,3404)":{tag:"(0020,3404)",vr:"LO",name:"RETIRED_ModifyingDeviceManufacturer",vm:"1",version:"DICOM/retired"},"(0020,3405)":{tag:"(0020,3405)",vr:"TM",name:"RETIRED_ModifiedImageTime",vm:"1",version:"DICOM/retired"},"(0020,3406)":{tag:"(0020,3406)",vr:"LO",name:"RETIRED_ModifiedImageDescription",vm:"1",version:"DICOM/retired"},"(0020,5000)":{tag:"(0020,5000)",vr:"AT",name:"RETIRED_OriginalImageIdentification",vm:"1-n",version:"DICOM/retired"},"(0020,5002)":{tag:"(0020,5002)",vr:"LO",name:"RETIRED_OriginalImageIdentificationNomenclature",vm:"1-n",version:"DICOM/retired"},"(0022,1094)":{tag:"(0022,1094)",vr:"LO",name:"RETIRED_LensConstantDescription",vm:"1",version:"DICOM/retired"},"(0022,1153)":{tag:"(0022,1153)",vr:"SQ",name:"RETIRED_OphthalmicAxialLengthAcquisitionMethodCodeSequence",vm:"1",version:"DICOM/retired"},"(0022,1265)":{tag:"(0022,1265)",vr:"SQ",name:"RETIRED_OphthalmicAxialLengthQualityMetricTypeCodeSequence",vm:"1",version:"DICOM/retired"},"(0022,1273)":{tag:"(0022,1273)",vr:"LO",name:"RETIRED_OphthalmicAxialLengthQualityMetricTypeDescription",vm:"1",version:"DICOM/retired"},"(0028,0005)":{tag:"(0028,0005)",vr:"US",name:"RETIRED_ImageDimensions",vm:"1",version:"DICOM/retired"},"(0028,0012)":{tag:"(0028,0012)",vr:"US",name:"RETIRED_Planes",vm:"1",version:"DICOM/retired"},"(0028,0040)":{tag:"(0028,0040)",vr:"CS",name:"RETIRED_ImageFormat",vm:"1",version:"DICOM/retired"},"(0028,0050)":{tag:"(0028,0050)",vr:"LO",name:"RETIRED_ManipulatedImage",vm:"1-n",version:"DICOM/retired"},"(0028,005F)":{tag:"(0028,005F)",vr:"LO",name:"RETIRED_CompressionRecognitionCode",vm:"1",version:"DICOM/retired"},"(0028,0060)":{tag:"(0028,0060)",vr:"CS",name:"RETIRED_CompressionCode",vm:"1",version:"DICOM/retired"},"(0028,0061)":{tag:"(0028,0061)",vr:"SH",name:"RETIRED_CompressionOriginator",vm:"1",version:"DICOM/retired"},"(0028,0062)":{tag:"(0028,0062)",vr:"LO",name:"RETIRED_CompressionLabel",vm:"1",version:"DICOM/retired"},"(0028,0063)":{tag:"(0028,0063)",vr:"SH",name:"RETIRED_CompressionDescription",vm:"1",version:"DICOM/retired"},"(0028,0065)":{tag:"(0028,0065)",vr:"CS",name:"RETIRED_CompressionSequence",vm:"1-n",version:"DICOM/retired"},"(0028,0066)":{tag:"(0028,0066)",vr:"AT",name:"RETIRED_CompressionStepPointers",vm:"1-n",version:"DICOM/retired"},"(0028,0068)":{tag:"(0028,0068)",vr:"US",name:"RETIRED_RepeatInterval",vm:"1",version:"DICOM/retired"},"(0028,0069)":{tag:"(0028,0069)",vr:"US",name:"RETIRED_BitsGrouped",vm:"1",version:"DICOM/retired"},"(0028,0070)":{tag:"(0028,0070)",vr:"US",name:"RETIRED_PerimeterTable",vm:"1-n",version:"DICOM/retired"},"(0028,0071)":{tag:"(0028,0071)",vr:"xs",name:"RETIRED_PerimeterValue",vm:"1",version:"DICOM/retired"},"(0028,0080)":{tag:"(0028,0080)",vr:"US",name:"RETIRED_PredictorRows",vm:"1",version:"DICOM/retired"},"(0028,0081)":{tag:"(0028,0081)",vr:"US",name:"RETIRED_PredictorColumns",vm:"1",version:"DICOM/retired"},"(0028,0082)":{tag:"(0028,0082)",vr:"US",name:"RETIRED_PredictorConstants",vm:"1-n",version:"DICOM/retired"},"(0028,0090)":{tag:"(0028,0090)",vr:"CS",name:"RETIRED_BlockedPixels",vm:"1",version:"DICOM/retired"},"(0028,0091)":{tag:"(0028,0091)",vr:"US",name:"RETIRED_BlockRows",vm:"1",version:"DICOM/retired"},"(0028,0092)":{tag:"(0028,0092)",vr:"US",name:"RETIRED_BlockColumns",vm:"1",version:"DICOM/retired"},"(0028,0093)":{tag:"(0028,0093)",vr:"US",name:"RETIRED_RowOverlap",vm:"1",version:"DICOM/retired"},"(0028,0094)":{tag:"(0028,0094)",vr:"US",name:"RETIRED_ColumnOverlap",vm:"1",version:"DICOM/retired"},"(0028,0104)":{tag:"(0028,0104)",vr:"xs",name:"RETIRED_SmallestValidPixelValue",vm:"1",version:"DICOM/retired"},"(0028,0105)":{tag:"(0028,0105)",vr:"xs",name:"RETIRED_LargestValidPixelValue",vm:"1",version:"DICOM/retired"},"(0028,0110)":{tag:"(0028,0110)",vr:"xs",name:"RETIRED_SmallestImagePixelValueInPlane",vm:"1",version:"DICOM/retired"},"(0028,0111)":{tag:"(0028,0111)",vr:"xs",name:"RETIRED_LargestImagePixelValueInPlane",vm:"1",version:"DICOM/retired"},"(0028,0200)":{tag:"(0028,0200)",vr:"US",name:"RETIRED_ImageLocation",vm:"1",version:"DICOM/retired"},"(0028,0400)":{tag:"(0028,0400)",vr:"LO",name:"RETIRED_TransformLabel",vm:"1",version:"DICOM/retired"},"(0028,0401)":{tag:"(0028,0401)",vr:"LO",name:"RETIRED_TransformVersionNumber",vm:"1",version:"DICOM/retired"},"(0028,0402)":{tag:"(0028,0402)",vr:"US",name:"RETIRED_NumberOfTransformSteps",vm:"1",version:"DICOM/retired"},"(0028,0403)":{tag:"(0028,0403)",vr:"LO",name:"RETIRED_SequenceOfCompressedData",vm:"1-n",version:"DICOM/retired"},"(0028,0404)":{tag:"(0028,0404)",vr:"AT",name:"RETIRED_DetailsOfCoefficients",vm:"1-n",version:"DICOM/retired"},"(0028,0410)":{tag:"(0028,0410)",vr:"US",name:"RETIRED_RowsForNthOrderCoefficients",vm:"1",version:"DICOM/retired"},"(0028,0411)":{tag:"(0028,0411)",vr:"US",name:"RETIRED_ColumnsForNthOrderCoefficients",vm:"1",version:"DICOM/retired"},"(0028,0412)":{tag:"(0028,0412)",vr:"LO",name:"RETIRED_CoefficientCoding",vm:"1-n",version:"DICOM/retired"},"(0028,0413)":{tag:"(0028,0413)",vr:"AT",name:"RETIRED_CoefficientCodingPointers",vm:"1-n",version:"DICOM/retired"},"(0028,0700)":{tag:"(0028,0700)",vr:"LO",name:"RETIRED_DCTLabel",vm:"1",version:"DICOM/retired"},"(0028,0701)":{tag:"(0028,0701)",vr:"CS",name:"RETIRED_DataBlockDescription",vm:"1-n",version:"DICOM/retired"},"(0028,0702)":{tag:"(0028,0702)",vr:"AT",name:"RETIRED_DataBlock",vm:"1-n",version:"DICOM/retired"},"(0028,0710)":{tag:"(0028,0710)",vr:"US",name:"RETIRED_NormalizationFactorFormat",vm:"1",version:"DICOM/retired"},"(0028,0720)":{tag:"(0028,0720)",vr:"US",name:"RETIRED_ZonalMapNumberFormat",vm:"1",version:"DICOM/retired"},"(0028,0721)":{tag:"(0028,0721)",vr:"AT",name:"RETIRED_ZonalMapLocation",vm:"1-n",version:"DICOM/retired"},"(0028,0722)":{tag:"(0028,0722)",vr:"US",name:"RETIRED_ZonalMapFormat",vm:"1",version:"DICOM/retired"},"(0028,0730)":{tag:"(0028,0730)",vr:"US",name:"RETIRED_AdaptiveMapFormat",vm:"1",version:"DICOM/retired"},"(0028,0740)":{tag:"(0028,0740)",vr:"US",name:"RETIRED_CodeNumberFormat",vm:"1",version:"DICOM/retired"},"(0028,0800)":{tag:"(0028,0800)",vr:"CS",name:"RETIRED_CodeLabel",vm:"1-n",version:"DICOM/retired"},"(0028,0802)":{tag:"(0028,0802)",vr:"US",name:"RETIRED_NumberOfTables",vm:"1",version:"DICOM/retired"},"(0028,0803)":{tag:"(0028,0803)",vr:"AT",name:"RETIRED_CodeTableLocation",vm:"1-n",version:"DICOM/retired"},"(0028,0804)":{tag:"(0028,0804)",vr:"US",name:"RETIRED_BitsForCodeWord",vm:"1",version:"DICOM/retired"},"(0028,0808)":{tag:"(0028,0808)",vr:"AT",name:"RETIRED_ImageDataLocation",vm:"1-n",version:"DICOM/retired"},"(0028,1080)":{tag:"(0028,1080)",vr:"CS",name:"RETIRED_GrayScale",vm:"1",version:"DICOM/retired"},"(0028,1100)":{tag:"(0028,1100)",vr:"xs",name:"RETIRED_GrayLookupTableDescriptor",vm:"3",version:"DICOM/retired"},"(0028,1111)":{tag:"(0028,1111)",vr:"xs",name:"RETIRED_LargeRedPaletteColorLookupTableDescriptor",vm:"4",version:"DICOM/retired"},"(0028,1112)":{tag:"(0028,1112)",vr:"xs",name:"RETIRED_LargeGreenPaletteColorLookupTableDescriptor",vm:"4",version:"DICOM/retired"},"(0028,1113)":{tag:"(0028,1113)",vr:"xs",name:"RETIRED_LargeBluePaletteColorLookupTableDescriptor",vm:"4",version:"DICOM/retired"},"(0028,1200)":{tag:"(0028,1200)",vr:"lt",name:"RETIRED_GrayLookupTableData",vm:"1-n",version:"DICOM/retired"},"(0028,1211)":{tag:"(0028,1211)",vr:"OW",name:"RETIRED_LargeRedPaletteColorLookupTableData",vm:"1",version:"DICOM/retired"},"(0028,1212)":{tag:"(0028,1212)",vr:"OW",name:"RETIRED_LargeGreenPaletteColorLookupTableData",vm:"1",version:"DICOM/retired"},"(0028,1213)":{tag:"(0028,1213)",vr:"OW",name:"RETIRED_LargeBluePaletteColorLookupTableData",vm:"1",version:"DICOM/retired"},"(0028,1214)":{tag:"(0028,1214)",vr:"UI",name:"RETIRED_LargePaletteColorLookupTableUID",vm:"1",version:"DICOM/retired"},"(0028,4000)":{tag:"(0028,4000)",vr:"LT",name:"RETIRED_ImagePresentationComments",vm:"1",version:"DICOM/retired"},"(0028,5000)":{tag:"(0028,5000)",vr:"SQ",name:"RETIRED_BiPlaneAcquisitionSequence",vm:"1",version:"DICOM/retired"},"(0028,6030)":{tag:"(0028,6030)",vr:"US",name:"RETIRED_MaskPointers",vm:"1-n",version:"DICOM/retired"},"(0028,9099)":{tag:"(0028,9099)",vr:"US",name:"RETIRED_LargestMonochromePixelValue",vm:"1",version:"DICOM/retired"},"(0032,000A)":{tag:"(0032,000A)",vr:"CS",name:"RETIRED_StudyStatusID",vm:"1",version:"DICOM/retired"},"(0032,000C)":{tag:"(0032,000C)",vr:"CS",name:"RETIRED_StudyPriorityID",vm:"1",version:"DICOM/retired"},"(0032,0012)":{tag:"(0032,0012)",vr:"LO",name:"RETIRED_StudyIDIssuer",vm:"1",version:"DICOM/retired"},"(0032,0032)":{tag:"(0032,0032)",vr:"DA",name:"RETIRED_StudyVerifiedDate",vm:"1",version:"DICOM/retired"},"(0032,0033)":{tag:"(0032,0033)",vr:"TM",name:"RETIRED_StudyVerifiedTime",vm:"1",version:"DICOM/retired"},"(0032,0034)":{tag:"(0032,0034)",vr:"DA",name:"RETIRED_StudyReadDate",vm:"1",version:"DICOM/retired"},"(0032,0035)":{tag:"(0032,0035)",vr:"TM",name:"RETIRED_StudyReadTime",vm:"1",version:"DICOM/retired"},"(0032,1000)":{tag:"(0032,1000)",vr:"DA",name:"RETIRED_ScheduledStudyStartDate",vm:"1",version:"DICOM/retired"},"(0032,1001)":{tag:"(0032,1001)",vr:"TM",name:"RETIRED_ScheduledStudyStartTime",vm:"1",version:"DICOM/retired"},"(0032,1010)":{tag:"(0032,1010)",vr:"DA",name:"RETIRED_ScheduledStudyStopDate",vm:"1",version:"DICOM/retired"},"(0032,1011)":{tag:"(0032,1011)",vr:"TM",name:"RETIRED_ScheduledStudyStopTime",vm:"1",version:"DICOM/retired"},"(0032,1020)":{tag:"(0032,1020)",vr:"LO",name:"RETIRED_ScheduledStudyLocation",vm:"1",version:"DICOM/retired"},"(0032,1021)":{tag:"(0032,1021)",vr:"AE",name:"RETIRED_ScheduledStudyLocationAETitle",vm:"1-n",version:"DICOM/retired"},"(0032,1030)":{tag:"(0032,1030)",vr:"LO",name:"RETIRED_ReasonForStudy",vm:"1",version:"DICOM/retired"},"(0032,1040)":{tag:"(0032,1040)",vr:"DA",name:"RETIRED_StudyArrivalDate",vm:"1",version:"DICOM/retired"},"(0032,1041)":{tag:"(0032,1041)",vr:"TM",name:"RETIRED_StudyArrivalTime",vm:"1",version:"DICOM/retired"},"(0032,1050)":{tag:"(0032,1050)",vr:"DA",name:"RETIRED_StudyCompletionDate",vm:"1",version:"DICOM/retired"},"(0032,1051)":{tag:"(0032,1051)",vr:"TM",name:"RETIRED_StudyCompletionTime",vm:"1",version:"DICOM/retired"},"(0032,1055)":{tag:"(0032,1055)",vr:"CS",name:"RETIRED_StudyComponentStatusID",vm:"1",version:"DICOM/retired"},"(0032,4000)":{tag:"(0032,4000)",vr:"LT",name:"RETIRED_StudyComments",vm:"1",version:"DICOM/retired"},"(0038,0011)":{tag:"(0038,0011)",vr:"LO",name:"RETIRED_IssuerOfAdmissionID",vm:"1",version:"DICOM/retired"},"(0038,001A)":{tag:"(0038,001A)",vr:"DA",name:"RETIRED_ScheduledAdmissionDate",vm:"1",version:"DICOM/retired"},"(0038,001B)":{tag:"(0038,001B)",vr:"TM",name:"RETIRED_ScheduledAdmissionTime",vm:"1",version:"DICOM/retired"},"(0038,001C)":{tag:"(0038,001C)",vr:"DA",name:"RETIRED_ScheduledDischargeDate",vm:"1",version:"DICOM/retired"},"(0038,001D)":{tag:"(0038,001D)",vr:"TM",name:"RETIRED_ScheduledDischargeTime",vm:"1",version:"DICOM/retired"},"(0038,001E)":{tag:"(0038,001E)",vr:"LO",name:"RETIRED_ScheduledPatientInstitutionResidence",vm:"1",version:"DICOM/retired"},"(0038,0030)":{tag:"(0038,0030)",vr:"DA",name:"RETIRED_DischargeDate",vm:"1",version:"DICOM/retired"},"(0038,0032)":{tag:"(0038,0032)",vr:"TM",name:"RETIRED_DischargeTime",vm:"1",version:"DICOM/retired"},"(0038,0040)":{tag:"(0038,0040)",vr:"LO",name:"RETIRED_DischargeDiagnosisDescription",vm:"1",version:"DICOM/retired"},"(0038,0044)":{tag:"(0038,0044)",vr:"SQ",name:"RETIRED_DischargeDiagnosisCodeSequence",vm:"1",version:"DICOM/retired"},"(0038,0061)":{tag:"(0038,0061)",vr:"LO",name:"RETIRED_IssuerOfServiceEpisodeID",vm:"1",version:"DICOM/retired"},"(0040,0307)":{tag:"(0040,0307)",vr:"DS",name:"RETIRED_DistanceSourceToSupport",vm:"1",version:"DICOM/retired"},"(0040,0330)":{tag:"(0040,0330)",vr:"SQ",name:"RETIRED_ReferencedProcedureStepSequence",vm:"1",version:"DICOM/retired"},"(0040,050A)":{tag:"(0040,050A)",vr:"LO",name:"RETIRED_SpecimenAccessionNumber",vm:"1",version:"DICOM/retired"},"(0040,0550)":{tag:"(0040,0550)",vr:"SQ",name:"RETIRED_SpecimenSequence",vm:"1",version:"DICOM/retired"},"(0040,0552)":{tag:"(0040,0552)",vr:"SQ",name:"RETIRED_SpecimenDescriptionSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,0553)":{tag:"(0040,0553)",vr:"ST",name:"RETIRED_SpecimenDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0040,06FA)":{tag:"(0040,06FA)",vr:"LO",name:"RETIRED_SlideIdentifier",vm:"1",version:"DICOM/retired"},"(0040,08D8)":{tag:"(0040,08D8)",vr:"SQ",name:"RETIRED_PixelSpacingSequence",vm:"1",version:"DICOM/retired"},"(0040,08DA)":{tag:"(0040,08DA)",vr:"SQ",name:"RETIRED_CoordinateSystemAxisCodeSequence",vm:"1",version:"DICOM/retired"},"(0040,09F8)":{tag:"(0040,09F8)",vr:"SQ",name:"RETIRED_VitalStainCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,1006)":{tag:"(0040,1006)",vr:"SH",name:"RETIRED_PlacerOrderNumberProcedure",vm:"1",version:"DICOM/retired"},"(0040,1007)":{tag:"(0040,1007)",vr:"SH",name:"RETIRED_FillerOrderNumberProcedure",vm:"1",version:"DICOM/retired"},"(0040,1060)":{tag:"(0040,1060)",vr:"LO",name:"RETIRED_RequestedProcedureDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0040,2001)":{tag:"(0040,2001)",vr:"LO",name:"RETIRED_ReasonForTheImagingServiceRequest",vm:"1",version:"DICOM/retired"},"(0040,2006)":{tag:"(0040,2006)",vr:"SH",name:"RETIRED_PlacerOrderNumberImagingServiceRequestRetired",vm:"1",version:"DICOM/retired"},"(0040,2007)":{tag:"(0040,2007)",vr:"SH",name:"RETIRED_FillerOrderNumberImagingServiceRequestRetired",vm:"1",version:"DICOM/retired"},"(0040,4001)":{tag:"(0040,4001)",vr:"CS",name:"RETIRED_GeneralPurposeScheduledProcedureStepStatus",vm:"1",version:"DICOM/retired"},"(0040,4002)":{tag:"(0040,4002)",vr:"CS",name:"RETIRED_GeneralPurposePerformedProcedureStepStatus",vm:"1",version:"DICOM/retired"},"(0040,4003)":{tag:"(0040,4003)",vr:"CS",name:"RETIRED_GeneralPurposeScheduledProcedureStepPriority",vm:"1",version:"DICOM/retired"},"(0040,4004)":{tag:"(0040,4004)",vr:"SQ",name:"RETIRED_ScheduledProcessingApplicationsCodeSequence",vm:"1",version:"DICOM/retired"},"(0040,4006)":{tag:"(0040,4006)",vr:"CS",name:"RETIRED_MultipleCopiesFlag",vm:"1",version:"DICOM/retired"},"(0040,4015)":{tag:"(0040,4015)",vr:"SQ",name:"RETIRED_ResultingGeneralPurposePerformedProcedureStepsSequence",vm:"1",version:"DICOM/retired"},"(0040,4016)":{tag:"(0040,4016)",vr:"SQ",name:"RETIRED_ReferencedGeneralPurposeScheduledProcedureStepSequence",vm:"1",version:"DICOM/retired"},"(0040,4022)":{tag:"(0040,4022)",vr:"SQ",name:"RETIRED_RelevantInformationSequence",vm:"1",version:"DICOM/retired"},"(0040,4023)":{tag:"(0040,4023)",vr:"UI",name:"RETIRED_ReferencedGeneralPurposeScheduledProcedureStepTransactionUID",vm:"1",version:"DICOM/retired"},"(0040,4031)":{tag:"(0040,4031)",vr:"SQ",name:"RETIRED_RequestedSubsequentWorkitemCodeSequence",vm:"1",version:"DICOM/retired"},"(0040,4032)":{tag:"(0040,4032)",vr:"SQ",name:"RETIRED_NonDICOMOutputCodeSequence",vm:"1",version:"DICOM/retired"},"(0040,A007)":{tag:"(0040,A007)",vr:"CS",name:"RETIRED_FindingsFlagTrial",vm:"1",version:"DICOM/retired"},"(0040,A020)":{tag:"(0040,A020)",vr:"SQ",name:"RETIRED_FindingsSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A021)":{tag:"(0040,A021)",vr:"UI",name:"RETIRED_FindingsGroupUIDTrial",vm:"1",version:"DICOM/retired"},"(0040,A022)":{tag:"(0040,A022)",vr:"UI",name:"RETIRED_ReferencedFindingsGroupUIDTrial",vm:"1",version:"DICOM/retired"},"(0040,A023)":{tag:"(0040,A023)",vr:"DA",name:"RETIRED_FindingsGroupRecordingDateTrial",vm:"1",version:"DICOM/retired"},"(0040,A024)":{tag:"(0040,A024)",vr:"TM",name:"RETIRED_FindingsGroupRecordingTimeTrial",vm:"1",version:"DICOM/retired"},"(0040,A026)":{tag:"(0040,A026)",vr:"SQ",name:"RETIRED_FindingsSourceCategoryCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A028)":{tag:"(0040,A028)",vr:"SQ",name:"RETIRED_DocumentingOrganizationIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A047)":{tag:"(0040,A047)",vr:"LO",name:"RETIRED_MeasurementPrecisionDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0040,A057)":{tag:"(0040,A057)",vr:"CS",name:"RETIRED_UrgencyOrPriorityAlertsTrial",vm:"1-n",version:"DICOM/retired"},"(0040,A060)":{tag:"(0040,A060)",vr:"LO",name:"RETIRED_SequencingIndicatorTrial",vm:"1",version:"DICOM/retired"},"(0040,A066)":{tag:"(0040,A066)",vr:"SQ",name:"RETIRED_DocumentIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A067)":{tag:"(0040,A067)",vr:"PN",name:"RETIRED_DocumentAuthorTrial",vm:"1",version:"DICOM/retired"},"(0040,A068)":{tag:"(0040,A068)",vr:"SQ",name:"RETIRED_DocumentAuthorIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A070)":{tag:"(0040,A070)",vr:"SQ",name:"RETIRED_IdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A074)":{tag:"(0040,A074)",vr:"OB",name:"RETIRED_ObjectBinaryIdentifierTrial",vm:"1",version:"DICOM/retired"},"(0040,A076)":{tag:"(0040,A076)",vr:"SQ",name:"RETIRED_DocumentingObserverIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A085)":{tag:"(0040,A085)",vr:"SQ",name:"RETIRED_ProcedureIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A089)":{tag:"(0040,A089)",vr:"OB",name:"RETIRED_ObjectDirectoryBinaryIdentifierTrial",vm:"1",version:"DICOM/retired"},"(0040,A090)":{tag:"(0040,A090)",vr:"SQ",name:"RETIRED_EquivalentCDADocumentSequence",vm:"1",version:"DICOM/retired"},"(0040,A110)":{tag:"(0040,A110)",vr:"DA",name:"RETIRED_DateOfDocumentOrVerbalTransactionTrial",vm:"1",version:"DICOM/retired"},"(0040,A112)":{tag:"(0040,A112)",vr:"TM",name:"RETIRED_TimeOfDocumentCreationOrVerbalTransactionTrial",vm:"1",version:"DICOM/retired"},"(0040,A125)":{tag:"(0040,A125)",vr:"CS",name:"RETIRED_ReportStatusIDTrial",vm:"2",version:"DICOM/retired"},"(0040,A167)":{tag:"(0040,A167)",vr:"SQ",name:"RETIRED_ObservationCategoryCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A16A)":{tag:"(0040,A16A)",vr:"ST",name:"RETIRED_BibliographicCitationTrial",vm:"1",version:"DICOM/retired"},"(0040,A172)":{tag:"(0040,A172)",vr:"UI",name:"RETIRED_ReferencedObservationUIDTrial",vm:"1",version:"DICOM/retired"},"(0040,A173)":{tag:"(0040,A173)",vr:"CS",name:"RETIRED_ReferencedObservationClassTrial",vm:"1",version:"DICOM/retired"},"(0040,A174)":{tag:"(0040,A174)",vr:"CS",name:"RETIRED_ReferencedObjectObservationClassTrial",vm:"1",version:"DICOM/retired"},"(0040,A192)":{tag:"(0040,A192)",vr:"DA",name:"RETIRED_ObservationDateTrial",vm:"1",version:"DICOM/retired"},"(0040,A193)":{tag:"(0040,A193)",vr:"TM",name:"RETIRED_ObservationTimeTrial",vm:"1",version:"DICOM/retired"},"(0040,A194)":{tag:"(0040,A194)",vr:"CS",name:"RETIRED_MeasurementAutomationTrial",vm:"1",version:"DICOM/retired"},"(0040,A224)":{tag:"(0040,A224)",vr:"ST",name:"RETIRED_IdentificationDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0040,A290)":{tag:"(0040,A290)",vr:"CS",name:"RETIRED_CoordinatesSetGeometricTypeTrial",vm:"1",version:"DICOM/retired"},"(0040,A296)":{tag:"(0040,A296)",vr:"SQ",name:"RETIRED_AlgorithmCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A297)":{tag:"(0040,A297)",vr:"ST",name:"RETIRED_AlgorithmDescriptionTrial",vm:"1",version:"DICOM/retired"},"(0040,A29A)":{tag:"(0040,A29A)",vr:"SL",name:"RETIRED_PixelCoordinatesSetTrial",vm:"2-2n",version:"DICOM/retired"},"(0040,A307)":{tag:"(0040,A307)",vr:"PN",name:"RETIRED_CurrentObserverTrial",vm:"1",version:"DICOM/retired"},"(0040,A313)":{tag:"(0040,A313)",vr:"SQ",name:"RETIRED_ReferencedAccessionSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A33A)":{tag:"(0040,A33A)",vr:"ST",name:"RETIRED_ReportStatusCommentTrial",vm:"1",version:"DICOM/retired"},"(0040,A340)":{tag:"(0040,A340)",vr:"SQ",name:"RETIRED_ProcedureContextSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A352)":{tag:"(0040,A352)",vr:"PN",name:"RETIRED_VerbalSourceTrial",vm:"1",version:"DICOM/retired"},"(0040,A353)":{tag:"(0040,A353)",vr:"ST",name:"RETIRED_AddressTrial",vm:"1",version:"DICOM/retired"},"(0040,A354)":{tag:"(0040,A354)",vr:"LO",name:"RETIRED_TelephoneNumberTrial",vm:"1",version:"DICOM/retired"},"(0040,A358)":{tag:"(0040,A358)",vr:"SQ",name:"RETIRED_VerbalSourceIdentifierCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A380)":{tag:"(0040,A380)",vr:"SQ",name:"RETIRED_ReportDetailSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A402)":{tag:"(0040,A402)",vr:"UI",name:"RETIRED_ObservationSubjectUIDTrial",vm:"1",version:"DICOM/retired"},"(0040,A403)":{tag:"(0040,A403)",vr:"CS",name:"RETIRED_ObservationSubjectClassTrial",vm:"1",version:"DICOM/retired"},"(0040,A404)":{tag:"(0040,A404)",vr:"SQ",name:"RETIRED_ObservationSubjectTypeCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A600)":{tag:"(0040,A600)",vr:"CS",name:"RETIRED_ObservationSubjectContextFlagTrial",vm:"1",version:"DICOM/retired"},"(0040,A601)":{tag:"(0040,A601)",vr:"CS",name:"RETIRED_ObserverContextFlagTrial",vm:"1",version:"DICOM/retired"},"(0040,A603)":{tag:"(0040,A603)",vr:"CS",name:"RETIRED_ProcedureContextFlagTrial",vm:"1",version:"DICOM/retired"},"(0040,A731)":{tag:"(0040,A731)",vr:"SQ",name:"RETIRED_RelationshipSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A732)":{tag:"(0040,A732)",vr:"SQ",name:"RETIRED_RelationshipTypeCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A744)":{tag:"(0040,A744)",vr:"SQ",name:"RETIRED_LanguageCodeSequenceTrial",vm:"1",version:"DICOM/retired"},"(0040,A992)":{tag:"(0040,A992)",vr:"ST",name:"RETIRED_UniformResourceLocatorTrial",vm:"1",version:"DICOM/retired"},"(0040,DB06)":{tag:"(0040,DB06)",vr:"DT",name:"RETIRED_TemplateVersion",vm:"1",version:"DICOM/retired"},"(0040,DB07)":{tag:"(0040,DB07)",vr:"DT",name:"RETIRED_TemplateLocalVersion",vm:"1",version:"DICOM/retired"},"(0040,DB0B)":{tag:"(0040,DB0B)",vr:"CS",name:"RETIRED_TemplateExtensionFlag",vm:"1",version:"DICOM/retired"},"(0040,DB0C)":{tag:"(0040,DB0C)",vr:"UI",name:"RETIRED_TemplateExtensionOrganizationUID",vm:"1",version:"DICOM/retired"},"(0040,DB0D)":{tag:"(0040,DB0D)",vr:"UI",name:"RETIRED_TemplateExtensionCreatorUID",vm:"1",version:"DICOM/retired"},"(0054,1400)":{tag:"(0054,1400)",vr:"CS",name:"RETIRED_CountsIncluded",vm:"1-n",version:"DICOM/retired"},"(0054,1401)":{tag:"(0054,1401)",vr:"CS",name:"RETIRED_DeadTimeCorrectionFlag",vm:"1",version:"DICOM/retired"},"(0070,0040)":{tag:"(0070,0040)",vr:"IS",name:"RETIRED_ImageRotationRetired",vm:"1",version:"DICOM/retired"},"(0070,0050)":{tag:"(0070,0050)",vr:"US",name:"RETIRED_DisplayedAreaTopLeftHandCornerTrial",vm:"2",version:"DICOM/retired"},"(0070,0051)":{tag:"(0070,0051)",vr:"US",name:"RETIRED_DisplayedAreaBottomRightHandCornerTrial",vm:"2",version:"DICOM/retired"},"(0070,0067)":{tag:"(0070,0067)",vr:"US",name:"RETIRED_GraphicLayerRecommendedDisplayRGBValue",vm:"3",version:"DICOM/retired"},"(0074,1024)":{tag:"(0074,1024)",vr:"IS",name:"RETIRED_BeamOrderIndexTrial",vm:"1",version:"DICOM/retired"},"(0074,1038)":{tag:"(0074,1038)",vr:"DS",name:"RETIRED_DoubleExposureMetersetTrial",vm:"1",version:"DICOM/retired"},"(0074,103A)":{tag:"(0074,103A)",vr:"DS",name:"RETIRED_DoubleExposureFieldDeltaTrial",vm:"4",version:"DICOM/retired"},"(0074,1220)":{tag:"(0074,1220)",vr:"SQ",name:"RETIRED_RelatedProcedureStepSequence",vm:"1",version:"DICOM/retired"},"(0074,1222)":{tag:"(0074,1222)",vr:"LO",name:"RETIRED_ProcedureStepRelationshipType",vm:"1",version:"DICOM/retired"},"(0088,0904)":{tag:"(0088,0904)",vr:"LO",name:"RETIRED_TopicTitle",vm:"1",version:"DICOM/retired"},"(0088,0906)":{tag:"(0088,0906)",vr:"ST",name:"RETIRED_TopicSubject",vm:"1",version:"DICOM/retired"},"(0088,0910)":{tag:"(0088,0910)",vr:"LO",name:"RETIRED_TopicAuthor",vm:"1",version:"DICOM/retired"},"(0088,0912)":{tag:"(0088,0912)",vr:"LO",name:"RETIRED_TopicKeywords",vm:"1-32",version:"DICOM/retired"},"(1000,0010)":{tag:"(1000,0010)",vr:"US",name:"RETIRED_EscapeTriplet",vm:"3",version:"DICOM/retired"},"(1000,0011)":{tag:"(1000,0011)",vr:"US",name:"RETIRED_RunLengthTriplet",vm:"3",version:"DICOM/retired"},"(1000,0012)":{tag:"(1000,0012)",vr:"US",name:"RETIRED_HuffmanTableSize",vm:"1",version:"DICOM/retired"},"(1000,0013)":{tag:"(1000,0013)",vr:"US",name:"RETIRED_HuffmanTableTriplet",vm:"3",version:"DICOM/retired"},"(1000,0014)":{tag:"(1000,0014)",vr:"US",name:"RETIRED_ShiftTableSize",vm:"1",version:"DICOM/retired"},"(1000,0015)":{tag:"(1000,0015)",vr:"US",name:"RETIRED_ShiftTableTriplet",vm:"3",version:"DICOM/retired"},"(1010,0004)":{tag:"(1010,0004)",vr:"US",name:"RETIRED_ZonalMap",vm:"1-n",version:"DICOM/retired"},"(2000,0062)":{tag:"(2000,0062)",vr:"CS",name:"RETIRED_ColorImagePrintingFlag",vm:"1",version:"DICOM/retired"},"(2000,0063)":{tag:"(2000,0063)",vr:"CS",name:"RETIRED_CollationFlag",vm:"1",version:"DICOM/retired"},"(2000,0065)":{tag:"(2000,0065)",vr:"CS",name:"RETIRED_AnnotationFlag",vm:"1",version:"DICOM/retired"},"(2000,0067)":{tag:"(2000,0067)",vr:"CS",name:"RETIRED_ImageOverlayFlag",vm:"1",version:"DICOM/retired"},"(2000,0069)":{tag:"(2000,0069)",vr:"CS",name:"RETIRED_PresentationLUTFlag",vm:"1",version:"DICOM/retired"},"(2000,006A)":{tag:"(2000,006A)",vr:"CS",name:"RETIRED_ImageBoxPresentationLUTFlag",vm:"1",version:"DICOM/retired"},"(2000,0510)":{tag:"(2000,0510)",vr:"SQ",name:"RETIRED_ReferencedStoredPrintSequence",vm:"1",version:"DICOM/retired"},"(2020,0130)":{tag:"(2020,0130)",vr:"SQ",name:"RETIRED_ReferencedImageOverlayBoxSequence",vm:"1",version:"DICOM/retired"},"(2020,0140)":{tag:"(2020,0140)",vr:"SQ",name:"RETIRED_ReferencedVOILUTBoxSequence",vm:"1",version:"DICOM/retired"},"(2040,0010)":{tag:"(2040,0010)",vr:"SQ",name:"RETIRED_ReferencedOverlayPlaneSequence",vm:"1",version:"DICOM/retired"},"(2040,0011)":{tag:"(2040,0011)",vr:"US",name:"RETIRED_ReferencedOverlayPlaneGroups",vm:"1-99",version:"DICOM/retired"},"(2040,0020)":{tag:"(2040,0020)",vr:"SQ",name:"RETIRED_OverlayPixelDataSequence",vm:"1",version:"DICOM/retired"},"(2040,0060)":{tag:"(2040,0060)",vr:"CS",name:"RETIRED_OverlayMagnificationType",vm:"1",version:"DICOM/retired"},"(2040,0070)":{tag:"(2040,0070)",vr:"CS",name:"RETIRED_OverlaySmoothingType",vm:"1",version:"DICOM/retired"},"(2040,0072)":{tag:"(2040,0072)",vr:"CS",name:"RETIRED_OverlayOrImageMagnification",vm:"1",version:"DICOM/retired"},"(2040,0074)":{tag:"(2040,0074)",vr:"US",name:"RETIRED_MagnifyToNumberOfColumns",vm:"1",version:"DICOM/retired"},"(2040,0080)":{tag:"(2040,0080)",vr:"CS",name:"RETIRED_OverlayForegroundDensity",vm:"1",version:"DICOM/retired"},"(2040,0082)":{tag:"(2040,0082)",vr:"CS",name:"RETIRED_OverlayBackgroundDensity",vm:"1",version:"DICOM/retired"},"(2040,0090)":{tag:"(2040,0090)",vr:"CS",name:"RETIRED_OverlayMode",vm:"1",version:"DICOM/retired"},"(2040,0100)":{tag:"(2040,0100)",vr:"CS",name:"RETIRED_ThresholdDensity",vm:"1",version:"DICOM/retired"},"(2040,0500)":{tag:"(2040,0500)",vr:"SQ",name:"RETIRED_ReferencedImageBoxSequenceRetired",vm:"1",version:"DICOM/retired"},"(2100,0010)":{tag:"(2100,0010)",vr:"SH",name:"RETIRED_PrintJobID",vm:"1",version:"DICOM/retired"},"(2100,0140)":{tag:"(2100,0140)",vr:"AE",name:"RETIRED_DestinationAE",vm:"1",version:"DICOM/retired"},"(2100,0500)":{tag:"(2100,0500)",vr:"SQ",name:"RETIRED_ReferencedPrintJobSequencePullStoredPrint",vm:"1",version:"DICOM/retired"},"(2110,0099)":{tag:"(2110,0099)",vr:"SH",name:"RETIRED_PrintQueueID",vm:"1",version:"DICOM/retired"},"(2120,0010)":{tag:"(2120,0010)",vr:"CS",name:"RETIRED_QueueStatus",vm:"1",version:"DICOM/retired"},"(2120,0050)":{tag:"(2120,0050)",vr:"SQ",name:"RETIRED_PrintJobDescriptionSequence",vm:"1",version:"DICOM/retired"},"(2120,0070)":{tag:"(2120,0070)",vr:"SQ",name:"RETIRED_ReferencedPrintJobSequence",vm:"1",version:"DICOM/retired"},"(2130,0010)":{tag:"(2130,0010)",vr:"SQ",name:"RETIRED_PrintManagementCapabilitiesSequence",vm:"1",version:"DICOM/retired"},"(2130,0015)":{tag:"(2130,0015)",vr:"SQ",name:"RETIRED_PrinterCharacteristicsSequence",vm:"1",version:"DICOM/retired"},"(2130,0030)":{tag:"(2130,0030)",vr:"SQ",name:"RETIRED_FilmBoxContentSequence",vm:"1",version:"DICOM/retired"},"(2130,0040)":{tag:"(2130,0040)",vr:"SQ",name:"RETIRED_ImageBoxContentSequence",vm:"1",version:"DICOM/retired"},"(2130,0050)":{tag:"(2130,0050)",vr:"SQ",name:"RETIRED_AnnotationContentSequence",vm:"1",version:"DICOM/retired"},"(2130,0060)":{tag:"(2130,0060)",vr:"SQ",name:"RETIRED_ImageOverlayBoxContentSequence",vm:"1",version:"DICOM/retired"},"(2130,0080)":{tag:"(2130,0080)",vr:"SQ",name:"RETIRED_PresentationLUTContentSequence",vm:"1",version:"DICOM/retired"},"(2130,00A0)":{tag:"(2130,00A0)",vr:"SQ",name:"RETIRED_ProposedStudySequence",vm:"1",version:"DICOM/retired"},"(2130,00C0)":{tag:"(2130,00C0)",vr:"SQ",name:"RETIRED_OriginalImageSequence",vm:"1",version:"DICOM/retired"},"(3006,00C0)":{tag:"(3006,00C0)",vr:"SQ",name:"RETIRED_FrameOfReferenceRelationshipSequence",vm:"1",version:"DICOM/retired"},"(3006,00C2)":{tag:"(3006,00C2)",vr:"UI",name:"RETIRED_RelatedFrameOfReferenceUID",vm:"1",version:"DICOM/retired"},"(3006,00C4)":{tag:"(3006,00C4)",vr:"CS",name:"RETIRED_FrameOfReferenceTransformationType",vm:"1",version:"DICOM/retired"},"(300A,0088)":{tag:"(300A,0088)",vr:"FL",name:"RETIRED_BeamDosePointDepth",vm:"1",version:"DICOM/retired"},"(300A,0089)":{tag:"(300A,0089)",vr:"FL",name:"RETIRED_BeamDosePointEquivalentDepth",vm:"1",version:"DICOM/retired"},"(300A,008A)":{tag:"(300A,008A)",vr:"FL",name:"RETIRED_BeamDosePointSSD",vm:"1",version:"DICOM/retired"},"(4000,0010)":{tag:"(4000,0010)",vr:"LT",name:"RETIRED_Arbitrary",vm:"1",version:"DICOM/retired"},"(4000,4000)":{tag:"(4000,4000)",vr:"LT",name:"RETIRED_TextComments",vm:"1",version:"DICOM/retired"},"(4008,0040)":{tag:"(4008,0040)",vr:"SH",name:"RETIRED_ResultsID",vm:"1",version:"DICOM/retired"},"(4008,0042)":{tag:"(4008,0042)",vr:"LO",name:"RETIRED_ResultsIDIssuer",vm:"1",version:"DICOM/retired"},"(4008,0050)":{tag:"(4008,0050)",vr:"SQ",name:"RETIRED_ReferencedInterpretationSequence",vm:"1",version:"DICOM/retired"},"(4008,00FF)":{tag:"(4008,00FF)",vr:"CS",name:"RETIRED_ReportProductionStatusTrial",vm:"1",version:"DICOM/retired"},"(4008,0100)":{tag:"(4008,0100)",vr:"DA",name:"RETIRED_InterpretationRecordedDate",vm:"1",version:"DICOM/retired"},"(4008,0101)":{tag:"(4008,0101)",vr:"TM",name:"RETIRED_InterpretationRecordedTime",vm:"1",version:"DICOM/retired"},"(4008,0102)":{tag:"(4008,0102)",vr:"PN",name:"RETIRED_InterpretationRecorder",vm:"1",version:"DICOM/retired"},"(4008,0103)":{tag:"(4008,0103)",vr:"LO",name:"RETIRED_ReferenceToRecordedSound",vm:"1",version:"DICOM/retired"},"(4008,0108)":{tag:"(4008,0108)",vr:"DA",name:"RETIRED_InterpretationTranscriptionDate",vm:"1",version:"DICOM/retired"},"(4008,0109)":{tag:"(4008,0109)",vr:"TM",name:"RETIRED_InterpretationTranscriptionTime",vm:"1",version:"DICOM/retired"},"(4008,010A)":{tag:"(4008,010A)",vr:"PN",name:"RETIRED_InterpretationTranscriber",vm:"1",version:"DICOM/retired"},"(4008,010B)":{tag:"(4008,010B)",vr:"ST",name:"RETIRED_InterpretationText",vm:"1",version:"DICOM/retired"},"(4008,010C)":{tag:"(4008,010C)",vr:"PN",name:"RETIRED_InterpretationAuthor",vm:"1",version:"DICOM/retired"},"(4008,0111)":{tag:"(4008,0111)",vr:"SQ",name:"RETIRED_InterpretationApproverSequence",vm:"1",version:"DICOM/retired"},"(4008,0112)":{tag:"(4008,0112)",vr:"DA",name:"RETIRED_InterpretationApprovalDate",vm:"1",version:"DICOM/retired"},"(4008,0113)":{tag:"(4008,0113)",vr:"TM",name:"RETIRED_InterpretationApprovalTime",vm:"1",version:"DICOM/retired"},"(4008,0114)":{tag:"(4008,0114)",vr:"PN",name:"RETIRED_PhysicianApprovingInterpretation",vm:"1",version:"DICOM/retired"},"(4008,0115)":{tag:"(4008,0115)",vr:"LT",name:"RETIRED_InterpretationDiagnosisDescription",vm:"1",version:"DICOM/retired"},"(4008,0117)":{tag:"(4008,0117)",vr:"SQ",name:"RETIRED_InterpretationDiagnosisCodeSequence",vm:"1",version:"DICOM/retired"},"(4008,0118)":{tag:"(4008,0118)",vr:"SQ",name:"RETIRED_ResultsDistributionListSequence",vm:"1",version:"DICOM/retired"},"(4008,0119)":{tag:"(4008,0119)",vr:"PN",name:"RETIRED_DistributionName",vm:"1",version:"DICOM/retired"},"(4008,011A)":{tag:"(4008,011A)",vr:"LO",name:"RETIRED_DistributionAddress",vm:"1",version:"DICOM/retired"},"(4008,0200)":{tag:"(4008,0200)",vr:"SH",name:"RETIRED_InterpretationID",vm:"1",version:"DICOM/retired"},"(4008,0202)":{tag:"(4008,0202)",vr:"LO",name:"RETIRED_InterpretationIDIssuer",vm:"1",version:"DICOM/retired"},"(4008,0210)":{tag:"(4008,0210)",vr:"CS",name:"RETIRED_InterpretationTypeID",vm:"1",version:"DICOM/retired"},"(4008,0212)":{tag:"(4008,0212)",vr:"CS",name:"RETIRED_InterpretationStatusID",vm:"1",version:"DICOM/retired"},"(4008,0300)":{tag:"(4008,0300)",vr:"ST",name:"RETIRED_Impressions",vm:"1",version:"DICOM/retired"},"(4008,4000)":{tag:"(4008,4000)",vr:"ST",name:"RETIRED_ResultsComments",vm:"1",version:"DICOM/retired"},"(5000-50FF,0005)":{tag:"(5000-50FF,0005)",vr:"US",name:"RETIRED_CurveDimensions",vm:"1",version:"DICOM/retired"},"(5000-50FF,0010)":{tag:"(5000-50FF,0010)",vr:"US",name:"RETIRED_NumberOfPoints",vm:"1",version:"DICOM/retired"},"(5000-50FF,0020)":{tag:"(5000-50FF,0020)",vr:"CS",name:"RETIRED_TypeOfData",vm:"1",version:"DICOM/retired"},"(5000-50FF,0022)":{tag:"(5000-50FF,0022)",vr:"LO",name:"RETIRED_CurveDescription",vm:"1",version:"DICOM/retired"},"(5000-50FF,0030)":{tag:"(5000-50FF,0030)",vr:"SH",name:"RETIRED_AxisUnits",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0040)":{tag:"(5000-50FF,0040)",vr:"SH",name:"RETIRED_AxisLabels",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0103)":{tag:"(5000-50FF,0103)",vr:"US",name:"RETIRED_DataValueRepresentation",vm:"1",version:"DICOM/retired"},"(5000-50FF,0104)":{tag:"(5000-50FF,0104)",vr:"US",name:"RETIRED_MinimumCoordinateValue",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0105)":{tag:"(5000-50FF,0105)",vr:"US",name:"RETIRED_MaximumCoordinateValue",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0106)":{tag:"(5000-50FF,0106)",vr:"SH",name:"RETIRED_CurveRange",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0110)":{tag:"(5000-50FF,0110)",vr:"US",name:"RETIRED_CurveDataDescriptor",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0112)":{tag:"(5000-50FF,0112)",vr:"US",name:"RETIRED_CoordinateStartValue",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,0114)":{tag:"(5000-50FF,0114)",vr:"US",name:"RETIRED_CoordinateStepValue",vm:"1-n",version:"DICOM/retired"},"(5000-50FF,1001)":{tag:"(5000-50FF,1001)",vr:"CS",name:"RETIRED_CurveActivationLayer",vm:"1",version:"DICOM/retired"},"(5000-50FF,2000)":{tag:"(5000-50FF,2000)",vr:"US",name:"RETIRED_AudioType",vm:"1",version:"DICOM/retired"},"(5000-50FF,2002)":{tag:"(5000-50FF,2002)",vr:"US",name:"RETIRED_AudioSampleFormat",vm:"1",version:"DICOM/retired"},"(5000-50FF,2004)":{tag:"(5000-50FF,2004)",vr:"US",name:"RETIRED_NumberOfChannels",vm:"1",version:"DICOM/retired"},"(5000-50FF,2006)":{tag:"(5000-50FF,2006)",vr:"UL",name:"RETIRED_NumberOfSamples",vm:"1",version:"DICOM/retired"},"(5000-50FF,2008)":{tag:"(5000-50FF,2008)",vr:"UL",name:"RETIRED_SampleRate",vm:"1",version:"DICOM/retired"},"(5000-50FF,200A)":{tag:"(5000-50FF,200A)",vr:"UL",name:"RETIRED_TotalTime",vm:"1",version:"DICOM/retired"},"(5000-50FF,200C)":{tag:"(5000-50FF,200C)",vr:"ox",name:"RETIRED_AudioSampleData",vm:"1",version:"DICOM/retired"},"(5000-50FF,200E)":{tag:"(5000-50FF,200E)",vr:"LT",name:"RETIRED_AudioComments",vm:"1",version:"DICOM/retired"},"(5000-50FF,2500)":{tag:"(5000-50FF,2500)",vr:"LO",name:"RETIRED_CurveLabel",vm:"1",version:"DICOM/retired"},"(5000-50FF,2600)":{tag:"(5000-50FF,2600)",vr:"SQ",name:"RETIRED_CurveReferencedOverlaySequence",vm:"1",version:"DICOM/retired"},"(5000-50FF,2610)":{tag:"(5000-50FF,2610)",vr:"US",name:"RETIRED_CurveReferencedOverlayGroup",vm:"1",version:"DICOM/retired"},"(5000-50FF,3000)":{tag:"(5000-50FF,3000)",vr:"ox",name:"RETIRED_CurveData",vm:"1",version:"DICOM/retired"},"(6000-60FF,0012)":{tag:"(6000-60FF,0012)",vr:"US",name:"RETIRED_OverlayPlanes",vm:"1",version:"DICOM/retired"},"(6000-60FF,0052)":{tag:"(6000-60FF,0052)",vr:"US",name:"RETIRED_OverlayPlaneOrigin",vm:"1",version:"DICOM/retired"},"(6000-60FF,0060)":{tag:"(6000-60FF,0060)",vr:"CS",name:"RETIRED_OverlayCompressionCode",vm:"1",version:"DICOM/retired"},"(6000-60FF,0061)":{tag:"(6000-60FF,0061)",vr:"SH",name:"RETIRED_OverlayCompressionOriginator",vm:"1",version:"DICOM/retired"},"(6000-60FF,0062)":{tag:"(6000-60FF,0062)",vr:"SH",name:"RETIRED_OverlayCompressionLabel",vm:"1",version:"DICOM/retired"},"(6000-60FF,0063)":{tag:"(6000-60FF,0063)",vr:"CS",name:"RETIRED_OverlayCompressionDescription",vm:"1",version:"DICOM/retired"},"(6000-60FF,0066)":{tag:"(6000-60FF,0066)",vr:"AT",name:"RETIRED_OverlayCompressionStepPointers",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,0068)":{tag:"(6000-60FF,0068)",vr:"US",name:"RETIRED_OverlayRepeatInterval",vm:"1",version:"DICOM/retired"},"(6000-60FF,0069)":{tag:"(6000-60FF,0069)",vr:"US",name:"RETIRED_OverlayBitsGrouped",vm:"1",version:"DICOM/retired"},"(6000-60FF,0110)":{tag:"(6000-60FF,0110)",vr:"CS",name:"RETIRED_OverlayFormat",vm:"1",version:"DICOM/retired"},"(6000-60FF,0200)":{tag:"(6000-60FF,0200)",vr:"US",name:"RETIRED_OverlayLocation",vm:"1",version:"DICOM/retired"},"(6000-60FF,0800)":{tag:"(6000-60FF,0800)",vr:"CS",name:"RETIRED_OverlayCodeLabel",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,0802)":{tag:"(6000-60FF,0802)",vr:"US",name:"RETIRED_OverlayNumberOfTables",vm:"1",version:"DICOM/retired"},"(6000-60FF,0803)":{tag:"(6000-60FF,0803)",vr:"AT",name:"RETIRED_OverlayCodeTableLocation",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,0804)":{tag:"(6000-60FF,0804)",vr:"US",name:"RETIRED_OverlayBitsForCodeWord",vm:"1",version:"DICOM/retired"},"(6000-60FF,1100)":{tag:"(6000-60FF,1100)",vr:"US",name:"RETIRED_OverlayDescriptorGray",vm:"1",version:"DICOM/retired"},"(6000-60FF,1101)":{tag:"(6000-60FF,1101)",vr:"US",name:"RETIRED_OverlayDescriptorRed",vm:"1",version:"DICOM/retired"},"(6000-60FF,1102)":{tag:"(6000-60FF,1102)",vr:"US",name:"RETIRED_OverlayDescriptorGreen",vm:"1",version:"DICOM/retired"},"(6000-60FF,1103)":{tag:"(6000-60FF,1103)",vr:"US",name:"RETIRED_OverlayDescriptorBlue",vm:"1",version:"DICOM/retired"},"(6000-60FF,1200)":{tag:"(6000-60FF,1200)",vr:"US",name:"RETIRED_OverlaysGray",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,1201)":{tag:"(6000-60FF,1201)",vr:"US",name:"RETIRED_OverlaysRed",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,1202)":{tag:"(6000-60FF,1202)",vr:"US",name:"RETIRED_OverlaysGreen",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,1203)":{tag:"(6000-60FF,1203)",vr:"US",name:"RETIRED_OverlaysBlue",vm:"1-n",version:"DICOM/retired"},"(6000-60FF,4000)":{tag:"(6000-60FF,4000)",vr:"LT",name:"RETIRED_OverlayComments",vm:"1",version:"DICOM/retired"},"(7FE0,0020)":{tag:"(7FE0,0020)",vr:"OW",name:"RETIRED_CoefficientsSDVN",vm:"1",version:"DICOM/retired"},"(7FE0,0030)":{tag:"(7FE0,0030)",vr:"OW",name:"RETIRED_CoefficientsSDHN",vm:"1",version:"DICOM/retired"},"(7FE0,0040)":{tag:"(7FE0,0040)",vr:"OW",name:"RETIRED_CoefficientsSDDN",vm:"1",version:"DICOM/retired"},"(7F00-7FFF,0010)":{tag:"(7F00-7FFF,0010)",vr:"ox",name:"RETIRED_VariablePixelData",vm:"1",version:"DICOM/retired"},"(7F00-7FFF,0011)":{tag:"(7F00-7FFF,0011)",vr:"US",name:"RETIRED_VariableNextDataGroup",vm:"1",version:"DICOM/retired"},"(7F00-7FFF,0020)":{tag:"(7F00-7FFF,0020)",vr:"OW",name:"RETIRED_VariableCoefficientsSDVN",vm:"1",version:"DICOM/retired"},"(7F00-7FFF,0030)":{tag:"(7F00-7FFF,0030)",vr:"OW",name:"RETIRED_VariableCoefficientsSDHN",vm:"1",version:"DICOM/retired"},"(7F00-7FFF,0040)":{tag:"(7F00-7FFF,0040)",vr:"OW",name:"RETIRED_VariableCoefficientsSDDN",vm:"1",version:"DICOM/retired"},"":{tag:""},'(0019,"1.2.840.113681",10)':{tag:'(0019,"1.2.840.113681",10)',vr:"ST",name:"CRImageParamsCommon",vm:"1",version:"PrivateTag"},'(0019,"1.2.840.113681",11)':{tag:'(0019,"1.2.840.113681",11)',vr:"ST",name:"CRImageIPParamsSingle",vm:"1",version:"PrivateTag"},'(0019,"1.2.840.113681",12)':{tag:'(0019,"1.2.840.113681",12)',vr:"ST",name:"CRImageIPParamsLeft",vm:"1",version:"PrivateTag"},'(0019,"1.2.840.113681",13)':{tag:'(0019,"1.2.840.113681",13)',vr:"ST",name:"CRImageIPParamsRight",vm:"1",version:"PrivateTag"},'(0087,"1.2.840.113708.794.1.1.2.0",10)':{tag:'(0087,"1.2.840.113708.794.1.1.2.0",10)',vr:"CS",name:"MediaType",vm:"1",version:"PrivateTag"},'(0087,"1.2.840.113708.794.1.1.2.0",20)':{tag:'(0087,"1.2.840.113708.794.1.1.2.0",20)',vr:"CS",name:"MediaLocation",vm:"1",version:"PrivateTag"},'(0087,"1.2.840.113708.794.1.1.2.0",50)':{tag:'(0087,"1.2.840.113708.794.1.1.2.0",50)',vr:"IS",name:"EstimatedRetrieveTime",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",00)':{tag:'(0009,"ACUSON",00)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",01)':{tag:'(0009,"ACUSON",01)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",02)':{tag:'(0009,"ACUSON",02)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",03)':{tag:'(0009,"ACUSON",03)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",04)':{tag:'(0009,"ACUSON",04)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",05)':{tag:'(0009,"ACUSON",05)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",06)':{tag:'(0009,"ACUSON",06)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",07)':{tag:'(0009,"ACUSON",07)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",08)':{tag:'(0009,"ACUSON",08)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",09)':{tag:'(0009,"ACUSON",09)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0a)':{tag:'(0009,"ACUSON",0a)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0b)':{tag:'(0009,"ACUSON",0b)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0c)':{tag:'(0009,"ACUSON",0c)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0d)':{tag:'(0009,"ACUSON",0d)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0e)':{tag:'(0009,"ACUSON",0e)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",0f)':{tag:'(0009,"ACUSON",0f)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",10)':{tag:'(0009,"ACUSON",10)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",11)':{tag:'(0009,"ACUSON",11)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",12)':{tag:'(0009,"ACUSON",12)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",13)':{tag:'(0009,"ACUSON",13)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",14)':{tag:'(0009,"ACUSON",14)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ACUSON",15)':{tag:'(0009,"ACUSON",15)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0003,"AEGIS_DICOM_2.00",00)':{tag:'(0003,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0005,"AEGIS_DICOM_2.00",00)':{tag:'(0005,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0009,"AEGIS_DICOM_2.00",00)':{tag:'(0009,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"AEGIS_DICOM_2.00",00)':{tag:'(0019,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0029,"AEGIS_DICOM_2.00",00)':{tag:'(0029,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(1369,"AEGIS_DICOM_2.00",00)':{tag:'(1369,"AEGIS_DICOM_2.00",00)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0009,"AGFA",10)':{tag:'(0009,"AGFA",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"AGFA",11)':{tag:'(0009,"AGFA",11)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"AGFA",13)':{tag:'(0009,"AGFA",13)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"AGFA",14)':{tag:'(0009,"AGFA",14)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"AGFA",15)':{tag:'(0009,"AGFA",15)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0031,"AGFA PACS Archive Mirroring 1.0",00)':{tag:'(0031,"AGFA PACS Archive Mirroring 1.0",00)',vr:"CS",name:"StudyStatus",vm:"1",version:"PrivateTag"},'(0031,"AGFA PACS Archive Mirroring 1.0",01)':{tag:'(0031,"AGFA PACS Archive Mirroring 1.0",01)',vr:"UL",name:"DateTimeVerified",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS IP",10)':{tag:'(0029,"CAMTRONICS IP",10)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS IP",20)':{tag:'(0029,"CAMTRONICS IP",20)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS IP",30)':{tag:'(0029,"CAMTRONICS IP",30)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS IP",40)':{tag:'(0029,"CAMTRONICS IP",40)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",10)':{tag:'(0029,"CAMTRONICS",10)',vr:"LT",name:"Commentline",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",20)':{tag:'(0029,"CAMTRONICS",20)',vr:"DS",name:"EdgeEnhancementCoefficient",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",50)':{tag:'(0029,"CAMTRONICS",50)',vr:"LT",name:"SceneText",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",60)':{tag:'(0029,"CAMTRONICS",60)',vr:"LT",name:"ImageText",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",70)':{tag:'(0029,"CAMTRONICS",70)',vr:"IS",name:"PixelShiftHorizontal",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",80)':{tag:'(0029,"CAMTRONICS",80)',vr:"IS",name:"PixelShiftVertical",vm:"1",version:"PrivateTag"},'(0029,"CAMTRONICS",90)':{tag:'(0029,"CAMTRONICS",90)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"CARDIO-D.R. 1.0",00)':{tag:'(0009,"CARDIO-D.R. 1.0",00)',vr:"UL",name:"FileLocation",vm:"1",version:"PrivateTag"},'(0009,"CARDIO-D.R. 1.0",01)':{tag:'(0009,"CARDIO-D.R. 1.0",01)',vr:"UL",name:"FileSize",vm:"1",version:"PrivateTag"},'(0009,"CARDIO-D.R. 1.0",40)':{tag:'(0009,"CARDIO-D.R. 1.0",40)',vr:"SQ",name:"AlternateImageSequence",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",00)':{tag:'(0019,"CARDIO-D.R. 1.0",00)',vr:"CS",name:"ImageBlankingShape",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",02)':{tag:'(0019,"CARDIO-D.R. 1.0",02)',vr:"IS",name:"ImageBlankingLeftVerticalEdge",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",04)':{tag:'(0019,"CARDIO-D.R. 1.0",04)',vr:"IS",name:"ImageBlankingRightVerticalEdge",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",06)':{tag:'(0019,"CARDIO-D.R. 1.0",06)',vr:"IS",name:"ImageBlankingUpperHorizontalEdge",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",08)':{tag:'(0019,"CARDIO-D.R. 1.0",08)',vr:"IS",name:"ImageBlankingLowerHorizontalEdge",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",10)':{tag:'(0019,"CARDIO-D.R. 1.0",10)',vr:"IS",name:"CenterOfCircularImageBlanking",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",12)':{tag:'(0019,"CARDIO-D.R. 1.0",12)',vr:"IS",name:"RadiusOfCircularImageBlanking",vm:"1",version:"PrivateTag"},'(0019,"CARDIO-D.R. 1.0",30)':{tag:'(0019,"CARDIO-D.R. 1.0",30)',vr:"UL",name:"MaximumImageFrameSize",vm:"1",version:"PrivateTag"},'(0021,"CARDIO-D.R. 1.0",13)':{tag:'(0021,"CARDIO-D.R. 1.0",13)',vr:"IS",name:"ImageSequenceNumber",vm:"1",version:"PrivateTag"},'(0029,"CARDIO-D.R. 1.0",00)':{tag:'(0029,"CARDIO-D.R. 1.0",00)',vr:"SQ",name:"EdgeEnhancementSequence",vm:"1",version:"PrivateTag"},'(0029,"CARDIO-D.R. 1.0",01)':{tag:'(0029,"CARDIO-D.R. 1.0",01)',vr:"US",name:"ConvolutionKernelSize",vm:"2",version:"PrivateTag"},'(0029,"CARDIO-D.R. 1.0",02)':{tag:'(0029,"CARDIO-D.R. 1.0",02)',vr:"DS",name:"ConvolutionKernelCoefficients",vm:"1-n",version:"PrivateTag"},'(0029,"CARDIO-D.R. 1.0",03)':{tag:'(0029,"CARDIO-D.R. 1.0",03)',vr:"DS",name:"EdgeEnhancementGain",vm:"1",version:"PrivateTag"},'(0025,"CMR42 CIRCLECVI",1010)':{tag:'(0025,"CMR42 CIRCLECVI",1010)',vr:"LO",name:"WorkspaceID",vm:"1",version:"PrivateTag"},'(0025,"CMR42 CIRCLECVI",1020)':{tag:'(0025,"CMR42 CIRCLECVI",1020)',vr:"LO",name:"WorkspaceTimeString",vm:"1",version:"PrivateTag"},'(0025,"CMR42 CIRCLECVI",1030)':{tag:'(0025,"CMR42 CIRCLECVI",1030)',vr:"OB",name:"WorkspaceStream",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",00)':{tag:'(0009,"DCMTK_ANONYMIZER",00)',vr:"SQ",name:"AnonymizerUIDMap",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",10)':{tag:'(0009,"DCMTK_ANONYMIZER",10)',vr:"UI",name:"AnonymizerUIDKey",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",20)':{tag:'(0009,"DCMTK_ANONYMIZER",20)',vr:"UI",name:"AnonymizerUIDValue",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",30)':{tag:'(0009,"DCMTK_ANONYMIZER",30)',vr:"SQ",name:"AnonymizerPatientIDMap",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",40)':{tag:'(0009,"DCMTK_ANONYMIZER",40)',vr:"LO",name:"AnonymizerPatientIDKey",vm:"1",version:"PrivateTag"},'(0009,"DCMTK_ANONYMIZER",50)':{tag:'(0009,"DCMTK_ANONYMIZER",50)',vr:"LO",name:"AnonymizerPatientIDValue",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",22)':{tag:'(0019,"DIDI TO PCR 1.1",22)',vr:"UN",name:"RouteAET",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",23)':{tag:'(0019,"DIDI TO PCR 1.1",23)',vr:"DS",name:"PCRPrintScale",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",24)':{tag:'(0019,"DIDI TO PCR 1.1",24)',vr:"UN",name:"PCRPrintJobEnd",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",25)':{tag:'(0019,"DIDI TO PCR 1.1",25)',vr:"IS",name:"PCRNoFilmCopies",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",26)':{tag:'(0019,"DIDI TO PCR 1.1",26)',vr:"IS",name:"PCRFilmLayoutPosition",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",27)':{tag:'(0019,"DIDI TO PCR 1.1",27)',vr:"UN",name:"PCRPrintReportName",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",70)':{tag:'(0019,"DIDI TO PCR 1.1",70)',vr:"UN",name:"RADProtocolPrinter",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",71)':{tag:'(0019,"DIDI TO PCR 1.1",71)',vr:"UN",name:"RADProtocolMedium",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",90)':{tag:'(0019,"DIDI TO PCR 1.1",90)',vr:"LO",name:"UnprocessedFlag",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",91)':{tag:'(0019,"DIDI TO PCR 1.1",91)',vr:"UN",name:"KeyValues",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",92)':{tag:'(0019,"DIDI TO PCR 1.1",92)',vr:"UN",name:"DestinationPostprocessingFunction",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A0)':{tag:'(0019,"DIDI TO PCR 1.1",A0)',vr:"UN",name:"Version",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A1)':{tag:'(0019,"DIDI TO PCR 1.1",A1)',vr:"UN",name:"RangingMode",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A2)':{tag:'(0019,"DIDI TO PCR 1.1",A2)',vr:"UN",name:"AbdomenBrightness",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A3)':{tag:'(0019,"DIDI TO PCR 1.1",A3)',vr:"UN",name:"FixedBrightness",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A4)':{tag:'(0019,"DIDI TO PCR 1.1",A4)',vr:"UN",name:"DetailContrast",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A5)':{tag:'(0019,"DIDI TO PCR 1.1",A5)',vr:"UN",name:"ContrastBalance",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A6)':{tag:'(0019,"DIDI TO PCR 1.1",A6)',vr:"UN",name:"StructureBoost",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A7)':{tag:'(0019,"DIDI TO PCR 1.1",A7)',vr:"UN",name:"StructurePreference",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A8)':{tag:'(0019,"DIDI TO PCR 1.1",A8)',vr:"UN",name:"NoiseRobustness",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",A9)':{tag:'(0019,"DIDI TO PCR 1.1",A9)',vr:"UN",name:"NoiseDoseLimit",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AA)':{tag:'(0019,"DIDI TO PCR 1.1",AA)',vr:"UN",name:"NoiseDoseStep",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AB)':{tag:'(0019,"DIDI TO PCR 1.1",AB)',vr:"UN",name:"NoiseFrequencyLimit",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AC)':{tag:'(0019,"DIDI TO PCR 1.1",AC)',vr:"UN",name:"WeakContrastLimit",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AD)':{tag:'(0019,"DIDI TO PCR 1.1",AD)',vr:"UN",name:"StrongContrastLimit",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AE)':{tag:'(0019,"DIDI TO PCR 1.1",AE)',vr:"UN",name:"StructureBoostOffset",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",AF)':{tag:'(0019,"DIDI TO PCR 1.1",AF)',vr:"UN",name:"SmoothGain",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B0)':{tag:'(0019,"DIDI TO PCR 1.1",B0)',vr:"UN",name:"MeasureField1",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B1)':{tag:'(0019,"DIDI TO PCR 1.1",B1)',vr:"UN",name:"MeasureField2",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B2)':{tag:'(0019,"DIDI TO PCR 1.1",B2)',vr:"UN",name:"KeyPercentile1",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B3)':{tag:'(0019,"DIDI TO PCR 1.1",B3)',vr:"UN",name:"KeyPercentile2",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B4)':{tag:'(0019,"DIDI TO PCR 1.1",B4)',vr:"UN",name:"DensityLUT",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B5)':{tag:'(0019,"DIDI TO PCR 1.1",B5)',vr:"UN",name:"Brightness",vm:"1",version:"PrivateTag"},'(0019,"DIDI TO PCR 1.1",B6)':{tag:'(0019,"DIDI TO PCR 1.1",B6)',vr:"UN",name:"Gamma",vm:"1",version:"PrivateTag"},'(0089,"DIDI TO PCR 1.1",10)':{tag:'(0089,"DIDI TO PCR 1.1",10)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"DIGISCAN IMAGE",31)':{tag:'(0029,"DIGISCAN IMAGE",31)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0029,"DIGISCAN IMAGE",32)':{tag:'(0029,"DIGISCAN IMAGE",32)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0029,"DIGISCAN IMAGE",33)':{tag:'(0029,"DIGISCAN IMAGE",33)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"DIGISCAN IMAGE",34)':{tag:'(0029,"DIGISCAN IMAGE",34)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(7001-o-70ff,"DLX_ANNOT_01",04)':{tag:'(7001-o-70ff,"DLX_ANNOT_01",04)',vr:"ST",name:"TextAnnotation",vm:"1",version:"PrivateTag"},'(7001-o-70ff,"DLX_ANNOT_01",05)':{tag:'(7001-o-70ff,"DLX_ANNOT_01",05)',vr:"IS",name:"Box",vm:"2",version:"PrivateTag"},'(7001-o-70ff,"DLX_ANNOT_01",07)':{tag:'(7001-o-70ff,"DLX_ANNOT_01",07)',vr:"IS",name:"ArrowEnd",vm:"2",version:"PrivateTag"},'(0015,"DLX_EXAMS_01",01)':{tag:'(0015,"DLX_EXAMS_01",01)',vr:"DS",name:"StenosisCalibrationRatio",vm:"1",version:"PrivateTag"},'(0015,"DLX_EXAMS_01",02)':{tag:'(0015,"DLX_EXAMS_01",02)',vr:"DS",name:"StenosisMagnification",vm:"1",version:"PrivateTag"},'(0015,"DLX_EXAMS_01",03)':{tag:'(0015,"DLX_EXAMS_01",03)',vr:"DS",name:"CardiacCalibrationRatio",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"DLX_LKUP_01",01)':{tag:'(6001-o-60ff,"DLX_LKUP_01",01)',vr:"US",name:"GrayPaletteColorLookupTableDescriptor",vm:"3",version:"PrivateTag"},'(6001-o-60ff,"DLX_LKUP_01",02)':{tag:'(6001-o-60ff,"DLX_LKUP_01",02)',vr:"US",name:"GrayPaletteColorLookupTableData",vm:"1",version:"PrivateTag"},'(0011,"DLX_PATNT_01",01)':{tag:'(0011,"DLX_PATNT_01",01)',vr:"LT",name:"PatientDOB",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",01)':{tag:'(0019,"DLX_SERIE_01",01)',vr:"DS",name:"AngleValueLArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",02)':{tag:'(0019,"DLX_SERIE_01",02)',vr:"DS",name:"AngleValuePArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",03)':{tag:'(0019,"DLX_SERIE_01",03)',vr:"DS",name:"AngleValueCArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",04)':{tag:'(0019,"DLX_SERIE_01",04)',vr:"CS",name:"AngleLabelLArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",05)':{tag:'(0019,"DLX_SERIE_01",05)',vr:"CS",name:"AngleLabelPArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",06)':{tag:'(0019,"DLX_SERIE_01",06)',vr:"CS",name:"AngleLabelCArm",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",07)':{tag:'(0019,"DLX_SERIE_01",07)',vr:"ST",name:"ProcedureName",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",08)':{tag:'(0019,"DLX_SERIE_01",08)',vr:"ST",name:"ExamName",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",09)':{tag:'(0019,"DLX_SERIE_01",09)',vr:"SH",name:"PatientSize",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",0a)':{tag:'(0019,"DLX_SERIE_01",0a)',vr:"IS",name:"RecordView",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",10)':{tag:'(0019,"DLX_SERIE_01",10)',vr:"DS",name:"InjectorDelay",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",11)':{tag:'(0019,"DLX_SERIE_01",11)',vr:"CS",name:"AutoInject",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",14)':{tag:'(0019,"DLX_SERIE_01",14)',vr:"IS",name:"AcquisitionMode",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",15)':{tag:'(0019,"DLX_SERIE_01",15)',vr:"CS",name:"CameraRotationEnabled",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",16)':{tag:'(0019,"DLX_SERIE_01",16)',vr:"CS",name:"ReverseSweep",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",17)':{tag:'(0019,"DLX_SERIE_01",17)',vr:"IS",name:"SpatialFilterStrength",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",18)':{tag:'(0019,"DLX_SERIE_01",18)',vr:"IS",name:"ZoomFactor",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",19)':{tag:'(0019,"DLX_SERIE_01",19)',vr:"IS",name:"XZoomCenter",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1a)':{tag:'(0019,"DLX_SERIE_01",1a)',vr:"IS",name:"YZoomCenter",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1b)':{tag:'(0019,"DLX_SERIE_01",1b)',vr:"DS",name:"Focus",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1c)':{tag:'(0019,"DLX_SERIE_01",1c)',vr:"CS",name:"Dose",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1d)':{tag:'(0019,"DLX_SERIE_01",1d)',vr:"IS",name:"SideMark",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1e)':{tag:'(0019,"DLX_SERIE_01",1e)',vr:"IS",name:"PercentageLandscape",vm:"1",version:"PrivateTag"},'(0019,"DLX_SERIE_01",1f)':{tag:'(0019,"DLX_SERIE_01",1f)',vr:"DS",name:"ExposureDuration",vm:"1",version:"PrivateTag"},'(00E1,"ELSCINT1",01)':{tag:'(00E1,"ELSCINT1",01)',vr:"US",name:"DataDictionaryVersion",vm:"1",version:"PrivateTag"},'(00E1,"ELSCINT1",14)':{tag:'(00E1,"ELSCINT1",14)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(00E1,"ELSCINT1",22)':{tag:'(00E1,"ELSCINT1",22)',vr:"DS",name:"Unknown",vm:"2",version:"PrivateTag"},'(00E1,"ELSCINT1",23)':{tag:'(00E1,"ELSCINT1",23)',vr:"DS",name:"Unknown",vm:"2",version:"PrivateTag"},'(00E1,"ELSCINT1",24)':{tag:'(00E1,"ELSCINT1",24)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(00E1,"ELSCINT1",25)':{tag:'(00E1,"ELSCINT1",25)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(00E1,"ELSCINT1",40)':{tag:'(00E1,"ELSCINT1",40)',vr:"SH",name:"OffsetFromCTMRImages",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",00)':{tag:'(0601,"ELSCINT1",00)',vr:"SH",name:"ImplementationVersion",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",20)':{tag:'(0601,"ELSCINT1",20)',vr:"DS",name:"RelativeTablePosition",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",21)':{tag:'(0601,"ELSCINT1",21)',vr:"DS",name:"RelativeTableHeight",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",30)':{tag:'(0601,"ELSCINT1",30)',vr:"SH",name:"SurviewDirection",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",31)':{tag:'(0601,"ELSCINT1",31)',vr:"DS",name:"SurviewLength",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",50)':{tag:'(0601,"ELSCINT1",50)',vr:"SH",name:"ImageViewType",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",70)':{tag:'(0601,"ELSCINT1",70)',vr:"DS",name:"BatchNumber",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",71)':{tag:'(0601,"ELSCINT1",71)',vr:"DS",name:"BatchSize",vm:"1",version:"PrivateTag"},'(0601,"ELSCINT1",72)':{tag:'(0601,"ELSCINT1",72)',vr:"DS",name:"BatchSliceNumber",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",04)':{tag:'(0009,"FDMS 1.0",04)',vr:"SH",name:"ImageControlUnit",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",05)':{tag:'(0009,"FDMS 1.0",05)',vr:"OW",name:"ImageUID",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",06)':{tag:'(0009,"FDMS 1.0",06)',vr:"OW",name:"RouteImageUID",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",08)':{tag:'(0009,"FDMS 1.0",08)',vr:"UL",name:"ImageDisplayInformationVersionNo",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",09)':{tag:'(0009,"FDMS 1.0",09)',vr:"UL",name:"PatientInformationVersionNo",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",0C)':{tag:'(0009,"FDMS 1.0",0C)',vr:"OW",name:"FilmUID",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",10)':{tag:'(0009,"FDMS 1.0",10)',vr:"CS",name:"ExposureUnitTypeCode",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",80)':{tag:'(0009,"FDMS 1.0",80)',vr:"LO",name:"KanjiHospitalName",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",90)':{tag:'(0009,"FDMS 1.0",90)',vr:"ST",name:"DistributionCode",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",92)':{tag:'(0009,"FDMS 1.0",92)',vr:"SH",name:"KanjiDepartmentName",vm:"1",version:"PrivateTag"},'(0009,"FDMS 1.0",F0)':{tag:'(0009,"FDMS 1.0",F0)',vr:"CS",name:"BlackeningProcessFlag",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",15)':{tag:'(0019,"FDMS 1.0",15)',vr:"LO",name:"KanjiBodyPartForExposure",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",32)':{tag:'(0019,"FDMS 1.0",32)',vr:"LO",name:"KanjiMenuName",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",40)':{tag:'(0019,"FDMS 1.0",40)',vr:"CS",name:"ImageProcessingType",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",50)':{tag:'(0019,"FDMS 1.0",50)',vr:"CS",name:"EDRMode",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",60)':{tag:'(0019,"FDMS 1.0",60)',vr:"SH",name:"RadiographersCode",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",70)':{tag:'(0019,"FDMS 1.0",70)',vr:"IS",name:"SplitExposureFormat",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",71)':{tag:'(0019,"FDMS 1.0",71)',vr:"IS",name:"NoOfSplitExposureFrames",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",80)':{tag:'(0019,"FDMS 1.0",80)',vr:"IS",name:"ReadingPositionSpecification",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",81)':{tag:'(0019,"FDMS 1.0",81)',vr:"IS",name:"ReadingSensitivityCenter",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",90)':{tag:'(0019,"FDMS 1.0",90)',vr:"SH",name:"FilmAnnotationCharacterString1",vm:"1",version:"PrivateTag"},'(0019,"FDMS 1.0",91)':{tag:'(0019,"FDMS 1.0",91)',vr:"SH",name:"FilmAnnotationCharacterString2",vm:"1",version:"PrivateTag"},'(0021,"FDMS 1.0",10)':{tag:'(0021,"FDMS 1.0",10)',vr:"CS",name:"FCRImageID",vm:"1",version:"PrivateTag"},'(0021,"FDMS 1.0",30)':{tag:'(0021,"FDMS 1.0",30)',vr:"CS",name:"SetNo",vm:"1",version:"PrivateTag"},'(0021,"FDMS 1.0",40)':{tag:'(0021,"FDMS 1.0",40)',vr:"IS",name:"ImageNoInTheSet",vm:"1",version:"PrivateTag"},'(0021,"FDMS 1.0",50)':{tag:'(0021,"FDMS 1.0",50)',vr:"CS",name:"PairProcessingInformation",vm:"1",version:"PrivateTag"},'(0021,"FDMS 1.0",80)':{tag:'(0021,"FDMS 1.0",80)',vr:"OB",name:"EquipmentTypeSpecificInformation",vm:"1",version:"PrivateTag"},'(0023,"FDMS 1.0",10)':{tag:'(0023,"FDMS 1.0",10)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0023,"FDMS 1.0",20)':{tag:'(0023,"FDMS 1.0",20)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0023,"FDMS 1.0",30)':{tag:'(0023,"FDMS 1.0",30)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",10)':{tag:'(0025,"FDMS 1.0",10)',vr:"US",name:"RelativeLightEmissionAmountSk",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",11)':{tag:'(0025,"FDMS 1.0",11)',vr:"US",name:"TermOfCorrectionForEachIPTypeSt",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",12)':{tag:'(0025,"FDMS 1.0",12)',vr:"US",name:"ReadingGainGp",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",13)':{tag:'(0025,"FDMS 1.0",13)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",15)':{tag:'(0025,"FDMS 1.0",15)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",20)':{tag:'(0025,"FDMS 1.0",20)',vr:"US",name:"Unknown",vm:"2",version:"PrivateTag"},'(0025,"FDMS 1.0",21)':{tag:'(0025,"FDMS 1.0",21)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",30)':{tag:'(0025,"FDMS 1.0",30)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",31)':{tag:'(0025,"FDMS 1.0",31)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",32)':{tag:'(0025,"FDMS 1.0",32)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",33)':{tag:'(0025,"FDMS 1.0",33)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",34)':{tag:'(0025,"FDMS 1.0",34)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",40)':{tag:'(0025,"FDMS 1.0",40)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",41)':{tag:'(0025,"FDMS 1.0",41)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",42)':{tag:'(0025,"FDMS 1.0",42)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",43)':{tag:'(0025,"FDMS 1.0",43)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",50)':{tag:'(0025,"FDMS 1.0",50)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",51)':{tag:'(0025,"FDMS 1.0",51)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",52)':{tag:'(0025,"FDMS 1.0",52)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",53)':{tag:'(0025,"FDMS 1.0",53)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",60)':{tag:'(0025,"FDMS 1.0",60)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",61)':{tag:'(0025,"FDMS 1.0",61)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",62)':{tag:'(0025,"FDMS 1.0",62)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",63)':{tag:'(0025,"FDMS 1.0",63)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",70)':{tag:'(0025,"FDMS 1.0",70)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",71)':{tag:'(0025,"FDMS 1.0",71)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",72)':{tag:'(0025,"FDMS 1.0",72)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",73)':{tag:'(0025,"FDMS 1.0",73)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0025,"FDMS 1.0",74)':{tag:'(0025,"FDMS 1.0",74)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0025,"FDMS 1.0",80)':{tag:'(0025,"FDMS 1.0",80)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",81)':{tag:'(0025,"FDMS 1.0",81)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",82)':{tag:'(0025,"FDMS 1.0",82)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",83)':{tag:'(0025,"FDMS 1.0",83)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0025,"FDMS 1.0",84)':{tag:'(0025,"FDMS 1.0",84)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0025,"FDMS 1.0",90)':{tag:'(0025,"FDMS 1.0",90)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",91)':{tag:'(0025,"FDMS 1.0",91)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",92)':{tag:'(0025,"FDMS 1.0",92)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",93)':{tag:'(0025,"FDMS 1.0",93)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",94)':{tag:'(0025,"FDMS 1.0",94)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",95)':{tag:'(0025,"FDMS 1.0",95)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",96)':{tag:'(0025,"FDMS 1.0",96)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",a0)':{tag:'(0025,"FDMS 1.0",a0)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",a1)':{tag:'(0025,"FDMS 1.0",a1)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",a2)':{tag:'(0025,"FDMS 1.0",a2)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0025,"FDMS 1.0",a3)':{tag:'(0025,"FDMS 1.0",a3)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",10)':{tag:'(0027,"FDMS 1.0",10)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",20)':{tag:'(0027,"FDMS 1.0",20)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",30)':{tag:'(0027,"FDMS 1.0",30)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",40)':{tag:'(0027,"FDMS 1.0",40)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",50)':{tag:'(0027,"FDMS 1.0",50)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",60)':{tag:'(0027,"FDMS 1.0",60)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",70)':{tag:'(0027,"FDMS 1.0",70)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",80)':{tag:'(0027,"FDMS 1.0",80)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",a0)':{tag:'(0027,"FDMS 1.0",a0)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"FDMS 1.0",a1)':{tag:'(0027,"FDMS 1.0",a1)',vr:"CS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0027,"FDMS 1.0",a2)':{tag:'(0027,"FDMS 1.0",a2)',vr:"CS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0027,"FDMS 1.0",a3)':{tag:'(0027,"FDMS 1.0",a3)',vr:"SS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0029,"FDMS 1.0",20)':{tag:'(0029,"FDMS 1.0",20)',vr:"CS",name:"ImageScanningDirection",vm:"1",version:"PrivateTag"},'(0029,"FDMS 1.0",30)':{tag:'(0029,"FDMS 1.0",30)',vr:"CS",name:"ExtendedReadingSizeValue",vm:"1",version:"PrivateTag"},'(0029,"FDMS 1.0",34)':{tag:'(0029,"FDMS 1.0",34)',vr:"US",name:"MagnificationReductionRatio",vm:"1",version:"PrivateTag"},'(0029,"FDMS 1.0",44)':{tag:'(0029,"FDMS 1.0",44)',vr:"CS",name:"LineDensityCode",vm:"1",version:"PrivateTag"},'(0029,"FDMS 1.0",50)':{tag:'(0029,"FDMS 1.0",50)',vr:"CS",name:"DataCompressionCode",vm:"1",version:"PrivateTag"},'(2011,"FDMS 1.0",11)':{tag:'(2011,"FDMS 1.0",11)',vr:"CS",name:"ImagePosition SpecifyingFlag",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",06)':{tag:'(50F1,"FDMS 1.0",06)',vr:"CS",name:"EnergySubtractionParam",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",07)':{tag:'(50F1,"FDMS 1.0",07)',vr:"CS",name:"SubtractionRegistrationResult",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",08)':{tag:'(50F1,"FDMS 1.0",08)',vr:"CS",name:"EnergySubtractionParam2",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",09)':{tag:'(50F1,"FDMS 1.0",09)',vr:"SL",name:"AfinConversionCoefficient",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",10)':{tag:'(50F1,"FDMS 1.0",10)',vr:"CS",name:"FilmOutputFormat",vm:"1",version:"PrivateTag"},'(50F1,"FDMS 1.0",20)':{tag:'(50F1,"FDMS 1.0",20)',vr:"CS",name:"ImageProcessingModificationFlag",vm:"1",version:"PrivateTag"},'(0009,"FFP DATA",01)':{tag:'(0009,"FFP DATA",01)',vr:"UN",name:"CRHeaderInformation",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",30)':{tag:'(0019,"GE ??? From Adantage Review CS",30)',vr:"LO",name:"CREDRMode",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",40)':{tag:'(0019,"GE ??? From Adantage Review CS",40)',vr:"LO",name:"CRLatitude",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",50)':{tag:'(0019,"GE ??? From Adantage Review CS",50)',vr:"LO",name:"CRGroupNumber",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",70)':{tag:'(0019,"GE ??? From Adantage Review CS",70)',vr:"LO",name:"CRImageSerialNumber",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",80)':{tag:'(0019,"GE ??? From Adantage Review CS",80)',vr:"LO",name:"CRBarCodeNumber",vm:"1",version:"PrivateTag"},'(0019,"GE ??? From Adantage Review CS",90)':{tag:'(0019,"GE ??? From Adantage Review CS",90)',vr:"LO",name:"CRFilmOutputExposures",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",24)':{tag:'(0009,"GEMS_ACQU_01",24)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",25)':{tag:'(0009,"GEMS_ACQU_01",25)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",3e)':{tag:'(0009,"GEMS_ACQU_01",3e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",3f)':{tag:'(0009,"GEMS_ACQU_01",3f)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",42)':{tag:'(0009,"GEMS_ACQU_01",42)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",43)':{tag:'(0009,"GEMS_ACQU_01",43)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",f8)':{tag:'(0009,"GEMS_ACQU_01",f8)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_ACQU_01",fb)':{tag:'(0009,"GEMS_ACQU_01",fb)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",01)':{tag:'(0019,"GEMS_ACQU_01",01)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",02)':{tag:'(0019,"GEMS_ACQU_01",02)',vr:"SL",name:"NumberOfCellsInDetector",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",03)':{tag:'(0019,"GEMS_ACQU_01",03)',vr:"DS",name:"CellNumberAtTheta",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",04)':{tag:'(0019,"GEMS_ACQU_01",04)',vr:"DS",name:"CellSpacing",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",05)':{tag:'(0019,"GEMS_ACQU_01",05)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",06)':{tag:'(0019,"GEMS_ACQU_01",06)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",0e)':{tag:'(0019,"GEMS_ACQU_01",0e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",0f)':{tag:'(0019,"GEMS_ACQU_01",0f)',vr:"DS",name:"HorizontalFrameOfReference",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",11)':{tag:'(0019,"GEMS_ACQU_01",11)',vr:"SS",name:"SeriesContrast",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",12)':{tag:'(0019,"GEMS_ACQU_01",12)',vr:"SS",name:"LastPseq",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",13)':{tag:'(0019,"GEMS_ACQU_01",13)',vr:"SS",name:"StartNumberForBaseline",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",14)':{tag:'(0019,"GEMS_ACQU_01",14)',vr:"SS",name:"End NumberForBaseline",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",15)':{tag:'(0019,"GEMS_ACQU_01",15)',vr:"SS",name:"StartNumberForEnhancedScans",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",16)':{tag:'(0019,"GEMS_ACQU_01",16)',vr:"SS",name:"EndNumberForEnhancedScans",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",17)':{tag:'(0019,"GEMS_ACQU_01",17)',vr:"SS",name:"SeriesPlane",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",18)':{tag:'(0019,"GEMS_ACQU_01",18)',vr:"LO",name:"FirstScanRAS",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",19)':{tag:'(0019,"GEMS_ACQU_01",19)',vr:"DS",name:"FirstScanLocation",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",1a)':{tag:'(0019,"GEMS_ACQU_01",1a)',vr:"LO",name:"LastScanRAS",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",1b)':{tag:'(0019,"GEMS_ACQU_01",1b)',vr:"DS",name:"LastScanLocation",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",1e)':{tag:'(0019,"GEMS_ACQU_01",1e)',vr:"DS",name:"DisplayFieldOfView",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",20)':{tag:'(0019,"GEMS_ACQU_01",20)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",22)':{tag:'(0019,"GEMS_ACQU_01",22)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",23)':{tag:'(0019,"GEMS_ACQU_01",23)',vr:"DS",name:"TableSpeed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",24)':{tag:'(0019,"GEMS_ACQU_01",24)',vr:"DS",name:"MidScanTime",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",25)':{tag:'(0019,"GEMS_ACQU_01",25)',vr:"SS",name:"MidScanFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",26)':{tag:'(0019,"GEMS_ACQU_01",26)',vr:"SL",name:"DegreesOfAzimuth",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",27)':{tag:'(0019,"GEMS_ACQU_01",27)',vr:"DS",name:"GantryPeriod",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2a)':{tag:'(0019,"GEMS_ACQU_01",2a)',vr:"DS",name:"XrayOnPosition",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2b)':{tag:'(0019,"GEMS_ACQU_01",2b)',vr:"DS",name:"XrayOffPosition",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2c)':{tag:'(0019,"GEMS_ACQU_01",2c)',vr:"SL",name:"NumberOfTriggers",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2d)':{tag:'(0019,"GEMS_ACQU_01",2d)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2e)':{tag:'(0019,"GEMS_ACQU_01",2e)',vr:"DS",name:"AngleOfFirstView",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",2f)':{tag:'(0019,"GEMS_ACQU_01",2f)',vr:"DS",name:"TriggerFrequency",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",39)':{tag:'(0019,"GEMS_ACQU_01",39)',vr:"SS",name:"ScanFOVType",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",3a)':{tag:'(0019,"GEMS_ACQU_01",3a)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",3b)':{tag:'(0019,"GEMS_ACQU_01",3b)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",3c)':{tag:'(0019,"GEMS_ACQU_01",3c)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",3e)':{tag:'(0019,"GEMS_ACQU_01",3e)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",3f)':{tag:'(0019,"GEMS_ACQU_01",3f)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",40)':{tag:'(0019,"GEMS_ACQU_01",40)',vr:"SS",name:"StatReconFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",41)':{tag:'(0019,"GEMS_ACQU_01",41)',vr:"SS",name:"ComputeType",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",42)':{tag:'(0019,"GEMS_ACQU_01",42)',vr:"SS",name:"SegmentNumber",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",43)':{tag:'(0019,"GEMS_ACQU_01",43)',vr:"SS",name:"TotalSegmentsRequested",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",44)':{tag:'(0019,"GEMS_ACQU_01",44)',vr:"DS",name:"InterscanDelay",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",47)':{tag:'(0019,"GEMS_ACQU_01",47)',vr:"SS",name:"ViewCompressionFactor",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",48)':{tag:'(0019,"GEMS_ACQU_01",48)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",49)':{tag:'(0019,"GEMS_ACQU_01",49)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",4a)':{tag:'(0019,"GEMS_ACQU_01",4a)',vr:"SS",name:"TotalNumberOfRefChannels",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",4b)':{tag:'(0019,"GEMS_ACQU_01",4b)',vr:"SL",name:"DataSizeForScanData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",52)':{tag:'(0019,"GEMS_ACQU_01",52)',vr:"SS",name:"ReconPostProcessingFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",54)':{tag:'(0019,"GEMS_ACQU_01",54)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",57)':{tag:'(0019,"GEMS_ACQU_01",57)',vr:"SS",name:"CTWaterNumber",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",58)':{tag:'(0019,"GEMS_ACQU_01",58)',vr:"SS",name:"CTBoneNumber",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",5a)':{tag:'(0019,"GEMS_ACQU_01",5a)',vr:"FL",name:"AcquisitionDuration",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",5d)':{tag:'(0019,"GEMS_ACQU_01",5d)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",5e)':{tag:'(0019,"GEMS_ACQU_01",5e)',vr:"SL",name:"NumberOfChannels1To512",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",5f)':{tag:'(0019,"GEMS_ACQU_01",5f)',vr:"SL",name:"IncrementBetweenChannels",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",60)':{tag:'(0019,"GEMS_ACQU_01",60)',vr:"SL",name:"StartingView",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",61)':{tag:'(0019,"GEMS_ACQU_01",61)',vr:"SL",name:"NumberOfViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",62)':{tag:'(0019,"GEMS_ACQU_01",62)',vr:"SL",name:"IncrementBetweenViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",6a)':{tag:'(0019,"GEMS_ACQU_01",6a)',vr:"SS",name:"DependantOnNumberOfViewsProcessed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",6b)':{tag:'(0019,"GEMS_ACQU_01",6b)',vr:"SS",name:"FieldOfViewInDetectorCells",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",70)':{tag:'(0019,"GEMS_ACQU_01",70)',vr:"SS",name:"ValueOfBackProjectionButton",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",71)':{tag:'(0019,"GEMS_ACQU_01",71)',vr:"SS",name:"SetIfFatqEstimatesWereUsed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",72)':{tag:'(0019,"GEMS_ACQU_01",72)',vr:"DS",name:"ZChannelAvgOverViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",73)':{tag:'(0019,"GEMS_ACQU_01",73)',vr:"DS",name:"AvgOfLeftRefChannelsOverViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",74)':{tag:'(0019,"GEMS_ACQU_01",74)',vr:"DS",name:"MaxLeftChannelOverViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",75)':{tag:'(0019,"GEMS_ACQU_01",75)',vr:"DS",name:"AvgOfRightRefChannelsOverViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",76)':{tag:'(0019,"GEMS_ACQU_01",76)',vr:"DS",name:"MaxRightChannelOverViews",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",7d)':{tag:'(0019,"GEMS_ACQU_01",7d)',vr:"DS",name:"SecondEcho",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",7e)':{tag:'(0019,"GEMS_ACQU_01",7e)',vr:"SS",name:"NumberOfEchos",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",7f)':{tag:'(0019,"GEMS_ACQU_01",7f)',vr:"DS",name:"TableDelta",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",81)':{tag:'(0019,"GEMS_ACQU_01",81)',vr:"SS",name:"Contiguous",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",82)':{tag:'(0019,"GEMS_ACQU_01",82)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",83)':{tag:'(0019,"GEMS_ACQU_01",83)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",84)':{tag:'(0019,"GEMS_ACQU_01",84)',vr:"DS",name:"PeakSAR",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",85)':{tag:'(0019,"GEMS_ACQU_01",85)',vr:"SS",name:"MonitorSAR",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",86)':{tag:'(0019,"GEMS_ACQU_01",86)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",87)':{tag:'(0019,"GEMS_ACQU_01",87)',vr:"DS",name:"CardiacRepetition Time",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",88)':{tag:'(0019,"GEMS_ACQU_01",88)',vr:"SS",name:"ImagesPerCardiacCycle",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",8a)':{tag:'(0019,"GEMS_ACQU_01",8a)',vr:"SS",name:"ActualReceiveGainAnalog",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",8b)':{tag:'(0019,"GEMS_ACQU_01",8b)',vr:"SS",name:"ActualReceiveGainDigital",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",8d)':{tag:'(0019,"GEMS_ACQU_01",8d)',vr:"DS",name:"DelayAfterTrigger",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",8f)':{tag:'(0019,"GEMS_ACQU_01",8f)',vr:"SS",name:"SwapPhaseFrequency",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",90)':{tag:'(0019,"GEMS_ACQU_01",90)',vr:"SS",name:"PauseInterval",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",91)':{tag:'(0019,"GEMS_ACQU_01",91)',vr:"DS",name:"PulseTime",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",92)':{tag:'(0019,"GEMS_ACQU_01",92)',vr:"SL",name:"SliceOffsetOnFrequencyAxis",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",93)':{tag:'(0019,"GEMS_ACQU_01",93)',vr:"DS",name:"CenterFrequency",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",94)':{tag:'(0019,"GEMS_ACQU_01",94)',vr:"SS",name:"TransmitGain",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",95)':{tag:'(0019,"GEMS_ACQU_01",95)',vr:"SS",name:"AnalogReceiverGain",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",96)':{tag:'(0019,"GEMS_ACQU_01",96)',vr:"SS",name:"DigitalReceiverGain",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",97)':{tag:'(0019,"GEMS_ACQU_01",97)',vr:"SL",name:"BitmapDefiningCVs",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",98)':{tag:'(0019,"GEMS_ACQU_01",98)',vr:"SS",name:"CenterFrequencyMethod",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",99)':{tag:'(0019,"GEMS_ACQU_01",99)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",9b)':{tag:'(0019,"GEMS_ACQU_01",9b)',vr:"SS",name:"PulseSequenceMode",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",9c)':{tag:'(0019,"GEMS_ACQU_01",9c)',vr:"LO",name:"PulseSequenceName",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",9d)':{tag:'(0019,"GEMS_ACQU_01",9d)',vr:"DT",name:"PulseSequenceDate",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",9e)':{tag:'(0019,"GEMS_ACQU_01",9e)',vr:"LO",name:"InternalPulseSequenceName",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",9f)':{tag:'(0019,"GEMS_ACQU_01",9f)',vr:"SS",name:"TransmittingCoil",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a0)':{tag:'(0019,"GEMS_ACQU_01",a0)',vr:"SS",name:"SurfaceCoilType",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a1)':{tag:'(0019,"GEMS_ACQU_01",a1)',vr:"SS",name:"ExtremityCoilFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a2)':{tag:'(0019,"GEMS_ACQU_01",a2)',vr:"SL",name:"RawDataRunNumber",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a3)':{tag:'(0019,"GEMS_ACQU_01",a3)',vr:"UL",name:"CalibratedFieldStrength",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a4)':{tag:'(0019,"GEMS_ACQU_01",a4)',vr:"SS",name:"SATFatWaterBone",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a5)':{tag:'(0019,"GEMS_ACQU_01",a5)',vr:"DS",name:"ReceiveBandwidth",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a7)':{tag:'(0019,"GEMS_ACQU_01",a7)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a8)':{tag:'(0019,"GEMS_ACQU_01",a8)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",a9)':{tag:'(0019,"GEMS_ACQU_01",a9)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",aa)':{tag:'(0019,"GEMS_ACQU_01",aa)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ab)':{tag:'(0019,"GEMS_ACQU_01",ab)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ac)':{tag:'(0019,"GEMS_ACQU_01",ac)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ad)':{tag:'(0019,"GEMS_ACQU_01",ad)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ae)':{tag:'(0019,"GEMS_ACQU_01",ae)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",af)':{tag:'(0019,"GEMS_ACQU_01",af)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b0)':{tag:'(0019,"GEMS_ACQU_01",b0)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b1)':{tag:'(0019,"GEMS_ACQU_01",b1)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b2)':{tag:'(0019,"GEMS_ACQU_01",b2)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b3)':{tag:'(0019,"GEMS_ACQU_01",b3)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b4)':{tag:'(0019,"GEMS_ACQU_01",b4)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b5)':{tag:'(0019,"GEMS_ACQU_01",b5)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b6)':{tag:'(0019,"GEMS_ACQU_01",b6)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b7)':{tag:'(0019,"GEMS_ACQU_01",b7)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b8)':{tag:'(0019,"GEMS_ACQU_01",b8)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",b9)':{tag:'(0019,"GEMS_ACQU_01",b9)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ba)':{tag:'(0019,"GEMS_ACQU_01",ba)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",bb)':{tag:'(0019,"GEMS_ACQU_01",bb)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",bc)':{tag:'(0019,"GEMS_ACQU_01",bc)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",bd)':{tag:'(0019,"GEMS_ACQU_01",bd)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",be)':{tag:'(0019,"GEMS_ACQU_01",be)',vr:"DS",name:"ProjectionAngle",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c0)':{tag:'(0019,"GEMS_ACQU_01",c0)',vr:"SS",name:"SaturationPlanes",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c1)':{tag:'(0019,"GEMS_ACQU_01",c1)',vr:"SS",name:"SurfaceCoilIntensityCorrectionFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c2)':{tag:'(0019,"GEMS_ACQU_01",c2)',vr:"SS",name:"SATLocationR",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c3)':{tag:'(0019,"GEMS_ACQU_01",c3)',vr:"SS",name:"SATLocationL",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c4)':{tag:'(0019,"GEMS_ACQU_01",c4)',vr:"SS",name:"SATLocationA",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c5)':{tag:'(0019,"GEMS_ACQU_01",c5)',vr:"SS",name:"SATLocationP",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c6)':{tag:'(0019,"GEMS_ACQU_01",c6)',vr:"SS",name:"SATLocationH",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c7)':{tag:'(0019,"GEMS_ACQU_01",c7)',vr:"SS",name:"SATLocationF",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c8)':{tag:'(0019,"GEMS_ACQU_01",c8)',vr:"SS",name:"SATThicknessRL",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",c9)':{tag:'(0019,"GEMS_ACQU_01",c9)',vr:"SS",name:"SATThicknessAP",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ca)':{tag:'(0019,"GEMS_ACQU_01",ca)',vr:"SS",name:"SATThicknessHF",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",cb)':{tag:'(0019,"GEMS_ACQU_01",cb)',vr:"SS",name:"PrescribedFlowAxis",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",cc)':{tag:'(0019,"GEMS_ACQU_01",cc)',vr:"SS",name:"VelocityEncoding",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",cd)':{tag:'(0019,"GEMS_ACQU_01",cd)',vr:"SS",name:"ThicknessDisclaimer",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ce)':{tag:'(0019,"GEMS_ACQU_01",ce)',vr:"SS",name:"PrescanType",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",cf)':{tag:'(0019,"GEMS_ACQU_01",cf)',vr:"SS",name:"PrescanStatus",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d0)':{tag:'(0019,"GEMS_ACQU_01",d0)',vr:"SH",name:"RawDataType",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d2)':{tag:'(0019,"GEMS_ACQU_01",d2)',vr:"SS",name:"ProjectionAlgorithm",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d3)':{tag:'(0019,"GEMS_ACQU_01",d3)',vr:"SH",name:"ProjectionAlgorithm",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d4)':{tag:'(0019,"GEMS_ACQU_01",d4)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d5)':{tag:'(0019,"GEMS_ACQU_01",d5)',vr:"SS",name:"FractionalEcho",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d6)':{tag:'(0019,"GEMS_ACQU_01",d6)',vr:"SS",name:"PrepPulse",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d7)':{tag:'(0019,"GEMS_ACQU_01",d7)',vr:"SS",name:"CardiacPhases",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d8)':{tag:'(0019,"GEMS_ACQU_01",d8)',vr:"SS",name:"VariableEchoFlag",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",d9)':{tag:'(0019,"GEMS_ACQU_01",d9)',vr:"DS",name:"ConcatenatedSAT",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",da)':{tag:'(0019,"GEMS_ACQU_01",da)',vr:"SS",name:"ReferenceChannelUsed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",db)':{tag:'(0019,"GEMS_ACQU_01",db)',vr:"DS",name:"BackProjectorCoefficient",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",dc)':{tag:'(0019,"GEMS_ACQU_01",dc)',vr:"SS",name:"PrimarySpeedCorrectionUsed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",dd)':{tag:'(0019,"GEMS_ACQU_01",dd)',vr:"SS",name:"OverrangeCorrectionUsed",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",de)':{tag:'(0019,"GEMS_ACQU_01",de)',vr:"DS",name:"DynamicZAlphaValue",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",df)':{tag:'(0019,"GEMS_ACQU_01",df)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e0)':{tag:'(0019,"GEMS_ACQU_01",e0)',vr:"DS",name:"UserData",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e1)':{tag:'(0019,"GEMS_ACQU_01",e1)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e2)':{tag:'(0019,"GEMS_ACQU_01",e2)',vr:"DS",name:"VelocityEncodeScale",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e3)':{tag:'(0019,"GEMS_ACQU_01",e3)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e4)':{tag:'(0019,"GEMS_ACQU_01",e4)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e5)':{tag:'(0019,"GEMS_ACQU_01",e5)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e6)':{tag:'(0019,"GEMS_ACQU_01",e6)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e8)':{tag:'(0019,"GEMS_ACQU_01",e8)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",e9)':{tag:'(0019,"GEMS_ACQU_01",e9)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",eb)':{tag:'(0019,"GEMS_ACQU_01",eb)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",ec)':{tag:'(0019,"GEMS_ACQU_01",ec)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f0)':{tag:'(0019,"GEMS_ACQU_01",f0)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f1)':{tag:'(0019,"GEMS_ACQU_01",f1)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f2)':{tag:'(0019,"GEMS_ACQU_01",f2)',vr:"SS",name:"FastPhases",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f3)':{tag:'(0019,"GEMS_ACQU_01",f3)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f4)':{tag:'(0019,"GEMS_ACQU_01",f4)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GEMS_ACQU_01",f9)':{tag:'(0019,"GEMS_ACQU_01",f9)',vr:"DS",name:"TransmitGain",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",00)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",00)',vr:"LO",name:"CRExposureMenuCode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",10)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",10)',vr:"LO",name:"CRExposureMenuString",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",20)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",20)',vr:"LO",name:"CREDRMode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",30)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",30)',vr:"LO",name:"CRLatitude",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",40)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",40)',vr:"LO",name:"CRGroupNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",50)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",50)',vr:"US",name:"CRImageSerialNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",60)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",60)',vr:"LO",name:"CRBarCodeNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",70)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",70)',vr:"LO",name:"CRFilmOutputExposure",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",80)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",80)',vr:"LO",name:"CRFilmFormat",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK1",90)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK1",90)',vr:"LO",name:"CRSShiftString",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",00)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",00)',vr:"US",name:"CRSShift",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",10)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",10)',vr:"DS",name:"CRCShift",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",20)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",20)',vr:"DS",name:"CRGT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",30)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",30)',vr:"DS",name:"CRGA",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",40)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",40)',vr:"DS",name:"CRGC",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",50)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",50)',vr:"DS",name:"CRGS",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",60)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",60)',vr:"DS",name:"CRRT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",70)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",70)',vr:"DS",name:"CRRE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",80)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",80)',vr:"US",name:"CRRN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK2",90)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK2",90)',vr:"DS",name:"CRDRT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",00)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",00)',vr:"DS",name:"CRDRE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",10)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",10)',vr:"US",name:"CRDRN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",20)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",20)',vr:"DS",name:"CRORE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",30)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",30)',vr:"US",name:"CRORN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",40)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",40)',vr:"US",name:"CRORD",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",50)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",50)',vr:"LO",name:"CRCassetteSize",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",60)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",60)',vr:"LO",name:"CRMachineID",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",70)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",70)',vr:"LO",name:"CRMachineType",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",80)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",80)',vr:"LO",name:"CRTechnicianCode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_1.0 BLOCK3",90)':{tag:'(0023,"GEMS_ACRQA_1.0 BLOCK3",90)',vr:"LO",name:"CREnergySubtractionParameters",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",00)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",00)',vr:"LO",name:"CRExposureMenuCode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",10)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",10)',vr:"LO",name:"CRExposureMenuString",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",20)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",20)',vr:"LO",name:"CREDRMode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",30)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",30)',vr:"LO",name:"CRLatitude",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",40)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",40)',vr:"LO",name:"CRGroupNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",50)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",50)',vr:"US",name:"CRImageSerialNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",60)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",60)',vr:"LO",name:"CRBarCodeNumber",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",70)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",70)',vr:"LO",name:"CRFilmOutputExposure",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",80)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",80)',vr:"LO",name:"CRFilmFormat",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK1",90)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK1",90)',vr:"LO",name:"CRSShiftString",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",00)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",00)',vr:"US",name:"CRSShift",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",10)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",10)',vr:"LO",name:"CRCShift",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",20)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",20)',vr:"LO",name:"CRGT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",30)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",30)',vr:"DS",name:"CRGA",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",40)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",40)',vr:"DS",name:"CRGC",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",50)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",50)',vr:"DS",name:"CRGS",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",60)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",60)',vr:"LO",name:"CRRT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",70)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",70)',vr:"DS",name:"CRRE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",80)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",80)',vr:"US",name:"CRRN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK2",90)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK2",90)',vr:"DS",name:"CRDRT",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",00)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",00)',vr:"DS",name:"CRDRE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",10)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",10)',vr:"US",name:"CRDRN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",20)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",20)',vr:"DS",name:"CRORE",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",30)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",30)',vr:"US",name:"CRORN",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",40)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",40)',vr:"US",name:"CRORD",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",50)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",50)',vr:"LO",name:"CRCassetteSize",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",60)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",60)',vr:"LO",name:"CRMachineID",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",70)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",70)',vr:"LO",name:"CRMachineType",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",80)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",80)',vr:"LO",name:"CRTechnicianCode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",90)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",90)',vr:"LO",name:"CREnergySubtractionParameters",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",f0)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",f0)',vr:"LO",name:"CRDistributionCode",vm:"1",version:"PrivateTag"},'(0023,"GEMS_ACRQA_2.0 BLOCK3",ff)':{tag:'(0023,"GEMS_ACRQA_2.0 BLOCK3",ff)',vr:"US",name:"CRShuttersApplied",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",01)':{tag:'(0047,"GEMS_ADWSoft_3D1",01)',vr:"SQ",name:"Reconstruction Parameters Sequence",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",50)':{tag:'(0047,"GEMS_ADWSoft_3D1",50)',vr:"UL",name:"VolumeVoxelCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",51)':{tag:'(0047,"GEMS_ADWSoft_3D1",51)',vr:"UL",name:"VolumeSegmentCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",53)':{tag:'(0047,"GEMS_ADWSoft_3D1",53)',vr:"US",name:"VolumeSliceSize",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",54)':{tag:'(0047,"GEMS_ADWSoft_3D1",54)',vr:"US",name:"VolumeSliceCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",55)':{tag:'(0047,"GEMS_ADWSoft_3D1",55)',vr:"SL",name:"VolumeThresholdValue",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",57)':{tag:'(0047,"GEMS_ADWSoft_3D1",57)',vr:"DS",name:"VolumeVoxelRatio",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",58)':{tag:'(0047,"GEMS_ADWSoft_3D1",58)',vr:"DS",name:"VolumeVoxelSize",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",59)':{tag:'(0047,"GEMS_ADWSoft_3D1",59)',vr:"US",name:"VolumeZPositionSize",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",60)':{tag:'(0047,"GEMS_ADWSoft_3D1",60)',vr:"DS",name:"VolumeBaseLine",vm:"9",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",61)':{tag:'(0047,"GEMS_ADWSoft_3D1",61)',vr:"DS",name:"VolumeCenterPoint",vm:"3",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",63)':{tag:'(0047,"GEMS_ADWSoft_3D1",63)',vr:"SL",name:"VolumeSkewBase",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",64)':{tag:'(0047,"GEMS_ADWSoft_3D1",64)',vr:"DS",name:"VolumeRegistrationTransformRotationMatrix",vm:"9",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",65)':{tag:'(0047,"GEMS_ADWSoft_3D1",65)',vr:"DS",name:"VolumeRegistrationTransformTranslationVector",vm:"3",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",70)':{tag:'(0047,"GEMS_ADWSoft_3D1",70)',vr:"DS",name:"KVPList",vm:"1-n",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",71)':{tag:'(0047,"GEMS_ADWSoft_3D1",71)',vr:"IS",name:"XRayTubeCurrentList",vm:"1-n",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",72)':{tag:'(0047,"GEMS_ADWSoft_3D1",72)',vr:"IS",name:"ExposureList",vm:"1-n",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",80)':{tag:'(0047,"GEMS_ADWSoft_3D1",80)',vr:"LO",name:"AcquisitionDLXIdentifier",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",85)':{tag:'(0047,"GEMS_ADWSoft_3D1",85)',vr:"SQ",name:"AcquisitionDLX2DSeriesSequence",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",89)':{tag:'(0047,"GEMS_ADWSoft_3D1",89)',vr:"DS",name:"ContrastAgentVolumeList",vm:"1-n",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",8A)':{tag:'(0047,"GEMS_ADWSoft_3D1",8A)',vr:"US",name:"NumberOfInjections",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",8B)':{tag:'(0047,"GEMS_ADWSoft_3D1",8B)',vr:"US",name:"FrameCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",91)':{tag:'(0047,"GEMS_ADWSoft_3D1",91)',vr:"LO",name:"XA3DReconstructionAlgorithmName",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",92)':{tag:'(0047,"GEMS_ADWSoft_3D1",92)',vr:"CS",name:"XA3DReconstructionAlgorithmVersion",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",93)':{tag:'(0047,"GEMS_ADWSoft_3D1",93)',vr:"DA",name:"DLXCalibrationDate",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",94)':{tag:'(0047,"GEMS_ADWSoft_3D1",94)',vr:"TM",name:"DLXCalibrationTime",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",95)':{tag:'(0047,"GEMS_ADWSoft_3D1",95)',vr:"CS",name:"DLXCalibrationStatus",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",96)':{tag:'(0047,"GEMS_ADWSoft_3D1",96)',vr:"IS",name:"UsedFrames",vm:"1-n",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",98)':{tag:'(0047,"GEMS_ADWSoft_3D1",98)',vr:"US",name:"TransformCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",99)':{tag:'(0047,"GEMS_ADWSoft_3D1",99)',vr:"SQ",name:"TransformSequence",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",9A)':{tag:'(0047,"GEMS_ADWSoft_3D1",9A)',vr:"DS",name:"TransformRotationMatrix",vm:"9",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",9B)':{tag:'(0047,"GEMS_ADWSoft_3D1",9B)',vr:"DS",name:"TransformTranslationVector",vm:"3",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",9C)':{tag:'(0047,"GEMS_ADWSoft_3D1",9C)',vr:"LO",name:"TransformLabel",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B0)':{tag:'(0047,"GEMS_ADWSoft_3D1",B0)',vr:"SQ",name:"WireframeList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B1)':{tag:'(0047,"GEMS_ADWSoft_3D1",B1)',vr:"US",name:"WireframeCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B2)':{tag:'(0047,"GEMS_ADWSoft_3D1",B2)',vr:"US",name:"LocationSystem",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B5)':{tag:'(0047,"GEMS_ADWSoft_3D1",B5)',vr:"LO",name:"WireframeName",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B6)':{tag:'(0047,"GEMS_ADWSoft_3D1",B6)',vr:"LO",name:"WireframeGroupName",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B7)':{tag:'(0047,"GEMS_ADWSoft_3D1",B7)',vr:"LO",name:"WireframeColor",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B8)':{tag:'(0047,"GEMS_ADWSoft_3D1",B8)',vr:"SL",name:"WireframeAttributes",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",B9)':{tag:'(0047,"GEMS_ADWSoft_3D1",B9)',vr:"SL",name:"WireframePointCount",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",BA)':{tag:'(0047,"GEMS_ADWSoft_3D1",BA)',vr:"SL",name:"WireframeTimestamp",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",BB)':{tag:'(0047,"GEMS_ADWSoft_3D1",BB)',vr:"SQ",name:"WireframePointList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",BC)':{tag:'(0047,"GEMS_ADWSoft_3D1",BC)',vr:"DS",name:"WireframePointsCoordinates",vm:"3",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",C0)':{tag:'(0047,"GEMS_ADWSoft_3D1",C0)',vr:"DS",name:"VolumeUpperLeftHighCornerRAS",vm:"3",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",C1)':{tag:'(0047,"GEMS_ADWSoft_3D1",C1)',vr:"DS",name:"VolumeSliceToRASRotationMatrix",vm:"9",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",C2)':{tag:'(0047,"GEMS_ADWSoft_3D1",C2)',vr:"DS",name:"VolumeUpperLeftHighCornerTLOC",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",D1)':{tag:'(0047,"GEMS_ADWSoft_3D1",D1)',vr:"OB",name:"VolumeSegmentList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",D2)':{tag:'(0047,"GEMS_ADWSoft_3D1",D2)',vr:"OB",name:"VolumeGradientList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",D3)':{tag:'(0047,"GEMS_ADWSoft_3D1",D3)',vr:"OB",name:"VolumeDensityList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",D4)':{tag:'(0047,"GEMS_ADWSoft_3D1",D4)',vr:"OB",name:"VolumeZPositionList",vm:"1",version:"PrivateTag"},'(0047,"GEMS_ADWSoft_3D1",D5)':{tag:'(0047,"GEMS_ADWSoft_3D1",D5)',vr:"OB",name:"VolumeOriginalIndexList",vm:"1",version:"PrivateTag"},'(0039,"GEMS_ADWSoft_DPO",80)':{tag:'(0039,"GEMS_ADWSoft_DPO",80)',vr:"IS",name:"PrivateEntityNumber",vm:"1",version:"PrivateTag"},'(0039,"GEMS_ADWSoft_DPO",85)':{tag:'(0039,"GEMS_ADWSoft_DPO",85)',vr:"DA",name:"PrivateEntityDate",vm:"1",version:"PrivateTag"},'(0039,"GEMS_ADWSoft_DPO",90)':{tag:'(0039,"GEMS_ADWSoft_DPO",90)',vr:"TM",name:"PrivateEntityTime",vm:"1",version:"PrivateTag"},'(0039,"GEMS_ADWSoft_DPO",95)':{tag:'(0039,"GEMS_ADWSoft_DPO",95)',vr:"LO",name:"PrivateEntityLaunchCommand",vm:"1",version:"PrivateTag"},'(0039,"GEMS_ADWSoft_DPO",AA)':{tag:'(0039,"GEMS_ADWSoft_DPO",AA)',vr:"CS",name:"PrivateEntityType",vm:"1",version:"PrivateTag"},'(0033,"GEMS_CTHD_01",02)':{tag:'(0033,"GEMS_CTHD_01",02)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",10)':{tag:'(0037,"GEMS_DRS_1",10)',vr:"LO",name:"ReferringDepartment",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",20)':{tag:'(0037,"GEMS_DRS_1",20)',vr:"US",name:"ScreenNumber",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",40)':{tag:'(0037,"GEMS_DRS_1",40)',vr:"SH",name:"LeftOrientation",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",42)':{tag:'(0037,"GEMS_DRS_1",42)',vr:"SH",name:"RightOrientation",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",50)':{tag:'(0037,"GEMS_DRS_1",50)',vr:"CS",name:"Inversion",vm:"1",version:"PrivateTag"},'(0037,"GEMS_DRS_1",60)':{tag:'(0037,"GEMS_DRS_1",60)',vr:"US",name:"DSA",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",10)':{tag:'(0009,"GEMS_GENIE_1",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",11)':{tag:'(0009,"GEMS_GENIE_1",11)',vr:"SL",name:"StudyFlags",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",12)':{tag:'(0009,"GEMS_GENIE_1",12)',vr:"SL",name:"StudyType",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",1e)':{tag:'(0009,"GEMS_GENIE_1",1e)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",20)':{tag:'(0009,"GEMS_GENIE_1",20)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",21)':{tag:'(0009,"GEMS_GENIE_1",21)',vr:"SL",name:"SeriesFlags",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",22)':{tag:'(0009,"GEMS_GENIE_1",22)',vr:"SH",name:"UserOrientation",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",23)':{tag:'(0009,"GEMS_GENIE_1",23)',vr:"SL",name:"InitiationType",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",24)':{tag:'(0009,"GEMS_GENIE_1",24)',vr:"SL",name:"InitiationDelay",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",25)':{tag:'(0009,"GEMS_GENIE_1",25)',vr:"SL",name:"InitiationCountRate",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",26)':{tag:'(0009,"GEMS_GENIE_1",26)',vr:"SL",name:"NumberEnergySets",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",27)':{tag:'(0009,"GEMS_GENIE_1",27)',vr:"SL",name:"NumberDetectors",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",29)':{tag:'(0009,"GEMS_GENIE_1",29)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",2a)':{tag:'(0009,"GEMS_GENIE_1",2a)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",2c)':{tag:'(0009,"GEMS_GENIE_1",2c)',vr:"LO",name:"SeriesComments",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",2d)':{tag:'(0009,"GEMS_GENIE_1",2d)',vr:"SL",name:"TrackBeatAverage",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",2e)':{tag:'(0009,"GEMS_GENIE_1",2e)',vr:"FD",name:"DistancePrescribed",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",30)':{tag:'(0009,"GEMS_GENIE_1",30)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",35)':{tag:'(0009,"GEMS_GENIE_1",35)',vr:"SL",name:"GantryLocusType",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",37)':{tag:'(0009,"GEMS_GENIE_1",37)',vr:"SL",name:"StartingHeartRate",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",38)':{tag:'(0009,"GEMS_GENIE_1",38)',vr:"SL",name:"RRWindowWidth",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",39)':{tag:'(0009,"GEMS_GENIE_1",39)',vr:"SL",name:"RRWindowOffset",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",3a)':{tag:'(0009,"GEMS_GENIE_1",3a)',vr:"SL",name:"PercentCycleImaged",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",40)':{tag:'(0009,"GEMS_GENIE_1",40)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",41)':{tag:'(0009,"GEMS_GENIE_1",41)',vr:"SL",name:"PatientFlags",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",42)':{tag:'(0009,"GEMS_GENIE_1",42)',vr:"DA",name:"PatientCreationDate",vm:"1",version:"PrivateTag"},'(0009,"GEMS_GENIE_1",43)':{tag:'(0009,"GEMS_GENIE_1",43)',vr:"TM",name:"PatientCreationTime",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",0a)':{tag:'(0011,"GEMS_GENIE_1",0a)',vr:"SL",name:"SeriesType",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",0b)':{tag:'(0011,"GEMS_GENIE_1",0b)',vr:"SL",name:"EffectiveSeriesDuration",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",0c)':{tag:'(0011,"GEMS_GENIE_1",0c)',vr:"SL",name:"NumBeats",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",0d)':{tag:'(0011,"GEMS_GENIE_1",0d)',vr:"LO",name:"RadioNuclideName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",10)':{tag:'(0011,"GEMS_GENIE_1",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",12)':{tag:'(0011,"GEMS_GENIE_1",12)',vr:"LO",name:"DatasetName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",13)':{tag:'(0011,"GEMS_GENIE_1",13)',vr:"SL",name:"DatasetType",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",15)':{tag:'(0011,"GEMS_GENIE_1",15)',vr:"SL",name:"DetectorNumber",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",16)':{tag:'(0011,"GEMS_GENIE_1",16)',vr:"SL",name:"EnergyNumber",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",17)':{tag:'(0011,"GEMS_GENIE_1",17)',vr:"SL",name:"RRIntervalWindowNumber",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",18)':{tag:'(0011,"GEMS_GENIE_1",18)',vr:"SL",name:"MGBinNumber",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",19)':{tag:'(0011,"GEMS_GENIE_1",19)',vr:"FD",name:"RadiusOfRotation",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",1a)':{tag:'(0011,"GEMS_GENIE_1",1a)',vr:"SL",name:"DetectorCountZone",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",1b)':{tag:'(0011,"GEMS_GENIE_1",1b)',vr:"SL",name:"NumEnergyWindows",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",1c)':{tag:'(0011,"GEMS_GENIE_1",1c)',vr:"SL",name:"EnergyOffset",vm:"4",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",1d)':{tag:'(0011,"GEMS_GENIE_1",1d)',vr:"SL",name:"EnergyRange",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",1f)':{tag:'(0011,"GEMS_GENIE_1",1f)',vr:"SL",name:"ImageOrientation",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",23)':{tag:'(0011,"GEMS_GENIE_1",23)',vr:"SL",name:"UseFOVMask",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",24)':{tag:'(0011,"GEMS_GENIE_1",24)',vr:"SL",name:"FOVMaskYCutoffAngle",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",25)':{tag:'(0011,"GEMS_GENIE_1",25)',vr:"SL",name:"FOVMaskCutoffAngle",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",26)':{tag:'(0011,"GEMS_GENIE_1",26)',vr:"SL",name:"TableOrientation",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",27)':{tag:'(0011,"GEMS_GENIE_1",27)',vr:"SL",name:"ROITopLeft",vm:"2",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",28)':{tag:'(0011,"GEMS_GENIE_1",28)',vr:"SL",name:"ROIBottomRight",vm:"2",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",30)':{tag:'(0011,"GEMS_GENIE_1",30)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",33)':{tag:'(0011,"GEMS_GENIE_1",33)',vr:"LO",name:"EnergyCorrectName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",34)':{tag:'(0011,"GEMS_GENIE_1",34)',vr:"LO",name:"SpatialCorrectName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",35)':{tag:'(0011,"GEMS_GENIE_1",35)',vr:"LO",name:"TuningCalibName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",36)':{tag:'(0011,"GEMS_GENIE_1",36)',vr:"LO",name:"UniformityCorrectName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",37)':{tag:'(0011,"GEMS_GENIE_1",37)',vr:"LO",name:"AcquisitionSpecificCorrectName",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",38)':{tag:'(0011,"GEMS_GENIE_1",38)',vr:"SL",name:"ByteOrder",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",3a)':{tag:'(0011,"GEMS_GENIE_1",3a)',vr:"SL",name:"PictureFormat",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",3b)':{tag:'(0011,"GEMS_GENIE_1",3b)',vr:"FD",name:"PixelScale",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",3c)':{tag:'(0011,"GEMS_GENIE_1",3c)',vr:"FD",name:"PixelOffset",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",3e)':{tag:'(0011,"GEMS_GENIE_1",3e)',vr:"SL",name:"FOVShape",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",3f)':{tag:'(0011,"GEMS_GENIE_1",3f)',vr:"SL",name:"DatasetFlags",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",44)':{tag:'(0011,"GEMS_GENIE_1",44)',vr:"FD",name:"ThresholdCenter",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",45)':{tag:'(0011,"GEMS_GENIE_1",45)',vr:"FD",name:"ThresholdWidth",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",46)':{tag:'(0011,"GEMS_GENIE_1",46)',vr:"SL",name:"InterpolationType",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",55)':{tag:'(0011,"GEMS_GENIE_1",55)',vr:"FD",name:"Period",vm:"1",version:"PrivateTag"},'(0011,"GEMS_GENIE_1",56)':{tag:'(0011,"GEMS_GENIE_1",56)',vr:"FD",name:"ElapsedTime",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",10)':{tag:'(0013,"GEMS_GENIE_1",10)',vr:"FD",name:"DigitalFOV",vm:"2",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",11)':{tag:'(0013,"GEMS_GENIE_1",11)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",12)':{tag:'(0013,"GEMS_GENIE_1",12)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",16)':{tag:'(0013,"GEMS_GENIE_1",16)',vr:"SL",name:"AutoTrackPeak",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",17)':{tag:'(0013,"GEMS_GENIE_1",17)',vr:"SL",name:"AutoTrackWidth",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",18)':{tag:'(0013,"GEMS_GENIE_1",18)',vr:"FD",name:"TransmissionScanTime",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",19)':{tag:'(0013,"GEMS_GENIE_1",19)',vr:"FD",name:"TransmissionMaskWidth",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",1a)':{tag:'(0013,"GEMS_GENIE_1",1a)',vr:"FD",name:"CopperAttenuatorThickness",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",1c)':{tag:'(0013,"GEMS_GENIE_1",1c)',vr:"FD",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",1d)':{tag:'(0013,"GEMS_GENIE_1",1d)',vr:"FD",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",1e)':{tag:'(0013,"GEMS_GENIE_1",1e)',vr:"FD",name:"TomoViewOffset",vm:"1-n",version:"PrivateTag"},'(0013,"GEMS_GENIE_1",26)':{tag:'(0013,"GEMS_GENIE_1",26)',vr:"LT",name:"StudyComments",vm:"1",version:"PrivateTag"},'(0033,"GEMS_GNHD_01",01)':{tag:'(0033,"GEMS_GNHD_01",01)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0033,"GEMS_GNHD_01",02)':{tag:'(0033,"GEMS_GNHD_01",02)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",01)':{tag:'(0009,"GEMS_IDEN_01",01)',vr:"LO",name:"FullFidelity",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",02)':{tag:'(0009,"GEMS_IDEN_01",02)',vr:"SH",name:"SuiteId",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",04)':{tag:'(0009,"GEMS_IDEN_01",04)',vr:"SH",name:"ProductId",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",17)':{tag:'(0009,"GEMS_IDEN_01",17)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",1a)':{tag:'(0009,"GEMS_IDEN_01",1a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",20)':{tag:'(0009,"GEMS_IDEN_01",20)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",27)':{tag:'(0009,"GEMS_IDEN_01",27)',vr:"SL",name:"ImageActualDate",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",2f)':{tag:'(0009,"GEMS_IDEN_01",2f)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",30)':{tag:'(0009,"GEMS_IDEN_01",30)',vr:"SH",name:"ServiceId",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",31)':{tag:'(0009,"GEMS_IDEN_01",31)',vr:"SH",name:"MobileLocationNumber",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e2)':{tag:'(0009,"GEMS_IDEN_01",e2)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e3)':{tag:'(0009,"GEMS_IDEN_01",e3)',vr:"UI",name:"EquipmentUID",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e6)':{tag:'(0009,"GEMS_IDEN_01",e6)',vr:"SH",name:"GenesisVersionNow",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e7)':{tag:'(0009,"GEMS_IDEN_01",e7)',vr:"UL",name:"ExamRecordChecksum",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e8)':{tag:'(0009,"GEMS_IDEN_01",e8)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"GEMS_IDEN_01",e9)':{tag:'(0009,"GEMS_IDEN_01",e9)',vr:"SL",name:"ActualSeriesDataTimeStamp",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",06)':{tag:'(0027,"GEMS_IMAG_01",06)',vr:"SL",name:"ImageArchiveFlag",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",10)':{tag:'(0027,"GEMS_IMAG_01",10)',vr:"SS",name:"ScoutType",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",1c)':{tag:'(0027,"GEMS_IMAG_01",1c)',vr:"SL",name:"VmaMamp",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",1d)':{tag:'(0027,"GEMS_IMAG_01",1d)',vr:"SS",name:"VmaPhase",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",1e)':{tag:'(0027,"GEMS_IMAG_01",1e)',vr:"SL",name:"VmaMod",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",1f)':{tag:'(0027,"GEMS_IMAG_01",1f)',vr:"SL",name:"VmaClip",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",20)':{tag:'(0027,"GEMS_IMAG_01",20)',vr:"SS",name:"SmartScanOnOffFlag",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",30)':{tag:'(0027,"GEMS_IMAG_01",30)',vr:"SH",name:"ForeignImageRevision",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",31)':{tag:'(0027,"GEMS_IMAG_01",31)',vr:"SS",name:"ImagingMode",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",32)':{tag:'(0027,"GEMS_IMAG_01",32)',vr:"SS",name:"PulseSequence",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",33)':{tag:'(0027,"GEMS_IMAG_01",33)',vr:"SL",name:"ImagingOptions",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",35)':{tag:'(0027,"GEMS_IMAG_01",35)',vr:"SS",name:"PlaneType",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",36)':{tag:'(0027,"GEMS_IMAG_01",36)',vr:"SL",name:"ObliquePlane",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",40)':{tag:'(0027,"GEMS_IMAG_01",40)',vr:"SH",name:"RASLetterOfImageLocation",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",41)':{tag:'(0027,"GEMS_IMAG_01",41)',vr:"FL",name:"ImageLocation",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",42)':{tag:'(0027,"GEMS_IMAG_01",42)',vr:"FL",name:"CenterRCoordOfPlaneImage",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",43)':{tag:'(0027,"GEMS_IMAG_01",43)',vr:"FL",name:"CenterACoordOfPlaneImage",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",44)':{tag:'(0027,"GEMS_IMAG_01",44)',vr:"FL",name:"CenterSCoordOfPlaneImage",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",45)':{tag:'(0027,"GEMS_IMAG_01",45)',vr:"FL",name:"NormalRCoord",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",46)':{tag:'(0027,"GEMS_IMAG_01",46)',vr:"FL",name:"NormalACoord",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",47)':{tag:'(0027,"GEMS_IMAG_01",47)',vr:"FL",name:"NormalSCoord",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",48)':{tag:'(0027,"GEMS_IMAG_01",48)',vr:"FL",name:"RCoordOfTopRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",49)':{tag:'(0027,"GEMS_IMAG_01",49)',vr:"FL",name:"ACoordOfTopRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",4a)':{tag:'(0027,"GEMS_IMAG_01",4a)',vr:"FL",name:"SCoordOfTopRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",4b)':{tag:'(0027,"GEMS_IMAG_01",4b)',vr:"FL",name:"RCoordOfBottomRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",4c)':{tag:'(0027,"GEMS_IMAG_01",4c)',vr:"FL",name:"ACoordOfBottomRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",4d)':{tag:'(0027,"GEMS_IMAG_01",4d)',vr:"FL",name:"SCoordOfBottomRightCorner",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",50)':{tag:'(0027,"GEMS_IMAG_01",50)',vr:"FL",name:"TableStartLocation",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",51)':{tag:'(0027,"GEMS_IMAG_01",51)',vr:"FL",name:"TableEndLocation",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",52)':{tag:'(0027,"GEMS_IMAG_01",52)',vr:"SH",name:"RASLetterForSideOfImage",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",53)':{tag:'(0027,"GEMS_IMAG_01",53)',vr:"SH",name:"RASLetterForAnteriorPosterior",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",54)':{tag:'(0027,"GEMS_IMAG_01",54)',vr:"SH",name:"RASLetterForScoutStartLoc",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",55)':{tag:'(0027,"GEMS_IMAG_01",55)',vr:"SH",name:"RASLetterForScoutEndLoc",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",60)':{tag:'(0027,"GEMS_IMAG_01",60)',vr:"FL",name:"ImageDimensionX",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",61)':{tag:'(0027,"GEMS_IMAG_01",61)',vr:"FL",name:"ImageDimensionY",vm:"1",version:"PrivateTag"},'(0027,"GEMS_IMAG_01",62)':{tag:'(0027,"GEMS_IMAG_01",62)',vr:"FL",name:"NumberOfExcitations",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",04)':{tag:'(0029,"GEMS_IMPS_01",04)',vr:"SL",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",05)':{tag:'(0029,"GEMS_IMPS_01",05)',vr:"DS",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",06)':{tag:'(0029,"GEMS_IMPS_01",06)',vr:"DS",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",07)':{tag:'(0029,"GEMS_IMPS_01",07)',vr:"SL",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",08)':{tag:'(0029,"GEMS_IMPS_01",08)',vr:"SH",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",09)':{tag:'(0029,"GEMS_IMPS_01",09)',vr:"SH",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",0a)':{tag:'(0029,"GEMS_IMPS_01",0a)',vr:"SS",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",15)':{tag:'(0029,"GEMS_IMPS_01",15)',vr:"SL",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",16)':{tag:'(0029,"GEMS_IMPS_01",16)',vr:"SL",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",17)':{tag:'(0029,"GEMS_IMPS_01",17)',vr:"SL",name:"LowerRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",18)':{tag:'(0029,"GEMS_IMPS_01",18)',vr:"SL",name:"UpperRangeOfPixels",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",1a)':{tag:'(0029,"GEMS_IMPS_01",1a)',vr:"SL",name:"LengthOfTotalHeaderInBytes",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",26)':{tag:'(0029,"GEMS_IMPS_01",26)',vr:"SS",name:"VersionOfHeaderStructure",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",34)':{tag:'(0029,"GEMS_IMPS_01",34)',vr:"SL",name:"AdvantageCompOverflow",vm:"1",version:"PrivateTag"},'(0029,"GEMS_IMPS_01",35)':{tag:'(0029,"GEMS_IMPS_01",35)',vr:"SL",name:"AdvantageCompUnderflow",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",01)':{tag:'(0043,"GEMS_PARM_01",01)',vr:"SS",name:"BitmapOfPrescanOptions",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",02)':{tag:'(0043,"GEMS_PARM_01",02)',vr:"SS",name:"GradientOffsetInX",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",03)':{tag:'(0043,"GEMS_PARM_01",03)',vr:"SS",name:"GradientOffsetInY",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",04)':{tag:'(0043,"GEMS_PARM_01",04)',vr:"SS",name:"GradientOffsetInZ",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",05)':{tag:'(0043,"GEMS_PARM_01",05)',vr:"SS",name:"ImageIsOriginalOrUnoriginal",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",06)':{tag:'(0043,"GEMS_PARM_01",06)',vr:"SS",name:"NumberOfEPIShots",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",07)':{tag:'(0043,"GEMS_PARM_01",07)',vr:"SS",name:"ViewsPerSegment",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",08)':{tag:'(0043,"GEMS_PARM_01",08)',vr:"SS",name:"RespiratoryRateInBPM",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",09)':{tag:'(0043,"GEMS_PARM_01",09)',vr:"SS",name:"RespiratoryTriggerPoint",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0a)':{tag:'(0043,"GEMS_PARM_01",0a)',vr:"SS",name:"TypeOfReceiverUsed",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0b)':{tag:'(0043,"GEMS_PARM_01",0b)',vr:"DS",name:"PeakRateOfChangeOfGradientField",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0c)':{tag:'(0043,"GEMS_PARM_01",0c)',vr:"DS",name:"LimitsInUnitsOfPercent",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0d)':{tag:'(0043,"GEMS_PARM_01",0d)',vr:"DS",name:"PSDEstimatedLimit",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0e)':{tag:'(0043,"GEMS_PARM_01",0e)',vr:"DS",name:"PSDEstimatedLimitInTeslaPerSecond",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",0f)':{tag:'(0043,"GEMS_PARM_01",0f)',vr:"DS",name:"SARAvgHead",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",10)':{tag:'(0043,"GEMS_PARM_01",10)',vr:"US",name:"WindowValue",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",11)':{tag:'(0043,"GEMS_PARM_01",11)',vr:"US",name:"TotalInputViews",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",12)':{tag:'(0043,"GEMS_PARM_01",12)',vr:"SS",name:"XrayChain",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",13)':{tag:'(0043,"GEMS_PARM_01",13)',vr:"SS",name:"ReconKernelParameters",vm:"5",version:"PrivateTag"},'(0043,"GEMS_PARM_01",14)':{tag:'(0043,"GEMS_PARM_01",14)',vr:"SS",name:"CalibrationParameters",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",15)':{tag:'(0043,"GEMS_PARM_01",15)',vr:"SS",name:"TotalOutputViews",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",16)':{tag:'(0043,"GEMS_PARM_01",16)',vr:"SS",name:"NumberOfOverranges",vm:"5",version:"PrivateTag"},'(0043,"GEMS_PARM_01",17)':{tag:'(0043,"GEMS_PARM_01",17)',vr:"DS",name:"IBHImageScaleFactors",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",18)':{tag:'(0043,"GEMS_PARM_01",18)',vr:"DS",name:"BBHCoefficients",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",19)':{tag:'(0043,"GEMS_PARM_01",19)',vr:"SS",name:"NumberOfBBHChainsToBlend",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1a)':{tag:'(0043,"GEMS_PARM_01",1a)',vr:"SL",name:"StartingChannelNumber",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1b)':{tag:'(0043,"GEMS_PARM_01",1b)',vr:"SS",name:"PPScanParameters",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1c)':{tag:'(0043,"GEMS_PARM_01",1c)',vr:"SS",name:"GEImageIntegrity",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1d)':{tag:'(0043,"GEMS_PARM_01",1d)',vr:"SS",name:"LevelValue",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1e)':{tag:'(0043,"GEMS_PARM_01",1e)',vr:"DS",name:"DeltaStartTime",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",1f)':{tag:'(0043,"GEMS_PARM_01",1f)',vr:"SL",name:"MaxOverrangesInAView",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",20)':{tag:'(0043,"GEMS_PARM_01",20)',vr:"DS",name:"AvgOverrangesAllViews",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",21)':{tag:'(0043,"GEMS_PARM_01",21)',vr:"SS",name:"CorrectedAfterglowTerms",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",25)':{tag:'(0043,"GEMS_PARM_01",25)',vr:"SS",name:"ReferenceChannels",vm:"6",version:"PrivateTag"},'(0043,"GEMS_PARM_01",26)':{tag:'(0043,"GEMS_PARM_01",26)',vr:"US",name:"NoViewsRefChannelsBlocked",vm:"6",version:"PrivateTag"},'(0043,"GEMS_PARM_01",27)':{tag:'(0043,"GEMS_PARM_01",27)',vr:"SH",name:"ScanPitchRatio",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",28)':{tag:'(0043,"GEMS_PARM_01",28)',vr:"OB",name:"UniqueImageIdentifier",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",29)':{tag:'(0043,"GEMS_PARM_01",29)',vr:"OB",name:"HistogramTables",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2a)':{tag:'(0043,"GEMS_PARM_01",2a)',vr:"OB",name:"UserDefinedData",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2b)':{tag:'(0043,"GEMS_PARM_01",2b)',vr:"SS",name:"PrivateScanOptions",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2c)':{tag:'(0043,"GEMS_PARM_01",2c)',vr:"SS",name:"EffectiveEchoSpacing",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2d)':{tag:'(0043,"GEMS_PARM_01",2d)',vr:"SH",name:"StringSlopField1",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2e)':{tag:'(0043,"GEMS_PARM_01",2e)',vr:"SH",name:"StringSlopField2",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",2f)':{tag:'(0043,"GEMS_PARM_01",2f)',vr:"SS",name:"RawDataType",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",30)':{tag:'(0043,"GEMS_PARM_01",30)',vr:"SS",name:"RawDataType",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",31)':{tag:'(0043,"GEMS_PARM_01",31)',vr:"DS",name:"RACoordOfTargetReconCentre",vm:"2",version:"PrivateTag"},'(0043,"GEMS_PARM_01",32)':{tag:'(0043,"GEMS_PARM_01",32)',vr:"SS",name:"RawDataType",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",33)':{tag:'(0043,"GEMS_PARM_01",33)',vr:"FL",name:"NegScanSpacing",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",34)':{tag:'(0043,"GEMS_PARM_01",34)',vr:"IS",name:"OffsetFrequency",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",35)':{tag:'(0043,"GEMS_PARM_01",35)',vr:"UL",name:"UserUsageTag",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",36)':{tag:'(0043,"GEMS_PARM_01",36)',vr:"UL",name:"UserFillMapMSW",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",37)':{tag:'(0043,"GEMS_PARM_01",37)',vr:"UL",name:"UserFillMapLSW",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",38)':{tag:'(0043,"GEMS_PARM_01",38)',vr:"FL",name:"User25ToUser48",vm:"24",version:"PrivateTag"},'(0043,"GEMS_PARM_01",39)':{tag:'(0043,"GEMS_PARM_01",39)',vr:"IS",name:"SlopInteger6ToSlopInteger9",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",40)':{tag:'(0043,"GEMS_PARM_01",40)',vr:"FL",name:"TriggerOnPosition",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",41)':{tag:'(0043,"GEMS_PARM_01",41)',vr:"FL",name:"DegreeOfRotation",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",42)':{tag:'(0043,"GEMS_PARM_01",42)',vr:"SL",name:"DASTriggerSource",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",43)':{tag:'(0043,"GEMS_PARM_01",43)',vr:"SL",name:"DASFpaGain",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",44)':{tag:'(0043,"GEMS_PARM_01",44)',vr:"SL",name:"DASOutputSource",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",45)':{tag:'(0043,"GEMS_PARM_01",45)',vr:"SL",name:"DASAdInput",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",46)':{tag:'(0043,"GEMS_PARM_01",46)',vr:"SL",name:"DASCalMode",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",47)':{tag:'(0043,"GEMS_PARM_01",47)',vr:"SL",name:"DASCalFrequency",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",48)':{tag:'(0043,"GEMS_PARM_01",48)',vr:"SL",name:"DASRegXm",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",49)':{tag:'(0043,"GEMS_PARM_01",49)',vr:"SL",name:"DASAutoZero",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",4a)':{tag:'(0043,"GEMS_PARM_01",4a)',vr:"SS",name:"StartingChannelOfView",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",4b)':{tag:'(0043,"GEMS_PARM_01",4b)',vr:"SL",name:"DASXmPattern",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",4c)':{tag:'(0043,"GEMS_PARM_01",4c)',vr:"SS",name:"TGGCTriggerMode",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",4d)':{tag:'(0043,"GEMS_PARM_01",4d)',vr:"FL",name:"StartScanToXrayOnDelay",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",4e)':{tag:'(0043,"GEMS_PARM_01",4e)',vr:"FL",name:"DurationOfXrayOn",vm:"4",version:"PrivateTag"},'(0043,"GEMS_PARM_01",60)':{tag:'(0043,"GEMS_PARM_01",60)',vr:"IS",name:"SlopInteger10ToSlopInteger17",vm:"8",version:"PrivateTag"},'(0043,"GEMS_PARM_01",61)':{tag:'(0043,"GEMS_PARM_01",61)',vr:"UI",name:"ScannerStudyEntityUID",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",62)':{tag:'(0043,"GEMS_PARM_01",62)',vr:"SH",name:"ScannerStudyID",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",6f)':{tag:'(0043,"GEMS_PARM_01",6f)',vr:"DS",name:"ScannerTableEntry",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",70)':{tag:'(0043,"GEMS_PARM_01",70)',vr:"LO",name:"ParadigmName",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",71)':{tag:'(0043,"GEMS_PARM_01",71)',vr:"ST",name:"ParadigmDescription",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",72)':{tag:'(0043,"GEMS_PARM_01",72)',vr:"UI",name:"ParadigmUID",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",73)':{tag:'(0043,"GEMS_PARM_01",73)',vr:"US",name:"ExperimentType",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",74)':{tag:'(0043,"GEMS_PARM_01",74)',vr:"US",name:"NumberOfRestVolumes",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",75)':{tag:'(0043,"GEMS_PARM_01",75)',vr:"US",name:"NumberOfActiveVolumes",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",76)':{tag:'(0043,"GEMS_PARM_01",76)',vr:"US",name:"NumberOfDummyScans",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",77)':{tag:'(0043,"GEMS_PARM_01",77)',vr:"SH",name:"ApplicationName",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",78)':{tag:'(0043,"GEMS_PARM_01",78)',vr:"SH",name:"ApplicationVersion",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",79)':{tag:'(0043,"GEMS_PARM_01",79)',vr:"US",name:"SlicesPerVolume",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7a)':{tag:'(0043,"GEMS_PARM_01",7a)',vr:"US",name:"ExpectedTimePoints",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7b)':{tag:'(0043,"GEMS_PARM_01",7b)',vr:"FL",name:"RegressorValues",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7c)':{tag:'(0043,"GEMS_PARM_01",7c)',vr:"FL",name:"DelayAfterSliceGroup",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7d)':{tag:'(0043,"GEMS_PARM_01",7d)',vr:"US",name:"ReconModeFlagWord",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7e)':{tag:'(0043,"GEMS_PARM_01",7e)',vr:"LO",name:"PACCSpecificInformation",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",7f)':{tag:'(0043,"GEMS_PARM_01",7f)',vr:"DS",name:"EDWIScaleFactor",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",80)':{tag:'(0043,"GEMS_PARM_01",80)',vr:"LO",name:"CoilIDData",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",81)':{tag:'(0043,"GEMS_PARM_01",81)',vr:"LO",name:"GECoilName",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",82)':{tag:'(0043,"GEMS_PARM_01",82)',vr:"LO",name:"SystemConfigurationInformation",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",83)':{tag:'(0043,"GEMS_PARM_01",83)',vr:"DS",name:"AssetRFactors",vm:"1-2",version:"PrivateTag"},'(0043,"GEMS_PARM_01",84)':{tag:'(0043,"GEMS_PARM_01",84)',vr:"LO",name:"AdditionalAssetData",vm:"5-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",85)':{tag:'(0043,"GEMS_PARM_01",85)',vr:"UT",name:"DebugDataTextFormat",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",86)':{tag:'(0043,"GEMS_PARM_01",86)',vr:"OB",name:"DebugDataBinaryFormat",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",87)':{tag:'(0043,"GEMS_PARM_01",87)',vr:"UT",name:"ScannerSoftwareVersionLongForm",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",88)':{tag:'(0043,"GEMS_PARM_01",88)',vr:"UI",name:"PUREAcquisitionCalibrationSeriesUID",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",89)':{tag:'(0043,"GEMS_PARM_01",89)',vr:"LO",name:"GoverningBodydBdtAndSARDefinition",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8a)':{tag:'(0043,"GEMS_PARM_01",8a)',vr:"CS",name:"PrivateInPlanePhaseEncodingDirection",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8b)':{tag:'(0043,"GEMS_PARM_01",8b)',vr:"OB",name:"FMRIBinaryDataBlock",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8c)':{tag:'(0043,"GEMS_PARM_01",8c)',vr:"DS",name:"VoxelLocation",vm:"6",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8d)':{tag:'(0043,"GEMS_PARM_01",8d)',vr:"DS",name:"SATBandLocations",vm:"7-7n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8e)':{tag:'(0043,"GEMS_PARM_01",8e)',vr:"DS",name:"SpectroPrescanValues",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",8f)':{tag:'(0043,"GEMS_PARM_01",8f)',vr:"DS",name:"SpectroParameters",vm:"3",version:"PrivateTag"},'(0043,"GEMS_PARM_01",90)':{tag:'(0043,"GEMS_PARM_01",90)',vr:"LO",name:"SARDefinition",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",91)':{tag:'(0043,"GEMS_PARM_01",91)',vr:"DS",name:"SARValue",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",92)':{tag:'(0043,"GEMS_PARM_01",92)',vr:"LO",name:"ImageErrorText",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",93)':{tag:'(0043,"GEMS_PARM_01",93)',vr:"DS",name:"SpectroQuantitationValues",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",94)':{tag:'(0043,"GEMS_PARM_01",94)',vr:"DS",name:"SpectroRatioValues",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",95)':{tag:'(0043,"GEMS_PARM_01",95)',vr:"LO",name:"PrescanReuseString",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",96)':{tag:'(0043,"GEMS_PARM_01",96)',vr:"CS",name:"ContentQualification",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",97)':{tag:'(0043,"GEMS_PARM_01",97)',vr:"LO",name:"ImageFilteringParameters",vm:"9",version:"PrivateTag"},'(0043,"GEMS_PARM_01",98)':{tag:'(0043,"GEMS_PARM_01",98)',vr:"UI",name:"ASSETAcquisitionCalibrationSeriesUID",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",99)':{tag:'(0043,"GEMS_PARM_01",99)',vr:"LO",name:"ExtendedOptions",vm:"1-n",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9a)':{tag:'(0043,"GEMS_PARM_01",9a)',vr:"IS",name:"RxStackIdentification",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9b)':{tag:'(0043,"GEMS_PARM_01",9b)',vr:"DS",name:"NPWFactor",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9c)':{tag:'(0043,"GEMS_PARM_01",9c)',vr:"OB",name:"ResearchTag1",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9d)':{tag:'(0043,"GEMS_PARM_01",9d)',vr:"OB",name:"ResearchTag2",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9e)':{tag:'(0043,"GEMS_PARM_01",9e)',vr:"OB",name:"ResearchTag3",vm:"1",version:"PrivateTag"},'(0043,"GEMS_PARM_01",9f)':{tag:'(0043,"GEMS_PARM_01",9f)',vr:"OB",name:"ResearchTag4",vm:"1",version:"PrivateTag"},'(0011,"GEMS_PATI_01",10)':{tag:'(0011,"GEMS_PATI_01",10)',vr:"SS",name:"PatientStatus",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",03)':{tag:'(0021,"GEMS_RELA_01",03)',vr:"SS",name:"SeriesFromWhichPrescribed",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",05)':{tag:'(0021,"GEMS_RELA_01",05)',vr:"SH",name:"GenesisVersionNow",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",07)':{tag:'(0021,"GEMS_RELA_01",07)',vr:"UL",name:"SeriesRecordChecksum",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",15)':{tag:'(0021,"GEMS_RELA_01",15)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",16)':{tag:'(0021,"GEMS_RELA_01",16)',vr:"SS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",18)':{tag:'(0021,"GEMS_RELA_01",18)',vr:"SH",name:"GenesisVersionNow",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",19)':{tag:'(0021,"GEMS_RELA_01",19)',vr:"UL",name:"AcqReconRecordChecksum",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",20)':{tag:'(0021,"GEMS_RELA_01",20)',vr:"DS",name:"TableStartLocation",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",35)':{tag:'(0021,"GEMS_RELA_01",35)',vr:"SS",name:"SeriesFromWhichPrescribed",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",36)':{tag:'(0021,"GEMS_RELA_01",36)',vr:"SS",name:"ImageFromWhichPrescribed",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",37)':{tag:'(0021,"GEMS_RELA_01",37)',vr:"SS",name:"ScreenFormat",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",4a)':{tag:'(0021,"GEMS_RELA_01",4a)',vr:"LO",name:"AnatomicalReferenceForScout",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",4e)':{tag:'(0021,"GEMS_RELA_01",4e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",4f)':{tag:'(0021,"GEMS_RELA_01",4f)',vr:"SS",name:"LocationsInAcquisition",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",50)':{tag:'(0021,"GEMS_RELA_01",50)',vr:"SS",name:"GraphicallyPrescribed",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",51)':{tag:'(0021,"GEMS_RELA_01",51)',vr:"DS",name:"RotationFromSourceXRot",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",52)':{tag:'(0021,"GEMS_RELA_01",52)',vr:"DS",name:"RotationFromSourceYRot",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",53)':{tag:'(0021,"GEMS_RELA_01",53)',vr:"DS",name:"RotationFromSourceZRot",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",54)':{tag:'(0021,"GEMS_RELA_01",54)',vr:"SH",name:"ImagePosition",vm:"3",version:"PrivateTag"},'(0021,"GEMS_RELA_01",55)':{tag:'(0021,"GEMS_RELA_01",55)',vr:"SH",name:"ImageOrientation",vm:"6",version:"PrivateTag"},'(0021,"GEMS_RELA_01",56)':{tag:'(0021,"GEMS_RELA_01",56)',vr:"SL",name:"IntegerSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",57)':{tag:'(0021,"GEMS_RELA_01",57)',vr:"SL",name:"IntegerSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",58)':{tag:'(0021,"GEMS_RELA_01",58)',vr:"SL",name:"IntegerSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",59)':{tag:'(0021,"GEMS_RELA_01",59)',vr:"SL",name:"IntegerSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5a)':{tag:'(0021,"GEMS_RELA_01",5a)',vr:"SL",name:"IntegerSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5b)':{tag:'(0021,"GEMS_RELA_01",5b)',vr:"DS",name:"FloatSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5c)':{tag:'(0021,"GEMS_RELA_01",5c)',vr:"DS",name:"FloatSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5d)':{tag:'(0021,"GEMS_RELA_01",5d)',vr:"DS",name:"FloatSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5e)':{tag:'(0021,"GEMS_RELA_01",5e)',vr:"DS",name:"FloatSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",5f)':{tag:'(0021,"GEMS_RELA_01",5f)',vr:"DS",name:"FloatSlop",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",70)':{tag:'(0021,"GEMS_RELA_01",70)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",71)':{tag:'(0021,"GEMS_RELA_01",71)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",81)':{tag:'(0021,"GEMS_RELA_01",81)',vr:"DS",name:"AutoWindowLevelAlpha",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",82)':{tag:'(0021,"GEMS_RELA_01",82)',vr:"DS",name:"AutoWindowLevelBeta",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",83)':{tag:'(0021,"GEMS_RELA_01",83)',vr:"DS",name:"AutoWindowLevelWindow",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",84)':{tag:'(0021,"GEMS_RELA_01",84)',vr:"DS",name:"AutoWindowLevelLevel",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",90)':{tag:'(0021,"GEMS_RELA_01",90)',vr:"SS",name:"TubeFocalSpotPosition",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",91)':{tag:'(0021,"GEMS_RELA_01",91)',vr:"SS",name:"BiopsyPosition",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",92)':{tag:'(0021,"GEMS_RELA_01",92)',vr:"FL",name:"BiopsyTLocation",vm:"1",version:"PrivateTag"},'(0021,"GEMS_RELA_01",93)':{tag:'(0021,"GEMS_RELA_01",93)',vr:"FL",name:"BiopsyRefLocation",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",04)':{tag:'(0045,"GEMS_SENO_02",04)',vr:"CS",name:"AES",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",06)':{tag:'(0045,"GEMS_SENO_02",06)',vr:"DS",name:"Angulation",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",09)':{tag:'(0045,"GEMS_SENO_02",09)',vr:"DS",name:"RealMagnificationFactor",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",0b)':{tag:'(0045,"GEMS_SENO_02",0b)',vr:"CS",name:"SenographType",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",0c)':{tag:'(0045,"GEMS_SENO_02",0c)',vr:"DS",name:"IntegrationTime",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",0d)':{tag:'(0045,"GEMS_SENO_02",0d)',vr:"DS",name:"ROIOriginXY",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",11)':{tag:'(0045,"GEMS_SENO_02",11)',vr:"DS",name:"ReceptorSizeCmXY",vm:"2",version:"PrivateTag"},'(0045,"GEMS_SENO_02",12)':{tag:'(0045,"GEMS_SENO_02",12)',vr:"IS",name:"ReceptorSizePixelsXY",vm:"2",version:"PrivateTag"},'(0045,"GEMS_SENO_02",13)':{tag:'(0045,"GEMS_SENO_02",13)',vr:"ST",name:"Screen",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",14)':{tag:'(0045,"GEMS_SENO_02",14)',vr:"DS",name:"PixelPitchMicrons",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",15)':{tag:'(0045,"GEMS_SENO_02",15)',vr:"IS",name:"PixelDepthBits",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",16)':{tag:'(0045,"GEMS_SENO_02",16)',vr:"IS",name:"BinningFactorXY",vm:"2",version:"PrivateTag"},'(0045,"GEMS_SENO_02",1B)':{tag:'(0045,"GEMS_SENO_02",1B)',vr:"CS",name:"ClinicalView",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",1D)':{tag:'(0045,"GEMS_SENO_02",1D)',vr:"DS",name:"MeanOfRawGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",1E)':{tag:'(0045,"GEMS_SENO_02",1E)',vr:"DS",name:"MeanOfOffsetGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",1F)':{tag:'(0045,"GEMS_SENO_02",1F)',vr:"DS",name:"MeanOfCorrectedGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",20)':{tag:'(0045,"GEMS_SENO_02",20)',vr:"DS",name:"MeanOfRegionGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",21)':{tag:'(0045,"GEMS_SENO_02",21)',vr:"DS",name:"MeanOfLogRegionGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",22)':{tag:'(0045,"GEMS_SENO_02",22)',vr:"DS",name:"StandardDeviationOfRawGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",23)':{tag:'(0045,"GEMS_SENO_02",23)',vr:"DS",name:"StandardDeviationOfCorrectedGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",24)':{tag:'(0045,"GEMS_SENO_02",24)',vr:"DS",name:"StandardDeviationOfRegionGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",25)':{tag:'(0045,"GEMS_SENO_02",25)',vr:"DS",name:"StandardDeviationOfLogRegionGrayLevels",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",26)':{tag:'(0045,"GEMS_SENO_02",26)',vr:"OB",name:"MAOBuffer",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",27)':{tag:'(0045,"GEMS_SENO_02",27)',vr:"IS",name:"SetNumber",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",28)':{tag:'(0045,"GEMS_SENO_02",28)',vr:"CS",name:"WindowingType",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",29)':{tag:'(0045,"GEMS_SENO_02",29)',vr:"DS",name:"WindowingParameters",vm:"1-n",version:"PrivateTag"},'(0045,"GEMS_SENO_02",2a)':{tag:'(0045,"GEMS_SENO_02",2a)',vr:"IS",name:"CrosshairCursorXCoordinates",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",2b)':{tag:'(0045,"GEMS_SENO_02",2b)',vr:"IS",name:"CrosshairCursorYCoordinates",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",39)':{tag:'(0045,"GEMS_SENO_02",39)',vr:"US",name:"VignetteRows",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3a)':{tag:'(0045,"GEMS_SENO_02",3a)',vr:"US",name:"VignetteColumns",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3b)':{tag:'(0045,"GEMS_SENO_02",3b)',vr:"US",name:"VignetteBitsAllocated",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3c)':{tag:'(0045,"GEMS_SENO_02",3c)',vr:"US",name:"VignetteBitsStored",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3d)':{tag:'(0045,"GEMS_SENO_02",3d)',vr:"US",name:"VignetteHighBit",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3e)':{tag:'(0045,"GEMS_SENO_02",3e)',vr:"US",name:"VignettePixelRepresentation",vm:"1",version:"PrivateTag"},'(0045,"GEMS_SENO_02",3f)':{tag:'(0045,"GEMS_SENO_02",3f)',vr:"OB",name:"VignettePixelData",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",06)':{tag:'(0025,"GEMS_SERS_01",06)',vr:"SS",name:"LastPulseSequenceUsed",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",07)':{tag:'(0025,"GEMS_SERS_01",07)',vr:"SL",name:"ImagesInSeries",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",10)':{tag:'(0025,"GEMS_SERS_01",10)',vr:"SL",name:"LandmarkCounter",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",11)':{tag:'(0025,"GEMS_SERS_01",11)',vr:"SS",name:"NumberOfAcquisitions",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",14)':{tag:'(0025,"GEMS_SERS_01",14)',vr:"SL",name:"IndicatesNumberOfUpdatesToHeader",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",17)':{tag:'(0025,"GEMS_SERS_01",17)',vr:"SL",name:"SeriesCompleteFlag",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",18)':{tag:'(0025,"GEMS_SERS_01",18)',vr:"SL",name:"NumberOfImagesArchived",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",19)':{tag:'(0025,"GEMS_SERS_01",19)',vr:"SL",name:"LastImageNumberUsed",vm:"1",version:"PrivateTag"},'(0025,"GEMS_SERS_01",1a)':{tag:'(0025,"GEMS_SERS_01",1a)',vr:"SH",name:"PrimaryReceiverSuiteAndHost",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",01)':{tag:'(0023,"GEMS_STDY_01",01)',vr:"SL",name:"NumberOfSeriesInStudy",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",02)':{tag:'(0023,"GEMS_STDY_01",02)',vr:"SL",name:"NumberOfUnarchivedSeries",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",10)':{tag:'(0023,"GEMS_STDY_01",10)',vr:"SS",name:"ReferenceImageField",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",50)':{tag:'(0023,"GEMS_STDY_01",50)',vr:"SS",name:"SummaryImage",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",70)':{tag:'(0023,"GEMS_STDY_01",70)',vr:"FD",name:"StartTimeSecsInFirstAxial",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",74)':{tag:'(0023,"GEMS_STDY_01",74)',vr:"SL",name:"NumberOfUpdatesToHeader",vm:"1",version:"PrivateTag"},'(0023,"GEMS_STDY_01",7d)':{tag:'(0023,"GEMS_STDY_01",7d)',vr:"SS",name:"IndicatesIfStudyHasCompleteInfo",vm:"1",version:"PrivateTag"},'(0033,"GEMS_YMHD_01",05)':{tag:'(0033,"GEMS_YMHD_01",05)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0033,"GEMS_YMHD_01",06)':{tag:'(0033,"GEMS_YMHD_01",06)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",39)':{tag:'(0019,"GE_GENESIS_REV3.0",39)',vr:"SS",name:"AxialType",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",8f)':{tag:'(0019,"GE_GENESIS_REV3.0",8f)',vr:"SS",name:"SwapPhaseFrequency",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",9c)':{tag:'(0019,"GE_GENESIS_REV3.0",9c)',vr:"SS",name:"PulseSequenceName",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",9f)':{tag:'(0019,"GE_GENESIS_REV3.0",9f)',vr:"SS",name:"CoilType",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",a4)':{tag:'(0019,"GE_GENESIS_REV3.0",a4)',vr:"SS",name:"SATFatWaterBone",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",c0)':{tag:'(0019,"GE_GENESIS_REV3.0",c0)',vr:"SS",name:"BitmapOfSATSelections",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",c1)':{tag:'(0019,"GE_GENESIS_REV3.0",c1)',vr:"SS",name:"SurfaceCoilIntensityCorrectionFlag",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",cb)':{tag:'(0019,"GE_GENESIS_REV3.0",cb)',vr:"SS",name:"PhaseContrastFlowAxis",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",cc)':{tag:'(0019,"GE_GENESIS_REV3.0",cc)',vr:"SS",name:"PhaseContrastVelocityEncoding",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",d5)':{tag:'(0019,"GE_GENESIS_REV3.0",d5)',vr:"SS",name:"FractionalEcho",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",d8)':{tag:'(0019,"GE_GENESIS_REV3.0",d8)',vr:"SS",name:"VariableEchoFlag",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",d9)':{tag:'(0019,"GE_GENESIS_REV3.0",d9)',vr:"DS",name:"ConcatenatedSat",vm:"1",version:"PrivateTag"},'(0019,"GE_GENESIS_REV3.0",f2)':{tag:'(0019,"GE_GENESIS_REV3.0",f2)',vr:"SS",name:"NumberOfPhases",vm:"1",version:"PrivateTag"},'(0043,"GE_GENESIS_REV3.0",1e)':{tag:'(0043,"GE_GENESIS_REV3.0",1e)',vr:"DS",name:"DeltaStartTime",vm:"1",version:"PrivateTag"},'(0043,"GE_GENESIS_REV3.0",27)':{tag:'(0043,"GE_GENESIS_REV3.0",27)',vr:"SH",name:"ScanPitchRatio",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",01)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",01)',vr:"FD",name:"ImageCompressionFraction",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",02)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",02)',vr:"FD",name:"ImageQuality",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",03)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",03)',vr:"FD",name:"ImageBytesTransferred",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",10)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",10)',vr:"SH",name:"J2cParameterType",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",11)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",11)',vr:"US",name:"J2cPixelRepresentation",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",12)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",12)',vr:"US",name:"J2cBitsAllocated",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",13)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",13)',vr:"US",name:"J2cPixelShiftValue",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",14)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",14)',vr:"US",name:"J2cPlanarConfiguration",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",15)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",15)',vr:"DS",name:"J2cRescaleIntercept",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",20)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",20)',vr:"LO",name:"PixelDataMD5SumPerFrame",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",21)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",21)',vr:"US",name:"HistogramPercentileLabels",vm:"1",version:"PrivateTag"},'(0029,"INTELERAD MEDICAL SYSTEMS",22)':{tag:'(0029,"INTELERAD MEDICAL SYSTEMS",22)',vr:"FD",name:"HistogramPercentileValues",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",01)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",01)',vr:"LO",name:"InstitutionCode",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",02)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",02)',vr:"LO",name:"RoutedTransferAE",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",03)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",03)',vr:"LO",name:"SourceAE",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",04)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",04)',vr:"SH",name:"DeferredValidation",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",05)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",05)',vr:"LO",name:"SeriesOwner",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",06)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",06)',vr:"LO",name:"OrderGroupNumber",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",07)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",07)',vr:"SH",name:"StrippedPixelData",vm:"1",version:"PrivateTag"},'(3f01,"INTELERAD MEDICAL SYSTEMS",08)':{tag:'(3f01,"INTELERAD MEDICAL SYSTEMS",08)',vr:"SH",name:"PendingMoveRequest",vm:"1",version:"PrivateTag"},'(0041,"INTEGRIS 1.0",20)':{tag:'(0041,"INTEGRIS 1.0",20)',vr:"FL",name:"AccumulatedFluoroscopyDose",vm:"1",version:"PrivateTag"},'(0041,"INTEGRIS 1.0",30)':{tag:'(0041,"INTEGRIS 1.0",30)',vr:"FL",name:"AccumulatedExposureDose",vm:"1",version:"PrivateTag"},'(0041,"INTEGRIS 1.0",40)':{tag:'(0041,"INTEGRIS 1.0",40)',vr:"FL",name:"TotalDose",vm:"1",version:"PrivateTag"},'(0041,"INTEGRIS 1.0",41)':{tag:'(0041,"INTEGRIS 1.0",41)',vr:"FL",name:"TotalNumberOfFrames",vm:"1",version:"PrivateTag"},'(0041,"INTEGRIS 1.0",50)':{tag:'(0041,"INTEGRIS 1.0",50)',vr:"SQ",name:"ExposureInformationSequence",vm:"1",version:"PrivateTag"},'(0009,"INTEGRIS 1.0",08)':{tag:'(0009,"INTEGRIS 1.0",08)',vr:"CS",name:"ExposureChannel",vm:"1-n",version:"PrivateTag"},'(0009,"INTEGRIS 1.0",32)':{tag:'(0009,"INTEGRIS 1.0",32)',vr:"TM",name:"ExposureStartTime",vm:"1",version:"PrivateTag"},'(0019,"INTEGRIS 1.0",00)':{tag:'(0019,"INTEGRIS 1.0",00)',vr:"LO",name:"APRName",vm:"1",version:"PrivateTag"},'(0019,"INTEGRIS 1.0",40)':{tag:'(0019,"INTEGRIS 1.0",40)',vr:"DS",name:"FrameRate",vm:"1",version:"PrivateTag"},'(0021,"INTEGRIS 1.0",12)':{tag:'(0021,"INTEGRIS 1.0",12)',vr:"IS",name:"ExposureNumber",vm:"1",version:"PrivateTag"},'(0029,"INTEGRIS 1.0",08)':{tag:'(0029,"INTEGRIS 1.0",08)',vr:"IS",name:"NumberOfExposureResults",vm:"1",version:"PrivateTag"},'(0029,"ISG shadow",70)':{tag:'(0029,"ISG shadow",70)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"ISG shadow",80)':{tag:'(0029,"ISG shadow",80)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"ISG shadow",90)':{tag:'(0029,"ISG shadow",90)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"ISI",01)':{tag:'(0009,"ISI",01)',vr:"UN",name:"SIENETGeneralPurposeIMGEF",vm:"1",version:"PrivateTag"},'(0009,"MERGE TECHNOLOGIES, INC.",00)':{tag:'(0009,"MERGE TECHNOLOGIES, INC.",00)',vr:"OB",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"OCULUS Optikgeraete GmbH",1010)':{tag:'(0029,"OCULUS Optikgeraete GmbH",1010)',vr:"OB",name:"OriginalMeasuringData",vm:"1",version:"PrivateTag"},'(0029,"OCULUS Optikgeraete GmbH",1012)':{tag:'(0029,"OCULUS Optikgeraete GmbH",1012)',vr:"UL",name:"OriginalMeasuringDataLength",vm:"1",version:"PrivateTag"},'(0029,"OCULUS Optikgeraete GmbH",1020)':{tag:'(0029,"OCULUS Optikgeraete GmbH",1020)',vr:"OB",name:"OriginalMeasuringRawData",vm:"1",version:"PrivateTag"},'(0029,"OCULUS Optikgeraete GmbH",1022)':{tag:'(0029,"OCULUS Optikgeraete GmbH",1022)',vr:"UL",name:"OriginalMeasuringRawDataLength",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",00)':{tag:'(0041,"PAPYRUS 3.0",00)',vr:"LT",name:"PapyrusComments",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",10)':{tag:'(0041,"PAPYRUS 3.0",10)',vr:"SQ",name:"PointerSequence",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",11)':{tag:'(0041,"PAPYRUS 3.0",11)',vr:"UL",name:"ImagePointer",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",12)':{tag:'(0041,"PAPYRUS 3.0",12)',vr:"UL",name:"PixelOffset",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",13)':{tag:'(0041,"PAPYRUS 3.0",13)',vr:"SQ",name:"ImageIdentifierSequence",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",14)':{tag:'(0041,"PAPYRUS 3.0",14)',vr:"SQ",name:"ExternalFileReferenceSequence",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",15)':{tag:'(0041,"PAPYRUS 3.0",15)',vr:"US",name:"NumberOfImages",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",21)':{tag:'(0041,"PAPYRUS 3.0",21)',vr:"UI",name:"ReferencedSOPClassUID",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",22)':{tag:'(0041,"PAPYRUS 3.0",22)',vr:"UI",name:"ReferencedSOPInstanceUID",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",31)':{tag:'(0041,"PAPYRUS 3.0",31)',vr:"LT",name:"ReferencedFileName",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",32)':{tag:'(0041,"PAPYRUS 3.0",32)',vr:"LT",name:"ReferencedFilePath",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",41)':{tag:'(0041,"PAPYRUS 3.0",41)',vr:"UI",name:"ReferencedImageSOPClassUID",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",42)':{tag:'(0041,"PAPYRUS 3.0",42)',vr:"UI",name:"ReferencedImageSOPInstanceUID",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS 3.0",50)':{tag:'(0041,"PAPYRUS 3.0",50)',vr:"SQ",name:"ImageSequence",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",00)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",00)',vr:"IS",name:"OverlayID",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",01)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",01)',vr:"LT",name:"LinkedOverlays",vm:"1-n",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",10)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",10)',vr:"US",name:"OverlayRows",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",11)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",11)',vr:"US",name:"OverlayColumns",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",40)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",40)',vr:"LO",name:"OverlayType",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",50)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",50)',vr:"US",name:"OverlayOrigin",vm:"1-n",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",60)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",60)',vr:"LO",name:"Editable",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",70)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",70)',vr:"LO",name:"OverlayFont",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",72)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",72)',vr:"LO",name:"OverlayStyle",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",74)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",74)',vr:"US",name:"OverlayFontSize",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",76)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",76)',vr:"LO",name:"OverlayColor",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",78)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",78)',vr:"US",name:"ShadowSize",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",80)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",80)',vr:"LO",name:"FillPattern",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",82)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",82)',vr:"US",name:"OverlayPenSize",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",a0)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",a0)',vr:"LO",name:"Label",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",a2)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",a2)',vr:"LT",name:"PostItText",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",a4)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",a4)',vr:"US",name:"AnchorPoint",vm:"2",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",b0)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",b0)',vr:"LO",name:"ROIType",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",b2)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",b2)',vr:"LT",name:"AttachedAnnotation",vm:"1",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",ba)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",ba)',vr:"US",name:"ContourPoints",vm:"1-n",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",bc)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",bc)',vr:"US",name:"MaskData",vm:"1-n",version:"PrivateTag"},'(6001-o-60ff,"PAPYRUS 3.0",c0)':{tag:'(6001-o-60ff,"PAPYRUS 3.0",c0)',vr:"SQ",name:"UINOverlaySequence",vm:"1",version:"PrivateTag"},'(0009,"PAPYRUS",00)':{tag:'(0009,"PAPYRUS",00)',vr:"LT",name:"OriginalFileName",vm:"1",version:"PrivateTag"},'(0009,"PAPYRUS",10)':{tag:'(0009,"PAPYRUS",10)',vr:"LT",name:"OriginalFileLocation",vm:"1",version:"PrivateTag"},'(0009,"PAPYRUS",18)':{tag:'(0009,"PAPYRUS",18)',vr:"LT",name:"DataSetIdentifier",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",00)':{tag:'(0041,"PAPYRUS",00)',vr:"LT",name:"PapyrusComments",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",10)':{tag:'(0041,"PAPYRUS",10)',vr:"US",name:"FolderType",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",11)':{tag:'(0041,"PAPYRUS",11)',vr:"LT",name:"PatientFolderDataSetID",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",20)':{tag:'(0041,"PAPYRUS",20)',vr:"LT",name:"FolderName",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",30)':{tag:'(0041,"PAPYRUS",30)',vr:"DA",name:"CreationDate",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",32)':{tag:'(0041,"PAPYRUS",32)',vr:"TM",name:"CreationTime",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",34)':{tag:'(0041,"PAPYRUS",34)',vr:"DA",name:"ModifiedDate",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",36)':{tag:'(0041,"PAPYRUS",36)',vr:"TM",name:"ModifiedTime",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",40)':{tag:'(0041,"PAPYRUS",40)',vr:"LT",name:"OwnerName",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",50)':{tag:'(0041,"PAPYRUS",50)',vr:"LT",name:"FolderStatus",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",60)':{tag:'(0041,"PAPYRUS",60)',vr:"UL",name:"NumberOfImages",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",62)':{tag:'(0041,"PAPYRUS",62)',vr:"UL",name:"NumberOfOther",vm:"1",version:"PrivateTag"},'(0041,"PAPYRUS",a0)':{tag:'(0041,"PAPYRUS",a0)',vr:"LT",name:"ExternalFolderElementDSID",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",a1)':{tag:'(0041,"PAPYRUS",a1)',vr:"US",name:"ExternalFolderElementDataSetType",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",a2)':{tag:'(0041,"PAPYRUS",a2)',vr:"LT",name:"ExternalFolderElementFileLocation",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",a3)':{tag:'(0041,"PAPYRUS",a3)',vr:"UL",name:"ExternalFolderElementLength",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",b0)':{tag:'(0041,"PAPYRUS",b0)',vr:"LT",name:"InternalFolderElementDSID",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",b1)':{tag:'(0041,"PAPYRUS",b1)',vr:"US",name:"InternalFolderElementDataSetType",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",b2)':{tag:'(0041,"PAPYRUS",b2)',vr:"UL",name:"InternalOffsetToDataSet",vm:"1-n",version:"PrivateTag"},'(0041,"PAPYRUS",b3)':{tag:'(0041,"PAPYRUS",b3)',vr:"UL",name:"InternalOffsetToImage",vm:"1-n"},'(2001,"Philips Imaging DD 001",01)':{tag:'(2001,"Philips Imaging DD 001",01)',vr:"FL",name:"ChemicalShift",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",02)':{tag:'(2001,"Philips Imaging DD 001",02)',vr:"IS",name:"ChemicalShiftNumberMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",03)':{tag:'(2001,"Philips Imaging DD 001",03)',vr:"FL",name:"DiffusionBFactor",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",04)':{tag:'(2001,"Philips Imaging DD 001",04)',vr:"CS",name:"DiffusionDirection",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",06)':{tag:'(2001,"Philips Imaging DD 001",06)',vr:"CS",name:"ImageEnhanced",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",07)':{tag:'(2001,"Philips Imaging DD 001",07)',vr:"CS",name:"ImageTypeEDES",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",08)':{tag:'(2001,"Philips Imaging DD 001",08)',vr:"IS",name:"PhaseNumber",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",09)':{tag:'(2001,"Philips Imaging DD 001",09)',vr:"FL",name:"ImagePrepulseDelay",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",0a)':{tag:'(2001,"Philips Imaging DD 001",0a)',vr:"IS",name:"SliceNumberMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",0b)':{tag:'(2001,"Philips Imaging DD 001",0b)',vr:"CS",name:"SliceOrientation",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",0c)':{tag:'(2001,"Philips Imaging DD 001",0c)',vr:"CS",name:"ArrhythmiaRejection",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",0e)':{tag:'(2001,"Philips Imaging DD 001",0e)',vr:"CS",name:"CardiacCycled",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",0f)':{tag:'(2001,"Philips Imaging DD 001",0f)',vr:"SS",name:"CardiacGateWidth",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",10)':{tag:'(2001,"Philips Imaging DD 001",10)',vr:"CS",name:"CardiacSync",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",11)':{tag:'(2001,"Philips Imaging DD 001",11)',vr:"FL",name:"DiffusionEchoTime",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",12)':{tag:'(2001,"Philips Imaging DD 001",12)',vr:"CS",name:"DynamicSeries",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",13)':{tag:'(2001,"Philips Imaging DD 001",13)',vr:"SL",name:"EPIFactor",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",14)':{tag:'(2001,"Philips Imaging DD 001",14)',vr:"SL",name:"NumberOfEchoes",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",15)':{tag:'(2001,"Philips Imaging DD 001",15)',vr:"SS",name:"NumberOfLocations",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",16)':{tag:'(2001,"Philips Imaging DD 001",16)',vr:"SS",name:"NumberOfPCDirections",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",17)':{tag:'(2001,"Philips Imaging DD 001",17)',vr:"SL",name:"NumberOfPhasesMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",18)':{tag:'(2001,"Philips Imaging DD 001",18)',vr:"SL",name:"NumberOfSlicesMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",19)':{tag:'(2001,"Philips Imaging DD 001",19)',vr:"CS",name:"PartialMatrixScanned",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",1a)':{tag:'(2001,"Philips Imaging DD 001",1a)',vr:"FL",name:"PCVelocity",vm:"1-n",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",1b)':{tag:'(2001,"Philips Imaging DD 001",1b)',vr:"FL",name:"PrepulseDelay",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",1c)':{tag:'(2001,"Philips Imaging DD 001",1c)',vr:"CS",name:"PrepulseType",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",1d)':{tag:'(2001,"Philips Imaging DD 001",1d)',vr:"IS",name:"ReconstructionNumberMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",1f)':{tag:'(2001,"Philips Imaging DD 001",1f)',vr:"CS",name:"RespirationSync",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",20)':{tag:'(2001,"Philips Imaging DD 001",20)',vr:"LO",name:"ScanningTechnique",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",21)':{tag:'(2001,"Philips Imaging DD 001",21)',vr:"CS",name:"SPIR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",22)':{tag:'(2001,"Philips Imaging DD 001",22)',vr:"FL",name:"WaterFatShift",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",23)':{tag:'(2001,"Philips Imaging DD 001",23)',vr:"DS",name:"FlipAnglePhilips",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",24)':{tag:'(2001,"Philips Imaging DD 001",24)',vr:"CS",name:"SeriesIsInteractive",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",25)':{tag:'(2001,"Philips Imaging DD 001",25)',vr:"SH",name:"EchoTimeDisplayMR",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",26)':{tag:'(2001,"Philips Imaging DD 001",26)',vr:"CS",name:"PresentationStateSubtractionActive",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",2d)':{tag:'(2001,"Philips Imaging DD 001",2d)',vr:"SS",name:"StackNumberOfSlices",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",32)':{tag:'(2001,"Philips Imaging DD 001",32)',vr:"FL",name:"StackRadialAngle",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",33)':{tag:'(2001,"Philips Imaging DD 001",33)',vr:"CS",name:"StackRadialAxis",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",35)':{tag:'(2001,"Philips Imaging DD 001",35)',vr:"SS",name:"StackSliceNumber",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",36)':{tag:'(2001,"Philips Imaging DD 001",36)',vr:"CS",name:"StackType",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",3f)':{tag:'(2001,"Philips Imaging DD 001",3f)',vr:"CS",name:"ZoomMode",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",58)':{tag:'(2001,"Philips Imaging DD 001",58)',vr:"UL",name:"ContrastTransferTaste",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",5f)':{tag:'(2001,"Philips Imaging DD 001",5f)',vr:"SQ",name:"StackSequence",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",60)':{tag:'(2001,"Philips Imaging DD 001",60)',vr:"SL",name:"NumberOfStacks",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",61)':{tag:'(2001,"Philips Imaging DD 001",61)',vr:"CS",name:"SeriesTransmitted",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",62)':{tag:'(2001,"Philips Imaging DD 001",62)',vr:"CS",name:"SeriesCommitted",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",63)':{tag:'(2001,"Philips Imaging DD 001",63)',vr:"CS",name:"ExaminationSource",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",67)':{tag:'(2001,"Philips Imaging DD 001",67)',vr:"CS",name:"LinearPresentationGLTrafoShapeSub",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",77)':{tag:'(2001,"Philips Imaging DD 001",77)',vr:"CS",name:"GLTrafoType",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",7b)':{tag:'(2001,"Philips Imaging DD 001",7b)',vr:"IS",name:"AcquisitionNumber",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",81)':{tag:'(2001,"Philips Imaging DD 001",81)',vr:"IS",name:"NumberOfDynamicScans",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",9f)':{tag:'(2001,"Philips Imaging DD 001",9f)',vr:"US",name:"PixelProcessingKernelSize",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",a1)':{tag:'(2001,"Philips Imaging DD 001",a1)',vr:"CS",name:"IsRawImage",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",f1)':{tag:'(2001,"Philips Imaging DD 001",f1)',vr:"FL",name:"ProspectiveMotionCorrection",vm:"1",version:"PrivateTag"},'(2001,"Philips Imaging DD 001",f2)':{tag:'(2001,"Philips Imaging DD 001",f2)',vr:"FL",name:"RetrospectiveMotionCorrection",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",01)':{tag:'(2001,"PHILIPS IMAGING DD 001",01)',vr:"FL",name:"ChemicalShift",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",02)':{tag:'(2001,"PHILIPS IMAGING DD 001",02)',vr:"IS",name:"ChemicalShiftNumberMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",03)':{tag:'(2001,"PHILIPS IMAGING DD 001",03)',vr:"FL",name:"DiffusionBFactor",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",04)':{tag:'(2001,"PHILIPS IMAGING DD 001",04)',vr:"CS",name:"DiffusionDirection",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",06)':{tag:'(2001,"PHILIPS IMAGING DD 001",06)',vr:"CS",name:"ImageEnhanced",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",07)':{tag:'(2001,"PHILIPS IMAGING DD 001",07)',vr:"CS",name:"ImageTypeEDES",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",08)':{tag:'(2001,"PHILIPS IMAGING DD 001",08)',vr:"IS",name:"PhaseNumber",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",09)':{tag:'(2001,"PHILIPS IMAGING DD 001",09)',vr:"FL",name:"ImagePrepulseDelay",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",0a)':{tag:'(2001,"PHILIPS IMAGING DD 001",0a)',vr:"IS",name:"SliceNumberMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",0b)':{tag:'(2001,"PHILIPS IMAGING DD 001",0b)',vr:"CS",name:"SliceOrientation",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",0c)':{tag:'(2001,"PHILIPS IMAGING DD 001",0c)',vr:"CS",name:"ArrhythmiaRejection",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",0e)':{tag:'(2001,"PHILIPS IMAGING DD 001",0e)',vr:"CS",name:"CardiacCycled",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",0f)':{tag:'(2001,"PHILIPS IMAGING DD 001",0f)',vr:"SS",name:"CardiacGateWidth",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",10)':{tag:'(2001,"PHILIPS IMAGING DD 001",10)',vr:"CS",name:"CardiacSync",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",11)':{tag:'(2001,"PHILIPS IMAGING DD 001",11)',vr:"FL",name:"DiffusionEchoTime",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",12)':{tag:'(2001,"PHILIPS IMAGING DD 001",12)',vr:"CS",name:"DynamicSeries",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",13)':{tag:'(2001,"PHILIPS IMAGING DD 001",13)',vr:"SL",name:"EPIFactor",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",14)':{tag:'(2001,"PHILIPS IMAGING DD 001",14)',vr:"SL",name:"NumberOfEchoes",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",15)':{tag:'(2001,"PHILIPS IMAGING DD 001",15)',vr:"SS",name:"NumberOfLocations",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",16)':{tag:'(2001,"PHILIPS IMAGING DD 001",16)',vr:"SS",name:"NumberOfPCDirections",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",17)':{tag:'(2001,"PHILIPS IMAGING DD 001",17)',vr:"SL",name:"NumberOfPhasesMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",18)':{tag:'(2001,"PHILIPS IMAGING DD 001",18)',vr:"SL",name:"NumberOfSlicesMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",19)':{tag:'(2001,"PHILIPS IMAGING DD 001",19)',vr:"CS",name:"PartialMatrixScanned",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",1a)':{tag:'(2001,"PHILIPS IMAGING DD 001",1a)',vr:"FL",name:"PCVelocity",vm:"1-n",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",1b)':{tag:'(2001,"PHILIPS IMAGING DD 001",1b)',vr:"FL",name:"PrepulseDelay",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",1c)':{tag:'(2001,"PHILIPS IMAGING DD 001",1c)',vr:"CS",name:"PrepulseType",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",1d)':{tag:'(2001,"PHILIPS IMAGING DD 001",1d)',vr:"IS",name:"ReconstructionNumberMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",1f)':{tag:'(2001,"PHILIPS IMAGING DD 001",1f)',vr:"CS",name:"RespirationSync",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",20)':{tag:'(2001,"PHILIPS IMAGING DD 001",20)',vr:"LO",name:"ScanningTechnique",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",21)':{tag:'(2001,"PHILIPS IMAGING DD 001",21)',vr:"CS",name:"SPIR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",22)':{tag:'(2001,"PHILIPS IMAGING DD 001",22)',vr:"FL",name:"WaterFatShift",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",23)':{tag:'(2001,"PHILIPS IMAGING DD 001",23)',vr:"DS",name:"FlipAnglePhilips",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",24)':{tag:'(2001,"PHILIPS IMAGING DD 001",24)',vr:"CS",name:"SeriesIsInteractive",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",25)':{tag:'(2001,"PHILIPS IMAGING DD 001",25)',vr:"SH",name:"EchoTimeDisplayMR",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",26)':{tag:'(2001,"PHILIPS IMAGING DD 001",26)',vr:"CS",name:"PresentationStateSubtractionActive",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",2d)':{tag:'(2001,"PHILIPS IMAGING DD 001",2d)',vr:"SS",name:"StackNumberOfSlices",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",32)':{tag:'(2001,"PHILIPS IMAGING DD 001",32)',vr:"FL",name:"StackRadialAngle",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",33)':{tag:'(2001,"PHILIPS IMAGING DD 001",33)',vr:"CS",name:"StackRadialAxis",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",35)':{tag:'(2001,"PHILIPS IMAGING DD 001",35)',vr:"SS",name:"StackSliceNumber",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",36)':{tag:'(2001,"PHILIPS IMAGING DD 001",36)',vr:"CS",name:"StackType",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",3f)':{tag:'(2001,"PHILIPS IMAGING DD 001",3f)',vr:"CS",name:"ZoomMode",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",58)':{tag:'(2001,"PHILIPS IMAGING DD 001",58)',vr:"UL",name:"ContrastTransferTaste",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",5f)':{tag:'(2001,"PHILIPS IMAGING DD 001",5f)',vr:"SQ",name:"StackSequence",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",60)':{tag:'(2001,"PHILIPS IMAGING DD 001",60)',vr:"SL",name:"NumberOfStacks",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",61)':{tag:'(2001,"PHILIPS IMAGING DD 001",61)',vr:"CS",name:"SeriesTransmitted",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",62)':{tag:'(2001,"PHILIPS IMAGING DD 001",62)',vr:"CS",name:"SeriesCommitted",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",63)':{tag:'(2001,"PHILIPS IMAGING DD 001",63)',vr:"CS",name:"ExaminationSource",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",67)':{tag:'(2001,"PHILIPS IMAGING DD 001",67)',vr:"CS",name:"LinearPresentationGLTrafoShapeSub",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",77)':{tag:'(2001,"PHILIPS IMAGING DD 001",77)',vr:"CS",name:"GLTrafoType",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",7b)':{tag:'(2001,"PHILIPS IMAGING DD 001",7b)',vr:"IS",name:"AcquisitionNumber",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",81)':{tag:'(2001,"PHILIPS IMAGING DD 001",81)',vr:"IS",name:"NumberOfDynamicScans",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",9f)':{tag:'(2001,"PHILIPS IMAGING DD 001",9f)',vr:"US",name:"PixelProcessingKernelSize",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",a1)':{tag:'(2001,"PHILIPS IMAGING DD 001",a1)',vr:"CS",name:"IsRawImage",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",f1)':{tag:'(2001,"PHILIPS IMAGING DD 001",f1)',vr:"FL",name:"ProspectiveMotionCorrection",vm:"1",version:"PrivateTag"},'(2001,"PHILIPS IMAGING DD 001",f2)':{tag:'(2001,"PHILIPS IMAGING DD 001",f2)',vr:"FL",name:"RetrospectiveMotionCorrection",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",05)':{tag:'(2005,"Philips MR Imaging DD 001",05)',vr:"CS",name:"SynergyReconstructionType",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",1e)':{tag:'(2005,"Philips MR Imaging DD 001",1e)',vr:"SH",name:"MIPProtocol",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",1f)':{tag:'(2005,"Philips MR Imaging DD 001",1f)',vr:"SH",name:"MPRProtocol",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",20)':{tag:'(2005,"Philips MR Imaging DD 001",20)',vr:"SL",name:"NumberOfChemicalShifts",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",2d)':{tag:'(2005,"Philips MR Imaging DD 001",2d)',vr:"SS",name:"NumberOfStackSlices",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",83)':{tag:'(2005,"Philips MR Imaging DD 001",83)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",a1)':{tag:'(2005,"Philips MR Imaging DD 001",a1)',vr:"CS",name:"SyncraScanType",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",b0)':{tag:'(2005,"Philips MR Imaging DD 001",b0)',vr:"FL",name:"DiffusionDirectionRL",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",b1)':{tag:'(2005,"Philips MR Imaging DD 001",b1)',vr:"FL",name:"DiffusionDirectionAP",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 001",b2)':{tag:'(2005,"Philips MR Imaging DD 001",b2)',vr:"FL",name:"DiffusionDirectionFH",vm:"1",version:"PrivateTag"},'(2005,"Philips MR Imaging DD 005",02)':{tag:'(2005,"Philips MR Imaging DD 005",02)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",05)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",05)',vr:"CS",name:"SynergyReconstructionType",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",1e)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",1e)',vr:"SH",name:"MIPProtocol",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",1f)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",1f)',vr:"SH",name:"MPRProtocol",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",20)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",20)',vr:"SL",name:"NumberOfChemicalShifts",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",2d)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",2d)',vr:"SS",name:"NumberOfStackSlices",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",83)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",83)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",a1)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",a1)',vr:"CS",name:"SyncraScanType",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",b0)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",b0)',vr:"FL",name:"DiffusionDirectionRL",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",b1)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",b1)',vr:"FL",name:"DiffusionDirectionAP",vm:"1",version:"PrivateTag"},'(2005,"PHILIPS MR IMAGING DD 001",b2)':{tag:'(2005,"PHILIPS MR IMAGING DD 001",b2)',vr:"FL",name:"DiffusionDirectionFH",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR R5.5/PART",1000)':{tag:'(0019,"PHILIPS MR R5.5/PART",1000)',vr:"DS",name:"FieldOfView",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR R5.6/PART",1000)':{tag:'(0019,"PHILIPS MR R5.6/PART",1000)',vr:"DS",name:"FieldOfView",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",01)':{tag:'(0019,"PHILIPS MR SPECTRO;1",01)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",02)':{tag:'(0019,"PHILIPS MR SPECTRO;1",02)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",03)':{tag:'(0019,"PHILIPS MR SPECTRO;1",03)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",04)':{tag:'(0019,"PHILIPS MR SPECTRO;1",04)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",05)':{tag:'(0019,"PHILIPS MR SPECTRO;1",05)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",06)':{tag:'(0019,"PHILIPS MR SPECTRO;1",06)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",07)':{tag:'(0019,"PHILIPS MR SPECTRO;1",07)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",08)':{tag:'(0019,"PHILIPS MR SPECTRO;1",08)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",09)':{tag:'(0019,"PHILIPS MR SPECTRO;1",09)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",10)':{tag:'(0019,"PHILIPS MR SPECTRO;1",10)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",12)':{tag:'(0019,"PHILIPS MR SPECTRO;1",12)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",13)':{tag:'(0019,"PHILIPS MR SPECTRO;1",13)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",14)':{tag:'(0019,"PHILIPS MR SPECTRO;1",14)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",15)':{tag:'(0019,"PHILIPS MR SPECTRO;1",15)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",16)':{tag:'(0019,"PHILIPS MR SPECTRO;1",16)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",17)':{tag:'(0019,"PHILIPS MR SPECTRO;1",17)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",18)':{tag:'(0019,"PHILIPS MR SPECTRO;1",18)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",20)':{tag:'(0019,"PHILIPS MR SPECTRO;1",20)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",21)':{tag:'(0019,"PHILIPS MR SPECTRO;1",21)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",22)':{tag:'(0019,"PHILIPS MR SPECTRO;1",22)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",23)':{tag:'(0019,"PHILIPS MR SPECTRO;1",23)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",24)':{tag:'(0019,"PHILIPS MR SPECTRO;1",24)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",25)':{tag:'(0019,"PHILIPS MR SPECTRO;1",25)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",26)':{tag:'(0019,"PHILIPS MR SPECTRO;1",26)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",27)':{tag:'(0019,"PHILIPS MR SPECTRO;1",27)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",28)':{tag:'(0019,"PHILIPS MR SPECTRO;1",28)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",29)':{tag:'(0019,"PHILIPS MR SPECTRO;1",29)',vr:"IS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",31)':{tag:'(0019,"PHILIPS MR SPECTRO;1",31)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",32)':{tag:'(0019,"PHILIPS MR SPECTRO;1",32)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",41)':{tag:'(0019,"PHILIPS MR SPECTRO;1",41)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",42)':{tag:'(0019,"PHILIPS MR SPECTRO;1",42)',vr:"IS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",43)':{tag:'(0019,"PHILIPS MR SPECTRO;1",43)',vr:"IS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",45)':{tag:'(0019,"PHILIPS MR SPECTRO;1",45)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",46)':{tag:'(0019,"PHILIPS MR SPECTRO;1",46)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",47)':{tag:'(0019,"PHILIPS MR SPECTRO;1",47)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",48)':{tag:'(0019,"PHILIPS MR SPECTRO;1",48)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",49)':{tag:'(0019,"PHILIPS MR SPECTRO;1",49)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",50)':{tag:'(0019,"PHILIPS MR SPECTRO;1",50)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",60)':{tag:'(0019,"PHILIPS MR SPECTRO;1",60)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",61)':{tag:'(0019,"PHILIPS MR SPECTRO;1",61)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",70)':{tag:'(0019,"PHILIPS MR SPECTRO;1",70)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",71)':{tag:'(0019,"PHILIPS MR SPECTRO;1",71)',vr:"IS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",72)':{tag:'(0019,"PHILIPS MR SPECTRO;1",72)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",73)':{tag:'(0019,"PHILIPS MR SPECTRO;1",73)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",74)':{tag:'(0019,"PHILIPS MR SPECTRO;1",74)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",76)':{tag:'(0019,"PHILIPS MR SPECTRO;1",76)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",77)':{tag:'(0019,"PHILIPS MR SPECTRO;1",77)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",78)':{tag:'(0019,"PHILIPS MR SPECTRO;1",78)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",79)':{tag:'(0019,"PHILIPS MR SPECTRO;1",79)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR SPECTRO;1",80)':{tag:'(0019,"PHILIPS MR SPECTRO;1",80)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"PHILIPS MR",10)':{tag:'(0009,"PHILIPS MR",10)',vr:"LO",name:"SPIRelease",vm:"1",version:"PrivateTag"},'(0009,"PHILIPS MR",12)':{tag:'(0009,"PHILIPS MR",12)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",09)':{tag:'(0019,"PHILIPS MR/LAST",09)',vr:"DS",name:"MainMagneticField",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",0e)':{tag:'(0019,"PHILIPS MR/LAST",0e)',vr:"IS",name:"FlowCompensation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",b1)':{tag:'(0019,"PHILIPS MR/LAST",b1)',vr:"IS",name:"MinimumRRInterval",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",b2)':{tag:'(0019,"PHILIPS MR/LAST",b2)',vr:"IS",name:"MaximumRRInterval",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",b3)':{tag:'(0019,"PHILIPS MR/LAST",b3)',vr:"IS",name:"NumberOfRejections",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",b4)':{tag:'(0019,"PHILIPS MR/LAST",b4)',vr:"IS",name:"NumberOfRRIntervals",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",b5)':{tag:'(0019,"PHILIPS MR/LAST",b5)',vr:"IS",name:"ArrhythmiaRejection",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",c0)':{tag:'(0019,"PHILIPS MR/LAST",c0)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",c6)':{tag:'(0019,"PHILIPS MR/LAST",c6)',vr:"IS",name:"CycledMultipleSlice",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",ce)':{tag:'(0019,"PHILIPS MR/LAST",ce)',vr:"IS",name:"REST",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",d5)':{tag:'(0019,"PHILIPS MR/LAST",d5)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",d6)':{tag:'(0019,"PHILIPS MR/LAST",d6)',vr:"IS",name:"FourierInterpolation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",d9)':{tag:'(0019,"PHILIPS MR/LAST",d9)',vr:"IS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",e0)':{tag:'(0019,"PHILIPS MR/LAST",e0)',vr:"IS",name:"Prepulse",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",e1)':{tag:'(0019,"PHILIPS MR/LAST",e1)',vr:"DS",name:"PrepulseDelay",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",e2)':{tag:'(0019,"PHILIPS MR/LAST",e2)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",e3)':{tag:'(0019,"PHILIPS MR/LAST",e3)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",f0)':{tag:'(0019,"PHILIPS MR/LAST",f0)',vr:"LT",name:"WSProtocolString1",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",f1)':{tag:'(0019,"PHILIPS MR/LAST",f1)',vr:"LT",name:"WSProtocolString2",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",f2)':{tag:'(0019,"PHILIPS MR/LAST",f2)',vr:"LT",name:"WSProtocolString3",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/LAST",f3)':{tag:'(0019,"PHILIPS MR/LAST",f3)',vr:"LT",name:"WSProtocolString4",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/LAST",00)':{tag:'(0021,"PHILIPS MR/LAST",00)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/LAST",10)':{tag:'(0021,"PHILIPS MR/LAST",10)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/LAST",20)':{tag:'(0021,"PHILIPS MR/LAST",20)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/LAST",21)':{tag:'(0021,"PHILIPS MR/LAST",21)',vr:"DS",name:"SliceGap",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/LAST",22)':{tag:'(0021,"PHILIPS MR/LAST",22)',vr:"DS",name:"StackRadialAngle",vm:"1",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",00)':{tag:'(0027,"PHILIPS MR/LAST",00)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",11)':{tag:'(0027,"PHILIPS MR/LAST",11)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",12)':{tag:'(0027,"PHILIPS MR/LAST",12)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",13)':{tag:'(0027,"PHILIPS MR/LAST",13)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",14)':{tag:'(0027,"PHILIPS MR/LAST",14)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",15)':{tag:'(0027,"PHILIPS MR/LAST",15)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0027,"PHILIPS MR/LAST",16)':{tag:'(0027,"PHILIPS MR/LAST",16)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",10)':{tag:'(0029,"PHILIPS MR/LAST",10)',vr:"DS",name:"FPMin",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",20)':{tag:'(0029,"PHILIPS MR/LAST",20)',vr:"DS",name:"FPMax",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",30)':{tag:'(0029,"PHILIPS MR/LAST",30)',vr:"DS",name:"ScaledMinimum",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",40)':{tag:'(0029,"PHILIPS MR/LAST",40)',vr:"DS",name:"ScaledMaximum",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",50)':{tag:'(0029,"PHILIPS MR/LAST",50)',vr:"DS",name:"WindowMinimum",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",60)':{tag:'(0029,"PHILIPS MR/LAST",60)',vr:"DS",name:"WindowMaximum",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",61)':{tag:'(0029,"PHILIPS MR/LAST",61)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",70)':{tag:'(0029,"PHILIPS MR/LAST",70)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",71)':{tag:'(0029,"PHILIPS MR/LAST",71)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",72)':{tag:'(0029,"PHILIPS MR/LAST",72)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",80)':{tag:'(0029,"PHILIPS MR/LAST",80)',vr:"IS",name:"ViewCenter",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",81)':{tag:'(0029,"PHILIPS MR/LAST",81)',vr:"IS",name:"ViewSize",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",82)':{tag:'(0029,"PHILIPS MR/LAST",82)',vr:"IS",name:"ViewZoom",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/LAST",83)':{tag:'(0029,"PHILIPS MR/LAST",83)',vr:"IS",name:"ViewTransform",vm:"1",version:"PrivateTag"},'(6001,"PHILIPS MR/LAST",00)':{tag:'(6001,"PHILIPS MR/LAST",00)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1000)':{tag:'(0019,"PHILIPS MR/PART",1000)',vr:"DS",name:"FieldOfView",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1005)':{tag:'(0019,"PHILIPS MR/PART",1005)',vr:"DS",name:"CCAngulation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1006)':{tag:'(0019,"PHILIPS MR/PART",1006)',vr:"DS",name:"APAngulation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1007)':{tag:'(0019,"PHILIPS MR/PART",1007)',vr:"DS",name:"LRAngulation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1008)':{tag:'(0019,"PHILIPS MR/PART",1008)',vr:"IS",name:"PatientPosition",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1009)':{tag:'(0019,"PHILIPS MR/PART",1009)',vr:"IS",name:"PatientOrientation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100a)':{tag:'(0019,"PHILIPS MR/PART",100a)',vr:"IS",name:"SliceOrientation",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100b)':{tag:'(0019,"PHILIPS MR/PART",100b)',vr:"DS",name:"LROffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100c)':{tag:'(0019,"PHILIPS MR/PART",100c)',vr:"DS",name:"CCOffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100d)':{tag:'(0019,"PHILIPS MR/PART",100d)',vr:"DS",name:"APOffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100e)':{tag:'(0019,"PHILIPS MR/PART",100e)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",100f)':{tag:'(0019,"PHILIPS MR/PART",100f)',vr:"IS",name:"NumberOfSlices",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1010)':{tag:'(0019,"PHILIPS MR/PART",1010)',vr:"DS",name:"SliceFactor",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1011)':{tag:'(0019,"PHILIPS MR/PART",1011)',vr:"DS",name:"EchoTimes",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1015)':{tag:'(0019,"PHILIPS MR/PART",1015)',vr:"IS",name:"DynamicStudy",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1018)':{tag:'(0019,"PHILIPS MR/PART",1018)',vr:"DS",name:"HeartbeatInterval",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1019)':{tag:'(0019,"PHILIPS MR/PART",1019)',vr:"DS",name:"RepetitionTimeFFE",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",101a)':{tag:'(0019,"PHILIPS MR/PART",101a)',vr:"DS",name:"FFEFlipAngle",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",101b)':{tag:'(0019,"PHILIPS MR/PART",101b)',vr:"IS",name:"NumberOfScans",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1021)':{tag:'(0019,"PHILIPS MR/PART",1021)',vr:"DS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1022)':{tag:'(0019,"PHILIPS MR/PART",1022)',vr:"DS",name:"DynamicScanTimeBegin",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1024)':{tag:'(0019,"PHILIPS MR/PART",1024)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1064)':{tag:'(0019,"PHILIPS MR/PART",1064)',vr:"DS",name:"RepetitionTimeSE",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1065)':{tag:'(0019,"PHILIPS MR/PART",1065)',vr:"DS",name:"RepetitionTimeIR",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1069)':{tag:'(0019,"PHILIPS MR/PART",1069)',vr:"IS",name:"NumberOfPhases",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",106a)':{tag:'(0019,"PHILIPS MR/PART",106a)',vr:"IS",name:"CardiacFrequency",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",106b)':{tag:'(0019,"PHILIPS MR/PART",106b)',vr:"DS",name:"InversionDelay",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",106c)':{tag:'(0019,"PHILIPS MR/PART",106c)',vr:"DS",name:"GateDelay",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",106d)':{tag:'(0019,"PHILIPS MR/PART",106d)',vr:"DS",name:"GateWidth",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",106e)':{tag:'(0019,"PHILIPS MR/PART",106e)',vr:"DS",name:"TriggerDelayTime",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1080)':{tag:'(0019,"PHILIPS MR/PART",1080)',vr:"IS",name:"NumberOfChemicalShifts",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1081)':{tag:'(0019,"PHILIPS MR/PART",1081)',vr:"DS",name:"ChemicalShift",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1084)':{tag:'(0019,"PHILIPS MR/PART",1084)',vr:"IS",name:"NumberOfRows",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1085)':{tag:'(0019,"PHILIPS MR/PART",1085)',vr:"IS",name:"NumberOfSamples",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1094)':{tag:'(0019,"PHILIPS MR/PART",1094)',vr:"LO",name:"MagnetizationTransferContrast",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1095)':{tag:'(0019,"PHILIPS MR/PART",1095)',vr:"LO",name:"SpectralPresaturationWithInversionRecovery",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1096)':{tag:'(0019,"PHILIPS MR/PART",1096)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1097)':{tag:'(0019,"PHILIPS MR/PART",1097)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10a0)':{tag:'(0019,"PHILIPS MR/PART",10a0)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10a1)':{tag:'(0019,"PHILIPS MR/PART",10a1)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10a3)':{tag:'(0019,"PHILIPS MR/PART",10a3)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10a4)':{tag:'(0019,"PHILIPS MR/PART",10a4)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10c8)':{tag:'(0019,"PHILIPS MR/PART",10c8)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10c9)':{tag:'(0019,"PHILIPS MR/PART",10c9)',vr:"IS",name:"FoldoverDirectionTransverse",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10ca)':{tag:'(0019,"PHILIPS MR/PART",10ca)',vr:"IS",name:"FoldoverDirectionSagittal",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10cb)':{tag:'(0019,"PHILIPS MR/PART",10cb)',vr:"IS",name:"FoldoverDirectionCoronal",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10cc)':{tag:'(0019,"PHILIPS MR/PART",10cc)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10cd)':{tag:'(0019,"PHILIPS MR/PART",10cd)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10ce)':{tag:'(0019,"PHILIPS MR/PART",10ce)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10cf)':{tag:'(0019,"PHILIPS MR/PART",10cf)',vr:"IS",name:"NumberOfEchoes",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d0)':{tag:'(0019,"PHILIPS MR/PART",10d0)',vr:"IS",name:"ScanResolution",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d2)':{tag:'(0019,"PHILIPS MR/PART",10d2)',vr:"LO",name:"WaterFatShift",vm:"2",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d4)':{tag:'(0019,"PHILIPS MR/PART",10d4)',vr:"IS",name:"ArtifactReduction",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d5)':{tag:'(0019,"PHILIPS MR/PART",10d5)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d6)':{tag:'(0019,"PHILIPS MR/PART",10d6)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d7)':{tag:'(0019,"PHILIPS MR/PART",10d7)',vr:"DS",name:"ScanPercentage",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d8)':{tag:'(0019,"PHILIPS MR/PART",10d8)',vr:"IS",name:"Halfscan",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10d9)':{tag:'(0019,"PHILIPS MR/PART",10d9)',vr:"IS",name:"EPIFactor",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10da)':{tag:'(0019,"PHILIPS MR/PART",10da)',vr:"IS",name:"TurboFactor",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10db)':{tag:'(0019,"PHILIPS MR/PART",10db)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10e0)':{tag:'(0019,"PHILIPS MR/PART",10e0)',vr:"IS",name:"PercentageOfScanCompleted",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",10e1)':{tag:'(0019,"PHILIPS MR/PART",10e1)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1100)':{tag:'(0019,"PHILIPS MR/PART",1100)',vr:"IS",name:"NumberOfStacks",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1101)':{tag:'(0019,"PHILIPS MR/PART",1101)',vr:"IS",name:"StackType",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1102)':{tag:'(0019,"PHILIPS MR/PART",1102)',vr:"IS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",110b)':{tag:'(0019,"PHILIPS MR/PART",110b)',vr:"DS",name:"LROffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",110c)':{tag:'(0019,"PHILIPS MR/PART",110c)',vr:"DS",name:"CCOffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",110d)':{tag:'(0019,"PHILIPS MR/PART",110d)',vr:"DS",name:"APOffcenter",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",1145)':{tag:'(0019,"PHILIPS MR/PART",1145)',vr:"IS",name:"ReconstructionResolution",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",11fc)':{tag:'(0019,"PHILIPS MR/PART",11fc)',vr:"IS",name:"ResonanceFrequency",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",12c0)':{tag:'(0019,"PHILIPS MR/PART",12c0)',vr:"DS",name:"TriggerDelayTimes",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",12e0)':{tag:'(0019,"PHILIPS MR/PART",12e0)',vr:"IS",name:"PrepulseType",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",12e1)':{tag:'(0019,"PHILIPS MR/PART",12e1)',vr:"DS",name:"PrepulseDelay",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS MR/PART",12e3)':{tag:'(0019,"PHILIPS MR/PART",12e3)',vr:"DS",name:"PhaseContrastVelocity",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1000)':{tag:'(0021,"PHILIPS MR/PART",1000)',vr:"IS",name:"ReconstructionNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1010)':{tag:'(0021,"PHILIPS MR/PART",1010)',vr:"IS",name:"ImageType",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1020)':{tag:'(0021,"PHILIPS MR/PART",1020)',vr:"IS",name:"SliceNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1030)':{tag:'(0021,"PHILIPS MR/PART",1030)',vr:"IS",name:"EchoNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1031)':{tag:'(0021,"PHILIPS MR/PART",1031)',vr:"DS",name:"PatientReferenceID",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1035)':{tag:'(0021,"PHILIPS MR/PART",1035)',vr:"IS",name:"ChemicalShiftNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1040)':{tag:'(0021,"PHILIPS MR/PART",1040)',vr:"IS",name:"PhaseNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1050)':{tag:'(0021,"PHILIPS MR/PART",1050)',vr:"IS",name:"DynamicScanNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1060)':{tag:'(0021,"PHILIPS MR/PART",1060)',vr:"IS",name:"NumberOfRowsInObject",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1061)':{tag:'(0021,"PHILIPS MR/PART",1061)',vr:"IS",name:"RowNumber",vm:"1-n",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1062)':{tag:'(0021,"PHILIPS MR/PART",1062)',vr:"IS",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1100)':{tag:'(0021,"PHILIPS MR/PART",1100)',vr:"DA",name:"ScanDate",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1110)':{tag:'(0021,"PHILIPS MR/PART",1110)',vr:"TM",name:"ScanTime",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS MR/PART",1221)':{tag:'(0021,"PHILIPS MR/PART",1221)',vr:"IS",name:"SliceGap",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",00)':{tag:'(0029,"PHILIPS MR/PART",00)',vr:"DS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",04)':{tag:'(0029,"PHILIPS MR/PART",04)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",10)':{tag:'(0029,"PHILIPS MR/PART",10)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",11)':{tag:'(0029,"PHILIPS MR/PART",11)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",20)':{tag:'(0029,"PHILIPS MR/PART",20)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",31)':{tag:'(0029,"PHILIPS MR/PART",31)',vr:"DS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",32)':{tag:'(0029,"PHILIPS MR/PART",32)',vr:"DS",name:"Unknown",vm:"2",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",c3)':{tag:'(0029,"PHILIPS MR/PART",c3)',vr:"IS",name:"ScanResolution",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",c4)':{tag:'(0029,"PHILIPS MR/PART",c4)',vr:"IS",name:"FieldOfView",vm:"1",version:"PrivateTag"},'(0029,"PHILIPS MR/PART",d5)':{tag:'(0029,"PHILIPS MR/PART",d5)',vr:"LT",name:"SliceThickness",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS-MR-1",11)':{tag:'(0019,"PHILIPS-MR-1",11)',vr:"IS",name:"ChemicalShiftNumber",vm:"1",version:"PrivateTag"},'(0019,"PHILIPS-MR-1",12)':{tag:'(0019,"PHILIPS-MR-1",12)',vr:"IS",name:"PhaseNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS-MR-1",01)':{tag:'(0021,"PHILIPS-MR-1",01)',vr:"IS",name:"ReconstructionNumber",vm:"1",version:"PrivateTag"},'(0021,"PHILIPS-MR-1",02)':{tag:'(0021,"PHILIPS-MR-1",02)',vr:"IS",name:"SliceNumber",vm:"1",version:"PrivateTag"},'(7001,"Picker NM Private Group",01)':{tag:'(7001,"Picker NM Private Group",01)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(7001,"Picker NM Private Group",02)':{tag:'(7001,"Picker NM Private Group",02)',vr:"OB",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  ACQU",10)':{tag:'(0019,"SIEMENS CM VA0  ACQU",10)',vr:"LT",name:"ParameterFileName",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  ACQU",11)':{tag:'(0019,"SIEMENS CM VA0  ACQU",11)',vr:"LO",name:"SequenceFileName",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  ACQU",12)':{tag:'(0019,"SIEMENS CM VA0  ACQU",12)',vr:"LT",name:"SequenceFileOwner",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  ACQU",13)':{tag:'(0019,"SIEMENS CM VA0  ACQU",13)',vr:"LT",name:"SequenceDescription",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  ACQU",14)':{tag:'(0019,"SIEMENS CM VA0  ACQU",14)',vr:"LT",name:"EPIFileName",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  CMS",00)':{tag:'(0009,"SIEMENS CM VA0  CMS",00)',vr:"DS",name:"NumberOfMeasurements",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  CMS",10)':{tag:'(0009,"SIEMENS CM VA0  CMS",10)',vr:"LT",name:"StorageMode",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  CMS",12)':{tag:'(0009,"SIEMENS CM VA0  CMS",12)',vr:"UL",name:"EvaluationMaskImage",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  CMS",26)':{tag:'(0009,"SIEMENS CM VA0  CMS",26)',vr:"DA",name:"LastMoveDate",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  CMS",27)':{tag:'(0009,"SIEMENS CM VA0  CMS",27)',vr:"TM",name:"LastMoveTime",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",0a)':{tag:'(0011,"SIEMENS CM VA0  CMS",0a)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",10)':{tag:'(0011,"SIEMENS CM VA0  CMS",10)',vr:"DA",name:"RegistrationDate",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",11)':{tag:'(0011,"SIEMENS CM VA0  CMS",11)',vr:"TM",name:"RegistrationTime",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",22)':{tag:'(0011,"SIEMENS CM VA0  CMS",22)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",23)':{tag:'(0011,"SIEMENS CM VA0  CMS",23)',vr:"DS",name:"UsedPatientWeight",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS CM VA0  CMS",40)':{tag:'(0011,"SIEMENS CM VA0  CMS",40)',vr:"IS",name:"OrganCode",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",00)':{tag:'(0013,"SIEMENS CM VA0  CMS",00)',vr:"LT",name:"ModifyingPhysician",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",10)':{tag:'(0013,"SIEMENS CM VA0  CMS",10)',vr:"DA",name:"ModificationDate",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",12)':{tag:'(0013,"SIEMENS CM VA0  CMS",12)',vr:"TM",name:"ModificationTime",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",20)':{tag:'(0013,"SIEMENS CM VA0  CMS",20)',vr:"LO",name:"PatientName",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",22)':{tag:'(0013,"SIEMENS CM VA0  CMS",22)',vr:"LO",name:"PatientId",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",30)':{tag:'(0013,"SIEMENS CM VA0  CMS",30)',vr:"DA",name:"PatientBirthdate",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",31)':{tag:'(0013,"SIEMENS CM VA0  CMS",31)',vr:"DS",name:"PatientWeight",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",32)':{tag:'(0013,"SIEMENS CM VA0  CMS",32)',vr:"LT",name:"PatientsMaidenName",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",33)':{tag:'(0013,"SIEMENS CM VA0  CMS",33)',vr:"LT",name:"ReferringPhysician",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",34)':{tag:'(0013,"SIEMENS CM VA0  CMS",34)',vr:"LT",name:"AdmittingDiagnosis",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",35)':{tag:'(0013,"SIEMENS CM VA0  CMS",35)',vr:"LO",name:"PatientSex",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",40)':{tag:'(0013,"SIEMENS CM VA0  CMS",40)',vr:"LO",name:"ProcedureDescription",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",42)':{tag:'(0013,"SIEMENS CM VA0  CMS",42)',vr:"LO",name:"RestDirection",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",44)':{tag:'(0013,"SIEMENS CM VA0  CMS",44)',vr:"LO",name:"PatientPosition",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",46)':{tag:'(0013,"SIEMENS CM VA0  CMS",46)',vr:"LT",name:"ViewDirection",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",50)':{tag:'(0013,"SIEMENS CM VA0  CMS",50)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",51)':{tag:'(0013,"SIEMENS CM VA0  CMS",51)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",52)':{tag:'(0013,"SIEMENS CM VA0  CMS",52)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",53)':{tag:'(0013,"SIEMENS CM VA0  CMS",53)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",54)':{tag:'(0013,"SIEMENS CM VA0  CMS",54)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",55)':{tag:'(0013,"SIEMENS CM VA0  CMS",55)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0013,"SIEMENS CM VA0  CMS",56)':{tag:'(0013,"SIEMENS CM VA0  CMS",56)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  CMS",10)':{tag:'(0019,"SIEMENS CM VA0  CMS",10)',vr:"DS",name:"NetFrequency",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  CMS",20)':{tag:'(0019,"SIEMENS CM VA0  CMS",20)',vr:"LT",name:"MeasurementMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  CMS",30)':{tag:'(0019,"SIEMENS CM VA0  CMS",30)',vr:"LT",name:"CalculationMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  CMS",50)':{tag:'(0019,"SIEMENS CM VA0  CMS",50)',vr:"IS",name:"NoiseLevel",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CM VA0  CMS",60)':{tag:'(0019,"SIEMENS CM VA0  CMS",60)',vr:"IS",name:"NumberOfDataBytes",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",20)':{tag:'(0021,"SIEMENS CM VA0  CMS",20)',vr:"DS",name:"FoV",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",22)':{tag:'(0021,"SIEMENS CM VA0  CMS",22)',vr:"DS",name:"ImageMagnificationFactor",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",24)':{tag:'(0021,"SIEMENS CM VA0  CMS",24)',vr:"DS",name:"ImageScrollOffset",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",26)':{tag:'(0021,"SIEMENS CM VA0  CMS",26)',vr:"IS",name:"ImagePixelOffset",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",30)':{tag:'(0021,"SIEMENS CM VA0  CMS",30)',vr:"LT",name:"ViewDirection",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",32)':{tag:'(0021,"SIEMENS CM VA0  CMS",32)',vr:"CS",name:"PatientRestDirection",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",60)':{tag:'(0021,"SIEMENS CM VA0  CMS",60)',vr:"DS",name:"ImagePosition",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",61)':{tag:'(0021,"SIEMENS CM VA0  CMS",61)',vr:"DS",name:"ImageNormal",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",63)':{tag:'(0021,"SIEMENS CM VA0  CMS",63)',vr:"DS",name:"ImageDistance",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",65)':{tag:'(0021,"SIEMENS CM VA0  CMS",65)',vr:"US",name:"ImagePositioningHistoryMask",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",6a)':{tag:'(0021,"SIEMENS CM VA0  CMS",6a)',vr:"DS",name:"ImageRow",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",6b)':{tag:'(0021,"SIEMENS CM VA0  CMS",6b)',vr:"DS",name:"ImageColumn",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",70)':{tag:'(0021,"SIEMENS CM VA0  CMS",70)',vr:"LT",name:"PatientOrientationSet1",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",71)':{tag:'(0021,"SIEMENS CM VA0  CMS",71)',vr:"LT",name:"PatientOrientationSet2",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",80)':{tag:'(0021,"SIEMENS CM VA0  CMS",80)',vr:"LT",name:"StudyName",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CM VA0  CMS",82)':{tag:'(0021,"SIEMENS CM VA0  CMS",82)',vr:"LT",name:"StudyType",vm:"3",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",10)':{tag:'(0029,"SIEMENS CM VA0  CMS",10)',vr:"LT",name:"WindowStyle",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",11)':{tag:'(0029,"SIEMENS CM VA0  CMS",11)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",13)':{tag:'(0029,"SIEMENS CM VA0  CMS",13)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",20)':{tag:'(0029,"SIEMENS CM VA0  CMS",20)',vr:"LT",name:"PixelQualityCode",vm:"3",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",22)':{tag:'(0029,"SIEMENS CM VA0  CMS",22)',vr:"IS",name:"PixelQualityValue",vm:"3",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",50)':{tag:'(0029,"SIEMENS CM VA0  CMS",50)',vr:"LT",name:"ArchiveCode",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",51)':{tag:'(0029,"SIEMENS CM VA0  CMS",51)',vr:"LT",name:"ExposureCode",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",52)':{tag:'(0029,"SIEMENS CM VA0  CMS",52)',vr:"LT",name:"SortCode",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",53)':{tag:'(0029,"SIEMENS CM VA0  CMS",53)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CM VA0  CMS",60)':{tag:'(0029,"SIEMENS CM VA0  CMS",60)',vr:"LT",name:"Splash",vm:"1",version:"PrivateTag"},'(0051,"SIEMENS CM VA0  CMS",10)':{tag:'(0051,"SIEMENS CM VA0  CMS",10)',vr:"LT",name:"ImageText",vm:"1-n",version:"PrivateTag"},'(6021,"SIEMENS CM VA0  CMS",00)':{tag:'(6021,"SIEMENS CM VA0  CMS",00)',vr:"LT",name:"ImageGraphicsFormatCode",vm:"1",version:"PrivateTag"},'(6021,"SIEMENS CM VA0  CMS",10)':{tag:'(6021,"SIEMENS CM VA0  CMS",10)',vr:"LT",name:"ImageGraphics",vm:"1",version:"PrivateTag"},'(7fe1,"SIEMENS CM VA0  CMS",00)':{tag:'(7fe1,"SIEMENS CM VA0  CMS",00)',vr:"OB",name:"BinaryData",vm:"1-n",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",10)':{tag:'(0009,"SIEMENS CM VA0  LAB",10)',vr:"LT",name:"GeneratorIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",11)':{tag:'(0009,"SIEMENS CM VA0  LAB",11)',vr:"LT",name:"GantryIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",12)':{tag:'(0009,"SIEMENS CM VA0  LAB",12)',vr:"LT",name:"X-RayTubeIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",13)':{tag:'(0009,"SIEMENS CM VA0  LAB",13)',vr:"LT",name:"DetectorIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",14)':{tag:'(0009,"SIEMENS CM VA0  LAB",14)',vr:"LT",name:"DASIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",15)':{tag:'(0009,"SIEMENS CM VA0  LAB",15)',vr:"LT",name:"SMIIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",16)':{tag:'(0009,"SIEMENS CM VA0  LAB",16)',vr:"LT",name:"CPUIdentificationLabel",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CM VA0  LAB",20)':{tag:'(0009,"SIEMENS CM VA0  LAB",20)',vr:"LT",name:"HeaderVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",08)':{tag:'(0029,"SIEMENS CSA HEADER",08)',vr:"CS",name:"CSAImageHeaderType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",09)':{tag:'(0029,"SIEMENS CSA HEADER",09)',vr:"LO",name:"CSAImageHeaderVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",10)':{tag:'(0029,"SIEMENS CSA HEADER",10)',vr:"OB",name:"CSAImageHeaderInfo",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",18)':{tag:'(0029,"SIEMENS CSA HEADER",18)',vr:"CS",name:"CSASeriesHeaderType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",19)':{tag:'(0029,"SIEMENS CSA HEADER",19)',vr:"LO",name:"CSASeriesHeaderVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA HEADER",20)':{tag:'(0029,"SIEMENS CSA HEADER",20)',vr:"OB",name:"CSASeriesHeaderInfo",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA NON-IMAGE",08)':{tag:'(0029,"SIEMENS CSA NON-IMAGE",08)',vr:"CS",name:"CSADataType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA NON-IMAGE",09)':{tag:'(0029,"SIEMENS CSA NON-IMAGE",09)',vr:"LO",name:"CSADataVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS CSA NON-IMAGE",10)':{tag:'(0029,"SIEMENS CSA NON-IMAGE",10)',vr:"OB",name:"CSADataInfo",vm:"1",version:"PrivateTag"},'(7FE1,"SIEMENS CSA NON-IMAGE",10)':{tag:'(7FE1,"SIEMENS CSA NON-IMAGE",10)',vr:"OB",name:"CSAData",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",10)':{tag:'(0019,"SIEMENS CT VA0  COAD",10)',vr:"DS",name:"DistanceSourceToSourceSideCollimator",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",11)':{tag:'(0019,"SIEMENS CT VA0  COAD",11)',vr:"DS",name:"DistanceSourceToDetectorSideCollimator",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",20)':{tag:'(0019,"SIEMENS CT VA0  COAD",20)',vr:"IS",name:"NumberOfPossibleChannels",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",21)':{tag:'(0019,"SIEMENS CT VA0  COAD",21)',vr:"IS",name:"MeanChannelNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",22)':{tag:'(0019,"SIEMENS CT VA0  COAD",22)',vr:"DS",name:"DetectorSpacing",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",23)':{tag:'(0019,"SIEMENS CT VA0  COAD",23)',vr:"DS",name:"DetectorCenter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",24)':{tag:'(0019,"SIEMENS CT VA0  COAD",24)',vr:"DS",name:"ReadingIntegrationTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",50)':{tag:'(0019,"SIEMENS CT VA0  COAD",50)',vr:"DS",name:"DetectorAlignment",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",52)':{tag:'(0019,"SIEMENS CT VA0  COAD",52)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",54)':{tag:'(0019,"SIEMENS CT VA0  COAD",54)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",60)':{tag:'(0019,"SIEMENS CT VA0  COAD",60)',vr:"DS",name:"FocusAlignment",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",65)':{tag:'(0019,"SIEMENS CT VA0  COAD",65)',vr:"UL",name:"FocalSpotDeflectionAmplitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",66)':{tag:'(0019,"SIEMENS CT VA0  COAD",66)',vr:"UL",name:"FocalSpotDeflectionPhase",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",67)':{tag:'(0019,"SIEMENS CT VA0  COAD",67)',vr:"UL",name:"FocalSpotDeflectionOffset",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",70)':{tag:'(0019,"SIEMENS CT VA0  COAD",70)',vr:"DS",name:"WaterScalingFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",71)':{tag:'(0019,"SIEMENS CT VA0  COAD",71)',vr:"DS",name:"InterpolationFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",80)':{tag:'(0019,"SIEMENS CT VA0  COAD",80)',vr:"LT",name:"PatientRegion",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",82)':{tag:'(0019,"SIEMENS CT VA0  COAD",82)',vr:"LT",name:"PatientPhaseOfLife",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",90)':{tag:'(0019,"SIEMENS CT VA0  COAD",90)',vr:"DS",name:"OsteoOffset",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",92)':{tag:'(0019,"SIEMENS CT VA0  COAD",92)',vr:"DS",name:"OsteoRegressionLineSlope",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",93)':{tag:'(0019,"SIEMENS CT VA0  COAD",93)',vr:"DS",name:"OsteoRegressionLineIntercept",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",94)':{tag:'(0019,"SIEMENS CT VA0  COAD",94)',vr:"DS",name:"OsteoStandardizationCode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",96)':{tag:'(0019,"SIEMENS CT VA0  COAD",96)',vr:"IS",name:"OsteoPhantomNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A3)':{tag:'(0019,"SIEMENS CT VA0  COAD",A3)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A4)':{tag:'(0019,"SIEMENS CT VA0  COAD",A4)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A5)':{tag:'(0019,"SIEMENS CT VA0  COAD",A5)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A6)':{tag:'(0019,"SIEMENS CT VA0  COAD",A6)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A7)':{tag:'(0019,"SIEMENS CT VA0  COAD",A7)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A8)':{tag:'(0019,"SIEMENS CT VA0  COAD",A8)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",A9)':{tag:'(0019,"SIEMENS CT VA0  COAD",A9)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AA)':{tag:'(0019,"SIEMENS CT VA0  COAD",AA)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AB)':{tag:'(0019,"SIEMENS CT VA0  COAD",AB)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AC)':{tag:'(0019,"SIEMENS CT VA0  COAD",AC)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AD)':{tag:'(0019,"SIEMENS CT VA0  COAD",AD)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AE)':{tag:'(0019,"SIEMENS CT VA0  COAD",AE)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",AF)':{tag:'(0019,"SIEMENS CT VA0  COAD",AF)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",B0)':{tag:'(0019,"SIEMENS CT VA0  COAD",B0)',vr:"DS",name:"FeedPerRotation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",BD)':{tag:'(0019,"SIEMENS CT VA0  COAD",BD)',vr:"IS",name:"PulmoTriggerLevel",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",BE)':{tag:'(0019,"SIEMENS CT VA0  COAD",BE)',vr:"DS",name:"ExpiratoricReserveVolume",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",BF)':{tag:'(0019,"SIEMENS CT VA0  COAD",BF)',vr:"DS",name:"VitalCapacity",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",C0)':{tag:'(0019,"SIEMENS CT VA0  COAD",C0)',vr:"DS",name:"PulmoWater",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",C1)':{tag:'(0019,"SIEMENS CT VA0  COAD",C1)',vr:"DS",name:"PulmoAir",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",C2)':{tag:'(0019,"SIEMENS CT VA0  COAD",C2)',vr:"DA",name:"PulmoDate",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  COAD",C3)':{tag:'(0019,"SIEMENS CT VA0  COAD",C3)',vr:"TM",name:"PulmoTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",10)':{tag:'(0019,"SIEMENS CT VA0  GEN",10)',vr:"DS",name:"SourceSideCollimatorAperture",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",11)':{tag:'(0019,"SIEMENS CT VA0  GEN",11)',vr:"DS",name:"DetectorSideCollimatorAperture",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",20)':{tag:'(0019,"SIEMENS CT VA0  GEN",20)',vr:"DS",name:"ExposureTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",21)':{tag:'(0019,"SIEMENS CT VA0  GEN",21)',vr:"DS",name:"ExposureCurrent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",25)':{tag:'(0019,"SIEMENS CT VA0  GEN",25)',vr:"DS",name:"KVPGeneratorPowerCurrent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",26)':{tag:'(0019,"SIEMENS CT VA0  GEN",26)',vr:"DS",name:"GeneratorVoltage",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",40)':{tag:'(0019,"SIEMENS CT VA0  GEN",40)',vr:"UL",name:"MasterControlMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",42)':{tag:'(0019,"SIEMENS CT VA0  GEN",42)',vr:"US",name:"ProcessingMask",vm:"5",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",44)':{tag:'(0019,"SIEMENS CT VA0  GEN",44)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",45)':{tag:'(0019,"SIEMENS CT VA0  GEN",45)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",62)':{tag:'(0019,"SIEMENS CT VA0  GEN",62)',vr:"IS",name:"NumberOfVirtuellChannels",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",70)':{tag:'(0019,"SIEMENS CT VA0  GEN",70)',vr:"IS",name:"NumberOfReadings",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",71)':{tag:'(0019,"SIEMENS CT VA0  GEN",71)',vr:"LT",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",74)':{tag:'(0019,"SIEMENS CT VA0  GEN",74)',vr:"IS",name:"NumberOfProjections",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",75)':{tag:'(0019,"SIEMENS CT VA0  GEN",75)',vr:"IS",name:"NumberOfBytes",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",80)':{tag:'(0019,"SIEMENS CT VA0  GEN",80)',vr:"LT",name:"ReconstructionAlgorithmSet",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",81)':{tag:'(0019,"SIEMENS CT VA0  GEN",81)',vr:"LT",name:"ReconstructionAlgorithmIndex",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",82)':{tag:'(0019,"SIEMENS CT VA0  GEN",82)',vr:"LT",name:"RegenerationSoftwareVersion",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS CT VA0  GEN",88)':{tag:'(0019,"SIEMENS CT VA0  GEN",88)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",10)':{tag:'(0021,"SIEMENS CT VA0  GEN",10)',vr:"IS",name:"RotationAngle",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",11)':{tag:'(0021,"SIEMENS CT VA0  GEN",11)',vr:"IS",name:"StartAngle",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",20)':{tag:'(0021,"SIEMENS CT VA0  GEN",20)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",30)':{tag:'(0021,"SIEMENS CT VA0  GEN",30)',vr:"IS",name:"TopogramTubePosition",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",32)':{tag:'(0021,"SIEMENS CT VA0  GEN",32)',vr:"DS",name:"LengthOfTopogram",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",34)':{tag:'(0021,"SIEMENS CT VA0  GEN",34)',vr:"DS",name:"TopogramCorrectionFactor",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",36)':{tag:'(0021,"SIEMENS CT VA0  GEN",36)',vr:"DS",name:"MaximumTablePosition",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",40)':{tag:'(0021,"SIEMENS CT VA0  GEN",40)',vr:"IS",name:"TableMoveDirectionCode",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",45)':{tag:'(0021,"SIEMENS CT VA0  GEN",45)',vr:"IS",name:"VOIStartRow",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",46)':{tag:'(0021,"SIEMENS CT VA0  GEN",46)',vr:"IS",name:"VOIStopRow",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",47)':{tag:'(0021,"SIEMENS CT VA0  GEN",47)',vr:"IS",name:"VOIStartColumn",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",48)':{tag:'(0021,"SIEMENS CT VA0  GEN",48)',vr:"IS",name:"VOIStopColumn",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",49)':{tag:'(0021,"SIEMENS CT VA0  GEN",49)',vr:"IS",name:"VOIStartSlice",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",4a)':{tag:'(0021,"SIEMENS CT VA0  GEN",4a)',vr:"IS",name:"VOIStopSlice",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",50)':{tag:'(0021,"SIEMENS CT VA0  GEN",50)',vr:"IS",name:"VectorStartRow",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",51)':{tag:'(0021,"SIEMENS CT VA0  GEN",51)',vr:"IS",name:"VectorRowStep",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",52)':{tag:'(0021,"SIEMENS CT VA0  GEN",52)',vr:"IS",name:"VectorStartColumn",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",53)':{tag:'(0021,"SIEMENS CT VA0  GEN",53)',vr:"IS",name:"VectorColumnStep",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",60)':{tag:'(0021,"SIEMENS CT VA0  GEN",60)',vr:"IS",name:"RangeTypeCode",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",62)':{tag:'(0021,"SIEMENS CT VA0  GEN",62)',vr:"IS",name:"ReferenceTypeCode",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",70)':{tag:'(0021,"SIEMENS CT VA0  GEN",70)',vr:"DS",name:"ObjectOrientation",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",72)':{tag:'(0021,"SIEMENS CT VA0  GEN",72)',vr:"DS",name:"LightOrientation",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",75)':{tag:'(0021,"SIEMENS CT VA0  GEN",75)',vr:"DS",name:"LightBrightness",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",76)':{tag:'(0021,"SIEMENS CT VA0  GEN",76)',vr:"DS",name:"LightContrast",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",7a)':{tag:'(0021,"SIEMENS CT VA0  GEN",7a)',vr:"IS",name:"OverlayThreshold",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",7b)':{tag:'(0021,"SIEMENS CT VA0  GEN",7b)',vr:"IS",name:"SurfaceThreshold",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",7c)':{tag:'(0021,"SIEMENS CT VA0  GEN",7c)',vr:"IS",name:"GreyScaleThreshold",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",a0)':{tag:'(0021,"SIEMENS CT VA0  GEN",a0)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",a2)':{tag:'(0021,"SIEMENS CT VA0  GEN",a2)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  GEN",a7)':{tag:'(0021,"SIEMENS CT VA0  GEN",a7)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",10)':{tag:'(0009,"SIEMENS CT VA0  IDE",10)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",30)':{tag:'(0009,"SIEMENS CT VA0  IDE",30)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",31)':{tag:'(0009,"SIEMENS CT VA0  IDE",31)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",32)':{tag:'(0009,"SIEMENS CT VA0  IDE",32)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",34)':{tag:'(0009,"SIEMENS CT VA0  IDE",34)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",40)':{tag:'(0009,"SIEMENS CT VA0  IDE",40)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",42)':{tag:'(0009,"SIEMENS CT VA0  IDE",42)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",50)':{tag:'(0009,"SIEMENS CT VA0  IDE",50)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  IDE",51)':{tag:'(0009,"SIEMENS CT VA0  IDE",51)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  ORI",20)':{tag:'(0009,"SIEMENS CT VA0  ORI",20)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS CT VA0  ORI",30)':{tag:'(0009,"SIEMENS CT VA0  ORI",30)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(6021,"SIEMENS CT VA0  OST",00)':{tag:'(6021,"SIEMENS CT VA0  OST",00)',vr:"LT",name:"OsteoContourComment",vm:"1",version:"PrivateTag"},'(6021,"SIEMENS CT VA0  OST",10)':{tag:'(6021,"SIEMENS CT VA0  OST",10)',vr:"US",name:"OsteoContourBuffer",vm:"256",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",10)':{tag:'(0021,"SIEMENS CT VA0  RAW",10)',vr:"UL",name:"CreationMask",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",20)':{tag:'(0021,"SIEMENS CT VA0  RAW",20)',vr:"UL",name:"EvaluationMask",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",30)':{tag:'(0021,"SIEMENS CT VA0  RAW",30)',vr:"US",name:"ExtendedProcessingMask",vm:"7",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",40)':{tag:'(0021,"SIEMENS CT VA0  RAW",40)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",41)':{tag:'(0021,"SIEMENS CT VA0  RAW",41)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",42)':{tag:'(0021,"SIEMENS CT VA0  RAW",42)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",43)':{tag:'(0021,"SIEMENS CT VA0  RAW",43)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",44)':{tag:'(0021,"SIEMENS CT VA0  RAW",44)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS CT VA0  RAW",50)':{tag:'(0021,"SIEMENS CT VA0  RAW",50)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS DICOM",10)':{tag:'(0009,"SIEMENS DICOM",10)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS DICOM",12)':{tag:'(0009,"SIEMENS DICOM",12)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",10)':{tag:'(0019,"SIEMENS DLR.01",10)',vr:"LT",name:"MeasurementMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",11)':{tag:'(0019,"SIEMENS DLR.01",11)',vr:"LT",name:"ImageType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",15)':{tag:'(0019,"SIEMENS DLR.01",15)',vr:"LT",name:"SoftwareVersion",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",20)':{tag:'(0019,"SIEMENS DLR.01",20)',vr:"LT",name:"MPMCode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",21)':{tag:'(0019,"SIEMENS DLR.01",21)',vr:"LT",name:"Latitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",22)':{tag:'(0019,"SIEMENS DLR.01",22)',vr:"LT",name:"Sensitivity",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",23)':{tag:'(0019,"SIEMENS DLR.01",23)',vr:"LT",name:"EDR",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",24)':{tag:'(0019,"SIEMENS DLR.01",24)',vr:"LT",name:"LFix",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",25)':{tag:'(0019,"SIEMENS DLR.01",25)',vr:"LT",name:"SFix",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",26)':{tag:'(0019,"SIEMENS DLR.01",26)',vr:"LT",name:"PresetMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",27)':{tag:'(0019,"SIEMENS DLR.01",27)',vr:"LT",name:"Region",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",28)':{tag:'(0019,"SIEMENS DLR.01",28)',vr:"LT",name:"Subregion",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",30)':{tag:'(0019,"SIEMENS DLR.01",30)',vr:"LT",name:"Orientation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",31)':{tag:'(0019,"SIEMENS DLR.01",31)',vr:"LT",name:"MarkOnFilm",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",32)':{tag:'(0019,"SIEMENS DLR.01",32)',vr:"LT",name:"RotationOnDRC",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",40)':{tag:'(0019,"SIEMENS DLR.01",40)',vr:"LT",name:"ReaderType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",41)':{tag:'(0019,"SIEMENS DLR.01",41)',vr:"LT",name:"SubModality",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",42)':{tag:'(0019,"SIEMENS DLR.01",42)',vr:"LT",name:"ReaderSerialNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",50)':{tag:'(0019,"SIEMENS DLR.01",50)',vr:"LT",name:"CassetteScale",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",51)':{tag:'(0019,"SIEMENS DLR.01",51)',vr:"LT",name:"CassetteMatrix",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",52)':{tag:'(0019,"SIEMENS DLR.01",52)',vr:"LT",name:"CassetteSubmatrix",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",53)':{tag:'(0019,"SIEMENS DLR.01",53)',vr:"LT",name:"Barcode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",60)':{tag:'(0019,"SIEMENS DLR.01",60)',vr:"LT",name:"ContrastType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",61)':{tag:'(0019,"SIEMENS DLR.01",61)',vr:"LT",name:"RotationAmount",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",62)':{tag:'(0019,"SIEMENS DLR.01",62)',vr:"LT",name:"RotationCenter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",63)':{tag:'(0019,"SIEMENS DLR.01",63)',vr:"LT",name:"DensityShift",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",64)':{tag:'(0019,"SIEMENS DLR.01",64)',vr:"US",name:"FrequencyRank",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",65)':{tag:'(0019,"SIEMENS DLR.01",65)',vr:"LT",name:"FrequencyEnhancement",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",66)':{tag:'(0019,"SIEMENS DLR.01",66)',vr:"LT",name:"FrequencyType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",67)':{tag:'(0019,"SIEMENS DLR.01",67)',vr:"LT",name:"KernelLength",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",68)':{tag:'(0019,"SIEMENS DLR.01",68)',vr:"UL",name:"KernelMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",69)':{tag:'(0019,"SIEMENS DLR.01",69)',vr:"UL",name:"ConvolutionMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",70)':{tag:'(0019,"SIEMENS DLR.01",70)',vr:"LT",name:"PLASource",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",71)':{tag:'(0019,"SIEMENS DLR.01",71)',vr:"LT",name:"PLADestination",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",75)':{tag:'(0019,"SIEMENS DLR.01",75)',vr:"LT",name:"UIDOriginalImage",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",76)':{tag:'(0019,"SIEMENS DLR.01",76)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",80)':{tag:'(0019,"SIEMENS DLR.01",80)',vr:"LT",name:"ReaderHeader",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",90)':{tag:'(0019,"SIEMENS DLR.01",90)',vr:"LT",name:"PLAOfSecondaryDestination",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",a0)':{tag:'(0019,"SIEMENS DLR.01",a0)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS DLR.01",a1)':{tag:'(0019,"SIEMENS DLR.01",a1)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0041,"SIEMENS DLR.01",10)':{tag:'(0041,"SIEMENS DLR.01",10)',vr:"US",name:"NumberOfHardcopies",vm:"1",version:"PrivateTag"},'(0041,"SIEMENS DLR.01",20)':{tag:'(0041,"SIEMENS DLR.01",20)',vr:"LT",name:"FilmFormat",vm:"1",version:"PrivateTag"},'(0041,"SIEMENS DLR.01",30)':{tag:'(0041,"SIEMENS DLR.01",30)',vr:"LT",name:"FilmSize",vm:"1",version:"PrivateTag"},'(0041,"SIEMENS DLR.01",31)':{tag:'(0041,"SIEMENS DLR.01",31)',vr:"LT",name:"FullFilmFormat",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",08)':{tag:'(0003,"SIEMENS ISI",08)',vr:"US",name:"ISICommandField",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",11)':{tag:'(0003,"SIEMENS ISI",11)',vr:"US",name:"AttachIDApplicationCode",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",12)':{tag:'(0003,"SIEMENS ISI",12)',vr:"UL",name:"AttachIDMessageCount",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",13)':{tag:'(0003,"SIEMENS ISI",13)',vr:"DA",name:"AttachIDDate",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",14)':{tag:'(0003,"SIEMENS ISI",14)',vr:"TM",name:"AttachIDTime",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",20)':{tag:'(0003,"SIEMENS ISI",20)',vr:"US",name:"MessageType",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",30)':{tag:'(0003,"SIEMENS ISI",30)',vr:"DA",name:"MaxWaitingDate",vm:"1",version:"PrivateTag"},'(0003,"SIEMENS ISI",31)':{tag:'(0003,"SIEMENS ISI",31)',vr:"TM",name:"MaxWaitingTime",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS ISI",01)':{tag:'(0009,"SIEMENS ISI",01)',vr:"UN",name:"RISPatientInfoIMGEF",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",03)':{tag:'(0011,"SIEMENS ISI",03)',vr:"LT",name:"PatientUID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",04)':{tag:'(0011,"SIEMENS ISI",04)',vr:"LT",name:"PatientID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",0a)':{tag:'(0011,"SIEMENS ISI",0a)',vr:"LT",name:"CaseID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",22)':{tag:'(0011,"SIEMENS ISI",22)',vr:"LT",name:"RequestID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",23)':{tag:'(0011,"SIEMENS ISI",23)',vr:"LT",name:"ExaminationUID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",a1)':{tag:'(0011,"SIEMENS ISI",a1)',vr:"DA",name:"PatientRegistrationDate",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",a2)':{tag:'(0011,"SIEMENS ISI",a2)',vr:"TM",name:"PatientRegistrationTime",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",b0)':{tag:'(0011,"SIEMENS ISI",b0)',vr:"LT",name:"PatientLastName",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",b2)':{tag:'(0011,"SIEMENS ISI",b2)',vr:"LT",name:"PatientFirstName",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",b4)':{tag:'(0011,"SIEMENS ISI",b4)',vr:"LT",name:"PatientHospitalStatus",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",bc)':{tag:'(0011,"SIEMENS ISI",bc)',vr:"TM",name:"CurrentLocationTime",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",c0)':{tag:'(0011,"SIEMENS ISI",c0)',vr:"LT",name:"PatientInsuranceStatus",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",d0)':{tag:'(0011,"SIEMENS ISI",d0)',vr:"LT",name:"PatientBillingType",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS ISI",d2)':{tag:'(0011,"SIEMENS ISI",d2)',vr:"LT",name:"PatientBillingAddress",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",12)':{tag:'(0031,"SIEMENS ISI",12)',vr:"LT",name:"ExaminationReason",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",30)':{tag:'(0031,"SIEMENS ISI",30)',vr:"DA",name:"RequestedDate",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",32)':{tag:'(0031,"SIEMENS ISI",32)',vr:"TM",name:"WorklistRequestStartTime",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",33)':{tag:'(0031,"SIEMENS ISI",33)',vr:"TM",name:"WorklistRequestEndTime",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",4a)':{tag:'(0031,"SIEMENS ISI",4a)',vr:"TM",name:"RequestedTime",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS ISI",80)':{tag:'(0031,"SIEMENS ISI",80)',vr:"LT",name:"RequestedLocation",vm:"1",version:"PrivateTag"},'(0055,"SIEMENS ISI",46)':{tag:'(0055,"SIEMENS ISI",46)',vr:"LT",name:"CurrentWard",vm:"1",version:"PrivateTag"},'(0193,"SIEMENS ISI",02)':{tag:'(0193,"SIEMENS ISI",02)',vr:"DS",name:"RISKey",vm:"1",version:"PrivateTag"},'(0307,"SIEMENS ISI",01)':{tag:'(0307,"SIEMENS ISI",01)',vr:"UN",name:"RISWorklistIMGEF",vm:"1",version:"PrivateTag"},'(0309,"SIEMENS ISI",01)':{tag:'(0309,"SIEMENS ISI",01)',vr:"UN",name:"RISReportIMGEF",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",01)':{tag:'(4009,"SIEMENS ISI",01)',vr:"LT",name:"ReportID",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",20)':{tag:'(4009,"SIEMENS ISI",20)',vr:"LT",name:"ReportStatus",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",30)':{tag:'(4009,"SIEMENS ISI",30)',vr:"DA",name:"ReportCreationDate",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",70)':{tag:'(4009,"SIEMENS ISI",70)',vr:"LT",name:"ReportApprovingPhysician",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",e0)':{tag:'(4009,"SIEMENS ISI",e0)',vr:"LT",name:"ReportText",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",e1)':{tag:'(4009,"SIEMENS ISI",e1)',vr:"LT",name:"ReportAuthor",vm:"1",version:"PrivateTag"},'(4009,"SIEMENS ISI",e3)':{tag:'(4009,"SIEMENS ISI",e3)',vr:"LT",name:"ReportingRadiologist",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",04)':{tag:'(0029,"SIEMENS MED DISPLAY",04)',vr:"LT",name:"PhotometricInterpretation",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",10)':{tag:'(0029,"SIEMENS MED DISPLAY",10)',vr:"US",name:"RowsOfSubmatrix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",11)':{tag:'(0029,"SIEMENS MED DISPLAY",11)',vr:"US",name:"ColumnsOfSubmatrix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",20)':{tag:'(0029,"SIEMENS MED DISPLAY",20)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",21)':{tag:'(0029,"SIEMENS MED DISPLAY",21)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",50)':{tag:'(0029,"SIEMENS MED DISPLAY",50)',vr:"US",name:"OriginOfSubmatrix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",99)':{tag:'(0029,"SIEMENS MED DISPLAY",99)',vr:"LT",name:"ShutterType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",a0)':{tag:'(0029,"SIEMENS MED DISPLAY",a0)',vr:"US",name:"RowsOfRectangularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",a1)':{tag:'(0029,"SIEMENS MED DISPLAY",a1)',vr:"US",name:"ColumnsOfRectangularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",a2)':{tag:'(0029,"SIEMENS MED DISPLAY",a2)',vr:"US",name:"OriginOfRectangularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",b0)':{tag:'(0029,"SIEMENS MED DISPLAY",b0)',vr:"US",name:"RadiusOfCircularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",b2)':{tag:'(0029,"SIEMENS MED DISPLAY",b2)',vr:"US",name:"OriginOfCircularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED DISPLAY",c1)':{tag:'(0029,"SIEMENS MED DISPLAY",c1)',vr:"US",name:"ContourOfIrregularShutter",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",10)':{tag:'(0029,"SIEMENS MED HG",10)',vr:"US",name:"ListOfGroupNumbers",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",15)':{tag:'(0029,"SIEMENS MED HG",15)',vr:"LT",name:"ListOfShadowOwnerCodes",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",20)':{tag:'(0029,"SIEMENS MED HG",20)',vr:"US",name:"ListOfElementNumbers",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",30)':{tag:'(0029,"SIEMENS MED HG",30)',vr:"US",name:"ListOfTotalDisplayLength",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",40)':{tag:'(0029,"SIEMENS MED HG",40)',vr:"LT",name:"ListOfDisplayPrefix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",50)':{tag:'(0029,"SIEMENS MED HG",50)',vr:"LT",name:"ListOfDisplayPostfix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",60)':{tag:'(0029,"SIEMENS MED HG",60)',vr:"US",name:"ListOfTextPosition",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED HG",70)':{tag:'(0029,"SIEMENS MED HG",70)',vr:"LT",name:"ListOfTextConcatenation",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",10)':{tag:'(0029,"SIEMENS MED MG",10)',vr:"US",name:"ListOfGroupNumbers",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",15)':{tag:'(0029,"SIEMENS MED MG",15)',vr:"LT",name:"ListOfShadowOwnerCodes",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",20)':{tag:'(0029,"SIEMENS MED MG",20)',vr:"US",name:"ListOfElementNumbers",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",30)':{tag:'(0029,"SIEMENS MED MG",30)',vr:"US",name:"ListOfTotalDisplayLength",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",40)':{tag:'(0029,"SIEMENS MED MG",40)',vr:"LT",name:"ListOfDisplayPrefix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",50)':{tag:'(0029,"SIEMENS MED MG",50)',vr:"LT",name:"ListOfDisplayPostfix",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",60)':{tag:'(0029,"SIEMENS MED MG",60)',vr:"US",name:"ListOfTextPosition",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MED MG",70)':{tag:'(0029,"SIEMENS MED MG",70)',vr:"LT",name:"ListOfTextConcatenation",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",10)':{tag:'(0009,"SIEMENS MED",10)',vr:"LO",name:"RecognitionCode",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",30)':{tag:'(0009,"SIEMENS MED",30)',vr:"UL",name:"ByteOffsetOfOriginalHeader",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",31)':{tag:'(0009,"SIEMENS MED",31)',vr:"UL",name:"LengthOfOriginalHeader",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",40)':{tag:'(0009,"SIEMENS MED",40)',vr:"UL",name:"ByteOffsetOfPixelmatrix",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",41)':{tag:'(0009,"SIEMENS MED",41)',vr:"UL",name:"LengthOfPixelmatrixInBytes",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",50)':{tag:'(0009,"SIEMENS MED",50)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",51)':{tag:'(0009,"SIEMENS MED",51)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",f5)':{tag:'(0009,"SIEMENS MED",f5)',vr:"LT",name:"PDMEFIDPlaceholder",vm:"1",version:"PrivateTag"},'(0009,"SIEMENS MED",f6)':{tag:'(0009,"SIEMENS MED",f6)',vr:"LT",name:"PDMDataObjectTypeExtension",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MED",10)':{tag:'(0021,"SIEMENS MED",10)',vr:"DS",name:"Zoom",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MED",11)':{tag:'(0021,"SIEMENS MED",11)',vr:"DS",name:"Target",vm:"2",version:"PrivateTag"},'(0021,"SIEMENS MED",12)':{tag:'(0021,"SIEMENS MED",12)',vr:"IS",name:"TubeAngle",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MED",20)':{tag:'(0021,"SIEMENS MED",20)',vr:"US",name:"ROIMask",vm:"1",version:"PrivateTag"},'(7001,"SIEMENS MED",10)':{tag:'(7001,"SIEMENS MED",10)',vr:"LT",name:"Dummy",vm:"1",version:"PrivateTag"},'(7003,"SIEMENS MED",10)':{tag:'(7003,"SIEMENS MED",10)',vr:"LT",name:"Header",vm:"1",version:"PrivateTag"},'(7005,"SIEMENS MED",10)':{tag:'(7005,"SIEMENS MED",10)',vr:"LT",name:"Dummy",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",08)':{tag:'(0029,"SIEMENS MEDCOM HEADER",08)',vr:"CS",name:"MedComHeaderType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",09)':{tag:'(0029,"SIEMENS MEDCOM HEADER",09)',vr:"LO",name:"MedComHeaderVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",10)':{tag:'(0029,"SIEMENS MEDCOM HEADER",10)',vr:"OB",name:"MedComHeaderInfo",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",20)':{tag:'(0029,"SIEMENS MEDCOM HEADER",20)',vr:"OB",name:"MedComHistoryInformation",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",31)':{tag:'(0029,"SIEMENS MEDCOM HEADER",31)',vr:"LO",name:"PMTFInformation1",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",32)':{tag:'(0029,"SIEMENS MEDCOM HEADER",32)',vr:"UL",name:"PMTFInformation2",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",33)':{tag:'(0029,"SIEMENS MEDCOM HEADER",33)',vr:"UL",name:"PMTFInformation3",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",34)':{tag:'(0029,"SIEMENS MEDCOM HEADER",34)',vr:"CS",name:"PMTFInformation4",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",35)':{tag:'(0029,"SIEMENS MEDCOM HEADER",35)',vr:"UL",name:"PMTFInformation5",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",40)':{tag:'(0029,"SIEMENS MEDCOM HEADER",40)',vr:"SQ",name:"ApplicationHeaderSequence",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",41)':{tag:'(0029,"SIEMENS MEDCOM HEADER",41)',vr:"CS",name:"ApplicationHeaderType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",42)':{tag:'(0029,"SIEMENS MEDCOM HEADER",42)',vr:"LO",name:"ApplicationHeaderID",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",43)':{tag:'(0029,"SIEMENS MEDCOM HEADER",43)',vr:"LO",name:"ApplicationHeaderVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",44)':{tag:'(0029,"SIEMENS MEDCOM HEADER",44)',vr:"OB",name:"ApplicationHeaderInfo",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",50)':{tag:'(0029,"SIEMENS MEDCOM HEADER",50)',vr:"LO",name:"WorkflowControlFlags",vm:"8",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",51)':{tag:'(0029,"SIEMENS MEDCOM HEADER",51)',vr:"CS",name:"ArchiveManagementFlagKeepOnline",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",52)':{tag:'(0029,"SIEMENS MEDCOM HEADER",52)',vr:"CS",name:"ArchiveManagementFlagDoNotArchive",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",53)':{tag:'(0029,"SIEMENS MEDCOM HEADER",53)',vr:"CS",name:"ImageLocationStatus",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",54)':{tag:'(0029,"SIEMENS MEDCOM HEADER",54)',vr:"DS",name:"EstimatedRetrieveTime",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",55)':{tag:'(0029,"SIEMENS MEDCOM HEADER",55)',vr:"DS",name:"DataSizeOfRetrievedImages",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",70)':{tag:'(0029,"SIEMENS MEDCOM HEADER",70)',vr:"SQ",name:"SiemensLinkSequence",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",71)':{tag:'(0029,"SIEMENS MEDCOM HEADER",71)',vr:"AT",name:"ReferencedTag",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",72)':{tag:'(0029,"SIEMENS MEDCOM HEADER",72)',vr:"CS",name:"ReferencedTagType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",73)':{tag:'(0029,"SIEMENS MEDCOM HEADER",73)',vr:"UL",name:"ReferencedValueLength",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",74)':{tag:'(0029,"SIEMENS MEDCOM HEADER",74)',vr:"CS",name:"ReferencedObjectDeviceType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",75)':{tag:'(0029,"SIEMENS MEDCOM HEADER",75)',vr:"OB",name:"ReferencedObjectDeviceLocation",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER",76)':{tag:'(0029,"SIEMENS MEDCOM HEADER",76)',vr:"OB",name:"ReferencedObjectDeviceID",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM HEADER2",60)':{tag:'(0029,"SIEMENS MEDCOM HEADER2",60)',vr:"LO",name:"SeriesWorkflowStatus",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM OOG",08)':{tag:'(0029,"SIEMENS MEDCOM OOG",08)',vr:"CS",name:"MEDCOMOOGType",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM OOG",09)':{tag:'(0029,"SIEMENS MEDCOM OOG",09)',vr:"LO",name:"MEDCOMOOGVersion",vm:"1",version:"PrivateTag"},'(0029,"SIEMENS MEDCOM OOG",10)':{tag:'(0029,"SIEMENS MEDCOM OOG",10)',vr:"OB",name:"MEDCOMOOGInfo",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",12)':{tag:'(0019,"SIEMENS MR VA0  COAD",12)',vr:"DS",name:"MagneticFieldStrength",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",14)':{tag:'(0019,"SIEMENS MR VA0  COAD",14)',vr:"DS",name:"ADCVoltage",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",16)':{tag:'(0019,"SIEMENS MR VA0  COAD",16)',vr:"DS",name:"ADCOffset",vm:"2",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",20)':{tag:'(0019,"SIEMENS MR VA0  COAD",20)',vr:"DS",name:"TransmitterAmplitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",21)':{tag:'(0019,"SIEMENS MR VA0  COAD",21)',vr:"IS",name:"NumberOfTransmitterAmplitudes",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",22)':{tag:'(0019,"SIEMENS MR VA0  COAD",22)',vr:"DS",name:"TransmitterAttenuator",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",24)':{tag:'(0019,"SIEMENS MR VA0  COAD",24)',vr:"DS",name:"TransmitterCalibration",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",26)':{tag:'(0019,"SIEMENS MR VA0  COAD",26)',vr:"DS",name:"TransmitterReference",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",50)':{tag:'(0019,"SIEMENS MR VA0  COAD",50)',vr:"DS",name:"ReceiverTotalGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",51)':{tag:'(0019,"SIEMENS MR VA0  COAD",51)',vr:"DS",name:"ReceiverAmplifierGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",52)':{tag:'(0019,"SIEMENS MR VA0  COAD",52)',vr:"DS",name:"ReceiverPreamplifierGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",54)':{tag:'(0019,"SIEMENS MR VA0  COAD",54)',vr:"DS",name:"ReceiverCableAttenuation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",55)':{tag:'(0019,"SIEMENS MR VA0  COAD",55)',vr:"DS",name:"ReceiverReferenceGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",56)':{tag:'(0019,"SIEMENS MR VA0  COAD",56)',vr:"DS",name:"ReceiverFilterFrequency",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",60)':{tag:'(0019,"SIEMENS MR VA0  COAD",60)',vr:"DS",name:"ReconstructionScaleFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",62)':{tag:'(0019,"SIEMENS MR VA0  COAD",62)',vr:"DS",name:"ReferenceScaleFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",70)':{tag:'(0019,"SIEMENS MR VA0  COAD",70)',vr:"DS",name:"PhaseGradientAmplitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",71)':{tag:'(0019,"SIEMENS MR VA0  COAD",71)',vr:"DS",name:"ReadoutGradientAmplitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",72)':{tag:'(0019,"SIEMENS MR VA0  COAD",72)',vr:"DS",name:"SelectionGradientAmplitude",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",80)':{tag:'(0019,"SIEMENS MR VA0  COAD",80)',vr:"DS",name:"GradientDelayTime",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",82)':{tag:'(0019,"SIEMENS MR VA0  COAD",82)',vr:"DS",name:"TotalGradientDelayTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",90)':{tag:'(0019,"SIEMENS MR VA0  COAD",90)',vr:"LT",name:"SensitivityCorrectionLabel",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",91)':{tag:'(0019,"SIEMENS MR VA0  COAD",91)',vr:"DS",name:"SaturationPhaseEncodingVectorCoronalComponent",vm:"6",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",92)':{tag:'(0019,"SIEMENS MR VA0  COAD",92)',vr:"DS",name:"SaturationReadoutVectorCoronalComponent",vm:"6",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",a0)':{tag:'(0019,"SIEMENS MR VA0  COAD",a0)',vr:"US",name:"RFWatchdogMask",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",a1)':{tag:'(0019,"SIEMENS MR VA0  COAD",a1)',vr:"DS",name:"EPIReconstructionSlope",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",a2)':{tag:'(0019,"SIEMENS MR VA0  COAD",a2)',vr:"DS",name:"RFPowerErrorIndicator",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",a5)':{tag:'(0019,"SIEMENS MR VA0  COAD",a5)',vr:"DS",name:"SpecificAbsorptionRateWholeBody",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",a6)':{tag:'(0019,"SIEMENS MR VA0  COAD",a6)',vr:"DS",name:"SpecificEnergyDose",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",b0)':{tag:'(0019,"SIEMENS MR VA0  COAD",b0)',vr:"UL",name:"AdjustmentStatusMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",c1)':{tag:'(0019,"SIEMENS MR VA0  COAD",c1)',vr:"DS",name:"EPICapacity",vm:"6",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",c2)':{tag:'(0019,"SIEMENS MR VA0  COAD",c2)',vr:"DS",name:"EPIInductance",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",c3)':{tag:'(0019,"SIEMENS MR VA0  COAD",c3)',vr:"IS",name:"EPISwitchConfigurationCode",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",c4)':{tag:'(0019,"SIEMENS MR VA0  COAD",c4)',vr:"IS",name:"EPISwitchHardwareCode",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",c5)':{tag:'(0019,"SIEMENS MR VA0  COAD",c5)',vr:"DS",name:"EPISwitchDelayTime",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d1)':{tag:'(0019,"SIEMENS MR VA0  COAD",d1)',vr:"DS",name:"FlowSensitivity",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d2)':{tag:'(0019,"SIEMENS MR VA0  COAD",d2)',vr:"LT",name:"CalculationSubmode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d3)':{tag:'(0019,"SIEMENS MR VA0  COAD",d3)',vr:"DS",name:"FieldOfViewRatio",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d4)':{tag:'(0019,"SIEMENS MR VA0  COAD",d4)',vr:"IS",name:"BaseRawMatrixSize",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d5)':{tag:'(0019,"SIEMENS MR VA0  COAD",d5)',vr:"IS",name:"2DOversamplingLines",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d6)':{tag:'(0019,"SIEMENS MR VA0  COAD",d6)',vr:"IS",name:"3DPhaseOversamplingPartitions",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d7)':{tag:'(0019,"SIEMENS MR VA0  COAD",d7)',vr:"IS",name:"EchoLinePosition",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d8)':{tag:'(0019,"SIEMENS MR VA0  COAD",d8)',vr:"IS",name:"EchoColumnPosition",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",d9)':{tag:'(0019,"SIEMENS MR VA0  COAD",d9)',vr:"IS",name:"LinesPerSegment",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  COAD",da)':{tag:'(0019,"SIEMENS MR VA0  COAD",da)',vr:"LT",name:"PhaseCodingDirection",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",10)':{tag:'(0019,"SIEMENS MR VA0  GEN",10)',vr:"DS",name:"TotalMeasurementTimeNominal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",11)':{tag:'(0019,"SIEMENS MR VA0  GEN",11)',vr:"DS",name:"TotalMeasurementTimeCurrent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",12)':{tag:'(0019,"SIEMENS MR VA0  GEN",12)',vr:"DS",name:"StartDelayTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",13)':{tag:'(0019,"SIEMENS MR VA0  GEN",13)',vr:"DS",name:"DwellTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",14)':{tag:'(0019,"SIEMENS MR VA0  GEN",14)',vr:"IS",name:"NumberOfPhases",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",16)':{tag:'(0019,"SIEMENS MR VA0  GEN",16)',vr:"UL",name:"SequenceControlMask",vm:"2",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",18)':{tag:'(0019,"SIEMENS MR VA0  GEN",18)',vr:"UL",name:"MeasurementStatusMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",20)':{tag:'(0019,"SIEMENS MR VA0  GEN",20)',vr:"IS",name:"NumberOfFourierLinesNominal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",21)':{tag:'(0019,"SIEMENS MR VA0  GEN",21)',vr:"IS",name:"NumberOfFourierLinesCurrent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",26)':{tag:'(0019,"SIEMENS MR VA0  GEN",26)',vr:"IS",name:"NumberOfFourierLinesAfterZero",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",28)':{tag:'(0019,"SIEMENS MR VA0  GEN",28)',vr:"IS",name:"FirstMeasuredFourierLine",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",30)':{tag:'(0019,"SIEMENS MR VA0  GEN",30)',vr:"IS",name:"AcquisitionColumns",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",31)':{tag:'(0019,"SIEMENS MR VA0  GEN",31)',vr:"IS",name:"ReconstructionColumns",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",40)':{tag:'(0019,"SIEMENS MR VA0  GEN",40)',vr:"IS",name:"ArrayCoilElementNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",41)':{tag:'(0019,"SIEMENS MR VA0  GEN",41)',vr:"UL",name:"ArrayCoilElementSelectMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",42)':{tag:'(0019,"SIEMENS MR VA0  GEN",42)',vr:"UL",name:"ArrayCoilElementDataMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",43)':{tag:'(0019,"SIEMENS MR VA0  GEN",43)',vr:"IS",name:"ArrayCoilElementToADCConnect",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",44)':{tag:'(0019,"SIEMENS MR VA0  GEN",44)',vr:"DS",name:"ArrayCoilElementNoiseLevel",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",45)':{tag:'(0019,"SIEMENS MR VA0  GEN",45)',vr:"IS",name:"ArrayCoilADCPairNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",46)':{tag:'(0019,"SIEMENS MR VA0  GEN",46)',vr:"UL",name:"ArrayCoilCombinationMask",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",50)':{tag:'(0019,"SIEMENS MR VA0  GEN",50)',vr:"IS",name:"NumberOfAverages",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",60)':{tag:'(0019,"SIEMENS MR VA0  GEN",60)',vr:"DS",name:"FlipAngle",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",70)':{tag:'(0019,"SIEMENS MR VA0  GEN",70)',vr:"IS",name:"NumberOfPrescans",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",81)':{tag:'(0019,"SIEMENS MR VA0  GEN",81)',vr:"LT",name:"FilterTypeForRawData",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",82)':{tag:'(0019,"SIEMENS MR VA0  GEN",82)',vr:"DS",name:"FilterParameterForRawData",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",83)':{tag:'(0019,"SIEMENS MR VA0  GEN",83)',vr:"LT",name:"FilterTypeForImageData",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",84)':{tag:'(0019,"SIEMENS MR VA0  GEN",84)',vr:"DS",name:"FilterParameterForImageData",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",85)':{tag:'(0019,"SIEMENS MR VA0  GEN",85)',vr:"LT",name:"FilterTypeForPhaseCorrection",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",86)':{tag:'(0019,"SIEMENS MR VA0  GEN",86)',vr:"DS",name:"FilterParameterForPhaseCorrection",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",87)':{tag:'(0019,"SIEMENS MR VA0  GEN",87)',vr:"LT",name:"NormalizationFilterTypeForImageData",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",88)':{tag:'(0019,"SIEMENS MR VA0  GEN",88)',vr:"DS",name:"NormalizationFilterParameterForImageData",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",90)':{tag:'(0019,"SIEMENS MR VA0  GEN",90)',vr:"IS",name:"NumberOfSaturationRegions",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",91)':{tag:'(0019,"SIEMENS MR VA0  GEN",91)',vr:"DS",name:"SaturationPhaseEncodingVectorSagittalComponent",vm:"6",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",92)':{tag:'(0019,"SIEMENS MR VA0  GEN",92)',vr:"DS",name:"SaturationReadoutVectorSagittalComponent",vm:"6",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",93)':{tag:'(0019,"SIEMENS MR VA0  GEN",93)',vr:"DS",name:"EPIStimulationMonitorMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",94)':{tag:'(0019,"SIEMENS MR VA0  GEN",94)',vr:"DS",name:"ImageRotationAngle",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",96)':{tag:'(0019,"SIEMENS MR VA0  GEN",96)',vr:"UL",name:"CoilIDMask",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",97)':{tag:'(0019,"SIEMENS MR VA0  GEN",97)',vr:"UL",name:"CoilClassMask",vm:"2",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",98)':{tag:'(0019,"SIEMENS MR VA0  GEN",98)',vr:"DS",name:"CoilPosition",vm:"3",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",a0)':{tag:'(0019,"SIEMENS MR VA0  GEN",a0)',vr:"DS",name:"EPIReconstructionPhase",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS MR VA0  GEN",a1)':{tag:'(0019,"SIEMENS MR VA0  GEN",a1)',vr:"DS",name:"EPIReconstructionSlope",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",20)':{tag:'(0021,"SIEMENS MR VA0  GEN",20)',vr:"IS",name:"PhaseCorrectionRowsSequence",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",21)':{tag:'(0021,"SIEMENS MR VA0  GEN",21)',vr:"IS",name:"PhaseCorrectionColumnsSequence",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",22)':{tag:'(0021,"SIEMENS MR VA0  GEN",22)',vr:"IS",name:"PhaseCorrectionRowsReconstruction",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",24)':{tag:'(0021,"SIEMENS MR VA0  GEN",24)',vr:"IS",name:"PhaseCorrectionColumnsReconstruction",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",30)':{tag:'(0021,"SIEMENS MR VA0  GEN",30)',vr:"IS",name:"NumberOf3DRawPartitionsNominal",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",31)':{tag:'(0021,"SIEMENS MR VA0  GEN",31)',vr:"IS",name:"NumberOf3DRawPartitionsCurrent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",34)':{tag:'(0021,"SIEMENS MR VA0  GEN",34)',vr:"IS",name:"NumberOf3DImagePartitions",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",36)':{tag:'(0021,"SIEMENS MR VA0  GEN",36)',vr:"IS",name:"Actual3DImagePartitionNumber",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",39)':{tag:'(0021,"SIEMENS MR VA0  GEN",39)',vr:"DS",name:"SlabThickness",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",40)':{tag:'(0021,"SIEMENS MR VA0  GEN",40)',vr:"IS",name:"NumberOfSlicesNominal",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",41)':{tag:'(0021,"SIEMENS MR VA0  GEN",41)',vr:"IS",name:"NumberOfSlicesCurrent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",42)':{tag:'(0021,"SIEMENS MR VA0  GEN",42)',vr:"IS",name:"CurrentSliceNumber",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",43)':{tag:'(0021,"SIEMENS MR VA0  GEN",43)',vr:"IS",name:"CurrentGroupNumber",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",44)':{tag:'(0021,"SIEMENS MR VA0  GEN",44)',vr:"DS",name:"CurrentSliceDistanceFactor",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",45)':{tag:'(0021,"SIEMENS MR VA0  GEN",45)',vr:"IS",name:"MIPStartRow",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",46)':{tag:'(0021,"SIEMENS MR VA0  GEN",46)',vr:"IS",name:"MIPStopRow",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",47)':{tag:'(0021,"SIEMENS MR VA0  GEN",47)',vr:"IS",name:"MIPStartColumn",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",48)':{tag:'(0021,"SIEMENS MR VA0  GEN",48)',vr:"IS",name:"MIPStartColumn",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",49)':{tag:'(0021,"SIEMENS MR VA0  GEN",49)',vr:"IS",name:"MIPStartSlice Name=",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",4a)':{tag:'(0021,"SIEMENS MR VA0  GEN",4a)',vr:"IS",name:"MIPStartSlice",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",4f)':{tag:'(0021,"SIEMENS MR VA0  GEN",4f)',vr:"LT",name:"OrderofSlices",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",50)':{tag:'(0021,"SIEMENS MR VA0  GEN",50)',vr:"US",name:"SignalMask",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",52)':{tag:'(0021,"SIEMENS MR VA0  GEN",52)',vr:"DS",name:"DelayAfterTrigger",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",53)':{tag:'(0021,"SIEMENS MR VA0  GEN",53)',vr:"IS",name:"RRInterval",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",54)':{tag:'(0021,"SIEMENS MR VA0  GEN",54)',vr:"DS",name:"NumberOfTriggerPulses",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",56)':{tag:'(0021,"SIEMENS MR VA0  GEN",56)',vr:"DS",name:"RepetitionTimeEffective",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",57)':{tag:'(0021,"SIEMENS MR VA0  GEN",57)',vr:"LT",name:"GatePhase",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",58)':{tag:'(0021,"SIEMENS MR VA0  GEN",58)',vr:"DS",name:"GateThreshold",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",59)':{tag:'(0021,"SIEMENS MR VA0  GEN",59)',vr:"DS",name:"GatedRatio",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",60)':{tag:'(0021,"SIEMENS MR VA0  GEN",60)',vr:"IS",name:"NumberOfInterpolatedImages",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",70)':{tag:'(0021,"SIEMENS MR VA0  GEN",70)',vr:"IS",name:"NumberOfEchoes",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",72)':{tag:'(0021,"SIEMENS MR VA0  GEN",72)',vr:"DS",name:"SecondEchoTime",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",73)':{tag:'(0021,"SIEMENS MR VA0  GEN",73)',vr:"DS",name:"SecondRepetitionTime",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",80)':{tag:'(0021,"SIEMENS MR VA0  GEN",80)',vr:"IS",name:"CardiacCode",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",91)':{tag:'(0021,"SIEMENS MR VA0  GEN",91)',vr:"DS",name:"SaturationPhaseEncodingVectorTransverseComponent",vm:"6",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",92)':{tag:'(0021,"SIEMENS MR VA0  GEN",92)',vr:"DS",name:"SaturationReadoutVectorTransverseComponent",vm:"6",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",93)':{tag:'(0021,"SIEMENS MR VA0  GEN",93)',vr:"DS",name:"EPIChangeValueOfMagnitude",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",94)':{tag:'(0021,"SIEMENS MR VA0  GEN",94)',vr:"DS",name:"EPIChangeValueOfXComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",95)':{tag:'(0021,"SIEMENS MR VA0  GEN",95)',vr:"DS",name:"EPIChangeValueOfYComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  GEN",96)':{tag:'(0021,"SIEMENS MR VA0  GEN",96)',vr:"DS",name:"EPIChangeValueOfZComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",00)':{tag:'(0021,"SIEMENS MR VA0  RAW",00)',vr:"LT",name:"SequenceType",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",01)':{tag:'(0021,"SIEMENS MR VA0  RAW",01)',vr:"IS",name:"VectorSizeOriginal",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",02)':{tag:'(0021,"SIEMENS MR VA0  RAW",02)',vr:"IS",name:"VectorSizeExtended",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",03)':{tag:'(0021,"SIEMENS MR VA0  RAW",03)',vr:"DS",name:"AcquiredSpectralRange",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",04)':{tag:'(0021,"SIEMENS MR VA0  RAW",04)',vr:"DS",name:"VOIPosition",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",05)':{tag:'(0021,"SIEMENS MR VA0  RAW",05)',vr:"DS",name:"VOISize",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",06)':{tag:'(0021,"SIEMENS MR VA0  RAW",06)',vr:"IS",name:"CSIMatrixSizeOriginal",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",07)':{tag:'(0021,"SIEMENS MR VA0  RAW",07)',vr:"IS",name:"CSIMatrixSizeExtended",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",08)':{tag:'(0021,"SIEMENS MR VA0  RAW",08)',vr:"DS",name:"SpatialGridShift",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",09)':{tag:'(0021,"SIEMENS MR VA0  RAW",09)',vr:"DS",name:"SignalLimitsMinimum",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",10)':{tag:'(0021,"SIEMENS MR VA0  RAW",10)',vr:"DS",name:"SignalLimitsMaximum",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",11)':{tag:'(0021,"SIEMENS MR VA0  RAW",11)',vr:"DS",name:"SpecInfoMask",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",12)':{tag:'(0021,"SIEMENS MR VA0  RAW",12)',vr:"DS",name:"EPITimeRateOfChangeOfMagnitude",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",13)':{tag:'(0021,"SIEMENS MR VA0  RAW",13)',vr:"DS",name:"EPITimeRateOfChangeOfXComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",14)':{tag:'(0021,"SIEMENS MR VA0  RAW",14)',vr:"DS",name:"EPITimeRateOfChangeOfYComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",15)':{tag:'(0021,"SIEMENS MR VA0  RAW",15)',vr:"DS",name:"EPITimeRateOfChangeOfZComponent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",16)':{tag:'(0021,"SIEMENS MR VA0  RAW",16)',vr:"DS",name:"EPITimeRateOfChangeLegalLimit1",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",17)':{tag:'(0021,"SIEMENS MR VA0  RAW",17)',vr:"DS",name:"EPIOperationModeFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",18)':{tag:'(0021,"SIEMENS MR VA0  RAW",18)',vr:"DS",name:"EPIFieldCalculationSafetyFactor",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",19)':{tag:'(0021,"SIEMENS MR VA0  RAW",19)',vr:"DS",name:"EPILegalLimit1OfChangeValue",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",20)':{tag:'(0021,"SIEMENS MR VA0  RAW",20)',vr:"DS",name:"EPILegalLimit2OfChangeValue",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",21)':{tag:'(0021,"SIEMENS MR VA0  RAW",21)',vr:"DS",name:"EPIRiseTime",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",30)':{tag:'(0021,"SIEMENS MR VA0  RAW",30)',vr:"DS",name:"ArrayCoilADCOffset",vm:"16",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",31)':{tag:'(0021,"SIEMENS MR VA0  RAW",31)',vr:"DS",name:"ArrayCoilPreamplifierGain",vm:"16",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",50)':{tag:'(0021,"SIEMENS MR VA0  RAW",50)',vr:"LT",name:"SaturationType",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",51)':{tag:'(0021,"SIEMENS MR VA0  RAW",51)',vr:"DS",name:"SaturationNormalVector",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",52)':{tag:'(0021,"SIEMENS MR VA0  RAW",52)',vr:"DS",name:"SaturationPositionVector",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",53)':{tag:'(0021,"SIEMENS MR VA0  RAW",53)',vr:"DS",name:"SaturationThickness",vm:"6",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",54)':{tag:'(0021,"SIEMENS MR VA0  RAW",54)',vr:"DS",name:"SaturationWidth",vm:"6",version:"PrivateTag"},'(0021,"SIEMENS MR VA0  RAW",55)':{tag:'(0021,"SIEMENS MR VA0  RAW",55)',vr:"DS",name:"SaturationDistance",vm:"6",version:"PrivateTag"},'(7fe3,"SIEMENS NUMARIS II",00)':{tag:'(7fe3,"SIEMENS NUMARIS II",00)',vr:"LT",name:"ImageGraphicsFormatCode",vm:"1",version:"PrivateTag"},'(7fe3,"SIEMENS NUMARIS II",10)':{tag:'(7fe3,"SIEMENS NUMARIS II",10)',vr:"OB",name:"ImageGraphics",vm:"1",version:"PrivateTag"},'(7fe3,"SIEMENS NUMARIS II",20)':{tag:'(7fe3,"SIEMENS NUMARIS II",20)',vr:"OB",name:"ImageGraphicsDummy",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",20)':{tag:'(0011,"SIEMENS RA GEN",20)',vr:"SL",name:"FluoroTimer",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",25)':{tag:'(0011,"SIEMENS RA GEN",25)',vr:"SL",name:"PtopDoseAreaProduct",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",26)':{tag:'(0011,"SIEMENS RA GEN",26)',vr:"SL",name:"PtopTotalSkinDose",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",30)':{tag:'(0011,"SIEMENS RA GEN",30)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",35)':{tag:'(0011,"SIEMENS RA GEN",35)',vr:"LO",name:"PatientInitialPuckCounter",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA GEN",40)':{tag:'(0011,"SIEMENS RA GEN",40)',vr:"SS",name:"SPIDataObjectType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",15)':{tag:'(0019,"SIEMENS RA GEN",15)',vr:"LO",name:"AcquiredPlane",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",1f)':{tag:'(0019,"SIEMENS RA GEN",1f)',vr:"SS",name:"DefaultTableIsoCenterHeight",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",20)':{tag:'(0019,"SIEMENS RA GEN",20)',vr:"SL",name:"SceneFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",22)':{tag:'(0019,"SIEMENS RA GEN",22)',vr:"SL",name:"RefPhotofileFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",24)':{tag:'(0019,"SIEMENS RA GEN",24)',vr:"LO",name:"SceneName",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",26)':{tag:'(0019,"SIEMENS RA GEN",26)',vr:"SS",name:"AcquisitionIndex",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",28)':{tag:'(0019,"SIEMENS RA GEN",28)',vr:"SS",name:"MixedPulseMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",2a)':{tag:'(0019,"SIEMENS RA GEN",2a)',vr:"SS",name:"NoOfPositions",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",2c)':{tag:'(0019,"SIEMENS RA GEN",2c)',vr:"SS",name:"NoOfPhases",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",2e)':{tag:'(0019,"SIEMENS RA GEN",2e)',vr:"SS",name:"FrameRateForPositions",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",30)':{tag:'(0019,"SIEMENS RA GEN",30)',vr:"SS",name:"NoOfFramesForPositions",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",32)':{tag:'(0019,"SIEMENS RA GEN",32)',vr:"SS",name:"SteppingDirection",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",34)':{tag:'(0019,"SIEMENS RA GEN",34)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",36)':{tag:'(0019,"SIEMENS RA GEN",36)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",38)':{tag:'(0019,"SIEMENS RA GEN",38)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",3a)':{tag:'(0019,"SIEMENS RA GEN",3a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",3c)':{tag:'(0019,"SIEMENS RA GEN",3c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",3e)':{tag:'(0019,"SIEMENS RA GEN",3e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",40)':{tag:'(0019,"SIEMENS RA GEN",40)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",42)':{tag:'(0019,"SIEMENS RA GEN",42)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",44)':{tag:'(0019,"SIEMENS RA GEN",44)',vr:"SS",name:"ImageTransferDelay",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",46)':{tag:'(0019,"SIEMENS RA GEN",46)',vr:"SL",name:"InversFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",48)':{tag:'(0019,"SIEMENS RA GEN",48)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",4a)':{tag:'(0019,"SIEMENS RA GEN",4a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",4c)':{tag:'(0019,"SIEMENS RA GEN",4c)',vr:"SS",name:"BlankingCircleDiameter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",50)':{tag:'(0019,"SIEMENS RA GEN",50)',vr:"SL",name:"StandDataValid",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",52)':{tag:'(0019,"SIEMENS RA GEN",52)',vr:"SS",name:"TableTilt",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",54)':{tag:'(0019,"SIEMENS RA GEN",54)',vr:"SS",name:"TableAxisRotation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",56)':{tag:'(0019,"SIEMENS RA GEN",56)',vr:"SS",name:"TableLongitudalPosition",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",58)':{tag:'(0019,"SIEMENS RA GEN",58)',vr:"SS",name:"TableSideOffset",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",5a)':{tag:'(0019,"SIEMENS RA GEN",5a)',vr:"SS",name:"TableIsoCenterHeight",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",5c)':{tag:'(0019,"SIEMENS RA GEN",5c)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",5e)':{tag:'(0019,"SIEMENS RA GEN",5e)',vr:"SL",name:"CollimationDataValid",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",60)':{tag:'(0019,"SIEMENS RA GEN",60)',vr:"SL",name:"PeriSequenceNo",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",62)':{tag:'(0019,"SIEMENS RA GEN",62)',vr:"SL",name:"PeriTotalScenes",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",64)':{tag:'(0019,"SIEMENS RA GEN",64)',vr:"SL",name:"PeriOverlapTop",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",66)':{tag:'(0019,"SIEMENS RA GEN",66)',vr:"SL",name:"PeriOverlapBottom",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",68)':{tag:'(0019,"SIEMENS RA GEN",68)',vr:"SL",name:"RawImageNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",6a)':{tag:'(0019,"SIEMENS RA GEN",6a)',vr:"SL",name:"XRayDataValid",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",70)':{tag:'(0019,"SIEMENS RA GEN",70)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",72)':{tag:'(0019,"SIEMENS RA GEN",72)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",74)':{tag:'(0019,"SIEMENS RA GEN",74)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",76)':{tag:'(0019,"SIEMENS RA GEN",76)',vr:"SL",name:"FillingAverageFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",78)':{tag:'(0019,"SIEMENS RA GEN",78)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",7a)':{tag:'(0019,"SIEMENS RA GEN",7a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",7c)':{tag:'(0019,"SIEMENS RA GEN",7c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",7e)':{tag:'(0019,"SIEMENS RA GEN",7e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",80)':{tag:'(0019,"SIEMENS RA GEN",80)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",82)':{tag:'(0019,"SIEMENS RA GEN",82)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",84)':{tag:'(0019,"SIEMENS RA GEN",84)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",86)':{tag:'(0019,"SIEMENS RA GEN",86)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",88)':{tag:'(0019,"SIEMENS RA GEN",88)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",8a)':{tag:'(0019,"SIEMENS RA GEN",8a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",8c)':{tag:'(0019,"SIEMENS RA GEN",8c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",8e)':{tag:'(0019,"SIEMENS RA GEN",8e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",92)':{tag:'(0019,"SIEMENS RA GEN",92)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",94)':{tag:'(0019,"SIEMENS RA GEN",94)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",96)':{tag:'(0019,"SIEMENS RA GEN",96)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",98)':{tag:'(0019,"SIEMENS RA GEN",98)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",9a)':{tag:'(0019,"SIEMENS RA GEN",9a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",9c)':{tag:'(0019,"SIEMENS RA GEN",9c)',vr:"SL",name:"IntensifierLevelCalibrationFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",9e)':{tag:'(0019,"SIEMENS RA GEN",9e)',vr:"SL",name:"NativeReviewFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a2)':{tag:'(0019,"SIEMENS RA GEN",a2)',vr:"SL",name:"SceneNumber",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a4)':{tag:'(0019,"SIEMENS RA GEN",a4)',vr:"SS",name:"AcquisitionMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a5)':{tag:'(0019,"SIEMENS RA GEN",a5)',vr:"SS",name:"AcquisitonFrameRate",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a6)':{tag:'(0019,"SIEMENS RA GEN",a6)',vr:"SL",name:"ECGFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a7)':{tag:'(0019,"SIEMENS RA GEN",a7)',vr:"SL",name:"AdditionalSceneData",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a8)':{tag:'(0019,"SIEMENS RA GEN",a8)',vr:"SL",name:"FileCopyFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",a9)':{tag:'(0019,"SIEMENS RA GEN",a9)',vr:"SL",name:"PhlebovisionFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",aa)':{tag:'(0019,"SIEMENS RA GEN",aa)',vr:"SL",name:"Co2Flag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",ab)':{tag:'(0019,"SIEMENS RA GEN",ab)',vr:"SS",name:"MaxSpeed",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",ac)':{tag:'(0019,"SIEMENS RA GEN",ac)',vr:"SS",name:"StepWidth",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",ad)':{tag:'(0019,"SIEMENS RA GEN",ad)',vr:"SL",name:"DigitalAcquisitionZoom",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA GEN",ff)':{tag:'(0019,"SIEMENS RA GEN",ff)',vr:"SS",name:"Internal",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",15)':{tag:'(0021,"SIEMENS RA GEN",15)',vr:"SS",name:"ImagesInStudy",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",20)':{tag:'(0021,"SIEMENS RA GEN",20)',vr:"SS",name:"ScenesInStudy",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",25)':{tag:'(0021,"SIEMENS RA GEN",25)',vr:"SS",name:"ImagesInPhotofile",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",27)':{tag:'(0021,"SIEMENS RA GEN",27)',vr:"SS",name:"PlaneBImagesExist",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",28)':{tag:'(0021,"SIEMENS RA GEN",28)',vr:"SS",name:"NoOf2MBChunks",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",30)':{tag:'(0021,"SIEMENS RA GEN",30)',vr:"SS",name:"ImagesInAllScenes",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS RA GEN",40)':{tag:'(0021,"SIEMENS RA GEN",40)',vr:"SS",name:"ArchiveSWInternalVersion",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE A",28)':{tag:'(0011,"SIEMENS RA PLANE A",28)',vr:"SL",name:"FluoroTimerA",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE A",29)':{tag:'(0011,"SIEMENS RA PLANE A",29)',vr:"SL",name:"FluoroSkinDoseA",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE A",2a)':{tag:'(0011,"SIEMENS RA PLANE A",2a)',vr:"SL",name:"TotalSkinDoseA",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE A",2b)':{tag:'(0011,"SIEMENS RA PLANE A",2b)',vr:"SL",name:"FluoroDoseAreaProductA",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE A",2c)':{tag:'(0011,"SIEMENS RA PLANE A",2c)',vr:"SL",name:"TotalDoseAreaProductA",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",15)':{tag:'(0019,"SIEMENS RA PLANE A",15)',vr:"LT",name:"OfflineUID",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",18)':{tag:'(0019,"SIEMENS RA PLANE A",18)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",19)':{tag:'(0019,"SIEMENS RA PLANE A",19)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1a)':{tag:'(0019,"SIEMENS RA PLANE A",1a)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1b)':{tag:'(0019,"SIEMENS RA PLANE A",1b)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1c)':{tag:'(0019,"SIEMENS RA PLANE A",1c)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1d)':{tag:'(0019,"SIEMENS RA PLANE A",1d)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1e)':{tag:'(0019,"SIEMENS RA PLANE A",1e)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",1f)':{tag:'(0019,"SIEMENS RA PLANE A",1f)',vr:"SS",name:"Internal",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",20)':{tag:'(0019,"SIEMENS RA PLANE A",20)',vr:"SS",name:"SystemCalibFactorPlaneA",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",22)':{tag:'(0019,"SIEMENS RA PLANE A",22)',vr:"SS",name:"XRayParameterSetNo",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",24)':{tag:'(0019,"SIEMENS RA PLANE A",24)',vr:"SS",name:"XRaySystem",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",26)':{tag:'(0019,"SIEMENS RA PLANE A",26)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",28)':{tag:'(0019,"SIEMENS RA PLANE A",28)',vr:"SS",name:"AcquiredDisplayMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",2a)':{tag:'(0019,"SIEMENS RA PLANE A",2a)',vr:"SS",name:"AcquisitionDelay",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",2c)':{tag:'(0019,"SIEMENS RA PLANE A",2c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",2e)':{tag:'(0019,"SIEMENS RA PLANE A",2e)',vr:"SS",name:"MaxFramesLimit",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",30)':{tag:'(0019,"SIEMENS RA PLANE A",30)',vr:"US",name:"MaximumFrameSizeNIU",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",32)':{tag:'(0019,"SIEMENS RA PLANE A",32)',vr:"SS",name:"SubtractedFilterType",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",34)':{tag:'(0019,"SIEMENS RA PLANE A",34)',vr:"SS",name:"FilterFactorNative",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",36)':{tag:'(0019,"SIEMENS RA PLANE A",36)',vr:"SS",name:"AnatomicBackgroundFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",38)':{tag:'(0019,"SIEMENS RA PLANE A",38)',vr:"SS",name:"WindowUpperLimitNative",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",3a)':{tag:'(0019,"SIEMENS RA PLANE A",3a)',vr:"SS",name:"WindowLowerLimitNative",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",3c)':{tag:'(0019,"SIEMENS RA PLANE A",3c)',vr:"SS",name:"WindowBrightnessPhase1",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",3e)':{tag:'(0019,"SIEMENS RA PLANE A",3e)',vr:"SS",name:"WindowBrightnessPhase2",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",40)':{tag:'(0019,"SIEMENS RA PLANE A",40)',vr:"SS",name:"WindowContrastPhase1",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",42)':{tag:'(0019,"SIEMENS RA PLANE A",42)',vr:"SS",name:"WindowContrastPhase2",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",44)':{tag:'(0019,"SIEMENS RA PLANE A",44)',vr:"SS",name:"FilterFactorSub",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",46)':{tag:'(0019,"SIEMENS RA PLANE A",46)',vr:"SS",name:"PeakOpacified",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",48)':{tag:'(0019,"SIEMENS RA PLANE A",48)',vr:"SL",name:"MaskFrame",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",4a)':{tag:'(0019,"SIEMENS RA PLANE A",4a)',vr:"SL",name:"BIHFrame",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",4c)':{tag:'(0019,"SIEMENS RA PLANE A",4c)',vr:"SS",name:"CentBeamAngulationCaudCran",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",4e)':{tag:'(0019,"SIEMENS RA PLANE A",4e)',vr:"SS",name:"CentBeamAngulationLRAnterior",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",50)':{tag:'(0019,"SIEMENS RA PLANE A",50)',vr:"SS",name:"LongitudinalPosition",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",52)':{tag:'(0019,"SIEMENS RA PLANE A",52)',vr:"SS",name:"SideOffset",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",54)':{tag:'(0019,"SIEMENS RA PLANE A",54)',vr:"SS",name:"IsoCenterHeight",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",56)':{tag:'(0019,"SIEMENS RA PLANE A",56)',vr:"SS",name:"ImageTwist",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",58)':{tag:'(0019,"SIEMENS RA PLANE A",58)',vr:"SS",name:"SourceImageDistance",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",5a)':{tag:'(0019,"SIEMENS RA PLANE A",5a)',vr:"SS",name:"MechanicalMagnificationFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",5c)':{tag:'(0019,"SIEMENS RA PLANE A",5c)',vr:"SL",name:"CalibrationFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",5e)':{tag:'(0019,"SIEMENS RA PLANE A",5e)',vr:"SL",name:"CalibrationAngleCranCaud",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",60)':{tag:'(0019,"SIEMENS RA PLANE A",60)',vr:"SL",name:"CalibrationAngleRAOLAO",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",62)':{tag:'(0019,"SIEMENS RA PLANE A",62)',vr:"SL",name:"CalibrationTableToFloorDist",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",64)':{tag:'(0019,"SIEMENS RA PLANE A",64)',vr:"SL",name:"CalibrationIsocenterToFloorDist",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",66)':{tag:'(0019,"SIEMENS RA PLANE A",66)',vr:"SL",name:"CalibrationIsocenterToSourceDist",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",68)':{tag:'(0019,"SIEMENS RA PLANE A",68)',vr:"SL",name:"CalibrationSourceToII",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",6a)':{tag:'(0019,"SIEMENS RA PLANE A",6a)',vr:"SL",name:"CalibrationIIZoom",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",6c)':{tag:'(0019,"SIEMENS RA PLANE A",6c)',vr:"SL",name:"CalibrationIIField",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",6e)':{tag:'(0019,"SIEMENS RA PLANE A",6e)',vr:"SL",name:"CalibrationFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",70)':{tag:'(0019,"SIEMENS RA PLANE A",70)',vr:"SL",name:"CalibrationObjectToImageDistance",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",72)':{tag:'(0019,"SIEMENS RA PLANE A",72)',vr:"SL",name:"CalibrationSystemFactor",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",74)':{tag:'(0019,"SIEMENS RA PLANE A",74)',vr:"SL",name:"CalibrationSystemCorrection",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",76)':{tag:'(0019,"SIEMENS RA PLANE A",76)',vr:"SL",name:"CalibrationSystemIIFormats",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",78)':{tag:'(0019,"SIEMENS RA PLANE A",78)',vr:"SL",name:"CalibrationGantryDataValid",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",7a)':{tag:'(0019,"SIEMENS RA PLANE A",7a)',vr:"SS",name:"CollimatorSquareBreadth",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",7c)':{tag:'(0019,"SIEMENS RA PLANE A",7c)',vr:"SS",name:"CollimatorSquareHeight",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",7e)':{tag:'(0019,"SIEMENS RA PLANE A",7e)',vr:"SS",name:"CollimatorSquareDiameter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",80)':{tag:'(0019,"SIEMENS RA PLANE A",80)',vr:"SS",name:"CollimaterFingerTurnAngle",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",82)':{tag:'(0019,"SIEMENS RA PLANE A",82)',vr:"SS",name:"CollimaterFingerPosition",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",84)':{tag:'(0019,"SIEMENS RA PLANE A",84)',vr:"SS",name:"CollimaterDiaphragmTurnAngle",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",86)':{tag:'(0019,"SIEMENS RA PLANE A",86)',vr:"SS",name:"CollimaterDiaphragmPosition1",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",88)':{tag:'(0019,"SIEMENS RA PLANE A",88)',vr:"SS",name:"CollimaterDiaphragmPosition2",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",8a)':{tag:'(0019,"SIEMENS RA PLANE A",8a)',vr:"SS",name:"CollimaterDiaphragmMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",8c)':{tag:'(0019,"SIEMENS RA PLANE A",8c)',vr:"SS",name:"CollimaterBeamLimitBreadth",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",8e)':{tag:'(0019,"SIEMENS RA PLANE A",8e)',vr:"SS",name:"CollimaterBeamLimitHeight",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",90)':{tag:'(0019,"SIEMENS RA PLANE A",90)',vr:"SS",name:"CollimaterBeamLimitDiameter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",92)':{tag:'(0019,"SIEMENS RA PLANE A",92)',vr:"SS",name:"X-RayControlMOde",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",94)':{tag:'(0019,"SIEMENS RA PLANE A",94)',vr:"SS",name:"X-RaySystem",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",96)':{tag:'(0019,"SIEMENS RA PLANE A",96)',vr:"SS",name:"FocalSpot",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",98)':{tag:'(0019,"SIEMENS RA PLANE A",98)',vr:"SS",name:"ExposureControl",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",9a)':{tag:'(0019,"SIEMENS RA PLANE A",9a)',vr:"SL",name:"XRayVoltage",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",9c)':{tag:'(0019,"SIEMENS RA PLANE A",9c)',vr:"SL",name:"XRayCurrent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",9e)':{tag:'(0019,"SIEMENS RA PLANE A",9e)',vr:"SL",name:"XRayCurrentTimeProduct",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",a0)':{tag:'(0019,"SIEMENS RA PLANE A",a0)',vr:"SL",name:"XRayPulseTime",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",a2)':{tag:'(0019,"SIEMENS RA PLANE A",a2)',vr:"SL",name:"XRaySceneTimeFluoroClock",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",a4)':{tag:'(0019,"SIEMENS RA PLANE A",a4)',vr:"SS",name:"MaximumPulseRate",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",a6)':{tag:'(0019,"SIEMENS RA PLANE A",a6)',vr:"SS",name:"PulsesPerScene",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",a8)':{tag:'(0019,"SIEMENS RA PLANE A",a8)',vr:"SL",name:"DoseAreaProductOfScene",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",aa)':{tag:'(0019,"SIEMENS RA PLANE A",aa)',vr:"SS",name:"Dose",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",ac)':{tag:'(0019,"SIEMENS RA PLANE A",ac)',vr:"SS",name:"DoseRate",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",ae)':{tag:'(0019,"SIEMENS RA PLANE A",ae)',vr:"SL",name:"IIToCoverDistance",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b0)':{tag:'(0019,"SIEMENS RA PLANE A",b0)',vr:"SS",name:"LastFramePhase1",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b1)':{tag:'(0019,"SIEMENS RA PLANE A",b1)',vr:"SS",name:"FrameRatePhase1",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b2)':{tag:'(0019,"SIEMENS RA PLANE A",b2)',vr:"SS",name:"LastFramePhase2",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b3)':{tag:'(0019,"SIEMENS RA PLANE A",b3)',vr:"SS",name:"FrameRatePhase2",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b4)':{tag:'(0019,"SIEMENS RA PLANE A",b4)',vr:"SS",name:"LastFramePhase3",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b5)':{tag:'(0019,"SIEMENS RA PLANE A",b5)',vr:"SS",name:"FrameRatePhase3",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b6)':{tag:'(0019,"SIEMENS RA PLANE A",b6)',vr:"SS",name:"LastFramePhase4",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b7)':{tag:'(0019,"SIEMENS RA PLANE A",b7)',vr:"SS",name:"FrameRatePhase4",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b8)':{tag:'(0019,"SIEMENS RA PLANE A",b8)',vr:"SS",name:"GammaOfNativeImage",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",b9)':{tag:'(0019,"SIEMENS RA PLANE A",b9)',vr:"SS",name:"GammaOfTVSystem",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",bb)':{tag:'(0019,"SIEMENS RA PLANE A",bb)',vr:"SL",name:"PixelshiftX",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",bc)':{tag:'(0019,"SIEMENS RA PLANE A",bc)',vr:"SL",name:"PixelshiftY",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",bd)':{tag:'(0019,"SIEMENS RA PLANE A",bd)',vr:"SL",name:"MaskAverageFactor",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",be)':{tag:'(0019,"SIEMENS RA PLANE A",be)',vr:"SL",name:"BlankingCircleFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",bf)':{tag:'(0019,"SIEMENS RA PLANE A",bf)',vr:"SL",name:"CircleRowStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c0)':{tag:'(0019,"SIEMENS RA PLANE A",c0)',vr:"SL",name:"CircleRowEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c1)':{tag:'(0019,"SIEMENS RA PLANE A",c1)',vr:"SL",name:"CircleColumnStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c2)':{tag:'(0019,"SIEMENS RA PLANE A",c2)',vr:"SL",name:"CircleColumnEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c3)':{tag:'(0019,"SIEMENS RA PLANE A",c3)',vr:"SL",name:"CircleDiameter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c4)':{tag:'(0019,"SIEMENS RA PLANE A",c4)',vr:"SL",name:"RectangularCollimaterFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c5)':{tag:'(0019,"SIEMENS RA PLANE A",c5)',vr:"SL",name:"RectangleRowStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c6)':{tag:'(0019,"SIEMENS RA PLANE A",c6)',vr:"SL",name:"RectangleRowEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c7)':{tag:'(0019,"SIEMENS RA PLANE A",c7)',vr:"SL",name:"RectangleColumnStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c8)':{tag:'(0019,"SIEMENS RA PLANE A",c8)',vr:"SL",name:"RectangleColumnEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",c9)':{tag:'(0019,"SIEMENS RA PLANE A",c9)',vr:"SL",name:"RectangleAngulation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",ca)':{tag:'(0019,"SIEMENS RA PLANE A",ca)',vr:"SL",name:"IrisCollimatorFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",cb)':{tag:'(0019,"SIEMENS RA PLANE A",cb)',vr:"SL",name:"IrisRowStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",cc)':{tag:'(0019,"SIEMENS RA PLANE A",cc)',vr:"SL",name:"IrisRowEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",cd)':{tag:'(0019,"SIEMENS RA PLANE A",cd)',vr:"SL",name:"IrisColumnStart",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",ce)':{tag:'(0019,"SIEMENS RA PLANE A",ce)',vr:"SL",name:"IrisColumnEnd",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",cf)':{tag:'(0019,"SIEMENS RA PLANE A",cf)',vr:"SL",name:"IrisAngulation",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d1)':{tag:'(0019,"SIEMENS RA PLANE A",d1)',vr:"SS",name:"NumberOfFramesPlane",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d2)':{tag:'(0019,"SIEMENS RA PLANE A",d2)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d3)':{tag:'(0019,"SIEMENS RA PLANE A",d3)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d4)':{tag:'(0019,"SIEMENS RA PLANE A",d4)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d5)':{tag:'(0019,"SIEMENS RA PLANE A",d5)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d6)':{tag:'(0019,"SIEMENS RA PLANE A",d6)',vr:"SS",name:"Internal",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d7)':{tag:'(0019,"SIEMENS RA PLANE A",d7)',vr:"SS",name:"Internal",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d8)':{tag:'(0019,"SIEMENS RA PLANE A",d8)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",d9)':{tag:'(0019,"SIEMENS RA PLANE A",d9)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",da)':{tag:'(0019,"SIEMENS RA PLANE A",da)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",db)':{tag:'(0019,"SIEMENS RA PLANE A",db)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",dc)':{tag:'(0019,"SIEMENS RA PLANE A",dc)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",dd)':{tag:'(0019,"SIEMENS RA PLANE A",dd)',vr:"SL",name:"AnatomicBackground",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",de)':{tag:'(0019,"SIEMENS RA PLANE A",de)',vr:"SL",name:"AutoWindowBase",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",df)':{tag:'(0019,"SIEMENS RA PLANE A",df)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE A",e0)':{tag:'(0019,"SIEMENS RA PLANE A",e0)',vr:"SL",name:"Internal",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE B",28)':{tag:'(0011,"SIEMENS RA PLANE B",28)',vr:"SL",name:"FluoroTimerB",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE B",29)':{tag:'(0011,"SIEMENS RA PLANE B",29)',vr:"SL",name:"FluoroSkinDoseB",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE B",2a)':{tag:'(0011,"SIEMENS RA PLANE B",2a)',vr:"SL",name:"TotalSkinDoseB",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE B",2b)':{tag:'(0011,"SIEMENS RA PLANE B",2b)',vr:"SL",name:"FluoroDoseAreaProductB",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RA PLANE B",2c)':{tag:'(0011,"SIEMENS RA PLANE B",2c)',vr:"SL",name:"TotalDoseAreaProductB",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",18)':{tag:'(0019,"SIEMENS RA PLANE B",18)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",19)':{tag:'(0019,"SIEMENS RA PLANE B",19)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1a)':{tag:'(0019,"SIEMENS RA PLANE B",1a)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1b)':{tag:'(0019,"SIEMENS RA PLANE B",1b)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1c)':{tag:'(0019,"SIEMENS RA PLANE B",1c)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1d)':{tag:'(0019,"SIEMENS RA PLANE B",1d)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1e)':{tag:'(0019,"SIEMENS RA PLANE B",1e)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",1f)':{tag:'(0019,"SIEMENS RA PLANE B",1f)',vr:"SS",name:"Internal",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",20)':{tag:'(0019,"SIEMENS RA PLANE B",20)',vr:"SL",name:"SystemCalibFactorPlaneB",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",22)':{tag:'(0019,"SIEMENS RA PLANE B",22)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",24)':{tag:'(0019,"SIEMENS RA PLANE B",24)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",26)':{tag:'(0019,"SIEMENS RA PLANE B",26)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",28)':{tag:'(0019,"SIEMENS RA PLANE B",28)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",2a)':{tag:'(0019,"SIEMENS RA PLANE B",2a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",2c)':{tag:'(0019,"SIEMENS RA PLANE B",2c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",2e)':{tag:'(0019,"SIEMENS RA PLANE B",2e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",30)':{tag:'(0019,"SIEMENS RA PLANE B",30)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",32)':{tag:'(0019,"SIEMENS RA PLANE B",32)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",34)':{tag:'(0019,"SIEMENS RA PLANE B",34)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",36)':{tag:'(0019,"SIEMENS RA PLANE B",36)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",38)':{tag:'(0019,"SIEMENS RA PLANE B",38)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",3a)':{tag:'(0019,"SIEMENS RA PLANE B",3a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",3c)':{tag:'(0019,"SIEMENS RA PLANE B",3c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",3e)':{tag:'(0019,"SIEMENS RA PLANE B",3e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",40)':{tag:'(0019,"SIEMENS RA PLANE B",40)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",42)':{tag:'(0019,"SIEMENS RA PLANE B",42)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",44)':{tag:'(0019,"SIEMENS RA PLANE B",44)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",46)':{tag:'(0019,"SIEMENS RA PLANE B",46)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",48)':{tag:'(0019,"SIEMENS RA PLANE B",48)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",4a)':{tag:'(0019,"SIEMENS RA PLANE B",4a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",4c)':{tag:'(0019,"SIEMENS RA PLANE B",4c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",4e)':{tag:'(0019,"SIEMENS RA PLANE B",4e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",50)':{tag:'(0019,"SIEMENS RA PLANE B",50)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",52)':{tag:'(0019,"SIEMENS RA PLANE B",52)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",54)':{tag:'(0019,"SIEMENS RA PLANE B",54)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",56)':{tag:'(0019,"SIEMENS RA PLANE B",56)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",58)':{tag:'(0019,"SIEMENS RA PLANE B",58)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",5a)':{tag:'(0019,"SIEMENS RA PLANE B",5a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",5c)':{tag:'(0019,"SIEMENS RA PLANE B",5c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",5e)':{tag:'(0019,"SIEMENS RA PLANE B",5e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",60)':{tag:'(0019,"SIEMENS RA PLANE B",60)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",62)':{tag:'(0019,"SIEMENS RA PLANE B",62)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",64)':{tag:'(0019,"SIEMENS RA PLANE B",64)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",66)':{tag:'(0019,"SIEMENS RA PLANE B",66)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",68)':{tag:'(0019,"SIEMENS RA PLANE B",68)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",6a)':{tag:'(0019,"SIEMENS RA PLANE B",6a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",6c)':{tag:'(0019,"SIEMENS RA PLANE B",6c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",6e)':{tag:'(0019,"SIEMENS RA PLANE B",6e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",70)':{tag:'(0019,"SIEMENS RA PLANE B",70)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",72)':{tag:'(0019,"SIEMENS RA PLANE B",72)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",74)':{tag:'(0019,"SIEMENS RA PLANE B",74)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",76)':{tag:'(0019,"SIEMENS RA PLANE B",76)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",78)':{tag:'(0019,"SIEMENS RA PLANE B",78)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",7a)':{tag:'(0019,"SIEMENS RA PLANE B",7a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",7c)':{tag:'(0019,"SIEMENS RA PLANE B",7c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",7e)':{tag:'(0019,"SIEMENS RA PLANE B",7e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",80)':{tag:'(0019,"SIEMENS RA PLANE B",80)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",82)':{tag:'(0019,"SIEMENS RA PLANE B",82)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",84)':{tag:'(0019,"SIEMENS RA PLANE B",84)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",86)':{tag:'(0019,"SIEMENS RA PLANE B",86)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",88)':{tag:'(0019,"SIEMENS RA PLANE B",88)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",8a)':{tag:'(0019,"SIEMENS RA PLANE B",8a)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",8c)':{tag:'(0019,"SIEMENS RA PLANE B",8c)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",8e)':{tag:'(0019,"SIEMENS RA PLANE B",8e)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",90)':{tag:'(0019,"SIEMENS RA PLANE B",90)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",92)':{tag:'(0019,"SIEMENS RA PLANE B",92)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",94)':{tag:'(0019,"SIEMENS RA PLANE B",94)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",96)':{tag:'(0019,"SIEMENS RA PLANE B",96)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",98)':{tag:'(0019,"SIEMENS RA PLANE B",98)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",9a)':{tag:'(0019,"SIEMENS RA PLANE B",9a)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",9c)':{tag:'(0019,"SIEMENS RA PLANE B",9c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",9e)':{tag:'(0019,"SIEMENS RA PLANE B",9e)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",a0)':{tag:'(0019,"SIEMENS RA PLANE B",a0)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",a2)':{tag:'(0019,"SIEMENS RA PLANE B",a2)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",a4)':{tag:'(0019,"SIEMENS RA PLANE B",a4)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",a6)':{tag:'(0019,"SIEMENS RA PLANE B",a6)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",a8)':{tag:'(0019,"SIEMENS RA PLANE B",a8)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",aa)':{tag:'(0019,"SIEMENS RA PLANE B",aa)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS RA PLANE B",ac)':{tag:'(0019,"SIEMENS RA PLANE B",ac)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",10)':{tag:'(0011,"SIEMENS RIS",10)',vr:"LT",name:"PatientUID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",11)':{tag:'(0011,"SIEMENS RIS",11)',vr:"LT",name:"PatientID",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",20)':{tag:'(0011,"SIEMENS RIS",20)',vr:"DA",name:"PatientRegistrationDate",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",21)':{tag:'(0011,"SIEMENS RIS",21)',vr:"TM",name:"PatientRegistrationTime",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",30)':{tag:'(0011,"SIEMENS RIS",30)',vr:"LT",name:"PatientnameRIS",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",31)':{tag:'(0011,"SIEMENS RIS",31)',vr:"LT",name:"PatientprenameRIS",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",40)':{tag:'(0011,"SIEMENS RIS",40)',vr:"LT",name:"PatientHospitalStatus",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",41)':{tag:'(0011,"SIEMENS RIS",41)',vr:"LT",name:"MedicalAlerts",vm:"1",version:"PrivateTag"},'(0011,"SIEMENS RIS",42)':{tag:'(0011,"SIEMENS RIS",42)',vr:"LT",name:"ContrastAllergies",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS RIS",10)':{tag:'(0031,"SIEMENS RIS",10)',vr:"LT",name:"RequestUID",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS RIS",45)':{tag:'(0031,"SIEMENS RIS",45)',vr:"LT",name:"RequestingPhysician",vm:"1",version:"PrivateTag"},'(0031,"SIEMENS RIS",50)':{tag:'(0031,"SIEMENS RIS",50)',vr:"LT",name:"RequestedPhysician",vm:"1",version:"PrivateTag"},'(0033,"SIEMENS RIS",10)':{tag:'(0033,"SIEMENS RIS",10)',vr:"LT",name:"PatientStudyUID",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",00)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",00)',vr:"US",name:"AcquisitionType",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",01)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",01)',vr:"US",name:"AcquisitionMode",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",02)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",02)',vr:"US",name:"FootswitchIndex",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",03)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",03)',vr:"US",name:"AcquisitionRoom",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",04)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",04)',vr:"SL",name:"CurrentTimeProduct",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",05)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",05)',vr:"SL",name:"Dose",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",06)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",06)',vr:"SL",name:"SkinDosePercent",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",07)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",07)',vr:"SL",name:"SkinDoseAccumulation",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",08)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",08)',vr:"SL",name:"SkinDoseRate",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0A)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0A)',vr:"UL",name:"CopperFilter",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0B)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0B)',vr:"US",name:"MeasuringField",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0C)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0C)',vr:"SS",name:"PostBlankingCircle",vm:"3",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0D)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0D)',vr:"SS",name:"DynaAngles",vm:"2-2n",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0E)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0E)',vr:"SS",name:"TotalSteps",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",0F)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",0F)',vr:"SL",name:"DynaXRayInfo",vm:"3-3n",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",10)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",10)',vr:"US",name:"ModalityLUTInputGamma",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",11)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",11)',vr:"US",name:"ModalityLUTOutputGamma",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",12)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",12)',vr:"OB",name:"SH_STPAR",vm:"1-n",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",13)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",13)',vr:"US",name:"AcquisitionZoom",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",14)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",14)',vr:"SS",name:"DynaAngulationStepWidth",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",15)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",15)',vr:"US",name:"Harmonization",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",16)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",16)',vr:"US",name:"DRSingleFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",17)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",17)',vr:"SL",name:"SourceToIsocenter",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",18)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",18)',vr:"US",name:"PressureData",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",19)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",19)',vr:"SL",name:"ECGIndexArray",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1A)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1A)',vr:"US",name:"FDFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1B)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1B)',vr:"OB",name:"SH_ZOOM",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1C)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1C)',vr:"OB",name:"SH_COLPAR",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1D)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1D)',vr:"US",name:"K_Factor",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1E)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1E)',vr:"US",name:"EVE",vm:"8",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",1F)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",1F)',vr:"SL",name:"TotalSceneTime",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",20)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",20)',vr:"US",name:"RestoreFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",21)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",21)',vr:"US",name:"StandMovementFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",22)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",22)',vr:"US",name:"FDRows",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",23)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",23)',vr:"US",name:"FDColumns",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",24)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",24)',vr:"US",name:"TableMovementFlag",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",25)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",25)',vr:"LO",name:"OriginalOrganProgramName",vm:"1",version:"PrivateTag"},'(0021,"SIEMENS SMS-AX  ACQ 1.0",26)':{tag:'(0021,"SIEMENS SMS-AX  ACQ 1.0",26)',vr:"DS",name:"CrispyXPIFilter",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",00)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",00)',vr:"US",name:"ViewNative",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",01)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",01)',vr:"US",name:"OriginalSeriesNumber",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",02)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",02)',vr:"US",name:"OriginalImageNumber",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",03)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",03)',vr:"US",name:"WinCenter",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",04)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",04)',vr:"US",name:"WinWidth",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",05)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",05)',vr:"US",name:"WinBrightness",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",06)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",06)',vr:"US",name:"WinContrast",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",07)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",07)',vr:"US",name:"OriginalFrameNumber",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",08)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",08)',vr:"US",name:"OriginalMaskFrameNumber",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",09)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",09)',vr:"US",name:"Opac",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0A)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0A)',vr:"US",name:"OriginalNumberOfFrames",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0B)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0B)',vr:"DS",name:"OriginalSceneDuration",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0C)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0C)',vr:"LO",name:"IdentifierLOID",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0D)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0D)',vr:"SS",name:"OriginalSceneVFRInfo",vm:"1-n",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0E)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0E)',vr:"SS",name:"OriginalFrameECGPosition",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0F)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0F)',vr:"SS",name:"OriginalECG1stFrameOffset_retired",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",10)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",10)',vr:"SS",name:"ZoomFlag",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",11)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",11)',vr:"US",name:"Flex",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",12)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",12)',vr:"US",name:"NumberOfMaskFrames",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",13)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",13)',vr:"US",name:"NumberOfFillFrames",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",14)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",14)',vr:"US",name:"SeriesNumber",vm:"1",version:"PrivateTag"},'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",15)':{tag:'(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",15)',vr:"IS",name:"ImageNumber",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",00)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",00)',vr:"DS",name:"HorizontalCalibrationPixelSize",vm:"2",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",01)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",01)',vr:"DS",name:"VerticalCalibrationPixelSize",vm:"2",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",02)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",02)',vr:"LO",name:"CalibrationObject",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",03)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",03)',vr:"DS",name:"CalibrationObjectSize",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",04)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",04)',vr:"LO",name:"CalibrationMethod",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",05)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",05)',vr:"ST",name:"Filename",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",06)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",06)',vr:"IS",name:"FrameNumber",vm:"1",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",07)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",07)',vr:"IS",name:"CalibrationFactorMultiplicity",vm:"2",version:"PrivateTag"},'(0023,"SIEMENS SMS-AX  QUANT 1.0",08)':{tag:'(0023,"SIEMENS SMS-AX  QUANT 1.0",08)',vr:"IS",name:"CalibrationTODValue",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",00)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",00)',vr:"US",name:"ReviewMode",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",01)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",01)',vr:"US",name:"AnatomicalBackgroundPercent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",02)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",02)',vr:"US",name:"NumberOfPhases",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",03)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",03)',vr:"US",name:"ApplyAnatomicalBackground",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",04)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",04)',vr:"SS",name:"PixelShiftArray",vm:"4-4n",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",05)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",05)',vr:"US",name:"Brightness",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",06)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",06)',vr:"US",name:"Contrast",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",07)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",07)',vr:"US",name:"Enabled",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",08)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",08)',vr:"US",name:"NativeEdgeEnhancementPercentGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",09)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",09)',vr:"SS",name:"NativeEdgeEnhancementLUTIndex",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0A)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0A)',vr:"SS",name:"NativeEdgeEnhancementKernelSize",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0B)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0B)',vr:"US",name:"SubtrEdgeEnhancementPercentGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0C)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0C)',vr:"SS",name:"SubtrEdgeEnhancementLUTIndex",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0D)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0D)',vr:"SS",name:"SubtrEdgeEnhancementKernelSize",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0E)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0E)',vr:"US",name:"FadePercent",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",0F)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",0F)',vr:"US",name:"FlippedBeforeLateralityApplied",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",10)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",10)',vr:"US",name:"ApplyFade",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",12)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",12)',vr:"US",name:"Zoom",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",13)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",13)',vr:"SS",name:"PanX",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",14)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",14)',vr:"SS",name:"PanY",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",15)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",15)',vr:"SS",name:"NativeEdgeEnhancementAdvPercGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",16)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",16)',vr:"SS",name:"SubtrEdgeEnhancementAdvPercGain",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",17)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",17)',vr:"US",name:"InvertFlag",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",1A)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",1A)',vr:"OB",name:"Quant1KOverlay",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",1B)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",1B)',vr:"US",name:"OriginalResolution",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",1C)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",1C)',vr:"DS",name:"AutoWindowCenter",vm:"1",version:"PrivateTag"},'(0019,"SIEMENS SMS-AX  VIEW 1.0",1D)':{tag:'(0019,"SIEMENS SMS-AX  VIEW 1.0",1D)',vr:"DS",name:"AutoWindowWidth",vm:"1",version:"PrivateTag"},'(0009,"SIENET",01)':{tag:'(0009,"SIENET",01)',vr:"US",name:"SIENETCommandField",vm:"1",version:"PrivateTag"},'(0009,"SIENET",14)':{tag:'(0009,"SIENET",14)',vr:"LT",name:"ReceiverPLA",vm:"1",version:"PrivateTag"},'(0009,"SIENET",16)':{tag:'(0009,"SIENET",16)',vr:"US",name:"TransferPriority",vm:"1",version:"PrivateTag"},'(0009,"SIENET",29)':{tag:'(0009,"SIENET",29)',vr:"LT",name:"ActualUser",vm:"1",version:"PrivateTag"},'(0095,"SIENET",01)':{tag:'(0095,"SIENET",01)',vr:"LT",name:"ExaminationFolderID",vm:"1",version:"PrivateTag"},'(0095,"SIENET",04)':{tag:'(0095,"SIENET",04)',vr:"UL",name:"FolderReportedStatus",vm:"1",version:"PrivateTag"},'(0095,"SIENET",05)':{tag:'(0095,"SIENET",05)',vr:"LT",name:"FolderReportingRadiologist",vm:"1",version:"PrivateTag"},'(0095,"SIENET",07)':{tag:'(0095,"SIENET",07)',vr:"LT",name:"SIENETISAPLA",vm:"1",version:"PrivateTag"},'(0099,"SIENET",02)':{tag:'(0099,"SIENET",02)',vr:"UL",name:"DataObjectAttributes",vm:"1",version:"PrivateTag"},'(0009,"SPI RELEASE 1",10)':{tag:'(0009,"SPI RELEASE 1",10)',vr:"LT",name:"Comments",vm:"1",version:"PrivateTag"},'(0009,"SPI RELEASE 1",15)':{tag:'(0009,"SPI RELEASE 1",15)',vr:"LO",name:"SPIImageUID",vm:"1",version:"PrivateTag"},'(0009,"SPI RELEASE 1",40)':{tag:'(0009,"SPI RELEASE 1",40)',vr:"US",name:"DataObjectType",vm:"1",version:"PrivateTag"},'(0009,"SPI RELEASE 1",41)':{tag:'(0009,"SPI RELEASE 1",41)',vr:"LO",name:"DataObjectSubtype",vm:"1",version:"PrivateTag"},'(0011,"SPI RELEASE 1",10)':{tag:'(0011,"SPI RELEASE 1",10)',vr:"LO",name:"Organ",vm:"1",version:"PrivateTag"},'(0011,"SPI RELEASE 1",15)':{tag:'(0011,"SPI RELEASE 1",15)',vr:"LO",name:"AllergyIndication",vm:"1",version:"PrivateTag"},'(0011,"SPI RELEASE 1",20)':{tag:'(0011,"SPI RELEASE 1",20)',vr:"LO",name:"Pregnancy",vm:"1",version:"PrivateTag"},'(0029,"SPI RELEASE 1",60)':{tag:'(0029,"SPI RELEASE 1",60)',vr:"LT",name:"CompressionAlgorithm",vm:"1",version:"PrivateTag"},'(0009,"SPI Release 1",10)':{tag:'(0009,"SPI Release 1",10)',vr:"LT",name:"Comments",vm:"1",version:"PrivateTag"},'(0009,"SPI Release 1",15)':{tag:'(0009,"SPI Release 1",15)',vr:"LO",name:"SPIImageUID",vm:"1",version:"PrivateTag"},'(0009,"SPI Release 1",40)':{tag:'(0009,"SPI Release 1",40)',vr:"US",name:"DataObjectType",vm:"1",version:"PrivateTag"},'(0009,"SPI Release 1",41)':{tag:'(0009,"SPI Release 1",41)',vr:"LO",name:"DataObjectSubtype",vm:"1",version:"PrivateTag"},'(0011,"SPI Release 1",10)':{tag:'(0011,"SPI Release 1",10)',vr:"LO",name:"Organ",vm:"1",version:"PrivateTag"},'(0011,"SPI Release 1",15)':{tag:'(0011,"SPI Release 1",15)',vr:"LO",name:"AllergyIndication",vm:"1",version:"PrivateTag"},'(0011,"SPI Release 1",20)':{tag:'(0011,"SPI Release 1",20)',vr:"LO",name:"Pregnancy",vm:"1",version:"PrivateTag"},'(0029,"SPI Release 1",60)':{tag:'(0029,"SPI Release 1",60)',vr:"LT",name:"CompressionAlgorithm",vm:"1",version:"PrivateTag"},'(0009,"SPI",10)':{tag:'(0009,"SPI",10)',vr:"LO",name:"Comments",vm:"1",version:"PrivateTag"},'(0009,"SPI",15)':{tag:'(0009,"SPI",15)',vr:"LO",name:"SPIImageUID",vm:"1",version:"PrivateTag"},'(0009,"SPI",40)':{tag:'(0009,"SPI",40)',vr:"US",name:"DataObjectType",vm:"1",version:"PrivateTag"},'(0009,"SPI",41)':{tag:'(0009,"SPI",41)',vr:"LT",name:"DataObjectSubtype",vm:"1",version:"PrivateTag"},'(0011,"SPI",10)':{tag:'(0011,"SPI",10)',vr:"LT",name:"Organ",vm:"1",version:"PrivateTag"},'(0011,"SPI",15)':{tag:'(0011,"SPI",15)',vr:"LT",name:"AllergyIndication",vm:"1",version:"PrivateTag"},'(0011,"SPI",20)':{tag:'(0011,"SPI",20)',vr:"LT",name:"Pregnancy",vm:"1",version:"PrivateTag"},'(0029,"SPI",60)':{tag:'(0029,"SPI",60)',vr:"LT",name:"CompressionAlgorithm",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",00)':{tag:'(0009,"SPI-P Release 1",00)',vr:"LT",name:"DataObjectRecognitionCode",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",04)':{tag:'(0009,"SPI-P Release 1",04)',vr:"LO",name:"ImageDataConsistence",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",08)':{tag:'(0009,"SPI-P Release 1",08)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",12)':{tag:'(0009,"SPI-P Release 1",12)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",15)':{tag:'(0009,"SPI-P Release 1",15)',vr:"LO",name:"UniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",16)':{tag:'(0009,"SPI-P Release 1",16)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",18)':{tag:'(0009,"SPI-P Release 1",18)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",21)':{tag:'(0009,"SPI-P Release 1",21)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",31)':{tag:'(0009,"SPI-P Release 1",31)',vr:"LT",name:"PACSUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",34)':{tag:'(0009,"SPI-P Release 1",34)',vr:"LT",name:"ClusterUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",38)':{tag:'(0009,"SPI-P Release 1",38)',vr:"LT",name:"SystemUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",39)':{tag:'(0009,"SPI-P Release 1",39)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",51)':{tag:'(0009,"SPI-P Release 1",51)',vr:"LT",name:"StudyUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",61)':{tag:'(0009,"SPI-P Release 1",61)',vr:"LT",name:"SeriesUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",91)':{tag:'(0009,"SPI-P Release 1",91)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",f2)':{tag:'(0009,"SPI-P Release 1",f2)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",f3)':{tag:'(0009,"SPI-P Release 1",f3)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",f4)':{tag:'(0009,"SPI-P Release 1",f4)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",f5)':{tag:'(0009,"SPI-P Release 1",f5)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1",f7)':{tag:'(0009,"SPI-P Release 1",f7)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 1",10)':{tag:'(0011,"SPI-P Release 1",10)',vr:"LT",name:"PatientEntryID",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 1",21)':{tag:'(0011,"SPI-P Release 1",21)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 1",22)':{tag:'(0011,"SPI-P Release 1",22)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 1",31)':{tag:'(0011,"SPI-P Release 1",31)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 1",32)':{tag:'(0011,"SPI-P Release 1",32)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",00)':{tag:'(0019,"SPI-P Release 1",00)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",01)':{tag:'(0019,"SPI-P Release 1",01)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",02)':{tag:'(0019,"SPI-P Release 1",02)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",10)':{tag:'(0019,"SPI-P Release 1",10)',vr:"US",name:"MainsFrequency",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",25)':{tag:'(0019,"SPI-P Release 1",25)',vr:"LT",name:"OriginalPixelDataQuality",vm:"1-n",version:"PrivateTag"},'(0019,"SPI-P Release 1",30)':{tag:'(0019,"SPI-P Release 1",30)',vr:"US",name:"ECGTriggering",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",31)':{tag:'(0019,"SPI-P Release 1",31)',vr:"UN",name:"ECG1Offset",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",32)':{tag:'(0019,"SPI-P Release 1",32)',vr:"UN",name:"ECG2Offset1",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",33)':{tag:'(0019,"SPI-P Release 1",33)',vr:"UN",name:"ECG2Offset2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",50)':{tag:'(0019,"SPI-P Release 1",50)',vr:"US",name:"VideoScanMode",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",51)':{tag:'(0019,"SPI-P Release 1",51)',vr:"US",name:"VideoLineRate",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",60)':{tag:'(0019,"SPI-P Release 1",60)',vr:"US",name:"XrayTechnique",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",61)':{tag:'(0019,"SPI-P Release 1",61)',vr:"DS",name:"ImageIdentifierFromat",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",62)':{tag:'(0019,"SPI-P Release 1",62)',vr:"US",name:"IrisDiaphragm",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",63)':{tag:'(0019,"SPI-P Release 1",63)',vr:"CS",name:"Filter",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",64)':{tag:'(0019,"SPI-P Release 1",64)',vr:"CS",name:"CineParallel",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",65)':{tag:'(0019,"SPI-P Release 1",65)',vr:"CS",name:"CineMaster",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",70)':{tag:'(0019,"SPI-P Release 1",70)',vr:"US",name:"ExposureChannel",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",71)':{tag:'(0019,"SPI-P Release 1",71)',vr:"UN",name:"ExposureChannelFirstImage",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",72)':{tag:'(0019,"SPI-P Release 1",72)',vr:"US",name:"ProcessingChannel",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",80)':{tag:'(0019,"SPI-P Release 1",80)',vr:"DS",name:"AcquisitionDelay",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",81)':{tag:'(0019,"SPI-P Release 1",81)',vr:"UN",name:"RelativeImageTime",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",90)':{tag:'(0019,"SPI-P Release 1",90)',vr:"CS",name:"VideoWhiteCompression",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",a0)':{tag:'(0019,"SPI-P Release 1",a0)',vr:"US",name:"Angulation",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1",a1)':{tag:'(0019,"SPI-P Release 1",a1)',vr:"US",name:"Rotation",vm:"1",version:"PrivateTag"},'(0021,"SPI-P Release 1",12)':{tag:'(0021,"SPI-P Release 1",12)',vr:"LT",name:"SeriesUniqueIdentifier",vm:"1",version:"PrivateTag"},'(0021,"SPI-P Release 1",14)':{tag:'(0021,"SPI-P Release 1",14)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",00)':{tag:'(0029,"SPI-P Release 1",00)',vr:"DS",name:"Unknown",vm:"4",version:"PrivateTag"},'(0029,"SPI-P Release 1",20)':{tag:'(0029,"SPI-P Release 1",20)',vr:"DS",name:"PixelAspectRatio",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",25)':{tag:'(0029,"SPI-P Release 1",25)',vr:"LO",name:"ProcessedPixelDataQuality",vm:"1-n",version:"PrivateTag"},'(0029,"SPI-P Release 1",30)':{tag:'(0029,"SPI-P Release 1",30)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",38)':{tag:'(0029,"SPI-P Release 1",38)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",60)':{tag:'(0029,"SPI-P Release 1",60)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",61)':{tag:'(0029,"SPI-P Release 1",61)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",67)':{tag:'(0029,"SPI-P Release 1",67)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",70)':{tag:'(0029,"SPI-P Release 1",70)',vr:"LT",name:"WindowID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",71)':{tag:'(0029,"SPI-P Release 1",71)',vr:"CS",name:"VideoInvertSubtracted",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",72)':{tag:'(0029,"SPI-P Release 1",72)',vr:"CS",name:"VideoInvertNonsubtracted",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",77)':{tag:'(0029,"SPI-P Release 1",77)',vr:"CS",name:"WindowSelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",78)':{tag:'(0029,"SPI-P Release 1",78)',vr:"LT",name:"ECGDisplayPrintingID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",79)':{tag:'(0029,"SPI-P Release 1",79)',vr:"CS",name:"ECGDisplayPrinting",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",7e)':{tag:'(0029,"SPI-P Release 1",7e)',vr:"CS",name:"ECGDisplayPrintingEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",7f)':{tag:'(0029,"SPI-P Release 1",7f)',vr:"CS",name:"ECGDisplayPrintingSelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",80)':{tag:'(0029,"SPI-P Release 1",80)',vr:"LT",name:"PhysiologicalDisplayID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",81)':{tag:'(0029,"SPI-P Release 1",81)',vr:"US",name:"PreferredPhysiologicalChannelDisplay",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",8e)':{tag:'(0029,"SPI-P Release 1",8e)',vr:"CS",name:"PhysiologicalDisplayEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",8f)':{tag:'(0029,"SPI-P Release 1",8f)',vr:"CS",name:"PhysiologicalDisplaySelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",c0)':{tag:'(0029,"SPI-P Release 1",c0)',vr:"LT",name:"FunctionalShutterID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",c1)':{tag:'(0029,"SPI-P Release 1",c1)',vr:"US",name:"FieldOfShutter",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",c5)':{tag:'(0029,"SPI-P Release 1",c5)',vr:"LT",name:"FieldOfShutterRectangle",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",ce)':{tag:'(0029,"SPI-P Release 1",ce)',vr:"CS",name:"ShutterEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1",cf)':{tag:'(0029,"SPI-P Release 1",cf)',vr:"CS",name:"ShutterSelectStatus",vm:"1",version:"PrivateTag"},'(7FE1,"SPI-P Release 1",10)':{tag:'(7FE1,"SPI-P Release 1",10)',vr:"ox",name:"PixelData",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1;1",c0)':{tag:'(0009,"SPI-P Release 1;1",c0)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P Release 1;1",c1)':{tag:'(0009,"SPI-P Release 1;1",c1)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",00)':{tag:'(0019,"SPI-P Release 1;1",00)',vr:"UN",name:"PhysiologicalDataType",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",01)':{tag:'(0019,"SPI-P Release 1;1",01)',vr:"UN",name:"PhysiologicalDataChannelAndKind",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",02)':{tag:'(0019,"SPI-P Release 1;1",02)',vr:"US",name:"SampleBitsAllocated",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",03)':{tag:'(0019,"SPI-P Release 1;1",03)',vr:"US",name:"SampleBitsStored",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",04)':{tag:'(0019,"SPI-P Release 1;1",04)',vr:"US",name:"SampleHighBit",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",05)':{tag:'(0019,"SPI-P Release 1;1",05)',vr:"US",name:"SampleRepresentation",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",06)':{tag:'(0019,"SPI-P Release 1;1",06)',vr:"UN",name:"SmallestSampleValue",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",07)':{tag:'(0019,"SPI-P Release 1;1",07)',vr:"UN",name:"LargestSampleValue",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",08)':{tag:'(0019,"SPI-P Release 1;1",08)',vr:"UN",name:"NumberOfSamples",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",09)':{tag:'(0019,"SPI-P Release 1;1",09)',vr:"UN",name:"SampleData",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",0a)':{tag:'(0019,"SPI-P Release 1;1",0a)',vr:"UN",name:"SampleRate",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",10)':{tag:'(0019,"SPI-P Release 1;1",10)',vr:"UN",name:"PhysiologicalDataType2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",11)':{tag:'(0019,"SPI-P Release 1;1",11)',vr:"UN",name:"PhysiologicalDataChannelAndKind2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",12)':{tag:'(0019,"SPI-P Release 1;1",12)',vr:"US",name:"SampleBitsAllocated2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",13)':{tag:'(0019,"SPI-P Release 1;1",13)',vr:"US",name:"SampleBitsStored2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",14)':{tag:'(0019,"SPI-P Release 1;1",14)',vr:"US",name:"SampleHighBit2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",15)':{tag:'(0019,"SPI-P Release 1;1",15)',vr:"US",name:"SampleRepresentation2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",16)':{tag:'(0019,"SPI-P Release 1;1",16)',vr:"UN",name:"SmallestSampleValue2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",17)':{tag:'(0019,"SPI-P Release 1;1",17)',vr:"UN",name:"LargestSampleValue2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",18)':{tag:'(0019,"SPI-P Release 1;1",18)',vr:"UN",name:"NumberOfSamples2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",19)':{tag:'(0019,"SPI-P Release 1;1",19)',vr:"UN",name:"SampleData2",vm:"1",version:"PrivateTag"},'(0019,"SPI-P Release 1;1",1a)':{tag:'(0019,"SPI-P Release 1;1",1a)',vr:"UN",name:"SampleRate2",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",00)':{tag:'(0029,"SPI-P Release 1;1",00)',vr:"LT",name:"ZoomID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",01)':{tag:'(0029,"SPI-P Release 1;1",01)',vr:"DS",name:"ZoomRectangle",vm:"1-n",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",03)':{tag:'(0029,"SPI-P Release 1;1",03)',vr:"DS",name:"ZoomFactor",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",04)':{tag:'(0029,"SPI-P Release 1;1",04)',vr:"US",name:"ZoomFunction",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",0e)':{tag:'(0029,"SPI-P Release 1;1",0e)',vr:"CS",name:"ZoomEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",0f)':{tag:'(0029,"SPI-P Release 1;1",0f)',vr:"CS",name:"ZoomSelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",40)':{tag:'(0029,"SPI-P Release 1;1",40)',vr:"LT",name:"MagnifyingGlassID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",41)':{tag:'(0029,"SPI-P Release 1;1",41)',vr:"DS",name:"MagnifyingGlassRectangle",vm:"1-n",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",43)':{tag:'(0029,"SPI-P Release 1;1",43)',vr:"DS",name:"MagnifyingGlassFactor",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",44)':{tag:'(0029,"SPI-P Release 1;1",44)',vr:"US",name:"MagnifyingGlassFunction",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",4e)':{tag:'(0029,"SPI-P Release 1;1",4e)',vr:"CS",name:"MagnifyingGlassEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;1",4f)':{tag:'(0029,"SPI-P Release 1;1",4f)',vr:"CS",name:"MagnifyingGlassSelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;2",00)':{tag:'(0029,"SPI-P Release 1;2",00)',vr:"LT",name:"SubtractionMaskID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;2",04)':{tag:'(0029,"SPI-P Release 1;2",04)',vr:"UN",name:"MaskingFunction",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;2",0c)':{tag:'(0029,"SPI-P Release 1;2",0c)',vr:"UN",name:"ProprietaryMaskingParameters",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;2",1e)':{tag:'(0029,"SPI-P Release 1;2",1e)',vr:"CS",name:"SubtractionMaskEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;2",1f)':{tag:'(0029,"SPI-P Release 1;2",1f)',vr:"CS",name:"SubtractionMaskSelectStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",00)':{tag:'(0029,"SPI-P Release 1;3",00)',vr:"LT",name:"ImageEnhancementID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",01)':{tag:'(0029,"SPI-P Release 1;3",01)',vr:"LT",name:"ImageEnhancement",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",02)':{tag:'(0029,"SPI-P Release 1;3",02)',vr:"LT",name:"ConvolutionID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",03)':{tag:'(0029,"SPI-P Release 1;3",03)',vr:"LT",name:"ConvolutionType",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",04)':{tag:'(0029,"SPI-P Release 1;3",04)',vr:"LT",name:"ConvolutionKernelSizeID",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",05)':{tag:'(0029,"SPI-P Release 1;3",05)',vr:"US",name:"ConvolutionKernelSize",vm:"2",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",06)':{tag:'(0029,"SPI-P Release 1;3",06)',vr:"US",name:"ConvolutionKernel",vm:"1-n",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",0c)':{tag:'(0029,"SPI-P Release 1;3",0c)',vr:"DS",name:"EnhancementGain",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",1e)':{tag:'(0029,"SPI-P Release 1;3",1e)',vr:"CS",name:"ImageEnhancementEnableStatus",vm:"1",version:"PrivateTag"},'(0029,"SPI-P Release 1;3",1f)':{tag:'(0029,"SPI-P Release 1;3",1f)',vr:"CS",name:"ImageEnhancementSelectStatus",vm:"1",version:"PrivateTag"},'(0011,"SPI-P Release 2;1",18)':{tag:'(0011,"SPI-P Release 2;1",18)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0023,"SPI-P Release 2;1",0d)':{tag:'(0023,"SPI-P Release 2;1",0d)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(0023,"SPI-P Release 2;1",0e)':{tag:'(0023,"SPI-P Release 2;1",0e)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",00)':{tag:'(0009,"SPI-P-GV-CT Release 1",00)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",10)':{tag:'(0009,"SPI-P-GV-CT Release 1",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",20)':{tag:'(0009,"SPI-P-GV-CT Release 1",20)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",30)':{tag:'(0009,"SPI-P-GV-CT Release 1",30)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",40)':{tag:'(0009,"SPI-P-GV-CT Release 1",40)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",50)':{tag:'(0009,"SPI-P-GV-CT Release 1",50)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",60)':{tag:'(0009,"SPI-P-GV-CT Release 1",60)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",70)':{tag:'(0009,"SPI-P-GV-CT Release 1",70)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",75)':{tag:'(0009,"SPI-P-GV-CT Release 1",75)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",80)':{tag:'(0009,"SPI-P-GV-CT Release 1",80)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"SPI-P-GV-CT Release 1",90)':{tag:'(0009,"SPI-P-GV-CT Release 1",90)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",08)':{tag:'(0019,"SPI-P-GV-CT Release 1",08)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",09)':{tag:'(0019,"SPI-P-GV-CT Release 1",09)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",0a)':{tag:'(0019,"SPI-P-GV-CT Release 1",0a)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",10)':{tag:'(0019,"SPI-P-GV-CT Release 1",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",20)':{tag:'(0019,"SPI-P-GV-CT Release 1",20)',vr:"TM",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",50)':{tag:'(0019,"SPI-P-GV-CT Release 1",50)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",60)':{tag:'(0019,"SPI-P-GV-CT Release 1",60)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",61)':{tag:'(0019,"SPI-P-GV-CT Release 1",61)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",63)':{tag:'(0019,"SPI-P-GV-CT Release 1",63)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",64)':{tag:'(0019,"SPI-P-GV-CT Release 1",64)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",65)':{tag:'(0019,"SPI-P-GV-CT Release 1",65)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",70)':{tag:'(0019,"SPI-P-GV-CT Release 1",70)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",80)':{tag:'(0019,"SPI-P-GV-CT Release 1",80)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",81)':{tag:'(0019,"SPI-P-GV-CT Release 1",81)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",90)':{tag:'(0019,"SPI-P-GV-CT Release 1",90)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",a0)':{tag:'(0019,"SPI-P-GV-CT Release 1",a0)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",a1)':{tag:'(0019,"SPI-P-GV-CT Release 1",a1)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",a2)':{tag:'(0019,"SPI-P-GV-CT Release 1",a2)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",a3)':{tag:'(0019,"SPI-P-GV-CT Release 1",a3)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",b0)':{tag:'(0019,"SPI-P-GV-CT Release 1",b0)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-GV-CT Release 1",b1)':{tag:'(0019,"SPI-P-GV-CT Release 1",b1)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",20)':{tag:'(0021,"SPI-P-GV-CT Release 1",20)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",30)':{tag:'(0021,"SPI-P-GV-CT Release 1",30)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",40)':{tag:'(0021,"SPI-P-GV-CT Release 1",40)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",50)':{tag:'(0021,"SPI-P-GV-CT Release 1",50)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",60)':{tag:'(0021,"SPI-P-GV-CT Release 1",60)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",70)':{tag:'(0021,"SPI-P-GV-CT Release 1",70)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",80)':{tag:'(0021,"SPI-P-GV-CT Release 1",80)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",90)':{tag:'(0021,"SPI-P-GV-CT Release 1",90)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",a0)':{tag:'(0021,"SPI-P-GV-CT Release 1",a0)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",a1)':{tag:'(0021,"SPI-P-GV-CT Release 1",a1)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",a2)':{tag:'(0021,"SPI-P-GV-CT Release 1",a2)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",a3)':{tag:'(0021,"SPI-P-GV-CT Release 1",a3)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",a4)':{tag:'(0021,"SPI-P-GV-CT Release 1",a4)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",b0)':{tag:'(0021,"SPI-P-GV-CT Release 1",b0)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-GV-CT Release 1",c0)':{tag:'(0021,"SPI-P-GV-CT Release 1",c0)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",10)':{tag:'(0029,"SPI-P-GV-CT Release 1",10)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",30)':{tag:'(0029,"SPI-P-GV-CT Release 1",30)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",31)':{tag:'(0029,"SPI-P-GV-CT Release 1",31)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",32)':{tag:'(0029,"SPI-P-GV-CT Release 1",32)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",33)':{tag:'(0029,"SPI-P-GV-CT Release 1",33)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",80)':{tag:'(0029,"SPI-P-GV-CT Release 1",80)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",90)':{tag:'(0029,"SPI-P-GV-CT Release 1",90)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",d0)':{tag:'(0029,"SPI-P-GV-CT Release 1",d0)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-GV-CT Release 1",d1)':{tag:'(0029,"SPI-P-GV-CT Release 1",d1)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-PCR Release 2",30)':{tag:'(0019,"SPI-P-PCR Release 2",30)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-Private-CWS Release 1",00)':{tag:'(0021,"SPI-P-Private-CWS Release 1",00)',vr:"LT",name:"WindowOfImagesID",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-Private-CWS Release 1",01)':{tag:'(0021,"SPI-P-Private-CWS Release 1",01)',vr:"CS",name:"WindowOfImagesType",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-Private-CWS Release 1",02)':{tag:'(0021,"SPI-P-Private-CWS Release 1",02)',vr:"IS",name:"WindowOfImagesScope",vm:"1-n",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",10)':{tag:'(0019,"SPI-P-Private-DCI Release 1",10)',vr:"UN",name:"ECGTimeMapDataBitsAllocated",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",11)':{tag:'(0019,"SPI-P-Private-DCI Release 1",11)',vr:"UN",name:"ECGTimeMapDataBitsStored",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",12)':{tag:'(0019,"SPI-P-Private-DCI Release 1",12)',vr:"UN",name:"ECGTimeMapDataHighBit",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",13)':{tag:'(0019,"SPI-P-Private-DCI Release 1",13)',vr:"UN",name:"ECGTimeMapDataRepresentation",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",14)':{tag:'(0019,"SPI-P-Private-DCI Release 1",14)',vr:"UN",name:"ECGTimeMapDataSmallestDataValue",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",15)':{tag:'(0019,"SPI-P-Private-DCI Release 1",15)',vr:"UN",name:"ECGTimeMapDataLargestDataValue",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",16)':{tag:'(0019,"SPI-P-Private-DCI Release 1",16)',vr:"UN",name:"ECGTimeMapDataNumberOfDataValues",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private-DCI Release 1",17)':{tag:'(0019,"SPI-P-Private-DCI Release 1",17)',vr:"UN",name:"ECGTimeMapData",vm:"1",version:"PrivateTag"},'(0021,"SPI-P-Private_CDS Release 1",40)':{tag:'(0021,"SPI-P-Private_CDS Release 1",40)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_CDS Release 1",00)':{tag:'(0029,"SPI-P-Private_CDS Release 1",00)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private_ICS Release 1",30)':{tag:'(0019,"SPI-P-Private_ICS Release 1",30)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-Private_ICS Release 1",31)':{tag:'(0019,"SPI-P-Private_ICS Release 1",31)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",08)':{tag:'(0029,"SPI-P-Private_ICS Release 1",08)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",0f)':{tag:'(0029,"SPI-P-Private_ICS Release 1",0f)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",10)':{tag:'(0029,"SPI-P-Private_ICS Release 1",10)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",1b)':{tag:'(0029,"SPI-P-Private_ICS Release 1",1b)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",1c)':{tag:'(0029,"SPI-P-Private_ICS Release 1",1c)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",21)':{tag:'(0029,"SPI-P-Private_ICS Release 1",21)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",43)':{tag:'(0029,"SPI-P-Private_ICS Release 1",43)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",44)':{tag:'(0029,"SPI-P-Private_ICS Release 1",44)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",4C)':{tag:'(0029,"SPI-P-Private_ICS Release 1",4C)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",67)':{tag:'(0029,"SPI-P-Private_ICS Release 1",67)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",68)':{tag:'(0029,"SPI-P-Private_ICS Release 1",68)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",6A)':{tag:'(0029,"SPI-P-Private_ICS Release 1",6A)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1",6B)':{tag:'(0029,"SPI-P-Private_ICS Release 1",6B)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",00)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",00)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",05)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",05)',vr:"FL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",06)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",06)',vr:"FL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",20)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",20)',vr:"FL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",21)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",21)',vr:"FL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;1",CD)':{tag:'(0029,"SPI-P-Private_ICS Release 1;1",CD)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",00)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",00)',vr:"FD",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",01)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",01)',vr:"FD",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",02)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",02)',vr:"FD",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",03)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",03)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",04)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",04)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;2",05)':{tag:'(0029,"SPI-P-Private_ICS Release 1;2",05)',vr:"SL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C0)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C0)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C1)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C1)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C2)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C2)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C3)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C3)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C4)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C4)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;3",C5)':{tag:'(0029,"SPI-P-Private_ICS Release 1;3",C5)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;4",02)':{tag:'(0029,"SPI-P-Private_ICS Release 1;4",02)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;4",9A)':{tag:'(0029,"SPI-P-Private_ICS Release 1;4",9A)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;4",E0)':{tag:'(0029,"SPI-P-Private_ICS Release 1;4",E0)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;5",50)':{tag:'(0029,"SPI-P-Private_ICS Release 1;5",50)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"SPI-P-Private_ICS Release 1;5",55)':{tag:'(0029,"SPI-P-Private_ICS Release 1;5",55)',vr:"CS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-XSB-DCI Release 1",10)':{tag:'(0019,"SPI-P-XSB-DCI Release 1",10)',vr:"LT",name:"VideoBeamBoost",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-XSB-DCI Release 1",11)':{tag:'(0019,"SPI-P-XSB-DCI Release 1",11)',vr:"US",name:"ChannelGeneratingVideoSync",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-XSB-DCI Release 1",12)':{tag:'(0019,"SPI-P-XSB-DCI Release 1",12)',vr:"US",name:"VideoGain",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-XSB-DCI Release 1",13)':{tag:'(0019,"SPI-P-XSB-DCI Release 1",13)',vr:"US",name:"VideoOffset",vm:"1",version:"PrivateTag"},'(0019,"SPI-P-XSB-DCI Release 1",20)':{tag:'(0019,"SPI-P-XSB-DCI Release 1",20)',vr:"DS",name:"RTDDataCompressionFactor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",11)':{tag:'(0029,"Silhouette Annot V1.0",11)',vr:"IS",name:"AnnotationName",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",12)':{tag:'(0029,"Silhouette Annot V1.0",12)',vr:"LT",name:"AnnotationFont",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",13)':{tag:'(0029,"Silhouette Annot V1.0",13)',vr:"LT",name:"AnnotationTextForegroundColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",14)':{tag:'(0029,"Silhouette Annot V1.0",14)',vr:"LT",name:"AnnotationTextBackgroundColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",15)':{tag:'(0029,"Silhouette Annot V1.0",15)',vr:"UL",name:"AnnotationTextBackingMode",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",16)':{tag:'(0029,"Silhouette Annot V1.0",16)',vr:"UL",name:"AnnotationTextJustification",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",17)':{tag:'(0029,"Silhouette Annot V1.0",17)',vr:"UL",name:"AnnotationTextLocation",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",18)':{tag:'(0029,"Silhouette Annot V1.0",18)',vr:"LT",name:"AnnotationTextString",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",19)':{tag:'(0029,"Silhouette Annot V1.0",19)',vr:"UL",name:"AnnotationTextAttachMode",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",20)':{tag:'(0029,"Silhouette Annot V1.0",20)',vr:"UL",name:"AnnotationTextCursorMode",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",21)':{tag:'(0029,"Silhouette Annot V1.0",21)',vr:"UL",name:"AnnotationTextShadowOffsetX",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",22)':{tag:'(0029,"Silhouette Annot V1.0",22)',vr:"UL",name:"AnnotationTextShadowOffsetY",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",23)':{tag:'(0029,"Silhouette Annot V1.0",23)',vr:"LT",name:"AnnotationLineColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",24)':{tag:'(0029,"Silhouette Annot V1.0",24)',vr:"UL",name:"AnnotationLineThickness",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",25)':{tag:'(0029,"Silhouette Annot V1.0",25)',vr:"UL",name:"AnnotationLineType",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",26)':{tag:'(0029,"Silhouette Annot V1.0",26)',vr:"UL",name:"AnnotationLineStyle",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",27)':{tag:'(0029,"Silhouette Annot V1.0",27)',vr:"UL",name:"AnnotationLineDashLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",28)':{tag:'(0029,"Silhouette Annot V1.0",28)',vr:"UL",name:"AnnotationLineAttachMode",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",29)':{tag:'(0029,"Silhouette Annot V1.0",29)',vr:"UL",name:"AnnotationLinePointCount",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",30)':{tag:'(0029,"Silhouette Annot V1.0",30)',vr:"FD",name:"AnnotationLinePoints",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",31)':{tag:'(0029,"Silhouette Annot V1.0",31)',vr:"UL",name:"AnnotationLineControlSize",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",32)':{tag:'(0029,"Silhouette Annot V1.0",32)',vr:"LT",name:"AnnotationMarkerColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",33)':{tag:'(0029,"Silhouette Annot V1.0",33)',vr:"UL",name:"AnnotationMarkerType",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",34)':{tag:'(0029,"Silhouette Annot V1.0",34)',vr:"UL",name:"AnnotationMarkerSize",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",35)':{tag:'(0029,"Silhouette Annot V1.0",35)',vr:"FD",name:"AnnotationMarkerLocation",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",36)':{tag:'(0029,"Silhouette Annot V1.0",36)',vr:"UL",name:"AnnotationMarkerAttachMode",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",37)':{tag:'(0029,"Silhouette Annot V1.0",37)',vr:"LT",name:"AnnotationGeomColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",38)':{tag:'(0029,"Silhouette Annot V1.0",38)',vr:"UL",name:"AnnotationGeomThickness",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",39)':{tag:'(0029,"Silhouette Annot V1.0",39)',vr:"UL",name:"AnnotationGeomLineStyle",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",40)':{tag:'(0029,"Silhouette Annot V1.0",40)',vr:"UL",name:"AnnotationGeomDashLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",41)':{tag:'(0029,"Silhouette Annot V1.0",41)',vr:"UL",name:"AnnotationGeomFillPattern",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",42)':{tag:'(0029,"Silhouette Annot V1.0",42)',vr:"UL",name:"AnnotationInteractivity",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",43)':{tag:'(0029,"Silhouette Annot V1.0",43)',vr:"FD",name:"AnnotationArrowLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",44)':{tag:'(0029,"Silhouette Annot V1.0",44)',vr:"FD",name:"AnnotationArrowAngle",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Annot V1.0",45)':{tag:'(0029,"Silhouette Annot V1.0",45)',vr:"UL",name:"AnnotationDontSave",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Graphics Export V1.0",00)':{tag:'(0029,"Silhouette Graphics Export V1.0",00)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",11)':{tag:'(0029,"Silhouette Line V1.0",11)',vr:"IS",name:"LineName",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",12)':{tag:'(0029,"Silhouette Line V1.0",12)',vr:"LT",name:"LineNameFont",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",13)':{tag:'(0029,"Silhouette Line V1.0",13)',vr:"UL",name:"LineNameDisplay",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",14)':{tag:'(0029,"Silhouette Line V1.0",14)',vr:"LT",name:"LineNormalColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",15)':{tag:'(0029,"Silhouette Line V1.0",15)',vr:"UL",name:"LineType",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",16)':{tag:'(0029,"Silhouette Line V1.0",16)',vr:"UL",name:"LineThickness",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",17)':{tag:'(0029,"Silhouette Line V1.0",17)',vr:"UL",name:"LineStyle",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",18)':{tag:'(0029,"Silhouette Line V1.0",18)',vr:"UL",name:"LineDashLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",19)':{tag:'(0029,"Silhouette Line V1.0",19)',vr:"UL",name:"LineInteractivity",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",20)':{tag:'(0029,"Silhouette Line V1.0",20)',vr:"LT",name:"LineMeasurementColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",21)':{tag:'(0029,"Silhouette Line V1.0",21)',vr:"LT",name:"LineMeasurementFont",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",22)':{tag:'(0029,"Silhouette Line V1.0",22)',vr:"UL",name:"LineMeasurementDashLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",23)':{tag:'(0029,"Silhouette Line V1.0",23)',vr:"UL",name:"LinePointSpace",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",24)':{tag:'(0029,"Silhouette Line V1.0",24)',vr:"FD",name:"LinePoints",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",25)':{tag:'(0029,"Silhouette Line V1.0",25)',vr:"UL",name:"LineControlPointSize",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",26)':{tag:'(0029,"Silhouette Line V1.0",26)',vr:"UL",name:"LineControlPointSpace",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",27)':{tag:'(0029,"Silhouette Line V1.0",27)',vr:"FD",name:"LineControlPoints",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",28)':{tag:'(0029,"Silhouette Line V1.0",28)',vr:"LT",name:"LineLabel",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Line V1.0",29)':{tag:'(0029,"Silhouette Line V1.0",29)',vr:"UL",name:"LineDontSave",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",11)':{tag:'(0029,"Silhouette ROI V1.0",11)',vr:"IS",name:"ROIName",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",12)':{tag:'(0029,"Silhouette ROI V1.0",12)',vr:"LT",name:"ROINameFont",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",13)':{tag:'(0029,"Silhouette ROI V1.0",13)',vr:"LT",name:"ROINormalColor",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",14)':{tag:'(0029,"Silhouette ROI V1.0",14)',vr:"UL",name:"ROIFillPattern",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",15)':{tag:'(0029,"Silhouette ROI V1.0",15)',vr:"UL",name:"ROIBpSeg",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",16)':{tag:'(0029,"Silhouette ROI V1.0",16)',vr:"UN",name:"ROIBpSegPairs",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",17)':{tag:'(0029,"Silhouette ROI V1.0",17)',vr:"UL",name:"ROISeedSpace",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",18)':{tag:'(0029,"Silhouette ROI V1.0",18)',vr:"UN",name:"ROISeeds",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",19)':{tag:'(0029,"Silhouette ROI V1.0",19)',vr:"UL",name:"ROILineThickness",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",20)':{tag:'(0029,"Silhouette ROI V1.0",20)',vr:"UL",name:"ROILineStyle",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",21)':{tag:'(0029,"Silhouette ROI V1.0",21)',vr:"UL",name:"ROILineDashLength",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",22)':{tag:'(0029,"Silhouette ROI V1.0",22)',vr:"UL",name:"ROIInteractivity",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",23)':{tag:'(0029,"Silhouette ROI V1.0",23)',vr:"UL",name:"ROINamePosition",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",24)':{tag:'(0029,"Silhouette ROI V1.0",24)',vr:"UL",name:"ROINameDisplay",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",25)':{tag:'(0029,"Silhouette ROI V1.0",25)',vr:"LT",name:"ROILabel",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",26)':{tag:'(0029,"Silhouette ROI V1.0",26)',vr:"UL",name:"ROIShape",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",27)':{tag:'(0029,"Silhouette ROI V1.0",27)',vr:"FD",name:"ROIShapeTilt",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",28)':{tag:'(0029,"Silhouette ROI V1.0",28)',vr:"UL",name:"ROIShapePointsCount",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",29)':{tag:'(0029,"Silhouette ROI V1.0",29)',vr:"UL",name:"ROIShapePointsSpace",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",30)':{tag:'(0029,"Silhouette ROI V1.0",30)',vr:"FD",name:"ROIShapePoints",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",31)':{tag:'(0029,"Silhouette ROI V1.0",31)',vr:"UL",name:"ROIShapeControlPointsCount",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",32)':{tag:'(0029,"Silhouette ROI V1.0",32)',vr:"UL",name:"ROIShapeControlPointsSpace",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",33)':{tag:'(0029,"Silhouette ROI V1.0",33)',vr:"FD",name:"ROIShapeControlPoints",vm:"1",version:"PrivateTag"},'(0029,"Silhouette ROI V1.0",34)':{tag:'(0029,"Silhouette ROI V1.0",34)',vr:"UL",name:"ROIDontSave",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Sequence Ids V1.0",41)':{tag:'(0029,"Silhouette Sequence Ids V1.0",41)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Sequence Ids V1.0",42)':{tag:'(0029,"Silhouette Sequence Ids V1.0",42)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette Sequence Ids V1.0",43)':{tag:'(0029,"Silhouette Sequence Ids V1.0",43)',vr:"SQ",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",13)':{tag:'(0029,"Silhouette V1.0",13)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",14)':{tag:'(0029,"Silhouette V1.0",14)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",17)':{tag:'(0029,"Silhouette V1.0",17)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",18)':{tag:'(0029,"Silhouette V1.0",18)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",19)':{tag:'(0029,"Silhouette V1.0",19)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",1a)':{tag:'(0029,"Silhouette V1.0",1a)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",1b)':{tag:'(0029,"Silhouette V1.0",1b)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",1c)':{tag:'(0029,"Silhouette V1.0",1c)',vr:"UL",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",1d)':{tag:'(0029,"Silhouette V1.0",1d)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",1e)':{tag:'(0029,"Silhouette V1.0",1e)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",21)':{tag:'(0029,"Silhouette V1.0",21)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",22)':{tag:'(0029,"Silhouette V1.0",22)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",23)':{tag:'(0029,"Silhouette V1.0",23)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",24)':{tag:'(0029,"Silhouette V1.0",24)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",25)':{tag:'(0029,"Silhouette V1.0",25)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",27)':{tag:'(0029,"Silhouette V1.0",27)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",28)':{tag:'(0029,"Silhouette V1.0",28)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",29)':{tag:'(0029,"Silhouette V1.0",29)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",30)':{tag:'(0029,"Silhouette V1.0",30)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",52)':{tag:'(0029,"Silhouette V1.0",52)',vr:"US",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",53)':{tag:'(0029,"Silhouette V1.0",53)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",54)':{tag:'(0029,"Silhouette V1.0",54)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",55)':{tag:'(0029,"Silhouette V1.0",55)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",56)':{tag:'(0029,"Silhouette V1.0",56)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0029,"Silhouette V1.0",57)':{tag:'(0029,"Silhouette V1.0",57)',vr:"UN",name:"Unknown",vm:"1",version:"PrivateTag"},'(0135,"SONOWAND AS",10)':{tag:'(0135,"SONOWAND AS",10)',vr:"LO",name:"UltrasoundScannerName",vm:"1",version:"PrivateTag"},'(0135,"SONOWAND AS",11)':{tag:'(0135,"SONOWAND AS",11)',vr:"LO",name:"TransducerSerial",vm:"1",version:"PrivateTag"},'(0135,"SONOWAND AS",12)':{tag:'(0135,"SONOWAND AS",12)',vr:"LO",name:"ProbeApplication",vm:"1",version:"PrivateTag"},'(0017,"SVISION",00)':{tag:'(0017,"SVISION",00)',vr:"LO",name:"ExtendedBodyPart",vm:"1",version:"PrivateTag"},'(0017,"SVISION",10)':{tag:'(0017,"SVISION",10)',vr:"LO",name:"ExtendedViewPosition",vm:"1",version:"PrivateTag"},'(0017,"SVISION",F0)':{tag:'(0017,"SVISION",F0)',vr:"IS",name:"ImagesSOPClass",vm:"1",version:"PrivateTag"},'(0019,"SVISION",00)':{tag:'(0019,"SVISION",00)',vr:"IS",name:"AECField",vm:"1",version:"PrivateTag"},'(0019,"SVISION",01)':{tag:'(0019,"SVISION",01)',vr:"IS",name:"AECFilmScreen",vm:"1",version:"PrivateTag"},'(0019,"SVISION",02)':{tag:'(0019,"SVISION",02)',vr:"IS",name:"AECDensity",vm:"1",version:"PrivateTag"},'(0019,"SVISION",10)':{tag:'(0019,"SVISION",10)',vr:"IS",name:"PatientThickness",vm:"1",version:"PrivateTag"},'(0019,"SVISION",18)':{tag:'(0019,"SVISION",18)',vr:"IS",name:"BeamDistance",vm:"1",version:"PrivateTag"},'(0019,"SVISION",20)':{tag:'(0019,"SVISION",20)',vr:"IS",name:"WorkstationNumber",vm:"1",version:"PrivateTag"},'(0019,"SVISION",28)':{tag:'(0019,"SVISION",28)',vr:"IS",name:"TubeNumber",vm:"1",version:"PrivateTag"},'(0019,"SVISION",30)':{tag:'(0019,"SVISION",30)',vr:"IS",name:"BuckyGrid",vm:"1",version:"PrivateTag"},'(0019,"SVISION",34)':{tag:'(0019,"SVISION",34)',vr:"IS",name:"Focus",vm:"1",version:"PrivateTag"},'(0019,"SVISION",38)':{tag:'(0019,"SVISION",38)',vr:"IS",name:"Child",vm:"1",version:"PrivateTag"},'(0019,"SVISION",40)':{tag:'(0019,"SVISION",40)',vr:"IS",name:"CollimatorDistanceX",vm:"1",version:"PrivateTag"},'(0019,"SVISION",41)':{tag:'(0019,"SVISION",41)',vr:"IS",name:"CollimatorDistanceY",vm:"1",version:"PrivateTag"},'(0019,"SVISION",50)':{tag:'(0019,"SVISION",50)',vr:"IS",name:"CentralBeamHeight",vm:"1",version:"PrivateTag"},'(0019,"SVISION",60)':{tag:'(0019,"SVISION",60)',vr:"IS",name:"BuckyAngle",vm:"1",version:"PrivateTag"},'(0019,"SVISION",68)':{tag:'(0019,"SVISION",68)',vr:"IS",name:"CArmAngle",vm:"1",version:"PrivateTag"},'(0019,"SVISION",69)':{tag:'(0019,"SVISION",69)',vr:"IS",name:"CollimatorAngle",vm:"1",version:"PrivateTag"},'(0019,"SVISION",70)':{tag:'(0019,"SVISION",70)',vr:"IS",name:"FilterNumber",vm:"1",version:"PrivateTag"},'(0019,"SVISION",74)':{tag:'(0019,"SVISION",74)',vr:"LO",name:"FilterMaterial1",vm:"1",version:"PrivateTag"},'(0019,"SVISION",75)':{tag:'(0019,"SVISION",75)',vr:"LO",name:"FilterMaterial2",vm:"1",version:"PrivateTag"},'(0019,"SVISION",78)':{tag:'(0019,"SVISION",78)',vr:"DS",name:"FilterThickness1",vm:"1",version:"PrivateTag"},'(0019,"SVISION",79)':{tag:'(0019,"SVISION",79)',vr:"DS",name:"FilterThickness2",vm:"1",version:"PrivateTag"},'(0019,"SVISION",80)':{tag:'(0019,"SVISION",80)',vr:"IS",name:"BuckyFormat",vm:"1",version:"PrivateTag"},'(0019,"SVISION",81)':{tag:'(0019,"SVISION",81)',vr:"IS",name:"ObjectPosition",vm:"1",version:"PrivateTag"},'(0019,"SVISION",90)':{tag:'(0019,"SVISION",90)',vr:"LO",name:"DeskCommand",vm:"1",version:"PrivateTag"},'(0019,"SVISION",A0)':{tag:'(0019,"SVISION",A0)',vr:"DS",name:"ExtendedExposureTime",vm:"1",version:"PrivateTag"},'(0019,"SVISION",A1)':{tag:'(0019,"SVISION",A1)',vr:"DS",name:"ActualExposureTime",vm:"1",version:"PrivateTag"},'(0019,"SVISION",A8)':{tag:'(0019,"SVISION",A8)',vr:"DS",name:"ExtendedXRayTubeCurrent",vm:"1",version:"PrivateTag"},'(0021,"SVISION",00)':{tag:'(0021,"SVISION",00)',vr:"DS",name:"NoiseReduction",vm:"1",version:"PrivateTag"},'(0021,"SVISION",01)':{tag:'(0021,"SVISION",01)',vr:"DS",name:"ContrastAmplification",vm:"1",version:"PrivateTag"},'(0021,"SVISION",02)':{tag:'(0021,"SVISION",02)',vr:"DS",name:"EdgeContrastBoosting",vm:"1",version:"PrivateTag"},'(0021,"SVISION",03)':{tag:'(0021,"SVISION",03)',vr:"DS",name:"LatitudeReduction",vm:"1",version:"PrivateTag"},'(0021,"SVISION",10)':{tag:'(0021,"SVISION",10)',vr:"LO",name:"FindRangeAlgorithm",vm:"1",version:"PrivateTag"},'(0021,"SVISION",11)':{tag:'(0021,"SVISION",11)',vr:"DS",name:"ThresholdCAlgorithm",vm:"1",version:"PrivateTag"},'(0021,"SVISION",20)':{tag:'(0021,"SVISION",20)',vr:"LO",name:"SensometricCurve",vm:"1",version:"PrivateTag"},'(0021,"SVISION",30)':{tag:'(0021,"SVISION",30)',vr:"DS",name:"LowerWindowOffset",vm:"1",version:"PrivateTag"},'(0021,"SVISION",31)':{tag:'(0021,"SVISION",31)',vr:"DS",name:"UpperWindowOffset",vm:"1",version:"PrivateTag"},'(0021,"SVISION",40)':{tag:'(0021,"SVISION",40)',vr:"DS",name:"MinPrintableDensity",vm:"1",version:"PrivateTag"},'(0021,"SVISION",41)':{tag:'(0021,"SVISION",41)',vr:"DS",name:"MaxPrintableDensity",vm:"1",version:"PrivateTag"},'(0021,"SVISION",90)':{tag:'(0021,"SVISION",90)',vr:"DS",name:"Brightness",vm:"1",version:"PrivateTag"},'(0021,"SVISION",91)':{tag:'(0021,"SVISION",91)',vr:"DS",name:"Contrast",vm:"1",version:"PrivateTag"},'(0021,"SVISION",92)':{tag:'(0021,"SVISION",92)',vr:"DS",name:"ShapeFactor",vm:"1",version:"PrivateTag"},'(0023,"SVISION",00)':{tag:'(0023,"SVISION",00)',vr:"LO",name:"ImageLaterality",vm:"1",version:"PrivateTag"},'(0023,"SVISION",01)':{tag:'(0023,"SVISION",01)',vr:"IS",name:"LetterPosition",vm:"1",version:"PrivateTag"},'(0023,"SVISION",02)':{tag:'(0023,"SVISION",02)',vr:"IS",name:"BurnedInAnnotation",vm:"1",version:"PrivateTag"},'(0023,"SVISION",03)':{tag:'(0023,"SVISION",03)',vr:"LO",name:"Unknown",vm:"1",version:"PrivateTag"},'(0023,"SVISION",F0)':{tag:'(0023,"SVISION",F0)',vr:"IS",name:"ImageSOPClass",vm:"1",version:"PrivateTag"},'(0025,"SVISION",00)':{tag:'(0025,"SVISION",00)',vr:"IS",name:"OriginalImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",01)':{tag:'(0025,"SVISION",01)',vr:"IS",name:"NotProcessedImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",02)':{tag:'(0025,"SVISION",02)',vr:"IS",name:"CutOutImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",03)':{tag:'(0025,"SVISION",03)',vr:"IS",name:"DuplicatedImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",04)':{tag:'(0025,"SVISION",04)',vr:"IS",name:"StoredImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",05)':{tag:'(0025,"SVISION",05)',vr:"IS",name:"RetrievedImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",06)':{tag:'(0025,"SVISION",06)',vr:"IS",name:"RemoteImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",07)':{tag:'(0025,"SVISION",07)',vr:"IS",name:"MediaStoredImage",vm:"1",version:"PrivateTag"},'(0025,"SVISION",08)':{tag:'(0025,"SVISION",08)',vr:"IS",name:"ImageState",vm:"1",version:"PrivateTag"},'(0025,"SVISION",20)':{tag:'(0025,"SVISION",20)',vr:"LO",name:"SourceImageFile",vm:"1",version:"PrivateTag"},'(0025,"SVISION",21)':{tag:'(0025,"SVISION",21)',vr:"UI",name:"Unknown",vm:"1",version:"PrivateTag"},'(0027,"SVISION",00)':{tag:'(0027,"SVISION",00)',vr:"IS",name:"NumberOfSeries",vm:"1",version:"PrivateTag"},'(0027,"SVISION",01)':{tag:'(0027,"SVISION",01)',vr:"IS",name:"NumberOfStudies",vm:"1",version:"PrivateTag"},'(0027,"SVISION",10)':{tag:'(0027,"SVISION",10)',vr:"DT",name:"OldestSeries",vm:"1",version:"PrivateTag"},'(0027,"SVISION",11)':{tag:'(0027,"SVISION",11)',vr:"DT",name:"NewestSeries",vm:"1",version:"PrivateTag"},'(0027,"SVISION",12)':{tag:'(0027,"SVISION",12)',vr:"DT",name:"OldestStudy",vm:"1",version:"PrivateTag"},'(0027,"SVISION",13)':{tag:'(0027,"SVISION",13)',vr:"DT",name:"NewestStudy",vm:"1",version:"PrivateTag"},'(0009,"TOSHIBA_MEC_1.0",01)':{tag:'(0009,"TOSHIBA_MEC_1.0",01)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0009,"TOSHIBA_MEC_1.0",02)':{tag:'(0009,"TOSHIBA_MEC_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0009,"TOSHIBA_MEC_1.0",03)':{tag:'(0009,"TOSHIBA_MEC_1.0",03)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0009,"TOSHIBA_MEC_1.0",04)':{tag:'(0009,"TOSHIBA_MEC_1.0",04)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0011,"TOSHIBA_MEC_1.0",01)':{tag:'(0011,"TOSHIBA_MEC_1.0",01)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0011,"TOSHIBA_MEC_1.0",02)':{tag:'(0011,"TOSHIBA_MEC_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_1.0",01)':{tag:'(0019,"TOSHIBA_MEC_1.0",01)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_1.0",02)':{tag:'(0019,"TOSHIBA_MEC_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"TOSHIBA_MEC_1.0",01)':{tag:'(0021,"TOSHIBA_MEC_1.0",01)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"TOSHIBA_MEC_1.0",02)':{tag:'(0021,"TOSHIBA_MEC_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0021,"TOSHIBA_MEC_1.0",03)':{tag:'(0021,"TOSHIBA_MEC_1.0",03)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_1.0",01)':{tag:'(7ff1,"TOSHIBA_MEC_1.0",01)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_1.0",02)':{tag:'(7ff1,"TOSHIBA_MEC_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_1.0",03)':{tag:'(7ff1,"TOSHIBA_MEC_1.0",03)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_1.0",10)':{tag:'(7ff1,"TOSHIBA_MEC_1.0",10)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",01)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",01)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",02)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",02)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",03)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",03)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",04)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",04)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",05)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",05)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",06)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",06)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",07)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",07)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",08)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",08)',vr:"LT",name:"OrientationHeadFeet",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",09)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",09)',vr:"LT",name:"ViewDirection",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",0a)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",0a)',vr:"LT",name:"OrientationSupineProne",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",0b)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",0b)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",0c)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",0c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",0d)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",0d)',vr:"TM",name:"Time",vm:"1",version:"PrivateTag"},'(0019,"TOSHIBA_MEC_CT_1.0",0e)':{tag:'(0019,"TOSHIBA_MEC_CT_1.0",0e)',vr:"DS",name:"Unknown",vm:"1",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",01)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",01)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",02)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",02)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",03)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",03)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",04)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",04)',vr:"IS",name:"Unknown",vm:"1",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",05)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",05)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",07)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",07)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",08)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",08)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",09)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",09)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",0a)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",0a)',vr:"LT",name:"Unknown",vm:"1",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",0b)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",0b)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",0c)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",0c)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"},'(7ff1,"TOSHIBA_MEC_CT_1.0",0d)':{tag:'(7ff1,"TOSHIBA_MEC_CT_1.0",0d)',vr:"US",name:"Unknown",vm:"1-n",version:"PrivateTag"}};

var DicomMetaDictionary =
/*#__PURE__*/
function () {
  function DicomMetaDictionary() {
    _classCallCheck(this, DicomMetaDictionary);
  }

  _createClass(DicomMetaDictionary, null, [{
    key: "punctuateTag",
    value: function punctuateTag(rawTag) {
      if (rawTag.indexOf(",") !== -1) {
        return rawTag;
      }

      if (rawTag.length === 8 && rawTag === rawTag.match(/[0-9a-fA-F]*/)[0]) {
        var tag = rawTag.toUpperCase();
        return "(" + tag.substring(0, 4) + "," + tag.substring(4, 8) + ")";
      }
    }
  }, {
    key: "unpunctuateTag",
    value: function unpunctuateTag(tag) {
      if (tag.indexOf(",") === -1) {
        return tag;
      }

      return tag.substring(1, 10).replace(",", "");
    } // fixes some common errors in VRs
    // TODO: if this gets longer it could go in ValueRepresentation.js
    // or in a dedicated class

  }, {
    key: "cleanDataset",
    value: function cleanDataset(dataset) {
      var cleanedDataset = {};
      Object.keys(dataset).forEach(function (tag) {
        var data = dataset[tag];

        if (data.vr == "SQ") {
          var cleanedValues = [];
          Object.keys(data.Value).forEach(function (index) {
            cleanedValues.push(DicomMetaDictionary.cleanDataset(data.Value[index]));
          });
          data.Value = cleanedValues;
        } else {
          // remove null characters from strings
          Object.keys(data.Value).forEach(function (index) {
            var dataItem = data.Value[index];

            if (dataItem.constructor.name == "String") {
              data.Value[index] = dataItem.replace(/\0/, "");
            }
          });
        }

        cleanedDataset[tag] = data;
      });
      return cleanedDataset;
    } // unlike naturalizeDataset, this only
    // changes the names of the member variables
    // but leaves the values intact

  }, {
    key: "namifyDataset",
    value: function namifyDataset(dataset) {
      var namedDataset = {};
      Object.keys(dataset).forEach(function (tag) {
        var data = dataset[tag];

        if (data.vr == "SQ") {
          var namedValues = [];
          Object.keys(data.Value).forEach(function (index) {
            namedValues.push(DicomMetaDictionary.namifyDataset(data.Value[index]));
          });
          data.Value = namedValues;
        }

        var punctuatedTag = DicomMetaDictionary.punctuateTag(tag);
        var entry = DicomMetaDictionary.dictionary[punctuatedTag];
        var name = tag;

        if (entry) {
          name = entry.name;
        }

        namedDataset[name] = data;
      });
      return namedDataset;
    } // converts from DICOM JSON Model dataset
    // to a natural dataset
    // - sequences become lists
    // - single element lists are replaced by their first element
    // - object member names are dictionary, not group/element tag

  }, {
    key: "naturalizeDataset",
    value: function naturalizeDataset(dataset) {
      var naturalDataset = {
        _vrMap: {}
      };
      Object.keys(dataset).forEach(function (tag) {
        var data = dataset[tag];

        if (data.vr == "SQ") {
          // convert sequence to list of values
          var naturalValues = [];
          Object.keys(data.Value).forEach(function (index) {
            naturalValues.push(DicomMetaDictionary.naturalizeDataset(data.Value[index]));
          });
          data.Value = naturalValues;
        }

        var punctuatedTag = DicomMetaDictionary.punctuateTag(tag);
        var entry = DicomMetaDictionary.dictionary[punctuatedTag];
        var naturalName = tag;

        if (entry) {
          naturalName = entry.name;

          if (entry.vr == "ox") {
            // when the vr is data-dependent, keep track of the original type
            naturalDataset._vrMap[naturalName] = data.vr;
          }
        }

        naturalDataset[naturalName] = data.Value;

        if (naturalDataset[naturalName].length == 1) {
          // only one value is not a list
          naturalDataset[naturalName] = naturalDataset[naturalName][0];
        }
      });
      return naturalDataset;
    }
  }, {
    key: "denaturalizeValue",
    value: function denaturalizeValue(naturalValue) {
      var value = naturalValue;

      if (!Array.isArray(value)) {
        value = [value];
      } else {
        var thereIsUndefinedValues = naturalValue.some(function (item) {
          return item === undefined;
        });

        if (thereIsUndefinedValues) {
          throw new Error("There are undefined values at the array naturalValue in DicomMetaDictionary.denaturalizeValue");
        }
      }

      value = value.map(function (entry) {
        return entry.constructor.name == "Number" ? String(entry) : entry;
      });
      return value;
    }
  }, {
    key: "denaturalizeDataset",
    value: function denaturalizeDataset(dataset) {
      var unnaturalDataset = {};
      Object.keys(dataset).forEach(function (naturalName) {
        // check if it's a sequence
        var name = naturalName;
        var entry = DicomMetaDictionary.nameMap[name];

        if (entry) {
          var dataValue = dataset[naturalName];

          if (dataValue === undefined) {
            // handle the case where it was deleted from the object but is in keys
            return;
          } // process this one entry


          var dataItem = {
            vr: entry.vr,
            Value: dataset[naturalName]
          };

          if (entry.vr == "ox") {
            if (dataset._vrMap && dataset._vrMap[naturalName]) {
              dataItem.vr = dataset._vrMap[naturalName];
            } else {
              lib.error("No value representation given for", naturalName);
            }
          }

          dataItem.Value = DicomMetaDictionary.denaturalizeValue(dataItem.Value);

          if (entry.vr == "SQ") {
            var unnaturalValues = [];

            for (var datasetIndex = 0; datasetIndex < dataItem.Value.length; datasetIndex++) {
              var nestedDataset = dataItem.Value[datasetIndex];
              unnaturalValues.push(DicomMetaDictionary.denaturalizeDataset(nestedDataset));
            }

            dataItem.Value = unnaturalValues;
          }

          var vr = ValueRepresentation.createByTypeString(dataItem.vr);

          if (!vr.isBinary() && vr.maxLength) {
            dataItem.Value = dataItem.Value.map(function (value) {
              if (value.length > vr.maxLength) {
                lib.warn("Truncating value ".concat(value, " of ").concat(naturalName, " because it is longer than ").concat(vr.maxLength));
                return value.slice(0, vr.maxLength);
              } else {
                return value;
              }
            });
          }

          var tag = DicomMetaDictionary.unpunctuateTag(entry.tag);
          unnaturalDataset[tag] = dataItem;
        } else {
          var validMetaNames = ["_vrMap", "_meta"];

          if (validMetaNames.indexOf(name) == -1) {
            lib.warn("Unknown name in dataset", name, ":", dataset[name]);
          }
        }
      });
      return unnaturalDataset;
    }
  }, {
    key: "uid",
    value: function uid() {
      var uid = "2.25." + Math.floor(1 + Math.random() * 9);

      for (var index = 0; index < 38; index++) {
        uid = uid + Math.floor(Math.random() * 10);
      }

      return uid;
    } // date and time in UTC

  }, {
    key: "date",
    value: function date() {
      var now = new Date();
      return now.toISOString().replace(/-/g, "").slice(0, 8);
    }
  }, {
    key: "time",
    value: function time() {
      var now = new Date();
      return now.toISOString().replace(/:/g, "").slice(11, 17);
    }
  }, {
    key: "dateTime",
    value: function dateTime() {
      // "2017-07-07T16:09:18.079Z" -> "20170707160918.079"
      var now = new Date();
      return now.toISOString().replace(/[:\-TZ]/g, "");
    }
  }, {
    key: "_generateNameMap",
    value: function _generateNameMap() {
      DicomMetaDictionary.nameMap = {};
      Object.keys(DicomMetaDictionary.dictionary).forEach(function (tag) {
        var dict = DicomMetaDictionary.dictionary[tag];

        if (dict.version != "PrivateTag") {
          DicomMetaDictionary.nameMap[dict.name] = dict;
        }
      });
    }
  }, {
    key: "_generateUIDMap",
    value: function _generateUIDMap() {
      DicomMetaDictionary.sopClassUIDsByName = {};
      Object.keys(DicomMetaDictionary.sopClassNamesByUID).forEach(function (uid) {
        var name = DicomMetaDictionary.sopClassNamesByUID[uid];
        DicomMetaDictionary.sopClassUIDsByName[name] = uid;
      });
    }
  }]);

  return DicomMetaDictionary;
}(); // Subset of those listed at:
// http://dicom.nema.org/medical/dicom/current/output/html/part04.html#sect_B.5


DicomMetaDictionary.sopClassNamesByUID = {
  "1.2.840.10008.5.1.4.1.1.2": "CTImage",
  "1.2.840.10008.5.1.4.1.1.2.1": "EnhancedCTImage",
  "1.2.840.10008.5.1.4.1.1.2.2": "LegacyConvertedEnhancedCTImage",
  "1.2.840.10008.5.1.4.1.1.3.1": "USMultiframeImage",
  "1.2.840.10008.5.1.4.1.1.4": "MRImage",
  "1.2.840.10008.5.1.4.1.1.4.1": "EnhancedMRImage",
  "1.2.840.10008.5.1.4.1.1.4.2": "MRSpectroscopy",
  "1.2.840.10008.5.1.4.1.1.4.3": "EnhancedMRColorImage",
  "1.2.840.10008.5.1.4.1.1.4.4": "LegacyConvertedEnhancedMRImage",
  "1.2.840.10008.5.1.4.1.1.6.1": "USImage",
  "1.2.840.10008.5.1.4.1.1.6.2": "EnhancedUSVolume",
  "1.2.840.10008.5.1.4.1.1.7": "SecondaryCaptureImage",
  "1.2.840.10008.5.1.4.1.1.30": "ParametricMapStorage",
  "1.2.840.10008.5.1.4.1.1.66": "RawData",
  "1.2.840.10008.5.1.4.1.1.66.1": "SpatialRegistration",
  "1.2.840.10008.5.1.4.1.1.66.2": "SpatialFiducials",
  "1.2.840.10008.5.1.4.1.1.66.3": "DeformableSpatialRegistration",
  "1.2.840.10008.5.1.4.1.1.66.4": "Segmentation",
  "1.2.840.10008.5.1.4.1.1.67": "RealWorldValueMapping",
  "1.2.840.10008.5.1.4.1.1.88.11": "BasicTextSR",
  "1.2.840.10008.5.1.4.1.1.88.22": "EnhancedSR",
  "1.2.840.10008.5.1.4.1.1.88.33": "ComprehensiveSR",
  "1.2.840.10008.5.1.4.1.1.128": "PETImage",
  "1.2.840.10008.5.1.4.1.1.130": "EnhancedPETImage",
  "1.2.840.10008.5.1.4.1.1.128.1": "LegacyConvertedEnhancedPETImage"
};
DicomMetaDictionary.dictionary = dictionary;

DicomMetaDictionary._generateNameMap();

DicomMetaDictionary._generateUIDMap();

var IMPLICIT_LITTLE_ENDIAN$1 = "1.2.840.10008.1.2";
var EXPLICIT_LITTLE_ENDIAN$1 = "1.2.840.10008.1.2.1";
var EXPLICIT_BIG_ENDIAN = "1.2.840.10008.1.2.2";
var singleVRs$1 = ["SQ", "OF", "OW", "OB", "UN", "LT"];
var encapsulatedSyntaxes = ["1.2.840.10008.1.2.4.50", "1.2.840.10008.1.2.4.51", "1.2.840.10008.1.2.4.57", "1.2.840.10008.1.2.4.70", "1.2.840.10008.1.2.4.80", "1.2.840.10008.1.2.4.81", "1.2.840.10008.1.2.4.90", "1.2.840.10008.1.2.4.91", "1.2.840.10008.1.2.4.92", "1.2.840.10008.1.2.4.93", "1.2.840.10008.1.2.4.94", "1.2.840.10008.1.2.4.95", "1.2.840.10008.1.2.5", "1.2.840.10008.1.2.6.1", "1.2.840.10008.1.2.4.100", "1.2.840.10008.1.2.4.102", "1.2.840.10008.1.2.4.103"];

var DicomMessage =
/*#__PURE__*/
function () {
  function DicomMessage() {
    _classCallCheck(this, DicomMessage);
  }

  _createClass(DicomMessage, null, [{
    key: "read",
    value: function read(bufferStream, syntax, ignoreErrors) {
      var dict = {};

      try {
        while (!bufferStream.end()) {
          var readInfo = DicomMessage.readTag(bufferStream, syntax);
          dict[readInfo.tag.toCleanString()] = {
            vr: readInfo.vr.type,
            Value: readInfo.values
          };
        }

        return dict;
      } catch (err) {
        if (ignoreErrors) {
          console.warn("WARN:", err);
          return dict;
        }

        throw err;
      }
    }
  }, {
    key: "_normalizeSyntax",
    value: function _normalizeSyntax(syntax) {
      if (syntax == IMPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_BIG_ENDIAN) {
        return syntax;
      } else {
        return EXPLICIT_LITTLE_ENDIAN$1;
      }
    }
  }, {
    key: "isEncapsulated",
    value: function isEncapsulated(syntax) {
      return encapsulatedSyntaxes.indexOf(syntax) != -1;
    }
  }, {
    key: "readFile",
    value: function readFile(buffer) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        ignoreErrors: false
      };
      var ignoreErrors = options.ignoreErrors;
      var stream = new ReadBufferStream(buffer),
          useSyntax = EXPLICIT_LITTLE_ENDIAN$1;
      stream.reset();
      stream.increment(128);

      if (stream.readString(4) !== "DICM") {
        throw new Error("Invalid a dicom file");
      }

      var el = DicomMessage.readTag(stream, useSyntax),
          metaLength = el.values[0]; //read header buffer

      var metaStream = stream.more(metaLength);
      var metaHeader = DicomMessage.read(metaStream, useSyntax, ignoreErrors); //get the syntax

      var mainSyntax = metaHeader["00020010"].Value[0];
      mainSyntax = DicomMessage._normalizeSyntax(mainSyntax);
      var objects = DicomMessage.read(stream, mainSyntax, ignoreErrors);
      var dicomDict = new DicomDict(metaHeader);
      dicomDict.dict = objects;
      return dicomDict;
    }
  }, {
    key: "writeTagObject",
    value: function writeTagObject(stream, tagString, vr, values, syntax) {
      var tag = Tag.fromString(tagString);
      tag.write(stream, vr, values, syntax);
    }
  }, {
    key: "write",
    value: function write(jsonObjects, useStream, syntax) {
      var written = 0;
      var sortedTags = Object.keys(jsonObjects).sort();
      sortedTags.forEach(function (tagString) {
        var tag = Tag.fromString(tagString),
            tagObject = jsonObjects[tagString],
            vrType = tagObject.vr,
            values = tagObject.Value;
        written += tag.write(useStream, vrType, values, syntax);
      });
      return written;
    }
  }, {
    key: "readTag",
    value: function readTag(stream, syntax) {
      var implicit = syntax == IMPLICIT_LITTLE_ENDIAN$1 ? true : false,
          isLittleEndian = syntax == IMPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_LITTLE_ENDIAN$1 ? true : false;
      var oldEndian = stream.isLittleEndian;
      stream.setEndian(isLittleEndian);
      var group = stream.readUint16(),
          element = stream.readUint16(),
          tag = tagFromNumbers(group, element);
      var length = null,
          vr = null,
          vrType;

      if (implicit) {
        length = stream.readUint32();
        var elementData = DicomMessage.lookupTag(tag);

        if (elementData) {
          vrType = elementData.vr;
        } else {
          //unknown tag
          if (length == 0xffffffff) {
            vrType = "SQ";
          } else if (tag.isPixelDataTag()) {
            vrType = "OW";
          } else if (vrType == "xs") {
            vrType = "US";
          } else {
            vrType = "UN";
          }
        }

        vr = ValueRepresentation.createByTypeString(vrType);
      } else {
        vrType = stream.readString(2);
        vr = ValueRepresentation.createByTypeString(vrType);

        if (vr.isExplicit()) {
          stream.increment(2);
          length = stream.readUint32();
        } else {
          length = stream.readUint16();
        }
      }

      var values = [];

      if (vr.isBinary() && length > vr.maxLength && !vr.noMultiple) {
        var times = length / vr.maxLength,
            i = 0;

        while (i++ < times) {
          values.push(vr.read(stream, vr.maxLength, syntax));
        }
      } else {
        var val = vr.read(stream, length, syntax);

        if (!vr.isBinary() && singleVRs$1.indexOf(vr.type) == -1) {
          values = val.split(String.fromCharCode(0x5c));
        } else if (vr.type == "SQ") {
          values = val;
        } else if (vr.type == "OW" || vr.type == "OB") {
          values = val;
        } else {
          values.push(val);
        }
      }

      stream.setEndian(oldEndian);
      return {
        tag: tag,
        vr: vr,
        values: values
      };
    }
  }, {
    key: "lookupTag",
    value: function lookupTag(tag) {
      return DicomMetaDictionary.dictionary[tag.toString()];
    }
  }]);

  return DicomMessage;
}();

var EXPLICIT_LITTLE_ENDIAN$2 = "1.2.840.10008.1.2.1";

var DicomDict =
/*#__PURE__*/
function () {
  function DicomDict(meta) {
    _classCallCheck(this, DicomDict);

    this.meta = meta;
    this.dict = {};
  }

  _createClass(DicomDict, [{
    key: "upsertTag",
    value: function upsertTag(tag, vr, values) {
      if (this.dict[tag]) {
        this.dict[tag].Value = values;
      } else {
        this.dict[tag] = {
          vr: vr,
          Value: values
        };
      }
    }
  }, {
    key: "write",
    value: function write() {
      var metaSyntax = EXPLICIT_LITTLE_ENDIAN$2;
      var fileStream = new WriteBufferStream(4096, true);
      fileStream.writeHex("00".repeat(128));
      fileStream.writeString("DICM");
      var metaStream = new WriteBufferStream(1024);

      if (!this.meta["00020010"]) {
        this.meta["00020010"] = {
          vr: "UI",
          Value: [EXPLICIT_LITTLE_ENDIAN$2]
        };
      }

      DicomMessage.write(this.meta, metaStream, metaSyntax);
      DicomMessage.writeTagObject(fileStream, "00020000", "UL", metaStream.size, metaSyntax);
      fileStream.concat(metaStream);
      var useSyntax = this.meta["00020010"].Value[0];
      DicomMessage.write(this.dict, fileStream, useSyntax);
      return fileStream.getBuffer();
    }
  }]);

  return DicomDict;
}();

var DICOMWEB =
/*#__PURE__*/
function () {
  /*
  JavaScript DICOMweb REST API for browser use.
   Design:
  * map rest api to high-level code with modern conventions
  ** ES6: classes, arrow functions, let...
  ** promises
  ** json converted to objects
  examples: see tests() method below.
  */
  function DICOMWEB() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DICOMWEB);

    this.rootURL = options.rootURL;
    this.progressCallback = options.progressCallback;
  }

  _createClass(DICOMWEB, [{
    key: "request",
    value: function request(endpoint) {
      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var payload = arguments.length > 2 ? arguments[2] : undefined;
      var responseType = DICOMWEB.responseType(endpoint);
      var service = DICOMWEB.endpointService(endpoint);
      var url = this.rootURL + "/" + service + endpoint;
      var firstParameter = true;
      Object.keys(parameters).forEach(function (parameter) {
        if (firstParameter) {
          url += "?";
          firstParameter = false;
        } else {
          url += "&";
        }

        url += parameter + "=" + encodeURIComponent(parameters[parameter]);
      });

      function promiseHandler(resolve, reject) {
        var request = new XMLHttpRequest();
        request.open("GET", url);
        request.responseType = responseType;

        request.onload = function () {
          resolve(request.response);
        };

        request.onprogress = this.progressCallback;

        request.onerror = function (error) {
          lib.error(request.response);
          reject(error);
        };

        request.send(payload);
      }

      var promise = new Promise(promiseHandler.bind(this));
      return promise;
    }
  }, {
    key: "patients",
    value: function patients() {
      return this.request("patients");
    }
  }, {
    key: "studies",
    value: function studies(patientID) {
      return this.request("studies", {
        PatientID: patientID
      });
    }
  }, {
    key: "series",
    value: function series(studyInstanceUID) {
      return this.request("series", {
        StudyInstanceUID: studyInstanceUID
      });
    }
  }, {
    key: "instances",
    value: function instances(studyInstanceUID, seriesInstanceUID) {
      return this.request("instances", {
        StudyInstanceUID: studyInstanceUID,
        SeriesInstanceUID: seriesInstanceUID
      });
    }
  }, {
    key: "instance",
    value: function instance(studyInstanceUID, seriesInstanceUID, sopInstanceUID) {
      return this.request("wado", {
        requestType: "WADO",
        studyUID: studyInstanceUID,
        seriesUID: seriesInstanceUID,
        objectUID: sopInstanceUID,
        contentType: "application/dicom"
      });
    }
  }, {
    key: "tests",
    value: function tests() {
      var testingServerURL = "http://quantome.org:4242/dcm4chee-arc/aets/DCM4CHEE";
      var testOptions = {
        rootURL: testingServerURL
      };
      new DICOMWEB(testOptions).patients().then(function (responses) {
        responses.forEach(function (patient) {
          lib.log(patient);
        });
      });
    }
  }], [{
    key: "responseType",
    value: function responseType(endpoint) {
      var types = {
        wado: "arraybuffer"
      };
      return types[endpoint] ? types[endpoint] : "json";
    } // which URL service to use for each of the high level services

  }, {
    key: "endpointService",
    value: function endpointService(endpoint) {
      var services = {
        wado: ""
      };
      return Object.keys(services).indexOf(endpoint) != -1 ? services[endpoint] : "rs/";
    }
  }, {
    key: "randomEntry",
    value: function randomEntry(array) {
      return array[Math.floor(Math.random() * array.length)];
    }
  }]);

  return DICOMWEB;
}();

//
// Handle DICOM and CIELAB colors
// based on:
// https://github.com/michaelonken/dcmtk/blob/3c68f0e882e22e6d9e2a42f836332c0ca21b3e7f/dcmiod/libsrc/cielabutil.cc
//
// RGB here refers to sRGB 0-1 per component.
// dicomlab is CIELAB values as defined in the dicom standard
// XYZ is CIEXYZ convention
//
// TODO: needs a test suite
// TODO: only dicomlab2RGB tested on real data
//
//
var Colors =
/*#__PURE__*/
function () {
  function Colors() {
    _classCallCheck(this, Colors);
  }

  _createClass(Colors, null, [{
    key: "d65WhitePointXYZ",
    value: function d65WhitePointXYZ() {
      // white points of D65 light point (CIELAB standard white point)
      return [0.950456, 1.0, 1.088754];
    }
  }, {
    key: "dicomlab2RGB",
    value: function dicomlab2RGB(dicomlab) {
      return Colors.lab2RGB(Colors.dicomlab2LAB(dicomlab));
    }
  }, {
    key: "rgb2DICOMLAB",
    value: function rgb2DICOMLAB(rgb) {
      return Colors.lab2DICOMLAB(Colors.rgb2LAB(rgb));
    }
  }, {
    key: "dicomlab2LAB",
    value: function dicomlab2LAB(dicomlab) {
      return [dicomlab[0] * 100.0 / 65535.0, // results in 0 <= L <= 100
      dicomlab[1] * 255.0 / 65535.0 - 128, // results in -128 <= a <= 127
      dicomlab[2] * 255.0 / 65535.0 - 128 // results in -128 <= b <= 127
      ];
    }
  }, {
    key: "lab2DICOMLAB",
    value: function lab2DICOMLAB(lab) {
      return [lab[0] * 65535.0 / 100.0, // results in 0 <= L <= 65535
      (lab[1] + 128) * 65535.0 / 255.0, // results in 0 <= a <= 65535
      (lab[2] + 128) * 65535.0 / 255.0 // results in 0 <= b <= 65535
      ];
    }
  }, {
    key: "rgb2LAB",
    value: function rgb2LAB(rgb) {
      return Colors.xyz2LAB(Colors.rgb2XYZ(rgb));
    }
  }, {
    key: "gammaCorrection",
    value: function gammaCorrection(n) {
      if (n <= 0.0031306684425005883) {
        return 12.92 * n;
      } else {
        return 1.055 * Math.pow(n, 0.416666666666666667) - 0.055;
      }
    }
  }, {
    key: "invGammaCorrection",
    value: function invGammaCorrection(n) {
      if (n <= 0.0404482362771076) {
        return n / 12.92;
      } else {
        return Math.pow((n + 0.055) / 1.055, 2.4);
      }
    }
  }, {
    key: "rgb2XYZ",
    value: function rgb2XYZ(rgb) {
      var R = Colors.invGammaCorrection(rgb[0]);
      var G = Colors.invGammaCorrection(rgb[1]);
      var B = Colors.invGammaCorrection(rgb[2]);
      return [0.4123955889674142161 * R + 0.3575834307637148171 * G + 0.1804926473817015735 * B, 0.2125862307855955516 * R + 0.7151703037034108499 * G + 0.07220049864333622685 * B, 0.01929721549174694484 * R + 0.1191838645808485318 * G + 0.950497125131579766 * B];
    }
  }, {
    key: "xyz2LAB",
    value: function xyz2LAB(xyz) {
      var whitePoint = Colors.d65WhitePointXYZ();
      var X = xyz[0] / whitePoint[0];
      var Y = xyz[1] / whitePoint[1];
      var Z = xyz[2] / whitePoint[2];
      X = Colors.labf(X);
      Y = Colors.labf(Y);
      Z = Colors.labf(Z);
      return [116 * Y - 16, 500 * (X - Y), 200 * (Y - Z)];
    }
  }, {
    key: "lab2RGB",
    value: function lab2RGB(lab) {
      return Colors.xyz2RGB(Colors.lab2XYZ(lab));
    }
  }, {
    key: "lab2XYZ",
    value: function lab2XYZ(lab) {
      var L = (lab[0] + 16) / 116;
      var a = L + lab[1] / 500;
      var b = L - lab[2] / 200;
      var whitePoint = Colors.d65WhitePointXYZ();
      return [whitePoint[0] * Colors.labfInv(a), whitePoint[1] * Colors.labfInv(L), whitePoint[2] * Colors.labfInv(b)];
    }
  }, {
    key: "xyz2RGB",
    value: function xyz2RGB(xyz) {
      var R1 = 3.2406 * xyz[0] - 1.5372 * xyz[1] - 0.4986 * xyz[2];
      var G1 = -0.9689 * xyz[0] + 1.8758 * xyz[1] + 0.0415 * xyz[2];
      var B1 = 0.0557 * xyz[0] - 0.204 * xyz[1] + 1.057 * xyz[2];
      /* Force nonnegative values so that gamma correction is well-defined. */

      var minimumComponent = Math.min(R1, G1);
      minimumComponent = Math.min(minimumComponent, B1);

      if (minimumComponent < 0) {
        R1 -= minimumComponent;
        G1 -= minimumComponent;
        B1 -= minimumComponent;
      }
      /* Transform from RGB to R'G'B' */


      return [Colors.gammaCorrection(R1), Colors.gammaCorrection(G1), Colors.gammaCorrection(B1)];
    }
  }, {
    key: "labf",
    value: function labf(n) {
      if (n >= 8.85645167903563082e-3) {
        return Math.pow(n, 0.333333333333333);
      } else {
        return 841.0 / 108.0 * n + 4.0 / 29.0;
      }
    }
  }, {
    key: "labfInv",
    value: function labfInv(n) {
      if (n >= 0.206896551724137931) {
        return n * n * n;
      } else {
        return 108.0 / 841.0 * (n - 4.0 / 29.0);
      }
    }
  }]);

  return Colors;
}();

var global$1 = (typeof global !== "undefined" ? global :
            typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window : {});

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init () {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray (b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup[tmp >> 10];
    output += lookup[(tmp >> 4) & 0x3F];
    output += lookup[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

function read (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

function write (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;

var isArray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
  ? global$1.TYPED_ARRAY_SUPPORT
  : true;

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read$$1 (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read$$1(arr, i + j) !== read$$1(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write$$1 (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf)
  } else {
    return fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}


function base64ToBytes (str) {
  return toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

function datasetToDict(dataset) {
  var fileMetaInformationVersionArray = new Uint8Array(2);
  fileMetaInformationVersionArray[1] = 1;
  var TransferSyntaxUID = dataset._meta.TransferSyntaxUID && dataset._meta.TransferSyntaxUID.Value && dataset._meta.TransferSyntaxUID.Value[0] ? dataset._meta.TransferSyntaxUID.Value[0] : "1.2.840.10008.1.2.1";
  dataset._meta = {
    MediaStorageSOPClassUID: dataset.SOPClassUID,
    MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,
    ImplementationVersionName: "dcmjs-0.0",
    TransferSyntaxUID: TransferSyntaxUID,
    ImplementationClassUID: "2.25.80302813137786398554742050926734630921603366648225212145404",
    FileMetaInformationVersion: fileMetaInformationVersionArray.buffer
  };
  var denaturalized = DicomMetaDictionary.denaturalizeDataset(dataset._meta);
  var dicomDict = new DicomDict(denaturalized);
  dicomDict.dict = DicomMetaDictionary.denaturalizeDataset(dataset);
  return dicomDict;
}

function datasetToBuffer(dataset) {
  return Buffer.from(datasetToDict(dataset).write());
}

function datasetToBlob(dataset) {
  var buffer = datasetToBuffer(dataset);
  return new Blob([buffer], {
    type: "application/dicom"
  });
}

var DerivedDataset =
/*#__PURE__*/
function () {
  function DerivedDataset(datasets) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, DerivedDataset);

    this.options = JSON.parse(JSON.stringify(options));
    var o = this.options;
    o.Manufacturer = options.Manufacturer || "Unspecified";
    o.ManufacturerModelName = options.ManufacturerModelName || "Unspecified";
    o.SeriesDescription = options.SeriesDescription || "Research Derived series";
    o.SeriesNumber = options.SeriesNumber || "99";
    o.SoftwareVersions = options.SoftwareVersions || "0";
    o.DeviceSerialNumber = options.DeviceSerialNumber || "1";
    var date = DicomMetaDictionary.date();
    var time = DicomMetaDictionary.time();
    o.SeriesDate = options.SeriesDate || date;
    o.SeriesTime = options.SeriesTime || time;
    o.ContentDate = options.ContentDate || date;
    o.ContentTime = options.ContentTime || time;
    o.SOPInstanceUID = options.SOPInstanceUID || DicomMetaDictionary.uid();
    o.SeriesInstanceUID = options.SeriesInstanceUID || DicomMetaDictionary.uid();
    o.ClinicalTrialTimePointID = options.ClinicalTrialTimePointID || "";
    o.ClinicalTrialCoordinatingCenterName = options.ClinicalTrialCoordinatingCenterName || "";
    o.ClinicalTrialSeriesID = options.ClinicalTrialSeriesID || "";
    o.ImageComments = options.ImageComments || "NOT FOR CLINICAL USE";
    o.ContentQualification = "RESEARCH";
    this.referencedDatasets = datasets; // list of one or more dicom-like object instances

    this.referencedDataset = this.referencedDatasets[0];
    this.dataset = {
      _vrMap: this.referencedDataset._vrMap,
      _meta: this.referencedDataset._meta
    };
    this.derive();
  }

  _createClass(DerivedDataset, [{
    key: "assignToDataset",
    value: function assignToDataset(data) {
      var _this = this;

      Object.keys(data).forEach(function (key) {
        return _this.dataset[key] = data[key];
      });
    }
  }, {
    key: "assignFromReference",
    value: function assignFromReference(tags) {
      var _this2 = this;

      tags.forEach(function (tag) {
        return _this2.dataset[tag] = _this2.referencedDataset[tag] || "";
      });
    }
  }, {
    key: "assignFromOptions",
    value: function assignFromOptions(tags) {
      var _this3 = this;

      tags.forEach(function (tag) {
        return _this3.dataset[tag] = _this3.options[tag] || "";
      });
    }
  }, {
    key: "derive",
    value: function derive() {
      // common for all instances in study
      this.assignFromReference(["AccessionNumber", "ReferringPhysicianName", "StudyDate", "StudyID", "StudyTime", "PatientName", "PatientID", "PatientBirthDate", "PatientSex", "PatientAge", "StudyInstanceUID", "StudyID"]);
      this.assignFromOptions(["Manufacturer", "SoftwareVersions", "DeviceSerialNumber", "ManufacturerModelName", "SeriesDescription", "SeriesNumber", "ImageComments", "SeriesDate", "SeriesTime", "ContentDate", "ContentTime", "ContentQualification", "SOPInstanceUID", "SeriesInstanceUID"]);
    }
  }], [{
    key: "copyDataset",
    value: function copyDataset(dataset) {
      // copies everything but the buffers
      return JSON.parse(JSON.stringify(dataset));
    }
  }]);

  return DerivedDataset;
}();

var DerivedPixels =
/*#__PURE__*/
function (_DerivedDataset) {
  _inherits(DerivedPixels, _DerivedDataset);

  function DerivedPixels(datasets) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, DerivedPixels);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DerivedPixels).call(this, datasets, options));
    var o = _this.options;
    o.ContentLabel = options.ContentLabel || "";
    o.ContentDescription = options.ContentDescription || "";
    o.ContentCreatorName = options.ContentCreatorName || "";
    return _this;
  } // this assumes a normalized multiframe input and will create
  // a multiframe derived image


  _createClass(DerivedPixels, [{
    key: "derive",
    value: function derive() {
      _get(_getPrototypeOf(DerivedPixels.prototype), "derive", this).call(this);

      this.assignToDataset({
        ImageType: ["DERIVED", "PRIMARY"],
        LossyImageCompression: "00",
        InstanceNumber: "1"
      });
      this.assignFromReference(["SOPClassUID", "Modality", "FrameOfReferenceUID", "PositionReferenceIndicator", "NumberOfFrames", "Rows", "Columns", "SamplesPerPixel", "PhotometricInterpretation", "BitsStored", "HighBit"]);
      this.assignFromOptions(["ContentLabel", "ContentDescription", "ContentCreatorName"]); //
      // TODO: more carefully copy only PixelMeasures and related
      // TODO: add derivation references
      //

      if (this.referencedDataset.SharedFunctionalGroupsSequence) {
        this.dataset.SharedFunctionalGroupsSequence = DerivedDataset.copyDataset(this.referencedDataset.SharedFunctionalGroupsSequence);
      }

      if (this.referencedDataset.PerFrameFunctionalGroupsSequence) {
        this.dataset.PerFrameFunctionalGroupsSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence);
      } // make an array of zeros for the pixels


      this.dataset.PixelData = new ArrayBuffer(this.referencedDataset.PixelData.byteLength);
    }
  }]);

  return DerivedPixels;
}(DerivedDataset);

var DerivedImage =
/*#__PURE__*/
function (_DerivedPixels) {
  _inherits(DerivedImage, _DerivedPixels);

  function DerivedImage(datasets) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, DerivedImage);

    return _possibleConstructorReturn(this, _getPrototypeOf(DerivedImage).call(this, datasets, options));
  }

  _createClass(DerivedImage, [{
    key: "derive",
    value: function derive() {
      _get(_getPrototypeOf(DerivedImage.prototype), "derive", this).call(this);

      this.assignFromReference(["WindowCenter", "WindowWidth", "BitsAllocated", "PixelRepresentation", "BodyPartExamined", "Laterality", "PatientPosition", "RescaleSlope", "RescaleIntercept", "PixelPresentation", "VolumetricProperties", "VolumeBasedCalculationTechnique", "PresentationLUTShape"]);
    }
  }]);

  return DerivedImage;
}(DerivedPixels);

var Normalizer =
/*#__PURE__*/
function () {
  function Normalizer(datasets) {
    _classCallCheck(this, Normalizer);

    this.datasets = datasets; // one or more dicom-like object instances

    this.dataset = undefined; // a normalized multiframe dicom object instance
  }

  _createClass(Normalizer, [{
    key: "normalize",
    value: function normalize() {
      return "No normalization defined";
    }
  }], [{
    key: "consistentSOPClassUIDs",
    value: function consistentSOPClassUIDs(datasets) {
      // return sopClassUID if all exist and match, otherwise undefined
      var sopClassUID;
      datasets.forEach(function (dataset) {
        if (!dataset.SOPClassUID) {
          return undefined;
        }

        if (!sopClassUID) {
          sopClassUID = dataset.SOPClassUID;
        }

        if (dataset.SOPClassUID !== sopClassUID) {
          lib.error("inconsistent sopClassUIDs: ", dataset.SOPClassUID, sopClassUID);
          return undefined;
        }
      });
      return sopClassUID;
    }
  }, {
    key: "normalizerForSOPClassUID",
    value: function normalizerForSOPClassUID(sopClassUID) {
      sopClassUID = sopClassUID.replace(/[^0-9.]/g, ""); // TODO: clean all VRs as part of normalizing

      var toUID = DicomMetaDictionary.sopClassUIDsByName;
      var sopClassUIDMap = {};
      sopClassUIDMap[toUID.CTImage] = CTImageNormalizer;
      sopClassUIDMap[toUID.ParametricMapStorage] = PMImageNormalizer;
      sopClassUIDMap[toUID.MRImage] = MRImageNormalizer;
      sopClassUIDMap[toUID.EnhancedCTImage] = EnhancedCTImageNormalizer;
      sopClassUIDMap[toUID.LegacyConvertedEnhancedCTImage] = EnhancedCTImageNormalizer;
      sopClassUIDMap[toUID.EnhancedMRImage] = EnhancedMRImageNormalizer;
      sopClassUIDMap[toUID.LegacyConvertedEnhancedMRImage] = EnhancedMRImageNormalizer;
      sopClassUIDMap[toUID.EnhancedUSVolume] = EnhancedUSVolumeNormalizer;
      sopClassUIDMap[toUID.PETImage] = PETImageNormalizer;
      sopClassUIDMap[toUID.EnhancedPETImage] = PETImageNormalizer;
      sopClassUIDMap[toUID.LegacyConvertedEnhancedPETImage] = PETImageNormalizer;
      sopClassUIDMap[toUID.Segmentation] = SEGImageNormalizer;
      sopClassUIDMap[toUID.DeformableSpatialRegistration] = DSRNormalizer;
      return sopClassUIDMap[sopClassUID];
    }
  }, {
    key: "isMultiframeSOPClassUID",
    value: function isMultiframeSOPClassUID(sopClassUID) {
      var toUID = DicomMetaDictionary.sopClassUIDsByName;
      var multiframeSOPClasses = [toUID.EnhancedMRImage, toUID.LegacyConvertedEnhancedMRImage, toUID.EnhancedCTImage, toUID.LegacyConvertedEnhancedCTImage, toUID.EnhancedUSVolume, toUID.EnhancedPETImage, toUID.LegacyConvertedEnhancedPETImage, toUID.Segmentation, toUID.ParametricMapStorage];
      return multiframeSOPClasses.indexOf(sopClassUID) !== -1;
    }
  }, {
    key: "isMultiframeDataset",
    value: function isMultiframeDataset() {
      var ds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataset;
      var sopClassUID = ds.SOPClassUID.replace(/[^0-9.]/g, ""); // TODO: clean all VRs as part of normalizing

      return Normalizer.isMultiframeSOPClassUID(sopClassUID);
    }
  }, {
    key: "normalizeToDataset",
    value: function normalizeToDataset(datasets) {
      var sopClassUID = Normalizer.consistentSOPClassUIDs(datasets);
      var normalizerClass = Normalizer.normalizerForSOPClassUID(sopClassUID);

      if (!normalizerClass) {
        lib.error("no normalizerClass for ", sopClassUID);
        return undefined;
      }

      var normalizer = new normalizerClass(datasets);
      normalizer.normalize();
      return normalizer.dataset;
    }
  }]);

  return Normalizer;
}();

var ImageNormalizer =
/*#__PURE__*/
function (_Normalizer) {
  _inherits(ImageNormalizer, _Normalizer);

  function ImageNormalizer() {
    _classCallCheck(this, ImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(ImageNormalizer).apply(this, arguments));
  }

  _createClass(ImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      this.convertToMultiframe();
      this.normalizeMultiframe();
    }
  }, {
    key: "convertToMultiframe",
    value: function convertToMultiframe() {
      if (this.datasets.length === 1 && Normalizer.isMultiframeDataset(this.datasets[0])) {
        // already a multiframe, so just use it
        this.dataset = this.datasets[0];
        return;
      }

      this.derivation = new DerivedImage(this.datasets);
      this.dataset = this.derivation.dataset;
      var ds = this.dataset; // create a new multiframe from the source datasets
      // fill in only those elements required to make a valid image
      // for volumetric processing

      var referenceDataset = this.datasets[0];
      ds.NumberOfFrames = this.datasets.length; // TODO: develop sets of elements to copy over in loops

      ds.SOPClassUID = referenceDataset.SOPClassUID;
      ds.Rows = referenceDataset.Rows;
      ds.Columns = referenceDataset.Columns;
      ds.BitsAllocated = referenceDataset.BitsAllocated;
      ds.PixelRepresentation = referenceDataset.PixelRepresentation;
      ds.RescaleSlope = referenceDataset.RescaleSlope || "1";
      ds.RescaleIntercept = referenceDataset.RescaleIntercept || "0"; //ds.BurnedInAnnotation = referenceDataset.BurnedInAnnotation || "YES";
      // sort
      // https://github.com/pieper/Slicer3/blob/master/Base/GUI/Tcl/LoadVolume.tcl
      // TODO: add spacing checks:
      // https://github.com/Slicer/Slicer/blob/master/Modules/Scripted/DICOMPlugins/DICOMScalarVolumePlugin.py#L228-L250
      // TODO: put this information into the Shared and PerFrame functional groups
      // TODO: sorting of frames could happen in normalizeMultiframe instead, since other
      // multiframe converters may not sort the images
      // TODO: sorting can be seen as part of generation of the Dimension Multiframe Dimension Module
      // and should really be done in an acquisition-specific way (e.g. for DCE)

      var referencePosition = referenceDataset.ImagePositionPatient;
      var rowVector = referenceDataset.ImageOrientationPatient.slice(0, 3);
      var columnVector = referenceDataset.ImageOrientationPatient.slice(3, 6);
      var scanAxis = ImageNormalizer.vec3CrossProduct(rowVector, columnVector);
      var distanceDatasetPairs = [];
      this.datasets.forEach(function (dataset) {
        var position = dataset.ImagePositionPatient.slice();
        var positionVector = ImageNormalizer.vec3Subtract(position, referencePosition);
        var distance = ImageNormalizer.vec3Dot(positionVector, scanAxis);
        distanceDatasetPairs.push([distance, dataset]);
      });
      distanceDatasetPairs.sort(function (a, b) {
        return b[0] - a[0];
      }); // assign array buffers

      if (ds.BitsAllocated !== 16) {
        lib.error("Only works with 16 bit data, not " + String(this.dataset.BitsAllocated));
      }

      if (referenceDataset._vrMap && !referenceDataset._vrMap.PixelData) {
        lib.warn("No vr map given for pixel data, using OW");
        ds._vrMap = {
          PixelData: "OW"
        };
      } else {
        ds._vrMap = {
          PixelData: referenceDataset._vrMap.PixelData
        };
      }

      var frameSize = referenceDataset.PixelData.byteLength;
      ds.PixelData = new ArrayBuffer(ds.NumberOfFrames * frameSize);
      var frame = 0;
      distanceDatasetPairs.forEach(function (pair) {
        var dataset = pair[1];
        var pixels = new Uint16Array(dataset.PixelData);
        var frameView = new Uint16Array(ds.PixelData, frame * frameSize, frameSize / 2);

        try {
          frameView.set(pixels);
        } catch (e) {
          if (e instanceof RangeError) {
            lib.error("Error inserting pixels in PixelData");
            lib.error("frameSize", frameSize);
            lib.error("NumberOfFrames", ds.NumberOfFrames);
            lib.error("pair", pair);
            lib.error("dataset PixelData size", dataset.PixelData.length);
          }
        }

        frame++;
      });

      if (ds.NumberOfFrames < 2) {
        // TODO
        lib.error("Cannot populate shared groups uniquely without multiple frames");
      }

      var _distanceDatasetPairs = _slicedToArray(distanceDatasetPairs[0], 2),
          distance0 = _distanceDatasetPairs[0],
          dataset0 = _distanceDatasetPairs[1];

      var distance1 = distanceDatasetPairs[1][0]; //
      // make the functional groups
      //
      // shared

      var SpacingBetweenSlices = Math.abs(distance1 - distance0);
      ds.SharedFunctionalGroupsSequence = {
        PlaneOrientationSequence: {
          ImageOrientationPatient: dataset0.ImageOrientationPatient
        },
        PixelMeasuresSequence: {
          PixelSpacing: dataset0.PixelSpacing,
          SpacingBetweenSlices: SpacingBetweenSlices,
          SliceThickness: SpacingBetweenSlices
        }
      };
      ds.ReferencedSeriesSequence = {
        SeriesInstanceUID: dataset0.SeriesInstanceUID,
        ReferencedInstanceSequence: []
      }; // per-frame

      ds.PerFrameFunctionalGroupsSequence = []; // copy over each datasets window/level into the per-frame groups
      // and set the referenced series uid

      this.datasets.forEach(function (dataset, datasetIndex) {
        ds.PerFrameFunctionalGroupsSequence.push({
          PlanePositionSequence: {
            ImagePositionPatient: distanceDatasetPairs[datasetIndex][1].ImagePositionPatient
          },
          FrameVOILUTSequence: {
            WindowCenter: dataset.WindowCenter,
            WindowWidth: dataset.WindowWidth
          }
        });
        ds.ReferencedSeriesSequence.ReferencedInstanceSequence.push({
          ReferencedSOPClassUID: dataset.SOPClassUID,
          ReferencedSOPInstanceUID: dataset.SOPInstanceUID
        });
      });
      var dimensionUID = DicomMetaDictionary.uid();
      this.dataset.DimensionOrganizationSequence = {
        DimensionOrganizationUID: dimensionUID
      };
      this.dataset.DimensionIndexSequence = [{
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 2097202,
        FunctionalGroupPointer: 2134291,
        // PlanePositionSequence
        DimensionDescriptionLabel: "ImagePositionPatient"
      }];
    }
  }, {
    key: "normalizeMultiframe",
    value: function normalizeMultiframe() {
      var ds = this.dataset;

      if (!ds.NumberOfFrames) {
        lib.error("Missing number or frames not supported");
        return;
      }

      if (Number(ds.NumberOfFrames) === 1) {
        lib.error("Single frame instance of multiframe class not supported");
        return;
      }

      if (!ds.PixelRepresentation) {
        // Required tag: guess signed
        ds.PixelRepresentation = 1;
      }

      if (!ds.StudyID || ds.StudyID === "") {
        // Required tag: fill in if needed
        ds.StudyID = "No Study ID";
      }

      var validLateralities = ["R", "L"];

      if (validLateralities.indexOf(ds.Laterality) === -1) {
        delete ds.Laterality;
      }

      if (!ds.PresentationLUTShape) {
        ds.PresentationLUTShape = "IDENTITY";
      }

      if (!ds.SharedFunctionalGroupsSequence) {
        lib.error("Can only process multiframe data with SharedFunctionalGroupsSequence");
      } // TODO: special case!


      if (ds.BodyPartExamined === "PROSTATE") {
        ds.SharedFunctionalGroupsSequence.FrameAnatomySequence = {
          AnatomicRegionSequence: {
            CodeValue: "T-9200B",
            CodingSchemeDesignator: "SRT",
            CodeMeaning: "Prostate"
          },
          FrameLaterality: "U"
        };
      }

      var rescaleIntercept = ds.RescaleIntercept || 0;
      var rescaleSlope = ds.RescaleSlope || 1;
      ds.SharedFunctionalGroupsSequence.PixelValueTransformationSequence = {
        RescaleIntercept: rescaleIntercept,
        RescaleSlope: rescaleSlope,
        RescaleType: "US"
      };
      var frameNumber = 1;
      this.datasets.forEach(function (dataset) {
        ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence = {
          FrameAcquisitionDuration: 0,
          StackID: 1,
          InStackPositionNumber: frameNumber,
          DimensionIndexValues: frameNumber
        };
        var frameTime = dataset.AcquisitionDate + dataset.AcquisitionTime;

        if (!isNaN(frameTime)) {
          var frameContentSequence = ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence;
          frameContentSequence.FrameAcquisitionDateTime = frameTime;
          frameContentSequence.FrameReferenceDateTime = frameTime;
        }

        frameNumber++;
      }); //
      // TODO: convert this to shared functional group not top level element
      //

      if (ds.WindowCenter && ds.WindowWidth) {
        // if they exist as single values, make them lists for consistency
        if (!Array.isArray(ds.WindowCenter)) {
          ds.WindowCenter = [ds.WindowCenter];
        }

        if (!Array.isArray(ds.WindowWidth)) {
          ds.WindowWidth = [ds.WindowWidth];
        }
      }

      if (!ds.WindowCenter || !ds.WindowWidth) {
        // if they don't exist, make them empty lists and try to initialize them
        ds.WindowCenter = []; // both must exist and be the same length

        ds.WindowWidth = []; // provide a volume-level window/level guess (mean of per-frame)

        if (ds.PerFrameFunctionalGroupsSequence) {
          var wcww = {
            center: 0,
            width: 0,
            count: 0
          };
          ds.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {
            if (functionalGroup.FrameVOILUT) {
              var wc = functionalGroup.FrameVOILUTSequence.WindowCenter;
              var ww = functionalGroup.FrameVOILUTSequence.WindowWidth;

              if (functionalGroup.FrameVOILUTSequence && wc && ww) {
                if (Array.isArray(wc)) {
                  wc = wc[0];
                }

                if (Array.isArray(ww)) {
                  ww = ww[0];
                }

                wcww.center += Number(wc);
                wcww.width += Number(ww);
                wcww.count++;
              }
            }
          });

          if (wcww.count > 0) {
            ds.WindowCenter.push(String(wcww.center / wcww.count));
            ds.WindowWidth.push(String(wcww.width / wcww.count));
          }
        }
      } // last gasp, pick an arbitrary default


      if (ds.WindowCenter.length === 0) {
        ds.WindowCenter = [300];
      }

      if (ds.WindowWidth.length === 0) {
        ds.WindowWidth = [500];
      }
    }
  }], [{
    key: "vec3CrossProduct",
    value: function vec3CrossProduct(a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2],
          bx = b[0],
          by = b[1],
          bz = b[2];
      var out = [];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out;
    }
  }, {
    key: "vec3Subtract",
    value: function vec3Subtract(a, b) {
      var out = [];
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      return out;
    }
  }, {
    key: "vec3Dot",
    value: function vec3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
  }]);

  return ImageNormalizer;
}(Normalizer);

var MRImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer) {
  _inherits(MRImageNormalizer, _ImageNormalizer);

  function MRImageNormalizer() {
    _classCallCheck(this, MRImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(MRImageNormalizer).apply(this, arguments));
  }

  _createClass(MRImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(MRImageNormalizer.prototype), "normalize", this).call(this); // TODO: make specialization for LegacyConverted vs normal EnhanceMRImage
      //let toUID = DicomMetaDictionary.sopClassUIDsByName;


      this.dataset.SOPClassUID = "LegacyConvertedEnhancedMRImage"; //this.dataset.SOPClassUID = toUID.EnhancedMRImage;
    }
  }, {
    key: "normalizeMultiframe",
    value: function normalizeMultiframe() {
      _get(_getPrototypeOf(MRImageNormalizer.prototype), "normalizeMultiframe", this).call(this);

      var ds = this.dataset;

      if (!ds.ImageType || !ds.ImageType.constructor || ds.ImageType.constructor.name != "Array" || ds.ImageType.length != 4) {
        ds.ImageType = ["ORIGINAL", "PRIMARY", "OTHER", "NONE"];
      }

      ds.SharedFunctionalGroupsSequence.MRImageFrameType = {
        FrameType: ds.ImageType,
        PixelPresentation: "MONOCHROME",
        VolumetricProperties: "VOLUME",
        VolumeBasedCalculationTechnique: "NONE",
        ComplexImageComponent: "MAGNITUDE",
        AcquisitionContrast: "UNKNOWN"
      };
    }
  }]);

  return MRImageNormalizer;
}(ImageNormalizer);

var EnhancedCTImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer2) {
  _inherits(EnhancedCTImageNormalizer, _ImageNormalizer2);

  function EnhancedCTImageNormalizer() {
    _classCallCheck(this, EnhancedCTImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(EnhancedCTImageNormalizer).apply(this, arguments));
  }

  _createClass(EnhancedCTImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(EnhancedCTImageNormalizer.prototype), "normalize", this).call(this);
    }
  }]);

  return EnhancedCTImageNormalizer;
}(ImageNormalizer);

var EnhancedMRImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer3) {
  _inherits(EnhancedMRImageNormalizer, _ImageNormalizer3);

  function EnhancedMRImageNormalizer() {
    _classCallCheck(this, EnhancedMRImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(EnhancedMRImageNormalizer).apply(this, arguments));
  }

  _createClass(EnhancedMRImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(EnhancedMRImageNormalizer.prototype), "normalize", this).call(this);
    }
  }]);

  return EnhancedMRImageNormalizer;
}(ImageNormalizer);

var EnhancedUSVolumeNormalizer =
/*#__PURE__*/
function (_ImageNormalizer4) {
  _inherits(EnhancedUSVolumeNormalizer, _ImageNormalizer4);

  function EnhancedUSVolumeNormalizer() {
    _classCallCheck(this, EnhancedUSVolumeNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(EnhancedUSVolumeNormalizer).apply(this, arguments));
  }

  _createClass(EnhancedUSVolumeNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(EnhancedUSVolumeNormalizer.prototype), "normalize", this).call(this);
    }
  }]);

  return EnhancedUSVolumeNormalizer;
}(ImageNormalizer);

var CTImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer5) {
  _inherits(CTImageNormalizer, _ImageNormalizer5);

  function CTImageNormalizer() {
    _classCallCheck(this, CTImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(CTImageNormalizer).apply(this, arguments));
  }

  _createClass(CTImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(CTImageNormalizer.prototype), "normalize", this).call(this); // TODO: provide option at export to swap in LegacyConverted UID


      var toUID = DicomMetaDictionary.sopClassUIDsByName; //this.dataset.SOPClassUID = "LegacyConvertedEnhancedCTImage";

      this.dataset.SOPClassUID = toUID.EnhancedCTImage;
    }
  }]);

  return CTImageNormalizer;
}(ImageNormalizer);

var PETImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer6) {
  _inherits(PETImageNormalizer, _ImageNormalizer6);

  function PETImageNormalizer() {
    _classCallCheck(this, PETImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(PETImageNormalizer).apply(this, arguments));
  }

  _createClass(PETImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(PETImageNormalizer.prototype), "normalize", this).call(this); // TODO: provide option at export to swap in LegacyConverted UID


      var toUID = DicomMetaDictionary.sopClassUIDsByName; //this.dataset.SOPClassUID = "LegacyConvertedEnhancedPETImage";

      this.dataset.SOPClassUID = toUID.EnhancedPETImage;
    }
  }]);

  return PETImageNormalizer;
}(ImageNormalizer);

var SEGImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer7) {
  _inherits(SEGImageNormalizer, _ImageNormalizer7);

  function SEGImageNormalizer() {
    _classCallCheck(this, SEGImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(SEGImageNormalizer).apply(this, arguments));
  }

  _createClass(SEGImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(SEGImageNormalizer.prototype), "normalize", this).call(this);
    }
  }]);

  return SEGImageNormalizer;
}(ImageNormalizer);

var PMImageNormalizer =
/*#__PURE__*/
function (_ImageNormalizer8) {
  _inherits(PMImageNormalizer, _ImageNormalizer8);

  function PMImageNormalizer() {
    _classCallCheck(this, PMImageNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(PMImageNormalizer).apply(this, arguments));
  }

  _createClass(PMImageNormalizer, [{
    key: "normalize",
    value: function normalize() {
      _get(_getPrototypeOf(PMImageNormalizer.prototype), "normalize", this).call(this);

      var ds = this.datasets[0];

      if (ds.BitsAllocated !== 32) {
        lib.error("Only works with 32 bit data, not " + String(ds.BitsAllocated));
      }
    }
  }]);

  return PMImageNormalizer;
}(ImageNormalizer);

var DSRNormalizer =
/*#__PURE__*/
function (_Normalizer2) {
  _inherits(DSRNormalizer, _Normalizer2);

  function DSRNormalizer() {
    _classCallCheck(this, DSRNormalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(DSRNormalizer).apply(this, arguments));
  }

  _createClass(DSRNormalizer, [{
    key: "normalize",
    value: function normalize() {
      this.dataset = this.datasets[0]; // only one dataset per series and for now we assume it is normalized
    }
  }]);

  return DSRNormalizer;
}(Normalizer);

var Segmentation =
/*#__PURE__*/
function (_DerivedPixels) {
  _inherits(Segmentation, _DerivedPixels);

  function Segmentation(datasets) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      includeSliceSpacing: true
    };

    _classCallCheck(this, Segmentation);

    return _possibleConstructorReturn(this, _getPrototypeOf(Segmentation).call(this, datasets, options));
  }

  _createClass(Segmentation, [{
    key: "derive",
    value: function derive() {
      _get(_getPrototypeOf(Segmentation.prototype), "derive", this).call(this);

      this.assignToDataset({
        SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.Segmentation,
        Modality: "SEG",
        SamplesPerPixel: "1",
        PhotometricInterpretation: "MONOCHROME2",
        BitsAllocated: "1",
        BitsStored: "1",
        HighBit: "0",
        PixelRepresentation: "0",
        LossyImageCompression: "00",
        SegmentationType: "BINARY",
        ContentLabel: "SEGMENTATION"
      });
      var dimensionUID = DicomMetaDictionary.uid();
      this.dataset.DimensionOrganizationSequence = {
        DimensionOrganizationUID: dimensionUID
      };
      this.dataset.DimensionIndexSequence = [{
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 6422539,
        FunctionalGroupPointer: 6422538,
        // SegmentIdentificationSequence
        DimensionDescriptionLabel: "ReferencedSegmentNumber"
      }, {
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 2097202,
        FunctionalGroupPointer: 2134291,
        // PlanePositionSequence
        DimensionDescriptionLabel: "ImagePositionPatient"
      }];
      this.dataset.SegmentSequence = []; // TODO: check logic here.
      // If the referenced dataset itself references a series, then copy.
      // Otherwise, reference the dataset itself.
      // This should allow Slicer and others to get the correct original
      // images when loading Legacy Converted Images, but it's a workaround
      // that really doesn't belong here.

      if (this.referencedDataset.ReferencedSeriesSequence) {
        this.dataset.ReferencedSeriesSequence = DerivedDataset.copyDataset(this.referencedDataset.ReferencedSeriesSequence);
      } else {
        var ReferencedInstanceSequence = [];

        for (var i = 0; i < this.referencedDatasets.length; i++) {
          ReferencedInstanceSequence.push({
            ReferencedSOPClassUID: this.referencedDatasets[i].SOPClassUID,
            ReferencedSOPInstanceUID: this.referencedDatasets[i].SOPInstanceUID
          });
        }

        this.dataset.ReferencedSeriesSequence = {
          SeriesInstanceUID: this.referencedDataset.SeriesInstanceUID,
          StudyInstanceUID: this.referencedDataset.StudyInstanceUID,
          ReferencedInstanceSequence: ReferencedInstanceSequence
        };
      }

      if (!this.options.includeSliceSpacing) {
        // per dciodvfy this should not be included, but dcmqi/Slicer requires it
        delete this.dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence.SpacingBetweenSlices;
      }

      if (this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence) {
        // If derived from a CT, this shouldn't be left in the SEG.
        delete this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence;
      } // The pixelData array needs to be defined once you know how many frames you'll have.


      this.dataset.PixelData = undefined;
      this.dataset.NumberOfFrames = 0;
      this.dataset.PerFrameFunctionalGroupsSequence = [];
    }
    /**
     * setNumberOfFrames - Sets the number of frames of the segmentation object
     * and allocates (non-bitpacked) memory for the PixelData for constuction.
     *
     * @param  {type} NumberOfFrames The number of segmentation frames.
     */

  }, {
    key: "setNumberOfFrames",
    value: function setNumberOfFrames(NumberOfFrames) {
      var dataset = this.dataset;
      dataset.NumberOfFrames = NumberOfFrames;
      dataset.PixelData = new ArrayBuffer(dataset.Rows * dataset.Columns * NumberOfFrames);
    }
    /**
     * bitPackPixelData - Bitpacks the pixeldata, should be called after all
     * segments are addded.
     *
     * @returns {type}  description
     */

  }, {
    key: "bitPackPixelData",
    value: function bitPackPixelData() {
      if (this.isBitpacked) {
        console.warn("This.bitPackPixelData has already been called, it should only be called once, when all frames have been added. Exiting.");
      }

      var dataset = this.dataset;
      var unpackedPixelData = dataset.PixelData;
      var uInt8ViewUnpackedPixelData = new Uint8Array(unpackedPixelData);
      var bitPackedPixelData = BitArray.pack(uInt8ViewUnpackedPixelData);
      dataset.PixelData = bitPackedPixelData.buffer;
      this.isBitpacked = true;
    }
    /**
     * addSegmentFromLabelmap - Adds a segment to the dataset,
     * where the labelmaps are a set of 2D labelmaps, from which to extract the binary maps.
     *
     * @param  {type} Segment   The segment metadata.
     * @param  {Uint8Array[]} labelmaps labelmap arrays for each index of referencedFrameNumbers.
     * @param  {number}  segmentIndexInLabelmap The segment index to extract from the labelmap
     *    (might be different to the segment metadata depending on implementation).
     * @param  {number[]} referencedFrameNumbers  The frames that the
     *                                            segmentation references.
     *
     */

  }, {
    key: "addSegmentFromLabelmap",
    value: function addSegmentFromLabelmap(Segment, labelmaps, segmentIndexInLabelmap, referencedFrameNumbers) {
      if (this.dataset.NumberOfFrames === 0) {
        throw new Error("Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.");
      }

      this._addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndexInLabelmap);

      var ReferencedSegmentNumber = this._addSegmentMetadata(Segment);

      this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);
    }
  }, {
    key: "_addSegmentPixelDataFromLabelmaps",
    value: function _addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndex) {
      var dataset = this.dataset;
      var existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;
      var sliceLength = dataset.Rows * dataset.Columns;
      var byteOffset = existingFrames * sliceLength;
      var pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, labelmaps.length * sliceLength);

      var occupiedValue = this._getOccupiedValue();

      for (var l = 0; l < labelmaps.length; l++) {
        var labelmap = labelmaps[l];

        for (var i = 0; i < labelmap.length; i++) {
          if (labelmap[i] === segmentIndex) {
            pixelDataUInt8View[l * sliceLength + i] = occupiedValue;
          }
        }
      }
    }
  }, {
    key: "_getOccupiedValue",
    value: function _getOccupiedValue() {
      if (this.dataset.SegmentationType === "FRACTIONAL") {
        return 255;
      }

      return 1;
    }
    /**
     * addSegment - Adds a segment to the dataset.
     *
     * @param  {type} Segment   The segment metadata.
     * @param  {Uint8Array} pixelData The pixelData array containing all frames
     *                                of the segmentation.
     * @param  {Number[]} referencedFrameNumbers  The frames that the
     *                                            segmentation references.
     *
     */

  }, {
    key: "addSegment",
    value: function addSegment(Segment, pixelData, referencedFrameNumbers) {
      if (this.dataset.NumberOfFrames === 0) {
        throw new Error("Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.");
      }

      this._addSegmentPixelData(pixelData);

      var ReferencedSegmentNumber = this._addSegmentMetadata(Segment);

      this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);
    }
  }, {
    key: "_addSegmentPixelData",
    value: function _addSegmentPixelData(pixelData) {
      var dataset = this.dataset;
      var existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;
      var sliceLength = dataset.Rows * dataset.Columns;
      var byteOffset = existingFrames * sliceLength;
      var pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, pixelData.length);

      for (var i = 0; i < pixelData.length; i++) {
        pixelDataUInt8View[i] = pixelData[i];
      }
    }
  }, {
    key: "_addPerFrameFunctionalGroups",
    value: function _addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers) {
      var PerFrameFunctionalGroupsSequence = this.dataset.PerFrameFunctionalGroupsSequence;
      var ReferencedSeriesSequence = this.referencedDataset.ReferencedSeriesSequence;

      for (var i = 0; i < referencedFrameNumbers.length; i++) {
        var frameNumber = referencedFrameNumbers[i];
        var perFrameFunctionalGroups = {};
        perFrameFunctionalGroups.PlanePositionSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlanePositionSequence); // If the PlaneOrientationSequence is not in the SharedFunctionalGroupsSequence,
        // extract it from the PerFrameFunctionalGroupsSequence.

        if (!this.dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence) {
          perFrameFunctionalGroups.PlaneOrientationSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlaneOrientationSequence);
        }

        perFrameFunctionalGroups.FrameContentSequence = {
          DimensionIndexValues: [ReferencedSegmentNumber, frameNumber]
        };
        perFrameFunctionalGroups.SegmentIdentificationSequence = {
          ReferencedSegmentNumber: ReferencedSegmentNumber
        };
        var ReferencedSOPClassUID = void 0;
        var ReferencedSOPInstanceUID = void 0;
        var ReferencedFrameNumber = void 0;

        if (ReferencedSeriesSequence) {
          var referencedInstanceSequenceI = ReferencedSeriesSequence.ReferencedInstanceSequence[frameNumber - 1];
          ReferencedSOPClassUID = referencedInstanceSequenceI.ReferencedSOPClassUID;
          ReferencedSOPInstanceUID = referencedInstanceSequenceI.ReferencedSOPInstanceUID;

          if (Normalizer.isMultiframeSOPClassUID(ReferencedSOPClassUID)) {
            ReferencedFrameNumber = frameNumber;
          }
        } else {
          ReferencedSOPClassUID = this.referencedDataset.SOPClassUID;
          ReferencedSOPInstanceUID = this.referencedDataset.SOPInstanceUID;
          ReferencedFrameNumber = frameNumber;
        }

        if (ReferencedFrameNumber) {
          perFrameFunctionalGroups.DerivationImageSequence = {
            SourceImageSequence: {
              ReferencedSOPClassUID: ReferencedSOPClassUID,
              ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,
              ReferencedFrameNumber: ReferencedFrameNumber,
              PurposeOfReferenceCodeSequence: {
                CodeValue: "121322",
                CodingSchemeDesignator: "DCM",
                CodeMeaning: "Source image for image processing operation"
              }
            },
            DerivationCodeSequence: {
              CodeValue: "113076",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Segmentation"
            }
          };
        } else {
          perFrameFunctionalGroups.DerivationImageSequence = {
            SourceImageSequence: {
              ReferencedSOPClassUID: ReferencedSOPClassUID,
              ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,
              PurposeOfReferenceCodeSequence: {
                CodeValue: "121322",
                CodingSchemeDesignator: "DCM",
                CodeMeaning: "Source image for image processing operation"
              }
            },
            DerivationCodeSequence: {
              CodeValue: "113076",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Segmentation"
            }
          };
        }

        PerFrameFunctionalGroupsSequence.push(perFrameFunctionalGroups);
      }
    }
  }, {
    key: "_addSegmentMetadata",
    value: function _addSegmentMetadata(Segment) {
      if (!Segment.SegmentLabel || !Segment.SegmentedPropertyCategoryCodeSequence || !Segment.SegmentedPropertyTypeCodeSequence || !Segment.SegmentAlgorithmType) {
        throw new Error("Segment does not contain all the required fields.");
      } // Capitalise the SegmentAlgorithmType if it happens to be given in
      // Lower/mixed case.


      Segment.SegmentAlgorithmType = Segment.SegmentAlgorithmType.toUpperCase(); // Check SegmentAlgorithmType and SegmentAlgorithmName if necessary.

      switch (Segment.SegmentAlgorithmType) {
        case "AUTOMATIC":
        case "SEMIAUTOMATIC":
          if (!Segment.SegmentAlgorithmName) {
            throw new Error("If the SegmentAlgorithmType is SEMIAUTOMATIC or AUTOMATIC,\n          SegmentAlgorithmName must be provided");
          }

          break;

        case "MANUAL":
          break;

        default:
          throw new Error("SegmentAlgorithmType ".concat(Segment.SegmentAlgorithmType, " invalid."));
      } // Deep copy, so we don't change the segment index stored in cornerstoneTools.


      var SegmentSequence = this.dataset.SegmentSequence;
      var SegmentAlgorithmType = Segment.SegmentAlgorithmType;
      var reNumberedSegmentCopy = {
        SegmentedPropertyCategoryCodeSequence: Segment.SegmentedPropertyCategoryCodeSequence,
        SegmentNumber: (SegmentSequence.length + 1).toString(),
        SegmentLabel: Segment.SegmentLabel,
        SegmentAlgorithmType: SegmentAlgorithmType,
        RecommendedDisplayCIELabValue: Segment.RecommendedDisplayCIELabValue,
        SegmentedPropertyTypeCodeSequence: Segment.SegmentedPropertyTypeCodeSequence
      };

      if (SegmentAlgorithmType === "AUTOMATIC" || SegmentAlgorithmType === "SEMIAUTOMATIC") {
        reNumberedSegmentCopy.SegmentAlgorithmName = Segment.SegmentAlgorithmName;
      }

      SegmentSequence.push(reNumberedSegmentCopy);
      return reNumberedSegmentCopy.SegmentNumber;
    }
  }]);

  return Segmentation;
}(DerivedPixels);

var ParametricMap =
/*#__PURE__*/
function (_DerivedDataset) {
  _inherits(ParametricMap, _DerivedDataset);

  function ParametricMap(datasets) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ParametricMap);

    return _possibleConstructorReturn(this, _getPrototypeOf(ParametricMap).call(this, datasets, options));
  } // this assumes a normalized multiframe input and will create
  // a multiframe derived image


  _createClass(ParametricMap, [{
    key: "derive",
    value: function derive() {
      _get(_getPrototypeOf(ParametricMap.prototype), "derive", this).call(this);

      this.assignToDataset({// TODO: ???
      });
      this.assignFromReference([]);
    }
  }]);

  return ParametricMap;
}(DerivedDataset);

var StructuredReport =
/*#__PURE__*/
function (_DerivedDataset) {
  _inherits(StructuredReport, _DerivedDataset);

  function StructuredReport(datasets) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, StructuredReport);

    return _possibleConstructorReturn(this, _getPrototypeOf(StructuredReport).call(this, datasets, options));
  } // this assumes a normalized multiframe input and will create
  // a multiframe derived image


  _createClass(StructuredReport, [{
    key: "derive",
    value: function derive() {
      _get(_getPrototypeOf(StructuredReport.prototype), "derive", this).call(this);

      this.assignToDataset({
        SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.EnhancedSR,
        Modality: "SR",
        ValueType: "CONTAINER"
      });
      this.assignFromReference([]);
    }
  }]);

  return StructuredReport;
}(DerivedDataset);

var TID1500MeasurementReport =
/*#__PURE__*/
function () {
  function TID1500MeasurementReport(TID1501MeasurementGroups) {
    _classCallCheck(this, TID1500MeasurementReport);

    this.TID1501MeasurementGroups = TID1501MeasurementGroups;
  }

  _createClass(TID1500MeasurementReport, [{
    key: "validate",
    value: function validate() {}
  }, {
    key: "contentItem",
    value: function contentItem(derivationSourceDataset) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Add the Measurement Groups to the Measurement Report
      var ContentSequence = [];
      this.TID1501MeasurementGroups.forEach(function (child) {
        ContentSequence = ContentSequence.concat(child.contentItem());
      }); // For each measurement that is referenced, add a link to the
      // Image Library Group and the Current Requested Procedure Evidence
      // with the proper ReferencedSOPSequence

      var ImageLibraryContentSequence = [];
      var CurrentRequestedProcedureEvidenceSequence = [];
      this.TID1501MeasurementGroups.forEach(function (measurementGroup) {
        measurementGroup.TID300Measurements.forEach(function (measurement) {
          ImageLibraryContentSequence.push({
            RelationshipType: "CONTAINS",
            ValueType: "IMAGE",
            ReferencedSOPSequence: measurement.ReferencedSOPSequence
          });
          CurrentRequestedProcedureEvidenceSequence.push({
            StudyInstanceUID: derivationSourceDataset.StudyInstanceUID,
            ReferencedSeriesSequence: {
              SeriesInstanceUID: derivationSourceDataset.SeriesInstanceUID,
              ReferencedSOPSequence: measurement.ReferencedSOPSequence
            }
          });
        });
      });
      return {
        ConceptNameCodeSequence: {
          CodeValue: "126000",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Imaging Measurement Report"
        },
        ContinuityOfContent: "SEPARATE",
        PerformedProcedureCodeSequence: [],
        CompletionFlag: "COMPLETE",
        VerificationFlag: "UNVERIFIED",
        ReferencedPerformedProcedureStepSequence: [],
        InstanceNumber: 1,
        CurrentRequestedProcedureEvidenceSequence: CurrentRequestedProcedureEvidenceSequence,
        CodingSchemeIdentificationSequence: {
          CodingSchemeDesignator: "99dcmjs",
          CodingSchemeName: "Codes used for dcmjs",
          CodingSchemeVersion: "0",
          CodingSchemeResponsibleOrganization: "https://github.com/dcmjs-org/dcmjs"
        },
        ContentTemplateSequence: {
          MappingResource: "DCMR",
          TemplateIdentifier: "1500"
        },
        ContentSequence: [{
          RelationshipType: "HAS CONCEPT MOD",
          ValueType: "CODE",
          ConceptNameCodeSequence: {
            CodeValue: "121049",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Language of Content Item and Descendants"
          },
          ConceptCodeSequence: {
            CodeValue: "eng",
            CodingSchemeDesignator: "RFC5646",
            CodeMeaning: "English"
          },
          ContentSequence: {
            RelationshipType: "HAS CONCEPT MOD",
            ValueType: "CODE",
            ConceptNameCodeSequence: {
              CodeValue: "121046",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Country of Language"
            },
            ConceptCodeSequence: {
              CodeValue: "US",
              CodingSchemeDesignator: "ISO3166_1",
              CodeMeaning: "United States"
            }
          }
        }, {
          RelationshipType: "HAS OBS CONTEXT",
          ValueType: "PNAME",
          ConceptNameCodeSequence: {
            CodeValue: "121008",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Person Observer Name"
          },
          PersonName: options.PersonName || "unknown^unknown"
        }, {
          RelationshipType: "HAS CONCEPT MOD",
          ValueType: "CODE",
          ConceptNameCodeSequence: {
            CodeValue: "121058",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Procedure reported"
          },
          ConceptCodeSequence: {
            CodeValue: "1",
            CodingSchemeDesignator: "99dcmjs",
            CodeMeaning: "Unknown procedure"
          }
        }, {
          RelationshipType: "CONTAINS",
          ValueType: "CONTAINER",
          ConceptNameCodeSequence: {
            CodeValue: "111028",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Image Library"
          },
          ContinuityOfContent: "SEPARATE",
          ContentSequence: {
            RelationshipType: "CONTAINS",
            ValueType: "CONTAINER",
            ConceptNameCodeSequence: {
              CodeValue: "126200",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Image Library Group"
            },
            ContinuityOfContent: "SEPARATE",
            ContentSequence: ImageLibraryContentSequence
          }
        }, {
          RelationshipType: "CONTAINS",
          ValueType: "CONTAINER",
          ConceptNameCodeSequence: {
            CodeValue: "126010",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Imaging Measurements" // TODO: would be nice to abstract the code sequences (in a dictionary? a service?)

          },
          ContinuityOfContent: "SEPARATE",
          ContentSequence: {
            RelationshipType: "CONTAINS",
            ValueType: "CONTAINER",
            ConceptNameCodeSequence: {
              CodeValue: "125007",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Measurement Group"
            },
            ContinuityOfContent: "SEPARATE",
            ContentSequence: ContentSequence
          }
        }]
      };
    }
  }]);

  return TID1500MeasurementReport;
}();

var TID1501MeasurementGroup =
/*#__PURE__*/
function () {
  function TID1501MeasurementGroup(TID300Measurements) {
    _classCallCheck(this, TID1501MeasurementGroup);

    this.TID300Measurements = TID300Measurements;
  }

  _createClass(TID1501MeasurementGroup, [{
    key: "contentItem",
    value: function contentItem() {
      var TID300Measurements = this.TID300Measurements; // TODO: Is there nothing else in this group?

      var contentItem = [];
      var measurements = [];
      TID300Measurements.forEach(function (TID300Measurement) {
        measurements = measurements.concat(TID300Measurement.contentItem());
      });
      contentItem = contentItem.concat(measurements);
      return contentItem;
    }
  }]);

  return TID1501MeasurementGroup;
}();

var toArray = function toArray(x) {
  return x.constructor.name === "Array" ? x : [x];
};

var codeMeaningEquals = function codeMeaningEquals(codeMeaningName) {
  return function (contentItem) {
    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;
  };
};

var graphicTypeEquals = function graphicTypeEquals(graphicType) {
  return function (contentItem) {
    return contentItem.ContentSequence !== undefined && contentItem.ContentSequence.GraphicType === graphicType;
  };
};

function getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass) {
  var args = toolClass.getTID300RepresentationArguments(tool);
  args.ReferencedSOPSequence = ReferencedSOPSequence;
  var TID300Measurement = new toolClass.TID300Representation(args);
  return TID300Measurement;
}

function getMeasurementGroup(toolType, toolData, ReferencedSOPSequence) {
  var toolTypeData = toolData[toolType];
  var toolClass = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];

  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length) {
    return;
  } // Loop through the array of tool instances
  // for this tool


  var Measurements = toolTypeData.data.map(function (tool) {
    return getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass);
  });
  return new TID1501MeasurementGroup(Measurements);
}

var MeasurementReport =
/*#__PURE__*/
function () {
  function MeasurementReport() {
    _classCallCheck(this, MeasurementReport);
  }

  _createClass(MeasurementReport, null, [{
    key: "generateReport",
    value: function generateReport(toolState, metadataProvider, options) {
      // ToolState for array of imageIDs to a Report
      // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID
      var allMeasurementGroups = [];
      var firstImageId = Object.keys(toolState)[0];

      if (!firstImageId) {
        throw new Error("No measurements provided.");
      }
      /* Patient ID
      Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID
      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date
      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time
      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID */


      var generalSeriesModule = metadataProvider.get("generalSeriesModule", firstImageId); //const sopCommonModule = metadataProvider.get('sopCommonModule', firstImageId);

      var studyInstanceUID = generalSeriesModule.studyInstanceUID,
          seriesInstanceUID = generalSeriesModule.seriesInstanceUID; // Loop through each image in the toolData

      Object.keys(toolState).forEach(function (imageId) {
        var sopCommonModule = metadataProvider.get("sopCommonModule", imageId);
        var frameNumber = metadataProvider.get("frameNumber", imageId);
        var toolData = toolState[imageId];
        var toolTypes = Object.keys(toolData);
        var ReferencedSOPSequence = {
          ReferencedSOPClassUID: sopCommonModule.sopClassUID,
          ReferencedSOPInstanceUID: sopCommonModule.sopInstanceUID
        };

        if (Normalizer.isMultiframeSOPClassUID(sopCommonModule.sopClassUID)) {
          ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;
        } // Loop through each tool type for the image


        var measurementGroups = [];
        toolTypes.forEach(function (toolType) {
          var group = getMeasurementGroup(toolType, toolData, ReferencedSOPSequence);

          if (group) {
            measurementGroups.push(group);
          }
        });
        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);
      });
      var MeasurementReport = new TID1500MeasurementReport(allMeasurementGroups, options); // TODO: what is the correct metaheader
      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html
      // TODO: move meta creation to happen in derivations.js

      var fileMetaInformationVersionArray = new Uint8Array(2);
      fileMetaInformationVersionArray[1] = 1;
      var derivationSourceDataset = {
        StudyInstanceUID: studyInstanceUID,
        SeriesInstanceUID: seriesInstanceUID //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?
        //SOPClassUID: sopClassUID,

      };
      var _meta = {
        FileMetaInformationVersion: {
          Value: [fileMetaInformationVersionArray.buffer],
          vr: "OB"
        },
        //MediaStorageSOPClassUID
        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,
        TransferSyntaxUID: {
          Value: ["1.2.840.10008.1.2.1"],
          vr: "UI"
        },
        ImplementationClassUID: {
          Value: [DicomMetaDictionary.uid()],
          // TODO: could be git hash or other valid id
          vr: "UI"
        },
        ImplementationVersionName: {
          Value: ["dcmjs"],
          vr: "SH"
        }
      };
      var _vrMap = {
        PixelData: "OW"
      };
      derivationSourceDataset._meta = _meta;
      derivationSourceDataset._vrMap = _vrMap;
      var report = new StructuredReport([derivationSourceDataset]);
      var contentItem = MeasurementReport.contentItem(derivationSourceDataset); // Merge the derived dataset with the content from the Measurement Report

      report.dataset = Object.assign(report.dataset, contentItem);
      report.dataset._meta = _meta;
      return report;
    }
  }, {
    key: "generateToolState",
    value: function generateToolState(dataset) {
      // For now, bail out if the dataset is not a TID1500 SR with length measurements
      if (dataset.ContentTemplateSequence.TemplateIdentifier !== "1500") {
        throw new Error("This package can currently only interpret DICOM SR TID 1500");
      }

      var REPORT = "Imaging Measurements";
      var GROUP = "Measurement Group"; // Identify the Imaging Measurements

      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT)); // Retrieve the Measurements themselves

      var measurementGroupContent = toArray(imagingMeasurementContent.ContentSequence).find(codeMeaningEquals(GROUP)); // For each of the supported measurement types, compute the measurement data

      var measurementData = {};
      Object.keys(MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE).forEach(function (measurementType) {
        // Filter to find supported measurement types in the Structured Report
        var measurementGroups = toArray(measurementGroupContent.ContentSequence);
        var measurementContent = measurementGroups.filter(codeMeaningEquals(measurementType));

        if (!measurementContent) {
          return;
        }

        var toolClass = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[measurementType];
        var toolType = toolClass.toolType;

        if (!toolClass.getMeasurementData) {
          throw new Error("Cornerstone Tool Adapters must define a getMeasurementData static method.");
        } // Retrieve Length Measurement Data


        measurementData[toolType] = toolClass.getMeasurementData(measurementContent);
      }); // TODO: Find a way to define 'how' to get an imageId ?
      // Need to provide something to generate imageId from Study / Series / Sop Instance UID
      // combine / reorganize all the toolData into the expected toolState format for Cornerstone Tools

      return measurementData;
    }
  }, {
    key: "registerTool",
    value: function registerTool(toolClass) {
      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;
      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;
      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;
    }
  }]);

  return MeasurementReport;
}();
MeasurementReport.MEASUREMENT_BY_TOOLTYPE = {};
MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};
MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};

var TID300Measurement = function TID300Measurement() {
  _classCallCheck(this, TID300Measurement);
};

var Length =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Length, _TID300Measurement);

  function Length(_ref) {
    var _this;

    var point1 = _ref.point1,
        point2 = _ref.point2,
        distance = _ref.distance,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence;

    _classCallCheck(this, Length);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Length).call(this));
    _this.point1 = point1;
    _this.point2 = point2;
    _this.distance = distance;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    return _this;
  }

  _createClass(Length, [{
    key: "contentItem",
    value: function contentItem() {
      var point1 = this.point1,
          point2 = this.point2,
          distance = this.distance,
          ReferencedSOPSequence = this.ReferencedSOPSequence;
      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-D7FE",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Length"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: distance
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [point1.x, point1.y, point2.x, point2.y],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Length;
}(TID300Measurement);

var Length$1 =
/*#__PURE__*/
function () {
  function Length$$1() {
    _classCallCheck(this, Length$$1);
  }

  _createClass(Length$$1, null, [{
    key: "measurementContentToLengthState",
    value: function measurementContentToLengthState(groupItemContent) {
      var lengthContent = groupItemContent.ContentSequence;
      var ReferencedSOPSequence = lengthContent.ContentSequence.ReferencedSOPSequence;
      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,
          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;
      var lengthState = {
        sopInstanceUid: ReferencedSOPInstanceUID,
        frameIndex: ReferencedFrameNumber || 0,
        length: groupItemContent.MeasuredValueSequence.NumericValue,
        toolType: Length$$1.toolType
      };
      lengthState.handles = {
        start: {},
        end: {}
      };

      var _lengthContent$Graphi = _slicedToArray(lengthContent.GraphicData, 4);

      lengthState.handles.start.x = _lengthContent$Graphi[0];
      lengthState.handles.start.y = _lengthContent$Graphi[1];
      lengthState.handles.end.x = _lengthContent$Graphi[2];
      lengthState.handles.end.y = _lengthContent$Graphi[3];
      // TODO: Save textbox position in GraphicData
      lengthState.handles.textBox = {
        hasMoved: false,
        movesIndependently: false,
        drawnIndependently: true,
        allowedOutsideImage: true,
        hasBoundingBox: true
      };
      return lengthState;
    } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.

  }, {
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      return measurementContent.map(Length$$1.measurementContentToLengthState);
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(tool) {
      var point1 = tool.handles.start;
      var point2 = tool.handles.end;
      var distance = tool.length;
      return {
        point1: point1,
        point2: point2,
        distance: distance
      };
    }
  }]);

  return Length$$1;
}();

Length$1.toolType = "Length";
Length$1.utilityToolType = "Length";
Length$1.TID300Representation = Length;
MeasurementReport.registerTool(Length$1);

/**
 * Expand an array of points stored as objects into
 * a flattened array of points
 *
 * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]
 * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]
 */

function expandPoints(points) {
  var allPoints = [];
  points.forEach(function (point) {
    allPoints.push(point[0]);
    allPoints.push(point[1]);

    if (point[2] !== undefined) {
      allPoints.push(point[2]);
    }
  });
  return allPoints;
}

var Polyline =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Polyline, _TID300Measurement);

  function Polyline(_ref) {
    var _this;

    var points = _ref.points,
        lengths = _ref.lengths,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence,
        _ref$use3DSpatialCoor = _ref.use3DSpatialCoordinates,
        use3DSpatialCoordinates = _ref$use3DSpatialCoor === void 0 ? false : _ref$use3DSpatialCoor;

    _classCallCheck(this, Polyline);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Polyline).call(this));
    _this.points = points;
    _this.lengths = lengths;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    _this.use3DSpatialCoordinates = use3DSpatialCoordinates;
    return _this;
  }

  _createClass(Polyline, [{
    key: "contentItem",
    value: function contentItem() {
      var points = this.points,
          lengths = this.lengths,
          ReferencedSOPSequence = this.ReferencedSOPSequence,
          _this$use3DSpatialCoo = this.use3DSpatialCoordinates,
          use3DSpatialCoordinates = _this$use3DSpatialCoo === void 0 ? false : _this$use3DSpatialCoo; // Combine all lengths to save the perimeter
      // @ToDO The permiter has to be implemented
      // const reducer = (accumulator, currentValue) => accumulator + currentValue;
      // const perimeter = lengths.reduce(reducer);

      var perimeter = {};
      var GraphicData = expandPoints(points); // TODO: Add Mean and STDev value of (modality?) pixels

      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter" // TODO: Look this up from a Code Meaning dictionary

        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }, {
        // TODO: This feels weird to repeat the GraphicData
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area" // TODO: Look this up from a Code Meaning dictionary

        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm2",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "SquareMilliMeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Polyline;
}(TID300Measurement);

var Freehand =
/*#__PURE__*/
function () {
  function Freehand() {
    _classCallCheck(this, Freehand);
  }

  _createClass(Freehand, null, [{
    key: "measurementContentToLengthState",
    value: function measurementContentToLengthState(groupItemContent) {
      var content = groupItemContent.ContentSequence;
      var ReferencedSOPSequence = content.ContentSequence.ReferencedSOPSequence;
      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,
          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;
      var state = {
        sopInstanceUid: ReferencedSOPInstanceUID,
        frameIndex: ReferencedFrameNumber || 0,
        toolType: Freehand.toolType
      }; // TODO: To be implemented!
      // Needs to add points, lengths

      return state;
    } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.

  }, {
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      return measurementContent.map(Freehand.measurementContentToLengthState);
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments()
    /*tool*/
    {
      // TO BE IMPLEMENTED
      return {
        /*points, lengths*/
      };
    }
  }]);

  return Freehand;
}();

Freehand.toolType = 'Freehand';
Freehand.utilityToolType = 'Polyline';
Freehand.TID300Representation = Polyline;
MeasurementReport.registerTool(Freehand);

var Bidirectional =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Bidirectional, _TID300Measurement);

  function Bidirectional(_ref) {
    var _this;

    var longAxis = _ref.longAxis,
        shortAxis = _ref.shortAxis,
        longAxisLength = _ref.longAxisLength,
        shortAxisLength = _ref.shortAxisLength,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence;

    _classCallCheck(this, Bidirectional);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bidirectional).call(this));
    _this.longAxis = longAxis;
    _this.shortAxis = shortAxis;
    _this.longAxisLength = longAxisLength;
    _this.shortAxisLength = shortAxisLength;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    return _this;
  }

  _createClass(Bidirectional, [{
    key: "contentItem",
    value: function contentItem() {
      var longAxis = this.longAxis,
          shortAxis = this.shortAxis,
          longAxisLength = this.longAxisLength,
          shortAxisLength = this.shortAxisLength,
          ReferencedSOPSequence = this.ReferencedSOPSequence;
      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A185",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Long Axis"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: longAxisLength
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [longAxis.point1.x, longAxis.point1.y, longAxis.point2.x, longAxis.point2.y],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A186",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Short Axis"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: shortAxisLength
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [shortAxis.point1.x, shortAxis.point1.y, shortAxis.point2.x, shortAxis.point2.y],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Bidirectional;
}(TID300Measurement);

var Bidirectional$1 =
/*#__PURE__*/
function () {
  function Bidirectional$$1() {
    _classCallCheck(this, Bidirectional$$1);
  }

  _createClass(Bidirectional$$1, null, [{
    key: "measurementContentToLengthState",
    value: function measurementContentToLengthState(groupItemContent) {
      var content = groupItemContent.ContentSequence;
      var ReferencedSOPSequence = content.ContentSequence.ReferencedSOPSequence;
      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,
          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;
      var state = {
        sopInstanceUid: ReferencedSOPInstanceUID,
        frameIndex: ReferencedFrameNumber || 0,
        toolType: Bidirectional$$1.toolType
      }; // TODO: To be implemented!
      // Needs to add longAxis, shortAxis, longAxisLength, shortAxisLength

      return state;
    } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.

  }, {
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      return measurementContent.map(Bidirectional$$1.measurementContentToLengthState);
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(tool) {
      var _tool$handles = tool.handles,
          start = _tool$handles.start,
          end = _tool$handles.end,
          perpendicularStart = _tool$handles.perpendicularStart,
          perpendicularEnd = _tool$handles.perpendicularEnd;
      var shortestDiameter = tool.shortestDiameter,
          longestDiameter = tool.longestDiameter;
      return {
        longAxis: {
          point1: start,
          point2: end
        },
        shortAxis: {
          point1: perpendicularStart,
          point2: perpendicularEnd
        },
        longAxisLength: longestDiameter,
        shortAxisLength: shortestDiameter
      };
    }
  }]);

  return Bidirectional$$1;
}();

Bidirectional$1.toolType = "Bidirectional";
Bidirectional$1.utilityToolType = "Bidirectional";
Bidirectional$1.TID300Representation = Bidirectional;
MeasurementReport.registerTool(Bidirectional$1);

function iota(n) {
  var result = new Array(n);
  for(var i=0; i<n; ++i) {
    result[i] = i;
  }
  return result
}

var iota_1 = iota;

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var isBuffer_1 = function (obj) {
  return obj != null && (isBuffer$1(obj) || isSlowBuffer$1(obj) || !!obj._isBuffer)
};

function isBuffer$1 (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer$1 (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer$1(obj.slice(0, 0))
}

var hasTypedArrays  = ((typeof Float64Array) !== "undefined");

function compare1st(a, b) {
  return a[0] - b[0]
}

function order() {
  var stride = this.stride;
  var terms = new Array(stride.length);
  var i;
  for(i=0; i<terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i];
  }
  terms.sort(compare1st);
  var result = new Array(terms.length);
  for(i=0; i<result.length; ++i) {
    result[i] = terms[i][1];
  }
  return result
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("");
  if(dimension < 0) {
    className = "View_Nil" + dtype;
  }
  var useGetters = (dtype === "generic");

  if(dimension === -1) {
    //Special case for trivial arrays
    var code =
      "function "+className+"(a){this.data=a;};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new "+className+"(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_"+className+"(a){return new "+className+"(a);}";
    var procedure = new Function(code);
    return procedure()
  } else if(dimension === 0) {
    //Special case for 0d arrays
    var code =
      "function "+className+"(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function "+className+"_copy() {\
return new "+className+"(this.data,this.offset)\
};\
proto.pick=function "+className+"_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function "+className+"_get(){\
return "+(useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]")+
"};\
proto.set=function "+className+"_set(v){\
return "+(useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v")+"\
};\
return function construct_"+className+"(a,b,c,d){return new "+className+"(a,d)}";
    var procedure = new Function("TrivialArray", code);
    return procedure(CACHED_CONSTRUCTORS[dtype][0])
  }

  var code = ["'use strict'"];

  //Create constructor for view
  var indices = iota_1(dimension);
  var args = indices.map(function(i) { return "i"+i });
  var index_str = "this.offset+" + indices.map(function(i) {
        return "this.stride[" + i + "]*i" + i
      }).join("+");
  var shapeArg = indices.map(function(i) {
      return "b"+i
    }).join(",");
  var strideArg = indices.map(function(i) {
      return "c"+i
    }).join(",");
  code.push(
    "function "+className+"(a," + shapeArg + "," + strideArg + ",d){this.data=a",
      "this.shape=[" + shapeArg + "]",
      "this.stride=[" + strideArg + "]",
      "this.offset=d|0}",
    "var proto="+className+".prototype",
    "proto.dtype='"+dtype+"'",
    "proto.dimension="+dimension);

  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function "+className+"_size(){\
return "+indices.map(function(i) { return "this.shape["+i+"]" }).join("*"),
"}})");

  //view.order:
  if(dimension === 1) {
    code.push("proto.order=[0]");
  } else {
    code.push("Object.defineProperty(proto,'order',{get:");
    if(dimension < 4) {
      code.push("function "+className+"_order(){");
      if(dimension === 2) {
        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})");
      } else if(dimension === 3) {
        code.push(
"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})");
      }
    } else {
      code.push("ORDER})");
    }
  }

  //view.set(i0, ..., v):
  code.push(
"proto.set=function "+className+"_set("+args.join(",")+",v){");
  if(useGetters) {
    code.push("return this.data.set("+index_str+",v)}");
  } else {
    code.push("return this.data["+index_str+"]=v}");
  }

  //view.get(i0, ...):
  code.push("proto.get=function "+className+"_get("+args.join(",")+"){");
  if(useGetters) {
    code.push("return this.data.get("+index_str+")}");
  } else {
    code.push("return this.data["+index_str+"]}");
  }

  //view.index:
  code.push(
    "proto.index=function "+className+"_index(", args.join(), "){return "+index_str+"}");

  //view.hi():
  code.push("proto.hi=function "+className+"_hi("+args.join(",")+"){return new "+className+"(this.data,"+
    indices.map(function(i) {
      return ["(typeof i",i,"!=='number'||i",i,"<0)?this.shape[", i, "]:i", i,"|0"].join("")
    }).join(",")+","+
    indices.map(function(i) {
      return "this.stride["+i + "]"
    }).join(",")+",this.offset)}");

  //view.lo():
  var a_vars = indices.map(function(i) { return "a"+i+"=this.shape["+i+"]" });
  var c_vars = indices.map(function(i) { return "c"+i+"=this.stride["+i+"]" });
  code.push("proto.lo=function "+className+"_lo("+args.join(",")+"){var b=this.offset,d=0,"+a_vars.join(",")+","+c_vars.join(","));
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'&&i"+i+">=0){\
d=i"+i+"|0;\
b+=c"+i+"*d;\
a"+i+"-=d}");
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "c"+i
    }).join(",")+",b)}");

  //view.step():
  code.push("proto.step=function "+className+"_step("+args.join(",")+"){var "+
    indices.map(function(i) {
      return "a"+i+"=this.shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "b"+i+"=this.stride["+i+"]"
    }).join(",")+",c=this.offset,d=0,ceil=Math.ceil");
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'){\
d=i"+i+"|0;\
if(d<0){\
c+=b"+i+"*(a"+i+"-1);\
a"+i+"=ceil(-a"+i+"/d)\
}else{\
a"+i+"=ceil(a"+i+"/d)\
}\
b"+i+"*=d\
}");
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a" + i
    }).join(",")+","+
    indices.map(function(i) {
      return "b" + i
    }).join(",")+",c)}");

  //view.transpose():
  var tShape = new Array(dimension);
  var tStride = new Array(dimension);
  for(var i=0; i<dimension; ++i) {
    tShape[i] = "a[i"+i+"]";
    tStride[i] = "b[i"+i+"]";
  }
  code.push("proto.transpose=function "+className+"_transpose("+args+"){"+
    args.map(function(n,idx) { return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"}).join(";"),
    "var a=this.shape,b=this.stride;return new "+className+"(this.data,"+tShape.join(",")+","+tStride.join(",")+",this.offset)}");

  //view.pick():
  code.push("proto.pick=function "+className+"_pick("+args+"){var a=[],b=[],c=this.offset");
  for(var i=0; i<dimension; ++i) {
    code.push("if(typeof i"+i+"==='number'&&i"+i+">=0){c=(c+this.stride["+i+"]*i"+i+")|0}else{a.push(this.shape["+i+"]);b.push(this.stride["+i+"])}");
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}");

  //Add return statement
  code.push("return function construct_"+className+"(data,shape,stride,offset){return new "+className+"(data,"+
    indices.map(function(i) {
      return "shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "stride["+i+"]"
    }).join(",")+",offset)}");

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"));
  return procedure(CACHED_CONSTRUCTORS[dtype], order)
}

function arrayDType(data) {
  if(isBuffer_1(data)) {
    return "buffer"
  }
  if(hasTypedArrays) {
    switch(Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64"
      case "[object Float32Array]":
        return "float32"
      case "[object Int8Array]":
        return "int8"
      case "[object Int16Array]":
        return "int16"
      case "[object Int32Array]":
        return "int32"
      case "[object Uint8Array]":
        return "uint8"
      case "[object Uint16Array]":
        return "uint16"
      case "[object Uint32Array]":
        return "uint32"
      case "[object Uint8ClampedArray]":
        return "uint8_clamped"
    }
  }
  if(Array.isArray(data)) {
    return "array"
  }
  return "generic"
}

var CACHED_CONSTRUCTORS = {
  "float32":[],
  "float64":[],
  "int8":[],
  "int16":[],
  "int32":[],
  "uint8":[],
  "uint16":[],
  "uint32":[],
  "array":[],
  "uint8_clamped":[],
  "buffer":[],
  "generic":[]
}

;
function wrappedNDArrayCtor(data, shape, stride, offset) {
  if(data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0];
    return ctor([])
  } else if(typeof data === "number") {
    data = [data];
  }
  if(shape === undefined) {
    shape = [ data.length ];
  }
  var d = shape.length;
  if(stride === undefined) {
    stride = new Array(d);
    for(var i=d-1, sz=1; i>=0; --i) {
      stride[i] = sz;
      sz *= shape[i];
    }
  }
  if(offset === undefined) {
    offset = 0;
    for(var i=0; i<d; ++i) {
      if(stride[i] < 0) {
        offset -= (shape[i]-1)*stride[i];
      }
    }
  }
  var dtype = arrayDType(data);
  var ctor_list = CACHED_CONSTRUCTORS[dtype];
  while(ctor_list.length <= d+1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length-1));
  }
  var ctor = ctor_list[d+1];
  return ctor(data, shape, stride, offset)
}

var ndarray = wrappedNDArrayCtor;

/**
 * crossProduct3D - Returns the cross product of a and b.
 *
 * @param  {Number[3]} a Vector a.
 * @param  {Number[3]} b Vector b.
 * @return {Number[3]}   The cross product.
 */
function crossProduct3D (a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

var flipImageOrientationPatient = {
  /**
   * h: Flips ImageOrientationPatient in the horizontal direction.
   * @param {Number[6]} iop - ImageOrientationPatient
   * @returns {Number[6]} The transformed ImageOrientationPatient
   */
  h: function h(iop) {
    return [iop[0], iop[1], iop[2], -iop[3], -iop[4], -iop[5]];
  },

  /**
   * v: Flips ImageOrientationPatient in the vertical direction.
   * @param {Number[6]} iop - ImageOrientationPatient
   * @returns {Number[6]} The transformed ImageOrientationPatient
   */
  v: function v(iop) {
    return [-iop[0], -iop[1], -iop[2], iop[3], iop[4], iop[5]];
  },

  /**
   * hv: Flips ImageOrientationPatient in the horizontal and vertical directions.
   * @param {Number[6]} iop - ImageOrientationPatient
   * @returns {Number[6]} The transformed ImageOrientationPatient
   */
  hv: function hv(iop) {
    return [-iop[0], -iop[1], -iop[2], -iop[3], -iop[4], -iop[5]];
  }
};

/**
 * rotateVectorAroundUnitVector - Rotates vector v around unit vector k using
 *                                Rodrigues' rotation formula.
 *
 * @param  {Number[3]} v     The vector to rotate.
 * @param  {Number[3]} k     The unit vector of the axis of rotation.
 * @param  {Number} theta    The rotation magnitude in radians.
 * @return {Number[3]}       The rotated v vector.
 */

function rotateVectorAroundUnitVector (v, k, theta) {
  var cosTheta = Math.cos(theta);
  var sinTheta = Math.sin(theta);
  var oneMinusCosTheta = 1.0 - cosTheta;
  var kdotv = k[0] * v[0] + k[1] * v[1] + k[2] * v[2];
  var vRot = [];
  var kxv = crossProduct3D(k, v);

  for (var i = 0; i <= 2; i++) {
    vRot[i] = v[i] * cosTheta + kxv[i] * sinTheta + k[i] * kdotv * oneMinusCosTheta;
  }

  return vRot;
}

/**
 * rotateDirectionCosinesInPlane - rotates the row and column cosines around
 * their normal by angle theta.
 *
 * @param  {Number[6]} iop   The row (0..2) an column (3..5) direction cosines.
 * @param  {Number} theta The rotation magnitude in radians.
 * @return {Number[6]}       The rotate row (0..2) and column (3..5) direction cosines.
 */

function rotateDirectionCosinesInPlane (iop, theta) {
  var r = [iop[0], iop[1], iop[2]];
  var c = [iop[3], iop[4], iop[5]];
  var rxc = crossProduct3D(r, c);
  var rRot = rotateVectorAroundUnitVector(r, rxc, theta);
  var cRot = crossProduct3D(rxc, rRot);

  for (var i = 0; i < 2; i++) {
    cRot[i] *= -1.0;
  }

  return [].concat(_toConsumableArray(rRot), _toConsumableArray(cRot));
}

var flipMatrix2D = {
  h: h,
  v: v
};
/**
 * flipMatrix2D.h - Flips a 2D matrix in the horizontal direction.
 *
 * @param  {Ndarry} matrix The matrix to flip.
 * @return {Ndarry}   The flipped matrix.
 */

function h(matrix) {
  var _matrix$shape = _slicedToArray(matrix.shape, 2),
      rows = _matrix$shape[0],
      cols = _matrix$shape[1];

  var result = ndarray(new Uint8Array(rows * cols), [rows, cols]);

  for (var i = 0; i < rows; i++) {
    for (var j = 0; j < cols; j++) {
      result.set(i, j, matrix.get(i, cols - 1 - j));
    }
  }

  return result;
}
/**
 * flipMatrix2D.h - Flips a 2D matrix in the vertical direction.
 *
 * @param  {Ndarry} matrix The matrix to flip.
 * @return {Ndarry}   The flipped matrix.
 */


function v(matrix) {
  var _matrix$shape2 = _slicedToArray(matrix.shape, 2),
      rows = _matrix$shape2[0],
      cols = _matrix$shape2[1];

  var result = ndarray(new Uint8Array(rows * cols), [rows, cols]);

  for (var j = 0; j < cols; j++) {
    for (var i = 0; i < rows; i++) {
      result.set(i, j, matrix.get(rows - 1 - i, j));
    }
  }

  return result;
}

/**
 * anonymous function - Rotates a matrix by 90 degrees.
 *
 * @param  {Ndarray} matrix The matrix to rotate.
 * @return {Ndarry}        The rotated matrix.
 */

function rotateMatrix902D (matrix) {
  var _matrix$shape = _slicedToArray(matrix.shape, 2),
      rows = _matrix$shape[0],
      cols = _matrix$shape[1]; //debugPrintMatrix(matrix);


  var result = ndarray(new Uint8Array(rows * cols), [cols, rows]);
  var resultColsMinus1 = result.shape[1] - 1;

  for (var i = 0; i < rows; i++) {
    for (var j = 0; j < cols; j++) {
      result.set(j, resultColsMinus1 - i, matrix.get(i, j));
    }
  } //debugPrintMatrix(result);


  return result;
}

var Segmentation$1 = {
  generateSegmentation: generateSegmentation,
  generateToolState: generateToolState
};
/**
 *
 * @typedef {Object} BrushData
 * @property {Object} toolState - The cornerstoneTools global toolState.
 * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the
 *                                 seriesInstanceUid.
 */

/**
 * generateSegmentation - Generates cornerstoneTools brush data, given a stack of
 * imageIds, images and the cornerstoneTools brushData.
 *
 * @param  {object[]} images    An array of the cornerstone image objects.
 * @param  {BrushData} brushData and object containing the brushData.
 * @returns {type}           description
 */

function generateSegmentation(images, brushData) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    includeSliceSpacing: true
  };
  var toolState = brushData.toolState,
      segments = brushData.segments; // Calculate the dimensions of the data cube.

  var image0 = images[0];
  var dims = {
    x: image0.columns,
    y: image0.rows,
    z: images.length
  };
  dims.xy = dims.x * dims.y;

  var numSegments = _getSegCount(seg, segments);

  if (!numSegments) {
    throw new Error("No segments to export!");
  }

  var isMultiframe = image0.imageId.includes("?frame");

  var seg = _createSegFromImages(images, isMultiframe, options);

  var _getNumberOfFramesPer = _getNumberOfFramesPerSegment(toolState, images, segments),
      referencedFramesPerSegment = _getNumberOfFramesPer.referencedFramesPerSegment,
      segmentIndicies = _getNumberOfFramesPer.segmentIndicies;

  var NumberOfFrames = 0;

  for (var i = 0; i < referencedFramesPerSegment.length; i++) {
    NumberOfFrames += referencedFramesPerSegment[i].length;
  }

  seg.setNumberOfFrames(NumberOfFrames);

  for (var _i = 0; _i < segmentIndicies.length; _i++) {
    var segmentIndex = segmentIndicies[_i];
    var referencedFrameIndicies = referencedFramesPerSegment[_i]; // Frame numbers start from 1.

    var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {
      return element + 1;
    });
    var segment = segments[segmentIndex];
    seg.addSegment(segment, _extractCornerstoneToolsPixelData(segmentIndex, referencedFrameIndicies, toolState, images, dims), referencedFrameNumbers);
  }

  seg.bitPackPixelData();
  var segBlob = datasetToBlob(seg.dataset);
  return segBlob;
}

function _extractCornerstoneToolsPixelData(segmentIndex, referencedFrames, toolState, images, dims) {
  var pixelData = new Uint8Array(dims.xy * referencedFrames.length);
  var pixelDataIndex = 0;

  for (var i = 0; i < referencedFrames.length; i++) {
    var frame = referencedFrames[i];
    var imageId = images[frame].imageId;
    var imageIdSpecificToolState = toolState[imageId];
    var brushPixelData = imageIdSpecificToolState.brush.data[segmentIndex].pixelData;

    for (var p = 0; p < brushPixelData.length; p++) {
      pixelData[pixelDataIndex] = brushPixelData[p];
      pixelDataIndex++;
    }
  }

  return pixelData;
}

function _getNumberOfFramesPerSegment(toolState, images, segments) {
  var segmentIndicies = [];
  var referencedFramesPerSegment = [];

  for (var i = 0; i < segments.length; i++) {
    if (segments[i]) {
      segmentIndicies.push(i);
      referencedFramesPerSegment.push([]);
    }
  }

  for (var z = 0; z < images.length; z++) {
    var imageId = images[z].imageId;
    var imageIdSpecificToolState = toolState[imageId];

    for (var _i2 = 0; _i2 < segmentIndicies.length; _i2++) {
      var segIdx = segmentIndicies[_i2];

      if (imageIdSpecificToolState && imageIdSpecificToolState.brush && imageIdSpecificToolState.brush.data && imageIdSpecificToolState.brush.data[segIdx] && imageIdSpecificToolState.brush.data[segIdx].pixelData) {
        referencedFramesPerSegment[_i2].push(z);
      }
    }
  }

  return {
    referencedFramesPerSegment: referencedFramesPerSegment,
    segmentIndicies: segmentIndicies
  };
}

function _getSegCount(seg, segments) {
  var numSegments = 0;

  for (var i = 0; i < segments.length; i++) {
    if (segments[i]) {
      numSegments++;
    }
  }

  return numSegments;
}
/**
 * _createSegFromImages - description
 *
 * @param  {Object[]} images    An array of the cornerstone image objects.
 * @param  {Boolean} isMultiframe Whether the images are multiframe.
 * @returns {Object}              The Seg derived dataSet.
 */


function _createSegFromImages(images, isMultiframe, options) {
  var datasets = [];

  if (isMultiframe) {
    var image = images[0];
    var arrayBuffer = image.data.byteArray.buffer;
    var dicomData = DicomMessage.readFile(arrayBuffer);
    var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
    datasets.push(dataset);
  } else {
    for (var i = 0; i < images.length; i++) {
      var _image = images[i];
      var _arrayBuffer = _image.data.byteArray.buffer;

      var _dicomData = DicomMessage.readFile(_arrayBuffer);

      var _dataset = DicomMetaDictionary.naturalizeDataset(_dicomData.dict);

      _dataset._meta = DicomMetaDictionary.namifyDataset(_dicomData.meta);
      datasets.push(_dataset);
    }
  }

  var multiframe = Normalizer.normalizeToDataset(datasets);
  return new Segmentation([multiframe], options);
}
/**
 * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,
 * derive cornerstoneTools toolState and brush metadata.
 *
 * @param  {string[]} imageIds    An array of the imageIds.
 * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.
 * @param {*} metadataProvider
 * @returns {Object}  The toolState and an object from which the
 *                    segment metadata can be derived.
 */


function generateToolState(imageIds, arrayBuffer, metadataProvider) {
  var dicomData = DicomMessage.readFile(arrayBuffer);
  var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
  var multiframe = Normalizer.normalizeToDataset([dataset]);
  var imagePlaneModule = metadataProvider.get("imagePlaneModule", imageIds[0]);

  if (!imagePlaneModule) {
    console.warn("Insufficient metadata, imagePlaneModule missing.");
  }

  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z]; // Get IOP from ref series, compute supported orientations:

  var validOrientations = getValidOrientations(ImageOrientationPatient);
  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;
  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;
  var sliceLength = multiframe.Columns * multiframe.Rows;
  var segMetadata = getSegmentMetadata(multiframe);
  var pixelData = unpackPixelData(multiframe);
  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;
  var toolState = {};
  var inPlane = true;

  for (var i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {
    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];
    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [multiframe.Rows, multiframe.Columns]);
    var alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations);

    if (!alignedPixelDataI) {
      console.warn("This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. ");
      inPlane = false;
      break;
    }

    var segmentIndex = PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber - 1;
    var SourceImageSequence = void 0;

    if (SharedFunctionalGroupsSequence.DerivationImageSequence && SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence) {
      SourceImageSequence = SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence[i];
    } else {
      SourceImageSequence = PerFrameFunctionalGroups.DerivationImageSequence.SourceImageSequence;
    }

    var imageId = getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider);
    addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, alignedPixelDataI);
  }

  if (!inPlane) {
    return;
  }

  return {
    toolState: toolState,
    segMetadata: segMetadata
  };
}
/**
 * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.
 *
 * @param  {Object} multiframe The multiframe dataset.
 * @return {Uint8Array}      The unpacked pixelData.
 */


function unpackPixelData(multiframe) {
  var segType = multiframe.SegmentationType;

  if (segType === "BINARY") {
    return BitArray.unpack(multiframe.PixelData);
  }

  var pixelData = new Uint8Array(multiframe.PixelData);
  var max = multiframe.MaximumFractionalValue;
  var onlyMaxAndZero = pixelData.find(function (element) {
    return element !== 0 && element !== max;
  }) === undefined;

  if (!onlyMaxAndZero) {
    lib.warn("This is a fractional segmentation, which is not currently supported.");
    return;
  }

  lib.warn("This segmentation object is actually binary... processing as such.");
  return pixelData;
}
/**
 * addImageIdSpecificBrushToolState - Adds brush pixel data to cornerstoneTools
 * formatted toolState object.
 *
 * @param  {Object} toolState    The toolState object to modify
 * @param  {String} imageId      The imageId of the toolState to add the data.
 * @param  {Number} segmentIndex The index of the segment data being added.
 * @param  {Ndarray} pixelData2D  The pixelData in Ndarry 2D format.
 */


function addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, pixelData2D) {
  if (!toolState[imageId]) {
    toolState[imageId] = {};
    toolState[imageId].brush = {};
    toolState[imageId].brush.data = [];
  } else if (!toolState[imageId].brush) {
    toolState[imageId].brush = {};
    toolState[imageId].brush.data = [];
  } else if (!toolState[imageId].brush.data) {
    toolState[imageId].brush.data = [];
  }

  toolState[imageId].brush.data[segmentIndex] = {};
  var brushDataI = toolState[imageId].brush.data[segmentIndex];
  brushDataI.pixelData = new Uint8Array(pixelData2D.data.length);
  var cToolsPixelData = brushDataI.pixelData;

  var _pixelData2D$shape = _slicedToArray(pixelData2D.shape, 2),
      rows = _pixelData2D$shape[0],
      cols = _pixelData2D$shape[1];

  for (var p = 0; p < cToolsPixelData.length; p++) {
    if (pixelData2D.data[p]) {
      cToolsPixelData[p] = 1;
    } else {
      cToolsPixelData[p] = 0;
    }
  }
}
/**
 * getImageIdOfSourceImage - Returns the Cornerstone imageId of the source image.
 *
 * @param  {Object} SourceImageSequence Sequence describing the source image.
 * @param  {String[]} imageIds          A list of imageIds.
 * @param  {Object} metadataProvider    A Cornerstone metadataProvider to query
 *                                      metadata from imageIds.
 * @return {String}                     The corresponding imageId.
 */


function getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider) {
  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,
      ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;
  return ReferencedFrameNumber ? getImageIdOfReferencedFrame(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance(ReferencedSOPInstanceUID, imageIds, metadataProvider);
}
/**
 * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId
 * corresponding to the specified sopInstanceUid for single-frame images.
 *
 * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.
 * @param  {String[]} imageIds         The list of imageIds.
 * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids
 *                                 from the cornerstone imageIds.
 * @return {String}                  The imageId that corresponds to the sopInstanceUid.
 */


function getImageIdOfReferencedSingleFramedSOPInstance(sopInstanceUid, imageIds, metadataProvider) {
  return imageIds.find(function (imageId) {
    var sopCommonModule = metadataProvider.get("sopCommonModule", imageId);

    if (!sopCommonModule) {
      return;
    }

    return sopCommonModule.sopInstanceUID === sopInstanceUid;
  });
}
/**
 * getImageIdOfReferencedFrame - Returns the imageId corresponding to the
 * specified sopInstanceUid and frameNumber for multi-frame images.
 *
 * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.
 * @param  {Number} frameNumber      The frame number.
 * @param  {String} imageIds         The list of imageIds.
 * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids
 *                                   from the cornerstone imageIds.
 * @return {String}                  The imageId that corresponds to the sopInstanceUid.
 */


function getImageIdOfReferencedFrame(sopInstanceUid, frameNumber, imageIds, metadataProvider) {
  var imageId = imageIds.find(function (imageId) {
    var sopCommonModule = metadataProvider.get("sopCommonModule", imageId);

    if (!sopCommonModule) {
      return;
    }

    var imageIdFrameNumber = Number(imageId.split("frame=")[1]);
    return (//frameNumber is zero indexed for cornerstoneWADOImageLoader image Ids.
      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1
    );
  });
  return imageId;
}
/**
 * getValidOrientations - returns an array of valid orientations.
 *
 * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.
 * @return {Number[8][6]} An array of valid orientations.
 */


function getValidOrientations(iop) {
  var orientations = []; // [0,  1,  2]: 0,   0hf,   0vf
  // [3,  4,  5]: 90,  90hf,  90vf
  // [6, 7]:      180, 270

  orientations[0] = iop;
  orientations[1] = flipImageOrientationPatient.h(iop);
  orientations[2] = flipImageOrientationPatient.v(iop);
  var iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);
  orientations[3] = iop90;
  orientations[4] = flipImageOrientationPatient.h(iop90);
  orientations[5] = flipImageOrientationPatient.v(iop90);
  orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);
  orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);
  return orientations;
}
/**
 * alignPixelDataWithSourceData -
 *
 * @param {Ndarray} pixelData2D The data to align.
 * @param  {Number[6]} iop The orientation of the image slice.
 * @param  {Number[8][6]} orientations   An array of valid imageOrientationPatient values.
 * @return {Ndarray}                         The aligned pixelData.
 */


function alignPixelDataWithSourceData(pixelData2D, iop, orientations) {
  if (compareIOP(iop, orientations[0])) {
    //Same orientation.
    return pixelData2D;
  } else if (compareIOP(iop, orientations[1])) {
    //Flipped vertically.
    return flipMatrix2D.v(pixelData2D);
  } else if (compareIOP(iop, orientations[2])) {
    //Flipped horizontally.
    return flipMatrix2D.h(pixelData2D);
  } else if (compareIOP(iop, orientations[3])) {
    //Rotated 90 degrees.
    return rotateMatrix902D(pixelData2D);
  } else if (compareIOP(iop, orientations[4])) {
    //Rotated 90 degrees and fliped horizontally.
    return flipMatrix2D.h(rotateMatrix902D(pixelData2D));
  } else if (compareIOP(iop, orientations[5])) {
    //Rotated 90 degrees and fliped vertically.
    return flipMatrix2D.v(rotateMatrix902D(pixelData2D));
  } else if (compareIOP(iop, orientations[6])) {
    //Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.
    return rotateMatrix902D(rotateMatrix902D(pixelData2D));
  } else if (compareIOP(iop, orientations[7])) {
    //Rotated 270 degrees.  // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.
    return rotateMatrix902D(rotateMatrix902D(rotateMatrix902D(pixelData2D)));
  }
}

var dx = 1e-5;
/**
 * compareIOP - Returns true if iop1 and iop2 are equal
 * within a tollerance, dx.
 *
 * @param  {Number[6]} iop1 An ImageOrientationPatient array.
 * @param  {Number[6]} iop2 An ImageOrientationPatient array.
 * @return {Boolean}      True if iop1 and iop2 are equal.
 */

function compareIOP(iop1, iop2) {
  return Math.abs(iop1[0] - iop2[0]) < dx && Math.abs(iop1[1] - iop2[1]) < dx && Math.abs(iop1[2] - iop2[2]) < dx && Math.abs(iop1[3] - iop2[3]) < dx && Math.abs(iop1[4] - iop2[4]) < dx && Math.abs(iop1[5] - iop2[5]) < dx;
}

function getSegmentMetadata(multiframe) {
  var data = [];
  var segmentSequence = multiframe.SegmentSequence;

  if (Array.isArray(segmentSequence)) {
    for (var segIdx = 0; segIdx < segmentSequence.length; segIdx++) {
      data.push(segmentSequence[segIdx]);
    }
  } else {
    // Only one segment, will be stored as an object.
    data.push(segmentSequence);
  }

  return {
    seriesInstanceUid: multiframe.ReferencedSeriesSequence.SeriesInstanceUID,
    data: data
  };
}

/**
 * Encodes a non-bitpacked frame which has one sample per pixel.
 *
 * @param {*} buffer
 * @param {*} numberOfFrames
 * @param {*} rows
 * @param {*} cols
 */

function encode(buffer, numberOfFrames, rows, cols) {
  var frameLength = rows * cols;
  var header = createHeader();
  var encodedFrames = [];

  for (var frame = 0; frame < numberOfFrames; frame++) {
    var frameOffset = frameLength * frame;
    encodedFrames.push(encodeFrame(buffer, frameOffset, rows, cols, header));
  }

  return encodedFrames;
}

function encodeFrame(buffer, frameOffset, rows, cols, header) {
  // Add header to frame:
  var rleArray = [];

  for (var r = 0; r < rows; r++) {
    var rowOffset = r * cols;
    var uint8Row = new Uint8Array(buffer, frameOffset + rowOffset, cols);
    var i = 0;

    while (i < uint8Row.length) {
      var literalRunLength = getLiteralRunLength(uint8Row, i);

      if (literalRunLength) {
        // State how many in litteral run
        rleArray.push(literalRunLength - 1); // Append litteral run.

        var literalRun = uint8Row.slice(i, i + literalRunLength);
        rleArray = [].concat(_toConsumableArray(rleArray), _toConsumableArray(literalRun));
        i += literalRunLength;
      }

      if (i >= uint8Row.length) {
        break;
      } // Next must be a replicate run.


      var replicateRunLength = getReplicateRunLength(uint8Row, i);

      if (replicateRunLength) {
        // State how many in replicate run
        rleArray.push(257 - replicateRunLength);
        rleArray.push(uint8Row[i]);
        i += replicateRunLength;
      }
    }
  }

  var headerLength = 64;
  var bodyLength = rleArray.length % 2 === 0 ? rleArray.length : rleArray.length + 1;
  var encodedFrameBuffer = new ArrayBuffer(headerLength + bodyLength); // Copy header into encodedFrameBuffer.

  var headerView = new Uint32Array(encodedFrameBuffer, 0, 16);

  for (var _i = 0; _i < headerView.length; _i++) {
    headerView[_i] = header[_i];
  }

  for (var _i2 = 0; _i2 < headerView.length; _i2++) {
    rleArray.push(headerView[_i2]);
  } // Copy rle data into encodedFrameBuffer.


  var bodyView = new Uint8Array(encodedFrameBuffer, 64);

  for (var _i3 = 0; _i3 < rleArray.length; _i3++) {
    bodyView[_i3] = rleArray[_i3];
  }

  return encodedFrameBuffer;
}

function createHeader() {
  var headerUint32 = new Uint32Array(16);
  headerUint32[0] = 1; // 1 Segment.

  headerUint32[1] = 64; // Data offset is 64 bytes.
  // Return byte-array version of header:

  return headerUint32;
}

function getLiteralRunLength(uint8Row, i) {
  for (var l = 0; l < uint8Row.length - i; l++) {
    if (uint8Row[i + l] === uint8Row[i + l + 1] && uint8Row[i + l + 1] === uint8Row[i + l + 2]) {
      return l;
    }

    if (l === 128) {
      return l;
    }
  }

  return uint8Row.length - i;
}

function getReplicateRunLength(uint8Row, i) {
  var first = uint8Row[i];

  for (var l = 1; l < uint8Row.length - i; l++) {
    if (uint8Row[i + l] !== first) {
      return l;
    }

    if (l === 128) {
      return l;
    }
  }

  return uint8Row.length - i;
}

function decode(rleEncodedFrames, rows, cols) {
  var pixelData = new Uint8Array(rows * cols * rleEncodedFrames.length);
  var buffer = pixelData.buffer;
  var frameLength = rows * cols;

  for (var i = 0; i < rleEncodedFrames.length; i++) {
    var rleEncodedFrame = rleEncodedFrames[i];
    var uint8FrameView = new Uint8Array(buffer, i * frameLength, frameLength);
    decodeFrame(rleEncodedFrame, uint8FrameView);
  }

  return pixelData;
}

function decodeFrame(rleEncodedFrame, pixelData) {
  // Check HEADER:
  var header = new Uint32Array(rleEncodedFrame, 0, 16);

  if (header[0] !== 1) {
    lib.error("rleSingleSamplePerPixel only supports fragments with single Byte Segments (for rle encoded segmentation data) at the current time. This rleEncodedFrame has ".concat(header[0], " Byte Segments."));
    return;
  }

  if (header[1] !== 64) {
    lib.error("Data offset of Byte Segment 1 should be 64 bytes, this rle fragment is encoded incorrectly.");
    return;
  }

  var uInt8Frame = new Uint8Array(rleEncodedFrame, 64);
  var pixelDataIndex = 0;
  var i = 0;

  while (pixelDataIndex < pixelData.length) {
    var byteValue = uInt8Frame[i];

    if (byteValue === undefined) {
      break;
    }

    if (byteValue <= 127) {
      // TODO -> Interpret the next N+1 bytes literally.
      var N = byteValue + 1;
      var next = i + 1; // Read the next N bytes literally.

      for (var p = next; p < next + N; p++) {
        pixelData[pixelDataIndex] = uInt8Frame[p];
        pixelDataIndex++;
      }

      i += N + 1;
    }

    if (byteValue >= 129) {
      var _N = 257 - byteValue;

      var _next = i + 1; // Repeat the next byte N times.


      for (var _p = 0; _p < _N; _p++) {
        pixelData[pixelDataIndex] = uInt8Frame[_next];
        pixelDataIndex++;
      }

      i += 2;
    }

    if (i === uInt8Frame.length) {
      break;
    }
  }
}

var Segmentation$2 = {
  generateSegmentation: generateSegmentation$1,
  generateToolState: generateToolState$1,
  fillSegmentation: fillSegmentation
};
/**
 *
 * @typedef {Object} BrushData
 * @property {Object} toolState - The cornerstoneTools global toolState.
 * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the
 *                                 seriesInstanceUid.
 */

var generateSegmentationDefaultOptions = {
  includeSliceSpacing: true,
  rleEncode: true
};
/**
 * generateSegmentation - Generates cornerstoneTools brush data, given a stack of
 * imageIds, images and the cornerstoneTools brushData.
 *
 * @param  {object[]} images An array of cornerstone images that contain the source
 *                           data under `image.data.byteArray.buffer`.
 * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.
 * @param  {Object} userOptions Options to pass to the segmentation derivation and `fillSegmentation`.
 * @returns {Blob}
 */

function generateSegmentation$1(images, inputLabelmaps3D) {
  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var isMultiframe = images[0].imageId.includes("?frame");

  var segmentation = _createSegFromImages$1(images, isMultiframe, userOptions);

  return fillSegmentation(segmentation, inputLabelmaps3D, userOptions);
}
/**
 * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.
 *
 * @param  {object[]} segmentation An empty segmentation derived dataset.
 * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.
 * @param  {Object} userOptions Options object to override default options.
 * @returns {Blob}           description
 */


function fillSegmentation(segmentation, inputLabelmaps3D) {
  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var options = Object.assign({}, generateSegmentationDefaultOptions, userOptions); // Use another variable so we don't redefine labelmaps3D.

  var labelmaps3D = Array.isArray(inputLabelmaps3D) ? inputLabelmaps3D : [inputLabelmaps3D];
  var numberOfFrames = 0;
  var referencedFramesPerLabelmap = [];

  var _loop = function _loop(labelmapIndex) {
    var labelmap3D = labelmaps3D[labelmapIndex];
    var labelmaps2D = labelmap3D.labelmaps2D,
        metadata = labelmap3D.metadata;
    var referencedFramesPerSegment = [];

    for (var i = 1; i < metadata.length; i++) {
      if (metadata[i]) {
        referencedFramesPerSegment[i] = [];
      }
    }

    var _loop2 = function _loop2(_i) {
      var labelmap2D = labelmaps2D[_i];

      if (labelmaps2D[_i]) {
        var segmentsOnLabelmap = labelmap2D.segmentsOnLabelmap;
        segmentsOnLabelmap.forEach(function (segmentIndex) {
          if (segmentIndex !== 0) {
            referencedFramesPerSegment[segmentIndex].push(_i);
            numberOfFrames++;
          }
        });
      }
    };

    for (var _i = 0; _i < labelmaps2D.length; _i++) {
      _loop2(_i);
    }

    referencedFramesPerLabelmap[labelmapIndex] = referencedFramesPerSegment;
  };

  for (var labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {
    _loop(labelmapIndex);
  }

  segmentation.setNumberOfFrames(numberOfFrames);

  for (var labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {
    var referencedFramesPerSegment = referencedFramesPerLabelmap[labelmapIndex];
    var labelmap3D = labelmaps3D[labelmapIndex];
    var metadata = labelmap3D.metadata;

    for (var segmentIndex = 1; segmentIndex < referencedFramesPerSegment.length; segmentIndex++) {
      var referencedFrameIndicies = referencedFramesPerSegment[segmentIndex];

      if (referencedFrameIndicies) {
        // Frame numbers start from 1.
        var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {
          return element + 1;
        });
        var segmentMetadata = metadata[segmentIndex];

        var labelmaps = _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies);

        segmentation.addSegmentFromLabelmap(segmentMetadata, labelmaps, segmentIndex, referencedFrameNumbers);
      }
    }
  }

  if (options.rleEncode) {
    var rleEncodedFrames = encode(segmentation.dataset.PixelData, numberOfFrames, segmentation.dataset.Rows, segmentation.dataset.Columns); // Must use fractional now to RLE encode, as the DICOM standard only allows BitStored && BitsAllocated
    // to be 1 for BINARY. This is not ideal and there should be a better format for compression in this manner
    // added to the standard.

    segmentation.assignToDataset({
      BitsAllocated: "8",
      BitsStored: "8",
      HighBit: "7",
      SegmentationType: "FRACTIONAL",
      SegmentationFractionalType: "PROBABILITY",
      MaximumFractionalValue: "255"
    });
    segmentation.dataset._meta.TransferSyntaxUID = {
      Value: ["1.2.840.10008.1.2.5"],
      vr: "UI"
    };
    segmentation.dataset._vrMap.PixelData = "OB";
    segmentation.dataset.PixelData = rleEncodedFrames;
  } else {
    // If no rleEncoding, at least bitpack the data.
    segmentation.bitPackPixelData();
  }

  var segBlob = datasetToBlob(segmentation.dataset);
  return segBlob;
}

function _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies) {
  var labelmaps2D = labelmap3D.labelmaps2D;
  var labelmaps = [];

  for (var i = 0; i < referencedFrameIndicies.length; i++) {
    var frame = referencedFrameIndicies[i];
    labelmaps.push(labelmaps2D[frame].pixelData);
  }

  return labelmaps;
}
/**
 * _createSegFromImages - description
 *
 * @param  {Object[]} images    An array of the cornerstone image objects.
 * @param  {Boolean} isMultiframe Whether the images are multiframe.
 * @returns {Object}              The Seg derived dataSet.
 */


function _createSegFromImages$1(images, isMultiframe, options) {
  var datasets = [];

  if (isMultiframe) {
    var image = images[0];
    var arrayBuffer = image.data.byteArray.buffer;
    var dicomData = DicomMessage.readFile(arrayBuffer);
    var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
    datasets.push(dataset);
  } else {
    for (var i = 0; i < images.length; i++) {
      var _image = images[i];
      var _arrayBuffer = _image.data.byteArray.buffer;

      var _dicomData = DicomMessage.readFile(_arrayBuffer);

      var _dataset = DicomMetaDictionary.naturalizeDataset(_dicomData.dict);

      _dataset._meta = DicomMetaDictionary.namifyDataset(_dicomData.meta);
      datasets.push(_dataset);
    }
  }

  var multiframe = Normalizer.normalizeToDataset(datasets);
  return new Segmentation([multiframe], options);
}
/**
 * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,
 * derive cornerstoneTools toolState and brush metadata.
 *
 * @param  {string[]} imageIds    An array of the imageIds.
 * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.
 * @param {*} metadataProvider
 * @returns {Object}  The toolState and an object from which the
 *                    segment metadata can be derived.
 */


function generateToolState$1(imageIds, arrayBuffer, metadataProvider) {
  var dicomData = DicomMessage.readFile(arrayBuffer);
  var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
  var multiframe = Normalizer.normalizeToDataset([dataset]);
  var imagePlaneModule = metadataProvider.get("imagePlaneModule", imageIds[0]);
  console.warn("Note the cornerstoneTools 4.0 currently assumes the labelmaps are non-overlapping. Overlapping segments will allocate incorrectly. Feel free to submit a PR to improve this behaviour!");

  if (!imagePlaneModule) {
    console.warn("Insufficient metadata, imagePlaneModule missing.");
  }

  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z]; // Get IOP from ref series, compute supported orientations:

  var validOrientations = getValidOrientations$1(ImageOrientationPatient);
  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;
  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;
  var sliceLength = multiframe.Columns * multiframe.Rows;
  var segMetadata = getSegmentMetadata$1(multiframe);
  var TransferSyntaxUID = multiframe._meta.TransferSyntaxUID.Value[0];
  var pixelData;

  if (TransferSyntaxUID === "1.2.840.10008.1.2.5") {
    var rleEncodedFrames = Array.isArray(multiframe.PixelData) ? multiframe.PixelData : [multiframe.PixelData];
    pixelData = decode(rleEncodedFrames, multiframe.Rows, multiframe.Columns);

    if (multiframe.BitsStored === 1) {
      console.warn("No implementation for rle + bitbacking.");
      return;
    }
  } else {
    pixelData = unpackPixelData$1(multiframe);
  }

  var arrayBufferLength = sliceLength * imageIds.length * 2; // 2 bytes per label voxel in cst4.

  var labelmapBuffer = new ArrayBuffer(arrayBufferLength);
  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;
  var segmentsOnFrame = [];
  var inPlane = true;

  var _loop4 = function _loop4(i) {
    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];
    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [multiframe.Rows, multiframe.Columns]);
    var alignedPixelDataI = alignPixelDataWithSourceData$1(pixelDataI2D, ImageOrientationPatientI, validOrientations);

    if (!alignedPixelDataI) {
      console.warn("This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. ");
      inPlane = false;
      return "break";
    }

    var segmentIndex = PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber;
    var SourceImageSequence = void 0;

    if (SharedFunctionalGroupsSequence.DerivationImageSequence && SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence) {
      SourceImageSequence = SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence[i];
    } else {
      SourceImageSequence = PerFrameFunctionalGroups.DerivationImageSequence.SourceImageSequence;
    }

    var imageId = getImageIdOfSourceImage$1(SourceImageSequence, imageIds, metadataProvider);

    if (!imageId) {
      // Image not present in stack, can't import this frame.
      return "continue";
    }

    var imageIdIndex = imageIds.findIndex(function (element) {
      return element === imageId;
    });
    var byteOffset = sliceLength * 2 * imageIdIndex; // 2 bytes/pixel

    var labelmap2DView = new Uint16Array(labelmapBuffer, byteOffset, sliceLength);
    var data = alignedPixelDataI.data;

    for (var j = 0; j < alignedPixelDataI.data.length; j++) {
      if (data[j]) {
        labelmap2DView[j] = segmentIndex;
      }
    }

    if (!segmentsOnFrame[imageIdIndex]) {
      segmentsOnFrame[imageIdIndex] = [];
    }

    segmentsOnFrame[imageIdIndex].push(segmentIndex);
  };

  _loop3: for (var i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {
    var _ret = _loop4(i);

    switch (_ret) {
      case "break":
        break _loop3;

      case "continue":
        continue;
    }
  }

  if (!inPlane) {
    return;
  }

  return {
    labelmapBuffer: labelmapBuffer,
    segMetadata: segMetadata,
    segmentsOnFrame: segmentsOnFrame
  };
}
/**
 * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.
 *
 * @param  {Object} multiframe The multiframe dataset.
 * @return {Uint8Array}      The unpacked pixelData.
 */


function unpackPixelData$1(multiframe) {
  var segType = multiframe.SegmentationType;

  if (segType === "BINARY") {
    return BitArray.unpack(multiframe.PixelData);
  }

  var pixelData = new Uint8Array(multiframe.PixelData);
  var max = multiframe.MaximumFractionalValue;
  var onlyMaxAndZero = pixelData.find(function (element) {
    return element !== 0 && element !== max;
  }) === undefined;

  if (!onlyMaxAndZero) {
    lib.warn("This is a fractional segmentation, which is not currently supported.");
    return;
  }

  lib.warn("This segmentation object is actually binary... processing as such.");
  return pixelData;
}
/**
 * getImageIdOfSourceImage - Returns the Cornerstone imageId of the source image.
 *
 * @param  {Object} SourceImageSequence Sequence describing the source image.
 * @param  {String[]} imageIds          A list of imageIds.
 * @param  {Object} metadataProvider    A Cornerstone metadataProvider to query
 *                                      metadata from imageIds.
 * @return {String}                     The corresponding imageId.
 */


function getImageIdOfSourceImage$1(SourceImageSequence, imageIds, metadataProvider) {
  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,
      ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;
  return ReferencedFrameNumber ? getImageIdOfReferencedFrame$1(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance$1(ReferencedSOPInstanceUID, imageIds, metadataProvider);
}
/**
 * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId
 * corresponding to the specified sopInstanceUid for single-frame images.
 *
 * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.
 * @param  {String[]} imageIds         The list of imageIds.
 * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids
 *                                 from the cornerstone imageIds.
 * @return {String}                  The imageId that corresponds to the sopInstanceUid.
 */


function getImageIdOfReferencedSingleFramedSOPInstance$1(sopInstanceUid, imageIds, metadataProvider) {
  return imageIds.find(function (imageId) {
    var sopCommonModule = metadataProvider.get("sopCommonModule", imageId);

    if (!sopCommonModule) {
      return;
    }

    return sopCommonModule.sopInstanceUID === sopInstanceUid;
  });
}
/**
 * getImageIdOfReferencedFrame - Returns the imageId corresponding to the
 * specified sopInstanceUid and frameNumber for multi-frame images.
 *
 * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.
 * @param  {Number} frameNumber      The frame number.
 * @param  {String} imageIds         The list of imageIds.
 * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids
 *                                   from the cornerstone imageIds.
 * @return {String}                  The imageId that corresponds to the sopInstanceUid.
 */


function getImageIdOfReferencedFrame$1(sopInstanceUid, frameNumber, imageIds, metadataProvider) {
  var imageId = imageIds.find(function (imageId) {
    var sopCommonModule = metadataProvider.get("sopCommonModule", imageId);

    if (!sopCommonModule) {
      return;
    }

    var imageIdFrameNumber = Number(imageId.split("frame=")[1]);
    return (//frameNumber is zero indexed for cornerstoneWADOImageLoader image Ids.
      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1
    );
  });
  return imageId;
}
/**
 * getValidOrientations - returns an array of valid orientations.
 *
 * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.
 * @return {Number[8][6]} An array of valid orientations.
 */


function getValidOrientations$1(iop) {
  var orientations = []; // [0,  1,  2]: 0,   0hf,   0vf
  // [3,  4,  5]: 90,  90hf,  90vf
  // [6, 7]:      180, 270

  orientations[0] = iop;
  orientations[1] = flipImageOrientationPatient.h(iop);
  orientations[2] = flipImageOrientationPatient.v(iop);
  var iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);
  orientations[3] = iop90;
  orientations[4] = flipImageOrientationPatient.h(iop90);
  orientations[5] = flipImageOrientationPatient.v(iop90);
  orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);
  orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);
  return orientations;
}
/**
 * alignPixelDataWithSourceData -
 *
 * @param {Ndarray} pixelData2D The data to align.
 * @param  {Number[6]} iop The orientation of the image slice.
 * @param  {Number[8][6]} orientations   An array of valid imageOrientationPatient values.
 * @return {Ndarray}                         The aligned pixelData.
 */


function alignPixelDataWithSourceData$1(pixelData2D, iop, orientations) {
  if (compareIOP$1(iop, orientations[0])) {
    //Same orientation.
    return pixelData2D;
  } else if (compareIOP$1(iop, orientations[1])) {
    //Flipped vertically.
    return flipMatrix2D.v(pixelData2D);
  } else if (compareIOP$1(iop, orientations[2])) {
    //Flipped horizontally.
    return flipMatrix2D.h(pixelData2D);
  } else if (compareIOP$1(iop, orientations[3])) {
    //Rotated 90 degrees.
    return rotateMatrix902D(pixelData2D);
  } else if (compareIOP$1(iop, orientations[4])) {
    //Rotated 90 degrees and fliped horizontally.
    return flipMatrix2D.h(rotateMatrix902D(pixelData2D));
  } else if (compareIOP$1(iop, orientations[5])) {
    //Rotated 90 degrees and fliped vertically.
    return flipMatrix2D.v(rotateMatrix902D(pixelData2D));
  } else if (compareIOP$1(iop, orientations[6])) {
    //Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.
    return rotateMatrix902D(rotateMatrix902D(pixelData2D));
  } else if (compareIOP$1(iop, orientations[7])) {
    //Rotated 270 degrees.  // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.
    return rotateMatrix902D(rotateMatrix902D(rotateMatrix902D(pixelData2D)));
  }
}

var dx$1 = 1e-5;
/**
 * compareIOP - Returns true if iop1 and iop2 are equal
 * within a tollerance, dx.
 *
 * @param  {Number[6]} iop1 An ImageOrientationPatient array.
 * @param  {Number[6]} iop2 An ImageOrientationPatient array.
 * @return {Boolean}      True if iop1 and iop2 are equal.
 */

function compareIOP$1(iop1, iop2) {
  return Math.abs(iop1[0] - iop2[0]) < dx$1 && Math.abs(iop1[1] - iop2[1]) < dx$1 && Math.abs(iop1[2] - iop2[2]) < dx$1 && Math.abs(iop1[3] - iop2[3]) < dx$1 && Math.abs(iop1[4] - iop2[4]) < dx$1 && Math.abs(iop1[5] - iop2[5]) < dx$1;
}

function getSegmentMetadata$1(multiframe) {
  var segmentSequence = multiframe.SegmentSequence;
  var data = [];

  if (Array.isArray(segmentSequence)) {
    data = [undefined].concat(_toConsumableArray(segmentSequence));
  } else {
    // Only one segment, will be stored as an object.
    data = [undefined, segmentSequence];
  }

  return {
    seriesInstanceUid: multiframe.ReferencedSeriesSequence.SeriesInstanceUID,
    data: data
  };
}

var Segmentation$3 = {
  generateSegmentation: generateSegmentation$2,
  generateToolState: generateToolState$2,
  fillSegmentation: fillSegmentation$1
};
/**
 * generateSegmentation - Generates a DICOM Segmentation object given cornerstoneTools data.
 *
 * @param  {object[]} images    An array of the cornerstone image objects.
 * @param  {Object|Object[]} labelmaps3DorBrushData For 4.X: The cornerstone `Labelmap3D` object, or an array of objects.
 *                                                  For 3.X: the BrushData.
 * @param  {number} cornerstoneToolsVersion The cornerstoneTools major version to map against.
 * @returns {Object}
 */

function generateSegmentation$2(images, labelmaps3DorBrushData) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    includeSliceSpacing: true
  };
  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;

  if (cornerstoneToolsVersion === 4) {
    return Segmentation$2.generateSegmentation(images, labelmaps3DorBrushData, options);
  }

  if (cornerstoneToolsVersion === 3) {
    return Segmentation$1.generateSegmentation(images, labelmaps3DorBrushData, options);
  }

  console.warn("No generateSegmentation adapater for cornerstone version ".concat(cornerstoneToolsVersion, ", exiting."));
}
/**
 * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,
 * derive cornerstoneTools toolState and brush metadata.
 *
 * @param  {string[]} imageIds    An array of the imageIds.
 * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.
 * @param {*} metadataProvider
 * @returns {Object}  The toolState and an object from which the
 *                    segment metadata can be derived.
 */


function generateToolState$2(imageIds, arrayBuffer, metadataProvider) {
  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;

  if (cornerstoneToolsVersion === 4) {
    return Segmentation$2.generateToolState(imageIds, arrayBuffer, metadataProvider);
  }

  if (cornerstoneToolsVersion === 3) {
    return Segmentation$1.generateToolState(imageIds, arrayBuffer, metadataProvider);
  }

  console.warn("No generateToolState adapater for cornerstone version ".concat(cornerstoneToolsVersion, ", exiting."));
}
/**
 * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.
 *
 * @param  {object[]} segmentation An empty segmentation derived dataset.
 * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.
 * @param  {Object} userOptions Options object to override default options.
 * @returns {Blob}           description
 */


function fillSegmentation$1(segmentation, inputLabelmaps3D) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    includeSliceSpacing: true
  };
  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;

  if (cornerstoneToolsVersion === 4) {
    return Segmentation$2.fillSegmentation(segmentation, inputLabelmaps3D, options);
  }

  console.warn("No generateSegmentation adapater for cornerstone version ".concat(cornerstoneToolsVersion, ", exiting."));
}

var Cornerstone = {
  Length: Length$1,
  Freehand: Freehand,
  Bidirectional: Bidirectional$1,
  MeasurementReport: MeasurementReport,
  Segmentation: Segmentation$3
};

// Should we move it to Colors.js

function dicomlab2RGBA(cielab) {
  var rgba = Colors.dicomlab2RGB(cielab).map(function (x) {
    return Math.round(x * 255);
  });
  rgba.push(255);
  return rgba;
} // TODO: Copied these functions in from VTK Math so we don't need a dependency.
// I guess we should put them somewhere
// https://github.com/Kitware/vtk-js/blob/master/Sources/Common/Core/Math/index.js


function cross(x, y, out) {
  var Zx = x[1] * y[2] - x[2] * y[1];
  var Zy = x[2] * y[0] - x[0] * y[2];
  var Zz = x[0] * y[1] - x[1] * y[0];
  out[0] = Zx;
  out[1] = Zy;
  out[2] = Zz;
}

function norm(x) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

  switch (n) {
    case 1:
      return Math.abs(x);

    case 2:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);

    case 3:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);

    default:
      {
        var sum = 0;

        for (var i = 0; i < n; i++) {
          sum += x[i] * x[i];
        }

        return Math.sqrt(sum);
      }
  }
}

function normalize(x) {
  var den = norm(x);

  if (den !== 0.0) {
    x[0] /= den;
    x[1] /= den;
    x[2] /= den;
  }

  return den;
}

function subtract(a, b, out) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
} // TODO: This is a useful utility on its own. We should move it somewhere?
// dcmjs.adapters.vtk.Multiframe? dcmjs.utils?


function geometryFromFunctionalGroups(dataset, PerFrameFunctionalGroups) {
  var geometry = {};
  var pixelMeasures = dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;
  var planeOrientation = dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence; // Find the origin of the volume from the PerFrameFunctionalGroups' ImagePositionPatient values
  //
  // TODO: assumes sorted frames. This should read the ImagePositionPatient from each frame and
  // sort them to obtain the first and last position along the acquisition axis.

  var firstFunctionalGroup = PerFrameFunctionalGroups[0];
  var lastFunctionalGroup = PerFrameFunctionalGroups[PerFrameFunctionalGroups.length - 1];
  var firstPosition = firstFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);
  var lastPosition = lastFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);
  geometry.origin = firstPosition; // NB: DICOM PixelSpacing is defined as Row then Column,
  // unlike ImageOrientationPatient

  geometry.spacing = [pixelMeasures.PixelSpacing[1], pixelMeasures.PixelSpacing[0], pixelMeasures.SpacingBetweenSlices].map(Number);
  geometry.dimensions = [dataset.Columns, dataset.Rows, PerFrameFunctionalGroups.length].map(Number);
  var orientation = planeOrientation.ImageOrientationPatient.map(Number);
  var columnStepToPatient = orientation.slice(0, 3);
  var rowStepToPatient = orientation.slice(3, 6);
  geometry.planeNormal = [];
  cross(columnStepToPatient, rowStepToPatient, geometry.planeNormal);
  geometry.sliceStep = [];
  subtract(lastPosition, firstPosition, geometry.sliceStep);
  normalize(geometry.sliceStep);
  geometry.direction = columnStepToPatient.concat(rowStepToPatient).concat(geometry.sliceStep);
  return geometry;
}

var Segmentation$4 =
/*#__PURE__*/
function () {
  function Segmentation() {
    _classCallCheck(this, Segmentation);
  }
  /**
   * Produces an array of Segments from an input DICOM Segmentation dataset
   *
   * Segments are returned with Geometry values that can be used to create
   * VTK Image Data objects.
   *
   * @example Example usage to create VTK Volume actors from each segment:
   *
   * const actors = [];
   * const segments = generateToolState(dataset);
   * segments.forEach(segment => {
   *   // now make actors using the segment information
   *   const scalarArray = vtk.Common.Core.vtkDataArray.newInstance({
   *        name: "Scalars",
   *        numberOfComponents: 1,
   *        values: segment.pixelData,
   *    });
   *
   *    const imageData = vtk.Common.DataModel.vtkImageData.newInstance();
   *    imageData.getPointData().setScalars(scalarArray);
   *    imageData.setDimensions(geometry.dimensions);
   *    imageData.setSpacing(geometry.spacing);
   *    imageData.setOrigin(geometry.origin);
   *    imageData.setDirection(geometry.direction);
   *
   *    const mapper = vtk.Rendering.Core.vtkVolumeMapper.newInstance();
   *    mapper.setInputData(imageData);
   *    mapper.setSampleDistance(2.);
   *
   *    const actor = vtk.Rendering.Core.vtkVolume.newInstance();
   *    actor.setMapper(mapper);
   *
   *    actors.push(actor);
   * });
   *
   * @param dataset
   * @return {{}}
   */


  _createClass(Segmentation, null, [{
    key: "generateSegments",
    value: function generateSegments(dataset) {
      if (dataset.SegmentSequence.constructor.name !== "Array") {
        dataset.SegmentSequence = [dataset.SegmentSequence];
      }

      dataset.SegmentSequence.forEach(function (segment) {
        // TODO: other interesting fields could be extracted from the segment
        // TODO: Read SegmentsOverlay field
        // http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.2.html
        // TODO: Looks like vtkColor only wants RGB in 0-1 values.
        // Why was this example converting to RGBA with 0-255 values?
        var color = dicomlab2RGBA(segment.RecommendedDisplayCIELabValue);
        segments[segment.SegmentNumber] = {
          color: color,
          functionalGroups: [],
          offset: null,
          size: null,
          pixelData: null
        };
      }); // make a list of functional groups per segment

      dataset.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {
        var segmentNumber = functionalGroup.SegmentIdentificationSequence.ReferencedSegmentNumber;
        segments[segmentNumber].functionalGroups.push(functionalGroup);
      }); // determine per-segment index into the pixel data
      // TODO: only handles one-bit-per pixel

      var frameSize = Math.ceil(dataset.Rows * dataset.Columns / 8);
      var nextOffset = 0;
      Object.keys(segments).forEach(function (segmentNumber) {
        var segment = segments[segmentNumber];
        segment.numberOfFrames = segment.functionalGroups.length;
        segment.size = segment.numberOfFrames * frameSize;
        segment.offset = nextOffset;
        nextOffset = segment.offset + segment.size;
        var packedSegment = dataset.PixelData.slice(segment.offset, nextOffset);
        segment.pixelData = BitArray.unpack(packedSegment);
        var geometry = geometryFromFunctionalGroups(dataset, segment.functionalGroups);
        segment.geometry = geometry;
      });
      return segments;
    }
  }]);

  return Segmentation;
}();

var VTKjs = {
  Segmentation: Segmentation$4
};

function getTID300ContentItem$1(tool, toolClass) {
  var args = toolClass.getTID300RepresentationArguments(tool);
  args.use3DSpatialCoordinates = true;
  return new toolClass.TID300Representation(args);
}

function getMeasurementGroup$1(graphicType, measurements) {
  var toolClass = MeasurementReport$1.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[graphicType]; // Loop through the array of tool instances
  // for this tool

  var Measurements = measurements.map(function (tool) {
    return getTID300ContentItem$1(tool, toolClass);
  });
  return new TID1501MeasurementGroup(Measurements);
}

var MeasurementReport$1 =
/*#__PURE__*/
function () {
  function MeasurementReport() {
    _classCallCheck(this, MeasurementReport);
  }

  _createClass(MeasurementReport, null, [{
    key: "generateReport",
    value: function generateReport(rois, metadataProvider, options) {
      // Input is all ROIS returned via viewer.getALLROIs()
      // let report = MeasurementReport.generateReport(viewer.getAllROIs());
      // Sort and split into arrays by scoord3d.graphicType
      var measurementsByGraphicType = {};
      rois.forEach(function (roi) {
        var graphicType = roi.scoord3d.graphicType;

        if (graphicType !== "POINT") {
          // adding z coord as 0
          roi.scoord3d.graphicData.map(function (coord) {
            return coord.push(0);
          });
        }

        if (!measurementsByGraphicType[graphicType]) {
          measurementsByGraphicType[graphicType] = [];
        }

        measurementsByGraphicType[graphicType].push(roi.scoord3d);
      }); // For each measurement, get the utility arguments using the adapter, and create TID300 Measurement
      // Group these TID300 Measurements into a TID1501 Measurement Group (for each graphicType)
      // Use TID1500MeasurementReport utility to create a single report from the created groups
      // return report;

      var allMeasurementGroups = [];
      var measurementGroups = [];
      Object.keys(measurementsByGraphicType).forEach(function (graphicType) {
        var measurements = measurementsByGraphicType[graphicType];
        var group = getMeasurementGroup$1(graphicType, measurements);

        if (group) {
          measurementGroups.push(group);
        }

        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);
      });
      var MeasurementReport = new TID1500MeasurementReport(allMeasurementGroups, options); // TODO: what is the correct metaheader
      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html
      // TODO: move meta creation to happen in derivations.js

      var fileMetaInformationVersionArray = new Uint8Array(2);
      fileMetaInformationVersionArray[1] = 1; // TODO: Find out how to reference the data from dicom-microscopy-viewer

      var studyInstanceUID = "12.4";
      var seriesInstanceUID = "12.4";
      var derivationSourceDataset = {
        StudyInstanceUID: studyInstanceUID,
        SeriesInstanceUID: seriesInstanceUID //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?
        //SOPClassUID: sopClassUID,

      };
      var _meta = {
        FileMetaInformationVersion: {
          Value: [fileMetaInformationVersionArray.buffer],
          vr: "OB"
        },
        //MediaStorageSOPClassUID
        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,
        TransferSyntaxUID: {
          Value: ["1.2.840.10008.1.2.1"],
          vr: "UI"
        },
        ImplementationClassUID: {
          Value: [DicomMetaDictionary.uid()],
          // TODO: could be git hash or other valid id
          vr: "UI"
        },
        ImplementationVersionName: {
          Value: ["dcmjs"],
          vr: "SH"
        }
      };
      var _vrMap = {
        PixelData: "OW"
      };
      derivationSourceDataset._meta = _meta;
      derivationSourceDataset._vrMap = _vrMap;
      var report = new StructuredReport([derivationSourceDataset]);
      var contentItem = MeasurementReport.contentItem(derivationSourceDataset); // Merge the derived dataset with the content from the Measurement Report

      report.dataset = Object.assign(report.dataset, contentItem);
      report.dataset._meta = _meta;
      return report;
    } //@ToDo

  }, {
    key: "generateToolState",
    value: function generateToolState(dataset) {
      // For now, bail out if the dataset is not a TID1500 SR with length measurements
      if (dataset.ContentTemplateSequence.TemplateIdentifier !== "1500") {
        throw new Error("This package can currently only interpret DICOM SR TID 1500");
      }

      var REPORT = "Imaging Measurements";
      var GROUP = "Measurement Group"; // Split the imagingMeasurementContent into measurement groups by their code meaning

      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT)); // Retrieve the Measurements themselves

      var measurementGroupContent = toArray(imagingMeasurementContent.ContentSequence).find(codeMeaningEquals(GROUP)); // // For each of the supported measurement types, compute the measurement data

      var measurementData = {};
      Object.keys(MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE).forEach(function (measurementType) {
        // Find supported measurement types in the Structured Report
        var measurementGroups = toArray(measurementGroupContent.ContentSequence);
        var measurementContent = measurementGroups.filter(graphicTypeEquals(measurementType.toUpperCase()));

        if (!measurementContent || measurementContent.length === 0) {
          return;
        }

        var toolClass = MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[measurementType];
        var toolType = toolClass.toolType;

        if (!toolClass.getMeasurementData) {
          throw new Error("MICROSCOPY Tool Adapters must define a getMeasurementData static method.");
        } // measurementContent = measurementContent.map(item => item.ContentSequence.GraphicData)
        //     .filter((graphicData, index, self) => self.indexOf(graphicData) === index)
        // measurementData[toolType] = new Array()


        measurementData[toolType] = toolClass.getMeasurementData(measurementContent); // measurementContent.forEach(measurement =>{
        // })
        // Retrieve Length Measurement Data
      });
      return measurementData;
    }
  }, {
    key: "registerTool",
    value: function registerTool(toolClass) {
      MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;
      MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.graphicType] = toolClass;
      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.graphicType] = toolClass.utilityToolType;
    }
  }]);

  return MeasurementReport;
}();
MeasurementReport$1.MEASUREMENT_BY_TOOLTYPE = {};
MeasurementReport$1.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE = {};
MeasurementReport$1.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE = {};

var Polyline$1 =
/*#__PURE__*/
function () {
  function Polyline$$1() {
    _classCallCheck(this, Polyline$$1);
  }

  _createClass(Polyline$$1, null, [{
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      // removing duplication and Getting only the graphicData information
      var measurement = measurementContent.map(function (item) {
        return item.ContentSequence.GraphicData;
      }).filter(function (s) {
        return function (a) {
          return function (j) {
            return !s.has(j) && s.add(j);
          }(JSON.stringify(a));
        };
      }(new Set())); // Chunking the array into size of three

      return measurement.map(function (measurement) {
        return measurement.reduce(function (all, one, i) {
          var ch = Math.floor(i / 3);
          all[ch] = [].concat(all[ch] || [], one);
          return all;
        }, []);
      });
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(scoord3d) {
      if (scoord3d.graphicType !== "POLYLINE") {
        throw new Error("We expected a POLYLINE graphicType");
      }

      var points = scoord3d.graphicData;
      var lengths = 1;
      return {
        points: points,
        lengths: lengths
      };
    }
  }]);

  return Polyline$$1;
}();

Polyline$1.graphicType = "POLYLINE";
Polyline$1.toolType = "Polyline";
Polyline$1.utilityToolType = "Polyline";
Polyline$1.TID300Representation = Polyline;
MeasurementReport$1.registerTool(Polyline$1);

/**
 * Expand an array of points stored as objects into
 * a flattened array of points
 *
 * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]
 * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]
 */

function expandPoints$1(points) {
  var allPoints = [];
  points.forEach(function (point) {
    allPoints.push(point[0]);
    allPoints.push(point[1]);

    if (point[2] !== undefined) {
      allPoints.push(point[2]);
    }
  });
  return allPoints;
}

var Polygon =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Polygon, _TID300Measurement);

  function Polygon(_ref) {
    var _this;

    var points = _ref.points,
        lengths = _ref.lengths,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence,
        _ref$use3DSpatialCoor = _ref.use3DSpatialCoordinates,
        use3DSpatialCoordinates = _ref$use3DSpatialCoor === void 0 ? false : _ref$use3DSpatialCoor;

    _classCallCheck(this, Polygon);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Polygon).call(this));
    _this.points = points;
    _this.lengths = lengths;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    _this.use3DSpatialCoordinates = use3DSpatialCoordinates;
    return _this;
  }

  _createClass(Polygon, [{
    key: "contentItem",
    value: function contentItem() {
      var points = this.points,
          lengths = this.lengths,
          ReferencedSOPSequence = this.ReferencedSOPSequence,
          _this$use3DSpatialCoo = this.use3DSpatialCoordinates,
          use3DSpatialCoordinates = _this$use3DSpatialCoo === void 0 ? false : _this$use3DSpatialCoo;
      var perimeter = {};
      var GraphicData = expandPoints$1(points);
      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYGON",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm2",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "SquareMilliMeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYGON",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Polygon;
}(TID300Measurement);

var Polygon$1 =
/*#__PURE__*/
function () {
  function Polygon$$1() {
    _classCallCheck(this, Polygon$$1);
  }

  _createClass(Polygon$$1, null, [{
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      // removing duplication and Getting only the graphicData information
      var measurement = measurementContent.map(function (item) {
        return item.ContentSequence.GraphicData;
      }).filter(function (s) {
        return function (a) {
          return function (j) {
            return !s.has(j) && s.add(j);
          }(JSON.stringify(a));
        };
      }(new Set())); // Chunking the array into size of three

      return measurement.map(function (measurement) {
        return measurement.reduce(function (all, one, i) {
          var ch = Math.floor(i / 3);
          all[ch] = [].concat(all[ch] || [], one);
          return all;
        }, []);
      });
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(scoord3d) {
      if (scoord3d.graphicType !== "POLYGON") {
        throw new Error("We expected a POLYGON graphicType");
      }

      var points = scoord3d.graphicData;
      var lengths = 1;
      return {
        points: points,
        lengths: lengths
      };
    }
  }]);

  return Polygon$$1;
}();

Polygon$1.graphicType = "POLYGON";
Polygon$1.toolType = "Polygon";
Polygon$1.utilityToolType = "Polygon";
Polygon$1.TID300Representation = Polygon;
MeasurementReport$1.registerTool(Polygon$1);

var Point =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Point, _TID300Measurement);

  function Point(_ref) {
    var _this;

    var points = _ref.points,
        lengths = _ref.lengths,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence,
        _ref$use3DSpatialCoor = _ref.use3DSpatialCoordinates,
        use3DSpatialCoordinates = _ref$use3DSpatialCoor === void 0 ? false : _ref$use3DSpatialCoor;

    _classCallCheck(this, Point);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Point).call(this));
    _this.points = points;
    _this.lengths = lengths;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    _this.use3DSpatialCoordinates = use3DSpatialCoordinates;
    return _this;
  }

  _createClass(Point, [{
    key: "contentItem",
    value: function contentItem() {
      var points = this.points,
          lengths = this.lengths,
          ReferencedSOPSequence = this.ReferencedSOPSequence,
          _this$use3DSpatialCoo = this.use3DSpatialCoordinates,
          use3DSpatialCoordinates = _this$use3DSpatialCoo === void 0 ? false : _this$use3DSpatialCoo;
      var perimeter = {};
      var GraphicData = points[0];
      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter" // TODO: Look this up from a Code Meaning dictionary

        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POINT",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }, {
        // TODO: This feels weird to repeat the GraphicData
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm2",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "SquareMilliMeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POINT",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Point;
}(TID300Measurement);

var Point$1 =
/*#__PURE__*/
function () {
  function Point$$1() {
    _classCallCheck(this, Point$$1);
  }

  _createClass(Point$$1, null, [{
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      var measurement = measurementContent.map(function (item) {
        return item.ContentSequence.GraphicData;
      });
      return measurement.filter(function (s) {
        return function (a) {
          return function (j) {
            return !s.has(j) && s.add(j);
          }(JSON.stringify(a));
        };
      }(new Set()));
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(scoord3d) {
      if (scoord3d.graphicType !== "POINT") {
        throw new Error("We expected a POINT graphicType");
      }

      var points = [scoord3d.graphicData];
      var lengths = 1;
      return {
        points: points,
        lengths: lengths
      };
    }
  }]);

  return Point$$1;
}();

Point$1.graphicType = "POINT";
Point$1.toolType = "Point";
Point$1.utilityToolType = "Point";
Point$1.TID300Representation = Point;
MeasurementReport$1.registerTool(Point$1);

/**
 * Expand an array of points stored as objects into
 * a flattened array of points
 *
 * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]
 * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]
 */

function expandPoints$2(points) {
  var allPoints = [];
  points.forEach(function (point) {
    allPoints.push(point[0]);
    allPoints.push(point[1]);
    allPoints.push(point[2]);
  });
  return allPoints;
}

var Circle =
/*#__PURE__*/
function (_TID300Measurement) {
  _inherits(Circle, _TID300Measurement);

  function Circle(_ref) {
    var _this;

    var points = _ref.points,
        lengths = _ref.lengths,
        ReferencedSOPSequence = _ref.ReferencedSOPSequence,
        _ref$use3DSpatialCoor = _ref.use3DSpatialCoordinates,
        use3DSpatialCoordinates = _ref$use3DSpatialCoor === void 0 ? false : _ref$use3DSpatialCoor;

    _classCallCheck(this, Circle);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this));
    _this.points = points;
    _this.lengths = lengths;
    _this.ReferencedSOPSequence = ReferencedSOPSequence;
    _this.use3DSpatialCoordinates = use3DSpatialCoordinates;
    return _this;
  }

  _createClass(Circle, [{
    key: "contentItem",
    value: function contentItem() {
      var points = this.points,
          lengths = this.lengths,
          ReferencedSOPSequence = this.ReferencedSOPSequence,
          _this$use3DSpatialCoo = this.use3DSpatialCoordinates,
          use3DSpatialCoordinates = _this$use3DSpatialCoo === void 0 ? false : _this$use3DSpatialCoo; // Combine all lengths to save the perimeter
      // @ToDO The permiter has to be implemented
      // const reducer = (accumulator, currentValue) => accumulator + currentValue;
      // const perimeter = lengths.reduce(reducer);

      var perimeter = {};
      var GraphicData = expandPoints$2(points); // TODO: Add Mean and STDev value of (modality?) pixels

      return [{
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: "web annotation"
      }, {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: {
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        },
        ConceptCodeSequence: {
          CodeValue: "SAMPLEFINDING",
          CodingSchemeDesignator: "99dcmjs",
          CodeMeaning: "Sample Finding"
        }
      }, {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter" // TODO: Look this up from a Code Meaning dictionary

        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "millimeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "CIRCLE",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }, {
        // TODO: This feels weird to repeat the GraphicData
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area" // TODO: Look this up from a Code Meaning dictionary

        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "mm2",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "SquareMilliMeter"
          },
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "CIRCLE",
          GraphicData: GraphicData,
          ContentSequence: use3DSpatialCoordinates ? undefined : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence: ReferencedSOPSequence
          }
        }
      }];
    }
  }]);

  return Circle;
}(TID300Measurement);

var Circle$1 =
/*#__PURE__*/
function () {
  function Circle$$1() {
    _classCallCheck(this, Circle$$1);
  }

  _createClass(Circle$$1, null, [{
    key: "getMeasurementData",
    value: function getMeasurementData(measurementContent) {
      // removing duplication and Getting only the graphicData information
      var measurement = measurementContent.map(function (item) {
        return item.ContentSequence.GraphicData;
      }).filter(function (s) {
        return function (a) {
          return function (j) {
            return !s.has(j) && s.add(j);
          }(JSON.stringify(a));
        };
      }(new Set())); // Chunking the array into size of three

      return measurement.map(function (measurement) {
        return measurement.reduce(function (all, one, i) {
          var ch = Math.floor(i / 3);
          all[ch] = [].concat(all[ch] || [], one);
          return all;
        }, []);
      });
    }
  }, {
    key: "getTID300RepresentationArguments",
    value: function getTID300RepresentationArguments(scoord3d) {
      if (scoord3d.graphicType !== "CIRCLE") {
        throw new Error("We expected a CIRCLE graphicType");
      }

      var points = scoord3d.graphicData;
      var lengths = 1;
      return {
        points: points,
        lengths: lengths
      };
    }
  }]);

  return Circle$$1;
}();

Circle$1.graphicType = "CIRCLE";
Circle$1.toolType = "Circle";
Circle$1.utilityToolType = "Circle";
Circle$1.TID300Representation = Circle;
MeasurementReport$1.registerTool(Circle$1);

var DICOMMicroscopyViewer = {
  Polyline: Polyline$1,
  Polygon: Polygon$1,
  Point: Point$1,
  Circle: Circle$1,
  MeasurementReport: MeasurementReport$1
};

var adapters = {
  Cornerstone: Cornerstone,
  VTKjs: VTKjs,
  DICOMMicroscopyViewer: DICOMMicroscopyViewer
};

var TID1500 = {
  TID1500MeasurementReport: TID1500MeasurementReport,
  TID1501MeasurementGroup: TID1501MeasurementGroup
};

// - Cornerstone Probe
// Note: OHIF currently uses Cornerstone's 'dragProbe'. We need to add the regular Probe tool, which drops a single point.
//
// Hierarchy
// TID 1500 MeasurementReport
// --TID 1501 Measurement Group
// ---Measurement Group (DCM 125007)
// ----TID 300 Measurement
// ------SCOORD. Graphic Type: POINT
//
//
// - Cornerstone Ellipse:
//
// Hierarchy
// TID 1500 MeasurementReport
// -TID 1410 Planar ROI Measurements
// --TID 1501 Measurement Group
// ---Measurement Group (DCM 125007)
// ----TID 300 Measurement
// ------SCOORD. Graphic Type: ELLIPSE
//        (ftp://dicom.nema.org/MEDICAL/dicom/current/output/chtml/part03/sect_C.10.5.html)
//
// If Graphic Type (0070,0023) is ELLIPSE, then exactly four points shall be present; the first two points are to be interpreted as the endpoints of the major axis and the second two points as the endpoints of the minor axis of an ellipse, some form of implementation dependent representation of which is to be drawn.
//
// TID 1401 Area Measurement: http://dicom.nema.org/medical/dicom/current/output/html/part16.html#sect_TID_1401
// Should be a sibling of the SCOORD
// Should specify the Mean Modality Pixel Value measured in whatever units the image is in
// Should specify the Standard Deviation Modality Pixel Value measured in whatever units the image is in
//
//
// - Cornerstone Rectangle ROI
//
// Hierarchy
// TID 1500 MeasurementReport
// --TID 1501 Measurement Group
// ---Measurement Group (DCM 125007)
// ----TID 300 Measurement
// ------SCOORD. Graphic Type: POLYLINE
// ------ Use concept corresponding to Rectangle measurement
//
//                 http://dicom.nema.org/medical/dicom/current/output/html/part16.html#sect_TID_4019
//
// OR
// Note: This should be the same as a Freehand ROI, more or less. We add a TID 4019: Algorithm Identification flag to specify that this was created (and should be rehydrated) into a Rectangle ROI.
// TODO: Should we use a Derivation instead? http://dicom.nema.org/medical/dicom/current/output/html/part16.html#DCM_121401
// Should specify the Area measured in mmˆ2, including the units in UCUM
// Should specify the Mean Modality Pixel Value measured in whatever units the image is in
// Should specify the Standard Deviation Modality Pixel Value measured in whatever units the image is in
//
//
// - Cornerstone Simple Angle tool
//
// Hierarchy
// TID 1500 MeasurementReport
// --TID 1501 Measurement Group
// ---Measurement Group (DCM 125007)
// ----TID 300 Measurement
// ------SCOORD. Graphic Type: POLYLINE
//        (ftp://dicom.nema.org/MEDICAL/dicom/current/output/chtml/part03/sect_C.10.5.html)
// ----TID 300 Measurement
// ------SCOORD. Graphic Type: POLYLINE
//        (ftp://dicom.nema.org/MEDICAL/dicom/current/output/chtml/part03/sect_C.10.5.html)
//
// ------ Use concept corresponding to Angle measurement
//
// Two lines specify the angle
// Should specify the Angle measured in Degrees, including the units in UCUM
//

var TID300 = {
  TID300Measurement: TID300Measurement,
  Length: Length,
  Bidirectional: Bidirectional,
  Polyline: Polyline
};

/**
 * Converts a Uint8Array to a String.
 * @param {Uint8Array} array that should be converted
 * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)
 * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)
 * @returns {String}
 */
function uint8ArrayToString(arr, offset, limit) {
  offset = offset || 0;
  limit = limit || arr.length - offset;
  var str = "";

  for (var i = offset; i < offset + limit; i++) {
    str += String.fromCharCode(arr[i]);
  }

  return str;
}
/**
 * Converts a String to a Uint8Array.
 * @param {String} str string that should be converted
 * @returns {Uint8Array}
 */


function stringToUint8Array(str) {
  var arr = new Uint8Array(str.length);

  for (var i = 0, j = str.length; i < j; i++) {
    arr[i] = str.charCodeAt(i);
  }

  return arr;
}
/**
 * Identifies the boundary in a multipart/related message header.
 * @param {String} header message header
 * @returns {String} boundary
 */


function identifyBoundary(header) {
  var parts = header.split("\r\n");

  for (var i = 0; i < parts.length; i++) {
    if (parts[i].substr(0, 2) === "--") {
      return parts[i];
    }
  }
}
/**
 * Checks whether a given token is contained by a message at a given offset.
 * @param {Uint8Array} message message content
 * @param {Uint8Array} token substring that should be present
 * @param {Number} offset offset in message content from where search should start
 * @returns {Boolean} whether message contains token at offset
 */


function containsToken(message, token) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (offset + token.length > message.length) {
    return false;
  }

  var index = offset;

  for (var i = 0; i < token.length; i++) {
    if (token[i] !== message[index++]) {
      return false;
    }
  }

  return true;
}
/**
 * Finds a given token in a message at a given offset.
 * @param {Uint8Array} message message content
 * @param {Uint8Array} token substring that should be found
 * @param {Number} offset message body offset from where search should start
 * @returns {Boolean} whether message has a part at given offset or not
 */


function findToken(message, token) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var maxSearchLength = arguments.length > 3 ? arguments[3] : undefined;
  var searchLength = message.length;

  if (maxSearchLength) {
    searchLength = Math.min(offset + maxSearchLength, message.length);
  }

  for (var i = offset; i < searchLength; i++) {
    // If the first value of the message matches
    // the first value of the token, check if
    // this is the full token.
    if (message[i] === token[0]) {
      if (containsToken(message, token, i)) {
        return i;
      }
    }
  }

  return -1;
}
/**
 * @typedef {Object} MultipartEncodedData
 * @property {ArrayBuffer} data The encoded Multipart Data
 * @property {String} boundary The boundary used to divide pieces of the encoded data
 */

/**
 * Encode one or more DICOM datasets into a single body so it can be
 * sent using the Multipart Content-Type.
 *
 * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.
 * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.
 * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.
 */


function multipartEncode(datasets) {
  var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid();
  var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "application/dicom";
  var contentTypeString = "Content-Type: ".concat(contentType);
  var header = "\r\n--".concat(boundary, "\r\n").concat(contentTypeString, "\r\n\r\n");
  var footer = "\r\n--".concat(boundary, "--");
  var headerArray = stringToUint8Array(header);
  var footerArray = stringToUint8Array(footer);
  var headerLength = headerArray.length;
  var footerLength = footerArray.length;
  var length = 0; // Calculate the total length for the final array

  var contentArrays = datasets.map(function (datasetBuffer) {
    var contentArray = new Uint8Array(datasetBuffer);
    var contentLength = contentArray.length;
    length += headerLength + contentLength + footerLength;
    return contentArray;
  }); // Allocate the array

  var multipartArray = new Uint8Array(length); // Set the initial header

  multipartArray.set(headerArray, 0); // Write each dataset into the multipart array

  var position = 0;
  contentArrays.forEach(function (contentArray) {
    var contentLength = contentArray.length;
    multipartArray.set(headerArray, position);
    multipartArray.set(contentArray, position + headerLength);
    position += headerLength + contentArray.length;
  });
  multipartArray.set(footerArray, position);
  return {
    data: multipartArray.buffer,
    boundary: boundary
  };
}
/**
 * Decode a Multipart encoded ArrayBuffer and return the components as an Array.
 *
 * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message
 * @returns {Array} The content
 */


function multipartDecode(response) {
  var message = new Uint8Array(response);
  /* Set a maximum length to search for the header boundaries, otherwise
     findToken can run for a long time
  */

  var maxSearchLength = 1000; // First look for the multipart mime header

  var separator = stringToUint8Array("\r\n\r\n");
  var headerIndex = findToken(message, separator, 0, maxSearchLength);

  if (headerIndex === -1) {
    throw new Error("Response message has no multipart mime header");
  }

  var header = uint8ArrayToString(message, 0, headerIndex);
  var boundaryString = identifyBoundary(header);

  if (!boundaryString) {
    throw new Error("Header of response message does not specify boundary");
  }

  var boundary = stringToUint8Array(boundaryString);
  var components = [];
  var offset = headerIndex + separator.length; // Loop until we cannot find any more boundaries

  var boundaryIndex;

  while (boundaryIndex !== -1) {
    // Search for the next boundary in the message, starting
    // from the current offset position
    boundaryIndex = findToken(message, boundary, offset); // If no further boundaries are found, stop here.

    if (boundaryIndex === -1) {
      break;
    } // Extract data from response message, excluding "\r\n"


    var spacingLength = 2;
    var length = boundaryIndex - offset - spacingLength;
    var data = response.slice(offset, offset + length); // Add the data to the array of results

    components.push(data); // find the end of the boundary

    var boundaryEnd = findToken(message, separator, boundaryIndex + 1, maxSearchLength);
    if (boundaryEnd === -1) break; // Move the offset to the end of the identified boundary

    offset = boundaryEnd + separator.length;
  }

  return components;
}
/**
 * Create a random GUID
 *
 * @return {string}
 */


function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}

var message = {
  containsToken: containsToken,
  findToken: findToken,
  identifyBoundary: identifyBoundary,
  uint8ArrayToString: uint8ArrayToString,
  stringToUint8Array: stringToUint8Array,
  multipartEncode: multipartEncode,
  multipartDecode: multipartDecode,
  guid: guid
};

var utilities = {
  TID1500: TID1500,
  TID300: TID300,
  message: message
};

var Code =
/*#__PURE__*/
function () {
  function Code(options) {
    _classCallCheck(this, Code);

    this[_value] = options.value;
    this[_meaning] = options.meaning;
    this[_schemeDesignator] = options.schemeDesignator;
    this[_schemeVersion] = options.schemeVersion || null;
  }

  _createClass(Code, [{
    key: "value",
    get: function get() {
      return this[_value];
    }
  }, {
    key: "meaning",
    get: function get() {
      return this[_meaning];
    }
  }, {
    key: "schemeDesignator",
    get: function get() {
      return this[_schemeDesignator];
    }
  }, {
    key: "schemeVersion",
    get: function get() {
      return this[_schemeVersion];
    }
  }]);

  return Code;
}();

var CodedConcept =
/*#__PURE__*/
function () {
  function CodedConcept(options) {
    _classCallCheck(this, CodedConcept);

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for CodedConcept.");
    }

    if (options.meaning === undefined) {
      throw new Error("Option 'meaning' is required for CodedConcept.");
    }

    if (options.schemeDesignator === undefined) {
      throw new Error("Option 'schemeDesignator' is required for CodedConcept.");
    }

    this.CodeValue = options.value;
    this.CodeMeaning = options.meaning;
    this.CodingSchemeDesignator = options.schemeDesignator;

    if ("schemeVersion" in options) {
      this.CodingSchemeVersion = options.schemeVersion;
    }
  }

  _createClass(CodedConcept, [{
    key: "equals",
    value: function equals(other) {
      if (other.value === this.value && other.schemeDesignator === this.schemeDesignator) {
        if (other.schemeVersion && this.schemeVersion) {
          return other.schemeVersion === this.schemeVersion;
        }

        return true;
      }

      return false;
    }
  }, {
    key: "value",
    get: function get() {
      return this.CodeValue;
    }
  }, {
    key: "meaning",
    get: function get() {
      return this.CodeMeaning;
    }
  }, {
    key: "schemeDesignator",
    get: function get() {
      return this.CodingSchemeDesignator;
    }
  }, {
    key: "schemeVersion",
    get: function get() {
      return this.CodingSchemeVersion;
    }
  }]);

  return CodedConcept;
}();

var coding = /*#__PURE__*/Object.freeze({
	Code: Code,
	CodedConcept: CodedConcept
});

var ValueTypes = {
  CODE: "CODE",
  COMPOSITE: "COMPOSITE",
  CONTAINER: "CONTAINER",
  DATE: "DATE",
  DATETIME: "DATETIME",
  IMAGE: "IMAGE",
  NUM: "NUM",
  PNAME: "PNAME",
  SCOORD: "SCOORD",
  SCOORD3D: "SCOORD3D",
  TCOORD: "TCOORD",
  TEXT: "TEXT",
  TIME: "TIME",
  UIDREF: "UIDREF",
  WAVEFORM: "WAVEFORM"
};
Object.freeze(ValueTypes);
var GraphicTypes = {
  CIRCLE: "CIRCLE",
  ELLIPSE: "ELLIPSE",
  ELLIPSOID: "ELLIPSOID",
  MULTIPOINT: "MULTIPOINT",
  POINT: "POINT",
  POLYLINE: "POLYLINE"
};
Object.freeze(GraphicTypes);
var GraphicTypes3D = {
  ELLIPSE: "ELLIPSE",
  ELLIPSOID: "ELLIPSOID",
  MULTIPOINT: "MULTIPOINT",
  POINT: "POINT",
  POLYLINE: "POLYLINE",
  POLYGON: "POLYGON"
};
Object.freeze(GraphicTypes3D);
var TemporalRangeTypes = {
  BEGIN: "BEGIN",
  END: "END",
  MULTIPOINT: "MULTIPOINT",
  MULTISEGMENT: "MULTISEGMENT",
  POINT: "POINT",
  SEGMENT: "SEGMENT"
};
Object.freeze(TemporalRangeTypes);
var RelationshipTypes = {
  CONTAINS: "CONTAINS",
  HAS_ACQ_CONTENT: "HAS ACQ CONTENT",
  HAS_CONCEPT_MOD: "HAS CONCEPT MOD",
  HAS_OBS_CONTEXT: "HAS OBS CONTEXT",
  HAS_PROPERTIES: "HAS PROPERTIES",
  INFERRED_FROM: "INFERRED FROM",
  SELECTED_FROM: "SELECTED FROM"
};
Object.freeze(RelationshipTypes);
var PixelOriginInterpretations = {
  FRAME: "FRAME",
  VOLUME: "VOLUME"
};
Object.freeze(RelationshipTypes);

function isFloat(n) {
  return n === +n && n !== (n | 0);
}

function zeroPad(value) {
  return (value > 9 ? "" : "0") + value;
}

function TM(date) {
  // %H%M%S.%f
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  var milliseconds = date.getMilliseconds();
  return zeroPad(hours) + zeroPad(minutes) + zeroPad(seconds) + milliseconds;
}

function DA(date) {
  var year = date.getFullYear();
  var month = date.getMonth() + 1;
  var day = date.getDate();
  return year + zeroPad(month) + zeroPad(day);
}

function DT(date) {
  return DA(date) + TM(date);
}

var ContentSequence$1 =
/*#__PURE__*/
function (_Array) {
  _inherits(ContentSequence, _Array);

  function ContentSequence() {
    var _getPrototypeOf2;

    _classCallCheck(this, ContentSequence);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContentSequence)).call.apply(_getPrototypeOf2, [this].concat(args)));
  } // filterBy(options) {
  // }


  return ContentSequence;
}(_wrapNativeSuper(Array));

var ContentItem = function ContentItem(options) {
  _classCallCheck(this, ContentItem);

  if (options.name === undefined) {
    throw new Error("Option 'name' is required for ContentItem.");
  }

  if (options.name.constructor !== CodedConcept) {
    throw new Error("Option 'name' must have type CodedConcept.");
  }

  this.ConceptNameCodeSequence = [options.name];

  if (options.valueType === undefined) {
    throw new Error("Option 'valueType' is required for ContentItem.");
  }

  if (!(Object.values(ValueTypes).indexOf(options.valueType) !== -1)) {
    throw new Error("Invalid value type ".concat(options.valueType));
  }

  this.ValueType = options.valueType;

  if (options.relationshipType !== undefined) {
    if (!(Object.values(RelationshipTypes).indexOf(options.relationshipType) !== -1)) {
      throw new Error("Invalid relationship type ".concat(options.relationshipTypes));
    }

    this.RelationshipType = options.relationshipType;
  } // TODO: relationship type is required

} // getContentItems(options) {
//   // TODO: filter by name, value type and relationship type
//   return this.ContentSequence;
// }
;

var CodeContentItem =
/*#__PURE__*/
function (_ContentItem) {
  _inherits(CodeContentItem, _ContentItem);

  function CodeContentItem(options) {
    var _this;

    _classCallCheck(this, CodeContentItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.CODE
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for CodeContentItem.");
    }

    if (!(options.value || options.value.constructor === CodedConcept)) {
      throw new Error("Option 'value' must have type CodedConcept.");
    }

    _this.ConceptCodeSequence = [options.value];
    return _this;
  }

  return CodeContentItem;
}(ContentItem);

var TextContentItem =
/*#__PURE__*/
function (_ContentItem2) {
  _inherits(TextContentItem, _ContentItem2);

  function TextContentItem(options) {
    var _this2;

    _classCallCheck(this, TextContentItem);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TextContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TEXT
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for TextContentItem.");
    }

    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }

    _this2.TextValue = options.value;
    return _this2;
  }

  return TextContentItem;
}(ContentItem);

var PNameContentItem =
/*#__PURE__*/
function (_ContentItem3) {
  _inherits(PNameContentItem, _ContentItem3);

  function PNameContentItem(options) {
    var _this3;

    _classCallCheck(this, PNameContentItem);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PNameContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.PNAME
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for PNameContentItem.");
    }

    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }

    _this3.PersonName = options.value;
    return _this3;
  }

  return PNameContentItem;
}(ContentItem);

var TimeContentItem =
/*#__PURE__*/
function (_ContentItem4) {
  _inherits(TimeContentItem, _ContentItem4);

  function TimeContentItem(options) {
    var _this4;

    _classCallCheck(this, TimeContentItem);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(TimeContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TIME
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for TimeContentItem.");
    }

    if (!(_typeof(options.value) === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }

    _this4.Time = TM(options.value);
    return _this4;
  }

  return TimeContentItem;
}(ContentItem);

var DateContentItem =
/*#__PURE__*/
function (_ContentItem5) {
  _inherits(DateContentItem, _ContentItem5);

  function DateContentItem(options) {
    var _this5;

    _classCallCheck(this, DateContentItem);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(DateContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.DATE
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for DateContentItem.");
    }

    if (!(_typeof(options.value) === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }

    _this5.Date = DA(options.value);
    return _this5;
  }

  return DateContentItem;
}(ContentItem);

var DateTimeContentItem =
/*#__PURE__*/
function (_ContentItem6) {
  _inherits(DateTimeContentItem, _ContentItem6);

  function DateTimeContentItem(options) {
    var _this6;

    _classCallCheck(this, DateTimeContentItem);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(DateTimeContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.DATETIME
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for DateTimeContentItem.");
    }

    if (!(_typeof(options.value) === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }

    _this6.DateTime = DT(otions.value);
    return _this6;
  }

  return DateTimeContentItem;
}(ContentItem);

var UIDRefContentItem =
/*#__PURE__*/
function (_ContentItem7) {
  _inherits(UIDRefContentItem, _ContentItem7);

  function UIDRefContentItem(options) {
    var _this7;

    _classCallCheck(this, UIDRefContentItem);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(UIDRefContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.UIDREF
    }));

    if (options.value === undefined) {
      throw new Error("Option 'value' is required for UIDRefContentItem.");
    }

    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }

    _this7.UID = options.value;
    return _this7;
  }

  return UIDRefContentItem;
}(ContentItem);

var NumContentItem =
/*#__PURE__*/
function (_ContentItem8) {
  _inherits(NumContentItem, _ContentItem8);

  function NumContentItem(options) {
    var _this8;

    _classCallCheck(this, NumContentItem);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(NumContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.NUM
    }));

    if (options.value !== undefined) {
      if (!(typeof options.value === "number" || options.value instanceof Number)) {
        throw new Error("Option 'value' must have type Number.");
      }

      if (options.unit === undefined) {
        throw new Error("Option 'unit' is required for NumContentItem with 'value'.");
      }

      var item = {};
      item.NumericValue = options.value;

      if (isFloat(options.value)) {
        item.FloatingPointValue = options.value;
      }

      item.MeasurementUnitsCodeSequence = options.unit;
      _this8.MeasuredValueSequence = [item];
    } else if (options.qualifier !== undefined) {
      if (!(options.qualifier || options.qualifier.constructor === CodedConcept)) {
        throw new Error("Option 'qualifier' must have type CodedConcept.");
      }

      _this8.NumericValueQualifierCodeSequence = [options.qualifier];
    } else {
      throw new Error("Either option 'value' or 'qualifier' is required for NumContentItem.");
    }

    return _this8;
  }

  return NumContentItem;
}(ContentItem);

var ContainerContentItem =
/*#__PURE__*/
function (_ContentItem9) {
  _inherits(ContainerContentItem, _ContentItem9);

  function ContainerContentItem(options) {
    var _this9;

    _classCallCheck(this, ContainerContentItem);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(ContainerContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.CONTAINER
    }));

    if (options.isContentContinuous !== undefined) {
      _this9.ContinuityOfContent = "CONTINUOUS";
    } else {
      _this9.ContinuityOfContent = "SEPARATE";
    }

    if (options.templateID !== undefined) {
      if (!(typeof options.templateID === "string" || options.templateID instanceof String)) {
        throw new Error("Option 'templateID' must have type String.");
      }

      var item = {};
      item.MappingResource = "DCMR";
      item.TemplateIdentifier = options.templateID;
      _this9.ContentTemplateSequence = [item];
    }

    return _this9;
  }

  return ContainerContentItem;
}(ContentItem);

var CompositeContentItem =
/*#__PURE__*/
function (_ContentItem10) {
  _inherits(CompositeContentItem, _ContentItem10);

  function CompositeContentItem(options) {
    var _this10;

    _classCallCheck(this, CompositeContentItem);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(CompositeContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.COMPOSITE
    }));

    if (options.referencedSOPClassUID === undefined) {
      throw new Error("Option 'referencedSOPClassUID' is required for CompositeContentItem.");
    }

    if (options.referencedSOPInstanceUID === undefined) {
      throw new Error("Option 'referencedSOPInstanceUID' is required for CompositeContentItem.");
    }

    if (!(typeof options.referencedSOPClassUID === "string" || options.referencedSOPClassUID instanceof String)) {
      throw new Error("Option 'referencedSOPClassUID' must have type String.");
    }

    if (!(typeof options.referencedSOPInstanceUID === "string" || options.referencedSOPInstanceUID instanceof String)) {
      throw new Error("Option 'referencedSOPInstanceUID' must have type String.");
    }

    var item = {};
    item.ReferencedSOPClassUID = options.referencedSOPClassUID;
    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;
    _this10.ReferenceSOPSequence = [item];
    return _this10;
  }

  return CompositeContentItem;
}(ContentItem);

var ImageContentItem =
/*#__PURE__*/
function (_ContentItem11) {
  _inherits(ImageContentItem, _ContentItem11);

  function ImageContentItem(options) {
    var _this11;

    _classCallCheck(this, ImageContentItem);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(ImageContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.IMAGE
    }));

    if (options.referencedSOPClassUID === undefined) {
      throw new Error("Option 'referencedSOPClassUID' is required for ImageContentItem.");
    }

    if (options.referencedSOPInstanceUID === undefined) {
      throw new Error("Option 'referencedSOPInstanceUID' is required for ImageContentItem.");
    }

    if (!(typeof options.referencedSOPClassUID === "string" || options.referencedSOPClassUID instanceof String)) {
      throw new Error("Option 'referencedSOPClassUID' must have type String.");
    }

    if (!(typeof options.referencedSOPInstanceUID === "string" || options.referencedSOPInstanceUID instanceof String)) {
      throw new Error("Option 'referencedSOPInstanceUID' must have type String.");
    }

    var item = {};
    item.ReferencedSOPClassUID = options.referencedSOPClassUID;
    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;

    if (options.referencedFrameNumbers !== undefined) {
      if (!(_typeof(options.referencedFrameNumbers) === "object" || options.referencedFrameNumbers instanceof Array)) {
        throw new Error("Option 'referencedFrameNumbers' must have type Array.");
      } // FIXME: value multiplicity


      item.ReferencedFrameNumber = options.referencedFrameNumbers;
    }

    if (options.referencedFrameSegmentNumber !== undefined) {
      if (!(_typeof(options.referencedSegmentNumbers) === "object" || options.referencedSegmentNumbers instanceof Array)) {
        throw new Error("Option 'referencedSegmentNumbers' must have type Array.");
      } // FIXME: value multiplicity


      item.ReferencedSegmentNumber = options.referencedSegmentNumbers;
    }

    _this11.ReferencedSOPSequence = [item];
    return _this11;
  }

  return ImageContentItem;
}(ContentItem);

var ScoordContentItem =
/*#__PURE__*/
function (_ContentItem12) {
  _inherits(ScoordContentItem, _ContentItem12);

  function ScoordContentItem(options) {
    var _this12;

    _classCallCheck(this, ScoordContentItem);

    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(ScoordContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.SCOORD
    }));

    if (options.graphicType === undefined) {
      throw new Error("Option 'graphicType' is required for ScoordContentItem.");
    }

    if (!(typeof options.graphicType === "string" || options.graphicType instanceof String)) {
      throw new Error("Option 'graphicType' of ScoordContentItem must have type String.");
    }

    if (options.graphicData === undefined) {
      throw new Error("Option 'graphicData' is required for ScoordContentItem.");
    }

    if (!(_typeof(options.graphicData) === "object" || options.graphicData instanceof Array)) {
      throw new Error("Option 'graphicData' of ScoordContentItem must have type Array.");
    }

    if (Object.values(GraphicTypes).indexOf(options.graphicType) === -1) {
      throw new Error("Invalid graphic type '".concat(options.graphicType, "'."));
    }

    if (options.graphicData[0] instanceof Array) {
      options.graphicData = [].concat.apply([], options.graphicData);
    }

    _this12.GraphicData = options.graphicData;
    options.pixelOriginInterpretation = options.pixelOriginInterpretation || PixelOriginInterpretations.VOLUME;

    if (!(typeof options.pixelOriginInterpretation === "string" || options.pixelOriginInterpretation instanceof String)) {
      throw new Error("Option 'pixelOriginInterpretation' must have type String.");
    }

    if (Object.values(PixelOriginInterpretations).indexOf(options.pixelOriginInterpretation) === -1) {
      throw new Error("Invalid pixel origin interpretation '".concat(options.pixelOriginInterpretation, "'."));
    }

    if (options.fiducialUID !== undefined) {
      if (!(typeof options.fiducialUID === "string" || options.fiducialUID instanceof String)) {
        throw new Error("Option 'fiducialUID' must have type String.");
      }

      _this12.FiducialUID = options.fiducialUID;
    }

    return _this12;
  }

  return ScoordContentItem;
}(ContentItem);

var Scoord3DContentItem =
/*#__PURE__*/
function (_ContentItem13) {
  _inherits(Scoord3DContentItem, _ContentItem13);

  function Scoord3DContentItem(options) {
    var _this13;

    _classCallCheck(this, Scoord3DContentItem);

    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(Scoord3DContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.SCOORD3D
    }));

    if (options.graphicType === undefined) {
      throw new Error("Option 'graphicType' is required for Scoord3DContentItem.");
    }

    if (!(typeof options.graphicType === "string" || options.graphicType instanceof String)) {
      throw new Error("Option 'graphicType' must have type String.");
    }

    if (options.graphicData === undefined) {
      throw new Error("Option 'graphicData' is required for Scoord3DContentItem.");
    }

    if (!(_typeof(options.graphicData) === "object" || options.graphicData instanceof Array)) {
      throw new Error("Option 'graphicData' must have type Array.");
    }

    if (Object.values(GraphicTypes3D).indexOf(options.graphicType) === -1) {
      throw new Error("Invalid graphic type '".concat(options.graphicType, "'."));
    }

    if (options.graphicData[0] instanceof Array) {
      options.graphicData = [].concat.apply([], options.graphicData);
    }

    _this13.GraphicType = options.graphicType;
    _this13.GraphicData = options.graphicData;

    if (options.frameOfReferenceUID === undefined) {
      throw new Error("Option 'frameOfReferenceUID' is required for Scoord3DContentItem.");
    }

    if (!(typeof options.frameOfReferenceUID === "string" || options.frameOfReferenceUID instanceof String)) {
      throw new Error("Option 'frameOfReferenceUID' must have type String.");
    }

    _this13.ReferencedFrameOfReferenceUID = options.frameOfReferenceUID;

    if ("fiducialUID" in options) {
      if (!(typeof options.fiducialUID === "string" || options.fiducialUID instanceof String)) {
        throw new Error("Option 'fiducialUID' must have type String.");
      }

      _this13.FiducialUID = fiducialUID;
    }

    return _this13;
  }

  return Scoord3DContentItem;
}(ContentItem);

var TcoordContentItem =
/*#__PURE__*/
function (_ContentItem14) {
  _inherits(TcoordContentItem, _ContentItem14);

  function TcoordContentItem(options) {
    var _this14;

    _classCallCheck(this, TcoordContentItem);

    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(TcoordContentItem).call(this, {
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TCOORD
    }));

    if (options.temporalRangeType === undefined) {
      throw new Error("Option 'temporalRangeType' is required for TcoordContentItem.");
    }

    if (Object.values(TemporalRangeTypes).indexOf(options.temporalRangeType) === -1) {
      throw new Error("Invalid temporal range type '".concat(options.temporalRangeType, "'."));
    }

    if (options.referencedSamplePositions === undefined) {
      if (!(_typeof(options.referencedSamplePositions) === "object" || options.referencedSamplePositions instanceof Array)) {
        throw new Error("Option 'referencedSamplePositions' must have type Array.");
      } // TODO: ensure values are integers


      _this14.ReferencedSamplePositions = options.referencedSamplePositions;
    } else if (options.referencedTimeOffsets === undefined) {
      if (!(_typeof(options.referencedTimeOffsets) === "object" || options.referencedTimeOffsets instanceof Array)) {
        throw new Error("Option 'referencedTimeOffsets' must have type Array.");
      } // TODO: ensure values are floats


      _this14.ReferencedTimeOffsets = options.referencedTimeOffsets;
    } else if (options.referencedDateTime === undefined) {
      if (!(_typeof(options.referencedDateTime) === "object" || options.referencedDateTime instanceof Array)) {
        throw new Error("Option 'referencedDateTime' must have type Array.");
      }

      _this14.ReferencedDateTime = options.referencedDateTime;
    } else {
      throw new Error("One of the following options is required for TcoordContentItem: " + "'referencedSamplePositions', 'referencedTimeOffsets', or " + "'referencedDateTime'.");
    }

    return _this14;
  }

  return TcoordContentItem;
}(ContentItem);

var valueTypes = /*#__PURE__*/Object.freeze({
	CodeContentItem: CodeContentItem,
	ContainerContentItem: ContainerContentItem,
	ContentSequence: ContentSequence$1,
	CompositeContentItem: CompositeContentItem,
	DateContentItem: DateContentItem,
	DateTimeContentItem: DateTimeContentItem,
	GraphicTypes: GraphicTypes,
	GraphicTypes3D: GraphicTypes3D,
	ImageContentItem: ImageContentItem,
	NumContentItem: NumContentItem,
	PNameContentItem: PNameContentItem,
	PixelOriginInterpretations: PixelOriginInterpretations,
	RelationshipTypes: RelationshipTypes,
	ScoordContentItem: ScoordContentItem,
	Scoord3DContentItem: Scoord3DContentItem,
	TcoordContentItem: TcoordContentItem,
	TemporalRangeTypes: TemporalRangeTypes,
	TextContentItem: TextContentItem,
	TimeContentItem: TimeContentItem,
	UIDRefContentItem: UIDRefContentItem,
	ValueTypes: ValueTypes
});

var LongitudinalTemporalOffsetFromEvent =
/*#__PURE__*/
function (_NumContentItem) {
  _inherits(LongitudinalTemporalOffsetFromEvent, _NumContentItem);

  function LongitudinalTemporalOffsetFromEvent(options) {
    var _this;

    _classCallCheck(this, LongitudinalTemporalOffsetFromEvent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LongitudinalTemporalOffsetFromEvent).call(this, {
      name: new CodedConcept({
        value: "128740",
        meaning: "Longitudinal Temporal Offset from Event",
        schemeDesignator: "DCM"
      }),
      value: options.value,
      unit: options.unit,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    }));
    _this.ContentSequence = new ContentSequence$1();
    var item = new CodeContentItem({
      name: new CodedConcept({
        value: "128741",
        meaning: "Longitudinal Temporal Event Type",
        schemeDesignator: "DCM"
      }),
      value: options.eventType,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });

    _this.ContentSequence.push(item);

    return _this;
  }

  return LongitudinalTemporalOffsetFromEvent;
}(NumContentItem);

var SourceImageForRegion =
/*#__PURE__*/
function (_ImageContentItem) {
  _inherits(SourceImageForRegion, _ImageContentItem);

  function SourceImageForRegion(options) {
    _classCallCheck(this, SourceImageForRegion);

    return _possibleConstructorReturn(this, _getPrototypeOf(SourceImageForRegion).call(this, {
      name: new CodedConcept({
        value: "121324",
        meaning: "Source Image",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: options.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      referencedFrameNumbers: options.referencedFrameNumbers,
      relationshipType: RelationshipTypes.SELECTED_FROM
    }));
  }

  return SourceImageForRegion;
}(ImageContentItem);

var SourceImageForSegmentation =
/*#__PURE__*/
function (_ImageContentItem2) {
  _inherits(SourceImageForSegmentation, _ImageContentItem2);

  function SourceImageForSegmentation(options) {
    _classCallCheck(this, SourceImageForSegmentation);

    return _possibleConstructorReturn(this, _getPrototypeOf(SourceImageForSegmentation).call(this, {
      name: new CodedConcept({
        value: "121233",
        meaning: "Source Image for Segmentation",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: options.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      referencedFrameNumbers: options.referencedFrameNumbers,
      relationshipType: RelationshipTypes.SELECTED_FROM
    }));
  }

  return SourceImageForSegmentation;
}(ImageContentItem);

var SourceSeriesForSegmentation =
/*#__PURE__*/
function (_UIDRefContentItem) {
  _inherits(SourceSeriesForSegmentation, _UIDRefContentItem);

  function SourceSeriesForSegmentation(options) {
    _classCallCheck(this, SourceSeriesForSegmentation);

    return _possibleConstructorReturn(this, _getPrototypeOf(SourceSeriesForSegmentation).call(this, {
      name: new CodedConcept({
        value: "121232",
        meaning: "Source Series for Segmentation",
        schemeDesignator: "DCM"
      }),
      value: options.referencedSeriesInstanceUID,
      relationshipType: RelationshipTypes.CONTAINS
    }));
  }

  return SourceSeriesForSegmentation;
}(UIDRefContentItem);

var ImageRegion =
/*#__PURE__*/
function (_ScoordContentItem) {
  _inherits(ImageRegion, _ScoordContentItem);

  function ImageRegion(options) {
    var _this2;

    _classCallCheck(this, ImageRegion);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ImageRegion).call(this, {
      name: new CodedConcept({
        value: "111030",
        meaning: "Image Region",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      pixelOriginInterpretation: options.pixelOriginInterpretation,
      relationshipType: RelationshipTypes.CONTAINS
    }));

    if (options.graphicType === GraphicTypes.MULTIPOINT) {
      throw new Error("Graphic type 'MULTIPOINT' is not valid for region.");
    }

    if (options.sourceImage === undefined) {
      throw Error("Option 'sourceImage' is required for ImageRegion.");
    }

    if (!(options.sourceImage || options.sourceImage.constructor === SourceImageForRegion)) {
      throw new Error("Option 'sourceImage' of ImageRegion must have type " + "SourceImageForRegion.");
    }

    _this2.ContentSequence = new ContentSequence$1();

    _this2.ContentSequence.push(options.sourceImage);

    return _this2;
  }

  return ImageRegion;
}(ScoordContentItem);

var ImageRegion3D =
/*#__PURE__*/
function (_Scoord3DContentItem) {
  _inherits(ImageRegion3D, _Scoord3DContentItem);

  function ImageRegion3D(options) {
    var _this3;

    _classCallCheck(this, ImageRegion3D);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ImageRegion3D).call(this, {
      name: new CodedConcept({
        value: "111030",
        meaning: "Image Region",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      frameOfReferenceUID: options.frameOfReferenceUID,
      relationshipType: RelationshipTypes.CONTAINS
    }));

    if (options.graphicType === GraphicTypes3D.MULTIPOINT) {
      throw new Error("Graphic type 'MULTIPOINT' is not valid for region.");
    }

    if (options.graphicType === GraphicTypes3D.ELLIPSOID) {
      throw new Error("Graphic type 'ELLIPSOID' is not valid for region.");
    }

    return _this3;
  }

  return ImageRegion3D;
}(Scoord3DContentItem);

var VolumeSurface =
/*#__PURE__*/
function (_Scoord3DContentItem2) {
  _inherits(VolumeSurface, _Scoord3DContentItem2);

  function VolumeSurface(options) {
    var _this4;

    _classCallCheck(this, VolumeSurface);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(VolumeSurface).call(this, {
      name: new CodedConcept({
        value: "121231",
        meaning: "Volume Surface",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      frameOfFeferenceUID: options.frameOfFeferenceUID,
      relationshipType: RelationshipTypes.CONTAINS
    }));

    if (options.graphicType !== GraphicTypes3D.ELLIPSOID) {
      throw new Error("Graphic type for volume surface must be 'ELLIPSOID'.");
    }

    _this4.ContentSequence = new ContentSequence$1();

    if (options.sourceImages) {
      options.sourceImages.forEach(function (image) {
        if (!(image || image.constructor === SourceImageForRegion)) {
          throw new Error("Items of option 'sourceImages' of VolumeSurface " + "must have type SourceImageForRegion.");
        }

        _this4.ContentSequence.push(image);
      });
    } else if (options.sourceSeries) {
      if (!(options.sourceSeries || options.sourceSeries.constructor === SourceSeriesForRegion)) {
        throw new Error("Option 'sourceSeries' of VolumeSurface " + "must have type SourceSeriesForRegion.");
      }

      _this4.ContentSequence.push(options.sourceSeries);
    } else {
      throw new Error("One of the following two options must be provided: " + "'sourceImage' or 'sourceSeries'.");
    }

    return _this4;
  }

  return VolumeSurface;
}(Scoord3DContentItem);

var ReferencedRealWorldValueMap =
/*#__PURE__*/
function (_CompositeContentItem) {
  _inherits(ReferencedRealWorldValueMap, _CompositeContentItem);

  function ReferencedRealWorldValueMap(options) {
    _classCallCheck(this, ReferencedRealWorldValueMap);

    return _possibleConstructorReturn(this, _getPrototypeOf(ReferencedRealWorldValueMap).call(this, {
      name: new CodedConcept({
        value: "126100",
        meaning: "Real World Value Map used for measurement",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: option.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      relationshipType: RelationshipTypes.CONTAINS
    }));
  }

  return ReferencedRealWorldValueMap;
}(CompositeContentItem);

var FindingSite =
/*#__PURE__*/
function (_CodeContentItem) {
  _inherits(FindingSite, _CodeContentItem);

  function FindingSite(options) {
    var _this5;

    _classCallCheck(this, FindingSite);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(FindingSite).call(this, {
      name: new CodedConcept({
        value: "363698007",
        meaning: "Finding Site",
        schemeDesignator: "SCT"
      }),
      value: options.anatomicLocation,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    }));
    _this5.ContentSequence = new ContentSequence$1();

    if (options.laterality) {
      var item = new CodeContentItem({
        name: new CodedConcept({
          value: "272741003",
          meaning: "Laterality",
          schemeDesignator: "SCT"
        }),
        value: options.laterality,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });

      _this5.ContentSequence.push(item);
    }

    if (options.topographicalModifier) {
      var _item = new CodeContentItem({
        name: new CodedConcept({
          value: "106233006",
          meaning: "Topographical Modifier",
          schemeDesignator: "SCT"
        }),
        value: options.topographicalModifier,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });

      _this5.ContentSequence.push(_item);
    }

    return _this5;
  }

  return FindingSite;
}(CodeContentItem);

var ReferencedSegmentationFrame =
/*#__PURE__*/
function (_ContentSequence) {
  _inherits(ReferencedSegmentationFrame, _ContentSequence);

  function ReferencedSegmentationFrame(options) {
    var _this6;

    _classCallCheck(this, ReferencedSegmentationFrame);

    if (options.sopClassUID === undefined) {
      throw new Error("Option 'sopClassUID' is required for ReferencedSegmentationFrame.");
    }

    if (options.sopInstanceUID === undefined) {
      throw new Error("Option 'sopInstanceUID' is required for ReferencedSegmentationFrame.");
    }

    if (options.frameNumber === undefined) {
      throw new Error("Option 'frameNumber' is required for ReferencedSegmentationFrame.");
    }

    if (options.segmentNumber === undefined) {
      throw new Error("Option 'segmentNumber' is required for ReferencedSegmentationFrame.");
    }

    if (options.sourceImage === undefined) {
      throw new Error("Option 'sourceImage' is required for ReferencedSegmentationFrame.");
    }

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ReferencedSegmentationFrame).call(this));
    var segmentationItem = ImageContentItem({
      name: new CodedConcept({
        value: "121214",
        meaning: "Referenced Segmentation Frame",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUid: options.sopClassUid,
      referencedSOPInstanceUid: options.sopInstanceUid,
      referencedFrameNumber: options.frameNumber,
      referencedSegmentNumber: options.segmentNumber
    });

    _this6.push(segmentationItem);

    if (options.sourceImage.constructor !== SourceImageForSegmentation) {
      throw new Error("Option 'sourceImage' must have type SourceImageForSegmentation.");
    }

    _this6.push(sourceImage);

    return _this6;
  }

  return ReferencedSegmentationFrame;
}(ContentSequence$1);

var ReferencedSegmentation =
/*#__PURE__*/
function (_ContentSequence2) {
  _inherits(ReferencedSegmentation, _ContentSequence2);

  function ReferencedSegmentation(options) {
    var _this7;

    _classCallCheck(this, ReferencedSegmentation);

    if (options.sopClassUID === undefined) {
      throw new Error("Option 'sopClassUID' is required for ReferencedSegmentation.");
    }

    if (options.sopInstanceUID === undefined) {
      throw new Error("Option 'sopInstanceUID' is required for ReferencedSegmentation.");
    }

    if (options.frameNumbers === undefined) {
      throw new Error("Option 'frameNumbers' is required for ReferencedSegmentation.");
    }

    if (options.segmentNumber === undefined) {
      throw new Error("Option 'segmentNumber' is required for ReferencedSegmentation.");
    }

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ReferencedSegmentation).call(this));
    var segmentationItem = new ImageContentItem({
      name: new CodedConcept({
        value: "121191",
        meaning: "Referenced Segment",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUid: options.sopClassUid,
      referencedSOPInstanceUid: options.sopInstanceUid,
      referencedFrameNumber: options.frameNumbers,
      referencedSegmentNumber: options.segmentNumber
    });

    _this7.push(segmentationItem);

    if (options.sourceImages !== undefined) {
      options.sourceImages.forEach(function (image) {
        if (!image || image.constructor !== SourceImageForSegmentation) {
          throw new Error("Items of option 'sourceImages' must have type " + "SourceImageForSegmentation.");
        }

        _this7.push(image);
      });
    } else if (options.sourceSeries !== undefined) {
      if (options.sourceSeries.constructor !== SourceSeriesForSegmentation) {
        throw new Error("Option 'sourceSeries' must have type SourceSeriesForSegmentation.");
      }

      _this7.push(sourceSeries);
    } else {
      throw new Error("One of the following two options must be provided: " + "'sourceImages' or 'sourceSeries'.");
    }

    return _this7;
  }

  return ReferencedSegmentation;
}(ContentSequence$1);

var contentItems = /*#__PURE__*/Object.freeze({
	FindingSite: FindingSite,
	LongitudinalTemporalOffsetFromEvent: LongitudinalTemporalOffsetFromEvent,
	ReferencedRealWorldValueMap: ReferencedRealWorldValueMap,
	ImageRegion: ImageRegion,
	ImageRegion3D: ImageRegion3D,
	ReferencedSegmentation: ReferencedSegmentation,
	ReferencedSegmentationFrame: ReferencedSegmentationFrame,
	VolumeSurface: VolumeSurface,
	SourceImageForRegion: SourceImageForRegion,
	SourceImageForSegmentation: SourceImageForSegmentation,
	SourceSeriesForSegmentation: SourceSeriesForSegmentation
});

var Template =
/*#__PURE__*/
function (_ContentSequence) {
  _inherits(Template, _ContentSequence);

  function Template() {
    var _getPrototypeOf2;

    _classCallCheck(this, Template);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Template)).call.apply(_getPrototypeOf2, [this].concat(args)));
  }

  return Template;
}(ContentSequence$1);

var Measurement =
/*#__PURE__*/
function (_Template) {
  _inherits(Measurement, _Template);

  function Measurement(options) {
    var _valueItem$ContentSeq;

    var _this;

    _classCallCheck(this, Measurement);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Measurement).call(this));
    var valueItem = new NumContentItem({
      name: options.name,
      value: options.value,
      unit: options.unit,
      qualifier: options.qualifier,
      relationshipType: RelationshipTypes.CONTAINS
    });
    valueItem.ContentSequence = new ContentSequence$1();

    if (options.trackingIdentifier === undefined) {
      throw new Error("Option 'trackingIdentifier' is required for Measurement.");
    }

    if (options.trackingIdentifier.constructor === TrackingIdentifier) {
      throw new Error("Option 'trackingIdentifier' must have type TrackingIdentifier.");
    }

    (_valueItem$ContentSeq = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq, _toConsumableArray(options.trackingIdentifier));

    if (options.method !== undefined) {
      var methodItem = new CodeContentItem({
        name: new CodedConcept({
          value: "370129005",
          meaning: "Measurement Method",
          schemeDesignator: "SCT"
        }),
        value: options.method,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      valueItem.ContentSequence.push(methodItem);
    }

    if (options.derivation !== undefined) {
      var derivationItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121401",
          meaning: "Derivation",
          schemeDesignator: "DCM"
        }),
        value: options.derivation,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      valueItem.ContentSequence.push(derivationItem);
    }

    if (options.findingSites !== undefined) {
      if (!(_typeof(options.findingSites) === "object" || options.findingSites instanceof Array)) {
        throw new Error("Option 'findingSites' must have type Array.");
      }

      options.findingSites.forEach(function (site) {
        if (!site || site.constructor !== FindingSite) {
          throw new Error("Items of option 'findingSites' must have type FindingSite.");
        }

        valueItem.ContentSequence.push(site);
      });
    }

    if (options.properties !== undefined) {
      var _valueItem$ContentSeq2;

      if (options.properties.constructor !== MeasurementProperties) {
        throw new Error("Option 'properties' must have type MeasurementProperties.");
      }

      (_valueItem$ContentSeq2 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq2, _toConsumableArray(options.properties));
    }

    if (options.referencedRegions !== undefined) {
      if (!(_typeof(options.referencedRegions) === "object" || options.referencedRegions instanceof Array)) {
        throw new Error("Option 'referencedRegions' must have type Array.");
      }

      options.referencedRegions.forEach(function (region) {
        if (!region || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {
          throw new Error("Items of option 'referencedRegion' must have type " + "ImageRegion or ImageRegion3D.");
        }

        valueItem.ContentSequence.push(region);
      });
    } else if (options.referencedVolume !== undefined) {
      if (options.referencedVolume.constructor !== VolumeSurface) {
        throw new Error("Option 'referencedVolume' must have type VolumeSurface.");
      }

      valueItem.ContentSequence.push(options.referencedVolume);
    } else if (options.referencedSegmentation !== undefined) {
      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {
        throw new Error("Option 'referencedSegmentation' must have type " + "ReferencedSegmentation or ReferencedSegmentationFrame.");
      }

      valueItem.ContentSequence.push(options.referencedSegmentation);
    }

    if (options.referencedRealWorldValueMap !== undefined) {
      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {
        throw new Error("Option 'referencedRealWorldValueMap' must have type " + "ReferencedRealWorldValueMap.");
      }

      valueItem.ContentSequence.push(options.referencedRealWorldValueMap);
    }

    if (options.algorithmId !== undefined) {
      var _valueItem$ContentSeq3;

      if (options.algorithmId.constructor !== AlgorithmIdentification) {
        throw new Error("Option 'algorithmId' must have type AlgorithmIdentification.");
      }

      (_valueItem$ContentSeq3 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq3, _toConsumableArray(options.algorithmId));
    }

    _this.push(valueItem);

    return _this;
  }

  return Measurement;
}(Template);

var MeasurementProperties =
/*#__PURE__*/
function (_Template2) {
  _inherits(MeasurementProperties, _Template2);

  function MeasurementProperties(options) {
    var _this2;

    _classCallCheck(this, MeasurementProperties);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MeasurementProperties).call(this));

    if (options.normality !== undefined) {
      var normalityItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121402",
          schemeDesignator: "DCM",
          meaning: "Normality"
        }),
        value: options.normality,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this2.push(normalityItem);
    }

    if (options.measurementStatisticalProperties !== undefined) {
      var _this3;

      if (options.measurementStatisticalProperties.constructor !== MeasurementStatisticalProperties) {
        throw new Error("Option 'measurmentStatisticalProperties' must have type " + "MeasurementStatisticalProperties.");
      }

      (_this3 = _this2).push.apply(_this3, _toConsumableArray(measurementStatisticalProperties));
    }

    if (options.normalRangeProperties !== undefined) {
      var _this4;

      if (options.normalRangeProperties.constructor !== NormalRangeProperties) {
        throw new Error("Option 'normalRangeProperties' must have type NormalRangeProperties.");
      }

      (_this4 = _this2).push.apply(_this4, _toConsumableArray(normalRangeProperties));
    }

    if (options.levelOfSignificance !== undefined) {
      var levelOfSignificanceItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121403",
          schemeDesignator: "DCM",
          meaning: "Level of Significance"
        }),
        value: options.levelOfSignificance,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this2.push(levelOfSignificanceItem);
    }

    if (options.selectionStatus !== undefined) {
      var selectionStatusItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121404",
          schemeDesignator: "DCM",
          meaning: "Selection Status"
        }),
        value: options.selectionStatus,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this2.push(selectionStatusItem);
    }

    if (options.upperMeasurementUncertainty !== undefined) {
      var upperMeasurementUncertaintyItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00364",
          schemeDesignator: "SRT",
          meaning: "Range of Upper Measurement Uncertainty"
        }),
        value: options.upperMeasurementUncertainty,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this2.push(upperMeasurementUncertaintyItem);
    }

    if (options.lowerMeasurementUncertainty !== undefined) {
      var lowerMeasurementUncertaintyItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00362",
          schemeDesignator: "SRT",
          meaning: "Range of Lower Measurement Uncertainty"
        }),
        value: options.lowerMeasurementUncertainty,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this2.push(lowerMeasurementUncertaintyItem);
    }

    return _this2;
  }

  return MeasurementProperties;
}(Template);

var MeasurementStatisticalProperties =
/*#__PURE__*/
function (_Template3) {
  _inherits(MeasurementStatisticalProperties, _Template3);

  function MeasurementStatisticalProperties(options) {
    var _this5;

    _classCallCheck(this, MeasurementStatisticalProperties);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(MeasurementStatisticalProperties).call(this));

    if (options.values === undefined) {
      throw new Error("Option 'values' is required for MeasurementStatisticalProperties.");
    }

    if (!(_typeof(options.values) === "object" || options.values instanceof Array)) {
      throw new Error("Option 'values' must have type Array.");
    }

    options.values.forEach(function (value) {
      if (!options.concept || options.concept.constructor !== NumContentItem) {
        throw new Error("Items of option 'values' must have type NumContentItem.");
      }

      _this5.push(value);
    });

    if (options.description !== undefined) {
      var descriptionItem = new TextContentItem({
        name: new CodedConcept({
          value: "121405",
          schemeDesignator: "DCM",
          meaning: "Population Description"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this5.push(authorityItem);
    }

    if (options.authority !== undefined) {
      var _authorityItem = new TextContentItem({
        name: new CodedConcept({
          value: "121406",
          schemeDesignator: "DCM",
          meaning: "Population Authority"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this5.push(_authorityItem);
    }

    return _this5;
  }

  return MeasurementStatisticalProperties;
}(Template);

var NormalRangeProperties =
/*#__PURE__*/
function (_Template4) {
  _inherits(NormalRangeProperties, _Template4);

  function NormalRangeProperties(options) {
    var _this6;

    _classCallCheck(this, NormalRangeProperties);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(NormalRangeProperties).call(this));

    if (options.values === undefined) {
      throw new Error("Option 'values' is required for NormalRangeProperties.");
    }

    if (!(_typeof(options.values) === "object" || options.values instanceof Array)) {
      throw new Error("Option 'values' must have type Array.");
    }

    options.values.forEach(function (value) {
      if (!options.concept || options.concept.constructor !== NumContentItem) {
        throw new Error("Items of option 'values' must have type NumContentItem.");
      }

      _this6.push(value);
    });

    if (options.description !== undefined) {
      var descriptionItem = new TextContentItem({
        name: new CodedConcept({
          value: "121407",
          schemeDesignator: "DCM",
          meaning: "Normal Range Description"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this6.push(authorityItem);
    }

    if (options.authority !== undefined) {
      var _authorityItem2 = new TextContentItem({
        name: new CodedConcept({
          value: "121408",
          schemeDesignator: "DCM",
          meaning: "Normal Range Authority"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });

      _this6.push(_authorityItem2);
    }

    return _this6;
  }

  return NormalRangeProperties;
}(Template);

var ObservationContext =
/*#__PURE__*/
function (_Template5) {
  _inherits(ObservationContext, _Template5);

  function ObservationContext(options) {
    var _this8;

    var _this7;

    _classCallCheck(this, ObservationContext);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ObservationContext).call(this));

    if (options.observerPersonContext === undefined) {
      throw new Error("Option 'observerPersonContext' is required for ObservationContext.");
    }

    if (options.observerPersonContext.constructor !== ObserverContext) {
      throw new Error("Option 'observerPersonContext' must have type ObserverContext");
    }

    (_this8 = _this7).push.apply(_this8, _toConsumableArray(options.observerPersonContext));

    if (options.observerDeviceContext !== undefined) {
      var _this9;

      if (options.observerDeviceContext.constructor !== ObserverContext) {
        throw new Error("Option 'observerDeviceContext' must have type ObserverContext");
      }

      (_this9 = _this7).push.apply(_this9, _toConsumableArray(options.observerDeviceContext));
    }

    if (options.subjectContext !== undefined) {
      var _this10;

      if (options.subjectContext.constructor !== SubjectContext) {
        throw new Error("Option 'subjectContext' must have type SubjectContext");
      }

      (_this10 = _this7).push.apply(_this10, _toConsumableArray(options.subjectContext));
    }

    return _this7;
  }

  return ObservationContext;
}(Template);

var ObserverContext =
/*#__PURE__*/
function (_Template6) {
  _inherits(ObserverContext, _Template6);

  function ObserverContext(options) {
    var _this12;

    var _this11;

    _classCallCheck(this, ObserverContext);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(ObserverContext).call(this));

    if (options.observerType === undefined) {
      throw new Error("Option 'observerType' is required for ObserverContext.");
    } else {
      if (options.observerType.constructor !== Code && options.observerType.constructor !== CodedConcept) {
        throw new Error("Option 'observerType' must have type Code or CodedConcept.");
      }
    }

    var observerTypeItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121005",
        meaning: "Observer Type",
        schemeDesignator: "DCM"
      }),
      value: options.observerType,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this11.push(observerTypeItem);

    if (options.observerIdentifyingAttributes === undefined) {
      throw new Error("Option 'observerIdentifyingAttributes' is required for ObserverContext.");
    } // FIXME


    var person = new CodedConcept({
      value: "121006",
      schemeDesignator: "DCM",
      meaning: "Person"
    });
    var device = new CodedConcept({
      value: "121007",
      schemeDesignator: "DCM",
      meaning: "Device"
    });

    if (person.equals(options.observerType)) {
      if (options.observerIdentifyingAttributes.constructor !== PersonObserverIdentifyingAttributes) {
        throw new Error("Option 'observerIdentifyingAttributes' must have type " + "PersonObserverIdentifyingAttributes for 'Person' observer type.");
      }
    } else if (device.equals(options.observerType)) {
      if (options.observerIdentifyingAttributes.constructor !== DeviceObserverIdentifyingAttributes) {
        throw new Error("Option 'observerIdentifyingAttributes' must have type " + "DeviceObserverIdentifyingAttributes for 'Device' observer type.");
      }
    } else {
      throw new Error("Option 'oberverType' must be either 'Person' or 'Device'.");
    }

    (_this12 = _this11).push.apply(_this12, _toConsumableArray(options.observerIdentifyingAttributes));

    return _this11;
  }

  return ObserverContext;
}(Template);

var PersonObserverIdentifyingAttributes =
/*#__PURE__*/
function (_Template7) {
  _inherits(PersonObserverIdentifyingAttributes, _Template7);

  function PersonObserverIdentifyingAttributes(options) {
    var _this13;

    _classCallCheck(this, PersonObserverIdentifyingAttributes);

    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(PersonObserverIdentifyingAttributes).call(this));

    if (options.name === undefined) {
      throw new Error("Option 'name' is required for PersonObserverIdentifyingAttributes.");
    }

    var nameItem = new PNameContentItem({
      name: new CodedConcept({
        value: "121008",
        meaning: "Person Observer Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this13.push(nameItem);

    if (options.loginName !== undefined) {
      var loginNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "128774",
          meaning: "Person Observer's Login Name",
          schemeDesignator: "DCM"
        }),
        value: options.loginName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this13.push(loginNameItem);
    }

    if (options.organizationName !== undefined) {
      var organizationNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121009",
          meaning: "Person Observer's Organization Name",
          schemeDesignator: "DCM"
        }),
        value: options.organizationName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this13.push(organizationNameItem);
    }

    if (options.roleInOrganization !== undefined) {
      var roleInOrganizationItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121010",
          meaning: "Person Observer's Role in the Organization",
          schemeDesignator: "DCM"
        }),
        value: options.roleInOrganization,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this13.push(roleInOrganizationItem);
    }

    if (options.roleInProcedure !== undefined) {
      var roleInProcedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121011",
          meaning: "Person Observer's Role in this Procedure",
          schemeDesignator: "DCM"
        }),
        value: options.roleInProcedure,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this13.push(roleInProcedureItem);
    }

    return _this13;
  }

  return PersonObserverIdentifyingAttributes;
}(Template);

var DeviceObserverIdentifyingAttributes =
/*#__PURE__*/
function (_Template8) {
  _inherits(DeviceObserverIdentifyingAttributes, _Template8);

  function DeviceObserverIdentifyingAttributes(options) {
    var _this14;

    _classCallCheck(this, DeviceObserverIdentifyingAttributes);

    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(DeviceObserverIdentifyingAttributes).call(this));

    if (options.uid === undefined) {
      throw new Error("Option 'uid' is required for DeviceObserverIdentifyingAttributes.");
    }

    var deviceObserverItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "121012",
        meaning: "Device Observer UID",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this14.push(deviceObserverItem);

    if (options.manufacturerName !== undefined) {
      var manufacturerNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121013",
          meaning: "Device Observer Manufacturer",
          schemeDesignator: "DCM"
        }),
        value: options.manufacturerName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this14.push(manufacturerNameItem);
    }

    if (options.modelName !== undefined) {
      var modelNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121015",
          meaning: "Device Observer Model Name",
          schemeDesignator: "DCM"
        }),
        value: options.modelName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this14.push(modelNameItem);
    }

    if (options.serialNumber !== undefined) {
      var serialNumberItem = new TextContentItem({
        name: new CodedConcept({
          value: "121016",
          meaning: "Device Observer Serial Number",
          schemeDesignator: "DCM"
        }),
        value: options.serialNumber,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this14.push(serialNumberItem);
    }

    if (options.physicalLocation !== undefined) {
      var physicalLocationItem = new TextContentItem({
        name: new CodedConcept({
          value: "121017",
          meaning: "Device Observer Physical Location During Observation",
          schemeDesignator: "DCM"
        }),
        value: options.physicalLocation,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this14.push(physicalLocationItem);
    }

    if (options.roleInProcedure !== undefined) {
      var roleInProcedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "113876",
          meaning: "Device Role in Procedure",
          schemeDesignator: "DCM"
        }),
        value: options.roleInProcedure,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this14.push(roleInProcedureItem);
    }

    return _this14;
  }

  return DeviceObserverIdentifyingAttributes;
}(Template);

var SubjectContext =
/*#__PURE__*/
function (_Template9) {
  _inherits(SubjectContext, _Template9);

  function SubjectContext(options) {
    var _this16;

    var _this15;

    _classCallCheck(this, SubjectContext);

    _this15 = _possibleConstructorReturn(this, _getPrototypeOf(SubjectContext).call(this));

    if (options.subjectClass === undefined) {
      throw new Error("Option 'subjectClass' is required for SubjectContext.");
    }

    if (options.subjectClassSpecificContext === undefined) {
      throw new Error("Option 'subjectClassSpecificContext' is required for SubjectContext.");
    }

    var subjectClassItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121024",
        meaning: "Subject Class",
        schemeDesignator: "DCM"
      }),
      value: options.subjectClass,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this15.push(subjectClassItem);

    var fetus = new CodedConcept({
      value: "121026 ",
      schemeDesignator: "DCM",
      meaning: "Fetus"
    });
    var specimen = new CodedConcept({
      value: "121027",
      schemeDesignator: "DCM",
      meaning: "Specimen"
    });
    var device = new CodedConcept({
      value: "121192",
      schemeDesignator: "DCM",
      meaning: "Device Subject"
    });

    if (fetus.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextFetus) {
        throw new Error("Option 'subjectClass' must have type " + "SubjectContextFetus for 'Fetus' subject class.");
      }
    } else if (specimen.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextSpecimen) {
        throw new Error("Option 'subjectClass' must have type " + "SubjectContextSpecimen for 'Specimen' subject class.");
      }
    } else if (device.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextDevice) {
        throw new Error("Option 'subjectClass' must have type " + "SubjectContextDevice for 'Device' subject class.");
      }
    } else {
      throw new Error("Option 'subjectClass' must be either 'Fetus', 'Specimen', or 'Device'.");
    }

    (_this16 = _this15).push.apply(_this16, _toConsumableArray(options.subjectClassSpecificContext));

    return _this15;
  }

  return SubjectContext;
}(Template);

var SubjectContextFetus =
/*#__PURE__*/
function (_Template10) {
  _inherits(SubjectContextFetus, _Template10);

  function SubjectContextFetus(options) {
    var _this17;

    _classCallCheck(this, SubjectContextFetus);

    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(SubjectContextFetus).call(this));

    if (options.subjectID === undefined) {
      throw new Error("Option 'subjectID' is required for SubjectContextFetus.");
    }

    var subjectIdItem = new TextContentItem({
      name: new CodedConcept({
        value: "121030",
        meaning: "Subject ID",
        schemeDesignator: "DCM"
      }),
      value: options.subjectID,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this17.push(subjectIdItem);

    return _this17;
  }

  return SubjectContextFetus;
}(Template);

var SubjectContextSpecimen =
/*#__PURE__*/
function (_Template11) {
  _inherits(SubjectContextSpecimen, _Template11);

  function SubjectContextSpecimen(options) {
    var _this18;

    _classCallCheck(this, SubjectContextSpecimen);

    _this18 = _possibleConstructorReturn(this, _getPrototypeOf(SubjectContextSpecimen).call(this));

    if (options.uid === undefined) {
      throw new Error("Option 'uid' is required for SubjectContextSpecimen.");
    }

    var specimenUidItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "121039",
        meaning: "Specimen UID",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this18.push(specimenUidItem);

    if (options.identifier !== undefined) {
      var specimenIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "121041",
          meaning: "Specimen Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.identifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this18.push(specimenIdentifierItem);
    }

    if (options.containerIdentifier !== undefined) {
      var containerIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "111700",
          meaning: "Specimen Container Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.containerIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this18.push(containerIdentifierItem);
    }

    if (options.specimenType !== undefined) {
      var specimenTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00254",
          meaning: "Specimen Type",
          schemeDesignator: "DCM"
        }),
        value: options.specimenType,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this18.push(specimenTypeItem);
    }

    return _this18;
  }

  return SubjectContextSpecimen;
}(Template);

var SubjectContextDevice =
/*#__PURE__*/
function (_Template12) {
  _inherits(SubjectContextDevice, _Template12);

  function SubjectContextDevice(options) {
    var _this19;

    _classCallCheck(this, SubjectContextDevice);

    if (options.name === undefined) {
      throw new Error("Option 'name' is required for SubjectContextDevice.");
    }

    var deviceNameItem = new TextContentItem({
      name: new CodedConcept({
        value: "121193",
        meaning: "Device Subject Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this19.push(deviceNameItem);

    if (options.uid !== undefined) {
      var deviceUidItem = new UIDRefContentItem({
        name: new CodedConcept({
          value: "121198",
          meaning: "Device Subject UID",
          schemeDesignator: "DCM"
        }),
        value: options.uid,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this19.push(deviceUidItem);
    }

    if (options.manufacturerName !== undefined) {
      var manufacturerNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121194",
          meaning: "Device Subject Manufacturer",
          schemeDesignator: "DCM"
        }),
        value: options.manufacturerName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this19.push(manufacturerNameItem);
    }

    if (options.modelName !== undefined) {
      var modelNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121195",
          meaning: "Device Subject Model Name",
          schemeDesignator: "DCM"
        }),
        value: options.modelName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this19.push(modelNameItem);
    }

    if (options.serialNumber !== undefined) {
      var serialNumberItem = new TextContentItem({
        name: new CodedConcept({
          value: "121196",
          meaning: "Device Subject Serial Number",
          schemeDesignator: "DCM"
        }),
        value: options.serialNumber,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this19.push(serialNumberItem);
    }

    if (options.physicalLocation !== undefined) {
      var physicalLocationItem = new TextContentItem({
        name: new CodedConcept({
          value: "121197",
          meaning: "Device Subject Physical Location During Observation",
          schemeDesignator: "DCM"
        }),
        value: options.physicalLocation,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this19.push(physicalLocationItem);
    }

    return _possibleConstructorReturn(_this19);
  }

  return SubjectContextDevice;
}(Template);

var LanguageOfContentItemAndDescendants =
/*#__PURE__*/
function (_Template13) {
  _inherits(LanguageOfContentItemAndDescendants, _Template13);

  function LanguageOfContentItemAndDescendants(options) {
    var _this20;

    _classCallCheck(this, LanguageOfContentItemAndDescendants);

    _this20 = _possibleConstructorReturn(this, _getPrototypeOf(LanguageOfContentItemAndDescendants).call(this));

    if (options.language === undefined) {
      options.language = new CodedConcept({
        value: "en-US",
        schemeDesignator: "RFC5646",
        meaning: "English (United States)"
      });
    }

    var languageItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121049",
        meaning: "Language of Content Item and Descendants",
        schemeDesignator: "DCM"
      }),
      value: options.language,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });

    _this20.push(languageItem);

    return _this20;
  }

  return LanguageOfContentItemAndDescendants;
}(Template);

var _MeasurementsAndQualitatitiveEvaluations =
/*#__PURE__*/
function (_Template14) {
  _inherits(_MeasurementsAndQualitatitiveEvaluations, _Template14);

  function _MeasurementsAndQualitatitiveEvaluations(options) {
    var _groupItem$ContentSeq;

    var _this21;

    _classCallCheck(this, _MeasurementsAndQualitatitiveEvaluations);

    _this21 = _possibleConstructorReturn(this, _getPrototypeOf(_MeasurementsAndQualitatitiveEvaluations).call(this));
    var groupItem = new ContainerContentItem({
      name: new CodedConcept({
        value: "125007",
        meaning: "Measurement Group",
        schemeDesignator: "DCM"
      }),
      relationshipType: RelationshipTypes.CONTAINS
    });
    groupItem.ContentSequence = new ContentSequence$1();

    if (options.trackingIdentifier === undefined) {
      throw new Error("Option 'trackingIdentifier' is required for measurements group.");
    }

    if (options.trackingIdentifier.constructor !== TrackingIdentifier) {
      throw new Error("Option 'trackingIdentifier' must have type TrackingIdentifier.");
    }

    if (options.trackingIdentifier.length !== 2) {
      throw new Error("Option 'trackingIdentifier' must include a human readable tracking " + "identifier and a tracking unique identifier.");
    }

    (_groupItem$ContentSeq = groupItem.ContentSequence).push.apply(_groupItem$ContentSeq, _toConsumableArray(options.trackingIdentifier));

    if (options.session !== undefined) {
      var sessionItem = new TextContentItem({
        name: new CodedConcept({
          value: "C67447",
          meaning: "Activity Session",
          schemeDesignator: "NCIt"
        }),
        value: options.session,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      groupItem.ContentSequence.push(sessionItem);
    }

    if (options.findingType !== undefined) {
      var findingTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121071",
          meaning: "Finding",
          schemeDesignator: "DCM"
        }),
        value: options.findingType,
        relationshipType: RelationshipTypes.CONTAINS
      });
      groupItem.ContentSequence.push(findingTypeItem);
    }

    if (options.timePointContext !== undefined) {
      var _groupItem$ContentSeq2;

      if (options.timePointContext.constructor !== TimePointContext) {
        throw new Error("Option 'timePointContext' must have type TimePointContext.");
      }

      (_groupItem$ContentSeq2 = groupItem.ContentSequence).push.apply(_groupItem$ContentSeq2, _toConsumableArray(timePointContext));
    }

    if (options.referencedRealWorldValueMap !== undefined) {
      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {
        throw new Error("Option 'referencedRealWorldValleMap' must have type " + "ReferencedRealWorldValueMap.");
      }

      groupItem.ContentSequence.push(options.referencedRealWorldValueMap);
    }

    if (options.measurements !== undefined) {
      if (!(_typeof(options.measurements) === "object" || options.measurements instanceof Array)) {
        throw new Error("Option 'measurements' must have type Array.");
      }

      options.measurements.forEach(function (measurement) {
        console.log(measurement);

        if (!measurement || measurement.constructor !== NumContentItem) {
          throw new Error("Items of option 'measurement' must have type NumContentItem.");
        }

        groupItem.ContentSequence.push(measurement);
      });
    }

    if (options.qualitativeEvaluations !== undefined) {
      if (!(_typeof(options.qualitativeEvaluations) === "object" || options.qualitativeEvaluations instanceof Array)) {
        throw new Error("Option 'qualitativeEvaluations' must have type Array.");
      }

      options.qualitativeEvaluations.forEach(function (evaluation) {
        if (!evaluation || evaluation.constructor !== CodeContentItem) {
          throw new Error("Items of option 'qualitativeEvaluations' must have type " + "CodeContentItem.");
        }

        groupItem.ContentSequence.push(evaluation);
      });
    }

    _this21.push(groupItem);

    return _this21;
  }

  return _MeasurementsAndQualitatitiveEvaluations;
}(Template);

var _ROIMeasurementsAndQualitativeEvaluations =
/*#__PURE__*/
function (_MeasurementsAndQuali) {
  _inherits(_ROIMeasurementsAndQualitativeEvaluations, _MeasurementsAndQuali);

  function _ROIMeasurementsAndQualitativeEvaluations(options) {
    var _this22;

    _classCallCheck(this, _ROIMeasurementsAndQualitativeEvaluations);

    _this22 = _possibleConstructorReturn(this, _getPrototypeOf(_ROIMeasurementsAndQualitativeEvaluations).call(this, {
      trackingIdentifier: options.trackingIdentifier,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    }));
    var groupItem = _this22[0];
    var wereReferencesProvided = [options.referencedRegions !== undefined, options.referencedVolume !== undefined, options.referencedSegmentation !== undefined];
    var numReferences = wereReferencesProvided.reduce(function (a, b) {
      return a + b;
    });

    if (numReferences === 0) {
      throw new Error("One of the following options must be provided: " + "'referencedRegions', 'referencedVolume', or " + "'referencedSegmentation'.");
    } else if (numReferences > 1) {
      throw new Error("Only one of the following options should be provided: " + "'referencedRegions', 'referencedVolume', or " + "'referencedSegmentation'.");
    }

    if (options.referencedRegions !== undefined) {
      if (!(_typeof(options.referencedRegions) === "object" || options.referencedRegions instanceof Array)) {
        throw new Error("Option 'referencedRegions' must have type Array.");
      }

      if (options.referencedRegions.length === 0) {
        throw new Error("Option 'referencedRegion' must have non-zero length.");
      }

      options.referencedRegions.forEach(function (region) {
        if (region === undefined || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {
          throw new Error("Items of option 'referencedRegion' must have type " + "ImageRegion or ImageRegion3D.");
        }

        groupItem.ContentSequence.push(region);
      });
    } else if (options.referencedVolume !== undefined) {
      if (options.referencedVolume.constructor !== VolumeSurface) {
        throw new Error("Items of option 'referencedVolume' must have type VolumeSurface.");
      }

      groupItem.ContentSequence.push(referencedVolume);
    } else if (options.referencedSegmentation !== undefined) {
      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {
        throw new Error("Option 'referencedSegmentation' must have type " + "ReferencedSegmentation or ReferencedSegmentationFrame.");
      }

      groupItem.ContentSequence.push(referencedSegmentation);
    }

    _this22[0] = groupItem;
    return _this22;
  }

  return _ROIMeasurementsAndQualitativeEvaluations;
}(_MeasurementsAndQualitatitiveEvaluations);

var PlanarROIMeasurementsAndQualitativeEvaluations =
/*#__PURE__*/
function (_ROIMeasurementsAndQu) {
  _inherits(PlanarROIMeasurementsAndQualitativeEvaluations, _ROIMeasurementsAndQu);

  function PlanarROIMeasurementsAndQualitativeEvaluations(options) {
    _classCallCheck(this, PlanarROIMeasurementsAndQualitativeEvaluations);

    var wereReferencesProvided = [options.referencedRegion !== undefined, options.referencedSegmentation !== undefined];
    var numReferences = wereReferencesProvided.reduce(function (a, b) {
      return a + b;
    });

    if (numReferences === 0) {
      throw new Error("One of the following options must be provided: " + "'referencedRegion', 'referencedSegmentation'.");
    } else if (numReferences > 1) {
      throw new Error("Only one of the following options should be provided: " + "'referencedRegion', 'referencedSegmentation'.");
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(PlanarROIMeasurementsAndQualitativeEvaluations).call(this, {
      trackingIdentifier: options.trackingIdentifier,
      referencedRegions: [options.referencedRegion],
      referencedSegmentation: options.referencedSegmentation,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    }));
  }

  return PlanarROIMeasurementsAndQualitativeEvaluations;
}(_ROIMeasurementsAndQualitativeEvaluations);

var VolumetricROIMeasurementsAndQualitativeEvaluations =
/*#__PURE__*/
function (_ROIMeasurementsAndQu2) {
  _inherits(VolumetricROIMeasurementsAndQualitativeEvaluations, _ROIMeasurementsAndQu2);

  function VolumetricROIMeasurementsAndQualitativeEvaluations(options) {
    _classCallCheck(this, VolumetricROIMeasurementsAndQualitativeEvaluations);

    return _possibleConstructorReturn(this, _getPrototypeOf(VolumetricROIMeasurementsAndQualitativeEvaluations).call(this, {
      trackingIdentifier: options.trackingIdentifier,
      referencedRegions: options.referencedRegions,
      referencedSegmentation: options.referencedSegmentation,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    }));
  }

  return VolumetricROIMeasurementsAndQualitativeEvaluations;
}(_ROIMeasurementsAndQualitativeEvaluations);

var MeasurementsDerivedFromMultipleROIMeasurements =
/*#__PURE__*/
function (_Template15) {
  _inherits(MeasurementsDerivedFromMultipleROIMeasurements, _Template15);

  function MeasurementsDerivedFromMultipleROIMeasurements(options) {
    var _this23;

    _classCallCheck(this, MeasurementsDerivedFromMultipleROIMeasurements);

    if (options.derivation === undefined) {
      throw new Error("Option 'derivation' is required for " + "MeasurementsDerivedFromMultipleROIMeasurements.");
    } // FIXME


    var valueItem = new NumContentItem({
      name: options.derivation
    });
    valueItem.ContentSequence = new ContentSequence$1();

    if (options.measurementGroups === undefined) {
      throw new Error("Option 'measurementGroups' is required for " + "MeasurementsDerivedFromMultipleROIMeasurements.");
    }

    if (!(_typeof(options.measurementGroups) === "object" || options.measurementGroups instanceof Array)) {
      throw new Error("Option 'measurementGroups' must have type Array.");
    }

    options.measurementGroups.forEach(function (group) {
      var _valueItem$ContentSeq4;

      if (!group || group.constructor !== PlanarROIMeasurementsAndQualitativeEvaluations && group.constructor !== VolumetricROIMeasurementsAndQualitativeEvaluations) {
        throw new Error("Items of option 'measurementGroups' must have type " + "PlanarROIMeasurementsAndQualitativeEvaluations or " + "VolumetricROIMeasurementsAndQualitativeEvaluations.");
      }

      group[0].RelationshipType = "R-INFERRED FROM";

      (_valueItem$ContentSeq4 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq4, _toConsumableArray(group));
    });

    if (options.measurementProperties !== undefined) {
      var _valueItem$ContentSeq5;

      if (options.measurementProperties.constructor !== MeasurementProperties) {
        throw new Error("Option 'measurementProperties' must have type MeasurementProperties.");
      }

      (_valueItem$ContentSeq5 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq5, _toConsumableArray(options.measurementProperties));
    }

    _this23.push(valueItem);

    return _possibleConstructorReturn(_this23);
  }

  return MeasurementsDerivedFromMultipleROIMeasurements;
}(Template);

var MeasurementAndQualitativeEvaluationGroup =
/*#__PURE__*/
function (_MeasurementsAndQuali2) {
  _inherits(MeasurementAndQualitativeEvaluationGroup, _MeasurementsAndQuali2);

  function MeasurementAndQualitativeEvaluationGroup(options) {
    _classCallCheck(this, MeasurementAndQualitativeEvaluationGroup);

    return _possibleConstructorReturn(this, _getPrototypeOf(MeasurementAndQualitativeEvaluationGroup).call(this, {
      trackingIdentifier: options.trackingIdentifier,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    }));
  }

  return MeasurementAndQualitativeEvaluationGroup;
}(_MeasurementsAndQualitatitiveEvaluations);

var ROIMeasurements =
/*#__PURE__*/
function (_Template16) {
  _inherits(ROIMeasurements, _Template16);

  function ROIMeasurements(options) {
    var _this24;

    _classCallCheck(this, ROIMeasurements);

    _this24 = _possibleConstructorReturn(this, _getPrototypeOf(ROIMeasurements).call(this));

    if (options.method !== undefined) {
      var methodItem = new CodeContentItem({
        name: new CodedConcept({
          value: "370129005",
          meaning: "Measurement Method",
          schemeDesignator: "SCT"
        }),
        value: options.method,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });

      _this24.push(methodItem);
    }

    if (options.findingSites !== undefined) {
      if (!(_typeof(options.findingSites) === "object" || options.findingSites instanceof Array)) {
        throw new Error("Option 'findingSites' must have type Array.");
      }

      options.findingSites.forEach(function (site) {
        if (!site || site.constructor !== FindingSite) {
          throw new Error("Items of option 'findingSites' must have type FindingSite.");
        }

        _this24.push(site);
      });
    }

    if (options.measurements === undefined) {
      throw new Error("Options 'measurements' is required ROIMeasurements.");
    }

    if (!(_typeof(options.measurements) === "object" || options.measurements instanceof Array)) {
      throw new Error("Option 'measurements' must have type Array.");
    }

    if (options.measurements.length === 0) {
      throw new Error("Option 'measurements' must have non-zero length.");
    }

    options.measurements.forEach(function (measurement) {
      if (!measurement || measurement.constructor !== Measurement) {
        throw new Error("Items of option 'measurements' must have type Measurement.");
      }

      _this24.push(measurement);
    });
    return _this24;
  }

  return ROIMeasurements;
}(Template);

var MeasurementReport$2 =
/*#__PURE__*/
function (_Template17) {
  _inherits(MeasurementReport, _Template17);

  function MeasurementReport(options) {
    var _item$ContentSequence, _item$ContentSequence2, _item$ContentSequence3;

    var _this25;

    _classCallCheck(this, MeasurementReport);

    _this25 = _possibleConstructorReturn(this, _getPrototypeOf(MeasurementReport).call(this));

    if (options.observationContext === undefined) {
      throw new Error("Option 'observationContext' is required for MeasurementReport.");
    }

    if (options.procedureReported === undefined) {
      throw new Error("Option 'procedureReported' is required for MeasurementReport.");
    }

    var item = new ContainerContentItem({
      name: new CodedConcept({
        value: "126000",
        schemeDesignator: "DCM",
        meaning: "Imaging Measurement Report"
      }),
      templateID: "1500"
    });
    item.ContentSequence = new ContentSequence$1();

    if (options.languageOfContentItemAndDescendants === undefined) {
      throw new Error("Option 'languageOfContentItemAndDescendants' is required for " + "MeasurementReport.");
    }

    if (options.languageOfContentItemAndDescendants.constructor !== LanguageOfContentItemAndDescendants) {
      throw new Error("Option 'languageOfContentItemAndDescendants' must have type " + "LanguageOfContentItemAndDescendants.");
    }

    (_item$ContentSequence = item.ContentSequence).push.apply(_item$ContentSequence, _toConsumableArray(options.languageOfContentItemAndDescendants));

    (_item$ContentSequence2 = item.ContentSequence).push.apply(_item$ContentSequence2, _toConsumableArray(options.observationContext));

    if (options.procedureReported.constructor === CodedConcept || options.procedureReported.constructor === Code) {
      options.procedureReported = [options.procedureReported];
    }

    if (!(_typeof(options.procedureReported) === "object" || options.procedureReported instanceof Array)) {
      throw new Error("Option 'procedureReported' must have type Array.");
    }

    options.procedureReported.forEach(function (procedure) {
      var procedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121058",
          meaning: "Procedure reported",
          schemeDesignator: "DCM"
        }),
        value: procedure,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      item.ContentSequence.push(procedureItem);
    });
    var imageLibraryItem = new ImageLibrary();

    (_item$ContentSequence3 = item.ContentSequence).push.apply(_item$ContentSequence3, _toConsumableArray(imageLibraryItem));

    var wereOptionsProvided = [options.imagingMeasurements !== undefined, options.derivedImagingMeasurements !== undefined, options.qualitativeEvaluations !== undefined];
    var numOptionsProvided = wereOptionsProvided.reduce(function (a, b) {
      return a + b;
    });

    if (numOptionsProvided > 1) {
      throw new Error("Only one of the following options should be provided: " + "'imagingMeasurements', 'derivedImagingMeasurement', " + "'qualitativeEvaluations'.");
    }

    if (options.imagingMeasurements !== undefined) {
      var containerItem = new ContainerContentItem({
        name: new CodedConcept({
          value: "126010",
          meaning: "Imaging Measurements",
          schemeDesignator: "DCM"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });
      containerItem.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.imagingMeasurements));
      item.ContentSequence.push(containerItem);
    } else if (options.derivedImagingMeasurements !== undefined) {
      var _containerItem = new ContainerContentItem({
        name: new CodedConcept({
          value: "126011",
          meaning: "Derived Imaging Measurements",
          schemeDesignator: "DCM"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });

      _containerItem.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.derivedImagingMeasurements));
      item.ContentSequence.push(_containerItem);
    } else if (options.qualitativeEvaluations !== undefined) {
      var _containerItem2 = new ContainerContentItem({
        name: new CodedConcept({
          value: "C0034375",
          meaning: "Qualitative Evaluations",
          schemeDesignator: "UMLS"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });

      _containerItem2.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.qualitativeEvaluations));
      item.ContentSequence.push(_containerItem2);
    }

    _this25.push(item);

    return _this25;
  }

  return MeasurementReport;
}(Template);

var TimePointContext =
/*#__PURE__*/
function (_Template18) {
  _inherits(TimePointContext, _Template18);

  function TimePointContext(options) {
    var _this26;

    _classCallCheck(this, TimePointContext);

    if (options.timePoint === undefined) {
      throw new Error("Option 'timePoint' is required for TimePointContext.");
    }

    var timePointItem = new TextContentItem({
      name: new CodedConcept({
        value: "C2348792",
        meaning: "Time Point",
        schemeDesignator: "UMLS"
      }),
      value: options.timePoint,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this26.push(timePointItem);

    if (options.timePointType !== undefined) {
      var timePointTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "126072",
          meaning: "Time Point Type",
          schemeDesignator: "DCM"
        }),
        value: options.timePointType,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this26.push(timePointTypeItem);
    }

    if (options.timePointOrder !== undefined) {
      var timePointOrderItem = new NumContentItem({
        name: new CodedConcept({
          value: "126073",
          meaning: "Time Point Order",
          schemeDesignator: "DCM"
        }),
        value: options.timePointOrder,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this26.push(timePointOrderItem);
    }

    if (options.subjectTimePointIdentifier !== undefined) {
      var subjectTimePointIdentifierItem = new NumContentItem({
        name: new CodedConcept({
          value: "126070",
          meaning: "Subject Time Point Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.subjectTimePointIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this26.push(subjectTimePointIdentifierItem);
    }

    if (options.protocolTimePointIdentifier !== undefined) {
      var protocolTimePointIdentifierItem = new NumContentItem({
        name: new CodedConcept({
          value: "126071",
          meaning: "Protocol Time Point Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.protocolTimePointIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this26.push(protocolTimePointIdentifierItem);
    }

    if (options.temporalOffsetFromEvent !== undefined) {
      if (options.temporalOffsetFromEvent.constructor !== LongitudinalTemporalOffsetFromEventContentItem) {
        throw new Error("Option 'temporalOffsetFromEvent' must have type " + "LongitudinalTemporalOffsetFromEventContentItem.");
      }

      _this26.push(temporalOffsetFromEvent);
    }

    return _possibleConstructorReturn(_this26);
  }

  return TimePointContext;
}(Template);

var ImageLibrary =
/*#__PURE__*/
function (_Template19) {
  _inherits(ImageLibrary, _Template19);

  function ImageLibrary(options) {
    var _this27;

    _classCallCheck(this, ImageLibrary);

    _this27 = _possibleConstructorReturn(this, _getPrototypeOf(ImageLibrary).call(this));
    var libraryItem = new ContainerContentItem({
      name: new CodedConcept({
        value: "111028",
        meaning: "Image Library",
        schemeDesignator: "DCM"
      }),
      relationshipType: RelationshipTypes.CONTAINS
    });

    _this27.push(libraryItem);

    return _this27;
  }

  return ImageLibrary;
}(Template);

var AlgorithmIdentification =
/*#__PURE__*/
function (_Template20) {
  _inherits(AlgorithmIdentification, _Template20);

  function AlgorithmIdentification(options) {
    var _this28;

    _classCallCheck(this, AlgorithmIdentification);

    _this28 = _possibleConstructorReturn(this, _getPrototypeOf(AlgorithmIdentification).call(this));

    if (options.name === undefined) {
      throw new Error("Option 'name' is required for AlgorithmIdentification.");
    }

    if (options.version === undefined) {
      throw new Error("Option 'version' is required for AlgorithmIdentification.");
    }

    var nameItem = new TextContentItem({
      name: new CodedConcept({
        value: "111001",
        meaning: "Algorithm Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });

    _this28.push(nameItem);

    var versionItem = new TextContentItem({
      name: new CodedConcept({
        value: "111003",
        meaning: "Algorithm Version",
        schemeDesignator: "DCM"
      }),
      value: options.version,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });

    _this28.push(versionItem);

    if (options.parameters !== undefined) {
      if (!(_typeof(options.parameters) === "object" || options.parameters instanceof Array)) {
        throw new Error("Option 'parameters' must have type Array.");
      }

      options.parameters.forEach(function (parameter) {
        var parameterItem = new TextContentItem({
          name: new CodedConcept({
            value: "111002",
            meaning: "Algorithm Parameter",
            schemeDesignator: "DCM"
          }),
          value: param,
          relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
        });

        _this28.push(parameterItem);
      });
    }

    return _this28;
  }

  return AlgorithmIdentification;
}(Template);

var TrackingIdentifier =
/*#__PURE__*/
function (_Template21) {
  _inherits(TrackingIdentifier, _Template21);

  function TrackingIdentifier(options) {
    var _this29;

    _classCallCheck(this, TrackingIdentifier);

    _this29 = _possibleConstructorReturn(this, _getPrototypeOf(TrackingIdentifier).call(this));

    if (options.uid === undefined) {
      throw new Error("Option 'uid' is required for TrackingIdentifier.");
    }

    if (options.identifier !== undefined) {
      var trackingIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "112039",
          meaning: "Tracking Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.identifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });

      _this29.push(trackingIdentifierItem);
    }

    var trackingUIDItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "112040",
        meaning: "Tracking Unique Identifier",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });

    _this29.push(trackingUIDItem);

    return _this29;
  }

  return TrackingIdentifier;
}(Template);

var templates = /*#__PURE__*/Object.freeze({
	AlgorithmIdentification: AlgorithmIdentification,
	DeviceObserverIdentifyingAttributes: DeviceObserverIdentifyingAttributes,
	ImageLibrary: ImageLibrary,
	LanguageOfContentItemAndDescendants: LanguageOfContentItemAndDescendants,
	Measurement: Measurement,
	MeasurementAndQualitativeEvaluationGroup: MeasurementAndQualitativeEvaluationGroup,
	MeasurementReport: MeasurementReport$2,
	MeasurementsDerivedFromMultipleROIMeasurements: MeasurementsDerivedFromMultipleROIMeasurements,
	ObservationContext: ObservationContext,
	ObserverContext: ObserverContext,
	PersonObserverIdentifyingAttributes: PersonObserverIdentifyingAttributes,
	PlanarROIMeasurementsAndQualitativeEvaluations: PlanarROIMeasurementsAndQualitativeEvaluations,
	ROIMeasurements: ROIMeasurements,
	SubjectContext: SubjectContext,
	SubjectContextDevice: SubjectContextDevice,
	SubjectContextFetus: SubjectContextFetus,
	SubjectContextSpecimen: SubjectContextSpecimen,
	TimePointContext: TimePointContext,
	TrackingIdentifier: TrackingIdentifier,
	VolumetricROIMeasurementsAndQualitativeEvaluations: VolumetricROIMeasurementsAndQualitativeEvaluations
});

var _attributesToInclude = [// Patient
"00080054", "00080100", "00080102", "00080103", "00080104", "00080105", "00080106", "00080107", "0008010B", "0008010D", "0008010F", "00080117", "00080118", "00080119", "00080120", "00080121", "00080122", "00081120", "00081150", "00081155", "00081160", "00081190", "00081199", "00100010", "00100020", "00100021", "00100022", "00100024", "00100026", "00100027", "00100028", "00100030", "00100032", "00100033", "00100034", "00100035", "00100040", "00100200", "00100212", "00100213", "00100214", "00100215", "00100216", "00100217", "00100218", "00100219", "00100221", "00100222", "00100223", "00100229", "00101001", "00101002", "00101100", "00102160", "00102201", "00102202", "00102292", "00102293", "00102294", "00102295", "00102296", "00102297", "00102298", "00102299", "00104000", "00120062", "00120063", "00120064", "0020000D", "00400031", "00400032", "00400033", "00400035", "00400036", "00400039", "0040003A", "0040E001", "0040E010", "0040E020", "0040E021", "0040E022", "0040E023", "0040E024", "0040E025", "0040E030", "0040E031", "0062000B", "00880130", "00880140", // Patient Study
"00080100", "00080102", "00080103", "00080104", "00080105", "00080106", "00080107", "0008010B", "0008010D", "0008010F", "00080117", "00080118", "00080119", "00080120", "00080121", "00080122", "00081080", "00081084", "00101010", "00101020", "00101021", "00101022", "00101023", "00101024", "00101030", "00102000", "00102110", "00102180", "001021A0", "001021B0", "001021C0", "001021D0", "00102203", "00380010", "00380014", "00380060", "00380062", "00380064", "00380500", "00400031", "00400032", "00400033", // General Study
"00080020", "00080030", "00080050", "00080051", "00080080", "00080081", "00080082", "00080090", "00080096", "0008009C", "0008009D", "00080100", "00080102", "00080103", "00080104", "00080105", "00080106", "00080107", "0008010B", "0008010D", "0008010F", "00080117", "00080118", "00080119", "00080120", "00080121", "00080122", "00081030", "00081032", "00081048", "00081049", "00081060", "00081062", "00081110", "00081150", "00081155", "0020000D", "00200010", "00321034", "00400031", "00400032", "00400033", "00401012", "00401101", "00401102", "00401103", "00401104", // Clinical Trial Subject
"00120010", "00120020", "00120021", "00120030", "00120031", "00120040", "00120042", "00120081", "00120082", // Clinical Trial Study
"00120020", "00120050", "00120051", "00120052", "00120053", "00120083", "00120084", "00120085"];

var Comprehensive3DSR = function Comprehensive3DSR(options) {
  var _this = this;

  _classCallCheck(this, Comprehensive3DSR);

  if (options.evidence === undefined) {
    throw new Error("Option 'evidence' is required for Comprehensive3DSR.");
  }

  if (!(_typeof(options.evidence) === "object" || options.evidence instanceof Array)) {
    throw new Error("Option 'evidence' must have type Array.");
  }

  if (options.evidence.length === 0) {
    throw new Error("Option 'evidence' must have non-zero length.");
  }

  if (options.content === undefined) {
    throw new Error("Option 'content' is required for Comprehensive3DSR.");
  }

  if (options.seriesInstanceUID === undefined) {
    throw new Error("Option 'seriesInstanceUID' is required for Comprehensive3DSR.");
  }

  if (options.seriesNumber === undefined) {
    throw new Error("Option 'seriesNumber' is required for Comprehensive3DSR.");
  }

  if (options.seriesDescription === undefined) {
    throw new Error("Option 'seriesDescription' is required for Comprehensive3DSR.");
  }

  if (options.sopInstanceUID === undefined) {
    throw new Error("Option 'sopInstanceUID' is required for Comprehensive3DSR.");
  }

  if (options.instanceNumber === undefined) {
    throw new Error("Option 'instanceNumber' is required for Comprehensive3DSR.");
  }

  if (options.manufacturer === undefined) {
    throw new Error("Option 'manufacturer' is required for Comprehensive3DSR.");
  }

  this.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.34";
  this.SOPInstanceUID = options.sopInstanceUID;
  this.Modality = "SR";
  this.SeriesDescription = options.seriesDescription;
  this.SeriesInstanceUID = options.seriesInstanceUID;
  this.SeriesNumber = options.seriesNumber;
  this.InstanceNumber = options.instanceNumber;
  this.Manufacturer = options.manufacturer;

  if (options.institutionName !== undefined) {
    this.InstitutionName = options.institutionName;

    if (options.institutionalDepartmentName !== undefined) {
      this.InstitutionalDepartmentName = options.institutionDepartmentName;
    }
  }

  if (options.isComplete) {
    this.CompletionFlag = "COMPLETE";
  } else {
    this.CompletionFlag = "PARTIAL";
  }

  if (options.isVerified) {
    if (options.verifyingObserverName === undefined) {
      throw new Error("Verifying Observer Name must be specified if SR document " + "has been verified.");
    }

    if (options.verifyingOrganization === undefined) {
      throw new Error("Verifying Organization must be specified if SR document " + "has been verified.");
    }

    this.VerificationFlag = "VERIFIED";
    var ovserver_item = {};
    ovserver_item.VerifyingObserverName = options.verifyingObserverName;
    ovserver_item.VerifyingOrganization = options.verifyingOrganization;
    ovserver_item.VerificationDateTime = DicomMetaDictionary.dateTime();
    this.VerifyingObserverSequence = [observer_item];
  } else {
    this.VerificationFlag = "UNVERIFIED";
  }

  if (options.isFinal) {
    this.PreliminaryFlag = "FINAL";
  } else {
    this.PreliminaryFlag = "PRELIMINARY";
  }

  this.ContentDate = DicomMetaDictionary.date();
  this.ContentTime = DicomMetaDictionary.time();
  Object.keys(options.content).forEach(function (keyword) {
    _this[keyword] = options.content[keyword];
  });
  var evidenceCollection = {};
  options.evidence.forEach(function (evidence) {
    if (evidence.StudyInstanceUID !== options.evidence[0].StudyInstanceUID) {
      throw new Error("Referenced data sets must all belong to the same study.");
    }

    if (!(evidence.SeriesInstanceUID in evidenceCollection)) {
      evidenceCollection[evidence.SeriesInstanceUID] = [];
    }

    var instanceItem = {};
    instanceItem.ReferencedSOPClassUID = evidence.SOPClassUID;
    instanceItem.ReferencedSOPInstanceUID = evidence.SOPInstanceUID;
    evidenceCollection[evidence.SeriesInstanceUID].push(instanceItem);
  });
  var evidenceStudyItem = {};
  evidenceStudyItem.StudyInstanceUID = options.evidence[0].StudyInstanceUID;
  evidenceStudyItem.ReferencedSeriesSequence = [];
  Object.keys(evidenceCollection).forEach(function (seriesInstanceUID) {
    var seriesItem = {};
    seriesItem.SeriesInstanceUID = seriesInstanceUID;
    seriesItem.ReferencedSOPSequence = evidenceCollection[seriesInstanceUID];
    evidenceStudyItem.ReferencedSeriesSequence.push(seriesItem);
  });

  if (options.requestedProcedures !== undefined) {
    if (!(_typeof(options.requestedProcedures) === "object" || options.requestedProcedures instanceof Array)) {
      throw new Error("Option 'requestedProcedures' must have type Array.");
    }

    this.ReferencedRequestSequence = _construct(ContentSequence, _toConsumableArray(options.requestedProcedures));
    this.CurrentRequestedProcedureEvidenceSequence = [evidenceStudyItem];
  } else {
    this.PertinentOtherEvidenceSequence = [evidenceStudyItem];
  }

  if (options.previousVersions !== undefined) {
    var preCollection = {};
    options.previousVersions.forEach(function (version) {
      if (version.StudyInstanceUID != options.evidence[0].StudyInstanceUID) {
        throw new Error("Previous version data sets must belong to the same study.");
      }

      var instanceItem = {};
      instanceItem.ReferencedSOPClassUID = version.SOPClassUID;
      instanceItem.ReferencedSOPInstanceUID = version.SOPInstanceUID;
      preCollection[version.SeriesInstanceUID].push(instanceItem);
    });
    var preStudyItem = {};
    preStudyItem.StudyInstanceUID = options.previousVersions[0].StudyInstanceUID;
    preStudyItem.ReferencedSeriesSequence = [];
    Object.keys(preCollection).forEach(function (seriesInstanceUID) {
      var seriesItem = {};
      seriesItem.SeriesInstanceUID = seriesInstanceUID;
      seriesItem.ReferencedSOPSequence = preCollection[seriesInstanceUID];
      preStudyItem.ReferencedSeriesSequence.push(seriesItem);
    });
    this.PredecessorDocumentsSequence = [preStudyItem];
  }

  if (options.performedProcedureCodes !== undefined) {
    if (!(_typeof(options.performedProcedureCodes) === "object" || options.performedProcedureCodes instanceof Array)) {
      throw new Error("Option 'performedProcedureCodes' must have type Array.");
    }

    this.PerformedProcedureCodeSequence = _construct(ContentSequence, _toConsumableArray(options.performedProcedureCodes));
  } else {
    this.PerformedProcedureCodeSequence = [];
  }

  this.ReferencedPerformedProcedureStepSequence = [];

  _attributesToInclude.forEach(function (tag) {
    var key = DicomMetaDictionary.punctuateTag(tag);
    var element = DicomMetaDictionary.dictionary[key];

    if (element !== undefined) {
      var keyword = element.name;
      var value = options.evidence[0][keyword];

      if (value !== undefined) {
        _this[keyword] = value;
      }
    }
  });
};

var documents = /*#__PURE__*/Object.freeze({
	Comprehensive3DSR: Comprehensive3DSR
});

var sr = {
  coding: coding,
  contentItems: contentItems,
  documents: documents,
  templates: templates,
  valueTypes: valueTypes
};

var data = {
  BitArray: BitArray,
  ReadBufferStream: ReadBufferStream,
  WriteBufferStream: WriteBufferStream,
  DicomDict: DicomDict,
  DicomMessage: DicomMessage,
  DicomMetaDictionary: DicomMetaDictionary,
  Tag: Tag,
  ValueRepresentation: ValueRepresentation,
  Colors: Colors,
  datasetToDict: datasetToDict,
  datasetToBuffer: datasetToBuffer,
  datasetToBlob: datasetToBlob
};
var derivations = {
  DerivedDataset: DerivedDataset,
  DerivedPixels: DerivedPixels,
  DerivedImage: DerivedImage,
  Segmentation: Segmentation,
  StructuredReport: StructuredReport,
  ParametricMap: ParametricMap
};
var normalizers = {
  Normalizer: Normalizer,
  ImageNormalizer: ImageNormalizer,
  MRImageNormalizer: MRImageNormalizer,
  EnhancedMRImageNormalizer: EnhancedMRImageNormalizer,
  EnhancedUSVolumeNormalizer: EnhancedUSVolumeNormalizer,
  CTImageNormalizer: CTImageNormalizer,
  PETImageNormalizer: PETImageNormalizer,
  SEGImageNormalizer: SEGImageNormalizer,
  DSRNormalizer: DSRNormalizer
};


//# sourceMappingURL=dcmje.es.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix.js":
/*!*************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.2
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

exports.glMatrix = __webpack_require__(/*! ./gl-matrix/common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");
exports.mat2 = __webpack_require__(/*! ./gl-matrix/mat2.js */ "./node_modules/gl-matrix/src/gl-matrix/mat2.js");
exports.mat2d = __webpack_require__(/*! ./gl-matrix/mat2d.js */ "./node_modules/gl-matrix/src/gl-matrix/mat2d.js");
exports.mat3 = __webpack_require__(/*! ./gl-matrix/mat3.js */ "./node_modules/gl-matrix/src/gl-matrix/mat3.js");
exports.mat4 = __webpack_require__(/*! ./gl-matrix/mat4.js */ "./node_modules/gl-matrix/src/gl-matrix/mat4.js");
exports.quat = __webpack_require__(/*! ./gl-matrix/quat.js */ "./node_modules/gl-matrix/src/gl-matrix/quat.js");
exports.vec2 = __webpack_require__(/*! ./gl-matrix/vec2.js */ "./node_modules/gl-matrix/src/gl-matrix/vec2.js");
exports.vec3 = __webpack_require__(/*! ./gl-matrix/vec3.js */ "./node_modules/gl-matrix/src/gl-matrix/vec3.js");
exports.vec4 = __webpack_require__(/*! ./gl-matrix/vec4.js */ "./node_modules/gl-matrix/src/gl-matrix/vec4.js");

/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/common.js":
/*!********************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/common.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

// Configuration Constants
glMatrix.EPSILON = 0.000001;
glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
glMatrix.RANDOM = Math.random;
glMatrix.ENABLE_SIMD = false;

// Capability detection
glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);
glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    glMatrix.ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
* Convert Degree To Radian
*
* @param {Number} Angle in Degrees
*/
glMatrix.toRadian = function(a){
     return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less 
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 * 
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
glMatrix.equals = function(a, b) {
	return Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}

module.exports = glMatrix;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/mat2.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/mat2.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 2x2 Matrix
 * @name mat2
 */
var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
mat2.fromValues = function(m00, m01, m10, m11) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
mat2.set = function(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};


/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
};

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix 
 * @param {mat2} D the diagonal matrix 
 * @param {mat2} U the upper triangular matrix 
 * @param {mat2} a the input matrix to factorize
 */

mat2.LDU = function (L, D, U, a) { 
    L[2] = a[2]/a[0]; 
    U[0] = a[0]; 
    U[1] = a[1]; 
    U[3] = a[3] - L[2] * U[1]; 
    return [L, D, U];       
}; 

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link mat2.subtract}
 * @function
 */
mat2.sub = mat2.subtract;

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
mat2.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
mat2.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

module.exports = mat2;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/mat2d.js":
/*!*******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/mat2d.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */
var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
mat2d.fromValues = function(a, b, c, d, tx, ty) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
mat2d.set = function(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2d.frob = function (a) { 
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}; 

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
};

/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
mat2d.sub = mat2d.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
mat2d.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
};

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
mat2d.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
};

module.exports = mat2d;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/mat3.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/mat3.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 3x3 Matrix
 * @name mat3
 */
var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
mat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
mat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);

    out[0] = c;
    out[1] = s;
    out[2] = 0;

    out[3] = -s;
    out[4] = c;
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;

    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;

    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;

    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat3.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
};

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
};

/**
 * Alias for {@link mat3.subtract}
 * @function
 */
mat3.sub = mat3.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
mat3.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
};

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
mat3.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    return out;
};

/*
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && 
           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
};


module.exports = mat3;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/mat4.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/mat4.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 4x4 Matrix
 * @name mat4
 */
var mat4 = {
  scalar: {},
  SIMD: {},
};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
mat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
mat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }

    return out;
};

/**
 * Transpose the values of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.transpose = function(out, a) {
    var a0, a1, a2, a3,
        tmp01, tmp23,
        out0, out1, out2, out3;

    a0 = SIMD.Float32x4.load(a, 0);
    a1 = SIMD.Float32x4.load(a, 4);
    a2 = SIMD.Float32x4.load(a, 8);
    a3 = SIMD.Float32x4.load(a, 12);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 0,  out0);
    SIMD.Float32x4.store(out, 4,  out1);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 8,  out2);
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Transpse a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;

/**
 * Inverts a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
        return null;
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Inverts a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.invert = function(out, a) {
  var row0, row1, row2, row3,
      tmp1,
      minor0, minor1, minor2, minor3,
      det,
      a0 = SIMD.Float32x4.load(a, 0),
      a1 = SIMD.Float32x4.load(a, 4),
      a2 = SIMD.Float32x4.load(a, 8),
      a3 = SIMD.Float32x4.load(a, 12);

  // Compute matrix adjugate
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  // Compute matrix determinant
  det   = SIMD.Float32x4.mul(row0, minor0);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);
  det   = SIMD.Float32x4.sub(
               SIMD.Float32x4.add(tmp1, tmp1),
               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
  if (!det) {
      return null;
  }

  // Compute matrix inverse
  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));
  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));
  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));
  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
  return out;
}

/**
 * Inverts a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;

/**
 * Calculates the adjugate of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.adjoint = function(out, a) {
  var a0, a1, a2, a3;
  var row0, row1, row2, row3;
  var tmp1;
  var minor0, minor1, minor2, minor3;

  var a0 = SIMD.Float32x4.load(a, 0);
  var a1 = SIMD.Float32x4.load(a, 4);
  var a2 = SIMD.Float32x4.load(a, 8);
  var a3 = SIMD.Float32x4.load(a, 12);

  // Transpose the source matrix.  Sort of.  Not a true transpose operation
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);

  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  SIMD.Float32x4.store(out, 0,  minor0);
  SIMD.Float32x4.store(out, 4,  minor1);
  SIMD.Float32x4.store(out, 8,  minor2);
  SIMD.Float32x4.store(out, 12, minor3);
  return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
 mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's explicitly using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand, must be a Float32Array
 * @param {mat4} b the second operand, must be a Float32Array
 * @returns {mat4} out
 */
mat4.SIMD.multiply = function (out, a, b) {
    var a0 = SIMD.Float32x4.load(a, 0);
    var a1 = SIMD.Float32x4.load(a, 4);
    var a2 = SIMD.Float32x4.load(a, 8);
    var a3 = SIMD.Float32x4.load(a, 12);

    var b0 = SIMD.Float32x4.load(b, 0);
    var out0 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 0, out0);

    var b1 = SIMD.Float32x4.load(b, 4);
    var out1 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 4, out1);

    var b2 = SIMD.Float32x4.load(b, 8);
    var out2 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 8, out2);

    var b3 = SIMD.Float32x4.load(b, 12);
    var out3 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
                        SIMD.Float32x4.add(
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Multiplies two mat4's explicitly not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.scalar.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Multiplies two mat4's using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.scalar.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.SIMD.translate = function (out, a, v) {
    var a0 = SIMD.Float32x4.load(a, 0),
        a1 = SIMD.Float32x4.load(a, 4),
        a2 = SIMD.Float32x4.load(a, 8),
        a3 = SIMD.Float32x4.load(a, 12),
        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);

    if (a !== out) {
        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];
        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];
    }

    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));

    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
    SIMD.Float32x4.store(out, 12, t0);

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scalar.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.SIMD.scale = function(out, a, v) {
    var a0, a1, a2;
    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);

    a0 = SIMD.Float32x4.load(a, 0);
    SIMD.Float32x4.store(
        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));

    a1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(
        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));

    a2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(
        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));

    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 */
mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateX = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
      out[0]  = a[0];
      out[1]  = a[1];
      out[2]  = a[2];
      out[3]  = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_1 = SIMD.Float32x4.load(a, 4);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;

/**
 * Rotates a matrix by the given angle around the Y axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateY = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;

/**
 * Rotates a matrix by the given angle around the Z axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateZ = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = 1;
    out[1]  = 0;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = 0;
    out[2]  = -s;
    out[3]  = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = s;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
mat4.getTranslation = function (out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
};

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
mat4.getRotation = function (out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  var trace = mat[0] + mat[5] + mat[10];
  var S = 0;

  if (trace > 0) { 
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S; 
    out[2] = (mat[1] - mat[4]) / S; 
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { 
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S; 
    out[2] = (mat[8] + mat[2]) / S; 
  } else if (mat[5] > mat[10]) { 
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S; 
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S; 
  } else { 
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScale = function (out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];

    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
  // Quaternion math
  var x = q[0], y = q[1], z = q[2], w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,

      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2,

      sx = s[0],
      sy = s[1],
      sz = s[2],

      ox = o[0],
      oy = o[1],
      oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
};

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
        Math.abs(eyey - centery) < glMatrix.EPSILON &&
        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat4.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
};

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
};

/**
 * Alias for {@link mat4.subtract}
 * @function
 */
mat4.sub = mat4.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
mat4.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
};

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
mat4.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    out[9] = a[9] + (b[9] * scale);
    out[10] = a[10] + (b[10] * scale);
    out[11] = a[11] + (b[11] * scale);
    out[12] = a[12] + (b[12] * scale);
    out[13] = a[13] + (b[13] * scale);
    out[14] = a[14] + (b[14] * scale);
    out[15] = a[15] + (b[15] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && 
           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && 
           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.equals = function (a, b) {
    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],
        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], 
        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], 
        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],
        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], 
        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], 
        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
};



module.exports = mat4;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/quat.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/quat.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");
var mat3 = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/src/gl-matrix/mat3.js");
var vec3 = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/src/gl-matrix/vec3.js");
var vec4 = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/src/gl-matrix/vec4.js");

/**
 * @class Quaternion
 * @name quat
 */
var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
quat.getAxisAngle = function(out_axis, q) {
    var rad = Math.acos(q[3]) * 2.0;
    var s = Math.sin(rad / 2.0);
    if (s != 0.0) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
    } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
    }
    return rad;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
quat.sqlerp = (function () {
  var temp1 = quat.create();
  var temp2 = quat.create();
  
  return function (out, a, b, c, d, t) {
    quat.slerp(temp1, a, d, t);
    quat.slerp(temp2, b, c, t);
    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
    
    return out;
  };
}());

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if ( fTrace > 0.0 ) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;  // 1/(4w)
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        var j = (i+1)%3;
        var k = (i+2)%3;
        
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
    }
    
    return out;
};

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.exactEquals = vec4.exactEquals;

/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.equals = vec4.equals;

module.exports = quat;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/vec2.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/vec2.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */
var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
vec2.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
vec2.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
vec2.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
vec2.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
};

module.exports = vec2;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/vec3.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/vec3.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */
var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
vec3.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
};

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
vec3.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
};

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
vec3.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
vec3.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.hermite = function (out, a, b, c, d, t) {
  var factorTimes2 = t * t,
      factor1 = factorTimes2 * (2 * t - 3) + 1,
      factor2 = factorTimes2 * (t - 2) + t,
      factor3 = factorTimes2 * (t - 1),
      factor4 = factorTimes2 * (3 - 2 * t);
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.bezier = function (out, a, b, c, d, t) {
  var inverseFactor = 1 - t,
      inverseFactorTimesTwo = inverseFactor * inverseFactor,
      factorTimes2 = t * t,
      factor1 = inverseFactorTimesTwo * inverseFactor,
      factor2 = 3 * t * inverseFactorTimesTwo,
      factor3 = 3 * factorTimes2 * inverseFactor,
      factor4 = factorTimes2 * t;
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateX = function(out, a, b, c){
   var p = [], r=[];
	  //Translate point to the origin
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];

	  //perform rotation
	  r[0] = p[0];
	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	  //translate to correct position
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];

  	return out;
};

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateY = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  	r[1] = p[1];
  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateZ = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  	r[2] = p[2];
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
vec3.angle = function(a, b) {
   
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
 
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
 
    var cosine = vec3.dot(tempA, tempB);

    if(cosine > 1.0){
        return 0;
    } else {
        return Math.acos(cosine);
    }     
};

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
};

module.exports = vec3;


/***/ }),

/***/ "./node_modules/gl-matrix/src/gl-matrix/vec4.js":
/*!******************************************************!*\
  !*** ./node_modules/gl-matrix/src/gl-matrix/vec4.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/src/gl-matrix/common.js");

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */
var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
vec4.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
};

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
vec4.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
};

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
vec4.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
vec4.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

module.exports = vec4;


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/Generator.js":
/*!**************************!*\
  !*** ./src/Generator.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glConstants = _interopRequireDefault(__webpack_require__(/*! ./glConstants */ "./src/glConstants.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// populates Fields with data based on inputs
var Generator =
/*#__PURE__*/
function () {
  // TODO: unify with Space
  function Generator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Generator);

    this.useIntegerTextures = Generator.useIntegerTextures;
    this.gl = options.gl;
    this.uniforms = options.uniforms || {};
    this.inputFields = options.inputFields || [];
    this.outputFields = options.outputFields || [];
    this.program = undefined; // * for now, all PixelData in datasets is of type short
    // * pixel readback of float textures requires casting
    // * gl may allow read back of single component, but may only do rgba
    // TODO: support for reading back transform arrays

    this.sliceViewArrayType = Int16Array;
    this.sliceViewBytesPerElement = 2;

    if (this.useIntegerTextures) {
      this.samplerType = "isampler3D";
      this.bufferType = "int";
      this.readPixelsFormat = this.gl.RED_INTEGER;
      this.readPixelsType = this.gl.SHORT;
      this.fallbackSliceViewsArrayType = Int32Array;
      this.fallbackNumberOfComponents = 4;
      this.fallbackReadPixelsFormat = this.gl.RGBA_INTEGER;
      this.fallbackReadPixelsType = this.gl.INT;
    } else {
      this.samplerType = "sampler3D";
      this.bufferType = "float";
      this.readPixelsFormat = this.gl.RED;
      this.readPixelsType = this.gl.FLOAT;
      this.fallbackSliceViewsArrayType = Float32Array;
      this.fallbackNumberOfComponents = 4;
      this.fallbackReadPixelsFormat = this.gl.RGBA;
      this.fallbackReadPixelsType = this.gl.FLOAT;
    } // TODO: need to consider rescaleIntercept/rescaleSlope when
    // writing out to image textures

  } // utility for printing multiline strings for debugging


  _createClass(Generator, [{
    key: "logWithLineNumbers",
    value: function logWithLineNumbers(string) {
      var lineNumber = 1;
      string.split("\n").forEach(function (line) {
        console.log(lineNumber, line);
        lineNumber += 1;
      });
    } // utility for printing human readable codes
    // TODO: could cache the mapping, but since this is only
    // for error messages performance is not critical

  }], [{
    key: "glConstantName",
    value: function glConstantName(candidateValue) {
      var name;
      Object.entries(_glConstants.default).forEach(function (entry) {
        var _entry = _slicedToArray(entry, 2),
            key = _entry[0],
            value = _entry[1];

        if (candidateValue === value) {
          name = key;
        }
      });
      return name;
    }
  }]);

  return Generator;
}();

exports.default = Generator;
Generator.useIntegerTextures = false; // default

module.exports = exports["default"];

/***/ }),

/***/ "./src/GrowCutGenerator.js":
/*!*********************************!*\
  !*** ./src/GrowCutGenerator.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ProgrammaticGenerator = _interopRequireDefault(__webpack_require__(/*! ./ProgrammaticGenerator */ "./src/ProgrammaticGenerator.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var GrowCutGenerator =
/*#__PURE__*/
function (_ProgrammaticGenerato) {
  _inherits(GrowCutGenerator, _ProgrammaticGenerato);

  // Performs on iteration of GrowCut.
  // inputFields are:
  // - 0 grayscale image
  // - 1 current label image
  // - 2 current strength image
  // outputFields are:
  // - 0 new label image
  // - 1 new strength image
  function GrowCutGenerator() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GrowCutGenerator);

    _this = _possibleConstructorReturn(this, (GrowCutGenerator.__proto__ || Object.getPrototypeOf(GrowCutGenerator)).call(this, options));
    _this.uniforms.iteration = {
      type: "1i",
      value: 0
    };
    _this.uniforms.iterations = {
      type: "1i",
      value: 0
    };
    return _this;
  }

  _createClass(GrowCutGenerator, [{
    key: "headerSource",
    value: function headerSource() {
      return "".concat(_get(GrowCutGenerator.prototype.__proto__ || Object.getPrototypeOf(GrowCutGenerator.prototype), "headerSource", this).call(this), "\n        const int sliceMode = 1; // used for texture sampling (get value not transfer function)\n      ");
    }
  }, {
    key: "updateProgram",
    value: function updateProgram() {
      // recreate the program and textures for the current field list
      _get(GrowCutGenerator.prototype.__proto__ || Object.getPrototypeOf(GrowCutGenerator.prototype), "updateProgram", this).call(this);
    }
  }, {
    key: "_fragmentShaderSource",
    value: function _fragmentShaderSource() {
      return "".concat(this.headerSource(), "\n        // these are the function definitions for sampleVolume*\n        // and transferFunction*\n        // that define a field at a sample point in space\n        ").concat(function () {
        var perFieldSamplingShaderSource = "";
        this.inputFields.forEach(function (field) {
          perFieldSamplingShaderSource += field.transformShaderSource();
          perFieldSamplingShaderSource += field.samplingShaderSource();
        });
        return perFieldSamplingShaderSource;
      }.bind(this)(), "\n  \n        #define MAX_STRENGTH ").concat(this.bufferType, "(10000)\n  \n        uniform int iterations;\n        uniform int iteration;\n  \n        uniform ").concat(this.samplerType, " inputTexture0; // background\n        uniform ").concat(this.samplerType, " inputTexture1; // label\n        uniform ").concat(this.samplerType, " inputTexture2; // strength\n  \n        in vec3 interpolatedTextureCoordinate;\n  \n        layout(location = 0) out ").concat(this.bufferType, " label;\n        layout(location = 1) out ").concat(this.bufferType, " strength;\n  \n        void main()\n        {\n          ivec3 size = textureSize(inputTexture0, 0);\n          ivec3 texelIndex = ivec3(floor(interpolatedTextureCoordinate * vec3(size)));\n          ").concat(this.bufferType, " background = texelFetch(inputTexture0, texelIndex, 0).r;\n  \n          if (iteration == 0) {\n            if (background < ").concat(this.bufferType, "(10)) {\n              label = ").concat(this.bufferType, "(30);\n              strength = MAX_STRENGTH;\n            } else if (background > ").concat(this.bufferType, "(100)) {\n              label = ").concat(this.bufferType, "(100);\n              strength = MAX_STRENGTH;\n            } else {\n              label = ").concat(this.bufferType, "(0);\n              strength = ").concat(this.bufferType, "(0);\n            }\n          } else {\n            label = texelFetch(inputTexture1, texelIndex, 0).r;\n            strength = texelFetch(inputTexture2, texelIndex, 0).r;\n            for (int k = -1; k <= 1; k++) {\n              for (int j = -1; j <= 1; j++) {\n                for (int i = -1; i <= 1; i++) {\n                  if (i != 0 && j != 0 && k != 0) {\n                    ivec3 neighborIndex = texelIndex + ivec3(i,j,k);\n                    ").concat(this.bufferType, " neighborBackground = texelFetch(inputTexture0, neighborIndex, 0).r;\n                    ").concat(this.bufferType, " neighborStrength = texelFetch(inputTexture2, neighborIndex, 0).r;\n                    ").concat(this.bufferType, " strengthCost = abs(neighborBackground - background);\n                    ").concat(this.bufferType, " takeoverStrength = neighborStrength - strengthCost;\n                    if (takeoverStrength > strength) {\n                      strength = takeoverStrength;\n                      label = texelFetch(inputTexture1, neighborIndex, 0).r;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      ");
    }
  }]);

  return GrowCutGenerator;
}(_ProgrammaticGenerator.default);

exports.default = GrowCutGenerator;
module.exports = exports["default"];

/***/ }),

/***/ "./src/ProgrammaticGenerator.js":
/*!**************************************!*\
  !*** ./src/ProgrammaticGenerator.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Generator2 = _interopRequireDefault(__webpack_require__(/*! ./Generator */ "./src/Generator.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Uses a GL program to generate fields
var ProgrammaticGenerator =
/*#__PURE__*/
function (_Generator) {
  _inherits(ProgrammaticGenerator, _Generator);

  function ProgrammaticGenerator() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ProgrammaticGenerator);

    _this = _possibleConstructorReturn(this, (ProgrammaticGenerator.__proto__ || Object.getPrototypeOf(ProgrammaticGenerator)).call(this, options));
    var gl = _this.gl;

    _this.outputFields.forEach(function (outputField) {
      outputField.generator = _this;
    }); // buffers for the textured plane in normalized (clip) space


    var renderImageVertices = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];
    _this.renderImageCoordinatesBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, _this.renderImageCoordinatesBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(renderImageVertices), gl.STATIC_DRAW);
    var renderImageTextureCoordinates = [0, 0, 1, 0, 0, 1, 1, 1];
    _this.renderImageTexureCoordinatesBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, _this.renderImageTexureCoordinatesBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(renderImageTextureCoordinates), gl.STATIC_DRAW); // framebuffer to attach texture layer for generating a slice

    _this.framebuffer = gl.createFramebuffer();
    return _this;
  }

  _createClass(ProgrammaticGenerator, [{
    key: "headerSource",
    value: function headerSource() {
      return "#version 300 es\n          precision highp float;\n          precision highp int;\n          precision highp sampler3D;\n          precision highp isampler3D;\n        ";
    }
  }, {
    key: "_vertexShaderSource",
    value: function _vertexShaderSource() {
      return "".concat(this.headerSource(), "\n          layout(location = 0) in vec3 coordinate;\n          layout(location = 1) in vec2 textureCoordinate;\n          uniform float slice;\n          out vec3 interpolatedTextureCoordinate;\n          void main()\n          {\n            interpolatedTextureCoordinate = vec3(textureCoordinate, slice);\n            gl_Position = vec4(coordinate, 1.);\n          }\n        ");
    }
  }, {
    key: "_fragmentShaderSource",
    value: function _fragmentShaderSource() {
      return "".concat(this.headerSource(), "\n          // to be overridden by concrete subclass\n        ");
    }
  }, {
    key: "updateProgram",
    value: function updateProgram() {
      // recreate the program
      var gl = this.gl;

      if (this.program) {
        gl.deleteProgram(this.program);
      }

      this.vertexShaderSource = this._vertexShaderSource();
      this.fragmentShaderSource = this._fragmentShaderSource(); // the program and shaders

      this.program = gl.createProgram();
      this.vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(this.vertexShader, this.vertexShaderSource);
      gl.compileShader(this.vertexShader);

      if (!gl.getShaderParameter(this.vertexShader, gl.COMPILE_STATUS)) {
        this.logWithLineNumbers(this.vertexShaderSource);
        console.error("Could not compile vertexShader");
        console.log(gl.getShaderInfoLog(this.vertexShader));
        return;
      }

      this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(this.fragmentShader, this.fragmentShaderSource);
      gl.compileShader(this.fragmentShader);

      if (!gl.getShaderParameter(this.fragmentShader, gl.COMPILE_STATUS)) {
        this.logWithLineNumbers(this.fragmentShaderSource);
        console.error("Could not compile fragmentShader");
        console.log(gl.getShaderInfoLog(this.fragmentShader));
        return;
      }

      gl.attachShader(this.program, this.vertexShader);
      gl.deleteShader(this.vertexShader);
      gl.attachShader(this.program, this.fragmentShader);
      gl.deleteShader(this.fragmentShader);
      gl.linkProgram(this.program);

      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
        this.logWithLineNumbers(this.fragmentShaderSource);
        console.error("Could not link program");
        console.log(gl.getProgramInfoLog(this.program));
        return;
      } // activate the inputs


      this.inputFields.forEach(function (field) {
        if (field.needsUpdate()) {
          field.fieldToTexture(gl);
        }
      });
    }
  }, {
    key: "_setUniform",
    value: function _setUniform(key, uniform) {
      var gl = this.gl;
      var location = gl.getUniformLocation(this.program, key);

      if (!location) {
        // for now, don't warn for this since the field superclass
        // declares visualization uniforms which may not be referenced
        // in generator code.  This could be a source of confusion
        // if uniforms aren't found in the shader code.
        // TODO: add a verbose mode for diagnostics and debugging
        // console.error('No uniform location for', key);
        return;
      }

      if (uniform.type === "3fv") {
        gl.uniform3fv(location, uniform.value);
        return;
      }

      if (uniform.type === "3iv") {
        gl.uniform3iv(location, uniform.value);
        return;
      }

      if (uniform.type === "4fv") {
        gl.uniform4fv(location, uniform.value);
        return;
      }

      if (uniform.type === "4iv") {
        gl.uniform4iv(location, uniform.value);
        return;
      }

      if (uniform.type === "1f") {
        gl.uniform1f(location, uniform.value);
        return;
      }

      if (uniform.type === "1ui") {
        gl.uniform1ui(location, uniform.value);
        return;
      }

      if (uniform.type === "1i") {
        gl.uniform1i(location, uniform.value);
        return;
      }

      if (uniform.type === "Matrix3fv") {
        gl.uniformMatrix3fv(location, gl.FALSE, uniform.value);
        return;
      }

      if (uniform.type === "Matrix4fv") {
        gl.uniformMatrix4fv(location, gl.FALSE, uniform.value);
        return;
      }

      console.error("Could not set uniform", key, uniform);
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this2 = this;

      var gl = this.gl;
      var outputField0 = this.outputFields[0];
      gl.useProgram(this.program);
      gl.viewport(0, 0, outputField0.pixelDimensions[0], outputField0.pixelDimensions[1]); // the coordinate attribute

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderImageCoordinatesBuffer);
      var coordinateLocation = gl.getAttribLocation(this.program, "coordinate");
      gl.enableVertexAttribArray(coordinateLocation);
      gl.vertexAttribPointer(coordinateLocation, 3, gl.FLOAT, false, 0, 0); // the textureCoordinate attribute

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderImageTexureCoordinatesBuffer);
      var textureCoordinateLocation = gl.getAttribLocation(this.program, "textureCoordinate");
      gl.enableVertexAttribArray(textureCoordinateLocation);
      gl.vertexAttribPointer(textureCoordinateLocation, 2, gl.FLOAT, false, 0, 0); // the overall application uniforms, and the per-field uniforms

      Object.keys(this.uniforms).forEach(function (key) {
        _this2._setUniform(key, _this2.uniforms[key]);
      });
      this.inputFields.forEach(function (field) {
        var uniforms = field.uniforms();
        Object.keys(uniforms).forEach(function (key) {
          _this2._setUniform(key, uniforms[key]);
        });
      }); // activate any field textures

      var textureIndex = 0;
      this.inputFields.forEach(function (field) {
        gl.activeTexture(gl.TEXTURE0 + textureIndex);

        if (field.texture) {
          gl.bindTexture(gl.TEXTURE_3D, field.texture);
        }

        var textureSymbol = "inputTexture" + textureIndex;
        var samplerLocation = gl.getUniformLocation(_this2.program, textureSymbol);
        gl.uniform1i(samplerLocation, textureIndex);
        textureIndex++;
      }); // generate the output by invoking the program once per slice

      var mipmapLevel = 0;
      var sliceUniformLocation = gl.getUniformLocation(this.program, "slice");
      var frames = outputField0.pixelDimensions[2];
      var fallbackSliceViews = {};

      var _loop = function _loop(sliceIndex) {
        var slice = (0.5 + sliceIndex) / frames;
        gl.uniform1f(sliceUniformLocation, slice);
        gl.bindFramebuffer(gl.FRAMEBUFFER, _this2.framebuffer);
        var drawBuffers = [];
        var attachment = 0;

        _this2.outputFields.forEach(function (outputField) {
          gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + attachment, outputField.texture, mipmapLevel, sliceIndex);
          drawBuffers.push(gl.COLOR_ATTACHMENT0 + attachment);
          attachment++;
        });

        gl.drawBuffers(drawBuffers);
        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

        if (status !== gl.FRAMEBUFFER_COMPLETE) {
          console.error("Incomplete framebuffer: " + _Generator2.default.glConstantName(status));
        }

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); //
        // optional readback of rendered texture when generatedPixelData exists
        // - attempt to read native pixels, but fallback to rgba if needed
        //

        attachment = 0;

        _this2.outputFields.forEach(function (outputField) {
          if (outputField.generatedPixelData) {
            var _ref = [outputField.dataset.Columns, outputField.dataset.Rows],
                w = _ref[0],
                h = _ref[1];
            var slicePixelCount = w * h;
            var sliceByteStart = sliceIndex * slicePixelCount * _this2.sliceViewBytesPerElement;
            var sliceView = new _this2.sliceViewArrayType(outputField.generatedPixelData, sliceByteStart, slicePixelCount);
            gl.readBuffer(gl.COLOR_ATTACHMENT0 + attachment);
            var supportedFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
            var supportedType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);

            if (supportedFormat !== _this2.readPixelsFormat || supportedType !== _this2.readPixelsType) {
              if (!fallbackSliceViews[attachment]) {
                console.log("Framebuffer read not supported, using slower fallback method");
                fallbackSliceViews[attachment] = new _this2.fallbackSliceViewsArrayType(_this2.fallbackNumberOfComponents * slicePixelCount);
              }

              var fallbackSliceView = fallbackSliceViews[attachment];
              gl.readPixels(0, 0, w, h, _this2.fallbackReadPixelsFormat, _this2.fallbackReadPixelsType, fallbackSliceView);

              for (var index = 0; index < slicePixelCount; ++index) {
                sliceView[index] = fallbackSliceView[_this2.fallbackNumberOfComponents * index];
              }
            } else {
              gl.readPixels(0, 0, w, h, _this2.readPixelsFormat, _this2.readPixelsType, sliceView);
            }
          }

          attachment++;
        });
      };

      for (var sliceIndex = 0; sliceIndex < frames; sliceIndex++) {
        _loop(sliceIndex);
      }
    }
  }]);

  return ProgrammaticGenerator;
}(_Generator2.default);

exports.default = ProgrammaticGenerator;
module.exports = exports["default"];

/***/ }),

/***/ "./src/RayCastRenderer.js":
/*!********************************!*\
  !*** ./src/RayCastRenderer.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ProgrammaticGenerator = _interopRequireDefault(__webpack_require__(/*! ./ProgrammaticGenerator */ "./src/ProgrammaticGenerator.js"));

var _linear = _interopRequireDefault(__webpack_require__(/*! ./linear */ "./src/linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var RayCastRenderer =
/*#__PURE__*/
function (_ProgrammaticGenerato) {
  _inherits(RayCastRenderer, _ProgrammaticGenerato);

  // Last link in a chain, renders to the default frame buffer
  // using ray cast shader program
  //
  function RayCastRenderer() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RayCastRenderer);

    _this = _possibleConstructorReturn(this, (RayCastRenderer.__proto__ || Object.getPrototypeOf(RayCastRenderer)).call(this, options));
    _this.canvas = options.canvas;
    _this.rayCompositing = options.rayCompositing || "integration";

    if (!(_this.rayCompositing in ["integration", "maximum", "minimum"])) {
      console.error("Unknown rayCompositing option ".concat(_this.rayCompositing, ", using integration"));
      _this.rayCompositing = "integration";
    }

    _this.maximumCompositingField = options.maximumCompositingField || 0;
    _this.renderRequestTimeout = options.renderRequestTimeout || 100;
    _this.pendingRenderRequest = false; // a handle to the ongoing render

    _this.requestAnotherRender = false; // trigger another when this completes

    _this.syncReasons = {};
    _this.syncReasons[_this.gl.ALREADY_SIGNALED] = "ALREADY_SIGNALED";
    _this.syncReasons[_this.gl.TIMEOUT_EXPIRED] = "TIMEOUT_EXPIRED";
    _this.syncReasons[_this.gl.CONDITION_SATISFIED] = "CONDITION_SATISFIED";
    _this.syncReasons[_this.gl.WAIT_FAILED] = "WAIT_FAILED";
    return _this;
  }

  _createClass(RayCastRenderer, [{
    key: "updateProgram",
    value: function updateProgram() {
      var _this2 = this;

      // recreate the program and textures for the current field list
      _get(RayCastRenderer.prototype.__proto__ || Object.getPrototypeOf(RayCastRenderer.prototype), "updateProgram", this).call(this); // recalculate center and bounds


      var large = _linear.default.LARGE_NUMBER;
      this.bounds = {
        min: [large, large, large],
        max: [-large, -large, -large]
      };
      this.inputFields.forEach(function (field) {
        [0, 1, 2].forEach(function (e) {
          _this2.bounds.min[e] = Math.min(_this2.bounds.min[e], field.bounds.min[e]);
          _this2.bounds.max[e] = Math.max(_this2.bounds.max[e], field.bounds.max[e]);
        });
      });
      this.center = [0, 0, 0];
      [0, 1, 2].forEach(function (e) {
        _this2.center[e] = (_this2.bounds.min[e] + _this2.bounds.max[e]) / 2;
      });
    }
  }, {
    key: "requestRender",
    value: function requestRender(view) {
      if (view) {
        this.view = view;
      }

      if (this.pendingRenderRequest) {
        console.log("skipping render - pending request");
        this.requestAnotherRender = true;
        return;
      }

      this.pendingRenderRequest = window.requestAnimationFrame(this._render.bind(this));
    }
  }, {
    key: "_render",
    value: function _render() {
      var _this3 = this;

      this.pendingRenderRequest = false;

      if (!this.gl) {
        console.log("skipping render - no gl context");
        return;
      }

      if (!this.view) {
        console.log("skipping render - no view");
        return;
      } // check to see if previous render is finished


      if (false) { var reason, sync; }

      var gl = this.gl;
      gl.bindFramebuffer(gl.FRAMEBUFFER, null); // draw to the main framebuffer!

      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.useProgram(this.program); // the coordinate attribute

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderImageCoordinatesBuffer);
      var coordinateLocation = gl.getAttribLocation(this.program, "coordinate");
      gl.enableVertexAttribArray(coordinateLocation);
      gl.vertexAttribPointer(coordinateLocation, 3, gl.FLOAT, false, 0, 0); // the textureCoordinate attribute

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderImageTexureCoordinatesBuffer);
      var textureCoordinateLocation = gl.getAttribLocation(this.program, "textureCoordinate");
      gl.enableVertexAttribArray(textureCoordinateLocation);
      gl.vertexAttribPointer(textureCoordinateLocation, 2, gl.FLOAT, false, 0, 0); // the overall application uniforms, and the per-field uniforms

      Object.keys(this.uniforms).forEach(function (key) {
        _this3._setUniform(key, _this3.uniforms[key]);
      });
      var uniforms = this.view.uniforms();
      Object.keys(uniforms).forEach(function (key) {
        _this3._setUniform(key, uniforms[key]);
      });
      this.inputFields.forEach(function (field) {
        var uniforms = field.uniforms();
        Object.keys(uniforms).forEach(function (key) {
          _this3._setUniform(key, uniforms[key]);
        });
      }); // activate any field textures

      this.inputFields.forEach(function (field) {
        gl.activeTexture(gl.TEXTURE0 + field.id);

        if (field.texture) {
          gl.bindTexture(gl.TEXTURE_3D, field.texture);
        }
      });
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); // if an event requested a render while gl was working, request another

      if (this.requestAnotherRender) {
        this.requestAnotherRender = false;
        this.requestRender();
      }
    }
  }, {
    key: "perFieldSamplingShaderSource",
    value: function perFieldSamplingShaderSource() {
      var perFieldSamplingShaderSource = "";
      this.inputFields.forEach(function (field) {
        perFieldSamplingShaderSource += field.transformShaderSource();
        perFieldSamplingShaderSource += field.samplingShaderSource();
      });
      return perFieldSamplingShaderSource;
    }
  }, {
    key: "perFieldCompositingShaderSource",
    value: function perFieldCompositingShaderSource() {
      var source = "";
      this.inputFields.forEach(function (field) {
        source += "\n            if (visible".concat(field.id, " > 0) {\n              // accumulate per-field opacities and lit colors\n              sampleField").concat(field.id, "(textureUnit").concat(field.id, ",\n                                      samplePoint, gradientSize,\n                                      sampleValue, normal, gradientMagnitude);\n              transferFunction").concat(field.id, "(sampleValue, gradientMagnitude,\n                                      color, fieldOpacity);\n              colorSum += color;\n              litColor += fieldOpacity * lightingModel(samplePoint, normal, color, viewPoint);\n              opacity += fieldOpacity;\n            }\n        ");
      });
      return source;
    }
  }, {
    key: "fieldCompositingShaderSource",
    value: function fieldCompositingShaderSource() {
      var fieldCompositingShaderSource = "\n            vec3 normal;\n            float gradientMagnitude;\n            vec3 color;\n            float opacity = 0.;\n            vec3 litColor = vec3(0.);\n            float fieldOpacity = 0.;\n            vec3 fieldLitColor = vec3(0.);\n            vec3 colorSum = vec3(0.);\n  \n            ".concat(this.perFieldCompositingShaderSource(), "\n  \n            // normalize back so that litColor is mean of all inputFields weighted by opacity\n            litColor /= opacity;\n      ");
      return fieldCompositingShaderSource;
    }
  }, {
    key: "rayCompositingShaderSource",
    value: function rayCompositingShaderSource() {
      if (this.rayCompositing === "integration") {
        return "\n          // http://graphicsrunner.blogspot.com/2009/01/volume-rendering-101.html\n          if (opacity > 0.) {\n            opacity *= adjustedStep;\n            integratedPixel.rgb += (1. - integratedPixel.a) * opacity * litColor;\n            integratedPixel.a += (1. - integratedPixel.a) * opacity;\n            integratedPixel = clamp(integratedPixel, 0.0001, 0.9999);\n          }\n  \n          if (sliceMode == 1) {\n            integratedPixel.rgb = colorSum;\n            integratedPixel.a = 1.;\n          }\n  \n          tCurrent += adjustedStep;\n          if (\n              tCurrent >= tFar  // stepped out of the volume\n                ||\n              tCurrent >= viewFar // far clip plane\n                ||\n              integratedPixel.a >= .99  // pixel is saturated\n          ) {\n            break; // we can stop now\n          }\n        ";
      } else if (this.rayCompositing === "maximum") {
        return "\n  \n          // MIP rendering using alpha to store max pixel value\n          // - re-sample selected field\n          // - if its r component is max, then use summed color for this sample point\n          sampleField".concat(this.maximumCompositingField, "(textureUnit").concat(this.maximumCompositingField, ",\n                                  samplePoint, gradientSize,\n                                  sampleValue, normal, gradientMagnitude);\n          transferFunction").concat(this.maximumCompositingField, "(sampleValue, gradientMagnitude,\n                                  color, fieldOpacity);\n          if (sampleValue > integratedPixel.a) {\n            integratedPixel.rgb = colorSum;\n            integratedPixel.a = sampleValue;\n          }\n  \n          if (sliceMode == 1) {\n            integratedPixel.rgb = colorSum;\n            integratedPixel.a = 1.;\n          }\n  \n          tCurrent += adjustedStep;\n          if (\n              tCurrent >= tFar  // stepped out of the volume\n                ||\n              tCurrent >= viewFar // far clip plane\n          ) {\n            integratedPixel.a = 1.; // always returns a fully opaque value of the max sample\n            break; // we can stop now\n          }\n        ");
      }

      return null;
    }
  }, {
    key: "_vertexShaderSource",
    value: function _vertexShaderSource() {
      return "".concat(this.headerSource(), "\n        in vec3 coordinate;\n        in vec2 textureCoordinate;\n        out vec3 interpolatedTextureCoordinate;\n        void main()\n        {\n          interpolatedTextureCoordinate = vec3(textureCoordinate, .5);\n          gl_Position = vec4(coordinate, 1.);\n        }\n      ");
    }
  }, {
    key: "_fragmentShaderSource",
    value: function _fragmentShaderSource() {
      return "".concat(this.headerSource(), "\n  \n        uniform vec3 pointLight;\n        uniform vec3 viewPoint;\n        uniform vec3 viewNormal;\n        uniform vec3 viewRight;\n        uniform vec3 viewUp;\n        uniform float halfSinViewAngle;\n        uniform vec3 viewBoxMin;\n        uniform vec3 viewBoxMax;\n        uniform float viewNear;\n        uniform float viewFar;\n        uniform float gradientSize;\n        uniform int rayMaxSteps;\n        uniform float sampleStep;\n        uniform float renderCanvasWidth;\n        uniform float renderCanvasHeight;\n        uniform int sliceMode;\n        uniform float Kambient; // TODO: move to per-field\n        uniform float Kdiffuse;\n        uniform float Kspecular;\n        uniform float Shininess;\n  \n        bool intersectBox(const in vec3 rayOrigin, const in vec3 rayDirection,\n                          const in vec3 boxMin, const in vec3 boxMax,\n                          out float tNear, out float tFar)\n          // intersect ray with a box\n          // https://github.com/bozorgi/VTKMultiVolumeRayCaster/blob/master/README.pdf\n          // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm\n        {\n            // compute intersection of ray with all six bbox planes\n            vec3 invRay = vec3(1.) / rayDirection;\n            vec3 tBot = invRay * (boxMin - rayOrigin);\n            vec3 tTop = invRay * (boxMax - rayOrigin);\n  \n            // re-order intersections to find smallest and largest on each axis\n            vec3 tMin = min(tTop, tBot);\n            vec3 tMax = max(tTop, tBot);\n  \n            // find the largest tMin and the smallest tMax\n            float largest_tMin = max(max(tMin.x, tMin.y), max(tMin.x, tMin.z));\n            float smallest_tMax = min(min(tMax.x, tMax.y), min(tMax.x, tMax.z));\n  \n            tNear = largest_tMin;\n            tFar = smallest_tMax;\n  \n            return smallest_tMax > largest_tMin;\n        }\n  \n        vec3 lightingModel( in vec3 samplePoint, in vec3 normal, in vec3 color, in vec3 viewPoint )\n        {\n          // Phong lighting\n          // http://en.wikipedia.org/wiki/Phong_reflection_model\n          vec3 Cambient = color;\n          vec3 Cdiffuse = color;\n          vec3 Cspecular = vec3(1.,1.,1.);\n  \n          vec3 litColor = Kambient * Cambient;\n          vec3 pointToEye = normalize(viewPoint - samplePoint);\n  \n          if (dot(pointToEye, normal) > 0.) {\n            vec3 pointToLight = normalize(pointLight - samplePoint);\n            float lightDot = dot(pointToLight,normal);\n            vec3 lightReflection = reflect(pointToLight,normal);\n            float reflectDot = dot(lightReflection,pointToEye);\n            if (lightDot > 0.) {\n              litColor += Kdiffuse * lightDot * Cdiffuse;\n              litColor += Kspecular * pow( abs(reflectDot), Shininess ) * Cspecular;\n            }\n          }\n          return clamp(litColor, 0., 1.);\n        }\n  \n        // these are the function definitions for sampleVolume* and transferFunction*\n        // that define a field at a sample point in space\n        ").concat(this.perFieldSamplingShaderSource(), "\n  \n        // field ray caster - starts from the front and collects color and opacity\n        // contributions until fully saturated.\n        // Sample coordinate is 0->1 texture space\n        //\n        vec4 rayCast( in vec3 sampleCoordinate )\n        {\n          vec4 backgroundRGBA = vec4(.25, .25, .25, 1.);\n  \n          float aspect = renderCanvasWidth / renderCanvasHeight;\n          vec2 normalizedCoordinate = 2. * (sampleCoordinate.st -.5);\n          normalizedCoordinate.s *= aspect;\n  \n          // calculate eye ray in world space\n          vec3 eyeRayDirection;\n  \n          // ||viewNormal + u * viewRight + v * viewUp||\n          eyeRayDirection = normalize ( viewNormal\n                                      + viewRight * halfSinViewAngle * normalizedCoordinate.x\n                                      + viewUp * halfSinViewAngle * normalizedCoordinate.y );\n  \n          // should be right - TODO: doublecheck when trilinear interpolation is fixed\n          float adjustment = dot (normalize(viewNormal), eyeRayDirection);\n          float adjustedStep = sampleStep * adjustment;\n  \n          // find intersection with box, possibly terminate early\n          float tNear, tFar;\n          bool hit = intersectBox( viewPoint, eyeRayDirection, viewBoxMin, viewBoxMax, tNear, tFar );\n          if (!hit) {\n            return (backgroundRGBA);\n          }\n  \n          tNear = max(tNear, 0.);\n          tNear = max(tNear, viewNear); // near clipping plane\n          tNear /= adjustment;\n  \n          // march along ray from front, accumulating color and opacity\n          vec4 integratedPixel = vec4(0.);\n          float tCurrent = tNear;\n          float sampleValue;\n          int rayStep;\n          for(rayStep = 0; rayStep < rayMaxSteps; rayStep++) {\n  \n            vec3 samplePoint = viewPoint + eyeRayDirection * tCurrent;\n  \n            // this is the code that composites together samples\n            // from all the inputFields in the space\n            ").concat(this.fieldCompositingShaderSource(), "\n  \n            ").concat(this.rayCompositingShaderSource(), "\n          }\n  \n          return(vec4(mix(backgroundRGBA.rgb, integratedPixel.rgb, integratedPixel.a), 1.));\n        }\n  \n        in vec3 interpolatedTextureCoordinate;\n        out vec4 fragmentColor;\n        void main()\n        {\n          fragmentColor = rayCast(interpolatedTextureCoordinate);\n        }\n  \n      ");
    }
  }]);

  return RayCastRenderer;
}(_ProgrammaticGenerator.default);

exports.default = RayCastRenderer;
module.exports = exports["default"];

/***/ }),

/***/ "./src/View.js":
/*!*********************!*\
  !*** ./src/View.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _linear = _interopRequireDefault(__webpack_require__(/*! ./linear */ "./src/linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var View =
/*#__PURE__*/
function () {
  // All the parameters of the view (camera plus planes and other options)
  function View() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, View);

    var c = _linear.default.vclone;
    this.viewPoint = c(options.viewPoint) || [0, 0, -30];
    this.viewNormal = _linear.default.vnormalize(options.viewNormal || [0, 0, 1.5]);
    this.viewUp = _linear.default.vnormalize(options.viewUp || [0, -1, 0]);
    this.viewDistance = options.viewDistance || _linear.default.vlength(this.viewPoint);
    this.viewBoxMin = c(options.viewBoxMin) || [-3, -3, -3];
    this.viewBoxMax = c(options.viewBoxMax) || [3, 3, 3];
    this.viewAngle = options.viewAngle || 30;
    this.viewNear = 0;
    this.viewFar = 3e38; // basically float max

    this.look();
  }

  _createClass(View, [{
    key: "uniforms",
    value: function uniforms() {
      var halfSinViewAngle = 0.5 * Math.sin(this.viewAngle * Math.PI / 180);
      return {
        viewPoint: {
          type: "3fv",
          value: this.viewPoint
        },
        viewNormal: {
          type: "3fv",
          value: this.viewNormal
        },
        viewRight: {
          type: "3fv",
          value: this.viewRight
        },
        viewUp: {
          type: "3fv",
          value: this.viewUp
        },
        viewBoxMin: {
          type: "3fv",
          value: this.viewBoxMin
        },
        viewBoxMax: {
          type: "3fv",
          value: this.viewBoxMax
        },
        halfSinViewAngle: {
          type: "1f",
          value: halfSinViewAngle
        },
        viewNear: {
          type: "1f",
          value: this.viewNear
        },
        viewFar: {
          type: "1f",
          value: this.viewFar
        }
      };
    }
  }, {
    key: "target",
    value: function target() {
      this.viewNormal = _linear.default.vnormalize(this.viewNormal);
      return _linear.default.vplus(this.viewPoint, _linear.default.vscale(this.viewNormal, this.viewDistance));
    }
  }, {
    key: "look",
    value: function look() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var at = options.at || this.target();
      var from = options.from || this.viewPoint;
      var up = options.up || this.viewUp;
      var bounds = options.bounds;

      if (bounds) {
        this.viewBoxMin = bounds.min;
        this.viewBoxMax = bounds.max;
      }

      this.viewNormal = _linear.default.vnormalize(_linear.default.vminus(at, from));
      this.viewRight = _linear.default.vnormalize(_linear.default.vcross(this.viewNormal, up));
      this.viewUp = _linear.default.vcross(this.viewRight, this.viewNormal);
      this.viewPoint = _linear.default.vclone(from);
      this.viewDistance = _linear.default.vdistance(at, from);
    }
  }, {
    key: "slice",
    value: function slice() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var plane = options.plane || "axial";
      var offset = options.offset || 0.5;
      var thickness = options.thickness || 0;
      var bounds = options.bounds || {
        min: this.viewBoxMin,
        max: this.viewBoxMax
      };
      var magnification = options.magnification || 1;

      var target = options.target || _linear.default.vscale(_linear.default.vplus(bounds.min, bounds.max), offset);

      var extent = options.extent || _linear.default.vminus(bounds.max, bounds.min); // TODO: doublecheck these with Slicer


      switch (plane) {
        case "axial":
          {
            // looking from below at LPS slice
            this.viewRight = [1, 0, 0];
            this.viewUp = [0, -1, 0];
            this.viewNormal = [0, 0, 1];
            this.viewPoint = [0, 0, -1];
          }
          break;

        case "sagittal":
          {
            // nose pointing left
            this.viewRight = [0, 1, 0];
            this.viewUp = [0, 0, 1];
            this.viewNormal = [-1, 0, 0];
            this.viewPoint = [1, 0, 0];
          }
          break;

        case "coronal":
          {
            this.viewRight = [1, 0, 0];
            this.viewUp = [0, 0, 1];
            this.viewNormal = [0, 1, 0];
            this.viewPoint = [0, -1, 0];
          }
          break;

        default:
          {
            console.log("Unknown slice plane", plane);
          }
      }

      var extentRight = _linear.default.vlength(_linear.default.vdot(extent, this.viewRight));

      var windowRight = extentRight / magnification;
      this.viewDistance = windowRight / Math.tan(this.viewAngle * Math.PI / 180);

      var viewOffset = _linear.default.vscale(this.viewPoint, this.viewDistance);

      this.viewPoint = _linear.default.vplus(target, viewOffset);
      this.viewNear = this.viewDistance - 0.5 * thickness;
      this.viewFar = this.viewDistance + 0.5 * thickness;
    }
  }, {
    key: "orbit",
    value: function orbit(rightward, upward) {
      var target = this.target();

      var vTargetToOrigin = _linear.default.vscale(target, -1);

      var mTargetToOrigin = _linear.default.mtranslate(vTargetToOrigin);

      var mAboutUp = _linear.default.mrotate(this.viewUp, rightward);

      var mAboutRight = _linear.default.mrotate(this.viewRight, upward);

      var mTargetFromOrigin = _linear.default.mtranslate(this.target());

      var rotation = _linear.default.mmultiply(mTargetFromOrigin, _linear.default.mmultiply(mAboutRight, _linear.default.mmultiply(mAboutUp, mTargetToOrigin)));

      var newViewPoint = _linear.default.mvmultiply(rotation, [].concat(_toConsumableArray(this.viewPoint), [1])).slice(0, 3);

      this.look({
        from: newViewPoint,
        at: target
      });
    }
  }]);

  return View;
}();

exports.default = View;
module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/Field.js":
/*!*****************************!*\
  !*** ./src/fields/Field.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ImageField = _interopRequireDefault(__webpack_require__(/*! ./ImageField */ "./src/fields/ImageField.js"));

var _SegmentationField = _interopRequireDefault(__webpack_require__(/*! ./SegmentationField */ "./src/fields/SegmentationField.js"));

var _TransformField = _interopRequireDefault(__webpack_require__(/*! ./TransformField */ "./src/fields/TransformField.js"));

var _dcmjs = _interopRequireDefault(__webpack_require__(/*! dcmjs */ "./node_modules/dcmjs/build/dcmje.es.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Field =
/*#__PURE__*/
function () {
  function Field() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Field);

    this.useIntegerTextures = Field.useIntegerTextures;
    this.id = Field.nextId;
    this.texture = undefined;
    this.modifiedTime = Number.MAX_VALUE;
    this.updatedTime = 0;
    this.bounds = undefined; // the spatial extent of the field.
    // undefined means there is no bound, otherwise
    // an object with min and max
    // viewing parameters

    this.visible = 1; // integer so it can be passed as a uniform

    this.rgba = options.rgba || [1, 1, 1, 1]; // base color

    this.rgba = this.rgba.map(function (e) {
      return e * 1.00001;
    }); // hack to make it floating point

    this.gradientOpacityScale = options.gradientOpacityScale || 0.0005;
    this.generator = options.generator || undefined; // the generator that populates the texture
    // transform parameters

    this.transformGain = options.transformGain || 1; // for visualizing/animating/exaggerating transform

    this.transformField = undefined; // the field that defines the deformation

    if (this.useIntegerTextures) {
      this.samplerType = "isampler3D";
    } else {
      this.samplerType = "sampler3D";
    }

    Field.nextId++; // keep track of IDs statically for class
  }

  _createClass(Field, [{
    key: "analyze",
    value: function analyze() {} // calculate things like bounds from the constructor input
    // - this method is called by the final concrete subtype and
    //   every subclass calls the superclass
    // user of this class is responsible for calling modified
    // after making changes that require updating the gl representation

  }, {
    key: "modified",
    value: function modified() {
      this.modifiedTime = window.performance.now(); // TODO: maybe use incrementing Number
    }
  }, {
    key: "updated",
    value: function updated() {
      this.updatedTime = window.performance.now();
    }
  }, {
    key: "needsUpdate",
    value: function needsUpdate() {
      return this.updatedTime < this.modifiedTime;
    } // ShaderSources return a string with these functions implemented in GLSL

  }, {
    key: "transformShaderSource",
    value: function transformShaderSource() {
      if (this.transformField) {
        return "\n          uniform float transformGain".concat(this.id, ";\n          vec3 transformPoint").concat(this.id, "(const in vec3 samplePoint)\n          {\n            vec3 transformSTPPoint = patientToTexture").concat(this.transformField.id, "(samplePoint);\n            vec3 displacement = texture(textureUnit").concat(this.transformField.id, ", transformSTPPoint).xyz;\n            return(samplePoint + transformGain").concat(this.id, " * displacement);\n          }\n        ");
      }

      return "\n          vec3 transformPoint".concat(this.id, "(const in vec3 samplePoint)\n          {\n            return(samplePoint);\n          }\n        ");
    }
  }, {
    key: "samplingShaderSource",
    value: function samplingShaderSource() {
      // return a string with these functions implemented in GLSL
      return "\n        void transferFunction".concat(this.id, " (const in float sampleValue,\n                                         const in float gradientMagnitude,\n                                         out vec3 color,\n                                         out float opacity)\n        {\n        }\n        void sampleField").concat(this.id, " (const in ").concat(this.samplerType, " textureUnit,\n                                    const in vec3 samplePointPatient,\n                                    const in float gradientSize,\n                                    out float sampleValue,\n                                    out vec3 normal,\n                                    out float gradientMagnitude)\n        {\n        }\n      ");
    }
  }, {
    key: "uniforms",
    value: function uniforms() {
      // return an object of the current uniform values
      var u = {};
      u["visible" + this.id] = {
        type: "1i",
        value: this.visible
      };
      u["rgba" + this.id] = {
        type: "4fv",
        value: this.rgba
      };
      u["gradientOpacityScale" + this.id] = {
        type: "1f",
        value: this.gradientOpacityScale
      };
      u["textureUnit" + this.id] = {
        type: "1i",
        value: this.id
      };

      if (this.transformField) {
        u["transformGain" + this.id] = {
          type: "1f",
          value: this.transformGain
        };
      }

      return u;
    }
  }, {
    key: "fieldToTexture",
    value: function fieldToTexture(gl) {
      // ensure the field data is stored in the texture
      // unit associated with this.id in the gl context
      // returns true if subclass also needs to update.
      // Final child class should call this.updated().
      var needsUpdate = this.needsUpdate();

      if (needsUpdate) {
        if (this.texture) {
          gl.deleteTexture(this.texture);
        }

        this.texture = gl.createTexture();
        gl.activeTexture(gl.TEXTURE0 + this.id);
        gl.bindTexture(gl.TEXTURE_3D, this.texture);
      }

      return needsUpdate;
    }
  }]);

  return Field;
}();

exports.default = Field;
Field.nextId = 0; // TODO: for now this is texture unit

Field.useIntegerTextures = false; // default, but possibly overridden based on gl env
// array of fields from dataset

Field.fromDataset = function (dataset) {
  var fields = [];
  var sopClassName = _dcmjs.default.data.DicomMetaDictionary.sopClassNamesByUID[dataset.SOPClassUID];

  switch (sopClassName) {
    case "CTImage":
    case "MRImage":
    case "EnhancedCTImage":
    case "LegacyConvertedEnhancedCTImage":
    case "UltrasoundMultiframeImage":
    case "EnhancedMRImage":
    case "MRSpectroscopy":
    case "EnhancedMRColorImage":
    case "LegacyConvertedEnhancedMRImage":
    case "UltrasoundImage":
    case "EnhancedUSVolume":
    case "SecondaryCaptureImage":
    case "USImage":
    case "PETImage":
    case "EnhancedPETImage":
    case "LegacyConvertedEnhancedPETImage":
      {
        fields = [new _ImageField.default({
          dataset: dataset
        })];
      }
      break;

    case "Segmentation":
      {
        fields = _SegmentationField.default.fieldsFromDataset({
          dataset: dataset
        });
      }
      break;

    case "DeformableSpatialRegistration":
      {
        fields = [new _TransformField.default({
          dataset: dataset
        })];
      }
      break;

    default:
      {
        console.error("Cannot process this dataset type ", dataset);
      }

    /* TODO
       "Raw Data",
       "Spatial Registration",
       "Spatial Fiducials",
       "Real World Value Mapping",
       "BasicTextSR",
       "EnhancedSR",
       "ComprehensiveSR",
     */
  }

  return fields;
};

module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/ImageField.js":
/*!**********************************!*\
  !*** ./src/fields/ImageField.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PixelField2 = _interopRequireDefault(__webpack_require__(/*! ./PixelField.js */ "./src/fields/PixelField.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ImageField =
/*#__PURE__*/
function (_PixelField) {
  _inherits(ImageField, _PixelField);

  function ImageField() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ImageField);

    _this = _possibleConstructorReturn(this, (ImageField.__proto__ || Object.getPrototypeOf(ImageField)).call(this, options));

    _this.analyze();

    return _this;
  }

  _createClass(ImageField, [{
    key: "analyze",
    value: function analyze() {
      _get(ImageField.prototype.__proto__ || Object.getPrototypeOf(ImageField.prototype), "analyze", this).call(this);

      this.windowCenter = Number(this.dataset.WindowCenter[0]);
      this.windowWidth = Number(this.dataset.WindowWidth[0]);
      this.rescaleIntercept = Number(this.dataset.RescaleIntercept);
      this.rescaleSlope = Number(this.dataset.RescaleSlope);
      this.samplesPerPixel = Number(this.dataset.SamplesPerPixel);

      if (this.dataset.BitsAllocated !== 16) {
        console.error("Can only handle 16 bit data");
      }

      if (!(this.dataset.SamplesPerPixel in [1, 3])) {
        console.error("Can only handle 1 or 3 samples per pixel");
      } // array of control points in form [value, {r, g, b, a}]


      this.transferFunction = [[0, {
        r: 0,
        g: 0,
        b: 0,
        a: 0
      }], [1, {
        r: 1,
        g: 1,
        b: 1,
        a: 1
      }]];
    }
  }, {
    key: "statistics",
    value: function statistics() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var statistics = {};
      statistics.bins = options.bins || 256;
      var samples = options.samples || 1000;
      var imageArray;

      if (this.dataset.PixelRepresentation === 1) {
        imageArray = new Int16Array(this.dataset.PixelData);
      } else {
        imageArray = new Uint16Array(this.dataset.PixelData);
      }

      var min = 3e38;
      var max = -3e38;

      for (var index = 0; index < samples; index++) {
        var sampleIndex = Math.floor(imageArray.length * Math.random());
        min = Math.min(min, imageArray[sampleIndex]);
        max = Math.max(max, imageArray[sampleIndex]);
      }

      statistics.range = {
        min: min,
        max: max
      };
      var histogram = new Int32Array(statistics.bins);
      var binScale = statistics.bins / (max - min);

      for (var _index = 0; _index < samples; _index++) {
        var _sampleIndex = Math.floor(imageArray.length * Math.random());

        var bin = Math.floor((imageArray[_sampleIndex] - min) * binScale);
        histogram[bin] += 1;
      }

      statistics.histogram = histogram;
      statistics.maxBin = 0;
      statistics.maxBinValue = 0;

      for (var _bin = 0; _bin < statistics.bins; _bin++) {
        if (statistics.histogram[_bin] > statistics.maxBinValue) {
          statistics.maxBin = _bin;
          statistics.maxBinValue = statistics.histogram[_bin];
        }
      }

      return statistics;
    }
  }, {
    key: "uniforms",
    value: function uniforms() {
      // TODO: need to be keyed to id (in a struct)
      var u = _get(ImageField.prototype.__proto__ || Object.getPrototypeOf(ImageField.prototype), "uniforms", this).call(this);

      u["windowCenter" + this.id] = {
        type: "1f",
        value: this.windowCenter
      };
      u["windowWidth" + this.id] = {
        type: "1f",
        value: this.windowWidth
      };
      u["rescaleSlope" + this.id] = {
        type: "1f",
        value: this.rescaleSlope
      };
      u["rescaleIntercept" + this.id] = {
        type: "1f",
        value: this.rescaleIntercept
      }; // add transfer function control point uniforms

      for (var index = 0; index < this.transferFunction.length; index++) {
        var _this$transferFunctio = _slicedToArray(this.transferFunction[index], 2),
            value = _this$transferFunctio[0],
            rgba = _this$transferFunctio[1];

        rgba = [rgba.r, rgba.g, rgba.b, rgba.a];
        u["tfcp" + this.id + "value" + index] = {
          type: "1f",
          value: value
        };
        u["tfcp" + this.id + "rgba" + index] = {
          type: "4fv",
          value: rgba
        };
      }

      return u;
    }
  }, {
    key: "rescaleSource",
    value: function rescaleSource() {
      return "\n        uniform float rescaleSlope".concat(this.id, ";\n        uniform float rescaleIntercept").concat(this.id, ";\n        float rescale").concat(this.id, "(const in float sampleValue) {\n          return(rescaleSlope").concat(this.id, " * sampleValue + rescaleIntercept").concat(this.id, ");\n        }\n      ");
    }
  }, {
    key: "transferFunctionControlPointUniformSource",
    value: function transferFunctionControlPointUniformSource() {
      var uniformSource = "\n";

      for (var index = 0; index < this.transferFunction.length; index++) {
        uniformSource += "uniform float tfcp".concat(this.id, "value").concat(index, ";\n");
        uniformSource += "uniform vec4 tfcp".concat(this.id, "rgba").concat(index, ";\n");
      }

      return uniformSource;
    }
  }, {
    key: "transferFunctionControlPointLookupSource",
    value: function transferFunctionControlPointLookupSource() {
      var lookupSource = "\n";
      var index = 0;
      lookupSource += "\n        if (pixelValue < tfcp".concat(this.id, "value").concat(index, ") {\n          color = tfcp").concat(this.id, "rgba").concat(index, ".rgb;\n          opacity = tfcp").concat(this.id, "rgba").concat(index, ".a;\n        }\n");

      for (index = 1; index < this.transferFunction.length; index++) {
        lookupSource += "\n          else if (pixelValue < tfcp".concat(this.id, "value").concat(index, ") {\n            float proportion = (pixelValue - tfcp").concat(this.id, "value").concat(index - 1, ") /\n              (tfcp").concat(this.id, "value").concat(index, " - tfcp").concat(this.id, "value").concat(index - 1, ");\n            color = mix( tfcp").concat(this.id, "rgba").concat(index - 1, ".rgb,\n                         tfcp").concat(this.id, "rgba").concat(index, ".rgb,\n                         proportion );\n            opacity = mix( tfcp").concat(this.id, "rgba").concat(index - 1, ".a,\n                           tfcp").concat(this.id, "rgba").concat(index, ".a,\n                           proportion );\n          }\n");
      }

      lookupSource += "\n        else {\n          color = tfcp".concat(this.id, "rgba").concat(index - 1, ".rgb;\n        }\n");
      return lookupSource;
    }
  }, {
    key: "transferFunctionSource",
    value: function transferFunctionSource() {
      return "\n        uniform float windowCenter".concat(this.id, ";\n        uniform float windowWidth").concat(this.id, ";\n        uniform vec4 rgba").concat(this.id, ";\n        uniform float gradientOpacityScale").concat(this.id, ";\n        ").concat(this.transferFunctionControlPointUniformSource(), "\n        void transferFunction").concat(this.id, " (const in float sampleValue,\n                                         const in float gradientMagnitude,\n                                         out vec3 color,\n                                         out float opacity)\n        {\n          float pixelValue = 0.5 +\n                  (sampleValue - (windowCenter").concat(this.id, "-0.5))\n                    / (windowWidth").concat(this.id, "-1.);\n          pixelValue = clamp( pixelValue, 0., 1. );\n  \n          if (sliceMode == 1) {\n            color = vec3(pixelValue);\n            opacity = rgba").concat(this.id, ".a;\n          } else {\n            ").concat(this.transferFunctionControlPointLookupSource(), "\n            float gradientContribution = gradientMagnitude * gradientOpacityScale").concat(this.id, ";\n            color += gradientContribution * rgba").concat(this.id, ".rgb;\n            opacity += gradientContribution;\n            opacity *= rgba").concat(this.id, ".a;\n          }\n          color *= rgba").concat(this.id, ".rgb;\n        }\n      ");
    }
  }, {
    key: "fieldToTexture",
    value: function fieldToTexture(gl) {
      // allocate and fill a float 3D texture for the image data.
      // cannot be subclassed.
      var needsUpdate = _get(ImageField.prototype.__proto__ || Object.getPrototypeOf(ImageField.prototype), "fieldToTexture", this).call(this, gl);

      if (needsUpdate) {
        var imageArray;

        if (this.dataset.PixelRepresentation === 1) {
          imageArray = new Int16Array(this.dataset.PixelData);
        } else {
          imageArray = new Uint16Array(this.dataset.PixelData);
        }

        var imageTextureArray;
        var pixelInternalFormat; // format of the target texture

        var pixelFormat; // format of the passed array

        var pixelType; // data type of passed array

        var textureFilters;

        if (this.useIntegerTextures) {
          imageTextureArray = new Int16Array(imageArray);
          pixelInternalFormat = gl.R16I;
          pixelFormat = gl.RED_INTEGER;
          pixelType = gl.SHORT;
          textureFilters = gl.NEAREST;
        } else {
          imageTextureArray = new Float32Array(imageArray);
          pixelInternalFormat = gl.R16F;
          pixelFormat = gl.RED;
          pixelType = gl.FLOAT;
          textureFilters = gl.LINEAR;
        }

        var _this$pixelDimensions = _slicedToArray(this.pixelDimensions, 3),
            w = _this$pixelDimensions[0],
            h = _this$pixelDimensions[1],
            d = _this$pixelDimensions[2];

        gl.texStorage3D(gl.TEXTURE_3D, 1, pixelInternalFormat, w, h, d);

        if (!this.generator) {
          // only transfer the data if there's no generator that will fill it in
          gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, // level, offsets
          w, h, d, pixelFormat, pixelType, imageTextureArray);
        }

        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, textureFilters);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, textureFilters);
        this.updated();
      }
    }
  }]);

  return ImageField;
}(_PixelField2.default);

exports.default = ImageField;
module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/PixelField.js":
/*!**********************************!*\
  !*** ./src/fields/PixelField.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Field2 = _interopRequireDefault(__webpack_require__(/*! ./Field */ "./src/fields/Field.js"));

var _glMatrix = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/src/gl-matrix.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var PixelField =
/*#__PURE__*/
function (_Field) {
  _inherits(PixelField, _Field);

  function PixelField() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PixelField);

    _this = _possibleConstructorReturn(this, (PixelField.__proto__ || Object.getPrototypeOf(PixelField)).call(this, options));
    _this.dataset = options.dataset || {};
    return _this;
  }

  _createClass(PixelField, [{
    key: "dimensions",
    value: function dimensions() {
      return [this.dataset.Columns, this.dataset.Rows, this.dataset.NumberOfFrames].map(Number);
    }
  }, {
    key: "orientation",
    value: function orientation() {
      return this.dataset.SharedFunctionalGroupsSequence.PlaneOrientation.ImageOrientationPatient.map(Number);
    }
  }, {
    key: "sliceStepFromOrientation",
    value: function sliceStepFromOrientation(orientation) {
      var columnStepToPatient = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(orientation.slice(0, 3)));

      var rowStepToPatient = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(orientation.slice(3, 6)));

      var sliceStepToPatient = _glMatrix.vec3.create();

      _glMatrix.vec3.cross(sliceStepToPatient, columnStepToPatient, rowStepToPatient);

      return sliceStepToPatient;
    }
  }, {
    key: "spacing",
    value: function spacing() {
      var pixelMeasures = this.dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence; // NB: DICOM PixelSpacing is defined as Row then Column, unlike ImageOrientationPatient
      // Convention for fields is always that pixel space is column, row, slice so we swap
      // the first two entries here.

      return [pixelMeasures.PixelSpacing[1], pixelMeasures.PixelSpacing[0], pixelMeasures.SpacingBetweenSlices].map(Number);
    }
  }, {
    key: "position",
    value: function position(frame) {
      frame = frame || 0;
      var perFrameGroups = this.dataset.PerFrameFunctionalGroupsSequence;
      return perFrameGroups[frame].PlanePosition.ImagePositionPatient.map(Number);
    }
  }, {
    key: "analyze",
    value: function analyze() {
      _get(PixelField.prototype.__proto__ || Object.getPrototypeOf(PixelField.prototype), "analyze", this).call(this); // examine the dataset and calculate intermediate values needed for rendering
      // TODO: patientToPixel and related matrices should be generalized to functions.
      // TODO: transfer function parameters could be textures.


      this.pixelDimensions = this.dimensions();

      var _this$spacing = this.spacing(),
          _this$spacing2 = _slicedToArray(_this$spacing, 3),
          spacingBetweenColumns = _this$spacing2[0],
          spacingBetweenRows = _this$spacing2[1],
          spacingBetweenSlices = _this$spacing2[2];

      var orientation = this.orientation();
      var sliceStepToPatient = this.sliceStepFromOrientation(orientation);

      var columnStepToPatient = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(orientation.slice(0, 3)));

      var rowStepToPatient = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(orientation.slice(3, 6)));

      _glMatrix.vec3.scale(columnStepToPatient, columnStepToPatient, spacingBetweenColumns);

      _glMatrix.vec3.scale(rowStepToPatient, rowStepToPatient, spacingBetweenRows);

      _glMatrix.vec3.scale(sliceStepToPatient, sliceStepToPatient, spacingBetweenSlices);

      var origin = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(this.position(0)));

      if (this.pixelDimensions[2] > 1) {
        var position1 = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(this.position(1)));

        var originToPosition1 = _glMatrix.vec3.create();

        _glMatrix.vec3.subtract(originToPosition1, position1, origin);

        if (_glMatrix.vec3.dot(sliceStepToPatient, originToPosition1) < 0) {
          _glMatrix.vec3.scale(sliceStepToPatient, sliceStepToPatient, -1);
        }
      } // matrix from pixel coordinates IJK (0 to N-1) to sampling space (patient, mm) and inverse


      this.pixelToPatient = _glMatrix.mat4.fromValues.apply(mat4, _toConsumableArray(columnStepToPatient).concat([0], _toConsumableArray(rowStepToPatient), [0], _toConsumableArray(sliceStepToPatient), [0], _toConsumableArray(origin), [1]));

      var patientToPixel = _glMatrix.mat4.create();

      _glMatrix.mat4.invert(patientToPixel, this.pixelToPatient);

      this.patientToPixel = patientToPixel.valueOf(); // TODO:
      // the inverse transpose of the upper 3x3 of the pixelToPatient matrix,
      // which is the transpose of the upper 3x3 of the patientToPixel matrix

      /*
        let p = this.patientToPixel;
        this.normalPixelToPatient = [
          p[0][0], p[0][1], p[0][2],
          p[1][0], p[1][1], p[1][2],
          p[2][0], p[2][1], p[2][2],
        ];
        */
      // the bounds are the outer corners of the very first and very last
      // pixels of the dataset measured in pixel space

      var halfSpacings = _glMatrix.vec4.fromValues(0.5, 0.5, 0.5, 0);

      _glMatrix.vec4.transformMat4(halfSpacings, halfSpacings, this.pixelToPatient);

      var firstCorner = _glMatrix.vec3.create();

      _glMatrix.vec3.subtract(firstCorner, origin, halfSpacings);

      var dimensions = _glMatrix.vec4.fromValues.apply(vec4, _toConsumableArray(this.pixelDimensions).concat([1]));

      var secondCorner4 = _glMatrix.vec4.create();

      _glMatrix.vec4.transformMat4(secondCorner4, dimensions, this.pixelToPatient);

      _glMatrix.vec4.subtract(secondCorner4, secondCorner4, halfSpacings);

      var secondCorner = _glMatrix.vec3.fromValues.apply(vec3, _toConsumableArray(secondCorner4.valueOf().slice(0, 3)));

      var min = _glMatrix.vec3.create();

      var max = _glMatrix.vec3.create();

      _glMatrix.vec3.min(min, firstCorner, secondCorner);

      _glMatrix.vec3.max(max, firstCorner, secondCorner);

      this.bounds = {
        min: min.valueOf(),
        max: max.valueOf()
      };

      var center = _glMatrix.vec3.create();

      _glMatrix.vec3.add(center, min, max);

      _glMatrix.vec3.scale(center, center, 0.5);

      this.center = center.valueOf();
    }
  }, {
    key: "uniforms",
    value: function uniforms() {
      var u = _get(PixelField.prototype.__proto__ || Object.getPrototypeOf(PixelField.prototype), "uniforms", this).call(this); // u['normalPixelToPatient'+this.id] = {type: "Matrix3fv", value: this.normalPixelToPatient},


      u["patientToPixel" + this.id] = {
        type: "Matrix4fv",
        value: this.patientToPixel
      };
      u["pixelToPatient" + this.id] = {
        type: "Matrix4fv",
        value: this.pixelToPatient
      };
      u["pixelDimensions" + this.id] = {
        type: "3iv",
        value: this.pixelDimensions
      };
      var pixelToTexture = this.pixelDimensions.map(function (e) {
        return 1 / e;
      });
      u["pixelToTexture" + this.id] = {
        type: "3fv",
        value: pixelToTexture
      };
      return u;
    }
  }, {
    key: "fieldToTexture",
    value: function fieldToTexture(gl) {
      // common texture operations for all pixel-based fields
      var needsUpdate = _get(PixelField.prototype.__proto__ || Object.getPrototypeOf(PixelField.prototype), "fieldToTexture", this).call(this, gl);

      if (needsUpdate) {
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_BASE_LEVEL, 0);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAX_LEVEL, 0);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
      }

      return needsUpdate;
    }
  }, {
    key: "rescaleSource",
    value: function rescaleSource() {
      // identity, but overridden for images
      return "\n        float rescale".concat(this.id, "(const in float sampleValue) {\n          return(sampleValue);\n        }\n      ");
    }
  }, {
    key: "transferFunctionSource",
    value: function transferFunctionSource() {
      // null, but overridden for images and segmentations
      return "\n        void transferFunction".concat(this.id, " (const in float sampleValue,\n                                         const in float gradientMagnitude,\n                                         out vec3 color,\n                                         out float opacity)\n        {\n          color = vec3(0., 0., 0.);\n          opacity = 0.;\n        }\n      ");
    }
  }, {
    key: "samplingShaderSource",
    value: function samplingShaderSource() {
      return "\n        uniform highp ".concat(this.samplerType, " textureUnit").concat(this.id, ";\n  \n        ").concat(this.rescaleSource(), "\n        ").concat(this.transferFunctionSource(), "\n  \n        uniform int visible").concat(this.id, ";\n        uniform mat4 patientToPixel").concat(this.id, ";\n        uniform mat4 pixelToPatient").concat(this.id, ";\n        // uniform mat3 normalPixelToPatient").concat(this.id, "; not currently used\n        uniform ivec3 pixelDimensions").concat(this.id, ";\n  \n        vec3 patientToTexture").concat(this.id, "(const in vec3 patientPoint)\n        {\n          // stpPoint is in 0-1 texture coordinates, meaning that it\n          // is the patientToPixel transform scaled by the inverse\n          // pixel dimensions.\n          vec3 pixelDimensions = vec3(pixelDimensions").concat(this.id, ");\n          vec3 dimensionsInverse = vec3(1.) / pixelDimensions;\n          vec3 stpPoint = (patientToPixel").concat(this.id, " * vec4(patientPoint, 1.)).xyz;\n          stpPoint *= dimensionsInverse;\n          return(stpPoint);\n        }\n  \n        vec3 textureToPatient").concat(this.id, "(const in vec3 stpPoint)\n        {\n          // inverse operation of patientToTexture\n          vec3 pixelDimensions = vec3(pixelDimensions").concat(this.id, ");\n          vec3 patientPoint = (pixelToPatient").concat(this.id, " * vec4(pixelDimensions * stpPoint, 1.)).xyz;\n          return(patientPoint);\n        }\n  \n        void sampleTexture").concat(this.id, "(const in ").concat(this.samplerType, " textureUnit,\n                                     const in vec3 patientPoint,\n                                     const in float gradientSize,\n                                     out float sampleValue,\n                                     out vec3 normal,\n                                     out float gradientMagnitude)\n        {\n  \n          #define SAMPLE(p) rescale").concat(this.id, "(float( texture(textureUnit, p).r ))\n  \n          vec3 stpPoint = patientToTexture").concat(this.id, "(patientPoint);\n          sampleValue = SAMPLE(stpPoint);\n  \n          // central difference sample gradient (P is +1, N is -1)\n          // p : point in patient space\n          // o : offset vector in patient space along dimension\n          vec3 sN = vec3(0.);\n          vec3 sP = vec3(0.);\n          vec3 offset = vec3(0.);\n          for (int i = 0; i < 3; i++) {\n            offset[i] = gradientSize;\n            sP[i] = SAMPLE(patientToTexture").concat(this.id, "(patientPoint + offset));\n            offset[i] = -gradientSize;\n            sN[i] = SAMPLE(patientToTexture").concat(this.id, "(patientPoint + offset));\n            offset[i] = 0.;\n          }\n          vec3 gradient = vec3( (sP[0]-sN[0]),\n                                (sP[1]-sN[1]),\n                                (sP[2]-sN[2]) );\n          gradientMagnitude = length(gradient);\n          normal = gradient * 1./gradientMagnitude;\n  \n          #undef SAMPLE\n        }\n  \n        void sampleField").concat(this.id, " (const in ").concat(this.samplerType, " textureUnit,\n                                    const in vec3 samplePointPatient,\n                                    const in float gradientSize,\n                                    out float sampleValue,\n                                    out vec3 normal,\n                                    out float gradientMagnitude)\n        {\n          // samplePoint is in patient coordinates, stp is texture coordinates\n          vec3 samplePoint = transformPoint").concat(this.id, "(samplePointPatient);\n          vec3 stpPoint = patientToTexture").concat(this.id, "(samplePoint);\n  \n          // trivial reject outside\n          if (any(lessThan(stpPoint, vec3(0.)))\n               || any(greaterThan(stpPoint,vec3(1.)))) {\n            sampleValue = 0.;\n            normal = vec3(0.);\n            gradientMagnitude = 0.;\n          } else {\n            sampleTexture").concat(this.id, "(textureUnit, samplePoint, gradientSize,\n                                    sampleValue, normal, gradientMagnitude);\n          }\n        }\n      ");
    }
  }]);

  return PixelField;
}(_Field2.default);

exports.default = PixelField;
module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/SegmentationField.js":
/*!*****************************************!*\
  !*** ./src/fields/SegmentationField.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PixelField2 = _interopRequireDefault(__webpack_require__(/*! ./PixelField */ "./src/fields/PixelField.js"));

var _dcmjs = _interopRequireDefault(__webpack_require__(/*! dcmjs */ "./node_modules/dcmjs/build/dcmje.es.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SegmentationField =
/*#__PURE__*/
function (_PixelField) {
  _inherits(SegmentationField, _PixelField);

  function SegmentationField() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationField);

    _this = _possibleConstructorReturn(this, (SegmentationField.__proto__ || Object.getPrototypeOf(SegmentationField)).call(this, options));
    _this.samplerType = "sampler3D";

    _this.analyze();

    return _this;
  }

  _createClass(SegmentationField, [{
    key: "unpack",
    value: function unpack() {
      // convert BitsAllocated, BitsStored == 1 dataset to
      // 0-255 Uint8Array pixel data
      // TODO: this could be moved to the SegmentationNormalizer
      // TODO: for segmentation generators to create valid SegmentationFields
      //       this code will need to be made conditional on the BitsAllocated
      var _map = [this.dataset.Rows, this.dataset.Columns, this.dataset.NumberOfFrames].map(Number),
          _map2 = _slicedToArray(_map, 3),
          columns = _map2[0],
          rows = _map2[1],
          slices = _map2[2];

      var sliceSize = rows * columns;
      var packedPixelData = new Uint8Array(this.dataset.PixelData);
      var bytesPerPackedRow = Math.ceil(rows / 8);
      var packedSliceSize = rows * bytesPerPackedRow;
      var pixelData = new Uint8Array(slices * rows * columns);

      for (var slice = 0; slice < slices; slice++) {
        for (var row = 0; row < rows; row++) {
          var packedRowIndex = slice * packedSliceSize + row * bytesPerPackedRow;

          for (var column = 0; column < columns; column++) {
            var columnByteIndex = Math.floor(column / 8);
            var packedIndex = packedRowIndex + columnByteIndex;
            var columnBitIndex = column % 8;
            var mask = 1 << columnBitIndex;
            var unpackedValue = (packedPixelData[packedIndex] & mask) >> columnBitIndex;
            pixelData[slice * sliceSize + row * columns + column] = 255 * unpackedValue;
          }
        }
      }

      return pixelData;
    }
  }, {
    key: "analyze",
    value: function analyze() {
      _get(SegmentationField.prototype.__proto__ || Object.getPrototypeOf(SegmentationField.prototype), "analyze", this).call(this);

      if (this.dataset.BitsAllocated !== 1) {
        console.warn(this, "Can only render 1 bit data");
      }

      var sharedGroups = this.dataset.SharedFunctionalGroupsSequence;
      var pixelMeasures = sharedGroups.PixelMeasuresSequence;

      if (pixelMeasures.SpacingBetweenSlices !== pixelMeasures.SliceThickness) {
        console.warn("SpacingBetweenSlices and SliceThickness should be equal for SEG");
        console.warn(pixelMeasures.SpacingBetweenSlices + " !== " + pixelMeasures.SliceThickness);
      }

      this.rgba = _dcmjs.default.data.Colors.dicomlab2RGB(this.dataset.Segment[0].RecommendedDisplayCIELabValue);
      this.rgba.push(1);
      this.gradientOpacityScale = 1;
    }
  }, {
    key: "uniforms",
    value: function uniforms() {
      var u = _get(SegmentationField.prototype.__proto__ || Object.getPrototypeOf(SegmentationField.prototype), "uniforms", this).call(this);

      return u;
    }
  }, {
    key: "transferFunctionSource",
    value: function transferFunctionSource() {
      return "\n        uniform vec4 rgba".concat(this.id, ";\n        uniform float gradientOpacityScale").concat(this.id, ";\n        void transferFunction").concat(this.id, " (const in float sampleValue,\n                                         const in float gradientMagnitude,\n                                         out vec3 color,\n                                         out float opacity)\n        {\n          color = vec3(0., 0., 0.);\n          opacity = 0.;\n          if (sampleValue > 0.) {\n            color = sampleValue * rgba").concat(this.id, ".rgb;\n            opacity = rgba").concat(this.id, ".a * gradientMagnitude * gradientOpacityScale").concat(this.id, ";\n          }\n        }\n      ");
    }
  }, {
    key: "fieldToTexture",
    value: function fieldToTexture(gl) {
      // cannot be subclassed.
      var needsUpdate = _get(SegmentationField.prototype.__proto__ || Object.getPrototypeOf(SegmentationField.prototype), "fieldToTexture", this).call(this, gl);

      if (needsUpdate) {
        var _this$pixelDimensions = _slicedToArray(this.pixelDimensions, 3),
            w = _this$pixelDimensions[0],
            h = _this$pixelDimensions[1],
            d = _this$pixelDimensions[2];

        var byteArray = this.unpack(); // for now, don't save unpacked pixel data

        gl.texStorage3D(gl.TEXTURE_3D, 1, gl.R8, w, h, d);
        gl.texSubImage3D(gl.TEXTURE_3D, 0, // level, offsets
        0, 0, 0, w, h, d, gl.RED, gl.UNSIGNED_BYTE, byteArray);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        this.updated();
      }
    }
  }]);

  return SegmentationField;
}(_PixelField2.default);

exports.default = SegmentationField;

SegmentationField.fieldsFromDataset = function (options) {
  // make one dataset per segment and a corresponding field
  // Always use 1-based indexing for segmentNumber
  if (!options.dataset) {
    return [];
  }

  if (options.dataset.NumberOfFrames !== options.dataset.PerFrameFunctionalGroupsSequence.length) {
    console.error("Number of frames does not match number of functional groups");
  }

  var fields = []; // first, make a new dataset per segment

  var segmentDatasets = ["Empty Dataset 0"];
  var jsonDataset = JSON.stringify(options.dataset);
  var segments = options.dataset.Segment;

  if (!(segments.length > 0)) {
    segments = [options.dataset.Segment];
  }

  segments.forEach(function (segment) {
    var segmentDataset = JSON.parse(jsonDataset);
    segmentDataset.Segment = [segment];
    segmentDatasets.push(segmentDataset);
  }); // next make a list of frames per segment

  var segmentGroupLists = ["Empty GroupList 0"];
  options.dataset.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {
    var segmentNumber = functionalGroup.SegmentIdentification.ReferencedSegmentNumber;

    if (!segmentGroupLists[segmentNumber]) {
      segmentGroupLists[segmentNumber] = [];
    } // this will be segment 1 of new dataset


    functionalGroup.SegmentIdentification.ReferencedSegmentNumber = 1;
    segmentGroupLists[segmentNumber].push(functionalGroup);
  }); // determine per-segment index into the pixel data
  // TODO: only handles one-bit-per pixel, last byte padded

  var frameSize = Math.ceil(options.dataset.Rows * options.dataset.Columns / 8);
  var segmentOffsets = ["Empty offset 0", 0];
  var segmentSizes = ["Empty size 0"];
  segmentGroupLists.slice(1).forEach(function (segmentGroupList) {
    var previousOffset = segmentOffsets[segmentOffsets.length - 1];
    var numberOfFrames = segmentGroupList.length;
    segmentOffsets.push(previousOffset + frameSize * numberOfFrames);
    segmentSizes.push(frameSize * numberOfFrames);
  }); // Now make new per-frame functional groups and pixel data for each dataset
  // (skipping the first known-to-be-empty segment)
  // TODO: assumes frames are sorted and first frame is origin WRT slice direction

  var segmentNumber = 1;
  segmentGroupLists.slice(1).forEach(function (segmentGroupList) {
    var dataset = segmentDatasets[segmentNumber];
    dataset.PerFrameFunctionalGroupsSequence = segmentGroupList;
    var begin = segmentOffsets[segmentNumber];
    var end = begin + segmentSizes[segmentNumber];
    dataset.NumberOfFrames = segmentGroupLists[segmentNumber].length;
    dataset.PixelData = options.dataset.PixelData.slice(begin, end);
    fields.push(new SegmentationField({
      dataset: dataset
    }));
    segmentNumber++;
  });
  return fields;
};

module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/TransformField.js":
/*!**************************************!*\
  !*** ./src/fields/TransformField.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PixelField2 = _interopRequireDefault(__webpack_require__(/*! ./PixelField */ "./src/fields/PixelField.js"));

var _glMatrix = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/src/gl-matrix.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TransformField =
/*#__PURE__*/
function (_PixelField) {
  _inherits(TransformField, _PixelField);

  function TransformField() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TransformField);

    _this = _possibleConstructorReturn(this, (TransformField.__proto__ || Object.getPrototypeOf(TransformField)).call(this, options));

    _this.analyze();

    return _this;
  }

  _createClass(TransformField, [{
    key: "dimensions",
    value: function dimensions() {
      var grid = this.dataset.DeformableRegistration.DeformableRegistrationGrid;
      return grid.GridDimensions.map(Number);
    }
  }, {
    key: "orientation",
    value: function orientation() {
      var grid = this.dataset.DeformableRegistration.DeformableRegistrationGrid;
      return grid.ImageOrientationPatient.map(Number);
    }
  }, {
    key: "spacing",
    value: function spacing() {
      var grid = this.dataset.DeformableRegistration.DeformableRegistrationGrid;
      return grid.GridResolution.map(Number);
    }
  }, {
    key: "position",
    value: function position(frame) {
      frame = frame || 0;
      var grid = this.dataset.DeformableRegistration.DeformableRegistrationGrid;
      var origin = grid.ImagePositionPatient.map(Number);
      var sliceStep = this.sliceStepFromOrientation(this.orientation());
      var sliceSpacing = this.spacing()[2];

      _glMatrix.vec3.scale(sliceStep, sliceStep, frame * sliceSpacing);

      var framePosition = _glMatrix.vec3.create();

      _glMatrix.vec3.add(framePosition, origin, sliceStep);

      return framePosition;
    }
  }, {
    key: "analyze",
    value: function analyze() {
      _get(TransformField.prototype.__proto__ || Object.getPrototypeOf(TransformField.prototype), "analyze", this).call(this);
    }
  }, {
    key: "uniforms",
    value: function uniforms() {
      // TODO: need to be keyed to id (in a struct)
      var u = _get(TransformField.prototype.__proto__ || Object.getPrototypeOf(TransformField.prototype), "uniforms", this).call(this);

      return u;
    }
  }, {
    key: "samplingShaderSource",
    value: function samplingShaderSource() {
      return "\n        uniform highp ".concat(this.samplerType, " textureUnit").concat(this.id, ";\n  \n        void transferFunction").concat(this.id, " (const in float sampleValue,\n                                         const in float gradientMagnitude,\n                                         out vec3 color,\n                                         out float opacity)\n        {\n          color = vec3(sampleValue, 0.5, 2.);\n          opacity = gradientMagnitude;\n        }\n  \n        uniform int visible").concat(this.id, ";\n        uniform mat4 patientToPixel").concat(this.id, ";\n        uniform mat4 pixelToPatient").concat(this.id, ";\n        uniform mat3 normalPixelToPatient").concat(this.id, ";\n        uniform ivec3 pixelDimensions").concat(this.id, ";\n  \n        vec3 patientToTexture").concat(this.id, "(const in vec3 patientPoint)\n        {\n          // stpPoint is in 0-1 texture coordinates, meaning that it\n          // is the patientToPixel transform scaled by the inverse\n          // pixel dimensions.\n          vec3 pixelDimensions = vec3(pixelDimensions").concat(this.id, ");\n          vec3 dimensionsInverse = vec3(1.) / pixelDimensions;\n          vec3 stpPoint = (patientToPixel").concat(this.id, " * vec4(patientPoint, 1.)).xyz;\n          stpPoint *= dimensionsInverse;\n          return(stpPoint);\n        }\n  \n        vec3 textureToPatient").concat(this.id, "(const in vec3 stpPoint)\n        {\n          // inverse operation of patientToTexture\n          vec3 pixelDimensions = vec3(pixelDimensions").concat(this.id, ");\n          vec3 patientPoint = (pixelToPatient").concat(this.id, " * vec4(pixelDimensions * stpPoint, 1.)).xyz;\n          return(patientPoint);\n        }\n  \n        void sampleTexture").concat(this.id, "(const in ").concat(this.samplerType, " textureUnit,\n                                     const in vec3 patientPoint,\n                                     const in float gradientSize,\n                                     out float sampleValue,\n                                     out vec3 normal,\n                                     out float gradientMagnitude)\n        {\n        // TODO\n          vec3 stpPoint = patientToTexture").concat(this.id, "(patientPoint);\n          normal = texture(textureUnit, stpPoint).xyz;\n          sampleValue = length(normal);\n          gradientMagnitude = sampleValue;\n        }\n  \n        void sampleField").concat(this.id, " (const in ").concat(this.samplerType, " textureUnit,\n                                    const in vec3 samplePointPatient,\n                                    const in float gradientSize,\n                                    out float sampleValue,\n                                    out vec3 normal,\n                                    out float gradientMagnitude)\n        {\n          // samplePoint is in patient coordinates, stp is texture coordinates\n          vec3 samplePoint = transformPoint").concat(this.id, "(samplePointPatient);\n          vec3 stpPoint = patientToTexture").concat(this.id, "(samplePoint);\n  \n          // trivial reject outside\n          if (any(lessThan(stpPoint, vec3(0.)))\n               || any(greaterThan(stpPoint,vec3(1.)))) {\n            sampleValue = 0.;\n            normal = vec3(0.);\n            gradientMagnitude = 0.;\n          } else {\n            sampleValue = 100.;\n            normal = vec3(1.);\n            gradientMagnitude = 1.;\n            sampleTexture").concat(this.id, "(textureUnit, samplePoint, gradientSize,\n                                    sampleValue, normal, gradientMagnitude);\n          }\n        }\n      ");
    }
  }, {
    key: "fieldToTexture",
    value: function fieldToTexture(gl) {
      // allocate and fill a float 3D texture for the image data.
      // cannot be subclassed.
      var needsUpdate = _get(TransformField.prototype.__proto__ || Object.getPrototypeOf(TransformField.prototype), "fieldToTexture", this).call(this, gl);

      if (needsUpdate) {
        var grid = this.dataset.DeformableRegistration.DeformableRegistrationGrid;

        var _this$pixelDimensions = _slicedToArray(this.pixelDimensions, 3),
            w = _this$pixelDimensions[0],
            h = _this$pixelDimensions[1],
            d = _this$pixelDimensions[2];

        gl.texStorage3D(gl.TEXTURE_3D, 1, gl.RGBA32F, w, h, d);

        if (!this.generator) {
          // only transfer the data if there's no generator that will fill it in
          // the texture must be rgba so it can be rendered into
          // so we make a new buffer with 4 components
          // TODO: if this becomes and efficiency issue the process
          // could be implemented in a shader
          var vectorCount = w * h * d;
          var rgbaArray = new Float32Array(vectorCount * 4);

          for (var vectorIndex = 0; vectorIndex < vectorCount; vectorIndex++) {
            rgbaArray[4 * vectorIndex] = grid.VectorGridData[3 * vectorIndex];
            rgbaArray[4 * vectorIndex + 1] = grid.VectorGridData[3 * vectorIndex + 1];
            rgbaArray[4 * vectorIndex + 2] = grid.VectorGridData[3 * vectorIndex + 2];
            rgbaArray[4 * vectorIndex + 3] = 0;
          }

          gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, // level, offsets
          w, h, d, gl.RGBA, gl.FLOAT, rgbaArray);
        }

        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        this.updated();
      }
    }
  }]);

  return TransformField;
}(_PixelField2.default);

exports.default = TransformField;
module.exports = exports["default"];

/***/ }),

/***/ "./src/fields/index.js":
/*!*****************************!*\
  !*** ./src/fields/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Field = _interopRequireDefault(__webpack_require__(/*! ./Field */ "./src/fields/Field.js"));

var _ImageField = _interopRequireDefault(__webpack_require__(/*! ./ImageField */ "./src/fields/ImageField.js"));

var _PixelField = _interopRequireDefault(__webpack_require__(/*! ./PixelField */ "./src/fields/PixelField.js"));

var _SegmentationField = _interopRequireDefault(__webpack_require__(/*! ./SegmentationField */ "./src/fields/SegmentationField.js"));

var _TransformField = _interopRequireDefault(__webpack_require__(/*! ./TransformField */ "./src/fields/TransformField.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  Field: _Field.default,
  ImageField: _ImageField.default,
  PixelField: _PixelField.default,
  SegmentationField: _SegmentationField.default,
  TransformField: _TransformField.default
};
exports.default = _default;
module.exports = exports["default"];

/***/ }),

/***/ "./src/glConstants.js":
/*!****************************!*\
  !*** ./src/glConstants.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  ACTIVE_ATTRIBUTES: 35721,
  ACTIVE_TEXTURE: 34016,
  ACTIVE_UNIFORMS: 35718,
  ACTIVE_UNIFORM_BLOCKS: 35382,
  ALIASED_LINE_WIDTH_RANGE: 33902,
  ALIASED_POINT_SIZE_RANGE: 33901,
  ALPHA: 6406,
  ALPHA_BITS: 3413,
  ALREADY_SIGNALED: 37146,
  ALWAYS: 519,
  ANY_SAMPLES_PASSED: 35887,
  ANY_SAMPLES_PASSED_CONSERVATIVE: 36202,
  ARRAY_BUFFER: 34962,
  ARRAY_BUFFER_BINDING: 34964,
  ATTACHED_SHADERS: 35717,
  BACK: 1029,
  BLEND: 3042,
  BLEND_COLOR: 32773,
  BLEND_DST_ALPHA: 32970,
  BLEND_DST_RGB: 32968,
  BLEND_EQUATION: 32777,
  BLEND_EQUATION_ALPHA: 34877,
  BLEND_EQUATION_RGB: 32777,
  BLEND_SRC_ALPHA: 32971,
  BLEND_SRC_RGB: 32969,
  BLUE_BITS: 3412,
  BOOL: 35670,
  BOOL_VEC2: 35671,
  BOOL_VEC3: 35672,
  BOOL_VEC4: 35673,
  BROWSER_DEFAULT_WEBGL: 37444,
  BUFFER_SIZE: 34660,
  BUFFER_USAGE: 34661,
  BYTE: 5120,
  CCW: 2305,
  CLAMP_TO_EDGE: 33071,
  COLOR: 6144,
  COLOR_ATTACHMENT0: 36064,
  COLOR_ATTACHMENT1: 36065,
  COLOR_ATTACHMENT2: 36066,
  COLOR_ATTACHMENT3: 36067,
  COLOR_ATTACHMENT4: 36068,
  COLOR_ATTACHMENT5: 36069,
  COLOR_ATTACHMENT6: 36070,
  COLOR_ATTACHMENT7: 36071,
  COLOR_ATTACHMENT8: 36072,
  COLOR_ATTACHMENT9: 36073,
  COLOR_ATTACHMENT10: 36074,
  COLOR_ATTACHMENT11: 36075,
  COLOR_ATTACHMENT12: 36076,
  COLOR_ATTACHMENT13: 36077,
  COLOR_ATTACHMENT14: 36078,
  COLOR_ATTACHMENT15: 36079,
  COLOR_BUFFER_BIT: 16384,
  COLOR_CLEAR_VALUE: 3106,
  COLOR_WRITEMASK: 3107,
  COMPARE_REF_TO_TEXTURE: 34894,
  COMPILE_STATUS: 35713,
  COMPRESSED_TEXTURE_FORMATS: 34467,
  CONDITION_SATISFIED: 37148,
  CONSTANT_ALPHA: 32771,
  CONSTANT_COLOR: 32769,
  CONTEXT_LOST_WEBGL: 37442,
  COPY_READ_BUFFER: 36662,
  COPY_READ_BUFFER_BINDING: 36662,
  COPY_WRITE_BUFFER: 36663,
  COPY_WRITE_BUFFER_BINDING: 36663,
  CULL_FACE: 2884,
  CULL_FACE_MODE: 2885,
  CURRENT_PROGRAM: 35725,
  CURRENT_QUERY: 34917,
  CURRENT_VERTEX_ATTRIB: 34342,
  CW: 2304,
  DECR: 7683,
  DECR_WRAP: 34056,
  DELETE_STATUS: 35712,
  DEPTH: 6145,
  DEPTH24_STENCIL8: 35056,
  DEPTH32F_STENCIL8: 36013,
  DEPTH_ATTACHMENT: 36096,
  DEPTH_BITS: 3414,
  DEPTH_BUFFER_BIT: 256,
  DEPTH_CLEAR_VALUE: 2931,
  DEPTH_COMPONENT: 6402,
  DEPTH_COMPONENT16: 33189,
  DEPTH_COMPONENT24: 33190,
  DEPTH_COMPONENT32F: 36012,
  DEPTH_FUNC: 2932,
  DEPTH_RANGE: 2928,
  DEPTH_STENCIL: 34041,
  DEPTH_STENCIL_ATTACHMENT: 33306,
  DEPTH_TEST: 2929,
  DEPTH_WRITEMASK: 2930,
  DITHER: 3024,
  DONT_CARE: 4352,
  DRAW_BUFFER0: 34853,
  DRAW_BUFFER1: 34854,
  DRAW_BUFFER2: 34855,
  DRAW_BUFFER3: 34856,
  DRAW_BUFFER4: 34857,
  DRAW_BUFFER5: 34858,
  DRAW_BUFFER6: 34859,
  DRAW_BUFFER7: 34860,
  DRAW_BUFFER8: 34861,
  DRAW_BUFFER9: 34862,
  DRAW_BUFFER10: 34863,
  DRAW_BUFFER11: 34864,
  DRAW_BUFFER12: 34865,
  DRAW_BUFFER13: 34866,
  DRAW_BUFFER14: 34867,
  DRAW_BUFFER15: 34868,
  DRAW_FRAMEBUFFER: 36009,
  DRAW_FRAMEBUFFER_BINDING: 36006,
  DST_ALPHA: 772,
  DST_COLOR: 774,
  DYNAMIC_COPY: 35050,
  DYNAMIC_DRAW: 35048,
  DYNAMIC_READ: 35049,
  ELEMENT_ARRAY_BUFFER: 34963,
  ELEMENT_ARRAY_BUFFER_BINDING: 34965,
  EQUAL: 514,
  FASTEST: 4353,
  FLOAT: 5126,
  FLOAT_32_UNSIGNED_INT_24_8_REV: 36269,
  FLOAT_MAT2: 35674,
  FLOAT_MAT2x3: 35685,
  FLOAT_MAT2x4: 35686,
  FLOAT_MAT3: 35675,
  FLOAT_MAT3x2: 35687,
  FLOAT_MAT3x4: 35688,
  FLOAT_MAT4: 35676,
  FLOAT_MAT4x2: 35689,
  FLOAT_MAT4x3: 35690,
  FLOAT_VEC2: 35664,
  FLOAT_VEC3: 35665,
  FLOAT_VEC4: 35666,
  FRAGMENT_SHADER: 35632,
  FRAGMENT_SHADER_DERIVATIVE_HINT: 35723,
  FRAMEBUFFER: 36160,
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301,
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300,
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297,
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302,
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299,
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298,
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
  FRAMEBUFFER_BINDING: 36006,
  FRAMEBUFFER_COMPLETE: 36053,
  FRAMEBUFFER_DEFAULT: 33304,
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182,
  FRAMEBUFFER_UNSUPPORTED: 36061,
  FRONT: 1028,
  FRONT_AND_BACK: 1032,
  FRONT_FACE: 2886,
  FUNC_ADD: 32774,
  FUNC_REVERSE_SUBTRACT: 32779,
  FUNC_SUBTRACT: 32778,
  GENERATE_MIPMAP_HINT: 33170,
  GEQUAL: 518,
  GREATER: 516,
  GREEN_BITS: 3411,
  HALF_FLOAT: 5131,
  HIGH_FLOAT: 36338,
  HIGH_INT: 36341,
  IMPLEMENTATION_COLOR_READ_FORMAT: 35739,
  IMPLEMENTATION_COLOR_READ_TYPE: 35738,
  INCR: 7682,
  INCR_WRAP: 34055,
  INT: 5124,
  INTERLEAVED_ATTRIBS: 35980,
  INT_2_10_10_10_REV: 36255,
  INT_SAMPLER_2D: 36298,
  INT_SAMPLER_2D_ARRAY: 36303,
  INT_SAMPLER_3D: 36299,
  INT_SAMPLER_CUBE: 36300,
  INT_VEC2: 35667,
  INT_VEC3: 35668,
  INT_VEC4: 35669,
  INVALID_ENUM: 1280,
  INVALID_FRAMEBUFFER_OPERATION: 1286,
  INVALID_INDEX: 4294967295,
  INVALID_OPERATION: 1282,
  INVALID_VALUE: 1281,
  INVERT: 5386,
  KEEP: 7680,
  LEQUAL: 515,
  LESS: 513,
  LINEAR: 9729,
  LINEAR_MIPMAP_LINEAR: 9987,
  LINEAR_MIPMAP_NEAREST: 9985,
  LINES: 1,
  LINE_LOOP: 2,
  LINE_STRIP: 3,
  LINE_WIDTH: 2849,
  LINK_STATUS: 35714,
  LOW_FLOAT: 36336,
  LOW_INT: 36339,
  LUMINANCE: 6409,
  LUMINANCE_ALPHA: 6410,
  MAX: 32776,
  MAX_3D_TEXTURE_SIZE: 32883,
  MAX_ARRAY_TEXTURE_LAYERS: 35071,
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447,
  MAX_COLOR_ATTACHMENTS: 36063,
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379,
  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
  MAX_COMBINED_UNIFORM_BLOCKS: 35374,
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377,
  MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
  MAX_DRAW_BUFFERS: 34852,
  MAX_ELEMENTS_INDICES: 33001,
  MAX_ELEMENTS_VERTICES: 33000,
  MAX_ELEMENT_INDEX: 36203,
  MAX_FRAGMENT_INPUT_COMPONENTS: 37157,
  MAX_FRAGMENT_UNIFORM_BLOCKS: 35373,
  MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657,
  MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
  MAX_PROGRAM_TEXEL_OFFSET: 35077,
  MAX_RENDERBUFFER_SIZE: 34024,
  MAX_SAMPLES: 36183,
  MAX_SERVER_WAIT_TIMEOUT: 37137,
  MAX_TEXTURE_IMAGE_UNITS: 34930,
  MAX_TEXTURE_LOD_BIAS: 34045,
  MAX_TEXTURE_SIZE: 3379,
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968,
  MAX_UNIFORM_BLOCK_SIZE: 35376,
  MAX_UNIFORM_BUFFER_BINDINGS: 35375,
  MAX_VARYING_COMPONENTS: 35659,
  MAX_VARYING_VECTORS: 36348,
  MAX_VERTEX_ATTRIBS: 34921,
  MAX_VERTEX_OUTPUT_COMPONENTS: 37154,
  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
  MAX_VERTEX_UNIFORM_BLOCKS: 35371,
  MAX_VERTEX_UNIFORM_COMPONENTS: 35658,
  MAX_VERTEX_UNIFORM_VECTORS: 36347,
  MAX_VIEWPORT_DIMS: 3386,
  MEDIUM_FLOAT: 36337,
  MEDIUM_INT: 36340,
  MIN: 32775,
  MIN_PROGRAM_TEXEL_OFFSET: 35076,
  MIRRORED_REPEAT: 33648,
  NEAREST: 9728,
  NEAREST_MIPMAP_LINEAR: 9986,
  NEAREST_MIPMAP_NEAREST: 9984,
  NEVER: 512,
  NICEST: 4354,
  NONE: 0,
  NOTEQUAL: 517,
  NO_ERROR: 0,
  OBJECT_TYPE: 37138,
  ONE: 1,
  ONE_MINUS_CONSTANT_ALPHA: 32772,
  ONE_MINUS_CONSTANT_COLOR: 32770,
  ONE_MINUS_DST_ALPHA: 773,
  ONE_MINUS_DST_COLOR: 775,
  ONE_MINUS_SRC_ALPHA: 771,
  ONE_MINUS_SRC_COLOR: 769,
  OUT_OF_MEMORY: 1285,
  PACK_ALIGNMENT: 3333,
  PACK_ROW_LENGTH: 3330,
  PACK_SKIP_PIXELS: 3332,
  PACK_SKIP_ROWS: 3331,
  PIXEL_PACK_BUFFER: 35051,
  PIXEL_PACK_BUFFER_BINDING: 35053,
  PIXEL_UNPACK_BUFFER: 35052,
  PIXEL_UNPACK_BUFFER_BINDING: 35055,
  POINTS: 0,
  POLYGON_OFFSET_FACTOR: 32824,
  POLYGON_OFFSET_FILL: 32823,
  POLYGON_OFFSET_UNITS: 10752,
  QUERY_RESULT: 34918,
  QUERY_RESULT_AVAILABLE: 34919,
  R8: 33321,
  R8I: 33329,
  R8UI: 33330,
  R8_SNORM: 36756,
  R11F_G11F_B10F: 35898,
  R16F: 33325,
  R16I: 33331,
  R16UI: 33332,
  R32F: 33326,
  R32I: 33333,
  R32UI: 33334,
  RASTERIZER_DISCARD: 35977,
  READ_BUFFER: 3074,
  READ_FRAMEBUFFER: 36008,
  READ_FRAMEBUFFER_BINDING: 36010,
  RED: 6403,
  RED_BITS: 3410,
  RED_INTEGER: 36244,
  RENDERBUFFER: 36161,
  RENDERBUFFER_ALPHA_SIZE: 36179,
  RENDERBUFFER_BINDING: 36007,
  RENDERBUFFER_BLUE_SIZE: 36178,
  RENDERBUFFER_DEPTH_SIZE: 36180,
  RENDERBUFFER_GREEN_SIZE: 36177,
  RENDERBUFFER_HEIGHT: 36163,
  RENDERBUFFER_INTERNAL_FORMAT: 36164,
  RENDERBUFFER_RED_SIZE: 36176,
  RENDERBUFFER_SAMPLES: 36011,
  RENDERBUFFER_STENCIL_SIZE: 36181,
  RENDERBUFFER_WIDTH: 36162,
  RENDERER: 7937,
  REPEAT: 10497,
  REPLACE: 7681,
  RG: 33319,
  RG8: 33323,
  RG8I: 33335,
  RG8UI: 33336,
  RG8_SNORM: 36757,
  RG16F: 33327,
  RG16I: 33337,
  RG16UI: 33338,
  RG32F: 33328,
  RG32I: 33339,
  RG32UI: 33340,
  RGB: 6407,
  RGB5_A1: 32855,
  RGB8: 32849,
  RGB8I: 36239,
  RGB8UI: 36221,
  RGB8_SNORM: 36758,
  RGB9_E5: 35901,
  RGB10_A2: 32857,
  RGB10_A2UI: 36975,
  RGB16F: 34843,
  RGB16I: 36233,
  RGB16UI: 36215,
  RGB32F: 34837,
  RGB32I: 36227,
  RGB32UI: 36209,
  RGB565: 36194,
  RGBA: 6408,
  RGBA4: 32854,
  RGBA8: 32856,
  RGBA8I: 36238,
  RGBA8UI: 36220,
  RGBA8_SNORM: 36759,
  RGBA16F: 34842,
  RGBA16I: 36232,
  RGBA16UI: 36214,
  RGBA32F: 34836,
  RGBA32I: 36226,
  RGBA32UI: 36208,
  RGBA_INTEGER: 36249,
  RGB_INTEGER: 36248,
  RG_INTEGER: 33320,
  SAMPLER_2D: 35678,
  SAMPLER_2D_ARRAY: 36289,
  SAMPLER_2D_ARRAY_SHADOW: 36292,
  SAMPLER_2D_SHADOW: 35682,
  SAMPLER_3D: 35679,
  SAMPLER_BINDING: 35097,
  SAMPLER_CUBE: 35680,
  SAMPLER_CUBE_SHADOW: 36293,
  SAMPLES: 32937,
  SAMPLE_ALPHA_TO_COVERAGE: 32926,
  SAMPLE_BUFFERS: 32936,
  SAMPLE_COVERAGE: 32928,
  SAMPLE_COVERAGE_INVERT: 32939,
  SAMPLE_COVERAGE_VALUE: 32938,
  SCISSOR_BOX: 3088,
  SCISSOR_TEST: 3089,
  SEPARATE_ATTRIBS: 35981,
  SHADER_TYPE: 35663,
  SHADING_LANGUAGE_VERSION: 35724,
  SHORT: 5122,
  SIGNALED: 37145,
  SIGNED_NORMALIZED: 36764,
  SRC_ALPHA: 770,
  SRC_ALPHA_SATURATE: 776,
  SRC_COLOR: 768,
  SRGB: 35904,
  SRGB8: 35905,
  SRGB8_ALPHA8: 35907,
  STATIC_COPY: 35046,
  STATIC_DRAW: 35044,
  STATIC_READ: 35045,
  STENCIL: 6146,
  STENCIL_ATTACHMENT: 36128,
  STENCIL_BACK_FAIL: 34817,
  STENCIL_BACK_FUNC: 34816,
  STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
  STENCIL_BACK_PASS_DEPTH_PASS: 34819,
  STENCIL_BACK_REF: 36003,
  STENCIL_BACK_VALUE_MASK: 36004,
  STENCIL_BACK_WRITEMASK: 36005,
  STENCIL_BITS: 3415,
  STENCIL_BUFFER_BIT: 1024,
  STENCIL_CLEAR_VALUE: 2961,
  STENCIL_FAIL: 2964,
  STENCIL_FUNC: 2962,
  STENCIL_INDEX8: 36168,
  STENCIL_PASS_DEPTH_FAIL: 2965,
  STENCIL_PASS_DEPTH_PASS: 2966,
  STENCIL_REF: 2967,
  STENCIL_TEST: 2960,
  STENCIL_VALUE_MASK: 2963,
  STENCIL_WRITEMASK: 2968,
  STREAM_COPY: 35042,
  STREAM_DRAW: 35040,
  STREAM_READ: 35041,
  SUBPIXEL_BITS: 3408,
  SYNC_CONDITION: 37139,
  SYNC_FENCE: 37142,
  SYNC_FLAGS: 37141,
  SYNC_FLUSH_COMMANDS_BIT: 1,
  SYNC_GPU_COMMANDS_COMPLETE: 37143,
  SYNC_STATUS: 37140,
  TEXTURE: 5890,
  TEXTURE0: 33984,
  TEXTURE1: 33985,
  TEXTURE2: 33986,
  TEXTURE3: 33987,
  TEXTURE4: 33988,
  TEXTURE5: 33989,
  TEXTURE6: 33990,
  TEXTURE7: 33991,
  TEXTURE8: 33992,
  TEXTURE9: 33993,
  TEXTURE10: 33994,
  TEXTURE11: 33995,
  TEXTURE12: 33996,
  TEXTURE13: 33997,
  TEXTURE14: 33998,
  TEXTURE15: 33999,
  TEXTURE16: 34000,
  TEXTURE17: 34001,
  TEXTURE18: 34002,
  TEXTURE19: 34003,
  TEXTURE20: 34004,
  TEXTURE21: 34005,
  TEXTURE22: 34006,
  TEXTURE23: 34007,
  TEXTURE24: 34008,
  TEXTURE25: 34009,
  TEXTURE26: 34010,
  TEXTURE27: 34011,
  TEXTURE28: 34012,
  TEXTURE29: 34013,
  TEXTURE30: 34014,
  TEXTURE31: 34015,
  TEXTURE_2D: 3553,
  TEXTURE_2D_ARRAY: 35866,
  TEXTURE_3D: 32879,
  TEXTURE_BASE_LEVEL: 33084,
  TEXTURE_BINDING_2D: 32873,
  TEXTURE_BINDING_2D_ARRAY: 35869,
  TEXTURE_BINDING_3D: 32874,
  TEXTURE_BINDING_CUBE_MAP: 34068,
  TEXTURE_COMPARE_FUNC: 34893,
  TEXTURE_COMPARE_MODE: 34892,
  TEXTURE_CUBE_MAP: 34067,
  TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
  TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
  TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
  TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
  TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
  TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
  TEXTURE_IMMUTABLE_FORMAT: 37167,
  TEXTURE_IMMUTABLE_LEVELS: 33503,
  TEXTURE_MAG_FILTER: 10240,
  TEXTURE_MAX_LEVEL: 33085,
  TEXTURE_MAX_LOD: 33083,
  TEXTURE_MIN_FILTER: 10241,
  TEXTURE_MIN_LOD: 33082,
  TEXTURE_WRAP_R: 32882,
  TEXTURE_WRAP_S: 10242,
  TEXTURE_WRAP_T: 10243,
  TIMEOUT_EXPIRED: 37147,
  TIMEOUT_IGNORED: -1,
  TRANSFORM_FEEDBACK: 36386,
  TRANSFORM_FEEDBACK_ACTIVE: 36388,
  TRANSFORM_FEEDBACK_BINDING: 36389,
  TRANSFORM_FEEDBACK_BUFFER: 35982,
  TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983,
  TRANSFORM_FEEDBACK_BUFFER_MODE: 35967,
  TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973,
  TRANSFORM_FEEDBACK_BUFFER_START: 35972,
  TRANSFORM_FEEDBACK_PAUSED: 36387,
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976,
  TRANSFORM_FEEDBACK_VARYINGS: 35971,
  TRIANGLES: 4,
  TRIANGLE_FAN: 6,
  TRIANGLE_STRIP: 5,
  UNIFORM_ARRAY_STRIDE: 35388,
  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394,
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395,
  UNIFORM_BLOCK_BINDING: 35391,
  UNIFORM_BLOCK_DATA_SIZE: 35392,
  UNIFORM_BLOCK_INDEX: 35386,
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398,
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396,
  UNIFORM_BUFFER: 35345,
  UNIFORM_BUFFER_BINDING: 35368,
  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380,
  UNIFORM_BUFFER_SIZE: 35370,
  UNIFORM_BUFFER_START: 35369,
  UNIFORM_IS_ROW_MAJOR: 35390,
  UNIFORM_MATRIX_STRIDE: 35389,
  UNIFORM_OFFSET: 35387,
  UNIFORM_SIZE: 35384,
  UNIFORM_TYPE: 35383,
  UNPACK_ALIGNMENT: 3317,
  UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443,
  UNPACK_FLIP_Y_WEBGL: 37440,
  UNPACK_IMAGE_HEIGHT: 32878,
  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441,
  UNPACK_ROW_LENGTH: 3314,
  UNPACK_SKIP_IMAGES: 32877,
  UNPACK_SKIP_PIXELS: 3316,
  UNPACK_SKIP_ROWS: 3315,
  UNSIGNALED: 37144,
  UNSIGNED_BYTE: 5121,
  UNSIGNED_INT: 5125,
  UNSIGNED_INT_2_10_10_10_REV: 33640,
  UNSIGNED_INT_5_9_9_9_REV: 35902,
  UNSIGNED_INT_10F_11F_11F_REV: 35899,
  UNSIGNED_INT_24_8: 34042,
  UNSIGNED_INT_SAMPLER_2D: 36306,
  UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311,
  UNSIGNED_INT_SAMPLER_3D: 36307,
  UNSIGNED_INT_SAMPLER_CUBE: 36308,
  UNSIGNED_INT_VEC2: 36294,
  UNSIGNED_INT_VEC3: 36295,
  UNSIGNED_INT_VEC4: 36296,
  UNSIGNED_NORMALIZED: 35863,
  UNSIGNED_SHORT: 5123,
  UNSIGNED_SHORT_4_4_4_4: 32819,
  UNSIGNED_SHORT_5_5_5_1: 32820,
  UNSIGNED_SHORT_5_6_5: 33635,
  VALIDATE_STATUS: 35715,
  VENDOR: 7936,
  VERSION: 7938,
  VERTEX_ARRAY_BINDING: 34229,
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
  VERTEX_ATTRIB_ARRAY_DIVISOR: 35070,
  VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
  VERTEX_ATTRIB_ARRAY_INTEGER: 35069,
  VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
  VERTEX_ATTRIB_ARRAY_POINTER: 34373,
  VERTEX_ATTRIB_ARRAY_SIZE: 34339,
  VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
  VERTEX_ATTRIB_ARRAY_TYPE: 34341,
  VERTEX_SHADER: 35633,
  VIEWPORT: 2978,
  WAIT_FAILED: 37149,
  ZERO: 0
};
exports.default = _default;
module.exports = exports["default"];

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "View", {
  enumerable: true,
  get: function get() {
    return _View.default;
  }
});
Object.defineProperty(exports, "RayCastRenderer", {
  enumerable: true,
  get: function get() {
    return _RayCastRenderer.default;
  }
});
Object.defineProperty(exports, "Generator", {
  enumerable: true,
  get: function get() {
    return _Generator.default;
  }
});
Object.defineProperty(exports, "ProgrammaticGenerator", {
  enumerable: true,
  get: function get() {
    return _ProgrammaticGenerator.default;
  }
});
Object.defineProperty(exports, "GrowCutGenerator", {
  enumerable: true,
  get: function get() {
    return _GrowCutGenerator.default;
  }
});
Object.defineProperty(exports, "linear", {
  enumerable: true,
  get: function get() {
    return _linear.default;
  }
});
Object.defineProperty(exports, "fields", {
  enumerable: true,
  get: function get() {
    return _fields.default;
  }
});
Object.defineProperty(exports, "uniforms", {
  enumerable: true,
  get: function get() {
    return _uniforms.default;
  }
});

var _View = _interopRequireDefault(__webpack_require__(/*! ./View */ "./src/View.js"));

var _RayCastRenderer = _interopRequireDefault(__webpack_require__(/*! ./RayCastRenderer */ "./src/RayCastRenderer.js"));

var _Generator = _interopRequireDefault(__webpack_require__(/*! ./Generator */ "./src/Generator.js"));

var _ProgrammaticGenerator = _interopRequireDefault(__webpack_require__(/*! ./ProgrammaticGenerator */ "./src/ProgrammaticGenerator.js"));

var _GrowCutGenerator = _interopRequireDefault(__webpack_require__(/*! ./GrowCutGenerator */ "./src/GrowCutGenerator.js"));

var _linear = _interopRequireDefault(__webpack_require__(/*! ./linear */ "./src/linear.js"));

var _fields = _interopRequireDefault(__webpack_require__(/*! ./fields */ "./src/fields/index.js"));

var _uniforms = _interopRequireDefault(__webpack_require__(/*! ./uniforms.js */ "./src/uniforms.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "./src/linear.js":
/*!***********************!*\
  !*** ./src/linear.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  vclone: vclone,
  vlength: vlength,
  vnormalize: vnormalize,
  vdistance: vdistance,
  vplus: vplus,
  vminus: vminus,
  vscale: vscale,
  vcross: vcross,
  vdot: vdot,
  midentity: midentity,
  mtranslate: mtranslate,
  mscale: mscale,
  mrotate: mrotate,
  mmultiply: mmultiply,
  mvmultiply: mvmultiply,
  LARGE_NUMBER: 3e38,
  SMALL_NUMBER: 2e-38
};
exports.default = _default;

function vclone(v) {
  return v.slice(0);
}

function vlength(v) {
  return Math.sqrt(v.map(function (e) {
    return e * e;
  }).reduce(function (sum, value) {
    return sum + value;
  }));
}

function vnormalize(v) {
  return vscale(v, 1 / vlength(v));
}

function vdistance(v1, v2) {
  return vlength(vminus(v2, v1));
}

function vplus(v1, v2) {
  return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
}

function vminus(v1, v2) {
  return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
}

function vscale(v1, scale) {
  return [v1[0] * scale, v1[1] * scale, v1[2] * scale];
}

function vcross(v1, v2) {
  return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]];
}

function vdot(v1, v2) {
  return [v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]];
}

function midentity() {
  return [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
}

function mtranslate(v) {
  return [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [v[0], v[1], v[2], 1]];
}

function mscale(v) {
  return [[v[0], 0, 0, 0], [0, v[1], 0, 0], [0, 0, v[2], 0], [0, 0, 0, 1]];
} // return a matrix to rotate a point around the axis by angle
// axis must be normalized
// angle is in degrees
// https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle


function mrotate(u, theta) {
  var T = theta * Math.PI / 180;
  var cT = Math.cos(T);
  var sT = Math.sin(T);
  return [[cT + u[0] * u[0] * (1 - cT), u[1] * u[0] * (1 - cT) + u[2] * sT, u[2] * u[0] * (1 - cT) - u[1] * sT, 0], [u[0] * u[1] * (1 - cT) - u[2] * sT, cT + u[1] * u[1] * (1 - cT), u[2] * u[1] * (1 - cT) + u[0] * sT, 0], [u[0] * u[2] * (1 - cT) + u[1] * sT, u[1] * u[2] * (1 - cT) - u[0] * sT, cT + u[2] * u[2] * (1 - cT), 0], [0, 0, 0, 1]];
}

function mmultiply(m1, m2) {
  return [[m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3], m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3], m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3], m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2] + m1[3][3] * m2[0][3]], [m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3], m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3], m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3], m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2] + m1[3][3] * m2[1][3]], [m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3], m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3], m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2] + m1[3][2] * m2[2][3], m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1] + m1[2][3] * m2[2][2] + m1[3][3] * m2[2][3]], [m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2] + m1[3][0] * m2[3][3], m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2] + m1[3][1] * m2[3][3], m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1] + m1[2][2] * m2[3][2] + m1[3][2] * m2[3][3], m1[0][3] * m2[3][0] + m1[1][3] * m2[3][1] + m1[2][3] * m2[3][2] + m1[3][3] * m2[3][3]]];
}

function mvmultiply(m, v) {
  return [m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3], m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3], m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3], m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]];
}

module.exports = exports["default"];

/***/ }),

/***/ "./src/uniforms.js":
/*!*************************!*\
  !*** ./src/uniforms.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// TODO -> Is this even needed... re-evaluate when my understanding has increased a few STEPs.
var Uniforms =
/*#__PURE__*/
function () {
  function Uniforms() {
    _classCallCheck(this, Uniforms);

    this.reset();
  }

  _createClass(Uniforms, [{
    key: "reset",
    value: function reset() {
      this.pointLight = {
        type: "3fv",
        value: [100, -400, 1500]
      };
      this.gradientSize = {
        type: "1f",
        value: 1
      };
      this.rayMaxSteps = {
        type: "1i",
        value: 10000
      };
      this.sampleStep = {
        type: "1f",
        value: 0.5
      };
      this.renderCanvasWidth = {
        type: "1f",
        value: 512
      };
      this.renderCanvasHeight = {
        type: "1f",
        value: 512
      };
      this.sliceMode = {
        type: "1i",
        value: 1
      };
      this.Kambient = {
        type: "1f",
        value: 1.5
      };
      this.Kdiffuse = {
        type: "1f",
        value: 0.95
      };
      this.Kspecular = {
        type: "1f",
        value: 0.8
      };
      this.Shininess = {
        type: "1f",
        value: 10
      };
    }
  }]);

  return Uniforms;
}();

var uniforms = new Uniforms();
var _default = uniforms;
exports.default = _default;
module.exports = exports["default"];

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vaGlmLXN0ZXAvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL29oaWYtc3RlcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9ub2RlX21vZHVsZXMvZGNtanMvYnVpbGQvZGNtamUuZXMuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4LmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9jb21tb24uanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L21hdDIuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L21hdDJkLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9tYXQzLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9tYXQ0LmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9xdWF0LmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC92ZWMyLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC92ZWMzLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC92ZWM0LmpzIiwid2VicGFjazovL29oaWYtc3RlcC8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvR3Jvd0N1dEdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvUHJvZ3JhbW1hdGljR2VuZXJhdG9yLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL3NyYy9SYXlDYXN0UmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL1ZpZXcuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL2ZpZWxkcy9GaWVsZC5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvZmllbGRzL0ltYWdlRmllbGQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL2ZpZWxkcy9QaXhlbEZpZWxkLmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL3NyYy9maWVsZHMvU2VnbWVudGF0aW9uRmllbGQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL2ZpZWxkcy9UcmFuc2Zvcm1GaWVsZC5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvZmllbGRzL2luZGV4LmpzIiwid2VicGFjazovL29oaWYtc3RlcC8uL3NyYy9nbENvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2hpZi1zdGVwLy4vc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9vaGlmLXN0ZXAvLi9zcmMvdW5pZm9ybXMuanMiXSwibmFtZXMiOlsiR2VuZXJhdG9yIiwib3B0aW9ucyIsInVzZUludGVnZXJUZXh0dXJlcyIsImdsIiwidW5pZm9ybXMiLCJpbnB1dEZpZWxkcyIsIm91dHB1dEZpZWxkcyIsInByb2dyYW0iLCJ1bmRlZmluZWQiLCJzbGljZVZpZXdBcnJheVR5cGUiLCJJbnQxNkFycmF5Iiwic2xpY2VWaWV3Qnl0ZXNQZXJFbGVtZW50Iiwic2FtcGxlclR5cGUiLCJidWZmZXJUeXBlIiwicmVhZFBpeGVsc0Zvcm1hdCIsIlJFRF9JTlRFR0VSIiwicmVhZFBpeGVsc1R5cGUiLCJTSE9SVCIsImZhbGxiYWNrU2xpY2VWaWV3c0FycmF5VHlwZSIsIkludDMyQXJyYXkiLCJmYWxsYmFja051bWJlck9mQ29tcG9uZW50cyIsImZhbGxiYWNrUmVhZFBpeGVsc0Zvcm1hdCIsIlJHQkFfSU5URUdFUiIsImZhbGxiYWNrUmVhZFBpeGVsc1R5cGUiLCJJTlQiLCJSRUQiLCJGTE9BVCIsIkZsb2F0MzJBcnJheSIsIlJHQkEiLCJzdHJpbmciLCJsaW5lTnVtYmVyIiwic3BsaXQiLCJmb3JFYWNoIiwibGluZSIsImNvbnNvbGUiLCJsb2ciLCJjYW5kaWRhdGVWYWx1ZSIsIm5hbWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZW50cnkiLCJrZXkiLCJ2YWx1ZSIsIkdyb3dDdXRHZW5lcmF0b3IiLCJpdGVyYXRpb24iLCJ0eXBlIiwiaXRlcmF0aW9ucyIsImhlYWRlclNvdXJjZSIsInBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UiLCJmaWVsZCIsInRyYW5zZm9ybVNoYWRlclNvdXJjZSIsInNhbXBsaW5nU2hhZGVyU291cmNlIiwiYmluZCIsIlByb2dyYW1tYXRpY0dlbmVyYXRvciIsIm91dHB1dEZpZWxkIiwiZ2VuZXJhdG9yIiwicmVuZGVySW1hZ2VWZXJ0aWNlcyIsInJlbmRlckltYWdlQ29vcmRpbmF0ZXNCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwicmVuZGVySW1hZ2VUZXh0dXJlQ29vcmRpbmF0ZXMiLCJyZW5kZXJJbWFnZVRleHVyZUNvb3JkaW5hdGVzQnVmZmVyIiwiZnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImRlbGV0ZVByb2dyYW0iLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJfdmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJfZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJjcmVhdGVQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImxvZ1dpdGhMaW5lTnVtYmVycyIsImVycm9yIiwiZ2V0U2hhZGVySW5mb0xvZyIsImZyYWdtZW50U2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiYXR0YWNoU2hhZGVyIiwiZGVsZXRlU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsIm5lZWRzVXBkYXRlIiwiZmllbGRUb1RleHR1cmUiLCJ1bmlmb3JtIiwibG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtM2Z2IiwidW5pZm9ybTNpdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybTFmIiwidW5pZm9ybTF1aSIsInVuaWZvcm0xaSIsInVuaWZvcm1NYXRyaXgzZnYiLCJGQUxTRSIsInVuaWZvcm1NYXRyaXg0ZnYiLCJvdXRwdXRGaWVsZDAiLCJ1c2VQcm9ncmFtIiwidmlld3BvcnQiLCJwaXhlbERpbWVuc2lvbnMiLCJjb29yZGluYXRlTG9jYXRpb24iLCJnZXRBdHRyaWJMb2NhdGlvbiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsInRleHR1cmVDb29yZGluYXRlTG9jYXRpb24iLCJrZXlzIiwiX3NldFVuaWZvcm0iLCJ0ZXh0dXJlSW5kZXgiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzNEIiwidGV4dHVyZVN5bWJvbCIsInNhbXBsZXJMb2NhdGlvbiIsIm1pcG1hcExldmVsIiwic2xpY2VVbmlmb3JtTG9jYXRpb24iLCJmcmFtZXMiLCJmYWxsYmFja1NsaWNlVmlld3MiLCJzbGljZUluZGV4Iiwic2xpY2UiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImRyYXdCdWZmZXJzIiwiYXR0YWNobWVudCIsImZyYW1lYnVmZmVyVGV4dHVyZUxheWVyIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJwdXNoIiwic3RhdHVzIiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiZ2xDb25zdGFudE5hbWUiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVfU1RSSVAiLCJnZW5lcmF0ZWRQaXhlbERhdGEiLCJkYXRhc2V0IiwiQ29sdW1ucyIsIlJvd3MiLCJ3IiwiaCIsInNsaWNlUGl4ZWxDb3VudCIsInNsaWNlQnl0ZVN0YXJ0Iiwic2xpY2VWaWV3IiwicmVhZEJ1ZmZlciIsInN1cHBvcnRlZEZvcm1hdCIsImdldFBhcmFtZXRlciIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUIiwic3VwcG9ydGVkVHlwZSIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSIsImZhbGxiYWNrU2xpY2VWaWV3IiwicmVhZFBpeGVscyIsImluZGV4IiwiUmF5Q2FzdFJlbmRlcmVyIiwiY2FudmFzIiwicmF5Q29tcG9zaXRpbmciLCJtYXhpbXVtQ29tcG9zaXRpbmdGaWVsZCIsInJlbmRlclJlcXVlc3RUaW1lb3V0IiwicGVuZGluZ1JlbmRlclJlcXVlc3QiLCJyZXF1ZXN0QW5vdGhlclJlbmRlciIsInN5bmNSZWFzb25zIiwiQUxSRUFEWV9TSUdOQUxFRCIsIlRJTUVPVVRfRVhQSVJFRCIsIkNPTkRJVElPTl9TQVRJU0ZJRUQiLCJXQUlUX0ZBSUxFRCIsImxhcmdlIiwiTEFSR0VfTlVNQkVSIiwiYm91bmRzIiwibWluIiwibWF4IiwiZSIsIk1hdGgiLCJjZW50ZXIiLCJ2aWV3Iiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX3JlbmRlciIsImRyYXdpbmdCdWZmZXJXaWR0aCIsImRyYXdpbmdCdWZmZXJIZWlnaHQiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJpZCIsInJlcXVlc3RSZW5kZXIiLCJzb3VyY2UiLCJmaWVsZENvbXBvc2l0aW5nU2hhZGVyU291cmNlIiwicGVyRmllbGRDb21wb3NpdGluZ1NoYWRlclNvdXJjZSIsInJheUNvbXBvc2l0aW5nU2hhZGVyU291cmNlIiwiVmlldyIsImMiLCJ2Y2xvbmUiLCJ2aWV3UG9pbnQiLCJ2aWV3Tm9ybWFsIiwidm5vcm1hbGl6ZSIsInZpZXdVcCIsInZpZXdEaXN0YW5jZSIsInZsZW5ndGgiLCJ2aWV3Qm94TWluIiwidmlld0JveE1heCIsInZpZXdBbmdsZSIsInZpZXdOZWFyIiwidmlld0ZhciIsImxvb2siLCJoYWxmU2luVmlld0FuZ2xlIiwic2luIiwiUEkiLCJ2aWV3UmlnaHQiLCJ2cGx1cyIsInZzY2FsZSIsImF0IiwidGFyZ2V0IiwiZnJvbSIsInVwIiwidm1pbnVzIiwidmNyb3NzIiwidmRpc3RhbmNlIiwicGxhbmUiLCJvZmZzZXQiLCJ0aGlja25lc3MiLCJtYWduaWZpY2F0aW9uIiwiZXh0ZW50IiwiZXh0ZW50UmlnaHQiLCJ2ZG90Iiwid2luZG93UmlnaHQiLCJ0YW4iLCJ2aWV3T2Zmc2V0IiwicmlnaHR3YXJkIiwidXB3YXJkIiwidlRhcmdldFRvT3JpZ2luIiwibVRhcmdldFRvT3JpZ2luIiwibXRyYW5zbGF0ZSIsIm1BYm91dFVwIiwibXJvdGF0ZSIsIm1BYm91dFJpZ2h0IiwibVRhcmdldEZyb21PcmlnaW4iLCJyb3RhdGlvbiIsIm1tdWx0aXBseSIsIm5ld1ZpZXdQb2ludCIsIm12bXVsdGlwbHkiLCJGaWVsZCIsIm5leHRJZCIsIm1vZGlmaWVkVGltZSIsIk51bWJlciIsIk1BWF9WQUxVRSIsInVwZGF0ZWRUaW1lIiwidmlzaWJsZSIsInJnYmEiLCJtYXAiLCJncmFkaWVudE9wYWNpdHlTY2FsZSIsInRyYW5zZm9ybUdhaW4iLCJ0cmFuc2Zvcm1GaWVsZCIsInBlcmZvcm1hbmNlIiwibm93IiwidSIsImRlbGV0ZVRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiZnJvbURhdGFzZXQiLCJmaWVsZHMiLCJzb3BDbGFzc05hbWUiLCJkYXRhIiwiRGljb21NZXRhRGljdGlvbmFyeSIsInNvcENsYXNzTmFtZXNCeVVJRCIsIlNPUENsYXNzVUlEIiwiZmllbGRzRnJvbURhdGFzZXQiLCJJbWFnZUZpZWxkIiwiYW5hbHl6ZSIsIndpbmRvd0NlbnRlciIsIldpbmRvd0NlbnRlciIsIndpbmRvd1dpZHRoIiwiV2luZG93V2lkdGgiLCJyZXNjYWxlSW50ZXJjZXB0IiwiUmVzY2FsZUludGVyY2VwdCIsInJlc2NhbGVTbG9wZSIsIlJlc2NhbGVTbG9wZSIsInNhbXBsZXNQZXJQaXhlbCIsIlNhbXBsZXNQZXJQaXhlbCIsIkJpdHNBbGxvY2F0ZWQiLCJ0cmFuc2ZlckZ1bmN0aW9uIiwiciIsImciLCJiIiwiYSIsInN0YXRpc3RpY3MiLCJiaW5zIiwic2FtcGxlcyIsImltYWdlQXJyYXkiLCJQaXhlbFJlcHJlc2VudGF0aW9uIiwiUGl4ZWxEYXRhIiwiVWludDE2QXJyYXkiLCJzYW1wbGVJbmRleCIsImZsb29yIiwibGVuZ3RoIiwicmFuZG9tIiwicmFuZ2UiLCJoaXN0b2dyYW0iLCJiaW5TY2FsZSIsImJpbiIsIm1heEJpbiIsIm1heEJpblZhbHVlIiwidW5pZm9ybVNvdXJjZSIsImxvb2t1cFNvdXJjZSIsInRyYW5zZmVyRnVuY3Rpb25Db250cm9sUG9pbnRVbmlmb3JtU291cmNlIiwidHJhbnNmZXJGdW5jdGlvbkNvbnRyb2xQb2ludExvb2t1cFNvdXJjZSIsImltYWdlVGV4dHVyZUFycmF5IiwicGl4ZWxJbnRlcm5hbEZvcm1hdCIsInBpeGVsRm9ybWF0IiwicGl4ZWxUeXBlIiwidGV4dHVyZUZpbHRlcnMiLCJSMTZJIiwiTkVBUkVTVCIsIlIxNkYiLCJMSU5FQVIiLCJkIiwidGV4U3RvcmFnZTNEIiwidGV4U3ViSW1hZ2UzRCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJ1cGRhdGVkIiwiUGl4ZWxGaWVsZCIsIk51bWJlck9mRnJhbWVzIiwiU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlIiwiUGxhbmVPcmllbnRhdGlvbiIsIkltYWdlT3JpZW50YXRpb25QYXRpZW50Iiwib3JpZW50YXRpb24iLCJjb2x1bW5TdGVwVG9QYXRpZW50IiwiZnJvbVZhbHVlcyIsInZlYzMiLCJyb3dTdGVwVG9QYXRpZW50Iiwic2xpY2VTdGVwVG9QYXRpZW50IiwiY3JlYXRlIiwiY3Jvc3MiLCJwaXhlbE1lYXN1cmVzIiwiUGl4ZWxNZWFzdXJlc1NlcXVlbmNlIiwiUGl4ZWxTcGFjaW5nIiwiU3BhY2luZ0JldHdlZW5TbGljZXMiLCJmcmFtZSIsInBlckZyYW1lR3JvdXBzIiwiUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UiLCJQbGFuZVBvc2l0aW9uIiwiSW1hZ2VQb3NpdGlvblBhdGllbnQiLCJkaW1lbnNpb25zIiwic3BhY2luZyIsInNwYWNpbmdCZXR3ZWVuQ29sdW1ucyIsInNwYWNpbmdCZXR3ZWVuUm93cyIsInNwYWNpbmdCZXR3ZWVuU2xpY2VzIiwic2xpY2VTdGVwRnJvbU9yaWVudGF0aW9uIiwic2NhbGUiLCJvcmlnaW4iLCJwb3NpdGlvbiIsInBvc2l0aW9uMSIsIm9yaWdpblRvUG9zaXRpb24xIiwic3VidHJhY3QiLCJkb3QiLCJwaXhlbFRvUGF0aWVudCIsIm1hdDQiLCJwYXRpZW50VG9QaXhlbCIsImludmVydCIsInZhbHVlT2YiLCJoYWxmU3BhY2luZ3MiLCJ0cmFuc2Zvcm1NYXQ0IiwiZmlyc3RDb3JuZXIiLCJ2ZWM0Iiwic2Vjb25kQ29ybmVyNCIsInNlY29uZENvcm5lciIsImFkZCIsInBpeGVsVG9UZXh0dXJlIiwiVEVYVFVSRV9CQVNFX0xFVkVMIiwiVEVYVFVSRV9NQVhfTEVWRUwiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfV1JBUF9SIiwicmVzY2FsZVNvdXJjZSIsInRyYW5zZmVyRnVuY3Rpb25Tb3VyY2UiLCJTZWdtZW50YXRpb25GaWVsZCIsImNvbHVtbnMiLCJyb3dzIiwic2xpY2VzIiwic2xpY2VTaXplIiwicGFja2VkUGl4ZWxEYXRhIiwiVWludDhBcnJheSIsImJ5dGVzUGVyUGFja2VkUm93IiwiY2VpbCIsInBhY2tlZFNsaWNlU2l6ZSIsInBpeGVsRGF0YSIsInJvdyIsInBhY2tlZFJvd0luZGV4IiwiY29sdW1uIiwiY29sdW1uQnl0ZUluZGV4IiwicGFja2VkSW5kZXgiLCJjb2x1bW5CaXRJbmRleCIsIm1hc2siLCJ1bnBhY2tlZFZhbHVlIiwid2FybiIsInNoYXJlZEdyb3VwcyIsIlNsaWNlVGhpY2tuZXNzIiwiQ29sb3JzIiwiZGljb21sYWIyUkdCIiwiU2VnbWVudCIsIlJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlIiwiYnl0ZUFycmF5IiwidW5wYWNrIiwiUjgiLCJVTlNJR05FRF9CWVRFIiwic2VnbWVudERhdGFzZXRzIiwianNvbkRhdGFzZXQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VnbWVudHMiLCJzZWdtZW50Iiwic2VnbWVudERhdGFzZXQiLCJwYXJzZSIsInNlZ21lbnRHcm91cExpc3RzIiwiZnVuY3Rpb25hbEdyb3VwIiwic2VnbWVudE51bWJlciIsIlNlZ21lbnRJZGVudGlmaWNhdGlvbiIsIlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyIiwiZnJhbWVTaXplIiwic2VnbWVudE9mZnNldHMiLCJzZWdtZW50U2l6ZXMiLCJzZWdtZW50R3JvdXBMaXN0IiwicHJldmlvdXNPZmZzZXQiLCJudW1iZXJPZkZyYW1lcyIsImJlZ2luIiwiZW5kIiwiVHJhbnNmb3JtRmllbGQiLCJncmlkIiwiRGVmb3JtYWJsZVJlZ2lzdHJhdGlvbiIsIkRlZm9ybWFibGVSZWdpc3RyYXRpb25HcmlkIiwiR3JpZERpbWVuc2lvbnMiLCJHcmlkUmVzb2x1dGlvbiIsInNsaWNlU3RlcCIsInNsaWNlU3BhY2luZyIsImZyYW1lUG9zaXRpb24iLCJSR0JBMzJGIiwidmVjdG9yQ291bnQiLCJyZ2JhQXJyYXkiLCJ2ZWN0b3JJbmRleCIsIlZlY3RvckdyaWREYXRhIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJBQ1RJVkVfVEVYVFVSRSIsIkFDVElWRV9VTklGT1JNUyIsIkFDVElWRV9VTklGT1JNX0JMT0NLUyIsIkFMSUFTRURfTElORV9XSURUSF9SQU5HRSIsIkFMSUFTRURfUE9JTlRfU0laRV9SQU5HRSIsIkFMUEhBIiwiQUxQSEFfQklUUyIsIkFMV0FZUyIsIkFOWV9TQU1QTEVTX1BBU1NFRCIsIkFOWV9TQU1QTEVTX1BBU1NFRF9DT05TRVJWQVRJVkUiLCJBUlJBWV9CVUZGRVJfQklORElORyIsIkFUVEFDSEVEX1NIQURFUlMiLCJCQUNLIiwiQkxFTkQiLCJCTEVORF9DT0xPUiIsIkJMRU5EX0RTVF9BTFBIQSIsIkJMRU5EX0RTVF9SR0IiLCJCTEVORF9FUVVBVElPTiIsIkJMRU5EX0VRVUFUSU9OX0FMUEhBIiwiQkxFTkRfRVFVQVRJT05fUkdCIiwiQkxFTkRfU1JDX0FMUEhBIiwiQkxFTkRfU1JDX1JHQiIsIkJMVUVfQklUUyIsIkJPT0wiLCJCT09MX1ZFQzIiLCJCT09MX1ZFQzMiLCJCT09MX1ZFQzQiLCJCUk9XU0VSX0RFRkFVTFRfV0VCR0wiLCJCVUZGRVJfU0laRSIsIkJVRkZFUl9VU0FHRSIsIkJZVEUiLCJDQ1ciLCJDT0xPUiIsIkNPTE9SX0FUVEFDSE1FTlQxIiwiQ09MT1JfQVRUQUNITUVOVDIiLCJDT0xPUl9BVFRBQ0hNRU5UMyIsIkNPTE9SX0FUVEFDSE1FTlQ0IiwiQ09MT1JfQVRUQUNITUVOVDUiLCJDT0xPUl9BVFRBQ0hNRU5UNiIsIkNPTE9SX0FUVEFDSE1FTlQ3IiwiQ09MT1JfQVRUQUNITUVOVDgiLCJDT0xPUl9BVFRBQ0hNRU5UOSIsIkNPTE9SX0FUVEFDSE1FTlQxMCIsIkNPTE9SX0FUVEFDSE1FTlQxMSIsIkNPTE9SX0FUVEFDSE1FTlQxMiIsIkNPTE9SX0FUVEFDSE1FTlQxMyIsIkNPTE9SX0FUVEFDSE1FTlQxNCIsIkNPTE9SX0FUVEFDSE1FTlQxNSIsIkNPTE9SX0NMRUFSX1ZBTFVFIiwiQ09MT1JfV1JJVEVNQVNLIiwiQ09NUEFSRV9SRUZfVE9fVEVYVFVSRSIsIkNPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTIiwiQ09OU1RBTlRfQUxQSEEiLCJDT05TVEFOVF9DT0xPUiIsIkNPTlRFWFRfTE9TVF9XRUJHTCIsIkNPUFlfUkVBRF9CVUZGRVIiLCJDT1BZX1JFQURfQlVGRkVSX0JJTkRJTkciLCJDT1BZX1dSSVRFX0JVRkZFUiIsIkNPUFlfV1JJVEVfQlVGRkVSX0JJTkRJTkciLCJDVUxMX0ZBQ0UiLCJDVUxMX0ZBQ0VfTU9ERSIsIkNVUlJFTlRfUFJPR1JBTSIsIkNVUlJFTlRfUVVFUlkiLCJDVVJSRU5UX1ZFUlRFWF9BVFRSSUIiLCJDVyIsIkRFQ1IiLCJERUNSX1dSQVAiLCJERUxFVEVfU1RBVFVTIiwiREVQVEgiLCJERVBUSDI0X1NURU5DSUw4IiwiREVQVEgzMkZfU1RFTkNJTDgiLCJERVBUSF9BVFRBQ0hNRU5UIiwiREVQVEhfQklUUyIsIkRFUFRIX0JVRkZFUl9CSVQiLCJERVBUSF9DTEVBUl9WQUxVRSIsIkRFUFRIX0NPTVBPTkVOVCIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiREVQVEhfQ09NUE9ORU5UMjQiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSF9GVU5DIiwiREVQVEhfUkFOR0UiLCJERVBUSF9TVEVOQ0lMIiwiREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIiwiREVQVEhfVEVTVCIsIkRFUFRIX1dSSVRFTUFTSyIsIkRJVEhFUiIsIkRPTlRfQ0FSRSIsIkRSQVdfQlVGRkVSMCIsIkRSQVdfQlVGRkVSMSIsIkRSQVdfQlVGRkVSMiIsIkRSQVdfQlVGRkVSMyIsIkRSQVdfQlVGRkVSNCIsIkRSQVdfQlVGRkVSNSIsIkRSQVdfQlVGRkVSNiIsIkRSQVdfQlVGRkVSNyIsIkRSQVdfQlVGRkVSOCIsIkRSQVdfQlVGRkVSOSIsIkRSQVdfQlVGRkVSMTAiLCJEUkFXX0JVRkZFUjExIiwiRFJBV19CVUZGRVIxMiIsIkRSQVdfQlVGRkVSMTMiLCJEUkFXX0JVRkZFUjE0IiwiRFJBV19CVUZGRVIxNSIsIkRSQVdfRlJBTUVCVUZGRVIiLCJEUkFXX0ZSQU1FQlVGRkVSX0JJTkRJTkciLCJEU1RfQUxQSEEiLCJEU1RfQ09MT1IiLCJEWU5BTUlDX0NPUFkiLCJEWU5BTUlDX0RSQVciLCJEWU5BTUlDX1JFQUQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkciLCJFUVVBTCIsIkZBU1RFU1QiLCJGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVYiLCJGTE9BVF9NQVQyIiwiRkxPQVRfTUFUMngzIiwiRkxPQVRfTUFUMng0IiwiRkxPQVRfTUFUMyIsIkZMT0FUX01BVDN4MiIsIkZMT0FUX01BVDN4NCIsIkZMT0FUX01BVDQiLCJGTE9BVF9NQVQ0eDIiLCJGTE9BVF9NQVQ0eDMiLCJGTE9BVF9WRUMyIiwiRkxPQVRfVkVDMyIsIkZMT0FUX1ZFQzQiLCJGUkFHTUVOVF9TSEFERVJfREVSSVZBVElWRV9ISU5UIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9BTFBIQV9TSVpFIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9CTFVFX1NJWkUiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTE9SX0VOQ09ESU5HIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT01QT05FTlRfVFlQRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfREVQVEhfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfR1JFRU5fU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX05BTUUiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9UWVBFIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9SRURfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfU1RFTkNJTF9TSVpFIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0NVQkVfTUFQX0ZBQ0UiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEFZRVIiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEVWRUwiLCJGUkFNRUJVRkZFUl9CSU5ESU5HIiwiRlJBTUVCVUZGRVJfREVGQVVMVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UIiwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NVUxUSVNBTVBMRSIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiRlJPTlQiLCJGUk9OVF9BTkRfQkFDSyIsIkZST05UX0ZBQ0UiLCJGVU5DX0FERCIsIkZVTkNfUkVWRVJTRV9TVUJUUkFDVCIsIkZVTkNfU1VCVFJBQ1QiLCJHRU5FUkFURV9NSVBNQVBfSElOVCIsIkdFUVVBTCIsIkdSRUFURVIiLCJHUkVFTl9CSVRTIiwiSEFMRl9GTE9BVCIsIkhJR0hfRkxPQVQiLCJISUdIX0lOVCIsIklOQ1IiLCJJTkNSX1dSQVAiLCJJTlRFUkxFQVZFRF9BVFRSSUJTIiwiSU5UXzJfMTBfMTBfMTBfUkVWIiwiSU5UX1NBTVBMRVJfMkQiLCJJTlRfU0FNUExFUl8yRF9BUlJBWSIsIklOVF9TQU1QTEVSXzNEIiwiSU5UX1NBTVBMRVJfQ1VCRSIsIklOVF9WRUMyIiwiSU5UX1ZFQzMiLCJJTlRfVkVDNCIsIklOVkFMSURfRU5VTSIsIklOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OIiwiSU5WQUxJRF9JTkRFWCIsIklOVkFMSURfT1BFUkFUSU9OIiwiSU5WQUxJRF9WQUxVRSIsIklOVkVSVCIsIktFRVAiLCJMRVFVQUwiLCJMRVNTIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJMSU5FUyIsIkxJTkVfTE9PUCIsIkxJTkVfU1RSSVAiLCJMSU5FX1dJRFRIIiwiTE9XX0ZMT0FUIiwiTE9XX0lOVCIsIkxVTUlOQU5DRSIsIkxVTUlOQU5DRV9BTFBIQSIsIk1BWCIsIk1BWF8zRF9URVhUVVJFX1NJWkUiLCJNQVhfQVJSQVlfVEVYVFVSRV9MQVlFUlMiLCJNQVhfQ0xJRU5UX1dBSVRfVElNRU9VVF9XRUJHTCIsIk1BWF9DT0xPUl9BVFRBQ0hNRU5UUyIsIk1BWF9DT01CSU5FRF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFMiLCJNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyIsIk1BWF9DT01CSU5FRF9VTklGT1JNX0JMT0NLUyIsIk1BWF9DT01CSU5FRF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTIiwiTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSIsIk1BWF9EUkFXX0JVRkZFUlMiLCJNQVhfRUxFTUVOVFNfSU5ESUNFUyIsIk1BWF9FTEVNRU5UU19WRVJUSUNFUyIsIk1BWF9FTEVNRU5UX0lOREVYIiwiTUFYX0ZSQUdNRU5UX0lOUFVUX0NPTVBPTkVOVFMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9CTE9DS1MiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9DT01QT05FTlRTIiwiTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyIsIk1BWF9QUk9HUkFNX1RFWEVMX09GRlNFVCIsIk1BWF9SRU5ERVJCVUZGRVJfU0laRSIsIk1BWF9TQU1QTEVTIiwiTUFYX1NFUlZFUl9XQUlUX1RJTUVPVVQiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsIk1BWF9URVhUVVJFX0xPRF9CSUFTIiwiTUFYX1RFWFRVUkVfU0laRSIsIk1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfSU5URVJMRUFWRURfQ09NUE9ORU5UUyIsIk1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfU0VQQVJBVEVfQVRUUklCUyIsIk1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfU0VQQVJBVEVfQ09NUE9ORU5UUyIsIk1BWF9VTklGT1JNX0JMT0NLX1NJWkUiLCJNQVhfVU5JRk9STV9CVUZGRVJfQklORElOR1MiLCJNQVhfVkFSWUlOR19DT01QT05FTlRTIiwiTUFYX1ZBUllJTkdfVkVDVE9SUyIsIk1BWF9WRVJURVhfQVRUUklCUyIsIk1BWF9WRVJURVhfT1VUUFVUX0NPTVBPTkVOVFMiLCJNQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fQkxPQ0tTIiwiTUFYX1ZFUlRFWF9VTklGT1JNX0NPTVBPTkVOVFMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyIsIk1BWF9WSUVXUE9SVF9ESU1TIiwiTUVESVVNX0ZMT0FUIiwiTUVESVVNX0lOVCIsIk1JTiIsIk1JTl9QUk9HUkFNX1RFWEVMX09GRlNFVCIsIk1JUlJPUkVEX1JFUEVBVCIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIk5FQVJFU1RfTUlQTUFQX05FQVJFU1QiLCJORVZFUiIsIk5JQ0VTVCIsIk5PTkUiLCJOT1RFUVVBTCIsIk5PX0VSUk9SIiwiT0JKRUNUX1RZUEUiLCJPTkUiLCJPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEEiLCJPTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1IiLCJPTkVfTUlOVVNfRFNUX0FMUEhBIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiT1VUX09GX01FTU9SWSIsIlBBQ0tfQUxJR05NRU5UIiwiUEFDS19ST1dfTEVOR1RIIiwiUEFDS19TS0lQX1BJWEVMUyIsIlBBQ0tfU0tJUF9ST1dTIiwiUElYRUxfUEFDS19CVUZGRVIiLCJQSVhFTF9QQUNLX0JVRkZFUl9CSU5ESU5HIiwiUElYRUxfVU5QQUNLX0JVRkZFUiIsIlBJWEVMX1VOUEFDS19CVUZGRVJfQklORElORyIsIlBPSU5UUyIsIlBPTFlHT05fT0ZGU0VUX0ZBQ1RPUiIsIlBPTFlHT05fT0ZGU0VUX0ZJTEwiLCJQT0xZR09OX09GRlNFVF9VTklUUyIsIlFVRVJZX1JFU1VMVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUiLCJSOEkiLCJSOFVJIiwiUjhfU05PUk0iLCJSMTFGX0cxMUZfQjEwRiIsIlIxNlVJIiwiUjMyRiIsIlIzMkkiLCJSMzJVSSIsIlJBU1RFUklaRVJfRElTQ0FSRCIsIlJFQURfQlVGRkVSIiwiUkVBRF9GUkFNRUJVRkZFUiIsIlJFQURfRlJBTUVCVUZGRVJfQklORElORyIsIlJFRF9CSVRTIiwiUkVOREVSQlVGRkVSIiwiUkVOREVSQlVGRkVSX0FMUEhBX1NJWkUiLCJSRU5ERVJCVUZGRVJfQklORElORyIsIlJFTkRFUkJVRkZFUl9CTFVFX1NJWkUiLCJSRU5ERVJCVUZGRVJfREVQVEhfU0laRSIsIlJFTkRFUkJVRkZFUl9HUkVFTl9TSVpFIiwiUkVOREVSQlVGRkVSX0hFSUdIVCIsIlJFTkRFUkJVRkZFUl9JTlRFUk5BTF9GT1JNQVQiLCJSRU5ERVJCVUZGRVJfUkVEX1NJWkUiLCJSRU5ERVJCVUZGRVJfU0FNUExFUyIsIlJFTkRFUkJVRkZFUl9TVEVOQ0lMX1NJWkUiLCJSRU5ERVJCVUZGRVJfV0lEVEgiLCJSRU5ERVJFUiIsIlJFUEVBVCIsIlJFUExBQ0UiLCJSRyIsIlJHOCIsIlJHOEkiLCJSRzhVSSIsIlJHOF9TTk9STSIsIlJHMTZGIiwiUkcxNkkiLCJSRzE2VUkiLCJSRzMyRiIsIlJHMzJJIiwiUkczMlVJIiwiUkdCIiwiUkdCNV9BMSIsIlJHQjgiLCJSR0I4SSIsIlJHQjhVSSIsIlJHQjhfU05PUk0iLCJSR0I5X0U1IiwiUkdCMTBfQTIiLCJSR0IxMF9BMlVJIiwiUkdCMTZGIiwiUkdCMTZJIiwiUkdCMTZVSSIsIlJHQjMyRiIsIlJHQjMySSIsIlJHQjMyVUkiLCJSR0I1NjUiLCJSR0JBNCIsIlJHQkE4IiwiUkdCQThJIiwiUkdCQThVSSIsIlJHQkE4X1NOT1JNIiwiUkdCQTE2RiIsIlJHQkExNkkiLCJSR0JBMTZVSSIsIlJHQkEzMkkiLCJSR0JBMzJVSSIsIlJHQl9JTlRFR0VSIiwiUkdfSU5URUdFUiIsIlNBTVBMRVJfMkQiLCJTQU1QTEVSXzJEX0FSUkFZIiwiU0FNUExFUl8yRF9BUlJBWV9TSEFET1ciLCJTQU1QTEVSXzJEX1NIQURPVyIsIlNBTVBMRVJfM0QiLCJTQU1QTEVSX0JJTkRJTkciLCJTQU1QTEVSX0NVQkUiLCJTQU1QTEVSX0NVQkVfU0hBRE9XIiwiU0FNUExFUyIsIlNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSIsIlNBTVBMRV9CVUZGRVJTIiwiU0FNUExFX0NPVkVSQUdFIiwiU0FNUExFX0NPVkVSQUdFX0lOVkVSVCIsIlNBTVBMRV9DT1ZFUkFHRV9WQUxVRSIsIlNDSVNTT1JfQk9YIiwiU0NJU1NPUl9URVNUIiwiU0VQQVJBVEVfQVRUUklCUyIsIlNIQURFUl9UWVBFIiwiU0hBRElOR19MQU5HVUFHRV9WRVJTSU9OIiwiU0lHTkFMRUQiLCJTSUdORURfTk9STUFMSVpFRCIsIlNSQ19BTFBIQSIsIlNSQ19BTFBIQV9TQVRVUkFURSIsIlNSQ19DT0xPUiIsIlNSR0IiLCJTUkdCOCIsIlNSR0I4X0FMUEhBOCIsIlNUQVRJQ19DT1BZIiwiU1RBVElDX1JFQUQiLCJTVEVOQ0lMIiwiU1RFTkNJTF9BVFRBQ0hNRU5UIiwiU1RFTkNJTF9CQUNLX0ZBSUwiLCJTVEVOQ0lMX0JBQ0tfRlVOQyIsIlNURU5DSUxfQkFDS19QQVNTX0RFUFRIX0ZBSUwiLCJTVEVOQ0lMX0JBQ0tfUEFTU19ERVBUSF9QQVNTIiwiU1RFTkNJTF9CQUNLX1JFRiIsIlNURU5DSUxfQkFDS19WQUxVRV9NQVNLIiwiU1RFTkNJTF9CQUNLX1dSSVRFTUFTSyIsIlNURU5DSUxfQklUUyIsIlNURU5DSUxfQlVGRkVSX0JJVCIsIlNURU5DSUxfQ0xFQVJfVkFMVUUiLCJTVEVOQ0lMX0ZBSUwiLCJTVEVOQ0lMX0ZVTkMiLCJTVEVOQ0lMX0lOREVYOCIsIlNURU5DSUxfUEFTU19ERVBUSF9GQUlMIiwiU1RFTkNJTF9QQVNTX0RFUFRIX1BBU1MiLCJTVEVOQ0lMX1JFRiIsIlNURU5DSUxfVEVTVCIsIlNURU5DSUxfVkFMVUVfTUFTSyIsIlNURU5DSUxfV1JJVEVNQVNLIiwiU1RSRUFNX0NPUFkiLCJTVFJFQU1fRFJBVyIsIlNUUkVBTV9SRUFEIiwiU1VCUElYRUxfQklUUyIsIlNZTkNfQ09ORElUSU9OIiwiU1lOQ19GRU5DRSIsIlNZTkNfRkxBR1MiLCJTWU5DX0ZMVVNIX0NPTU1BTkRTX0JJVCIsIlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFIiwiU1lOQ19TVEFUVVMiLCJURVhUVVJFIiwiVEVYVFVSRTEiLCJURVhUVVJFMiIsIlRFWFRVUkUzIiwiVEVYVFVSRTQiLCJURVhUVVJFNSIsIlRFWFRVUkU2IiwiVEVYVFVSRTciLCJURVhUVVJFOCIsIlRFWFRVUkU5IiwiVEVYVFVSRTEwIiwiVEVYVFVSRTExIiwiVEVYVFVSRTEyIiwiVEVYVFVSRTEzIiwiVEVYVFVSRTE0IiwiVEVYVFVSRTE1IiwiVEVYVFVSRTE2IiwiVEVYVFVSRTE3IiwiVEVYVFVSRTE4IiwiVEVYVFVSRTE5IiwiVEVYVFVSRTIwIiwiVEVYVFVSRTIxIiwiVEVYVFVSRTIyIiwiVEVYVFVSRTIzIiwiVEVYVFVSRTI0IiwiVEVYVFVSRTI1IiwiVEVYVFVSRTI2IiwiVEVYVFVSRTI3IiwiVEVYVFVSRTI4IiwiVEVYVFVSRTI5IiwiVEVYVFVSRTMwIiwiVEVYVFVSRTMxIiwiVEVYVFVSRV8yRCIsIlRFWFRVUkVfMkRfQVJSQVkiLCJURVhUVVJFX0JJTkRJTkdfMkQiLCJURVhUVVJFX0JJTkRJTkdfMkRfQVJSQVkiLCJURVhUVVJFX0JJTkRJTkdfM0QiLCJURVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVAiLCJURVhUVVJFX0NPTVBBUkVfRlVOQyIsIlRFWFRVUkVfQ09NUEFSRV9NT0RFIiwiVEVYVFVSRV9DVUJFX01BUCIsIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWCIsIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSIsIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiIsIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCIsIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWSIsIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWiIsIlRFWFRVUkVfSU1NVVRBQkxFX0ZPUk1BVCIsIlRFWFRVUkVfSU1NVVRBQkxFX0xFVkVMUyIsIlRFWFRVUkVfTUFYX0xPRCIsIlRFWFRVUkVfTUlOX0xPRCIsIlRJTUVPVVRfSUdOT1JFRCIsIlRSQU5TRk9STV9GRUVEQkFDSyIsIlRSQU5TRk9STV9GRUVEQkFDS19BQ1RJVkUiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQklORElORyIsIlRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVIiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX0JJTkRJTkciLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX01PREUiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NJWkUiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NUQVJUIiwiVFJBTlNGT1JNX0ZFRURCQUNLX1BBVVNFRCIsIlRSQU5TRk9STV9GRUVEQkFDS19QUklNSVRJVkVTX1dSSVRURU4iLCJUUkFOU0ZPUk1fRkVFREJBQ0tfVkFSWUlOR1MiLCJUUklBTkdMRVMiLCJUUklBTkdMRV9GQU4iLCJVTklGT1JNX0FSUkFZX1NUUklERSIsIlVOSUZPUk1fQkxPQ0tfQUNUSVZFX1VOSUZPUk1TIiwiVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STV9JTkRJQ0VTIiwiVU5JRk9STV9CTE9DS19CSU5ESU5HIiwiVU5JRk9STV9CTE9DS19EQVRBX1NJWkUiLCJVTklGT1JNX0JMT0NLX0lOREVYIiwiVU5JRk9STV9CTE9DS19SRUZFUkVOQ0VEX0JZX0ZSQUdNRU5UX1NIQURFUiIsIlVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9WRVJURVhfU0hBREVSIiwiVU5JRk9STV9CVUZGRVIiLCJVTklGT1JNX0JVRkZFUl9CSU5ESU5HIiwiVU5JRk9STV9CVUZGRVJfT0ZGU0VUX0FMSUdOTUVOVCIsIlVOSUZPUk1fQlVGRkVSX1NJWkUiLCJVTklGT1JNX0JVRkZFUl9TVEFSVCIsIlVOSUZPUk1fSVNfUk9XX01BSk9SIiwiVU5JRk9STV9NQVRSSVhfU1RSSURFIiwiVU5JRk9STV9PRkZTRVQiLCJVTklGT1JNX1NJWkUiLCJVTklGT1JNX1RZUEUiLCJVTlBBQ0tfQUxJR05NRU5UIiwiVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfSU1BR0VfSEVJR0hUIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX1JPV19MRU5HVEgiLCJVTlBBQ0tfU0tJUF9JTUFHRVMiLCJVTlBBQ0tfU0tJUF9QSVhFTFMiLCJVTlBBQ0tfU0tJUF9ST1dTIiwiVU5TSUdOQUxFRCIsIlVOU0lHTkVEX0lOVCIsIlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFViIsIlVOU0lHTkVEX0lOVF81XzlfOV85X1JFViIsIlVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYiLCJVTlNJR05FRF9JTlRfMjRfOCIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVkiLCJVTlNJR05FRF9JTlRfU0FNUExFUl8zRCIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkUiLCJVTlNJR05FRF9JTlRfVkVDMiIsIlVOU0lHTkVEX0lOVF9WRUMzIiwiVU5TSUdORURfSU5UX1ZFQzQiLCJVTlNJR05FRF9OT1JNQUxJWkVEIiwiVU5TSUdORURfU0hPUlQiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlVOU0lHTkVEX1NIT1JUXzVfNl81IiwiVkFMSURBVEVfU1RBVFVTIiwiVkVORE9SIiwiVkVSU0lPTiIsIlZFUlRFWF9BUlJBWV9CSU5ESU5HIiwiVkVSVEVYX0FUVFJJQl9BUlJBWV9CVUZGRVJfQklORElORyIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUiIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFRCIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfSU5URUdFUiIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfTk9STUFMSVpFRCIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfUE9JTlRFUiIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfU0laRSIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfU1RSSURFIiwiVkVSVEVYX0FUVFJJQl9BUlJBWV9UWVBFIiwiVklFV1BPUlQiLCJaRVJPIiwibWlkZW50aXR5IiwibXNjYWxlIiwiU01BTExfTlVNQkVSIiwidiIsInNxcnQiLCJyZWR1Y2UiLCJzdW0iLCJ2MSIsInYyIiwidGhldGEiLCJUIiwiY1QiLCJjb3MiLCJzVCIsIm0xIiwibTIiLCJtIiwiVW5pZm9ybXMiLCJyZXNldCIsInBvaW50TGlnaHQiLCJncmFkaWVudFNpemUiLCJyYXlNYXhTdGVwcyIsInNhbXBsZVN0ZXAiLCJyZW5kZXJDYW52YXNXaWR0aCIsInJlbmRlckNhbnZhc0hlaWdodCIsInNsaWNlTW9kZSIsIkthbWJpZW50IiwiS2RpZmZ1c2UiLCJLc3BlY3VsYXIiLCJTaGluaW5lc3MiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDbEZB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QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCOztBQUVqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkNBQTZDLCtCQUErQjtBQUM1RTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsWUFBWTtBQUNqQztBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCOztBQUUxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0M7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6Qzs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtB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QTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsNkRBQTZELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiw2REFBNkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0IsMkRBQTJELDRCQUE0QixTQUFTLCtCQUErQiwyREFBMkQsNEJBQTRCLFNBQVMsK0JBQStCLDJEQUEyRCw0QkFBNEIsU0FBUywrQkFBK0Is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QW1DOztBQUVob211QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7O0FBR1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHNDQUFzQyxzQ0FBc0M7QUFDNUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCLFlBQVk7QUFDckM7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBLDhFQUE4RTs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBLDBDQUEwQyxVQUFVO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLFFBQVEsVUFBVTs7QUFFbEI7QUFDQTs7QUFFQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxFQUFFO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxPQUFPO0FBQzlEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFlBQVk7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7O0FBR1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyxFQUFFO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7O0FBRTdCLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOzs7QUFHUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFD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Q0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7OztBQUdBLGdGQUFnRjs7QUFFaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87OztBQUdQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sRUFBRTtBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsMEZBQTBGOztBQUUxRjtBQUNBLG9FQUFvRTs7QUFFcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTOzs7QUFHVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLDBGQUEwRjtBQUMxRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRTs7QUFFL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDOztBQUV0Qyx1R0FBdUc7O0FBRXZHLHNIQUFzSDs7QUFFdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7O0FBR1Q7QUFDQSxPQUFPLEVBQUU7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXLEdBQUcsV0FBVyxPQUFPLGlCQUFpQixHQUFHLGlCQUFpQjtBQUN4RixZQUFZLE1BQU07QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxR0FBcUc7QUFDckc7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjs7QUFFQTtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0EsS0FBSzs7QUFFTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGNBQWM7QUFDL0Msa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4Qix1QkFBdUIsV0FBVztBQUNsQyxhQUFhO0FBQ2IsbUJBQW1CO0FBQ25CLHdDQUF3QztBQUN4QztBQUNBLFdBQVcsc0NBQXNDO0FBQ2pELGlDQUFpQztBQUNqQyxzQkFBc0IsYUFBYTtBQUNuQywyQ0FBMkMsNkJBQTZCO0FBQ3hFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxjQUFjO0FBQ2Q7QUFDQSxFQUFFO0FBQ0Ysa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4Qix1QkFBdUIsb0JBQW9CO0FBQzNDLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQSxFQUFFO0FBQ0YseUNBQXlDO0FBQ3pDLCtCQUErQjtBQUMvQixFQUFFO0FBQ0YscURBQXFEO0FBQ3JEO0FBQ0EsR0FBRztBQUNILHdDQUF3QztBQUN4QztBQUNBLEVBQUU7QUFDRixpREFBaUQsOEJBQThCO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDLGVBQWU7QUFDckQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsa0NBQWtDO0FBQ25GLGtDQUFrQyw2QkFBNkI7QUFDL0QsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsb0RBQW9EO0FBQ3BEO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0EsMkZBQTJGO0FBQzNGLE9BQU87QUFDUDtBQUNBLHlGQUF5RjtBQUN6RixVQUFVO0FBQ1YsVUFBVTtBQUNWLGVBQWU7QUFDZixDQUFDLGVBQWU7QUFDaEIsZUFBZTtBQUNmLENBQUMsS0FBSztBQUNOLGVBQWU7QUFDZixDQUFDO0FBQ0QsQ0FBQyxlQUFlO0FBQ2hCLGVBQWU7QUFDZixDQUFDLGVBQWU7QUFDaEIsZUFBZTtBQUNmLENBQUMsS0FBSztBQUNOLGVBQWU7QUFDZixHQUFHO0FBQ0g7QUFDQSxLQUFLO0FBQ0wsdUJBQXVCO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBLHFEQUFxRDtBQUNyRCxHQUFHO0FBQ0gsaURBQWlEO0FBQ2pEOztBQUVBO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0EsbURBQW1EO0FBQ25ELEdBQUc7QUFDSCwrQ0FBK0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBLGlFQUFpRSxxQkFBcUI7O0FBRXRGO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUssMkJBQTJCOztBQUVoQztBQUNBLHdDQUF3QyxvQ0FBb0M7QUFDNUUsd0NBQXdDLHFDQUFxQztBQUM3RSxvRUFBb0U7QUFDcEUsY0FBYyxhQUFhO0FBQzNCO0FBQ0EseUNBQXlDO0FBQ3pDLFdBQVc7QUFDWCxZQUFZO0FBQ1osVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLLGlCQUFpQjs7QUFFdEI7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLGNBQWMsYUFBYTtBQUMzQjtBQUNBLDhCQUE4QjtBQUM5QixXQUFXO0FBQ1gsUUFBUTtBQUNSLHFCQUFxQjtBQUNyQjtBQUNBLENBQUMsS0FBSztBQUNOO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLLGlCQUFpQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0EsY0FBYyxhQUFhO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSw4QkFBOEIsK0RBQStELFNBQVM7QUFDdEcsb0NBQW9DLDJGQUEyRjs7QUFFL0g7QUFDQSw4REFBOEQ7QUFDOUQsY0FBYyxhQUFhO0FBQzNCLHVEQUF1RCxrQ0FBa0MsS0FBSywwQkFBMEIsMkJBQTJCO0FBQ25KO0FBQ0EsNENBQTRDLDZCQUE2Qjs7QUFFekU7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSyxzQkFBc0I7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE1BQU07QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUs7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLFlBQVksVUFBVTtBQUN0QixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QixlQUFlLFVBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QixZQUFZLFVBQVU7QUFDdEIsWUFBWSxPQUFPO0FBQ25CLFlBQVksVUFBVTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEIsWUFBWSxPQUFPO0FBQ25CLFlBQVksVUFBVTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsVUFBVTtBQUMzQixtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQixVQUFVO0FBQzNCLG1CQUFtQixVQUFVO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCOzs7QUFHOUI7QUFDQTs7QUFFQSxpQkFBaUIsVUFBVTtBQUMzQixtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsU0FBUztBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksVUFBVTtBQUN0QixhQUFhLEtBQUs7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsdUNBQXVDO0FBQ3hEO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLDZCQUE2QjtBQUMvQztBQUNBLGlFQUFpRTs7QUFFakU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQiw2QkFBNkI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLDJCQUEyQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBOztBQUVBLHFCQUFxQiw4QkFBOEI7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLHFCQUFxQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksUUFBUTtBQUNwQixhQUFhLE9BQU87QUFDcEI7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksWUFBWTtBQUN4QixXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrWUFBa1k7O0FBRWxZO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsNkNBQTZDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksV0FBVztBQUN2Qjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWSxRQUFRO0FBQ3BCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLDRCQUE0QjtBQUM3QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksU0FBUztBQUNyQixZQUFZLE9BQU87QUFDbkI7QUFDQSxZQUFZLE9BQU87QUFDbkI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLFNBQVM7QUFDckIsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsWUFBWSxPQUFPO0FBQ25COzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkI7QUFDQSxZQUFZLE9BQU87QUFDbkI7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QixZQUFZLGFBQWE7QUFDekI7OztBQUdBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFVBQVU7QUFDdEIsWUFBWSxhQUFhO0FBQ3pCLFlBQVksUUFBUTtBQUNwQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QixZQUFZLFVBQVU7QUFDdEIsWUFBWSxRQUFRO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsaUNBQWlDO0FBQ3pEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87OztBQUdQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNFQUFzRTs7QUFFdEU7O0FBRUEsa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBOztBQUVBLG1CQUFtQix5QkFBeUI7QUFDNUM7QUFDQSxHQUFHOzs7QUFHSDs7QUFFQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCOztBQUV0Qix1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQix5QkFBeUI7QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQiw2QkFBNkI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkIsd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7OztBQUd4QixzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsT0FBTztBQUNyQixjQUFjLFNBQVM7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUIsWUFBWSxPQUFPO0FBQ25CLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLGdCQUFnQjtBQUM1QixZQUFZLE9BQU87QUFDbkIsYUFBYSxLQUFLO0FBQ2xCOzs7QUFHQTtBQUNBO0FBQ0EsZ0NBQWdDLG1EQUFtRDs7QUFFbkY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUEsb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkJBQTZCLG9DQUFvQztBQUNqRTtBQUNBOztBQUVBOztBQUVBLDZCQUE2QixvQ0FBb0M7QUFDakU7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixrREFBa0Q7QUFDaEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwySUFBMkk7QUFDM0k7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLG9DQUFvQztBQUNyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLFFBQVE7QUFDcEIsYUFBYSxPQUFPO0FBQ3BCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLFlBQVk7QUFDeEIsV0FBVyxFQUFFO0FBQ2IsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrWUFBa1k7O0FBRWxZO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLDREQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0RBQW9EOztBQUVwRDtBQUNBOztBQUVBLG1CQUFtQixtQ0FBbUM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCLDZDQUE2QztBQUN0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLFdBQVc7QUFDdkI7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxTQUFTO0FBQ3JCLFlBQVksT0FBTztBQUNuQjtBQUNBLFlBQVksT0FBTztBQUNuQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksU0FBUztBQUNyQixZQUFZLE9BQU87QUFDbkI7QUFDQSxZQUFZLE9BQU87QUFDbkI7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQjtBQUNBLFlBQVksT0FBTztBQUNuQjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLFlBQVksYUFBYTtBQUN6Qjs7O0FBR0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksVUFBVTtBQUN0QixZQUFZLGFBQWE7QUFDekIsWUFBWSxRQUFRO0FBQ3BCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLFlBQVksVUFBVTtBQUN0QixZQUFZLFFBQVE7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckIsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSxZQUFZLE9BQU87QUFDbkIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckIsWUFBWSxZQUFZO0FBQ3hCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLGdCQUFnQjtBQUM1QixZQUFZLE9BQU87QUFDbkIsYUFBYSxLQUFLO0FBQ2xCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sRUFBRTs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxPQUFPLEVBQUU7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0ZBQXdGO0FBQ3hGOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sRUFBRTtBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCwwRkFBMEY7QUFDMUY7QUFDQTs7QUFFQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFOztBQUUvRTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0M7O0FBRXRDLHVHQUF1Rzs7QUFFdkcsc0hBQXNIOztBQUV0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7O0FBR0EscUZBQXFGO0FBQ3JGLFlBQVk7QUFDWjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTyxhQUFhOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXLEdBQUcsV0FBVyxPQUFPLGlCQUFpQixHQUFHLGlCQUFpQjtBQUN4RixZQUFZLE1BQU07QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTyxhQUFhOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFD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QUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSx1RUFBdUUsYUFBYTtBQUNwRjtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOzs7QUFHUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87OztBQUdQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87OztBQUdQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPOzs7QUFHUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsdUVBQXVFLGFBQWE7QUFDcEY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkU7QUFDN0U7Ozs7Ozs7Ozs7Ozs7QUNwcWJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLCtFQUF1QjtBQUNsRCxlQUFlLG1CQUFPLENBQUMsMkVBQXFCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDZFQUFzQjtBQUM5QyxlQUFlLG1CQUFPLENBQUMsMkVBQXFCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQywyRUFBcUI7QUFDNUMsZUFBZSxtQkFBTyxDQUFDLDJFQUFxQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsMkVBQXFCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQywyRUFBcUI7QUFDNUMsZUFBZSxtQkFBTyxDQUFDLDJFQUFxQixFOzs7Ozs7Ozs7OztBQ3BDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FDckVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxxRUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCOztBQUVBLGtDO0FBQ0EscUI7QUFDQSxnQjtBQUNBLGdCO0FBQ0EsOEI7QUFDQSxxQjtBQUNBLEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7OztBQ25iQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMscUVBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0EsMkI7QUFDQTtBQUNBLEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FDcGRBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxxRUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGU7QUFDQSxvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE1BQU07QUFDakIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7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SztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEI7QUFDQSxhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFD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RUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxPO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FDdmxCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMscUVBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztB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Q0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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Q2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7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QUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUpmLEVBS0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBUmYsRUFTRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FBWCxHQUNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQURiLEdBRUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRmIsR0FHRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FaZixFQWFFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUFYLEdBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRGIsR0FFRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FGYixHQUdFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQWhCZixDQURLLEVBbUJMLENBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBSmYsRUFLRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FBWCxHQUNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQURiLEdBRUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRmIsR0FHRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FSZixFQVNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUFYLEdBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRGIsR0FFRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FGYixHQUdFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQVpmLEVBYUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBaEJmLENBbkJLLEVBcUNMLENBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBSmYsRUFLRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FBWCxHQUNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQURiLEdBRUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRmIsR0FHRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FSZixFQVNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUFYLEdBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRGIsR0FFRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FGYixHQUdFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQVpmLEVBYUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBaEJmLENBckNLLEVBdURMLENBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FEYixHQUVFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUZiLEdBR0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBSmYsRUFLRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FBWCxHQUNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQURiLEdBRUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRmIsR0FHRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FSZixFQVNFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQUFYLEdBQ0VELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBRGIsR0FFRUQsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBV0MsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sQ0FGYixHQUdFRCxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXQyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixDQVpmLEVBYUVELEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLElBQVdDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLENBQVgsR0FDRUQsRUFB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QUFBY0gsYUFBSyxFQUFFO0FBQXJCLE9BQXpCO0FBQ0EsV0FBS283QixrQkFBTCxHQUEwQjtBQUFFajdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUExQjtBQUNBLFdBQUtxN0IsU0FBTCxHQUFpQjtBQUFFbDdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUFqQjtBQUNBLFdBQUtzN0IsUUFBTCxHQUFnQjtBQUFFbjdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUFoQjtBQUNBLFdBQUt1N0IsUUFBTCxHQUFnQjtBQUFFcDdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUFoQjtBQUNBLFdBQUt3N0IsU0FBTCxHQUFpQjtBQUFFcjdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUFqQjtBQUNBLFdBQUt5N0IsU0FBTCxHQUFpQjtBQUFFdDdCLFlBQUksRUFBRSxJQUFSO0FBQWNILGFBQUssRUFBRTtBQUFyQixPQUFqQjtBQUNEOzs7Ozs7QUFHSCxJQUFNdEMsUUFBUSxHQUFHLElBQUltOUIsUUFBSixFQUFqQjtlQUVlbjlCLFEiLCJmaWxlIjoib2hpZi1zdGVwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJvaGlmLXN0ZXBcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wib2hpZi1zdGVwXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm9oaWYtc3RlcFwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsImZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vKlxuICBDb3B5cmlnaHQgwqkgMjAxOCBBbmRyZXcgUG93ZWxsXG5cbiAgVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGlzIFNvdXJjZSBDb2RlIEZvcm0uXG4qL1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5jb25zdCBsZXZlbHMgPSBTeW1ib2woJ2xvZy1sZXZlbHMnKTtcbmNvbnN0IGluc3RhbmNlID0gU3ltYm9sKCdsb2ctaW5zdGFuY2UnKTtcblxudmFyIE1ldGhvZEZhY3RvcnlfMSA9IGNsYXNzIE1ldGhvZEZhY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcihsb2dnZXIpIHtcbiAgICB0aGlzW2luc3RhbmNlXSA9IGxvZ2dlcjtcbiAgICB0aGlzW2xldmVsc10gPSB7XG4gICAgICBUUkFDRTogMCxcbiAgICAgIERFQlVHOiAxLFxuICAgICAgSU5GTzogMixcbiAgICAgIFdBUk46IDMsXG4gICAgICBFUlJPUjogNCxcbiAgICAgIFNJTEVOVDogNVxuICAgIH07XG4gIH1cblxuICBnZXQgbGV2ZWxzKCkge1xuICAgIHJldHVybiB0aGlzW2xldmVsc107XG4gIH1cblxuICBnZXQgbG9nZ2VyKCkge1xuICAgIHJldHVybiB0aGlzW2luc3RhbmNlXTtcbiAgfVxuXG4gIHNldCBsb2dnZXIobG9nZ2VyKSB7XG4gICAgdGhpc1tpbnN0YW5jZV0gPSBsb2dnZXI7XG4gIH1cblxuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5sZXZlbHMpXG4gICAgICAubWFwKChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBrZXkgIT09ICdzaWxlbnQnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIGJpbmRNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XG4gICAgY29uc3QgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kLmJpbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBtZXRob2QuYmluZChvYmopO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChtZXRob2QsIG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gTWlzc2luZyBiaW5kIHNoaW0gb3IgSUU4ICsgTW9kZXJuaXpyLCBmYWxsYmFjayB0byB3cmFwcGluZ1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGRpc3RpbGxMZXZlbChsZXZlbCkge1xuICAgIGxldCByZXN1bHQgPSBsZXZlbDtcblxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGhpcy5sZXZlbHNbcmVzdWx0LnRvVXBwZXJDYXNlKCldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzdWx0ID0gdGhpcy5sZXZlbHNbcmVzdWx0LnRvVXBwZXJDYXNlKCldO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxldmVsVmFsaWQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXZlbFZhbGlkKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ251bWJlcicgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSB0aGlzLmxldmVscy5TSUxFTlQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgYmVzdCBsb2dnaW5nIG1ldGhvZCBwb3NzaWJsZSBmb3IgdGhpcyBlbnZcbiAgICogV2hlcmV2ZXIgcG9zc2libGUgd2Ugd2FudCB0byBiaW5kLCBub3Qgd3JhcCwgdG8gcHJlc2VydmUgc3RhY2sgdHJhY2VzLlxuICAgKiBTaW5jZSB3ZSdyZSB0YXJnZXRpbmcgbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSdzIG5vIG5lZWQgdG8gd2FpdCBmb3IgdGhlXG4gICAqIGNvbnNvbGUgdG8gYmVjb21lIGF2YWlsYWJsZS5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIG1ha2UobWV0aG9kTmFtZSkge1xuICAgIGlmIChtZXRob2ROYW1lID09PSAnZGVidWcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1ldGhvZE5hbWUgPSAnbG9nJztcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlW21ldGhvZE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuYmluZE1ldGhvZChjb25zb2xlLCBtZXRob2ROYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25zb2xlLmxvZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgIHJldHVybiBub29wO1xuICB9XG5cbiAgcmVwbGFjZU1ldGhvZHMobG9nTGV2ZWwpIHtcbiAgICBjb25zdCBsZXZlbCA9IHRoaXMuZGlzdGlsbExldmVsKGxvZ0xldmVsKTtcblxuICAgIGlmIChsZXZlbCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZ2xldmVsbmV4dDogcmVwbGFjZU1ldGhvZHMoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2dnZXIgfHwgdGhpcy5sb2dnZXIudHlwZSAhPT0gJ0xvZ0xldmVsJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2xvZ2xldmVsbmV4dDogTG9nZ2VyIGlzIHVuZGVmaW5lZCBvciBpbnZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIExvZ2dlciBpbnN0YW5jZS4nXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubWV0aG9kcy5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgICBjb25zdCB7IFttZXRob2ROYW1lLnRvVXBwZXJDYXNlKCldOiBtZXRob2RMZXZlbCB9ID0gdGhpcy5sZXZlbHM7XG5cbiAgICAgIHRoaXMubG9nZ2VyW21ldGhvZE5hbWVdID0gbWV0aG9kTGV2ZWwgPCBsZXZlbCA/IG5vb3AgOiB0aGlzLm1ha2UobWV0aG9kTmFtZSk7XG4gICAgfSk7XG5cbiAgICAvLyBEZWZpbmUgbG9nLmxvZyBhcyBhbiBhbGlhcyBmb3IgbG9nLmRlYnVnXG4gICAgdGhpcy5sb2dnZXIubG9nID0gdGhpcy5sb2dnZXIuZGVidWc7XG4gIH1cbn07XG5cbi8qXG4gIENvcHlyaWdodCDCqSAyMDE4IEFuZHJldyBQb3dlbGxcblxuICBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoaXMgU291cmNlIENvZGUgRm9ybS5cbiovXG5cblxuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgbGV2ZWw6IChvcHRzKSA9PiBgWyR7b3B0cy5sZXZlbH1dYCxcbiAgbmFtZTogKG9wdHMpID0+IG9wdHMubG9nZ2VyLm5hbWUsXG4gIHRlbXBsYXRlOiAne3t0aW1lfX0ge3tsZXZlbH19ICcsXG4gIHRpbWU6ICgpID0+IG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXVxufTtcblxudmFyIFByZWZpeEZhY3RvcnlfMSA9IGNsYXNzIFByZWZpeEZhY3RvcnkgZXh0ZW5kcyBNZXRob2RGYWN0b3J5XzEge1xuICBjb25zdHJ1Y3Rvcihsb2dnZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihsb2dnZXIpO1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGludGVycG9sYXRlKGxldmVsKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5yZXBsYWNlKC97eyhbXnt9XSopfX0vZywgKHN0YWNoZSwgcHJvcCkgPT4ge1xuICAgICAgY29uc3QgZm4gPSB0aGlzLm9wdGlvbnNbcHJvcF07XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICByZXR1cm4gZm4oeyBsZXZlbCwgbG9nZ2VyOiB0aGlzLmxvZ2dlciB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YWNoZTtcbiAgICB9KTtcbiAgfVxuXG4gIG1ha2UobWV0aG9kTmFtZSkge1xuICAgIGNvbnN0IG9nID0gc3VwZXIubWFrZShtZXRob2ROYW1lKTtcblxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdGhpcy5pbnRlcnBvbGF0ZShtZXRob2ROYW1lKTtcbiAgICAgIGNvbnN0IFtmaXJzdF0gPSBhcmdzO1xuXG4gICAgICBpZiAodHlwZW9mIGZpcnN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgYXJnc1swXSA9IG91dHB1dCArIGZpcnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG91dHB1dCk7XG4gICAgICB9XG5cbiAgICAgIG9nKC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cbn07XG5cbi8qXG4gIENvcHlyaWdodCDCqSAyMDE4IEFuZHJldyBQb3dlbGxcblxuICBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoaXMgU291cmNlIENvZGUgRm9ybS5cbiovXG5cblxuXG5cblxuY29uc3QgZGVmYXVsdHMkMSA9IHtcbiAgZmFjdG9yeTogbnVsbCxcbiAgbGV2ZWw6ICd3YXJuJyxcbiAgbmFtZTogK25ldyBEYXRlKCksXG4gIHByZWZpeDogbnVsbFxufTtcblxudmFyIExvZ0xldmVsXzEgPSBjbGFzcyBMb2dMZXZlbCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBpbXBsZW1lbnQgZm9yIHNvbWUgX3ZlcnlfIGxvb3NlIHR5cGUgY2hlY2tpbmcuIGF2b2lkcyBnZXR0aW5nIGludG8gYVxuICAgIC8vIGNpcmN1bGFyIHJlcXVpcmUgYmV0d2VlbiBNZXRob2RGYWN0b3J5IGFuZCBMb2dMZXZlbFxuICAgIHRoaXMudHlwZSA9ICdMb2dMZXZlbCc7XG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMkMSwgb3B0aW9ucyk7XG4gICAgdGhpcy5tZXRob2RGYWN0b3J5ID0gb3B0aW9ucy5mYWN0b3J5O1xuXG4gICAgaWYgKCF0aGlzLm1ldGhvZEZhY3RvcnkpIHtcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSBvcHRpb25zLnByZWZpeFxuICAgICAgICA/IG5ldyBQcmVmaXhGYWN0b3J5XzEodGhpcywgb3B0aW9ucy5wcmVmaXgpXG4gICAgICAgIDogbmV3IE1ldGhvZEZhY3RvcnlfMSh0aGlzKTtcbiAgICAgIHRoaXMubWV0aG9kRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1ldGhvZEZhY3RvcnkubG9nZ2VyKSB7XG4gICAgICB0aGlzLm1ldGhvZEZhY3RvcnkubG9nZ2VyID0gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgJzx1bmtub3duPic7XG5cbiAgICAvLyB0aGlzLmxldmVsIGlzIGEgc2V0dGVyLCBkbyB0aGlzIGFmdGVyIHNldHRpbmcgdXAgdGhlIGZhY3RvcnlcbiAgICB0aGlzLmxldmVsID0gdGhpcy5vcHRpb25zLmxldmVsO1xuICB9XG5cbiAgZ2V0IGZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kRmFjdG9yeTtcbiAgfVxuXG4gIHNldCBmYWN0b3J5KGZhY3RvcnkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBmYWN0b3J5LmxvZ2dlciA9IHRoaXM7XG4gICAgdGhpcy5tZXRob2RGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICB0aGlzLm1ldGhvZEZhY3RvcnkucmVwbGFjZU1ldGhvZHModGhpcy5sZXZlbCk7XG4gIH1cblxuICBkaXNhYmxlKCkge1xuICAgIHRoaXMubGV2ZWwgPSB0aGlzLmxldmVscy5TSUxFTlQ7XG4gIH1cblxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5sZXZlbCA9IHRoaXMubGV2ZWxzLlRSQUNFO1xuICB9XG5cbiAgZ2V0IGxldmVsKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRMZXZlbDtcbiAgfVxuXG4gIHNldCBsZXZlbChsb2dMZXZlbCkge1xuICAgIGNvbnN0IGxldmVsID0gdGhpcy5tZXRob2RGYWN0b3J5LmRpc3RpbGxMZXZlbChsb2dMZXZlbCk7XG5cbiAgICBpZiAobGV2ZWwgPT09IGZhbHNlIHx8IGxldmVsID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBsb2dsZXZlbG5leHQ6IHNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogJHtsb2dMZXZlbH1gKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICAgIHRoaXMubWV0aG9kRmFjdG9yeS5yZXBsYWNlTWV0aG9kcyhsZXZlbCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnICYmIGxldmVsIDwgdGhpcy5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdsb2dsZXZlbG5leHQ6IGNvbnNvbGUgaXMgdW5kZWZpbmVkLiBUaGUgbG9nIHdpbGwgcHJvZHVjZSBubyBvdXRwdXQuJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxldmVscygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICByZXR1cm4gdGhpcy5tZXRob2RGYWN0b3J5LmxldmVscztcbiAgfVxufTtcblxudmFyIGxpYiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8qXG4gIENvcHlyaWdodCDCqSAyMDE4IEFuZHJldyBQb3dlbGxcblxuICBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoaXMgU291cmNlIENvZGUgRm9ybS5cbiovXG5cblxuXG5cblxuY29uc3QgZmFjdG9yaWVzID0gU3ltYm9sKCdsb2ctZmFjdG9yaWVzJyk7XG5cbmNsYXNzIERlZmF1bHRMb2dnZXIgZXh0ZW5kcyBMb2dMZXZlbF8xIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoeyBuYW1lOiAnZGVmYXVsdCcgfSk7XG5cbiAgICB0aGlzLmNhY2hlID0geyBkZWZhdWx0OiB0aGlzIH07XG4gICAgdGhpc1tmYWN0b3JpZXNdID0geyBNZXRob2RGYWN0b3J5OiBNZXRob2RGYWN0b3J5XzEsIFByZWZpeEZhY3Rvcnk6IFByZWZpeEZhY3RvcnlfMSB9O1xuICB9XG5cbiAgZ2V0IGZhY3RvcmllcygpIHtcbiAgICByZXR1cm4gdGhpc1tmYWN0b3JpZXNdO1xuICB9XG5cbiAgZ2V0IGxvZ2dlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGU7XG4gIH1cblxuICBjcmVhdGUob3B0cykge1xuICAgIGxldCBvcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IHsgbmFtZTogb3B0cyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmlkKSB7XG4gICAgICBvcHRpb25zLmlkID0gb3B0aW9ucy5uYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbmFtZSwgaWQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7IGxldmVsOiB0aGlzLmxldmVsIH07XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lIHx8ICFuYW1lLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3Qgc3VwcGx5IGEgbmFtZSB3aGVuIGNyZWF0aW5nIGEgbG9nZ2VyLicpO1xuICAgIH1cblxuICAgIGxldCBsb2dnZXIgPSB0aGlzLmNhY2hlW2lkXTtcbiAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgbG9nZ2VyID0gbmV3IExvZ0xldmVsXzEoT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpKTtcbiAgICAgIHRoaXMuY2FjaGVbaWRdID0gbG9nZ2VyO1xuICAgIH1cbiAgICByZXR1cm4gbG9nZ2VyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IERlZmF1bHRMb2dnZXIoKTtcblxuLy8gVHlwZVNjcmlwdCBmaXhcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4vKiBlc2xpbnQgbm8tYml0d2lzZTogMCAqL1xudmFyIEJpdEFycmF5ID0ge1xuICBnZXRCeXRlc0ZvckJpbmFyeUZyYW1lOiBnZXRCeXRlc0ZvckJpbmFyeUZyYW1lLFxuICBwYWNrOiBwYWNrLFxuICB1bnBhY2s6IHVucGFja1xufTtcblxuZnVuY3Rpb24gZ2V0Qnl0ZXNGb3JCaW5hcnlGcmFtZShudW1QaXhlbHMpIHtcbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgMS1iaXQgcGl4ZWxzIGV4YWN0bHkgZml0IGludG8gYnl0ZXNcbiAgdmFyIHJlbWFpbmRlciA9IG51bVBpeGVscyAlIDg7IC8vIE51bWJlciBvZiBieXRlcyB0aGF0IHdvcmsgb24gYW4gZXhhY3QgZml0XG5cbiAgdmFyIGJ5dGVzUmVxdWlyZWQgPSBNYXRoLmZsb29yKG51bVBpeGVscyAvIDgpOyAvLyBBZGQgb25lIGJ5dGUgaWYgd2UgaGF2ZSBhIHJlbWFpbmRlclxuXG4gIGlmIChyZW1haW5kZXIgPiAwKSB7XG4gICAgYnl0ZXNSZXF1aXJlZCsrO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzUmVxdWlyZWQ7XG59XG5cbmZ1bmN0aW9uIHBhY2socGl4ZWxEYXRhKSB7XG4gIHZhciBudW1QaXhlbHMgPSBwaXhlbERhdGEubGVuZ3RoO1xuICBsaWIubG9nKFwibnVtUGl4ZWxzOiBcIiArIG51bVBpeGVscyk7XG4gIHZhciBsZW5ndGggPSBnZXRCeXRlc0ZvckJpbmFyeUZyYW1lKG51bVBpeGVscyk7IC8vbG9nLmxvZygnZ2V0Qnl0ZXNGb3JCaW5hcnlGcmFtZTogJyArIGxlbmd0aCk7XG5cbiAgdmFyIGJpdFBpeGVsRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIHZhciBieXRlUG9zID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVBpeGVsczsgaSsrKSB7XG4gICAgLy8gQ29tcHV0ZSBieXRlIHBvc2l0aW9uXG4gICAgYnl0ZVBvcyA9IE1hdGguZmxvb3IoaSAvIDgpO1xuICAgIHZhciBwaXhWYWx1ZSA9IHBpeGVsRGF0YVtpXSAhPT0gMDsgLy9sb2cubG9nKCdpOiAnICsgaSk7XG4gICAgLy9sb2cubG9nKCdwaXhWYWx1ZTogJyArIHBpeFZhbHVlKTtcbiAgICAvL2xvZy5sb2coJ2J5dGVQb3M6ICcgKyBieXRlUG9zKTtcblxuICAgIHZhciBiaXRQaXhlbFZhbHVlID0gcGl4VmFsdWUgPDwgaSAlIDg7IC8vbG9nLmxvZygnY3VycmVudCBiaXRQaXhlbERhdGE6ICcgKyBiaXRQaXhlbERhdGFbYnl0ZVBvc10pO1xuICAgIC8vbG9nLmxvZygndGhpcyBiaXRQaXhlbFZhbHVlOiAnICsgYml0UGl4ZWxWYWx1ZSk7XG5cbiAgICBiaXRQaXhlbERhdGFbYnl0ZVBvc10gfD0gYml0UGl4ZWxWYWx1ZTsgLy9sb2cubG9nKCduZXcgYml0UGl4ZWxWYWx1ZTogJyArIGJpdFBpeGVsRGF0YVtieXRlUG9zXSk7XG4gIH1cblxuICByZXR1cm4gYml0UGl4ZWxEYXRhO1xufSAvLyBjb252ZXJ0IGEgcGFja2VkIGJpdHdpc2UgcGl4ZWwgYXJyYXkgaW50byBhIGJ5dGUtcGVyLXBpeGVsXG4vLyBhcnJheSB3aXRoIDI1NSBjb3JyZXNwb25kaW5nIHRvIGVhY2ggc2V0IGJpdCBpbiB0aGUgYml0IGFycmF5XG5cblxuZnVuY3Rpb24gdW5wYWNrKGJpdFBpeGVsQXJyYXkpIHtcbiAgdmFyIGJpdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYml0UGl4ZWxBcnJheSk7XG4gIHZhciBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheSg4ICogYml0QXJyYXkubGVuZ3RoKTtcblxuICBmb3IgKHZhciBieXRlSW5kZXggPSAwOyBieXRlSW5kZXggPCBieXRlQXJyYXkubGVuZ3RoOyBieXRlSW5kZXgrKykge1xuICAgIHZhciBiaXRJbmRleCA9IGJ5dGVJbmRleCAlIDg7XG4gICAgdmFyIGJpdEJ5dGVJbmRleCA9IE1hdGguZmxvb3IoYnl0ZUluZGV4IC8gOCk7XG4gICAgYnl0ZUFycmF5W2J5dGVJbmRleF0gPSAyNTUgKiAoKGJpdEFycmF5W2JpdEJ5dGVJbmRleF0gJiAxIDw8IGJpdEluZGV4KSA+PiBiaXRJbmRleCk7XG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5O1xufVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICBfZ2V0ID0gUmVmbGVjdC5nZXQ7XG4gIH0gZWxzZSB7XG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxuLy9odHRwOi8vam9uaXNhbG9uZW4uY29tLzIwMTIvZnJvbS11dGYtMTYtdG8tdXRmLTgtaW4tamF2YXNjcmlwdC9cbmZ1bmN0aW9uIHRvVVRGOEFycmF5KHN0cikge1xuICB2YXIgdXRmOCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoYXJjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNoYXJjb2RlIDwgMHg4MCkgdXRmOC5wdXNoKGNoYXJjb2RlKTtlbHNlIGlmIChjaGFyY29kZSA8IDB4ODAwKSB7XG4gICAgICB1dGY4LnB1c2goMHhjMCB8IGNoYXJjb2RlID4+IDYsIDB4ODAgfCBjaGFyY29kZSAmIDB4M2YpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmNvZGUgPCAweGQ4MDAgfHwgY2hhcmNvZGUgPj0gMHhlMDAwKSB7XG4gICAgICB1dGY4LnB1c2goMHhlMCB8IGNoYXJjb2RlID4+IDEyLCAweDgwIHwgY2hhcmNvZGUgPj4gNiAmIDB4M2YsIDB4ODAgfCBjaGFyY29kZSAmIDB4M2YpO1xuICAgIH0gLy8gc3Vycm9nYXRlIHBhaXJcbiAgICBlbHNlIHtcbiAgICAgICAgaSsrOyAvLyBVVEYtMTYgZW5jb2RlcyAweDEwMDAwLTB4MTBGRkZGIGJ5XG4gICAgICAgIC8vIHN1YnRyYWN0aW5nIDB4MTAwMDAgYW5kIHNwbGl0dGluZyB0aGVcbiAgICAgICAgLy8gMjAgYml0cyBvZiAweDAtMHhGRkZGRiBpbnRvIHR3byBoYWx2ZXNcblxuICAgICAgICBjaGFyY29kZSA9IDB4MTAwMDAgKyAoKGNoYXJjb2RlICYgMHgzZmYpIDw8IDEwIHwgc3RyLmNoYXJDb2RlQXQoaSkgJiAweDNmZik7XG4gICAgICAgIHV0ZjgucHVzaCgweGYwIHwgY2hhcmNvZGUgPj4gMTgsIDB4ODAgfCBjaGFyY29kZSA+PiAxMiAmIDB4M2YsIDB4ODAgfCBjaGFyY29kZSA+PiA2ICYgMHgzZiwgMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gdXRmODtcbn1cblxuZnVuY3Rpb24gdG9JbnQodmFsKSB7XG4gIGlmIChpc05hTih2YWwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgbnVtYmVyOiBcIiArIHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbCk7XG4gIH0gZWxzZSByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiB0b0Zsb2F0KHZhbCkge1xuICBpZiAoaXNOYU4odmFsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIG51bWJlcjogXCIgKyB2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbCk7XG4gIH0gZWxzZSByZXR1cm4gdmFsO1xufVxuXG52YXIgQnVmZmVyU3RyZWFtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyU3RyZWFtKHNpemVPckJ1ZmZlciwgbGl0dGxlRW5kaWFuKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlclN0cmVhbSk7XG5cbiAgICB0aGlzLmJ1ZmZlciA9IHR5cGVvZiBzaXplT3JCdWZmZXIgPT0gXCJudW1iZXJcIiA/IG5ldyBBcnJheUJ1ZmZlcihzaXplT3JCdWZmZXIpIDogc2l6ZU9yQnVmZmVyO1xuXG4gICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgfVxuXG4gICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgdGhpcy5pc0xpdHRsZUVuZGlhbiA9IGxpdHRsZUVuZGlhbiB8fCBmYWxzZTtcbiAgICB0aGlzLnNpemUgPSAwO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1ZmZlclN0cmVhbSwgW3tcbiAgICBrZXk6IFwic2V0RW5kaWFuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEVuZGlhbihpc0xpdHRsZSkge1xuICAgICAgdGhpcy5pc0xpdHRsZUVuZGlhbiA9IGlzTGl0dGxlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZVVpbnQ4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlVWludDgodmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTaXplKDEpO1xuICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSkpO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUludDhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVJbnQ4KHZhbHVlKSB7XG4gICAgICB0aGlzLmNoZWNrU2l6ZSgxKTtcbiAgICAgIHRoaXMudmlldy5zZXRJbnQ4KHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSkpO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZVVpbnQxNlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVVpbnQxNih2YWx1ZSkge1xuICAgICAgdGhpcy5jaGVja1NpemUoMik7XG4gICAgICB0aGlzLnZpZXcuc2V0VWludDE2KHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSksIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUludDE2XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlSW50MTYodmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTaXplKDIpO1xuICAgICAgdGhpcy52aWV3LnNldEludDE2KHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSksIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZVVpbnQzMlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVVpbnQzMih2YWx1ZSkge1xuICAgICAgdGhpcy5jaGVja1NpemUoNCk7XG4gICAgICB0aGlzLnZpZXcuc2V0VWludDMyKHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSksIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUludDMyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlSW50MzIodmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTaXplKDQpO1xuICAgICAgdGhpcy52aWV3LnNldEludDMyKHRoaXMub2Zmc2V0LCB0b0ludCh2YWx1ZSksIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgcmV0dXJuIHRoaXMuaW5jcmVtZW50KDQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUZsb2F0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlRmxvYXQodmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTaXplKDQpO1xuICAgICAgdGhpcy52aWV3LnNldEZsb2F0MzIodGhpcy5vZmZzZXQsIHRvRmxvYXQodmFsdWUpLCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgIHJldHVybiB0aGlzLmluY3JlbWVudCg0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVEb3VibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVEb3VibGUodmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTaXplKDgpO1xuICAgICAgdGhpcy52aWV3LnNldEZsb2F0NjQodGhpcy5vZmZzZXQsIHRvRmxvYXQodmFsdWUpLCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgIHJldHVybiB0aGlzLmluY3JlbWVudCg4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVTdHJpbmcodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgfHwgXCJcIjtcbiAgICAgIHZhciB1dGY4ID0gdG9VVEY4QXJyYXkodmFsdWUpLFxuICAgICAgICAgIGJ5dGVsZW4gPSB1dGY4Lmxlbmd0aDtcbiAgICAgIHRoaXMuY2hlY2tTaXplKGJ5dGVsZW4pO1xuICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZWxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMudmlldy5zZXRVaW50OChzdGFydE9mZnNldCwgdXRmOFtpXSk7XG4gICAgICAgIHN0YXJ0T2Zmc2V0Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmluY3JlbWVudChieXRlbGVuKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVIZXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVIZXgodmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgYmxlbiA9IGxlbiAvIDIsXG4gICAgICAgICAgc3RhcnRPZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHRoaXMuY2hlY2tTaXplKGJsZW4pO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQodmFsdWVbaV0sIDE2KSxcbiAgICAgICAgICAgIG5leHRDb2RlO1xuXG4gICAgICAgIGlmIChpID09IGxlbiAtIDEpIHtcbiAgICAgICAgICBuZXh0Q29kZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dENvZGUgPSBwYXJzZUludCh2YWx1ZVtpICsgMV0sIDE2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0Q29kZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvZGUgPSBjb2RlIDw8IDQgfCBuZXh0Q29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmlldy5zZXRVaW50OChzdGFydE9mZnNldCwgY29kZSk7XG4gICAgICAgIHN0YXJ0T2Zmc2V0Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmluY3JlbWVudChibGVuKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFVpbnQzMlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkVWludDMyKCkge1xuICAgICAgdmFyIHZhbCA9IHRoaXMudmlldy5nZXRVaW50MzIodGhpcy5vZmZzZXQsIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgdGhpcy5pbmNyZW1lbnQoNCk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkVWludDE2XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRVaW50MTYoKSB7XG4gICAgICB2YXIgdmFsID0gdGhpcy52aWV3LmdldFVpbnQxNih0aGlzLm9mZnNldCwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICB0aGlzLmluY3JlbWVudCgyKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRVaW50OFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkVWludDgoKSB7XG4gICAgICB2YXIgdmFsID0gdGhpcy52aWV3LmdldFVpbnQ4KHRoaXMub2Zmc2V0KTtcbiAgICAgIHRoaXMuaW5jcmVtZW50KDEpO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFVpbnQ4QXJyYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZFVpbnQ4QXJyYXkobGVuZ3RoKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgdGhpcy5pbmNyZW1lbnQobGVuZ3RoKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRVaW50MTZBcnJheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkVWludDE2QXJyYXkobGVuZ3RoKSB7XG4gICAgICB2YXIgc2l4bGVuID0gbGVuZ3RoIC8gMixcbiAgICAgICAgICBhcnIgPSBuZXcgVWludDE2QXJyYXkoc2l4bGVuKSxcbiAgICAgICAgICBpID0gMDtcblxuICAgICAgd2hpbGUgKGkrKyA8IHNpeGxlbikge1xuICAgICAgICBhcnJbaV0gPSB0aGlzLnZpZXcuZ2V0VWludDE2KHRoaXMub2Zmc2V0LCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZEludDE2XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRJbnQxNigpIHtcbiAgICAgIHZhciB2YWwgPSB0aGlzLnZpZXcuZ2V0SW50MTYodGhpcy5vZmZzZXQsIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgdGhpcy5pbmNyZW1lbnQoMik7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkSW50MzJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEludDMyKCkge1xuICAgICAgdmFyIHZhbCA9IHRoaXMudmlldy5nZXRJbnQzMih0aGlzLm9mZnNldCwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICB0aGlzLmluY3JlbWVudCg0KTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRGbG9hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkRmxvYXQoKSB7XG4gICAgICB2YXIgdmFsID0gdGhpcy52aWV3LmdldEZsb2F0MzIodGhpcy5vZmZzZXQsIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgdGhpcy5pbmNyZW1lbnQoNCk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkRG91YmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWREb3VibGUoKSB7XG4gICAgICB2YXIgdmFsID0gdGhpcy52aWV3LmdldEZsb2F0NjQodGhpcy5vZmZzZXQsIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgdGhpcy5pbmNyZW1lbnQoOCk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRTdHJpbmcobGVuZ3RoKSB7XG4gICAgICB2YXIgc3RyaW5nID0gXCJcIjtcbiAgICAgIHZhciBudW1PZk11bHRpID0gbGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgd2hpbGUgKGluZGV4KysgPCBudW1PZk11bHRpKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IHRoaXMucmVhZFVpbnQ4KCk7XG4gICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZEhleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkSGV4KGxlbmd0aCkge1xuICAgICAgdmFyIGhleFN0cmluZyA9IFwiXCI7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4U3RyaW5nICs9IHRoaXMucmVhZFVpbnQ4KCkudG9TdHJpbmcoMTYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGV4U3RyaW5nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja1NpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTaXplKHN0ZXApIHtcbiAgICAgIGlmICh0aGlzLm9mZnNldCArIHN0ZXAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKFwiV3JpdGluZyBleGNlZWRlZCB0aGUgc2l6ZSBvZiBidWZmZXJcIik7XG4gICAgICAgIC8vcmVzaXplXG4gICAgICAgIHZhciBkc3RTaXplID0gdGhpcy5vZmZzZXQgKyBzdGVwO1xuICAgICAgICB2YXIgZHN0ID0gbmV3IEFycmF5QnVmZmVyKGRzdFNpemUpO1xuICAgICAgICBuZXcgVWludDhBcnJheShkc3QpLnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikpO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGRzdDtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmNhdChzdHJlYW0pIHtcbiAgICAgIHZhciBuZXdidWYgPSBuZXcgQXJyYXlCdWZmZXIodGhpcy5vZmZzZXQgKyBzdHJlYW0uc2l6ZSksXG4gICAgICAgICAgaW50OCA9IG5ldyBVaW50OEFycmF5KG5ld2J1Zik7XG4gICAgICBpbnQ4LnNldChuZXcgVWludDhBcnJheSh0aGlzLmdldEJ1ZmZlcigwLCB0aGlzLm9mZnNldCkpKTtcbiAgICAgIGludDguc2V0KG5ldyBVaW50OEFycmF5KHN0cmVhbS5nZXRCdWZmZXIoMCwgc3RyZWFtLnNpemUpKSwgdGhpcy5vZmZzZXQpO1xuICAgICAgdGhpcy5idWZmZXIgPSBuZXdidWY7XG4gICAgICB0aGlzLnZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpO1xuICAgICAgdGhpcy5vZmZzZXQgKz0gc3RyZWFtLnNpemU7XG4gICAgICB0aGlzLnNpemUgPSB0aGlzLm9mZnNldDtcbiAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmNyZW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jcmVtZW50KHN0ZXApIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IHN0ZXA7XG5cbiAgICAgIGlmICh0aGlzLm9mZnNldCA+IHRoaXMuc2l6ZSkge1xuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLm9mZnNldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCdWZmZXIoc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFzdGFydCAmJiAhZW5kKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gdGhpcy5zaXplO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vcmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW9yZShsZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9mZnNldCArIGxlbmd0aCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdCBtb3JlIHRoYW4gY3VycmVudGx5IGFsbG9jYXRlZCBidWZmZXJcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdCdWYgPSB0aGlzLmJ1ZmZlci5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgdGhpcy5pbmNyZW1lbnQobGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgUmVhZEJ1ZmZlclN0cmVhbShuZXdCdWYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID49IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvRW5kKCkge1xuICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCdWZmZXJTdHJlYW07XG59KCk7XG5cbnZhciBSZWFkQnVmZmVyU3RyZWFtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQnVmZmVyU3RyZWFtKSB7XG4gIF9pbmhlcml0cyhSZWFkQnVmZmVyU3RyZWFtLCBfQnVmZmVyU3RyZWFtKTtcblxuICBmdW5jdGlvbiBSZWFkQnVmZmVyU3RyZWFtKGJ1ZmZlciwgbGl0dGxlRW5kaWFuKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWRCdWZmZXJTdHJlYW0pO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmVhZEJ1ZmZlclN0cmVhbSkuY2FsbCh0aGlzLCBidWZmZXIsIGxpdHRsZUVuZGlhbikpO1xuICAgIF90aGlzLnNpemUgPSBfdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gUmVhZEJ1ZmZlclN0cmVhbTtcbn0oQnVmZmVyU3RyZWFtKTtcblxudmFyIFdyaXRlQnVmZmVyU3RyZWFtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQnVmZmVyU3RyZWFtMikge1xuICBfaW5oZXJpdHMoV3JpdGVCdWZmZXJTdHJlYW0sIF9CdWZmZXJTdHJlYW0yKTtcblxuICBmdW5jdGlvbiBXcml0ZUJ1ZmZlclN0cmVhbShidWZmZXIsIGxpdHRsZUVuZGlhbikge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV3JpdGVCdWZmZXJTdHJlYW0pO1xuXG4gICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFdyaXRlQnVmZmVyU3RyZWFtKS5jYWxsKHRoaXMsIGJ1ZmZlciwgbGl0dGxlRW5kaWFuKSk7XG4gICAgX3RoaXMyLnNpemUgPSAwO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICByZXR1cm4gV3JpdGVCdWZmZXJTdHJlYW07XG59KEJ1ZmZlclN0cmVhbSk7XG5cbmZ1bmN0aW9uIHBhZGRpbmdMZWZ0KHBhZGRpbmdWYWx1ZSwgc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcocGFkZGluZ1ZhbHVlICsgc3RyaW5nKS5zbGljZSgtcGFkZGluZ1ZhbHVlLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIHJ0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyokL2csIFwiXCIpO1xufVxuXG5mdW5jdGlvbiB0YWdGcm9tTnVtYmVycyhncm91cCwgZWxlbWVudCkge1xuICByZXR1cm4gbmV3IFRhZygoZ3JvdXAgPDwgMTYgfCBlbGVtZW50KSA+Pj4gMCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRUYWcoc3RyZWFtKSB7XG4gIHZhciBncm91cCA9IHN0cmVhbS5yZWFkVWludDE2KCksXG4gICAgICBlbGVtZW50ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgdmFyIHRhZyA9IHRhZ0Zyb21OdW1iZXJzKGdyb3VwLCBlbGVtZW50KTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIGJpbmFyeVZScyA9IFtcIkZMXCIsIFwiRkRcIiwgXCJTTFwiLCBcIlNTXCIsIFwiVUxcIiwgXCJVU1wiLCBcIkFUXCJdLFxuICAgIGV4cGxpY2l0VlJzID0gW1wiT0JcIiwgXCJPV1wiLCBcIk9GXCIsIFwiU1FcIiwgXCJVQ1wiLCBcIlVSXCIsIFwiVVRcIiwgXCJVTlwiXSxcbiAgICBzaW5nbGVWUnMgPSBbXCJTUVwiLCBcIk9GXCIsIFwiT1dcIiwgXCJPQlwiLCBcIlVOXCJdO1xuXG52YXIgVmFsdWVSZXByZXNlbnRhdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZhbHVlUmVwcmVzZW50YXRpb24odHlwZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZVJlcHJlc2VudGF0aW9uKTtcblxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5tdWx0aSA9IGZhbHNlO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhbHVlUmVwcmVzZW50YXRpb24sIFt7XG4gICAga2V5OiBcImlzQmluYXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQmluYXJ5KCkge1xuICAgICAgcmV0dXJuIGJpbmFyeVZScy5pbmRleE9mKHRoaXMudHlwZSkgIT0gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFsbG93TXVsdGlwbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWxsb3dNdWx0aXBsZSgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5pc0JpbmFyeSgpICYmIHNpbmdsZVZScy5pbmRleE9mKHRoaXMudHlwZSkgPT0gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzRXhwbGljaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFeHBsaWNpdCgpIHtcbiAgICAgIHJldHVybiBleHBsaWNpdFZScy5pbmRleE9mKHRoaXMudHlwZSkgIT0gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChzdHJlYW0sIGxlbmd0aCwgc3ludGF4KSB7XG4gICAgICBpZiAodGhpcy5maXhlZCAmJiB0aGlzLm1heExlbmd0aCkge1xuICAgICAgICBpZiAoIWxlbmd0aCkgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICBpZiAodGhpcy5tYXhMZW5ndGggIT0gbGVuZ3RoKSBsaWIuZXJyb3IoXCJJbnZhbGlkIGxlbmd0aCBmb3IgZml4ZWQgbGVuZ3RoIHRhZywgdnIgXCIgKyB0aGlzLnR5cGUgKyBcIiwgbGVuZ3RoIFwiICsgdGhpcy5tYXhMZW5ndGggKyBcIiAhPSBcIiArIGxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlYWRCeXRlcyhzdHJlYW0sIGxlbmd0aCwgc3ludGF4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZEJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRCeXRlcyhzdHJlYW0sIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN0cmVhbS5yZWFkU3RyaW5nKGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWROdWxsUGFkZGVkU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWROdWxsUGFkZGVkU3RyaW5nKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIWxlbmd0aCkgcmV0dXJuIFwiXCI7XG4gICAgICB2YXIgc3RyID0gc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoIC0gMSk7XG5cbiAgICAgIGlmIChzdHJlYW0ucmVhZFVpbnQ4KCkgIT0gMCkge1xuICAgICAgICBzdHJlYW0uaW5jcmVtZW50KC0xKTtcbiAgICAgICAgc3RyICs9IHN0cmVhbS5yZWFkU3RyaW5nKDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUZpbGxlZFN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUZpbGxlZFN0cmluZyhzdHJlYW0sIHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIGlmIChsZW5ndGggPCB0aGlzLm1heExlbmd0aCAmJiBsZW5ndGggPj0gMCkge1xuICAgICAgICB2YXIgd3JpdHRlbiA9IDA7XG4gICAgICAgIGlmIChsZW5ndGggPiAwKSB3cml0dGVuICs9IHN0cmVhbS53cml0ZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIHZhciB6ZXJvTGVuZ3RoID0gdGhpcy5tYXhMZW5ndGggLSBsZW5ndGg7XG4gICAgICAgIHdyaXR0ZW4gKz0gc3RyZWFtLndyaXRlSGV4KHRoaXMuZmlsbFdpdGgucmVwZWF0KHplcm9MZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIHdyaXR0ZW47XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PSB0aGlzLm1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyZWFtLndyaXRlU3RyaW5nKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFwiTGVuZ3RoIG1pc21hdGNoXCI7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndyaXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlKHN0cmVhbSwgdHlwZSkge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmIChhcmdzWzJdID09PSBudWxsIHx8IGFyZ3NbMl0gPT09IFwiXCIgfHwgYXJnc1syXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbc3RyZWFtLndyaXRlU3RyaW5nKFwiXCIpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB3cml0dGVuID0gW10sXG4gICAgICAgICAgICB2YWx1ZUFyZ3MgPSBhcmdzLnNsaWNlKDIpLFxuICAgICAgICAgICAgZnVuYyA9IHN0cmVhbVtcIndyaXRlXCIgKyB0eXBlXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZUFyZ3NbMF0pKSB7XG4gICAgICAgICAgaWYgKHZhbHVlQXJnc1swXS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB3cml0dGVuLnB1c2goMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhbHVlQXJnc1swXS5mb3JFYWNoKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLmFsbG93TXVsdGlwbGUoKSAmJiBrID4gMCkge1xuICAgICAgICAgICAgICAgIHN0cmVhbS53cml0ZUhleChcIjVDXCIpOyAvL2J5dGVDb3VudCsrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHNpbmd1bGFyQXJncyA9IFt2XS5jb25jYXQodmFsdWVBcmdzLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgdmFyIGJ5dGVDb3VudCA9IGZ1bmMuYXBwbHkoc3RyZWFtLCBzaW5ndWxhckFyZ3MpO1xuICAgICAgICAgICAgICB3cml0dGVuLnB1c2goYnl0ZUNvdW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3cml0dGVuLnB1c2goZnVuYy5hcHBseShzdHJlYW0sIHZhbHVlQXJncykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHdyaXR0ZW47XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndyaXRlQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVCeXRlcyhzdHJlYW0sIHZhbHVlLCBsZW5ndGhzKSB7XG4gICAgICB2YXIgdmFsaWQgPSB0cnVlLFxuICAgICAgICAgIHZhbGFyciA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdLFxuICAgICAgICAgIHRvdGFsID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWxhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrVmFsdWUgPSB2YWxhcnJbaV0sXG4gICAgICAgICAgICBjaGVja2xlbiA9IGxlbmd0aHNbaV0sXG4gICAgICAgICAgICBpc1N0cmluZyA9IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheWxlbiA9IGNoZWNrbGVuO1xuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrTGVuZ3RoKSB7XG4gICAgICAgICAgdmFsaWQgPSB0aGlzLmNoZWNrTGVuZ3RoKGNoZWNrVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWF4Q2hhckxlbmd0aCkge1xuICAgICAgICAgIHZhciBjaGVjayA9IHRoaXMubWF4Q2hhckxlbmd0aDsgLy8sIGNoZWNrbGVuID0gY2hlY2tWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICB2YWxpZCA9IGNoZWNrVmFsdWUubGVuZ3RoIDw9IGNoZWNrO1xuICAgICAgICAgIGRpc3BsYXlsZW4gPSBjaGVja1ZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBpc1N0cmluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgICB2YWxpZCA9IGNoZWNrbGVuIDw9IHRoaXMubWF4TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVycm1zZyA9IFwiVmFsdWUgZXhjZWVkcyBtYXggbGVuZ3RoLCB2cjogXCIgKyB0aGlzLnR5cGUgKyBcIiwgdmFsdWU6IFwiICsgY2hlY2tWYWx1ZSArIFwiLCBsZW5ndGg6IFwiICsgZGlzcGxheWxlbjtcblxuICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgaWYgKGlzU3RyaW5nKSBsaWIubG9nKGVycm1zZyk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoZXJybXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvdGFsICs9IGNoZWNrbGVuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hbGxvd011bHRpcGxlKCkpIHtcbiAgICAgICAgdG90YWwgKz0gdmFsYXJyLmxlbmd0aCA/IHZhbGFyci5sZW5ndGggLSAxIDogMDtcbiAgICAgIH0gLy9jaGVjayBmb3Igb2RkXG5cblxuICAgICAgdmFyIHdyaXR0ZW4gPSB0b3RhbDtcblxuICAgICAgaWYgKHRvdGFsICYgMSkge1xuICAgICAgICBzdHJlYW0ud3JpdGVIZXgodGhpcy5wYWRCeXRlKTtcbiAgICAgICAgd3JpdHRlbisrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd3JpdHRlbjtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJjcmVhdGVCeVR5cGVTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQnlUeXBlU3RyaW5nKHR5cGUpIHtcbiAgICAgIHZhciB2ciA9IG51bGw7XG4gICAgICBpZiAodHlwZSA9PSBcIkFFXCIpIHZyID0gbmV3IEFwcGxpY2F0aW9uRW50aXR5KCk7ZWxzZSBpZiAodHlwZSA9PSBcIkFTXCIpIHZyID0gbmV3IEFnZVN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJBVFwiKSB2ciA9IG5ldyBBdHRyaWJ1dGVUYWcoKTtlbHNlIGlmICh0eXBlID09IFwiQ1NcIikgdnIgPSBuZXcgQ29kZVN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJEQVwiKSB2ciA9IG5ldyBEYXRlVmFsdWUoKTtlbHNlIGlmICh0eXBlID09IFwiRFNcIikgdnIgPSBuZXcgRGVjaW1hbFN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJEVFwiKSB2ciA9IG5ldyBEYXRlVGltZSgpO2Vsc2UgaWYgKHR5cGUgPT0gXCJGTFwiKSB2ciA9IG5ldyBGbG9hdGluZ1BvaW50U2luZ2xlKCk7ZWxzZSBpZiAodHlwZSA9PSBcIkZEXCIpIHZyID0gbmV3IEZsb2F0aW5nUG9pbnREb3VibGUoKTtlbHNlIGlmICh0eXBlID09IFwiSVNcIikgdnIgPSBuZXcgSW50ZWdlclN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJMT1wiKSB2ciA9IG5ldyBMb25nU3RyaW5nKCk7ZWxzZSBpZiAodHlwZSA9PSBcIkxUXCIpIHZyID0gbmV3IExvbmdUZXh0KCk7ZWxzZSBpZiAodHlwZSA9PSBcIk9CXCIpIHZyID0gbmV3IE90aGVyQnl0ZVN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJPRFwiKSB2ciA9IG5ldyBPdGhlckRvdWJsZVN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJPRlwiKSB2ciA9IG5ldyBPdGhlckZsb2F0U3RyaW5nKCk7ZWxzZSBpZiAodHlwZSA9PSBcIk9XXCIpIHZyID0gbmV3IE90aGVyV29yZFN0cmluZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJQTlwiKSB2ciA9IG5ldyBQZXJzb25OYW1lKCk7ZWxzZSBpZiAodHlwZSA9PSBcIlNIXCIpIHZyID0gbmV3IFNob3J0U3RyaW5nKCk7ZWxzZSBpZiAodHlwZSA9PSBcIlNMXCIpIHZyID0gbmV3IFNpZ25lZExvbmcoKTtlbHNlIGlmICh0eXBlID09IFwiU1FcIikgdnIgPSBuZXcgU2VxdWVuY2VPZkl0ZW1zKCk7ZWxzZSBpZiAodHlwZSA9PSBcIlNTXCIpIHZyID0gbmV3IFNpZ25lZFNob3J0KCk7ZWxzZSBpZiAodHlwZSA9PSBcIlNUXCIpIHZyID0gbmV3IFNob3J0VGV4dCgpO2Vsc2UgaWYgKHR5cGUgPT0gXCJUTVwiKSB2ciA9IG5ldyBUaW1lVmFsdWUoKTtlbHNlIGlmICh0eXBlID09IFwiVUNcIikgdnIgPSBuZXcgVW5saW1pdGVkQ2hhcmFjdGVycygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJVSVwiKSB2ciA9IG5ldyBVbmlxdWVJZGVudGlmaWVyKCk7ZWxzZSBpZiAodHlwZSA9PSBcIlVMXCIpIHZyID0gbmV3IFVuc2lnbmVkTG9uZygpO2Vsc2UgaWYgKHR5cGUgPT0gXCJVTlwiKSB2ciA9IG5ldyBVbmtub3duVmFsdWUoKTtlbHNlIGlmICh0eXBlID09IFwiVVJcIikgdnIgPSBuZXcgVW5pdmVyc2FsUmVzb3VyY2UoKTtlbHNlIGlmICh0eXBlID09IFwiVVNcIikgdnIgPSBuZXcgVW5zaWduZWRTaG9ydCgpO2Vsc2UgaWYgKHR5cGUgPT0gXCJVVFwiKSB2ciA9IG5ldyBVbmxpbWl0ZWRUZXh0KCk7ZWxzZSBpZiAodHlwZSA9PSBcIm94XCIpIHtcbiAgICAgICAgLy8gVE9ETzogZGV0ZXJtaW5lIFZSIGJhc2VkIG9uIGNvbnRleHQgKGNvdWxkIGJlIDEgYnl0ZSBwaXhlbCBkYXRhKVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGdvYmJpL3Z0ay1kaWNvbS9pc3N1ZXMvMzhcbiAgICAgICAgbGliLmVycm9yKFwiSW52YWxpZCB2ciB0eXBlIFwiICsgdHlwZSArIFwiIC0gdXNpbmcgT1dcIik7XG4gICAgICAgIHZyID0gbmV3IE90aGVyV29yZFN0cmluZygpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IFwieHNcIikge1xuICAgICAgICBsaWIuZXJyb3IoXCJJbnZhbGlkIHZyIHR5cGUgXCIgKyB0eXBlICsgXCIgLSB1c2luZyBVU1wiKTtcbiAgICAgICAgdnIgPSBuZXcgVW5zaWduZWRTaG9ydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGliLmVycm9yKFwiSW52YWxpZCB2ciB0eXBlIFwiICsgdHlwZSArIFwiIC0gdXNpbmcgVU5cIik7XG4gICAgICAgIHZyID0gbmV3IFVua25vd25WYWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWYWx1ZVJlcHJlc2VudGF0aW9uO1xufSgpO1xuXG52YXIgU3RyaW5nUmVwcmVzZW50YXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9WYWx1ZVJlcHJlc2VudGF0aW9uKSB7XG4gIF9pbmhlcml0cyhTdHJpbmdSZXByZXNlbnRhdGlvbiwgX1ZhbHVlUmVwcmVzZW50YXRpb24pO1xuXG4gIGZ1bmN0aW9uIFN0cmluZ1JlcHJlc2VudGF0aW9uKHR5cGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTdHJpbmdSZXByZXNlbnRhdGlvbikuY2FsbCh0aGlzLCB0eXBlKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RyaW5nUmVwcmVzZW50YXRpb24sIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlQnl0ZXMoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgdmFyIHdyaXR0ZW4gPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihTdHJpbmdSZXByZXNlbnRhdGlvbi5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIlN0cmluZ1wiLCB2YWx1ZSk7XG5cbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihTdHJpbmdSZXByZXNlbnRhdGlvbi5wcm90b3R5cGUpLCBcIndyaXRlQnl0ZXNcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIHZhbHVlLCB3cml0dGVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RyaW5nUmVwcmVzZW50YXRpb247XG59KFZhbHVlUmVwcmVzZW50YXRpb24pO1xuXG52YXIgQmluYXJ5UmVwcmVzZW50YXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9WYWx1ZVJlcHJlc2VudGF0aW9uMikge1xuICBfaW5oZXJpdHMoQmluYXJ5UmVwcmVzZW50YXRpb24sIF9WYWx1ZVJlcHJlc2VudGF0aW9uMik7XG5cbiAgZnVuY3Rpb24gQmluYXJ5UmVwcmVzZW50YXRpb24odHlwZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCaW5hcnlSZXByZXNlbnRhdGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEJpbmFyeVJlcHJlc2VudGF0aW9uKS5jYWxsKHRoaXMsIHR5cGUpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCaW5hcnlSZXByZXNlbnRhdGlvbiwgW3tcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUsIHN5bnRheCwgaXNFbmNhcHN1bGF0ZWQpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGJpbmFyeVN0cmVhbTtcblxuICAgICAgaWYgKGlzRW5jYXBzdWxhdGVkKSB7XG4gICAgICAgIHZhciBmcmFnbWVudFNpemUgPSAxMDI0ICogMjAsXG4gICAgICAgICAgICBmcmFtZXMgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICBzdGFydE9mZnNldCA9IFtdO1xuICAgICAgICBiaW5hcnlTdHJlYW0gPSBuZXcgV3JpdGVCdWZmZXJTdHJlYW0oMTAyNCAqIDEwMjQgKiAyMCwgc3RyZWFtLmlzTGl0dGxlRW5kaWFuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnJhbWVzOyBpKyspIHtcbiAgICAgICAgICBzdGFydE9mZnNldC5wdXNoKGJpbmFyeVN0cmVhbS5zaXplKTtcbiAgICAgICAgICB2YXIgZnJhbWVCdWZmZXIgPSB2YWx1ZVtpXSxcbiAgICAgICAgICAgICAgZnJhbWVTdHJlYW0gPSBuZXcgUmVhZEJ1ZmZlclN0cmVhbShmcmFtZUJ1ZmZlciksXG4gICAgICAgICAgICAgIGZyYWdtZW50c0xlbmd0aCA9IE1hdGguY2VpbChmcmFtZVN0cmVhbS5zaXplIC8gZnJhZ21lbnRTaXplKTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBmcmFnbWVudFN0YXJ0ID0gMDsgaiA8IGZyYWdtZW50c0xlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnRFbmQgPSBmcmFnbWVudFN0YXJ0ICsgZnJhZ21lbnRTaXplO1xuXG4gICAgICAgICAgICBpZiAoaiA9PSBmcmFnbWVudHNMZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGZyYWdtZW50RW5kID0gZnJhbWVTdHJlYW0uc2l6ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGZyYWdTdHJlYW0gPSBuZXcgUmVhZEJ1ZmZlclN0cmVhbShmcmFtZVN0cmVhbS5nZXRCdWZmZXIoZnJhZ21lbnRTdGFydCwgZnJhZ21lbnRFbmQpKTtcbiAgICAgICAgICAgIGZyYWdtZW50U3RhcnQgPSBmcmFnbWVudEVuZDtcbiAgICAgICAgICAgIGJpbmFyeVN0cmVhbS53cml0ZVVpbnQxNigweGZmZmUpO1xuICAgICAgICAgICAgYmluYXJ5U3RyZWFtLndyaXRlVWludDE2KDB4ZTAwMCk7XG4gICAgICAgICAgICBiaW5hcnlTdHJlYW0ud3JpdGVVaW50MzIoZnJhZ1N0cmVhbS5zaXplKTtcbiAgICAgICAgICAgIGJpbmFyeVN0cmVhbS5jb25jYXQoZnJhZ1N0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RyZWFtLndyaXRlVWludDE2KDB4ZmZmZSk7XG4gICAgICAgIHN0cmVhbS53cml0ZVVpbnQxNigweGUwMDApO1xuICAgICAgICBzdHJlYW0ud3JpdGVVaW50MzIoc3RhcnRPZmZzZXQubGVuZ3RoICogNCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0YXJ0T2Zmc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3RyZWFtLndyaXRlVWludDMyKHN0YXJ0T2Zmc2V0W2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmVhbS5jb25jYXQoYmluYXJ5U3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLndyaXRlVWludDE2KDB4ZmZmZSk7XG4gICAgICAgIHN0cmVhbS53cml0ZVVpbnQxNigweGUwZGQpO1xuICAgICAgICBzdHJlYW0ud3JpdGVVaW50MzIoMHgwKTtcbiAgICAgICAgdmFyIHdyaXR0ZW4gPSA4ICsgYmluYXJ5U3RyZWFtLnNpemUgKyBzdGFydE9mZnNldC5sZW5ndGggKiA0ICsgODtcblxuICAgICAgICBpZiAod3JpdHRlbiAmIDEpIHtcbiAgICAgICAgICBzdHJlYW0ud3JpdGVIZXgodGhpcy5wYWRCeXRlKTtcbiAgICAgICAgICB3cml0dGVuKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMHhmZmZmZmZmZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiaW5hcnlEYXRhID0gdmFsdWVbMF07XG4gICAgICAgIGJpbmFyeVN0cmVhbSA9IG5ldyBSZWFkQnVmZmVyU3RyZWFtKGJpbmFyeURhdGEpO1xuICAgICAgICBzdHJlYW0uY29uY2F0KGJpbmFyeVN0cmVhbSk7XG4gICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihCaW5hcnlSZXByZXNlbnRhdGlvbi5wcm90b3R5cGUpLCBcIndyaXRlQnl0ZXNcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIGJpbmFyeURhdGEsIFtiaW5hcnlTdHJlYW0uc2l6ZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDB4ZmZmZmZmZmYpIHtcbiAgICAgICAgdmFyIGl0ZW1UYWdWYWx1ZSA9IFRhZy5yZWFkVGFnKHN0cmVhbSksXG4gICAgICAgICAgICBmcmFtZXMgPSBbXTtcblxuICAgICAgICBpZiAoaXRlbVRhZ1ZhbHVlLmlzKDB4ZmZmZWUwMDApKSB7XG4gICAgICAgICAgdmFyIGl0ZW1MZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQzMigpLFxuICAgICAgICAgICAgICBudW1PZkZyYW1lcyA9IDEsXG4gICAgICAgICAgICAgIG9mZnNldHMgPSBbXTtcblxuICAgICAgICAgIGlmIChpdGVtTGVuZ3RoID4gMHgwKSB7XG4gICAgICAgICAgICAvL2hhcyBmcmFtZXNcbiAgICAgICAgICAgIG51bU9mRnJhbWVzID0gaXRlbUxlbmd0aCAvIDQ7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIHdoaWxlIChpKysgPCBudW1PZkZyYW1lcykge1xuICAgICAgICAgICAgICBvZmZzZXRzLnB1c2goc3RyZWFtLnJlYWRVaW50MzIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldHMgPSBbMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG9mZnNldHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbmV4dFRhZyA9IFRhZy5yZWFkVGFnKHN0cmVhbSk7XG5cbiAgICAgICAgICAgIGlmICghbmV4dFRhZy5pcygweGZmZmVlMDAwKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGZyYW1lSXRlbUxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnRTdHJlYW0gPSBzdHJlYW0ubW9yZShmcmFtZUl0ZW1MZW5ndGgpO1xuICAgICAgICAgICAgZnJhbWVzLnB1c2goZnJhZ21lbnRTdHJlYW0uYnVmZmVyKTtcbiAgICAgICAgICB9IC8vIFJlYWQgU2VxdWVuY2VEZWxpbWl0YXRpb25JdGVtIFRhZ1xuXG5cbiAgICAgICAgICBzdHJlYW0ucmVhZFVpbnQzMigpOyAvLyBSZWFkIFNlcXVlbmNlRGVsaW1pdGF0aW9uSXRlbSB2YWx1ZS5cblxuICAgICAgICAgIHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSXRlbSB0YWcgbm90IGZvdW5kIGFmdGVyIHVuZGVmaW5lZCBiaW5hcnkgbGVuZ3RoXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyYW1lcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBieXRlcztcbiAgICAgICAgLyppZiAodGhpcy50eXBlID09ICdPVycpIHtcclxuICAgICAgICAgICAgYnl0ZXMgPSBzdHJlYW0ucmVhZFVpbnQxNkFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT0gJ09CJykge1xyXG4gICAgICAgICAgICBieXRlcyA9IHN0cmVhbS5yZWFkVWludDhBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIH0qL1xuXG4gICAgICAgIGJ5dGVzID0gc3RyZWFtLm1vcmUobGVuZ3RoKS5idWZmZXI7XG4gICAgICAgIHJldHVybiBbYnl0ZXNdO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCaW5hcnlSZXByZXNlbnRhdGlvbjtcbn0oVmFsdWVSZXByZXNlbnRhdGlvbik7XG5cbnZhciBBcHBsaWNhdGlvbkVudGl0eSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1N0cmluZ1JlcHJlc2VudGF0aW9uKSB7XG4gIF9pbmhlcml0cyhBcHBsaWNhdGlvbkVudGl0eSwgX1N0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxuICBmdW5jdGlvbiBBcHBsaWNhdGlvbkVudGl0eSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwbGljYXRpb25FbnRpdHkpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXBwbGljYXRpb25FbnRpdHkpLmNhbGwodGhpcywgXCJBRVwiKSk7XG4gICAgX3RoaXMubWF4TGVuZ3RoID0gMTY7XG4gICAgX3RoaXMucGFkQnl0ZSA9IFwiMjBcIjtcbiAgICBfdGhpcy5maWxsV2l0aCA9IFwiMjBcIjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXBwbGljYXRpb25FbnRpdHksIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpLnRyaW0oKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXBwbGljYXRpb25FbnRpdHk7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIENvZGVTdHJpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjIpIHtcbiAgX2luaGVyaXRzKENvZGVTdHJpbmcsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIENvZGVTdHJpbmcoKSB7XG4gICAgdmFyIF90aGlzMjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlU3RyaW5nKTtcblxuICAgIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDb2RlU3RyaW5nKS5jYWxsKHRoaXMsIFwiQ1NcIikpO1xuICAgIF90aGlzMi5tYXhMZW5ndGggPSAxNjtcbiAgICBfdGhpczIucGFkQnl0ZSA9IFwiMjBcIjtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvZGVTdHJpbmcsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIC8vcmV0dXJuIHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpLnRyaW0oKTtcbiAgICAgIHJldHVybiBzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpLnRyaW0oKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29kZVN0cmluZztcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgQWdlU3RyaW5nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb24zKSB7XG4gIF9pbmhlcml0cyhBZ2VTdHJpbmcsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjMpO1xuXG4gIGZ1bmN0aW9uIEFnZVN0cmluZygpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFnZVN0cmluZyk7XG5cbiAgICBfdGhpczMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQWdlU3RyaW5nKS5jYWxsKHRoaXMsIFwiQVNcIikpO1xuICAgIF90aGlzMy5tYXhMZW5ndGggPSA0O1xuICAgIF90aGlzMy5wYWRCeXRlID0gXCIyMFwiO1xuICAgIF90aGlzMy5maXhlZCA9IHRydWU7XG4gICAgX3RoaXMzLmRlZmF1bHRWYWx1ZSA9IFwiXCI7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHJldHVybiBBZ2VTdHJpbmc7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIEF0dHJpYnV0ZVRhZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1ZhbHVlUmVwcmVzZW50YXRpb24zKSB7XG4gIF9pbmhlcml0cyhBdHRyaWJ1dGVUYWcsIF9WYWx1ZVJlcHJlc2VudGF0aW9uMyk7XG5cbiAgZnVuY3Rpb24gQXR0cmlidXRlVGFnKCkge1xuICAgIHZhciBfdGhpczQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXR0cmlidXRlVGFnKTtcblxuICAgIF90aGlzNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBdHRyaWJ1dGVUYWcpLmNhbGwodGhpcywgXCJBVFwiKSk7XG4gICAgX3RoaXM0Lm1heExlbmd0aCA9IDQ7XG4gICAgX3RoaXM0LnZhbHVlTGVuZ3RoID0gNDtcbiAgICBfdGhpczQucGFkQnl0ZSA9IFwiMDBcIjtcbiAgICBfdGhpczQuZml4ZWQgPSB0cnVlO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXR0cmlidXRlVGFnLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSkge1xuICAgICAgdmFyIGdyb3VwID0gc3RyZWFtLnJlYWRVaW50MTYoKSxcbiAgICAgICAgICBlbGVtZW50ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldHVybiB0YWdGcm9tTnVtYmVycyhncm91cCwgZWxlbWVudCkudmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndyaXRlQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVCeXRlcyhzdHJlYW0sIHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoQXR0cmlidXRlVGFnLnByb3RvdHlwZSksIFwid3JpdGVCeXRlc1wiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgdmFsdWUsIF9nZXQoX2dldFByb3RvdHlwZU9mKEF0dHJpYnV0ZVRhZy5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIlVpbnQzMlwiLCB2YWx1ZSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdHRyaWJ1dGVUYWc7XG59KFZhbHVlUmVwcmVzZW50YXRpb24pO1xuXG52YXIgRGF0ZVZhbHVlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb240KSB7XG4gIF9pbmhlcml0cyhEYXRlVmFsdWUsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjQpO1xuXG4gIGZ1bmN0aW9uIERhdGVWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBfdGhpczU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZVZhbHVlKTtcblxuICAgIF90aGlzNSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEYXRlVmFsdWUpLmNhbGwodGhpcywgXCJEQVwiLCB2YWx1ZSkpO1xuICAgIF90aGlzNS5tYXhMZW5ndGggPSAxODtcbiAgICBfdGhpczUucGFkQnl0ZSA9IFwiMjBcIjsgLy90aGlzLmZpeGVkID0gdHJ1ZTtcblxuICAgIF90aGlzNS5kZWZhdWx0VmFsdWUgPSBcIlwiO1xuICAgIHJldHVybiBfdGhpczU7XG4gIH1cblxuICByZXR1cm4gRGF0ZVZhbHVlO1xufShTdHJpbmdSZXByZXNlbnRhdGlvbik7XG5cbnZhciBEZWNpbWFsU3RyaW5nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb241KSB7XG4gIF9pbmhlcml0cyhEZWNpbWFsU3RyaW5nLCBfU3RyaW5nUmVwcmVzZW50YXRpb241KTtcblxuICBmdW5jdGlvbiBEZWNpbWFsU3RyaW5nKCkge1xuICAgIHZhciBfdGhpczY7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVjaW1hbFN0cmluZyk7XG5cbiAgICBfdGhpczYgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRGVjaW1hbFN0cmluZykuY2FsbCh0aGlzLCBcIkRTXCIpKTtcbiAgICBfdGhpczYubWF4TGVuZ3RoID0gMTY7XG4gICAgX3RoaXM2LnBhZEJ5dGUgPSBcIjIwXCI7XG4gICAgcmV0dXJuIF90aGlzNjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEZWNpbWFsU3RyaW5nLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICAvL3JldHVybiB0aGlzLnJlYWROdWxsUGFkZGVkU3RyaW5nKHN0cmVhbSwgbGVuZ3RoKS50cmltKCk7XG4gICAgICB2YXIgZHMgPSBzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpO1xuICAgICAgZHMgPSBkcy5yZXBsYWNlKC9bXjAtOS5cXFxcXFwtK2VdL2dpLCBcIlwiKTtcbiAgICAgIHJldHVybiBkcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGVjaW1hbFN0cmluZztcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgRGF0ZVRpbWUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjYpIHtcbiAgX2luaGVyaXRzKERhdGVUaW1lLCBfU3RyaW5nUmVwcmVzZW50YXRpb242KTtcblxuICBmdW5jdGlvbiBEYXRlVGltZSgpIHtcbiAgICB2YXIgX3RoaXM3O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGVUaW1lKTtcblxuICAgIF90aGlzNyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEYXRlVGltZSkuY2FsbCh0aGlzLCBcIkRUXCIpKTtcbiAgICBfdGhpczcubWF4TGVuZ3RoID0gMjY7XG4gICAgX3RoaXM3LnBhZEJ5dGUgPSBcIjIwXCI7XG4gICAgcmV0dXJuIF90aGlzNztcbiAgfVxuXG4gIHJldHVybiBEYXRlVGltZTtcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgRmxvYXRpbmdQb2ludFNpbmdsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1ZhbHVlUmVwcmVzZW50YXRpb240KSB7XG4gIF9pbmhlcml0cyhGbG9hdGluZ1BvaW50U2luZ2xlLCBfVmFsdWVSZXByZXNlbnRhdGlvbjQpO1xuXG4gIGZ1bmN0aW9uIEZsb2F0aW5nUG9pbnRTaW5nbGUoKSB7XG4gICAgdmFyIF90aGlzODtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbG9hdGluZ1BvaW50U2luZ2xlKTtcblxuICAgIF90aGlzOCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihGbG9hdGluZ1BvaW50U2luZ2xlKS5jYWxsKHRoaXMsIFwiRkxcIikpO1xuICAgIF90aGlzOC5tYXhMZW5ndGggPSA0O1xuICAgIF90aGlzOC5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzOC5maXhlZCA9IHRydWU7XG4gICAgX3RoaXM4LmRlZmF1bHRWYWx1ZSA9IDAuMDtcbiAgICByZXR1cm4gX3RoaXM4O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZsb2F0aW5nUG9pbnRTaW5nbGUsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRGbG9hdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlQnl0ZXMoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKEZsb2F0aW5nUG9pbnRTaW5nbGUucHJvdG90eXBlKSwgXCJ3cml0ZUJ5dGVzXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCB2YWx1ZSwgX2dldChfZ2V0UHJvdG90eXBlT2YoRmxvYXRpbmdQb2ludFNpbmdsZS5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIkZsb2F0XCIsIHZhbHVlKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZsb2F0aW5nUG9pbnRTaW5nbGU7XG59KFZhbHVlUmVwcmVzZW50YXRpb24pO1xuXG52YXIgRmxvYXRpbmdQb2ludERvdWJsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1ZhbHVlUmVwcmVzZW50YXRpb241KSB7XG4gIF9pbmhlcml0cyhGbG9hdGluZ1BvaW50RG91YmxlLCBfVmFsdWVSZXByZXNlbnRhdGlvbjUpO1xuXG4gIGZ1bmN0aW9uIEZsb2F0aW5nUG9pbnREb3VibGUoKSB7XG4gICAgdmFyIF90aGlzOTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbG9hdGluZ1BvaW50RG91YmxlKTtcblxuICAgIF90aGlzOSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihGbG9hdGluZ1BvaW50RG91YmxlKS5jYWxsKHRoaXMsIFwiRkRcIikpO1xuICAgIF90aGlzOS5tYXhMZW5ndGggPSA4O1xuICAgIF90aGlzOS5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzOS5maXhlZCA9IHRydWU7XG4gICAgX3RoaXM5LmRlZmF1bHRWYWx1ZSA9IDAuMDtcbiAgICByZXR1cm4gX3RoaXM5O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZsb2F0aW5nUG9pbnREb3VibGUsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWREb3VibGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihGbG9hdGluZ1BvaW50RG91YmxlLnByb3RvdHlwZSksIFwid3JpdGVCeXRlc1wiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgdmFsdWUsIF9nZXQoX2dldFByb3RvdHlwZU9mKEZsb2F0aW5nUG9pbnREb3VibGUucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJEb3VibGVcIiwgdmFsdWUpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmxvYXRpbmdQb2ludERvdWJsZTtcbn0oVmFsdWVSZXByZXNlbnRhdGlvbik7XG5cbnZhciBJbnRlZ2VyU3RyaW5nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb243KSB7XG4gIF9pbmhlcml0cyhJbnRlZ2VyU3RyaW5nLCBfU3RyaW5nUmVwcmVzZW50YXRpb243KTtcblxuICBmdW5jdGlvbiBJbnRlZ2VyU3RyaW5nKCkge1xuICAgIHZhciBfdGhpczEwO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVnZXJTdHJpbmcpO1xuXG4gICAgX3RoaXMxMCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihJbnRlZ2VyU3RyaW5nKS5jYWxsKHRoaXMsIFwiSVNcIikpO1xuICAgIF90aGlzMTAubWF4TGVuZ3RoID0gMTI7XG4gICAgX3RoaXMxMC5wYWRCeXRlID0gXCIyMFwiO1xuICAgIHJldHVybiBfdGhpczEwO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEludGVnZXJTdHJpbmcsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIC8vcmV0dXJuIHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIHN0cmVhbS5yZWFkU3RyaW5nKGxlbmd0aCkudHJpbSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbnRlZ2VyU3RyaW5nO1xufShTdHJpbmdSZXByZXNlbnRhdGlvbik7XG5cbnZhciBMb25nU3RyaW5nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb244KSB7XG4gIF9pbmhlcml0cyhMb25nU3RyaW5nLCBfU3RyaW5nUmVwcmVzZW50YXRpb244KTtcblxuICBmdW5jdGlvbiBMb25nU3RyaW5nKCkge1xuICAgIHZhciBfdGhpczExO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvbmdTdHJpbmcpO1xuXG4gICAgX3RoaXMxMSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihMb25nU3RyaW5nKS5jYWxsKHRoaXMsIFwiTE9cIikpO1xuICAgIF90aGlzMTEubWF4Q2hhckxlbmd0aCA9IDY0O1xuICAgIF90aGlzMTEucGFkQnl0ZSA9IFwiMjBcIjtcbiAgICByZXR1cm4gX3RoaXMxMTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb25nU3RyaW5nLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICAvL3JldHVybiB0aGlzLnJlYWROdWxsUGFkZGVkU3RyaW5nKHN0cmVhbSwgbGVuZ3RoKS50cmltKCk7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoKS50cmltKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvbmdTdHJpbmc7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIExvbmdUZXh0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb245KSB7XG4gIF9pbmhlcml0cyhMb25nVGV4dCwgX1N0cmluZ1JlcHJlc2VudGF0aW9uOSk7XG5cbiAgZnVuY3Rpb24gTG9uZ1RleHQoKSB7XG4gICAgdmFyIF90aGlzMTI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9uZ1RleHQpO1xuXG4gICAgX3RoaXMxMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihMb25nVGV4dCkuY2FsbCh0aGlzLCBcIkxUXCIpKTtcbiAgICBfdGhpczEyLm1heENoYXJMZW5ndGggPSAxMDI0MDtcbiAgICBfdGhpczEyLnBhZEJ5dGUgPSBcIjIwXCI7XG4gICAgcmV0dXJuIF90aGlzMTI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9uZ1RleHQsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIC8vcmV0dXJuIHJ0cmltKHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpKTtcbiAgICAgIHJldHVybiBydHJpbShzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9uZ1RleHQ7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIFBlcnNvbk5hbWUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjEwKSB7XG4gIF9pbmhlcml0cyhQZXJzb25OYW1lLCBfU3RyaW5nUmVwcmVzZW50YXRpb24xMCk7XG5cbiAgZnVuY3Rpb24gUGVyc29uTmFtZSgpIHtcbiAgICB2YXIgX3RoaXMxMztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQZXJzb25OYW1lKTtcblxuICAgIF90aGlzMTMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGVyc29uTmFtZSkuY2FsbCh0aGlzLCBcIlBOXCIpKTtcbiAgICBfdGhpczEzLm1heExlbmd0aCA9IG51bGw7XG4gICAgX3RoaXMxMy5wYWRCeXRlID0gXCIyMFwiO1xuICAgIHJldHVybiBfdGhpczEzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBlcnNvbk5hbWUsIFt7XG4gICAga2V5OiBcImNoZWNrTGVuZ3RoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrTGVuZ3RoKHZhbHVlKSB7XG4gICAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xuXG4gICAgICBpZiAoX3R5cGVvZih2YWx1ZSkgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgLy8gSW4gRElDT00gSlNPTiwgY29tcG9uZW50cyBhcmUgZW5jb2RlZCBhcyBhIG1hcHBpbmcgKG9iamVjdCksXG4gICAgICAgIC8vIHdoZXJlIHRoZSBrZXlzIGFyZSBvbmUgb3IgbW9yZSBvZiB0aGUgZm9sbG93aW5nOiBcIkFscGhhYmV0aWNcIixcbiAgICAgICAgLy8gXCJJZGVvZ3JhcGhpY1wiLCBcIlBob25ldGljXCIuXG4gICAgICAgIC8vIGh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9tZWRpY2FsL2RpY29tL2N1cnJlbnQvb3V0cHV0L2NodG1sL3BhcnQxOC9zZWN0X0YuMi4yLmh0bWxcbiAgICAgICAgY29tcG9uZW50cyA9IE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWVba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAvLyBJbiBESUNPTSBQYXJ0MTAsIGNvbXBvbmVudHMgYXJlIGVuY29kZWQgYXMgYSBzdHJpbmcsXG4gICAgICAgIC8vIHdoZXJlIGNvbXBvbmVudHMgKFwiQWxwaGFiZXRpY1wiLCBcIklkZW9ncmFwaGljXCIsIFwiUGhvbmV0aWNcIilcbiAgICAgICAgLy8gYXJlIHNlcGFyYXRlZCBieSB0aGUgXCI9XCIgZGVsaW1ldGVyLlxuICAgICAgICAvLyBodHRwOi8vZGljb20ubmVtYS5vcmcvbWVkaWNhbC9kaWNvbS9jdXJyZW50L291dHB1dC9jaHRtbC9wYXJ0MDUvc2VjdF82LjIuaHRtbFxuICAgICAgICBjb21wb25lbnRzID0gdmFsdWUuc3BsaXQoL1xcPS8pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpIGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgdmFyIGNtcCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgIGlmIChjbXAubGVuZ3RoID4gNjQpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIC8vcmV0dXJuIHJ0cmltKHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpKTtcbiAgICAgIHJldHVybiBydHJpbShzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGVyc29uTmFtZTtcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgU2hvcnRTdHJpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjExKSB7XG4gIF9pbmhlcml0cyhTaG9ydFN0cmluZywgX1N0cmluZ1JlcHJlc2VudGF0aW9uMTEpO1xuXG4gIGZ1bmN0aW9uIFNob3J0U3RyaW5nKCkge1xuICAgIHZhciBfdGhpczE0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3J0U3RyaW5nKTtcblxuICAgIF90aGlzMTQgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2hvcnRTdHJpbmcpLmNhbGwodGhpcywgXCJTSFwiKSk7XG4gICAgX3RoaXMxNC5tYXhDaGFyTGVuZ3RoID0gMTY7XG4gICAgX3RoaXMxNC5wYWRCeXRlID0gXCIyMFwiO1xuICAgIHJldHVybiBfdGhpczE0O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNob3J0U3RyaW5nLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICAvL3JldHVybiB0aGlzLnJlYWROdWxsUGFkZGVkU3RyaW5nKHN0cmVhbSwgbGVuZ3RoKS50cmltKCk7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoKS50cmltKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNob3J0U3RyaW5nO1xufShTdHJpbmdSZXByZXNlbnRhdGlvbik7XG5cbnZhciBTaWduZWRMb25nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVmFsdWVSZXByZXNlbnRhdGlvbjYpIHtcbiAgX2luaGVyaXRzKFNpZ25lZExvbmcsIF9WYWx1ZVJlcHJlc2VudGF0aW9uNik7XG5cbiAgZnVuY3Rpb24gU2lnbmVkTG9uZygpIHtcbiAgICB2YXIgX3RoaXMxNTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWduZWRMb25nKTtcblxuICAgIF90aGlzMTUgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2lnbmVkTG9uZykuY2FsbCh0aGlzLCBcIlNMXCIpKTtcbiAgICBfdGhpczE1Lm1heExlbmd0aCA9IDQ7XG4gICAgX3RoaXMxNS5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzMTUuZml4ZWQgPSB0cnVlO1xuICAgIF90aGlzMTUuZGVmYXVsdFZhbHVlID0gMDtcbiAgICByZXR1cm4gX3RoaXMxNTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaWduZWRMb25nLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIHN0cmVhbS5yZWFkSW50MzIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihTaWduZWRMb25nLnByb3RvdHlwZSksIFwid3JpdGVCeXRlc1wiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgdmFsdWUsIF9nZXQoX2dldFByb3RvdHlwZU9mKFNpZ25lZExvbmcucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJJbnQzMlwiLCB2YWx1ZSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWduZWRMb25nO1xufShWYWx1ZVJlcHJlc2VudGF0aW9uKTtcblxudmFyIFNlcXVlbmNlT2ZJdGVtcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1ZhbHVlUmVwcmVzZW50YXRpb243KSB7XG4gIF9pbmhlcml0cyhTZXF1ZW5jZU9mSXRlbXMsIF9WYWx1ZVJlcHJlc2VudGF0aW9uNyk7XG5cbiAgZnVuY3Rpb24gU2VxdWVuY2VPZkl0ZW1zKCkge1xuICAgIHZhciBfdGhpczE2O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcXVlbmNlT2ZJdGVtcyk7XG5cbiAgICBfdGhpczE2ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNlcXVlbmNlT2ZJdGVtcykuY2FsbCh0aGlzLCBcIlNRXCIpKTtcbiAgICBfdGhpczE2Lm1heExlbmd0aCA9IG51bGw7XG4gICAgX3RoaXMxNi5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzMTYubm9NdWx0aXBsZSA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzMTY7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VxdWVuY2VPZkl0ZW1zLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgc3FsZW5ndGgsIHN5bnRheCkge1xuICAgICAgaWYgKHNxbGVuZ3RoID09IDB4MCkge1xuICAgICAgICByZXR1cm4gW107IC8vY29udGFpbnMgbm8gZGF0YXNldFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHVuZGVmTGVuZ3RoID0gc3FsZW5ndGggPT0gMHhmZmZmZmZmZixcbiAgICAgICAgICAgIGVsZW1lbnRzID0gW10sXG4gICAgICAgICAgICByZWFkID0gMDtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbiAqL1xuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHJlYWRUYWcoc3RyZWFtKSxcbiAgICAgICAgICAgICAgbGVuZ3RoID0gbnVsbDtcbiAgICAgICAgICByZWFkICs9IDQ7XG5cbiAgICAgICAgICBpZiAodGFnLmlzKDB4ZmZmZWUwZGQpKSB7XG4gICAgICAgICAgICBzdHJlYW0ucmVhZFVpbnQzMigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICghdW5kZWZMZW5ndGggJiYgcmVhZCA9PSBzcWxlbmd0aCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWcuaXMoMHhmZmZlZTAwMCkpIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgICAgICAgICByZWFkICs9IDQ7XG4gICAgICAgICAgICB2YXIgaXRlbVN0cmVhbSA9IG51bGwsXG4gICAgICAgICAgICAgICAgdG9SZWFkID0gMCxcbiAgICAgICAgICAgICAgICB1bmRlZiA9IGxlbmd0aCA9PSAweGZmZmZmZmZmO1xuXG4gICAgICAgICAgICBpZiAodW5kZWYpIHtcbiAgICAgICAgICAgICAgdmFyIHN0YWNrID0gMDtcbiAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbiAqL1xuXG4gICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGcgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGcgPT0gMHhmZmZlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZ2UgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoZ2UgPT0gMHhlMDBkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLS07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5pbmNyZW1lbnQoNCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmVhZCArPSA4O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRvUmVhZCArPSA0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGdlID09IDB4ZTAwMCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjaysrO1xuICAgICAgICAgICAgICAgICAgICB0b1JlYWQgKz0gNDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvUmVhZCArPSAyO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uaW5jcmVtZW50KC0yKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdG9SZWFkICs9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0b1JlYWQgPSBsZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0b1JlYWQpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmluY3JlbWVudCh1bmRlZiA/IC10b1JlYWQgLSA4IDogMCk7XG4gICAgICAgICAgICAgIGl0ZW1TdHJlYW0gPSBzdHJlYW0ubW9yZSh0b1JlYWQpOyAvL3BhcnNlRWxlbWVudHNcblxuICAgICAgICAgICAgICByZWFkICs9IHRvUmVhZDtcbiAgICAgICAgICAgICAgaWYgKHVuZGVmKSBzdHJlYW0uaW5jcmVtZW50KDgpO1xuICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBEaWNvbU1lc3NhZ2UucmVhZChpdGVtU3RyZWFtLCBzeW50YXgpO1xuICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGl0ZW1zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF1bmRlZkxlbmd0aCAmJiByZWFkID09IHNxbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUsIHN5bnRheCkge1xuICAgICAgdmFyIHdyaXR0ZW4gPSAwO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpdGVtID0gdmFsdWVbaV07XG5cbiAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihTZXF1ZW5jZU9mSXRlbXMucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJVaW50MTZcIiwgMHhmZmZlKTtcblxuICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFNlcXVlbmNlT2ZJdGVtcy5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIlVpbnQxNlwiLCAweGUwMDApO1xuXG4gICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoU2VxdWVuY2VPZkl0ZW1zLnByb3RvdHlwZSksIFwid3JpdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIFwiVWludDMyXCIsIDB4ZmZmZmZmZmYpO1xuXG4gICAgICAgICAgd3JpdHRlbiArPSBEaWNvbU1lc3NhZ2Uud3JpdGUoaXRlbSwgc3RyZWFtLCBzeW50YXgpO1xuXG4gICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoU2VxdWVuY2VPZkl0ZW1zLnByb3RvdHlwZSksIFwid3JpdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIFwiVWludDE2XCIsIDB4ZmZmZSk7XG5cbiAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihTZXF1ZW5jZU9mSXRlbXMucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJVaW50MTZcIiwgMHhlMDBkKTtcblxuICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFNlcXVlbmNlT2ZJdGVtcy5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIlVpbnQzMlwiLCAweDAwMDAwMDAwKTtcblxuICAgICAgICAgIHdyaXR0ZW4gKz0gMTY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoU2VxdWVuY2VPZkl0ZW1zLnByb3RvdHlwZSksIFwid3JpdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIFwiVWludDE2XCIsIDB4ZmZmZSk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFNlcXVlbmNlT2ZJdGVtcy5wcm90b3R5cGUpLCBcIndyaXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCBcIlVpbnQxNlwiLCAweGUwZGQpO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihTZXF1ZW5jZU9mSXRlbXMucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJVaW50MzJcIiwgMHgwMDAwMDAwMCk7XG5cbiAgICAgIHdyaXR0ZW4gKz0gODtcbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihTZXF1ZW5jZU9mSXRlbXMucHJvdG90eXBlKSwgXCJ3cml0ZUJ5dGVzXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCB2YWx1ZSwgW3dyaXR0ZW5dKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VxdWVuY2VPZkl0ZW1zO1xufShWYWx1ZVJlcHJlc2VudGF0aW9uKTtcblxudmFyIFNpZ25lZFNob3J0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVmFsdWVSZXByZXNlbnRhdGlvbjgpIHtcbiAgX2luaGVyaXRzKFNpZ25lZFNob3J0LCBfVmFsdWVSZXByZXNlbnRhdGlvbjgpO1xuXG4gIGZ1bmN0aW9uIFNpZ25lZFNob3J0KCkge1xuICAgIHZhciBfdGhpczE3O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpZ25lZFNob3J0KTtcblxuICAgIF90aGlzMTcgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2lnbmVkU2hvcnQpLmNhbGwodGhpcywgXCJTU1wiKSk7XG4gICAgX3RoaXMxNy5tYXhMZW5ndGggPSAyO1xuICAgIF90aGlzMTcudmFsdWVMZW5ndGggPSAyO1xuICAgIF90aGlzMTcucGFkQnl0ZSA9IFwiMDBcIjtcbiAgICBfdGhpczE3LmZpeGVkID0gdHJ1ZTtcbiAgICBfdGhpczE3LmRlZmF1bHRWYWx1ZSA9IDA7XG4gICAgcmV0dXJuIF90aGlzMTc7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2lnbmVkU2hvcnQsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRJbnQxNigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZUJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlQnl0ZXMoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKFNpZ25lZFNob3J0LnByb3RvdHlwZSksIFwid3JpdGVCeXRlc1wiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgdmFsdWUsIF9nZXQoX2dldFByb3RvdHlwZU9mKFNpZ25lZFNob3J0LnByb3RvdHlwZSksIFwid3JpdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIFwiSW50MTZcIiwgdmFsdWUpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2lnbmVkU2hvcnQ7XG59KFZhbHVlUmVwcmVzZW50YXRpb24pO1xuXG52YXIgU2hvcnRUZXh0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb24xMikge1xuICBfaW5oZXJpdHMoU2hvcnRUZXh0LCBfU3RyaW5nUmVwcmVzZW50YXRpb24xMik7XG5cbiAgZnVuY3Rpb24gU2hvcnRUZXh0KCkge1xuICAgIHZhciBfdGhpczE4O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3J0VGV4dCk7XG5cbiAgICBfdGhpczE4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNob3J0VGV4dCkuY2FsbCh0aGlzLCBcIlNUXCIpKTtcbiAgICBfdGhpczE4Lm1heENoYXJMZW5ndGggPSAxMDI0O1xuICAgIF90aGlzMTgucGFkQnl0ZSA9IFwiMjBcIjtcbiAgICByZXR1cm4gX3RoaXMxODtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaG9ydFRleHQsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIC8vcmV0dXJuIHJ0cmltKHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpKTtcbiAgICAgIHJldHVybiBydHJpbShzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hvcnRUZXh0O1xufShTdHJpbmdSZXByZXNlbnRhdGlvbik7XG5cbnZhciBUaW1lVmFsdWUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjEzKSB7XG4gIF9pbmhlcml0cyhUaW1lVmFsdWUsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjEzKTtcblxuICBmdW5jdGlvbiBUaW1lVmFsdWUoKSB7XG4gICAgdmFyIF90aGlzMTk7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZVZhbHVlKTtcblxuICAgIF90aGlzMTkgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGltZVZhbHVlKS5jYWxsKHRoaXMsIFwiVE1cIikpO1xuICAgIF90aGlzMTkubWF4TGVuZ3RoID0gMTQ7XG4gICAgX3RoaXMxOS5wYWRCeXRlID0gXCIyMFwiO1xuICAgIHJldHVybiBfdGhpczE5O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRpbWVWYWx1ZSwgW3tcbiAgICBrZXk6IFwicmVhZEJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRCeXRlcyhzdHJlYW0sIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHJ0cmltKHN0cmVhbS5yZWFkU3RyaW5nKGxlbmd0aCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaW1lVmFsdWU7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIFVubGltaXRlZENoYXJhY3RlcnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJpbmdSZXByZXNlbnRhdGlvbjE0KSB7XG4gIF9pbmhlcml0cyhVbmxpbWl0ZWRDaGFyYWN0ZXJzLCBfU3RyaW5nUmVwcmVzZW50YXRpb24xNCk7XG5cbiAgZnVuY3Rpb24gVW5saW1pdGVkQ2hhcmFjdGVycygpIHtcbiAgICB2YXIgX3RoaXMyMDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmxpbWl0ZWRDaGFyYWN0ZXJzKTtcblxuICAgIF90aGlzMjAgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVW5saW1pdGVkQ2hhcmFjdGVycykuY2FsbCh0aGlzLCBcIlVDXCIpKTtcbiAgICBfdGhpczIwLm1heExlbmd0aCA9IG51bGw7XG4gICAgX3RoaXMyMC5tdWx0aSA9IHRydWU7XG4gICAgX3RoaXMyMC5wYWRCeXRlID0gXCIyMFwiO1xuICAgIHJldHVybiBfdGhpczIwO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFVubGltaXRlZENoYXJhY3RlcnMsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBydHJpbShzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVW5saW1pdGVkQ2hhcmFjdGVycztcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgVW5saW1pdGVkVGV4dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1N0cmluZ1JlcHJlc2VudGF0aW9uMTUpIHtcbiAgX2luaGVyaXRzKFVubGltaXRlZFRleHQsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjE1KTtcblxuICBmdW5jdGlvbiBVbmxpbWl0ZWRUZXh0KCkge1xuICAgIHZhciBfdGhpczIxO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVubGltaXRlZFRleHQpO1xuXG4gICAgX3RoaXMyMSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihVbmxpbWl0ZWRUZXh0KS5jYWxsKHRoaXMsIFwiVVRcIikpO1xuICAgIF90aGlzMjEubWF4TGVuZ3RoID0gbnVsbDtcbiAgICBfdGhpczIxLnBhZEJ5dGUgPSBcIjIwXCI7XG4gICAgcmV0dXJuIF90aGlzMjE7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVW5saW1pdGVkVGV4dCwgW3tcbiAgICBrZXk6IFwicmVhZEJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRCeXRlcyhzdHJlYW0sIGxlbmd0aCkge1xuICAgICAgLy9yZXR1cm4gdGhpcy5yZWFkTnVsbFBhZGRlZFN0cmluZyhzdHJlYW0sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gcnRyaW0oc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFVubGltaXRlZFRleHQ7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIFVuc2lnbmVkU2hvcnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9WYWx1ZVJlcHJlc2VudGF0aW9uOSkge1xuICBfaW5oZXJpdHMoVW5zaWduZWRTaG9ydCwgX1ZhbHVlUmVwcmVzZW50YXRpb245KTtcblxuICBmdW5jdGlvbiBVbnNpZ25lZFNob3J0KCkge1xuICAgIHZhciBfdGhpczIyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuc2lnbmVkU2hvcnQpO1xuXG4gICAgX3RoaXMyMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihVbnNpZ25lZFNob3J0KS5jYWxsKHRoaXMsIFwiVVNcIikpO1xuICAgIF90aGlzMjIubWF4TGVuZ3RoID0gMjtcbiAgICBfdGhpczIyLnBhZEJ5dGUgPSBcIjAwXCI7XG4gICAgX3RoaXMyMi5maXhlZCA9IHRydWU7XG4gICAgX3RoaXMyMi5kZWZhdWx0VmFsdWUgPSAwO1xuICAgIHJldHVybiBfdGhpczIyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFVuc2lnbmVkU2hvcnQsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihVbnNpZ25lZFNob3J0LnByb3RvdHlwZSksIFwid3JpdGVCeXRlc1wiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgdmFsdWUsIF9nZXQoX2dldFByb3RvdHlwZU9mKFVuc2lnbmVkU2hvcnQucHJvdG90eXBlKSwgXCJ3cml0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0cmVhbSwgXCJVaW50MTZcIiwgdmFsdWUpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVW5zaWduZWRTaG9ydDtcbn0oVmFsdWVSZXByZXNlbnRhdGlvbik7XG5cbnZhciBVbnNpZ25lZExvbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9WYWx1ZVJlcHJlc2VudGF0aW9uMTApIHtcbiAgX2luaGVyaXRzKFVuc2lnbmVkTG9uZywgX1ZhbHVlUmVwcmVzZW50YXRpb24xMCk7XG5cbiAgZnVuY3Rpb24gVW5zaWduZWRMb25nKCkge1xuICAgIHZhciBfdGhpczIzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuc2lnbmVkTG9uZyk7XG5cbiAgICBfdGhpczIzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVuc2lnbmVkTG9uZykuY2FsbCh0aGlzLCBcIlVMXCIpKTtcbiAgICBfdGhpczIzLm1heExlbmd0aCA9IDQ7XG4gICAgX3RoaXMyMy5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzMjMuZml4ZWQgPSB0cnVlO1xuICAgIF90aGlzMjMuZGVmYXVsdFZhbHVlID0gMDtcbiAgICByZXR1cm4gX3RoaXMyMztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVbnNpZ25lZExvbmcsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRVaW50MzIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGVzKHN0cmVhbSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihVbnNpZ25lZExvbmcucHJvdG90eXBlKSwgXCJ3cml0ZUJ5dGVzXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyZWFtLCB2YWx1ZSwgX2dldChfZ2V0UHJvdG90eXBlT2YoVW5zaWduZWRMb25nLnByb3RvdHlwZSksIFwid3JpdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHJlYW0sIFwiVWludDMyXCIsIHZhbHVlKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFVuc2lnbmVkTG9uZztcbn0oVmFsdWVSZXByZXNlbnRhdGlvbik7XG5cbnZhciBVbmlxdWVJZGVudGlmaWVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb24xNikge1xuICBfaW5oZXJpdHMoVW5pcXVlSWRlbnRpZmllciwgX1N0cmluZ1JlcHJlc2VudGF0aW9uMTYpO1xuXG4gIGZ1bmN0aW9uIFVuaXF1ZUlkZW50aWZpZXIoKSB7XG4gICAgdmFyIF90aGlzMjQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5pcXVlSWRlbnRpZmllcik7XG5cbiAgICBfdGhpczI0ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVuaXF1ZUlkZW50aWZpZXIpLmNhbGwodGhpcywgXCJVSVwiKSk7XG4gICAgX3RoaXMyNC5tYXhMZW5ndGggPSA2NDtcbiAgICBfdGhpczI0LnBhZEJ5dGUgPSBcIjAwXCI7XG4gICAgcmV0dXJuIF90aGlzMjQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVW5pcXVlSWRlbnRpZmllciwgW3tcbiAgICBrZXk6IFwicmVhZEJ5dGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRCeXRlcyhzdHJlYW0sIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZE51bGxQYWRkZWRTdHJpbmcoc3RyZWFtLCBsZW5ndGgpLnJlcGxhY2UoL1teMC05Ll0vZywgXCJcIik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFVuaXF1ZUlkZW50aWZpZXI7XG59KFN0cmluZ1JlcHJlc2VudGF0aW9uKTtcblxudmFyIFVuaXZlcnNhbFJlc291cmNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb24xNykge1xuICBfaW5oZXJpdHMoVW5pdmVyc2FsUmVzb3VyY2UsIF9TdHJpbmdSZXByZXNlbnRhdGlvbjE3KTtcblxuICBmdW5jdGlvbiBVbml2ZXJzYWxSZXNvdXJjZSgpIHtcbiAgICB2YXIgX3RoaXMyNTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbml2ZXJzYWxSZXNvdXJjZSk7XG5cbiAgICBfdGhpczI1ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVuaXZlcnNhbFJlc291cmNlKS5jYWxsKHRoaXMsIFwiVVJcIikpO1xuICAgIF90aGlzMjUubWF4TGVuZ3RoID0gbnVsbDtcbiAgICBfdGhpczI1LnBhZEJ5dGUgPSBcIjIwXCI7XG4gICAgcmV0dXJuIF90aGlzMjU7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVW5pdmVyc2FsUmVzb3VyY2UsIFt7XG4gICAga2V5OiBcInJlYWRCeXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoc3RyZWFtLCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdHJlYW0ucmVhZFN0cmluZyhsZW5ndGgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBVbml2ZXJzYWxSZXNvdXJjZTtcbn0oU3RyaW5nUmVwcmVzZW50YXRpb24pO1xuXG52YXIgVW5rbm93blZhbHVlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyaW5nUmVwcmVzZW50YXRpb24xOCkge1xuICBfaW5oZXJpdHMoVW5rbm93blZhbHVlLCBfU3RyaW5nUmVwcmVzZW50YXRpb24xOCk7XG5cbiAgZnVuY3Rpb24gVW5rbm93blZhbHVlKCkge1xuICAgIHZhciBfdGhpczI2O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVua25vd25WYWx1ZSk7XG5cbiAgICBfdGhpczI2ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVua25vd25WYWx1ZSkuY2FsbCh0aGlzLCBcIlVOXCIpKTtcbiAgICBfdGhpczI2Lm1heExlbmd0aCA9IG51bGw7XG4gICAgX3RoaXMyNi5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzMjYubm9NdWx0aXBsZSA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzMjY7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVW5rbm93blZhbHVlLCBbe1xuICAgIGtleTogXCJyZWFkQnl0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGVzKHN0cmVhbSwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3RyZWFtLnJlYWRTdHJpbmcobGVuZ3RoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVW5rbm93blZhbHVlO1xufShTdHJpbmdSZXByZXNlbnRhdGlvbik7XG5cbnZhciBPdGhlcldvcmRTdHJpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CaW5hcnlSZXByZXNlbnRhdGlvbikge1xuICBfaW5oZXJpdHMoT3RoZXJXb3JkU3RyaW5nLCBfQmluYXJ5UmVwcmVzZW50YXRpb24pO1xuXG4gIGZ1bmN0aW9uIE90aGVyV29yZFN0cmluZygpIHtcbiAgICB2YXIgX3RoaXMyNztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdGhlcldvcmRTdHJpbmcpO1xuXG4gICAgX3RoaXMyNyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihPdGhlcldvcmRTdHJpbmcpLmNhbGwodGhpcywgXCJPV1wiKSk7XG4gICAgX3RoaXMyNy5tYXhMZW5ndGggPSBudWxsO1xuICAgIF90aGlzMjcucGFkQnl0ZSA9IFwiMDBcIjtcbiAgICBfdGhpczI3Lm5vTXVsdGlwbGUgPSB0cnVlO1xuICAgIHJldHVybiBfdGhpczI3O1xuICB9XG5cbiAgcmV0dXJuIE90aGVyV29yZFN0cmluZztcbn0oQmluYXJ5UmVwcmVzZW50YXRpb24pO1xuXG52YXIgT3RoZXJCeXRlU3RyaW5nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmluYXJ5UmVwcmVzZW50YXRpb24yKSB7XG4gIF9pbmhlcml0cyhPdGhlckJ5dGVTdHJpbmcsIF9CaW5hcnlSZXByZXNlbnRhdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIE90aGVyQnl0ZVN0cmluZygpIHtcbiAgICB2YXIgX3RoaXMyODtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdGhlckJ5dGVTdHJpbmcpO1xuXG4gICAgX3RoaXMyOCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihPdGhlckJ5dGVTdHJpbmcpLmNhbGwodGhpcywgXCJPQlwiKSk7XG4gICAgX3RoaXMyOC5tYXhMZW5ndGggPSBudWxsO1xuICAgIF90aGlzMjgucGFkQnl0ZSA9IFwiMDBcIjtcbiAgICBfdGhpczI4Lm5vTXVsdGlwbGUgPSB0cnVlO1xuICAgIHJldHVybiBfdGhpczI4O1xuICB9XG5cbiAgcmV0dXJuIE90aGVyQnl0ZVN0cmluZztcbn0oQmluYXJ5UmVwcmVzZW50YXRpb24pO1xuXG52YXIgT3RoZXJEb3VibGVTdHJpbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CaW5hcnlSZXByZXNlbnRhdGlvbjMpIHtcbiAgX2luaGVyaXRzKE90aGVyRG91YmxlU3RyaW5nLCBfQmluYXJ5UmVwcmVzZW50YXRpb24zKTtcblxuICBmdW5jdGlvbiBPdGhlckRvdWJsZVN0cmluZygpIHtcbiAgICB2YXIgX3RoaXMyOTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdGhlckRvdWJsZVN0cmluZyk7XG5cbiAgICBfdGhpczI5ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE90aGVyRG91YmxlU3RyaW5nKS5jYWxsKHRoaXMsIFwiT0RcIikpO1xuICAgIF90aGlzMjkubWF4TGVuZ3RoID0gbnVsbDtcbiAgICBfdGhpczI5LnBhZEJ5dGUgPSBcIjAwXCI7XG4gICAgX3RoaXMyOS5ub011bHRpcGxlID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXMyOTtcbiAgfVxuXG4gIHJldHVybiBPdGhlckRvdWJsZVN0cmluZztcbn0oQmluYXJ5UmVwcmVzZW50YXRpb24pO1xuXG52YXIgT3RoZXJGbG9hdFN0cmluZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0JpbmFyeVJlcHJlc2VudGF0aW9uNCkge1xuICBfaW5oZXJpdHMoT3RoZXJGbG9hdFN0cmluZywgX0JpbmFyeVJlcHJlc2VudGF0aW9uNCk7XG5cbiAgZnVuY3Rpb24gT3RoZXJGbG9hdFN0cmluZygpIHtcbiAgICB2YXIgX3RoaXMzMDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdGhlckZsb2F0U3RyaW5nKTtcblxuICAgIF90aGlzMzAgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoT3RoZXJGbG9hdFN0cmluZykuY2FsbCh0aGlzLCBcIk9GXCIpKTtcbiAgICBfdGhpczMwLm1heExlbmd0aCA9IG51bGw7XG4gICAgX3RoaXMzMC5wYWRCeXRlID0gXCIwMFwiO1xuICAgIF90aGlzMzAubm9NdWx0aXBsZSA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzMzA7XG4gIH1cblxuICByZXR1cm4gT3RoZXJGbG9hdFN0cmluZztcbn0oQmluYXJ5UmVwcmVzZW50YXRpb24pO1xuXG52YXIgSU1QTElDSVRfTElUVExFX0VORElBTiA9IFwiMS4yLjg0MC4xMDAwOC4xLjJcIjtcbnZhciBFWFBMSUNJVF9MSVRUTEVfRU5ESUFOID0gXCIxLjIuODQwLjEwMDA4LjEuMi4xXCI7XG5cbnZhciBUYWcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUYWcodmFsdWUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFnKTtcblxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUYWcsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiKFwiICsgcGFkZGluZ0xlZnQoXCIwMDAwXCIsIHRoaXMuZ3JvdXAoKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkgKyBcIixcIiArIHBhZGRpbmdMZWZ0KFwiMDAwMFwiLCB0aGlzLmVsZW1lbnQoKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkgKyBcIilcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9DbGVhblN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NsZWFuU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHBhZGRpbmdMZWZ0KFwiMDAwMFwiLCB0aGlzLmdyb3VwKCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpICsgcGFkZGluZ0xlZnQoXCIwMDAwXCIsIHRoaXMuZWxlbWVudCgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXModCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT0gdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZSA+Pj4gMTY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVsZW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWxlbWVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlICYgMHhmZmZmO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1BpeGVsRGF0YVRhZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1BpeGVsRGF0YVRhZygpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzKDB4N2ZlMDAwMTApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZShzdHJlYW0sIHZyVHlwZSwgdmFsdWVzLCBzeW50YXgpIHtcbiAgICAgIHZhciB2ciA9IFZhbHVlUmVwcmVzZW50YXRpb24uY3JlYXRlQnlUeXBlU3RyaW5nKHZyVHlwZSksXG4gICAgICAgICAgdXNlU3ludGF4ID0gRGljb21NZXNzYWdlLl9ub3JtYWxpemVTeW50YXgoc3ludGF4KTtcblxuICAgICAgdmFyIGltcGxpY2l0ID0gdXNlU3ludGF4ID09IElNUExJQ0lUX0xJVFRMRV9FTkRJQU4gPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgaXNMaXR0bGVFbmRpYW4gPSB1c2VTeW50YXggPT0gSU1QTElDSVRfTElUVExFX0VORElBTiB8fCB1c2VTeW50YXggPT0gRVhQTElDSVRfTElUVExFX0VORElBTiA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICBpc0VuY2Fwc3VsYXRlZCA9IERpY29tTWVzc2FnZS5pc0VuY2Fwc3VsYXRlZChzeW50YXgpO1xuICAgICAgdmFyIG9sZEVuZGlhbiA9IHN0cmVhbS5pc0xpdHRsZUVuZGlhbjtcbiAgICAgIHN0cmVhbS5zZXRFbmRpYW4oaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgc3RyZWFtLndyaXRlVWludDE2KHRoaXMuZ3JvdXAoKSk7XG4gICAgICBzdHJlYW0ud3JpdGVVaW50MTYodGhpcy5lbGVtZW50KCkpO1xuICAgICAgdmFyIHRhZ1N0cmVhbSA9IG5ldyBXcml0ZUJ1ZmZlclN0cmVhbSgyNTYpLFxuICAgICAgICAgIHZhbHVlTGVuZ3RoO1xuICAgICAgdGFnU3RyZWFtLnNldEVuZGlhbihpc0xpdHRsZUVuZGlhbik7XG5cbiAgICAgIGlmICh2clR5cGUgPT0gXCJPV1wiIHx8IHZyVHlwZSA9PSBcIk9CXCIpIHtcbiAgICAgICAgdmFsdWVMZW5ndGggPSB2ci53cml0ZUJ5dGVzKHRhZ1N0cmVhbSwgdmFsdWVzLCB1c2VTeW50YXgsIGlzRW5jYXBzdWxhdGVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlTGVuZ3RoID0gdnIud3JpdGVCeXRlcyh0YWdTdHJlYW0sIHZhbHVlcywgdXNlU3ludGF4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZyVHlwZSA9PSBcIlNRXCIpIHtcbiAgICAgICAgdmFsdWVMZW5ndGggPSAweGZmZmZmZmZmO1xuICAgICAgfVxuXG4gICAgICB2YXIgd3JpdHRlbiA9IHRhZ1N0cmVhbS5zaXplICsgNDtcblxuICAgICAgaWYgKGltcGxpY2l0KSB7XG4gICAgICAgIHN0cmVhbS53cml0ZVVpbnQzMih2YWx1ZUxlbmd0aCk7XG4gICAgICAgIHdyaXR0ZW4gKz0gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2ci5pc0V4cGxpY2l0KCkpIHtcbiAgICAgICAgICBzdHJlYW0ud3JpdGVTdHJpbmcodnIudHlwZSk7XG4gICAgICAgICAgc3RyZWFtLndyaXRlSGV4KFwiMDAwMFwiKTtcbiAgICAgICAgICBzdHJlYW0ud3JpdGVVaW50MzIodmFsdWVMZW5ndGgpO1xuICAgICAgICAgIHdyaXR0ZW4gKz0gODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJlYW0ud3JpdGVTdHJpbmcodnIudHlwZSk7XG4gICAgICAgICAgc3RyZWFtLndyaXRlVWludDE2KHZhbHVlTGVuZ3RoKTtcbiAgICAgICAgICB3cml0dGVuICs9IDQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyZWFtLmNvbmNhdCh0YWdTdHJlYW0pO1xuICAgICAgc3RyZWFtLnNldEVuZGlhbihvbGRFbmRpYW4pO1xuICAgICAgcmV0dXJuIHdyaXR0ZW47XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbVN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cikge1xuICAgICAgdmFyIGdyb3VwID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZygwLCA0KSwgMTYpLFxuICAgICAgICAgIGVsZW1lbnQgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKDQpLCAxNik7XG4gICAgICByZXR1cm4gVGFnLmZyb21OdW1iZXJzKGdyb3VwLCBlbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVBTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbVBTdHJpbmcoc3RyKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKDEsIDUpLCAxNiksXG4gICAgICAgICAgZWxlbWVudCA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoNiwgMTApLCAxNik7XG4gICAgICByZXR1cm4gVGFnLmZyb21OdW1iZXJzKGdyb3VwLCBlbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbU51bWJlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbU51bWJlcnMoZ3JvdXAsIGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgVGFnKChncm91cCA8PCAxNiB8IGVsZW1lbnQpID4+PiAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFRhZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkVGFnKHN0cmVhbSkge1xuICAgICAgdmFyIGdyb3VwID0gc3RyZWFtLnJlYWRVaW50MTYoKSxcbiAgICAgICAgICBlbGVtZW50ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldHVybiBUYWcuZnJvbU51bWJlcnMoZ3JvdXAsIGVsZW1lbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWc7XG59KCk7XG5cbnZhciBkaWN0aW9uYXJ5PXtcIigwMDAwLDAwMDApXCI6e3RhZzpcIigwMDAwLDAwMDApXCIsdnI6XCJVTFwiLG5hbWU6XCJDb21tYW5kR3JvdXBMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwwMDAyKVwiOnt0YWc6XCIoMDAwMCwwMDAyKVwiLHZyOlwiVUlcIixuYW1lOlwiQWZmZWN0ZWRTT1BDbGFzc1VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDAwMDMpXCI6e3RhZzpcIigwMDAwLDAwMDMpXCIsdnI6XCJVSVwiLG5hbWU6XCJSZXF1ZXN0ZWRTT1BDbGFzc1VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDAxMDApXCI6e3RhZzpcIigwMDAwLDAxMDApXCIsdnI6XCJVU1wiLG5hbWU6XCJDb21tYW5kRmllbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwwMTEwKVwiOnt0YWc6XCIoMDAwMCwwMTEwKVwiLHZyOlwiVVNcIixuYW1lOlwiTWVzc2FnZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMDEyMClcIjp7dGFnOlwiKDAwMDAsMDEyMClcIix2cjpcIlVTXCIsbmFtZTpcIk1lc3NhZ2VJREJlaW5nUmVzcG9uZGVkVG9cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwwNjAwKVwiOnt0YWc6XCIoMDAwMCwwNjAwKVwiLHZyOlwiQUVcIixuYW1lOlwiTW92ZURlc3RpbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMDcwMClcIjp7dGFnOlwiKDAwMDAsMDcwMClcIix2cjpcIlVTXCIsbmFtZTpcIlByaW9yaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMDgwMClcIjp7dGFnOlwiKDAwMDAsMDgwMClcIix2cjpcIlVTXCIsbmFtZTpcIkNvbW1hbmREYXRhU2V0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDA5MDApXCI6e3RhZzpcIigwMDAwLDA5MDApXCIsdnI6XCJVU1wiLG5hbWU6XCJTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwwOTAxKVwiOnt0YWc6XCIoMDAwMCwwOTAxKVwiLHZyOlwiQVRcIixuYW1lOlwiT2ZmZW5kaW5nRWxlbWVudFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMDkwMilcIjp7dGFnOlwiKDAwMDAsMDkwMilcIix2cjpcIkxPXCIsbmFtZTpcIkVycm9yQ29tbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDA5MDMpXCI6e3RhZzpcIigwMDAwLDA5MDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJFcnJvcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMTAwMClcIjp7dGFnOlwiKDAwMDAsMTAwMClcIix2cjpcIlVJXCIsbmFtZTpcIkFmZmVjdGVkU09QSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDAxKVwiOnt0YWc6XCIoMDAwMCwxMDAxKVwiLHZyOlwiVUlcIixuYW1lOlwiUmVxdWVzdGVkU09QSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDAyKVwiOnt0YWc6XCIoMDAwMCwxMDAyKVwiLHZyOlwiVVNcIixuYW1lOlwiRXZlbnRUeXBlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDA1KVwiOnt0YWc6XCIoMDAwMCwxMDA1KVwiLHZyOlwiQVRcIixuYW1lOlwiQXR0cmlidXRlSWRlbnRpZmllckxpc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDEwMDgpXCI6e3RhZzpcIigwMDAwLDEwMDgpXCIsdnI6XCJVU1wiLG5hbWU6XCJBY3Rpb25UeXBlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDIwKVwiOnt0YWc6XCIoMDAwMCwxMDIwKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZSZW1haW5pbmdTdWJvcGVyYXRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDAsMTAyMSlcIjp7dGFnOlwiKDAwMDAsMTAyMSlcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mQ29tcGxldGVkU3Vib3BlcmF0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDEwMjIpXCI6e3RhZzpcIigwMDAwLDEwMjIpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZkZhaWxlZFN1Ym9wZXJhdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDIzKVwiOnt0YWc6XCIoMDAwMCwxMDIzKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZXYXJuaW5nU3Vib3BlcmF0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAwLDEwMzApXCI6e3RhZzpcIigwMDAwLDEwMzApXCIsdnI6XCJBRVwiLG5hbWU6XCJNb3ZlT3JpZ2luYXRvckFwcGxpY2F0aW9uRW50aXR5VGl0bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMCwxMDMxKVwiOnt0YWc6XCIoMDAwMCwxMDMxKVwiLHZyOlwiVVNcIixuYW1lOlwiTW92ZU9yaWdpbmF0b3JNZXNzYWdlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMiwwMDAwKVwiOnt0YWc6XCIoMDAwMiwwMDAwKVwiLHZyOlwiVUxcIixuYW1lOlwiRmlsZU1ldGFJbmZvcm1hdGlvbkdyb3VwTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAwMSlcIjp7dGFnOlwiKDAwMDIsMDAwMSlcIix2cjpcIk9CXCIsbmFtZTpcIkZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAwMilcIjp7dGFnOlwiKDAwMDIsMDAwMilcIix2cjpcIlVJXCIsbmFtZTpcIk1lZGlhU3RvcmFnZVNPUENsYXNzVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAwMylcIjp7dGFnOlwiKDAwMDIsMDAwMylcIix2cjpcIlVJXCIsbmFtZTpcIk1lZGlhU3RvcmFnZVNPUEluc3RhbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAxMClcIjp7dGFnOlwiKDAwMDIsMDAxMClcIix2cjpcIlVJXCIsbmFtZTpcIlRyYW5zZmVyU3ludGF4VUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAxMilcIjp7dGFnOlwiKDAwMDIsMDAxMilcIix2cjpcIlVJXCIsbmFtZTpcIkltcGxlbWVudGF0aW9uQ2xhc3NVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMiwwMDEzKVwiOnt0YWc6XCIoMDAwMiwwMDEzKVwiLHZyOlwiU0hcIixuYW1lOlwiSW1wbGVtZW50YXRpb25WZXJzaW9uTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAyLDAwMTYpXCI6e3RhZzpcIigwMDAyLDAwMTYpXCIsdnI6XCJBRVwiLG5hbWU6XCJTb3VyY2VBcHBsaWNhdGlvbkVudGl0eVRpdGxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAxNylcIjp7dGFnOlwiKDAwMDIsMDAxNylcIix2cjpcIkFFXCIsbmFtZTpcIlNlbmRpbmdBcHBsaWNhdGlvbkVudGl0eVRpdGxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDIsMDAxOClcIjp7dGFnOlwiKDAwMDIsMDAxOClcIix2cjpcIkFFXCIsbmFtZTpcIlJlY2VpdmluZ0FwcGxpY2F0aW9uRW50aXR5VGl0bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwMiwwMTAwKVwiOnt0YWc6XCIoMDAwMiwwMTAwKVwiLHZyOlwiVUlcIixuYW1lOlwiUHJpdmF0ZUluZm9ybWF0aW9uQ3JlYXRvclVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDAyLDAxMDIpXCI6e3RhZzpcIigwMDAyLDAxMDIpXCIsdnI6XCJPQlwiLG5hbWU6XCJQcml2YXRlSW5mb3JtYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwNCwxMTMwKVwiOnt0YWc6XCIoMDAwNCwxMTMwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRmlsZVNldElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTE0MSlcIjp7dGFnOlwiKDAwMDQsMTE0MSlcIix2cjpcIkNTXCIsbmFtZTpcIkZpbGVTZXREZXNjcmlwdG9yRmlsZUlEXCIsdm06XCIxLThcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwNCwxMTQyKVwiOnt0YWc6XCIoMDAwNCwxMTQyKVwiLHZyOlwiQ1NcIixuYW1lOlwiU3BlY2lmaWNDaGFyYWN0ZXJTZXRPZkZpbGVTZXREZXNjcmlwdG9yRmlsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA0LDEyMDApXCI6e3RhZzpcIigwMDA0LDEyMDApXCIsdnI6XCJ1cFwiLG5hbWU6XCJPZmZzZXRPZlRoZUZpcnN0RGlyZWN0b3J5UmVjb3JkT2ZUaGVSb290RGlyZWN0b3J5RW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTIwMilcIjp7dGFnOlwiKDAwMDQsMTIwMilcIix2cjpcInVwXCIsbmFtZTpcIk9mZnNldE9mVGhlTGFzdERpcmVjdG9yeVJlY29yZE9mVGhlUm9vdERpcmVjdG9yeUVudGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA0LDEyMTIpXCI6e3RhZzpcIigwMDA0LDEyMTIpXCIsdnI6XCJVU1wiLG5hbWU6XCJGaWxlU2V0Q29uc2lzdGVuY3lGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTIyMClcIjp7dGFnOlwiKDAwMDQsMTIyMClcIix2cjpcIlNRXCIsbmFtZTpcIkRpcmVjdG9yeVJlY29yZFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTQwMClcIjp7dGFnOlwiKDAwMDQsMTQwMClcIix2cjpcInVwXCIsbmFtZTpcIk9mZnNldE9mVGhlTmV4dERpcmVjdG9yeVJlY29yZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA0LDE0MTApXCI6e3RhZzpcIigwMDA0LDE0MTApXCIsdnI6XCJVU1wiLG5hbWU6XCJSZWNvcmRJblVzZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwNCwxNDIwKVwiOnt0YWc6XCIoMDAwNCwxNDIwKVwiLHZyOlwidXBcIixuYW1lOlwiT2Zmc2V0T2ZSZWZlcmVuY2VkTG93ZXJMZXZlbERpcmVjdG9yeUVudGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA0LDE0MzApXCI6e3RhZzpcIigwMDA0LDE0MzApXCIsdnI6XCJDU1wiLG5hbWU6XCJEaXJlY3RvcnlSZWNvcmRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTQzMilcIjp7dGFnOlwiKDAwMDQsMTQzMilcIix2cjpcIlVJXCIsbmFtZTpcIlByaXZhdGVSZWNvcmRVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwNCwxNTAwKVwiOnt0YWc6XCIoMDAwNCwxNTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVmZXJlbmNlZEZpbGVJRFwiLHZtOlwiMS04XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTUxMClcIjp7dGFnOlwiKDAwMDQsMTUxMClcIix2cjpcIlVJXCIsbmFtZTpcIlJlZmVyZW5jZWRTT1BDbGFzc1VJREluRmlsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA0LDE1MTEpXCI6e3RhZzpcIigwMDA0LDE1MTEpXCIsdnI6XCJVSVwiLG5hbWU6XCJSZWZlcmVuY2VkU09QSW5zdGFuY2VVSURJbkZpbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwNCwxNTEyKVwiOnt0YWc6XCIoMDAwNCwxNTEyKVwiLHZyOlwiVUlcIixuYW1lOlwiUmVmZXJlbmNlZFRyYW5zZmVyU3ludGF4VUlESW5GaWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDQsMTUxQSlcIjp7dGFnOlwiKDAwMDQsMTUxQSlcIix2cjpcIlVJXCIsbmFtZTpcIlJlZmVyZW5jZWRSZWxhdGVkR2VuZXJhbFNPUENsYXNzVUlESW5GaWxlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDA1KVwiOnt0YWc6XCIoMDAwOCwwMDA1KVwiLHZyOlwiQ1NcIixuYW1lOlwiU3BlY2lmaWNDaGFyYWN0ZXJTZXRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMDYpXCI6e3RhZzpcIigwMDA4LDAwMDYpXCIsdnI6XCJTUVwiLG5hbWU6XCJMYW5ndWFnZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMDgpXCI6e3RhZzpcIigwMDA4LDAwMDgpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbWFnZVR5cGVcIix2bTpcIjItblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMTIpXCI6e3RhZzpcIigwMDA4LDAwMTIpXCIsdnI6XCJEQVwiLG5hbWU6XCJJbnN0YW5jZUNyZWF0aW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMTMpXCI6e3RhZzpcIigwMDA4LDAwMTMpXCIsdnI6XCJUTVwiLG5hbWU6XCJJbnN0YW5jZUNyZWF0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMTQpXCI6e3RhZzpcIigwMDA4LDAwMTQpXCIsdnI6XCJVSVwiLG5hbWU6XCJJbnN0YW5jZUNyZWF0b3JVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDE1KVwiOnt0YWc6XCIoMDAwOCwwMDE1KVwiLHZyOlwiRFRcIixuYW1lOlwiSW5zdGFuY2VDb2VyY2lvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAxNilcIjp7dGFnOlwiKDAwMDgsMDAxNilcIix2cjpcIlVJXCIsbmFtZTpcIlNPUENsYXNzVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAxOClcIjp7dGFnOlwiKDAwMDgsMDAxOClcIix2cjpcIlVJXCIsbmFtZTpcIlNPUEluc3RhbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAxQSlcIjp7dGFnOlwiKDAwMDgsMDAxQSlcIix2cjpcIlVJXCIsbmFtZTpcIlJlbGF0ZWRHZW5lcmFsU09QQ2xhc3NVSURcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwMUIpXCI6e3RhZzpcIigwMDA4LDAwMUIpXCIsdnI6XCJVSVwiLG5hbWU6XCJPcmlnaW5hbFNwZWNpYWxpemVkU09QQ2xhc3NVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDIwKVwiOnt0YWc6XCIoMDAwOCwwMDIwKVwiLHZyOlwiREFcIixuYW1lOlwiU3R1ZHlEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAyMSlcIjp7dGFnOlwiKDAwMDgsMDAyMSlcIix2cjpcIkRBXCIsbmFtZTpcIlNlcmllc0RhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDIyKVwiOnt0YWc6XCIoMDAwOCwwMDIyKVwiLHZyOlwiREFcIixuYW1lOlwiQWNxdWlzaXRpb25EYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAyMylcIjp7dGFnOlwiKDAwMDgsMDAyMylcIix2cjpcIkRBXCIsbmFtZTpcIkNvbnRlbnREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAyQSlcIjp7dGFnOlwiKDAwMDgsMDAyQSlcIix2cjpcIkRUXCIsbmFtZTpcIkFjcXVpc2l0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDMwKVwiOnt0YWc6XCIoMDAwOCwwMDMwKVwiLHZyOlwiVE1cIixuYW1lOlwiU3R1ZHlUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAzMSlcIjp7dGFnOlwiKDAwMDgsMDAzMSlcIix2cjpcIlRNXCIsbmFtZTpcIlNlcmllc1RpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDMyKVwiOnt0YWc6XCIoMDAwOCwwMDMyKVwiLHZyOlwiVE1cIixuYW1lOlwiQWNxdWlzaXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDAzMylcIjp7dGFnOlwiKDAwMDgsMDAzMylcIix2cjpcIlRNXCIsbmFtZTpcIkNvbnRlbnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA1MClcIjp7dGFnOlwiKDAwMDgsMDA1MClcIix2cjpcIlNIXCIsbmFtZTpcIkFjY2Vzc2lvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNTEpXCI6e3RhZzpcIigwMDA4LDAwNTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJJc3N1ZXJPZkFjY2Vzc2lvbk51bWJlclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA1MilcIjp7dGFnOlwiKDAwMDgsMDA1MilcIix2cjpcIkNTXCIsbmFtZTpcIlF1ZXJ5UmV0cmlldmVMZXZlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNTMpXCI6e3RhZzpcIigwMDA4LDAwNTMpXCIsdnI6XCJDU1wiLG5hbWU6XCJRdWVyeVJldHJpZXZlVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNTQpXCI6e3RhZzpcIigwMDA4LDAwNTQpXCIsdnI6XCJBRVwiLG5hbWU6XCJSZXRyaWV2ZUFFVGl0bGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNTYpXCI6e3RhZzpcIigwMDA4LDAwNTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbnN0YW5jZUF2YWlsYWJpbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNTgpXCI6e3RhZzpcIigwMDA4LDAwNTgpXCIsdnI6XCJVSVwiLG5hbWU6XCJGYWlsZWRTT1BJbnN0YW5jZVVJRExpc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNjApXCI6e3RhZzpcIigwMDA4LDAwNjApXCIsdnI6XCJDU1wiLG5hbWU6XCJNb2RhbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNjEpXCI6e3RhZzpcIigwMDA4LDAwNjEpXCIsdnI6XCJDU1wiLG5hbWU6XCJNb2RhbGl0aWVzSW5TdHVkeVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA2MilcIjp7dGFnOlwiKDAwMDgsMDA2MilcIix2cjpcIlVJXCIsbmFtZTpcIlNPUENsYXNzZXNJblN0dWR5XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDY0KVwiOnt0YWc6XCIoMDAwOCwwMDY0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29udmVyc2lvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDY4KVwiOnt0YWc6XCIoMDAwOCwwMDY4KVwiLHZyOlwiQ1NcIixuYW1lOlwiUHJlc2VudGF0aW9uSW50ZW50VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwNzApXCI6e3RhZzpcIigwMDA4LDAwNzApXCIsdnI6XCJMT1wiLG5hbWU6XCJNYW51ZmFjdHVyZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDgwKVwiOnt0YWc6XCIoMDAwOCwwMDgwKVwiLHZyOlwiTE9cIixuYW1lOlwiSW5zdGl0dXRpb25OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA4MSlcIjp7dGFnOlwiKDAwMDgsMDA4MSlcIix2cjpcIlNUXCIsbmFtZTpcIkluc3RpdHV0aW9uQWRkcmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwODIpXCI6e3RhZzpcIigwMDA4LDAwODIpXCIsdnI6XCJTUVwiLG5hbWU6XCJJbnN0aXR1dGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwOTApXCI6e3RhZzpcIigwMDA4LDAwOTApXCIsdnI6XCJQTlwiLG5hbWU6XCJSZWZlcnJpbmdQaHlzaWNpYW5OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA5MilcIjp7dGFnOlwiKDAwMDgsMDA5MilcIix2cjpcIlNUXCIsbmFtZTpcIlJlZmVycmluZ1BoeXNpY2lhbkFkZHJlc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDk0KVwiOnt0YWc6XCIoMDAwOCwwMDk0KVwiLHZyOlwiU0hcIixuYW1lOlwiUmVmZXJyaW5nUGh5c2ljaWFuVGVsZXBob25lTnVtYmVyc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDA5NilcIjp7dGFnOlwiKDAwMDgsMDA5NilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVycmluZ1BoeXNpY2lhbklkZW50aWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMDlDKVwiOnt0YWc6XCIoMDAwOCwwMDlDKVwiLHZyOlwiUE5cIixuYW1lOlwiQ29uc3VsdGluZ1BoeXNpY2lhbk5hbWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAwOUQpXCI6e3RhZzpcIigwMDA4LDAwOUQpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb25zdWx0aW5nUGh5c2ljaWFuSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMDApXCI6e3RhZzpcIigwMDA4LDAxMDApXCIsdnI6XCJTSFwiLG5hbWU6XCJDb2RlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTAxKVwiOnt0YWc6XCIoMDAwOCwwMTAxKVwiLHZyOlwiTE9cIixuYW1lOlwiRXh0ZW5kZWRDb2RlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoMDAwOCwwMTAyKVwiOnt0YWc6XCIoMDAwOCwwMTAyKVwiLHZyOlwiU0hcIixuYW1lOlwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMDMpXCI6e3RhZzpcIigwMDA4LDAxMDMpXCIsdnI6XCJTSFwiLG5hbWU6XCJDb2RpbmdTY2hlbWVWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDEwNClcIjp7dGFnOlwiKDAwMDgsMDEwNClcIix2cjpcIkxPXCIsbmFtZTpcIkNvZGVNZWFuaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDEwNSlcIjp7dGFnOlwiKDAwMDgsMDEwNSlcIix2cjpcIkNTXCIsbmFtZTpcIk1hcHBpbmdSZXNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMDYpXCI6e3RhZzpcIigwMDA4LDAxMDYpXCIsdnI6XCJEVFwiLG5hbWU6XCJDb250ZXh0R3JvdXBWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDEwNylcIjp7dGFnOlwiKDAwMDgsMDEwNylcIix2cjpcIkRUXCIsbmFtZTpcIkNvbnRleHRHcm91cExvY2FsVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMDgpXCI6e3RhZzpcIigwMDA4LDAxMDgpXCIsdnI6XCJMVFwiLG5hbWU6XCJFeHRlbmRlZENvZGVNZWFuaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDAwMDgsMDEwQilcIjp7dGFnOlwiKDAwMDgsMDEwQilcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnRleHRHcm91cEV4dGVuc2lvbkZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTBDKVwiOnt0YWc6XCIoMDAwOCwwMTBDKVwiLHZyOlwiVUlcIixuYW1lOlwiQ29kaW5nU2NoZW1lVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDEwRClcIjp7dGFnOlwiKDAwMDgsMDEwRClcIix2cjpcIlVJXCIsbmFtZTpcIkNvbnRleHRHcm91cEV4dGVuc2lvbkNyZWF0b3JVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTBGKVwiOnt0YWc6XCIoMDAwOCwwMTBGKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29udGV4dElkZW50aWZpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTEwKVwiOnt0YWc6XCIoMDAwOCwwMTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29kaW5nU2NoZW1lSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMTIpXCI6e3RhZzpcIigwMDA4LDAxMTIpXCIsdnI6XCJMT1wiLG5hbWU6XCJDb2RpbmdTY2hlbWVSZWdpc3RyeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMTQpXCI6e3RhZzpcIigwMDA4LDAxMTQpXCIsdnI6XCJTVFwiLG5hbWU6XCJDb2RpbmdTY2hlbWVFeHRlcm5hbElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDExNSlcIjp7dGFnOlwiKDAwMDgsMDExNSlcIix2cjpcIlNUXCIsbmFtZTpcIkNvZGluZ1NjaGVtZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTE2KVwiOnt0YWc6XCIoMDAwOCwwMTE2KVwiLHZyOlwiU1RcIixuYW1lOlwiQ29kaW5nU2NoZW1lUmVzcG9uc2libGVPcmdhbml6YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTE3KVwiOnt0YWc6XCIoMDAwOCwwMTE3KVwiLHZyOlwiVUlcIixuYW1lOlwiQ29udGV4dFVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMTgpXCI6e3RhZzpcIigwMDA4LDAxMTgpXCIsdnI6XCJVSVwiLG5hbWU6XCJNYXBwaW5nUmVzb3VyY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTE5KVwiOnt0YWc6XCIoMDAwOCwwMTE5KVwiLHZyOlwiVUNcIixuYW1lOlwiTG9uZ0NvZGVWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAxMjApXCI6e3RhZzpcIigwMDA4LDAxMjApXCIsdnI6XCJVUlwiLG5hbWU6XCJVUk5Db2RlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMTIxKVwiOnt0YWc6XCIoMDAwOCwwMTIxKVwiLHZyOlwiU1FcIixuYW1lOlwiRXF1aXZhbGVudENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAyMDEpXCI6e3RhZzpcIigwMDA4LDAyMDEpXCIsdnI6XCJTSFwiLG5hbWU6XCJUaW1lem9uZU9mZnNldEZyb21VVENcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMzAwKVwiOnt0YWc6XCIoMDAwOCwwMzAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJpdmF0ZURhdGFFbGVtZW50Q2hhcmFjdGVyaXN0aWNzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwwMzAxKVwiOnt0YWc6XCIoMDAwOCwwMzAxKVwiLHZyOlwiVVNcIixuYW1lOlwiUHJpdmF0ZUdyb3VwUmVmZXJlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDMwMilcIjp7dGFnOlwiKDAwMDgsMDMwMilcIix2cjpcIkxPXCIsbmFtZTpcIlByaXZhdGVDcmVhdG9yUmVmZXJlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDMwMylcIjp7dGFnOlwiKDAwMDgsMDMwMylcIix2cjpcIkNTXCIsbmFtZTpcIkJsb2NrSWRlbnRpZnlpbmdJbmZvcm1hdGlvblN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAzMDQpXCI6e3RhZzpcIigwMDA4LDAzMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJOb25pZGVudGlmeWluZ1ByaXZhdGVFbGVtZW50c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDMwNSlcIjp7dGFnOlwiKDAwMDgsMDMwNSlcIix2cjpcIlNRXCIsbmFtZTpcIkRlaWRlbnRpZmljYXRpb25BY3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDAzMDYpXCI6e3RhZzpcIigwMDA4LDAzMDYpXCIsdnI6XCJVU1wiLG5hbWU6XCJJZGVudGlmeWluZ1ByaXZhdGVFbGVtZW50c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMDMwNylcIjp7dGFnOlwiKDAwMDgsMDMwNylcIix2cjpcIkNTXCIsbmFtZTpcIkRlaWRlbnRpZmljYXRpb25BY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDEwKVwiOnt0YWc6XCIoMDAwOCwxMDEwKVwiLHZyOlwiU0hcIixuYW1lOlwiU3RhdGlvbk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDMwKVwiOnt0YWc6XCIoMDAwOCwxMDMwKVwiLHZyOlwiTE9cIixuYW1lOlwiU3R1ZHlEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEwMzIpXCI6e3RhZzpcIigwMDA4LDEwMzIpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcm9jZWR1cmVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDNFKVwiOnt0YWc6XCIoMDAwOCwxMDNFKVwiLHZyOlwiTE9cIixuYW1lOlwiU2VyaWVzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDNGKVwiOnt0YWc6XCIoMDAwOCwxMDNGKVwiLHZyOlwiU1FcIixuYW1lOlwiU2VyaWVzRGVzY3JpcHRpb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDQwKVwiOnt0YWc6XCIoMDAwOCwxMDQwKVwiLHZyOlwiTE9cIixuYW1lOlwiSW5zdGl0dXRpb25hbERlcGFydG1lbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTA0OClcIjp7dGFnOlwiKDAwMDgsMTA0OClcIix2cjpcIlBOXCIsbmFtZTpcIlBoeXNpY2lhbnNPZlJlY29yZFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTA0OSlcIjp7dGFnOlwiKDAwMDgsMTA0OSlcIix2cjpcIlNRXCIsbmFtZTpcIlBoeXNpY2lhbnNPZlJlY29yZElkZW50aWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDUwKVwiOnt0YWc6XCIoMDAwOCwxMDUwKVwiLHZyOlwiUE5cIixuYW1lOlwiUGVyZm9ybWluZ1BoeXNpY2lhbk5hbWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEwNTIpXCI6e3RhZzpcIigwMDA4LDEwNTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJmb3JtaW5nUGh5c2ljaWFuSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEwNjApXCI6e3RhZzpcIigwMDA4LDEwNjApXCIsdnI6XCJQTlwiLG5hbWU6XCJOYW1lT2ZQaHlzaWNpYW5zUmVhZGluZ1N0dWR5XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDYyKVwiOnt0YWc6XCIoMDAwOCwxMDYyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGh5c2ljaWFuc1JlYWRpbmdTdHVkeUlkZW50aWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMDcwKVwiOnt0YWc6XCIoMDAwOCwxMDcwKVwiLHZyOlwiUE5cIixuYW1lOlwiT3BlcmF0b3JzTmFtZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTA3MilcIjp7dGFnOlwiKDAwMDgsMTA3MilcIix2cjpcIlNRXCIsbmFtZTpcIk9wZXJhdG9ySWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEwODApXCI6e3RhZzpcIigwMDA4LDEwODApXCIsdnI6XCJMT1wiLG5hbWU6XCJBZG1pdHRpbmdEaWFnbm9zZXNEZXNjcmlwdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTA4NClcIjp7dGFnOlwiKDAwMDgsMTA4NClcIix2cjpcIlNRXCIsbmFtZTpcIkFkbWl0dGluZ0RpYWdub3Nlc0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEwOTApXCI6e3RhZzpcIigwMDA4LDEwOTApXCIsdnI6XCJMT1wiLG5hbWU6XCJNYW51ZmFjdHVyZXJNb2RlbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTEwKVwiOnt0YWc6XCIoMDAwOCwxMTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFN0dWR5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTExKVwiOnt0YWc6XCIoMDAwOCwxMTExKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFBlcmZvcm1lZFByb2NlZHVyZVN0ZXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExMTUpXCI6e3RhZzpcIigwMDA4LDExMTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkU2VyaWVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTIwKVwiOnt0YWc6XCIoMDAwOCwxMTIwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFBhdGllbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExMjUpXCI6e3RhZzpcIigwMDA4LDExMjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkVmlzaXRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExMzQpXCI6e3RhZzpcIigwMDA4LDExMzQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkU3RlcmVvbWV0cmljSW5zdGFuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExM0EpXCI6e3RhZzpcIigwMDA4LDExM0EpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkV2F2ZWZvcm1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNDApXCI6e3RhZzpcIigwMDA4LDExNDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkSW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNEEpXCI6e3RhZzpcIigwMDA4LDExNEEpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkSW5zdGFuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNEIpXCI6e3RhZzpcIigwMDA4LDExNEIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXBwaW5nSW5zdGFuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNTApXCI6e3RhZzpcIigwMDA4LDExNTApXCIsdnI6XCJVSVwiLG5hbWU6XCJSZWZlcmVuY2VkU09QQ2xhc3NVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTU1KVwiOnt0YWc6XCIoMDAwOCwxMTU1KVwiLHZyOlwiVUlcIixuYW1lOlwiUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTE1QSlcIjp7dGFnOlwiKDAwMDgsMTE1QSlcIix2cjpcIlVJXCIsbmFtZTpcIlNPUENsYXNzZXNTdXBwb3J0ZWRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNjApXCI6e3RhZzpcIigwMDA4LDExNjApXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkRnJhbWVOdW1iZXJcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNjEpXCI6e3RhZzpcIigwMDA4LDExNjEpXCIsdnI6XCJVTFwiLG5hbWU6XCJTaW1wbGVGcmFtZUxpc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNjIpXCI6e3RhZzpcIigwMDA4LDExNjIpXCIsdnI6XCJVTFwiLG5hbWU6XCJDYWxjdWxhdGVkRnJhbWVMaXN0XCIsdm06XCIzLTNuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTE2MylcIjp7dGFnOlwiKDAwMDgsMTE2MylcIix2cjpcIkZEXCIsbmFtZTpcIlRpbWVSYW5nZVwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNjQpXCI6e3RhZzpcIigwMDA4LDExNjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJGcmFtZUV4dHJhY3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExNjcpXCI6e3RhZzpcIigwMDA4LDExNjcpXCIsdnI6XCJVSVwiLG5hbWU6XCJNdWx0aUZyYW1lU291cmNlU09QSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTkwKVwiOnt0YWc6XCIoMDAwOCwxMTkwKVwiLHZyOlwiVVJcIixuYW1lOlwiUmV0cmlldmVVUkxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTk1KVwiOnt0YWc6XCIoMDAwOCwxMTk1KVwiLHZyOlwiVUlcIixuYW1lOlwiVHJhbnNhY3Rpb25VSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwxMTk2KVwiOnt0YWc6XCIoMDAwOCwxMTk2KVwiLHZyOlwiVVNcIixuYW1lOlwiV2FybmluZ1JlYXNvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDExOTcpXCI6e3RhZzpcIigwMDA4LDExOTcpXCIsdnI6XCJVU1wiLG5hbWU6XCJGYWlsdXJlUmVhc29uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTE5OClcIjp7dGFnOlwiKDAwMDgsMTE5OClcIix2cjpcIlNRXCIsbmFtZTpcIkZhaWxlZFNPUFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTE5OSlcIjp7dGFnOlwiKDAwMDgsMTE5OSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRTT1BTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDEyMDApXCI6e3RhZzpcIigwMDA4LDEyMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJTdHVkaWVzQ29udGFpbmluZ090aGVyUmVmZXJlbmNlZEluc3RhbmNlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMTI1MClcIjp7dGFnOlwiKDAwMDgsMTI1MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlbGF0ZWRTZXJpZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDIxMTEpXCI6e3RhZzpcIigwMDA4LDIxMTEpXCIsdnI6XCJTVFwiLG5hbWU6XCJEZXJpdmF0aW9uRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTEyKVwiOnt0YWc6XCIoMDAwOCwyMTEyKVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlSW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDIxMjApXCI6e3RhZzpcIigwMDA4LDIxMjApXCIsdnI6XCJTSFwiLG5hbWU6XCJTdGFnZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTIyKVwiOnt0YWc6XCIoMDAwOCwyMTIyKVwiLHZyOlwiSVNcIixuYW1lOlwiU3RhZ2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTI0KVwiOnt0YWc6XCIoMDAwOCwyMTI0KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTdGFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTI3KVwiOnt0YWc6XCIoMDAwOCwyMTI3KVwiLHZyOlwiU0hcIixuYW1lOlwiVmlld05hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTI4KVwiOnt0YWc6XCIoMDAwOCwyMTI4KVwiLHZyOlwiSVNcIixuYW1lOlwiVmlld051bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDIxMjkpXCI6e3RhZzpcIigwMDA4LDIxMjkpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkV2ZW50VGltZXJzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjEyQSlcIjp7dGFnOlwiKDAwMDgsMjEyQSlcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mVmlld3NJblN0YWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjEzMClcIjp7dGFnOlwiKDAwMDgsMjEzMClcIix2cjpcIkRTXCIsbmFtZTpcIkV2ZW50RWxhcHNlZFRpbWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTMyKVwiOnt0YWc6XCIoMDAwOCwyMTMyKVwiLHZyOlwiTE9cIixuYW1lOlwiRXZlbnRUaW1lck5hbWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTMzKVwiOnt0YWc6XCIoMDAwOCwyMTMzKVwiLHZyOlwiU1FcIixuYW1lOlwiRXZlbnRUaW1lclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjEzNClcIjp7dGFnOlwiKDAwMDgsMjEzNClcIix2cjpcIkZEXCIsbmFtZTpcIkV2ZW50VGltZU9mZnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDIxMzUpXCI6e3RhZzpcIigwMDA4LDIxMzUpXCIsdnI6XCJTUVwiLG5hbWU6XCJFdmVudENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDIxNDIpXCI6e3RhZzpcIigwMDA4LDIxNDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJTdGFydFRyaW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTQzKVwiOnt0YWc6XCIoMDAwOCwyMTQzKVwiLHZyOlwiSVNcIixuYW1lOlwiU3RvcFRyaW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMTQ0KVwiOnt0YWc6XCIoMDAwOCwyMTQ0KVwiLHZyOlwiSVNcIixuYW1lOlwiUmVjb21tZW5kZWREaXNwbGF5RnJhbWVSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjIxOClcIjp7dGFnOlwiKDAwMDgsMjIxOClcIix2cjpcIlNRXCIsbmFtZTpcIkFuYXRvbWljUmVnaW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwyMjIwKVwiOnt0YWc6XCIoMDAwOCwyMjIwKVwiLHZyOlwiU1FcIixuYW1lOlwiQW5hdG9taWNSZWdpb25Nb2RpZmllclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjIyOClcIjp7dGFnOlwiKDAwMDgsMjIyOClcIix2cjpcIlNRXCIsbmFtZTpcIlByaW1hcnlBbmF0b21pY1N0cnVjdHVyZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjIyOSlcIjp7dGFnOlwiKDAwMDgsMjIyOSlcIix2cjpcIlNRXCIsbmFtZTpcIkFuYXRvbWljU3RydWN0dXJlU3BhY2VPclJlZ2lvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMjIzMClcIjp7dGFnOlwiKDAwMDgsMjIzMClcIix2cjpcIlNRXCIsbmFtZTpcIlByaW1hcnlBbmF0b21pY1N0cnVjdHVyZU1vZGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwzMDAxKVwiOnt0YWc6XCIoMDAwOCwzMDAxKVwiLHZyOlwiU1FcIixuYW1lOlwiQWx0ZXJuYXRlUmVwcmVzZW50YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDMwMTApXCI6e3RhZzpcIigwMDA4LDMwMTApXCIsdnI6XCJVSVwiLG5hbWU6XCJJcnJhZGlhdGlvbkV2ZW50VUlEXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCwzMDExKVwiOnt0YWc6XCIoMDAwOCwzMDExKVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlSXJyYWRpYXRpb25FdmVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsMzAxMilcIjp7dGFnOlwiKDAwMDgsMzAxMilcIix2cjpcIlVJXCIsbmFtZTpcIlJhZGlvcGhhcm1hY2V1dGljYWxBZG1pbmlzdHJhdGlvbkV2ZW50VUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTAwNylcIjp7dGFnOlwiKDAwMDgsOTAwNylcIix2cjpcIkNTXCIsbmFtZTpcIkZyYW1lVHlwZVwiLHZtOlwiNFwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDkwOTIpXCI6e3RhZzpcIigwMDA4LDkwOTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkSW1hZ2VFdmlkZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTEyMSlcIjp7dGFnOlwiKDAwMDgsOTEyMSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRSYXdEYXRhU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5MTIzKVwiOnt0YWc6XCIoMDAwOCw5MTIzKVwiLHZyOlwiVUlcIixuYW1lOlwiQ3JlYXRvclZlcnNpb25VSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5MTI0KVwiOnt0YWc6XCIoMDAwOCw5MTI0KVwiLHZyOlwiU1FcIixuYW1lOlwiRGVyaXZhdGlvbkltYWdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5MTU0KVwiOnt0YWc6XCIoMDAwOCw5MTU0KVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlSW1hZ2VFdmlkZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTIwNSlcIjp7dGFnOlwiKDAwMDgsOTIwNSlcIix2cjpcIkNTXCIsbmFtZTpcIlBpeGVsUHJlc2VudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTIwNilcIjp7dGFnOlwiKDAwMDgsOTIwNilcIix2cjpcIkNTXCIsbmFtZTpcIlZvbHVtZXRyaWNQcm9wZXJ0aWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTIwNylcIjp7dGFnOlwiKDAwMDgsOTIwNylcIix2cjpcIkNTXCIsbmFtZTpcIlZvbHVtZUJhc2VkQ2FsY3VsYXRpb25UZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5MjA4KVwiOnt0YWc6XCIoMDAwOCw5MjA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29tcGxleEltYWdlQ29tcG9uZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTIwOSlcIjp7dGFnOlwiKDAwMDgsOTIwOSlcIix2cjpcIkNTXCIsbmFtZTpcIkFjcXVpc2l0aW9uQ29udHJhc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5MjE1KVwiOnt0YWc6XCIoMDAwOCw5MjE1KVwiLHZyOlwiU1FcIixuYW1lOlwiRGVyaXZhdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDkyMzcpXCI6e3RhZzpcIigwMDA4LDkyMzcpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkUHJlc2VudGF0aW9uU3RhdGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDA4LDk0MTApXCI6e3RhZzpcIigwMDA4LDk0MTApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkT3RoZXJQbGFuZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTQ1OClcIjp7dGFnOlwiKDAwMDgsOTQ1OClcIix2cjpcIlNRXCIsbmFtZTpcIkZyYW1lRGlzcGxheVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMDgsOTQ1OSlcIjp7dGFnOlwiKDAwMDgsOTQ1OSlcIix2cjpcIkZMXCIsbmFtZTpcIlJlY29tbWVuZGVkRGlzcGxheUZyYW1lUmF0ZUluRmxvYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAwOCw5NDYwKVwiOnt0YWc6XCIoMDAwOCw5NDYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiU2tpcEZyYW1lUmFuZ2VGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMDAxMClcIjp7dGFnOlwiKDAwMTAsMDAxMClcIix2cjpcIlBOXCIsbmFtZTpcIlBhdGllbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMDAyMClcIjp7dGFnOlwiKDAwMTAsMDAyMClcIix2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDAwMjEpXCI6e3RhZzpcIigwMDEwLDAwMjEpXCIsdnI6XCJMT1wiLG5hbWU6XCJJc3N1ZXJPZlBhdGllbnRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDAwMjIpXCI6e3RhZzpcIigwMDEwLDAwMjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJUeXBlT2ZQYXRpZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwwMDI0KVwiOnt0YWc6XCIoMDAxMCwwMDI0KVwiLHZyOlwiU1FcIixuYW1lOlwiSXNzdWVyT2ZQYXRpZW50SURRdWFsaWZpZXJzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwwMDMwKVwiOnt0YWc6XCIoMDAxMCwwMDMwKVwiLHZyOlwiREFcIixuYW1lOlwiUGF0aWVudEJpcnRoRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDAwMzIpXCI6e3RhZzpcIigwMDEwLDAwMzIpXCIsdnI6XCJUTVwiLG5hbWU6XCJQYXRpZW50QmlydGhUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMDA0MClcIjp7dGFnOlwiKDAwMTAsMDA0MClcIix2cjpcIkNTXCIsbmFtZTpcIlBhdGllbnRTZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwwMDUwKVwiOnt0YWc6XCIoMDAxMCwwMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudEluc3VyYW5jZVBsYW5Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwwMTAxKVwiOnt0YWc6XCIoMDAxMCwwMTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudFByaW1hcnlMYW5ndWFnZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDAxMDIpXCI6e3RhZzpcIigwMDEwLDAxMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJQYXRpZW50UHJpbWFyeUxhbmd1YWdlTW9kaWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwwMjAwKVwiOnt0YWc6XCIoMDAxMCwwMjAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUXVhbGl0eUNvbnRyb2xTdWJqZWN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMDIwMSlcIjp7dGFnOlwiKDAwMTAsMDIwMSlcIix2cjpcIlNRXCIsbmFtZTpcIlF1YWxpdHlDb250cm9sU3ViamVjdFR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDAwKVwiOnt0YWc6XCIoMDAxMCwxMDAwKVwiLHZyOlwiTE9cIixuYW1lOlwiT3RoZXJQYXRpZW50SURzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDAxKVwiOnt0YWc6XCIoMDAxMCwxMDAxKVwiLHZyOlwiUE5cIixuYW1lOlwiT3RoZXJQYXRpZW50TmFtZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDEwMDIpXCI6e3RhZzpcIigwMDEwLDEwMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJPdGhlclBhdGllbnRJRHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDEwMDUpXCI6e3RhZzpcIigwMDEwLDEwMDUpXCIsdnI6XCJQTlwiLG5hbWU6XCJQYXRpZW50QmlydGhOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMTAxMClcIjp7dGFnOlwiKDAwMTAsMTAxMClcIix2cjpcIkFTXCIsbmFtZTpcIlBhdGllbnRBZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDIwKVwiOnt0YWc6XCIoMDAxMCwxMDIwKVwiLHZyOlwiRFNcIixuYW1lOlwiUGF0aWVudFNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDIxKVwiOnt0YWc6XCIoMDAxMCwxMDIxKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudFNpemVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDMwKVwiOnt0YWc6XCIoMDAxMCwxMDMwKVwiLHZyOlwiRFNcIixuYW1lOlwiUGF0aWVudFdlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDEwNDApXCI6e3RhZzpcIigwMDEwLDEwNDApXCIsdnI6XCJMT1wiLG5hbWU6XCJQYXRpZW50QWRkcmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDEwNjApXCI6e3RhZzpcIigwMDEwLDEwNjApXCIsdnI6XCJQTlwiLG5hbWU6XCJQYXRpZW50TW90aGVyQmlydGhOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMTA4MClcIjp7dGFnOlwiKDAwMTAsMTA4MClcIix2cjpcIkxPXCIsbmFtZTpcIk1pbGl0YXJ5UmFua1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDEwODEpXCI6e3RhZzpcIigwMDEwLDEwODEpXCIsdnI6XCJMT1wiLG5hbWU6XCJCcmFuY2hPZlNlcnZpY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMDkwKVwiOnt0YWc6XCIoMDAxMCwxMDkwKVwiLHZyOlwiTE9cIixuYW1lOlwiTWVkaWNhbFJlY29yZExvY2F0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwxMTAwKVwiOnt0YWc6XCIoMDAxMCwxMTAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFBhdGllbnRQaG90b1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjAwMClcIjp7dGFnOlwiKDAwMTAsMjAwMClcIix2cjpcIkxPXCIsbmFtZTpcIk1lZGljYWxBbGVydHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIxMTApXCI6e3RhZzpcIigwMDEwLDIxMTApXCIsdnI6XCJMT1wiLG5hbWU6XCJBbGxlcmdpZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIxNTApXCI6e3RhZzpcIigwMDEwLDIxNTApXCIsdnI6XCJMT1wiLG5hbWU6XCJDb3VudHJ5T2ZSZXNpZGVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMTUyKVwiOnt0YWc6XCIoMDAxMCwyMTUyKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVnaW9uT2ZSZXNpZGVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMTU0KVwiOnt0YWc6XCIoMDAxMCwyMTU0KVwiLHZyOlwiU0hcIixuYW1lOlwiUGF0aWVudFRlbGVwaG9uZU51bWJlcnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIxNTUpXCI6e3RhZzpcIigwMDEwLDIxNTUpXCIsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50VGVsZWNvbUluZm9ybWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjE2MClcIjp7dGFnOlwiKDAwMTAsMjE2MClcIix2cjpcIlNIXCIsbmFtZTpcIkV0aG5pY0dyb3VwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjE4MClcIjp7dGFnOlwiKDAwMTAsMjE4MClcIix2cjpcIlNIXCIsbmFtZTpcIk9jY3VwYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMUEwKVwiOnt0YWc6XCIoMDAxMCwyMUEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiU21va2luZ1N0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIxQjApXCI6e3RhZzpcIigwMDEwLDIxQjApXCIsdnI6XCJMVFwiLG5hbWU6XCJBZGRpdGlvbmFsUGF0aWVudEhpc3RvcnlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMUMwKVwiOnt0YWc6XCIoMDAxMCwyMUMwKVwiLHZyOlwiVVNcIixuYW1lOlwiUHJlZ25hbmN5U3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjFEMClcIjp7dGFnOlwiKDAwMTAsMjFEMClcIix2cjpcIkRBXCIsbmFtZTpcIkxhc3RNZW5zdHJ1YWxEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjFGMClcIjp7dGFnOlwiKDAwMTAsMjFGMClcIix2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRSZWxpZ2lvdXNQcmVmZXJlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjIwMSlcIjp7dGFnOlwiKDAwMTAsMjIwMSlcIix2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRTcGVjaWVzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjAyKVwiOnt0YWc6XCIoMDAxMCwyMjAyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudFNwZWNpZXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjAzKVwiOnt0YWc6XCIoMDAxMCwyMjAzKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGF0aWVudFNleE5ldXRlcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjIxMClcIjp7dGFnOlwiKDAwMTAsMjIxMClcIix2cjpcIkNTXCIsbmFtZTpcIkFuYXRvbWljYWxPcmllbnRhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjkyKVwiOnt0YWc6XCIoMDAxMCwyMjkyKVwiLHZyOlwiTE9cIixuYW1lOlwiUGF0aWVudEJyZWVkRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjkzKVwiOnt0YWc6XCIoMDAxMCwyMjkzKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudEJyZWVkQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsMjI5NClcIjp7dGFnOlwiKDAwMTAsMjI5NClcIix2cjpcIlNRXCIsbmFtZTpcIkJyZWVkUmVnaXN0cmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjk1KVwiOnt0YWc6XCIoMDAxMCwyMjk1KVwiLHZyOlwiTE9cIixuYW1lOlwiQnJlZWRSZWdpc3RyYXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjk2KVwiOnt0YWc6XCIoMDAxMCwyMjk2KVwiLHZyOlwiU1FcIixuYW1lOlwiQnJlZWRSZWdpc3RyeUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIyOTcpXCI6e3RhZzpcIigwMDEwLDIyOTcpXCIsdnI6XCJQTlwiLG5hbWU6XCJSZXNwb25zaWJsZVBlcnNvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEwLDIyOTgpXCI6e3RhZzpcIigwMDEwLDIyOTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXNwb25zaWJsZVBlcnNvblJvbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCwyMjk5KVwiOnt0YWc6XCIoMDAxMCwyMjk5KVwiLHZyOlwiTE9cIixuYW1lOlwiUmVzcG9uc2libGVPcmdhbml6YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMCw0MDAwKVwiOnt0YWc6XCIoMDAxMCw0MDAwKVwiLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudENvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTAsOTQzMSlcIjp7dGFnOlwiKDAwMTAsOTQzMSlcIix2cjpcIkZMXCIsbmFtZTpcIkV4YW1pbmVkQm9keVRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwMTApXCI6e3RhZzpcIigwMDEyLDAwMTApXCIsdnI6XCJMT1wiLG5hbWU6XCJDbGluaWNhbFRyaWFsU3BvbnNvck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDIwKVwiOnt0YWc6XCIoMDAxMiwwMDIwKVwiLHZyOlwiTE9cIixuYW1lOlwiQ2xpbmljYWxUcmlhbFByb3RvY29sSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDIxKVwiOnt0YWc6XCIoMDAxMiwwMDIxKVwiLHZyOlwiTE9cIixuYW1lOlwiQ2xpbmljYWxUcmlhbFByb3RvY29sTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwMzApXCI6e3RhZzpcIigwMDEyLDAwMzApXCIsdnI6XCJMT1wiLG5hbWU6XCJDbGluaWNhbFRyaWFsU2l0ZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTIsMDAzMSlcIjp7dGFnOlwiKDAwMTIsMDAzMSlcIix2cjpcIkxPXCIsbmFtZTpcIkNsaW5pY2FsVHJpYWxTaXRlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwNDApXCI6e3RhZzpcIigwMDEyLDAwNDApXCIsdnI6XCJMT1wiLG5hbWU6XCJDbGluaWNhbFRyaWFsU3ViamVjdElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTIsMDA0MilcIjp7dGFnOlwiKDAwMTIsMDA0MilcIix2cjpcIkxPXCIsbmFtZTpcIkNsaW5pY2FsVHJpYWxTdWJqZWN0UmVhZGluZ0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTIsMDA1MClcIjp7dGFnOlwiKDAwMTIsMDA1MClcIix2cjpcIkxPXCIsbmFtZTpcIkNsaW5pY2FsVHJpYWxUaW1lUG9pbnRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwNTEpXCI6e3RhZzpcIigwMDEyLDAwNTEpXCIsdnI6XCJTVFwiLG5hbWU6XCJDbGluaWNhbFRyaWFsVGltZVBvaW50RGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDYwKVwiOnt0YWc6XCIoMDAxMiwwMDYwKVwiLHZyOlwiTE9cIixuYW1lOlwiQ2xpbmljYWxUcmlhbENvb3JkaW5hdGluZ0NlbnRlck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDYyKVwiOnt0YWc6XCIoMDAxMiwwMDYyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGF0aWVudElkZW50aXR5UmVtb3ZlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwNjMpXCI6e3RhZzpcIigwMDEyLDAwNjMpXCIsdnI6XCJMT1wiLG5hbWU6XCJEZWlkZW50aWZpY2F0aW9uTWV0aG9kXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDY0KVwiOnt0YWc6XCIoMDAxMiwwMDY0KVwiLHZyOlwiU1FcIixuYW1lOlwiRGVpZGVudGlmaWNhdGlvbk1ldGhvZENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwNzEpXCI6e3RhZzpcIigwMDEyLDAwNzEpXCIsdnI6XCJMT1wiLG5hbWU6XCJDbGluaWNhbFRyaWFsU2VyaWVzSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDcyKVwiOnt0YWc6XCIoMDAxMiwwMDcyKVwiLHZyOlwiTE9cIixuYW1lOlwiQ2xpbmljYWxUcmlhbFNlcmllc0Rlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTIsMDA4MSlcIjp7dGFnOlwiKDAwMTIsMDA4MSlcIix2cjpcIkxPXCIsbmFtZTpcIkNsaW5pY2FsVHJpYWxQcm90b2NvbEV0aGljc0NvbW1pdHRlZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDgyKVwiOnt0YWc6XCIoMDAxMiwwMDgyKVwiLHZyOlwiTE9cIixuYW1lOlwiQ2xpbmljYWxUcmlhbFByb3RvY29sRXRoaWNzQ29tbWl0dGVlQXBwcm92YWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxMiwwMDgzKVwiOnt0YWc6XCIoMDAxMiwwMDgzKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29uc2VudEZvckNsaW5pY2FsVHJpYWxVc2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDEyLDAwODQpXCI6e3RhZzpcIigwMDEyLDAwODQpXCIsdnI6XCJDU1wiLG5hbWU6XCJEaXN0cmlidXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTIsMDA4NSlcIjp7dGFnOlwiKDAwMTIsMDA4NSlcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnNlbnRGb3JEaXN0cmlidXRpb25GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTQsMDAyNSlcIjp7dGFnOlwiKDAwMTQsMDAyNSlcIix2cjpcIlNUXCIsbmFtZTpcIkNvbXBvbmVudE1hbnVmYWN0dXJpbmdQcm9jZWR1cmVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMDAyOClcIjp7dGFnOlwiKDAwMTQsMDAyOClcIix2cjpcIlNUXCIsbmFtZTpcIkNvbXBvbmVudE1hbnVmYWN0dXJlclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwwMDMwKVwiOnt0YWc6XCIoMDAxNCwwMDMwKVwiLHZyOlwiRFNcIixuYW1lOlwiTWF0ZXJpYWxUaGlja25lc3NcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMDAzMilcIjp7dGFnOlwiKDAwMTQsMDAzMilcIix2cjpcIkRTXCIsbmFtZTpcIk1hdGVyaWFsUGlwZURpYW1ldGVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDAwMzQpXCI6e3RhZzpcIigwMDE0LDAwMzQpXCIsdnI6XCJEU1wiLG5hbWU6XCJNYXRlcmlhbElzb2xhdGlvbkRpYW1ldGVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDAwNDIpXCI6e3RhZzpcIigwMDE0LDAwNDIpXCIsdnI6XCJTVFwiLG5hbWU6XCJNYXRlcmlhbEdyYWRlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDAwNDQpXCI6e3RhZzpcIigwMDE0LDAwNDQpXCIsdnI6XCJTVFwiLG5hbWU6XCJNYXRlcmlhbFByb3BlcnRpZXNEZXNjcmlwdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwwMDQ2KVwiOnt0YWc6XCIoMDAxNCwwMDQ2KVwiLHZyOlwiTFRcIixuYW1lOlwiTWF0ZXJpYWxOb3Rlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMDA1MClcIjp7dGFnOlwiKDAwMTQsMDA1MClcIix2cjpcIkNTXCIsbmFtZTpcIkNvbXBvbmVudFNoYXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwwMDUyKVwiOnt0YWc6XCIoMDAxNCwwMDUyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ3VydmF0dXJlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMDA1NClcIjp7dGFnOlwiKDAwMTQsMDA1NClcIix2cjpcIkRTXCIsbmFtZTpcIk91dGVyRGlhbWV0ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDAwNTYpXCI6e3RhZzpcIigwMDE0LDAwNTYpXCIsdnI6XCJEU1wiLG5hbWU6XCJJbm5lckRpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwxMDEwKVwiOnt0YWc6XCIoMDAxNCwxMDEwKVwiLHZyOlwiU1RcIixuYW1lOlwiQWN0dWFsRW52aXJvbm1lbnRhbENvbmRpdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDEwMjApXCI6e3RhZzpcIigwMDE0LDEwMjApXCIsdnI6XCJEQVwiLG5hbWU6XCJFeHBpcnlEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwxMDQwKVwiOnt0YWc6XCIoMDAxNCwxMDQwKVwiLHZyOlwiU1RcIixuYW1lOlwiRW52aXJvbm1lbnRhbENvbmRpdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIwMDIpXCI6e3RhZzpcIigwMDE0LDIwMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJFdmFsdWF0b3JTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjAwNClcIjp7dGFnOlwiKDAwMTQsMjAwNClcIix2cjpcIklTXCIsbmFtZTpcIkV2YWx1YXRvck51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjAwNilcIjp7dGFnOlwiKDAwMTQsMjAwNilcIix2cjpcIlBOXCIsbmFtZTpcIkV2YWx1YXRvck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIwMDgpXCI6e3RhZzpcIigwMDE0LDIwMDgpXCIsdnI6XCJJU1wiLG5hbWU6XCJFdmFsdWF0aW9uQXR0ZW1wdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjAxMilcIjp7dGFnOlwiKDAwMTQsMjAxMilcIix2cjpcIlNRXCIsbmFtZTpcIkluZGljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjAxNClcIjp7dGFnOlwiKDAwMTQsMjAxNClcIix2cjpcIklTXCIsbmFtZTpcIkluZGljYXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIwMTYpXCI6e3RhZzpcIigwMDE0LDIwMTYpXCIsdnI6XCJTSFwiLG5hbWU6XCJJbmRpY2F0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIwMTgpXCI6e3RhZzpcIigwMDE0LDIwMTgpXCIsdnI6XCJTVFwiLG5hbWU6XCJJbmRpY2F0aW9uRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIwMUEpXCI6e3RhZzpcIigwMDE0LDIwMUEpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbmRpY2F0aW9uVHlwZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMDFDKVwiOnt0YWc6XCIoMDAxNCwyMDFDKVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5kaWNhdGlvbkRpc3Bvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMDFFKVwiOnt0YWc6XCIoMDAxNCwyMDFFKVwiLHZyOlwiU1FcIixuYW1lOlwiSW5kaWNhdGlvblJPSVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMDMwKVwiOnt0YWc6XCIoMDAxNCwyMDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiSW5kaWNhdGlvblBoeXNpY2FsUHJvcGVydHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjAzMilcIjp7dGFnOlwiKDAwMTQsMjAzMilcIix2cjpcIlNIXCIsbmFtZTpcIlByb3BlcnR5TGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIyMDIpXCI6e3RhZzpcIigwMDE0LDIyMDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJDb29yZGluYXRlU3lzdGVtTnVtYmVyT2ZBeGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMjA0KVwiOnt0YWc6XCIoMDAxNCwyMjA0KVwiLHZyOlwiU1FcIixuYW1lOlwiQ29vcmRpbmF0ZVN5c3RlbUF4ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIwNilcIjp7dGFnOlwiKDAwMTQsMjIwNilcIix2cjpcIlNUXCIsbmFtZTpcIkNvb3JkaW5hdGVTeXN0ZW1BeGlzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIyMDgpXCI6e3RhZzpcIigwMDE0LDIyMDgpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb29yZGluYXRlU3lzdGVtRGF0YVNldE1hcHBpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIyMEEpXCI6e3RhZzpcIigwMDE0LDIyMEEpXCIsdnI6XCJJU1wiLG5hbWU6XCJDb29yZGluYXRlU3lzdGVtQXhpc051bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIwQylcIjp7dGFnOlwiKDAwMTQsMjIwQylcIix2cjpcIkNTXCIsbmFtZTpcIkNvb3JkaW5hdGVTeXN0ZW1BeGlzVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIwRSlcIjp7dGFnOlwiKDAwMTQsMjIwRSlcIix2cjpcIkNTXCIsbmFtZTpcIkNvb3JkaW5hdGVTeXN0ZW1BeGlzVW5pdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDIyMTApXCI6e3RhZzpcIigwMDE0LDIyMTApXCIsdnI6XCJPQlwiLG5hbWU6XCJDb29yZGluYXRlU3lzdGVtQXhpc1ZhbHVlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIyMClcIjp7dGFnOlwiKDAwMTQsMjIyMClcIix2cjpcIlNRXCIsbmFtZTpcIkNvb3JkaW5hdGVTeXN0ZW1UcmFuc2Zvcm1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIyMilcIjp7dGFnOlwiKDAwMTQsMjIyMilcIix2cjpcIlNUXCIsbmFtZTpcIlRyYW5zZm9ybURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMjI0KVwiOnt0YWc6XCIoMDAxNCwyMjI0KVwiLHZyOlwiSVNcIixuYW1lOlwiVHJhbnNmb3JtTnVtYmVyT2ZBeGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMjI2KVwiOnt0YWc6XCIoMDAxNCwyMjI2KVwiLHZyOlwiSVNcIixuYW1lOlwiVHJhbnNmb3JtT3JkZXJPZkF4ZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIyOClcIjp7dGFnOlwiKDAwMTQsMjIyOClcIix2cjpcIkNTXCIsbmFtZTpcIlRyYW5zZm9ybWVkQXhpc1VuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwyMjJBKVwiOnt0YWc6XCIoMDAxNCwyMjJBKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29vcmRpbmF0ZVN5c3RlbVRyYW5zZm9ybVJvdGF0aW9uQW5kU2NhbGVNYXRyaXhcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMjIyQylcIjp7dGFnOlwiKDAwMTQsMjIyQylcIix2cjpcIkRTXCIsbmFtZTpcIkNvb3JkaW5hdGVTeXN0ZW1UcmFuc2Zvcm1UcmFuc2xhdGlvbk1hdHJpeFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDExKVwiOnt0YWc6XCIoMDAxNCwzMDExKVwiLHZyOlwiRFNcIixuYW1lOlwiSW50ZXJuYWxEZXRlY3RvckZyYW1lVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMzAxMilcIjp7dGFnOlwiKDAwMTQsMzAxMilcIix2cjpcIkRTXCIsbmFtZTpcIk51bWJlck9mRnJhbWVzSW50ZWdyYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMzAyMClcIjp7dGFnOlwiKDAwMTQsMzAyMClcIix2cjpcIlNRXCIsbmFtZTpcIkRldGVjdG9yVGVtcGVyYXR1cmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMzAyMilcIjp7dGFnOlwiKDAwMTQsMzAyMilcIix2cjpcIlNUXCIsbmFtZTpcIlNlbnNvck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwMjQpXCI6e3RhZzpcIigwMDE0LDMwMjQpXCIsdnI6XCJEU1wiLG5hbWU6XCJIb3Jpem9udGFsT2Zmc2V0T2ZTZW5zb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwMjYpXCI6e3RhZzpcIigwMDE0LDMwMjYpXCIsdnI6XCJEU1wiLG5hbWU6XCJWZXJ0aWNhbE9mZnNldE9mU2Vuc29yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDI4KVwiOnt0YWc6XCIoMDAxNCwzMDI4KVwiLHZyOlwiRFNcIixuYW1lOlwiU2Vuc29yVGVtcGVyYXR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNDApXCI6e3RhZzpcIigwMDE0LDMwNDApXCIsdnI6XCJTUVwiLG5hbWU6XCJEYXJrQ3VycmVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDUwKVwiOnt0YWc6XCIoMDAxNCwzMDUwKVwiLHZyOlwib3hcIixuYW1lOlwiRGFya0N1cnJlbnRDb3VudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNjApXCI6e3RhZzpcIigwMDE0LDMwNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJHYWluQ29ycmVjdGlvblJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDcwKVwiOnt0YWc6XCIoMDAxNCwzMDcwKVwiLHZyOlwib3hcIixuYW1lOlwiQWlyQ291bnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDcxKVwiOnt0YWc6XCIoMDAxNCwzMDcxKVwiLHZyOlwiRFNcIixuYW1lOlwiS1ZVc2VkSW5HYWluQ2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNzIpXCI6e3RhZzpcIigwMDE0LDMwNzIpXCIsdnI6XCJEU1wiLG5hbWU6XCJNQVVzZWRJbkdhaW5DYWxpYnJhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsMzA3MylcIjp7dGFnOlwiKDAwMTQsMzA3MylcIix2cjpcIkRTXCIsbmFtZTpcIk51bWJlck9mRnJhbWVzVXNlZEZvckludGVncmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDc0KVwiOnt0YWc6XCIoMDAxNCwzMDc0KVwiLHZyOlwiTE9cIixuYW1lOlwiRmlsdGVyTWF0ZXJpYWxVc2VkSW5HYWluQ2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNzUpXCI6e3RhZzpcIigwMDE0LDMwNzUpXCIsdnI6XCJEU1wiLG5hbWU6XCJGaWx0ZXJUaGlja25lc3NVc2VkSW5HYWluQ2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNzYpXCI6e3RhZzpcIigwMDE0LDMwNzYpXCIsdnI6XCJEQVwiLG5hbWU6XCJEYXRlT2ZHYWluQ2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwNzcpXCI6e3RhZzpcIigwMDE0LDMwNzcpXCIsdnI6XCJUTVwiLG5hbWU6XCJUaW1lT2ZHYWluQ2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDMwODApXCI6e3RhZzpcIigwMDE0LDMwODApXCIsdnI6XCJPQlwiLG5hbWU6XCJCYWRQaXhlbEltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCwzMDk5KVwiOnt0YWc6XCIoMDAxNCwzMDk5KVwiLHZyOlwiTFRcIixuYW1lOlwiQ2FsaWJyYXRpb25Ob3Rlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAwMilcIjp7dGFnOlwiKDAwMTQsNDAwMilcIix2cjpcIlNRXCIsbmFtZTpcIlB1bHNlckVxdWlwbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDA0KVwiOnt0YWc6XCIoMDAxNCw0MDA0KVwiLHZyOlwiQ1NcIixuYW1lOlwiUHVsc2VyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAwNilcIjp7dGFnOlwiKDAwMTQsNDAwNilcIix2cjpcIkxUXCIsbmFtZTpcIlB1bHNlck5vdGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDA4KVwiOnt0YWc6XCIoMDAxNCw0MDA4KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjZWl2ZXJFcXVpcG1lbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAwQSlcIjp7dGFnOlwiKDAwMTQsNDAwQSlcIix2cjpcIkNTXCIsbmFtZTpcIkFtcGxpZmllclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMEMpXCI6e3RhZzpcIigwMDE0LDQwMEMpXCIsdnI6XCJMVFwiLG5hbWU6XCJSZWNlaXZlck5vdGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDBFKVwiOnt0YWc6XCIoMDAxNCw0MDBFKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJlQW1wbGlmaWVyRXF1aXBtZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMEYpXCI6e3RhZzpcIigwMDE0LDQwMEYpXCIsdnI6XCJMVFwiLG5hbWU6XCJQcmVBbXBsaWZpZXJOb3Rlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAxMClcIjp7dGFnOlwiKDAwMTQsNDAxMClcIix2cjpcIlNRXCIsbmFtZTpcIlRyYW5zbWl0VHJhbnNkdWNlclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDExKVwiOnt0YWc6XCIoMDAxNCw0MDExKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjZWl2ZVRyYW5zZHVjZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAxMilcIjp7dGFnOlwiKDAwMTQsNDAxMilcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mRWxlbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMTMpXCI6e3RhZzpcIigwMDE0LDQwMTMpXCIsdnI6XCJDU1wiLG5hbWU6XCJFbGVtZW50U2hhcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMTQpXCI6e3RhZzpcIigwMDE0LDQwMTQpXCIsdnI6XCJEU1wiLG5hbWU6XCJFbGVtZW50RGltZW5zaW9uQVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAxNSlcIjp7dGFnOlwiKDAwMTQsNDAxNSlcIix2cjpcIkRTXCIsbmFtZTpcIkVsZW1lbnREaW1lbnNpb25CXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDE2KVwiOnt0YWc6XCIoMDAxNCw0MDE2KVwiLHZyOlwiRFNcIixuYW1lOlwiRWxlbWVudFBpdGNoQVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAxNylcIjp7dGFnOlwiKDAwMTQsNDAxNylcIix2cjpcIkRTXCIsbmFtZTpcIk1lYXN1cmVkQmVhbURpbWVuc2lvbkFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMTgpXCI6e3RhZzpcIigwMDE0LDQwMTgpXCIsdnI6XCJEU1wiLG5hbWU6XCJNZWFzdXJlZEJlYW1EaW1lbnNpb25CXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDE5KVwiOnt0YWc6XCIoMDAxNCw0MDE5KVwiLHZyOlwiRFNcIixuYW1lOlwiTG9jYXRpb25PZk1lYXN1cmVkQmVhbURpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDFBKVwiOnt0YWc6XCIoMDAxNCw0MDFBKVwiLHZyOlwiRFNcIixuYW1lOlwiTm9taW5hbEZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAxQilcIjp7dGFnOlwiKDAwMTQsNDAxQilcIix2cjpcIkRTXCIsbmFtZTpcIk1lYXN1cmVkQ2VudGVyRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDFDKVwiOnt0YWc6XCIoMDAxNCw0MDFDKVwiLHZyOlwiRFNcIixuYW1lOlwiTWVhc3VyZWRCYW5kd2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMUQpXCI6e3RhZzpcIigwMDE0LDQwMUQpXCIsdnI6XCJEU1wiLG5hbWU6XCJFbGVtZW50UGl0Y2hCXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDIwKVwiOnt0YWc6XCIoMDAxNCw0MDIwKVwiLHZyOlwiU1FcIixuYW1lOlwiUHVsc2VyU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAyMilcIjp7dGFnOlwiKDAwMTQsNDAyMilcIix2cjpcIkRTXCIsbmFtZTpcIlB1bHNlV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMjQpXCI6e3RhZzpcIigwMDE0LDQwMjQpXCIsdnI6XCJEU1wiLG5hbWU6XCJFeGNpdGF0aW9uRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDI2KVwiOnt0YWc6XCIoMDAxNCw0MDI2KVwiLHZyOlwiQ1NcIixuYW1lOlwiTW9kdWxhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMjgpXCI6e3RhZzpcIigwMDE0LDQwMjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJEYW1waW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDMwKVwiOnt0YWc6XCIoMDAxNCw0MDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjZWl2ZXJTZXR0aW5nc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDMxKVwiOnt0YWc6XCIoMDAxNCw0MDMxKVwiLHZyOlwiRFNcIixuYW1lOlwiQWNxdWlyZWRTb3VuZHBhdGhMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwMzIpXCI6e3RhZzpcIigwMDE0LDQwMzIpXCIsdnI6XCJDU1wiLG5hbWU6XCJBY3F1aXNpdGlvbkNvbXByZXNzaW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzMylcIjp7dGFnOlwiKDAwMTQsNDAzMylcIix2cjpcIklTXCIsbmFtZTpcIkFjcXVpc2l0aW9uU2FtcGxlU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzNClcIjp7dGFnOlwiKDAwMTQsNDAzNClcIix2cjpcIkRTXCIsbmFtZTpcIlJlY3RpZmllclNtb290aGluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzNSlcIjp7dGFnOlwiKDAwMTQsNDAzNSlcIix2cjpcIlNRXCIsbmFtZTpcIkRBQ1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDM2KVwiOnt0YWc6XCIoMDAxNCw0MDM2KVwiLHZyOlwiQ1NcIixuYW1lOlwiREFDVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzOClcIjp7dGFnOlwiKDAwMTQsNDAzOClcIix2cjpcIkRTXCIsbmFtZTpcIkRBQ0dhaW5Qb2ludHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzQSlcIjp7dGFnOlwiKDAwMTQsNDAzQSlcIix2cjpcIkRTXCIsbmFtZTpcIkRBQ1RpbWVQb2ludHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDAzQylcIjp7dGFnOlwiKDAwMTQsNDAzQylcIix2cjpcIkRTXCIsbmFtZTpcIkRBQ0FtcGxpdHVkZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDQwKVwiOnt0YWc6XCIoMDAxNCw0MDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJlQW1wbGlmaWVyU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA1MClcIjp7dGFnOlwiKDAwMTQsNDA1MClcIix2cjpcIlNRXCIsbmFtZTpcIlRyYW5zbWl0VHJhbnNkdWNlclNldHRpbmdzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNTEpXCI6e3RhZzpcIigwMDE0LDQwNTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWNlaXZlVHJhbnNkdWNlclNldHRpbmdzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNTIpXCI6e3RhZzpcIigwMDE0LDQwNTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJJbmNpZGVudEFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDU0KVwiOnt0YWc6XCIoMDAxNCw0MDU0KVwiLHZyOlwiU1RcIixuYW1lOlwiQ291cGxpbmdUZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNTYpXCI6e3RhZzpcIigwMDE0LDQwNTYpXCIsdnI6XCJTVFwiLG5hbWU6XCJDb3VwbGluZ01lZGl1bVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA1NylcIjp7dGFnOlwiKDAwMTQsNDA1NylcIix2cjpcIkRTXCIsbmFtZTpcIkNvdXBsaW5nVmVsb2NpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNTgpXCI6e3RhZzpcIigwMDE0LDQwNTgpXCIsdnI6XCJEU1wiLG5hbWU6XCJQcm9iZUNlbnRlckxvY2F0aW9uWFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA1OSlcIjp7dGFnOlwiKDAwMTQsNDA1OSlcIix2cjpcIkRTXCIsbmFtZTpcIlByb2JlQ2VudGVyTG9jYXRpb25aXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDVBKVwiOnt0YWc6XCIoMDAxNCw0MDVBKVwiLHZyOlwiRFNcIixuYW1lOlwiU291bmRQYXRoTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDVDKVwiOnt0YWc6XCIoMDAxNCw0MDVDKVwiLHZyOlwiU1RcIixuYW1lOlwiRGVsYXlMYXdJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDYwKVwiOnt0YWc6XCIoMDAxNCw0MDYwKVwiLHZyOlwiU1FcIixuYW1lOlwiR2F0ZVNldHRpbmdzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNjIpXCI6e3RhZzpcIigwMDE0LDQwNjIpXCIsdnI6XCJEU1wiLG5hbWU6XCJHYXRlVGhyZXNob2xkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDY0KVwiOnt0YWc6XCIoMDAxNCw0MDY0KVwiLHZyOlwiRFNcIixuYW1lOlwiVmVsb2NpdHlPZlNvdW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDcwKVwiOnt0YWc6XCIoMDAxNCw0MDcwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ2FsaWJyYXRpb25TZXR0aW5nc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDcyKVwiOnt0YWc6XCIoMDAxNCw0MDcyKVwiLHZyOlwiU1RcIixuYW1lOlwiQ2FsaWJyYXRpb25Qcm9jZWR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwNzQpXCI6e3RhZzpcIigwMDE0LDQwNzQpXCIsdnI6XCJTSFwiLG5hbWU6XCJQcm9jZWR1cmVWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDc2KVwiOnt0YWc6XCIoMDAxNCw0MDc2KVwiLHZyOlwiREFcIixuYW1lOlwiUHJvY2VkdXJlQ3JlYXRpb25EYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDc4KVwiOnt0YWc6XCIoMDAxNCw0MDc4KVwiLHZyOlwiREFcIixuYW1lOlwiUHJvY2VkdXJlRXhwaXJhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwN0EpXCI6e3RhZzpcIigwMDE0LDQwN0EpXCIsdnI6XCJEQVwiLG5hbWU6XCJQcm9jZWR1cmVMYXN0TW9kaWZpZWREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDdDKVwiOnt0YWc6XCIoMDAxNCw0MDdDKVwiLHZyOlwiVE1cIixuYW1lOlwiQ2FsaWJyYXRpb25UaW1lXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwN0UpXCI6e3RhZzpcIigwMDE0LDQwN0UpXCIsdnI6XCJEQVwiLG5hbWU6XCJDYWxpYnJhdGlvbkRhdGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4MClcIjp7dGFnOlwiKDAwMTQsNDA4MClcIix2cjpcIlNRXCIsbmFtZTpcIlByb2JlRHJpdmVFcXVpcG1lbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4MSlcIjp7dGFnOlwiKDAwMTQsNDA4MSlcIix2cjpcIkNTXCIsbmFtZTpcIkRyaXZlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4MilcIjp7dGFnOlwiKDAwMTQsNDA4MilcIix2cjpcIkxUXCIsbmFtZTpcIlByb2JlRHJpdmVOb3Rlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4MylcIjp7dGFnOlwiKDAwMTQsNDA4MylcIix2cjpcIlNRXCIsbmFtZTpcIkRyaXZlUHJvYmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4NClcIjp7dGFnOlwiKDAwMTQsNDA4NClcIix2cjpcIkRTXCIsbmFtZTpcIlByb2JlSW5kdWN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4NSlcIjp7dGFnOlwiKDAwMTQsNDA4NSlcIix2cjpcIkRTXCIsbmFtZTpcIlByb2JlUmVzaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4NilcIjp7dGFnOlwiKDAwMTQsNDA4NilcIix2cjpcIlNRXCIsbmFtZTpcIlJlY2VpdmVQcm9iZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDg3KVwiOnt0YWc6XCIoMDAxNCw0MDg3KVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvYmVEcml2ZVNldHRpbmdzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwODgpXCI6e3RhZzpcIigwMDE0LDQwODgpXCIsdnI6XCJEU1wiLG5hbWU6XCJCcmlkZ2VSZXNpc3RvcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwODkpXCI6e3RhZzpcIigwMDE0LDQwODkpXCIsdnI6XCJEU1wiLG5hbWU6XCJQcm9iZU9yaWVudGF0aW9uQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwOEIpXCI6e3RhZzpcIigwMDE0LDQwOEIpXCIsdnI6XCJEU1wiLG5hbWU6XCJVc2VyU2VsZWN0ZWRHYWluWVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4QylcIjp7dGFnOlwiKDAwMTQsNDA4QylcIix2cjpcIkRTXCIsbmFtZTpcIlVzZXJTZWxlY3RlZFBoYXNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDhEKVwiOnt0YWc6XCIoMDAxNCw0MDhEKVwiLHZyOlwiRFNcIixuYW1lOlwiVXNlclNlbGVjdGVkT2Zmc2V0WFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA4RSlcIjp7dGFnOlwiKDAwMTQsNDA4RSlcIix2cjpcIkRTXCIsbmFtZTpcIlVzZXJTZWxlY3RlZE9mZnNldFlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwOTEpXCI6e3RhZzpcIigwMDE0LDQwOTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJDaGFubmVsU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA5MilcIjp7dGFnOlwiKDAwMTQsNDA5MilcIix2cjpcIkRTXCIsbmFtZTpcIkNoYW5uZWxUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwOUEpXCI6e3RhZzpcIigwMDE0LDQwOUEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2FubmVyU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA5QilcIjp7dGFnOlwiKDAwMTQsNDA5QilcIix2cjpcIlNUXCIsbmFtZTpcIlNjYW5Qcm9jZWR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDQwOUMpXCI6e3RhZzpcIigwMDE0LDQwOUMpXCIsdnI6XCJEU1wiLG5hbWU6XCJUcmFuc2xhdGlvblJhdGVYXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MDlEKVwiOnt0YWc6XCIoMDAxNCw0MDlEKVwiLHZyOlwiRFNcIixuYW1lOlwiVHJhbnNsYXRpb25SYXRlWVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDA5RilcIjp7dGFnOlwiKDAwMTQsNDA5RilcIix2cjpcIkRTXCIsbmFtZTpcIkNoYW5uZWxPdmVybGFwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MEEwKVwiOnt0YWc6XCIoMDAxNCw0MEEwKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1hZ2VRdWFsaXR5SW5kaWNhdG9yVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNDBBMSlcIjp7dGFnOlwiKDAwMTQsNDBBMSlcIix2cjpcIkxPXCIsbmFtZTpcIkltYWdlUXVhbGl0eUluZGljYXRvck1hdGVyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw0MEEyKVwiOnt0YWc6XCIoMDAxNCw0MEEyKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1hZ2VRdWFsaXR5SW5kaWNhdG9yU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTAwMilcIjp7dGFnOlwiKDAwMTQsNTAwMilcIix2cjpcIklTXCIsbmFtZTpcIkxJTkFDRW5lcmd5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MDA0KVwiOnt0YWc6XCIoMDAxNCw1MDA0KVwiLHZyOlwiSVNcIixuYW1lOlwiTElOQUNPdXRwdXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMDApXCI6e3RhZzpcIigwMDE0LDUxMDApXCIsdnI6XCJVU1wiLG5hbWU6XCJBY3RpdmVBcGVydHVyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwMSlcIjp7dGFnOlwiKDAwMTQsNTEwMSlcIix2cjpcIkRTXCIsbmFtZTpcIlRvdGFsQXBlcnR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMDIpXCI6e3RhZzpcIigwMDE0LDUxMDIpXCIsdnI6XCJEU1wiLG5hbWU6XCJBcGVydHVyZUVsZXZhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwMylcIjp7dGFnOlwiKDAwMTQsNTEwMylcIix2cjpcIkRTXCIsbmFtZTpcIk1haW5Mb2JlQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMDQpXCI6e3RhZzpcIigwMDE0LDUxMDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJNYWluUm9vZkFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTA1KVwiOnt0YWc6XCIoMDAxNCw1MTA1KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29ubmVjdG9yVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwNilcIjp7dGFnOlwiKDAwMTQsNTEwNilcIix2cjpcIlNIXCIsbmFtZTpcIldlZGdlTW9kZWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMDcpXCI6e3RhZzpcIigwMDE0LDUxMDcpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZUFuZ2xlRmxvYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMDgpXCI6e3RhZzpcIigwMDE0LDUxMDgpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZVJvb2ZBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwOSlcIjp7dGFnOlwiKDAwMTQsNTEwOSlcIix2cjpcIkNTXCIsbmFtZTpcIldlZGdlRWxlbWVudDFQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwQSlcIjp7dGFnOlwiKDAwMTQsNTEwQSlcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlTWF0ZXJpYWxWZWxvY2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwQilcIjp7dGFnOlwiKDAwMTQsNTEwQilcIix2cjpcIlNIXCIsbmFtZTpcIldlZGdlTWF0ZXJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMEMpXCI6e3RhZzpcIigwMDE0LDUxMEMpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZU9mZnNldFpcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMEQpXCI6e3RhZzpcIigwMDE0LDUxMEQpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZU9yaWdpbk9mZnNldFhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMEUpXCI6e3RhZzpcIigwMDE0LDUxMEUpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZVRpbWVEZWxheVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTEwRilcIjp7dGFnOlwiKDAwMTQsNTEwRilcIix2cjpcIlNIXCIsbmFtZTpcIldlZGdlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExMClcIjp7dGFnOlwiKDAwMTQsNTExMClcIix2cjpcIlNIXCIsbmFtZTpcIldlZGdlTWFudWZhY3R1cmVyTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExMSlcIjp7dGFnOlwiKDAwMTQsNTExMSlcIix2cjpcIkxPXCIsbmFtZTpcIldlZGdlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMTIpXCI6e3RhZzpcIigwMDE0LDUxMTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJOb21pbmFsQmVhbUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTEzKVwiOnt0YWc6XCIoMDAxNCw1MTEzKVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VPZmZzZXRYXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTE0KVwiOnt0YWc6XCIoMDAxNCw1MTE0KVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VPZmZzZXRZXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTE1KVwiOnt0YWc6XCIoMDAxNCw1MTE1KVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VUb3RhbExlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExNilcIjp7dGFnOlwiKDAwMTQsNTExNilcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlSW5Db250YWN0TGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTE3KVwiOnt0YWc6XCIoMDAxNCw1MTE3KVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VGcm9udEdhcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExOClcIjp7dGFnOlwiKDAwMTQsNTExOClcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlVG90YWxIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMTkpXCI6e3RhZzpcIigwMDE0LDUxMTkpXCIsdnI6XCJEU1wiLG5hbWU6XCJXZWRnZUZyb250SGVpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTFBKVwiOnt0YWc6XCIoMDAxNCw1MTFBKVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VSZWFySGVpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTFCKVwiOnt0YWc6XCIoMDAxNCw1MTFCKVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VUb3RhbFdpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxNCw1MTFDKVwiOnt0YWc6XCIoMDAxNCw1MTFDKVwiLHZyOlwiRFNcIixuYW1lOlwiV2VkZ2VJbkNvbnRhY3RXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExRClcIjp7dGFnOlwiKDAwMTQsNTExRClcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlQ2hhbWZlckhlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPTkRFXCJ9LFwiKDAwMTQsNTExRSlcIjp7dGFnOlwiKDAwMTQsNTExRSlcIix2cjpcIkNTXCIsbmFtZTpcIldlZGdlQ3VydmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT05ERVwifSxcIigwMDE0LDUxMUYpXCI6e3RhZzpcIigwMDE0LDUxMUYpXCIsdnI6XCJEU1wiLG5hbWU6XCJSYWRpdXNBbG9uZ1dlZGdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09OREVcIn0sXCIoMDAxOCwwMDEwKVwiOnt0YWc6XCIoMDAxOCwwMDEwKVwiLHZyOlwiTE9cIixuYW1lOlwiQ29udHJhc3RCb2x1c0FnZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAxMilcIjp7dGFnOlwiKDAwMTgsMDAxMilcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNBZ2VudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAxMylcIjp7dGFnOlwiKDAwMTgsMDAxMylcIix2cjpcIkZMXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNUMVJlbGF4aXZpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDE0KVwiOnt0YWc6XCIoMDAxOCwwMDE0KVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udHJhc3RCb2x1c0FkbWluaXN0cmF0aW9uUm91dGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwMTUpXCI6e3RhZzpcIigwMDE4LDAwMTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJCb2R5UGFydEV4YW1pbmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAyMClcIjp7dGFnOlwiKDAwMTgsMDAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlNjYW5uaW5nU2VxdWVuY2VcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwMjEpXCI6e3RhZzpcIigwMDE4LDAwMjEpXCIsdnI6XCJDU1wiLG5hbWU6XCJTZXF1ZW5jZVZhcmlhbnRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwMjIpXCI6e3RhZzpcIigwMDE4LDAwMjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJTY2FuT3B0aW9uc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAyMylcIjp7dGFnOlwiKDAwMTgsMDAyMylcIix2cjpcIkNTXCIsbmFtZTpcIk1SQWNxdWlzaXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAyNClcIjp7dGFnOlwiKDAwMTgsMDAyNClcIix2cjpcIlNIXCIsbmFtZTpcIlNlcXVlbmNlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwMjUpXCI6e3RhZzpcIigwMDE4LDAwMjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbmdpb0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDI2KVwiOnt0YWc6XCIoMDAxOCwwMDI2KVwiLHZyOlwiU1FcIixuYW1lOlwiSW50ZXJ2ZW50aW9uRHJ1Z0luZm9ybWF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDI3KVwiOnt0YWc6XCIoMDAxOCwwMDI3KVwiLHZyOlwiVE1cIixuYW1lOlwiSW50ZXJ2ZW50aW9uRHJ1Z1N0b3BUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAyOClcIjp7dGFnOlwiKDAwMTgsMDAyOClcIix2cjpcIkRTXCIsbmFtZTpcIkludGVydmVudGlvbkRydWdEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAyOSlcIjp7dGFnOlwiKDAwMTgsMDAyOSlcIix2cjpcIlNRXCIsbmFtZTpcIkludGVydmVudGlvbkRydWdDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDJBKVwiOnt0YWc6XCIoMDAxOCwwMDJBKVwiLHZyOlwiU1FcIixuYW1lOlwiQWRkaXRpb25hbERydWdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwMzEpXCI6e3RhZzpcIigwMDE4LDAwMzEpXCIsdnI6XCJMT1wiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAzNClcIjp7dGFnOlwiKDAwMTgsMDAzNClcIix2cjpcIkxPXCIsbmFtZTpcIkludGVydmVudGlvbkRydWdOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAzNSlcIjp7dGFnOlwiKDAwMTgsMDAzNSlcIix2cjpcIlRNXCIsbmFtZTpcIkludGVydmVudGlvbkRydWdTdGFydFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDM2KVwiOnt0YWc6XCIoMDAxOCwwMDM2KVwiLHZyOlwiU1FcIixuYW1lOlwiSW50ZXJ2ZW50aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDM4KVwiOnt0YWc6XCIoMDAxOCwwMDM4KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW50ZXJ2ZW50aW9uU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDAzQSlcIjp7dGFnOlwiKDAwMTgsMDAzQSlcIix2cjpcIlNUXCIsbmFtZTpcIkludGVydmVudGlvbkRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA0MClcIjp7dGFnOlwiKDAwMTgsMDA0MClcIix2cjpcIklTXCIsbmFtZTpcIkNpbmVSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA0MilcIjp7dGFnOlwiKDAwMTgsMDA0MilcIix2cjpcIkNTXCIsbmFtZTpcIkluaXRpYWxDaW5lUnVuU3RhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDUwKVwiOnt0YWc6XCIoMDAxOCwwMDUwKVwiLHZyOlwiRFNcIixuYW1lOlwiU2xpY2VUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDYwKVwiOnt0YWc6XCIoMDAxOCwwMDYwKVwiLHZyOlwiRFNcIixuYW1lOlwiS1ZQXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA3MClcIjp7dGFnOlwiKDAwMTgsMDA3MClcIix2cjpcIklTXCIsbmFtZTpcIkNvdW50c0FjY3VtdWxhdGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA3MSlcIjp7dGFnOlwiKDAwMTgsMDA3MSlcIix2cjpcIkNTXCIsbmFtZTpcIkFjcXVpc2l0aW9uVGVybWluYXRpb25Db25kaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDcyKVwiOnt0YWc6XCIoMDAxOCwwMDcyKVwiLHZyOlwiRFNcIixuYW1lOlwiRWZmZWN0aXZlRHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDczKVwiOnt0YWc6XCIoMDAxOCwwMDczKVwiLHZyOlwiQ1NcIixuYW1lOlwiQWNxdWlzaXRpb25TdGFydENvbmRpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwNzQpXCI6e3RhZzpcIigwMDE4LDAwNzQpXCIsdnI6XCJJU1wiLG5hbWU6XCJBY3F1aXNpdGlvblN0YXJ0Q29uZGl0aW9uRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwNzUpXCI6e3RhZzpcIigwMDE4LDAwNzUpXCIsdnI6XCJJU1wiLG5hbWU6XCJBY3F1aXNpdGlvblRlcm1pbmF0aW9uQ29uZGl0aW9uRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwODApXCI6e3RhZzpcIigwMDE4LDAwODApXCIsdnI6XCJEU1wiLG5hbWU6XCJSZXBldGl0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwODEpXCI6e3RhZzpcIigwMDE4LDAwODEpXCIsdnI6XCJEU1wiLG5hbWU6XCJFY2hvVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwODIpXCI6e3RhZzpcIigwMDE4LDAwODIpXCIsdnI6XCJEU1wiLG5hbWU6XCJJbnZlcnNpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA4MylcIjp7dGFnOlwiKDAwMTgsMDA4MylcIix2cjpcIkRTXCIsbmFtZTpcIk51bWJlck9mQXZlcmFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDg0KVwiOnt0YWc6XCIoMDAxOCwwMDg0KVwiLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2luZ0ZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwODUpXCI6e3RhZzpcIigwMDE4LDAwODUpXCIsdnI6XCJTSFwiLG5hbWU6XCJJbWFnZWROdWNsZXVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA4NilcIjp7dGFnOlwiKDAwMTgsMDA4NilcIix2cjpcIklTXCIsbmFtZTpcIkVjaG9OdW1iZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDg3KVwiOnt0YWc6XCIoMDAxOCwwMDg3KVwiLHZyOlwiRFNcIixuYW1lOlwiTWFnbmV0aWNGaWVsZFN0cmVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA4OClcIjp7dGFnOlwiKDAwMTgsMDA4OClcIix2cjpcIkRTXCIsbmFtZTpcIlNwYWNpbmdCZXR3ZWVuU2xpY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA4OSlcIjp7dGFnOlwiKDAwMTgsMDA4OSlcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUGhhc2VFbmNvZGluZ1N0ZXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA5MClcIjp7dGFnOlwiKDAwMTgsMDA5MClcIix2cjpcIkRTXCIsbmFtZTpcIkRhdGFDb2xsZWN0aW9uRGlhbWV0ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwwMDkxKVwiOnt0YWc6XCIoMDAxOCwwMDkxKVwiLHZyOlwiSVNcIixuYW1lOlwiRWNob1RyYWluTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMDA5MylcIjp7dGFnOlwiKDAwMTgsMDA5MylcIix2cjpcIkRTXCIsbmFtZTpcIlBlcmNlbnRTYW1wbGluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwOTQpXCI6e3RhZzpcIigwMDE4LDAwOTQpXCIsdnI6XCJEU1wiLG5hbWU6XCJQZXJjZW50UGhhc2VGaWVsZE9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDAwOTUpXCI6e3RhZzpcIigwMDE4LDAwOTUpXCIsdnI6XCJEU1wiLG5hbWU6XCJQaXhlbEJhbmR3aWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwMDApXCI6e3RhZzpcIigwMDE4LDEwMDApXCIsdnI6XCJMT1wiLG5hbWU6XCJEZXZpY2VTZXJpYWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDAyKVwiOnt0YWc6XCIoMDAxOCwxMDAyKVwiLHZyOlwiVUlcIixuYW1lOlwiRGV2aWNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAwMylcIjp7dGFnOlwiKDAwMTgsMTAwMylcIix2cjpcIkxPXCIsbmFtZTpcIkRldmljZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAwNClcIjp7dGFnOlwiKDAwMTgsMTAwNClcIix2cjpcIkxPXCIsbmFtZTpcIlBsYXRlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDA1KVwiOnt0YWc6XCIoMDAxOCwxMDA1KVwiLHZyOlwiTE9cIixuYW1lOlwiR2VuZXJhdG9ySURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDA2KVwiOnt0YWc6XCIoMDAxOCwxMDA2KVwiLHZyOlwiTE9cIixuYW1lOlwiR3JpZElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAwNylcIjp7dGFnOlwiKDAwMTgsMTAwNylcIix2cjpcIkxPXCIsbmFtZTpcIkNhc3NldHRlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDA4KVwiOnt0YWc6XCIoMDAxOCwxMDA4KVwiLHZyOlwiTE9cIixuYW1lOlwiR2FudHJ5SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDEwKVwiOnt0YWc6XCIoMDAxOCwxMDEwKVwiLHZyOlwiTE9cIixuYW1lOlwiU2Vjb25kYXJ5Q2FwdHVyZURldmljZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAxMilcIjp7dGFnOlwiKDAwMTgsMTAxMilcIix2cjpcIkRBXCIsbmFtZTpcIkRhdGVPZlNlY29uZGFyeUNhcHR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDE0KVwiOnt0YWc6XCIoMDAxOCwxMDE0KVwiLHZyOlwiVE1cIixuYW1lOlwiVGltZU9mU2Vjb25kYXJ5Q2FwdHVyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwMTYpXCI6e3RhZzpcIigwMDE4LDEwMTYpXCIsdnI6XCJMT1wiLG5hbWU6XCJTZWNvbmRhcnlDYXB0dXJlRGV2aWNlTWFudWZhY3R1cmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAxOClcIjp7dGFnOlwiKDAwMTgsMTAxOClcIix2cjpcIkxPXCIsbmFtZTpcIlNlY29uZGFyeUNhcHR1cmVEZXZpY2VNYW51ZmFjdHVyZXJNb2RlbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDE5KVwiOnt0YWc6XCIoMDAxOCwxMDE5KVwiLHZyOlwiTE9cIixuYW1lOlwiU2Vjb25kYXJ5Q2FwdHVyZURldmljZVNvZnR3YXJlVmVyc2lvbnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwMjApXCI6e3RhZzpcIigwMDE4LDEwMjApXCIsdnI6XCJMT1wiLG5hbWU6XCJTb2Z0d2FyZVZlcnNpb25zXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDIyKVwiOnt0YWc6XCIoMDAxOCwxMDIyKVwiLHZyOlwiU0hcIixuYW1lOlwiVmlkZW9JbWFnZUZvcm1hdEFjcXVpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAyMylcIjp7dGFnOlwiKDAwMTgsMTAyMylcIix2cjpcIkxPXCIsbmFtZTpcIkRpZ2l0YWxJbWFnZUZvcm1hdEFjcXVpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTAzMClcIjp7dGFnOlwiKDAwMTgsMTAzMClcIix2cjpcIkxPXCIsbmFtZTpcIlByb3RvY29sTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNDApXCI6e3RhZzpcIigwMDE4LDEwNDApXCIsdnI6XCJMT1wiLG5hbWU6XCJDb250cmFzdEJvbHVzUm91dGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDQxKVwiOnt0YWc6XCIoMDAxOCwxMDQxKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29udHJhc3RCb2x1c1ZvbHVtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNDIpXCI6e3RhZzpcIigwMDE4LDEwNDIpXCIsdnI6XCJUTVwiLG5hbWU6XCJDb250cmFzdEJvbHVzU3RhcnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA0MylcIjp7dGFnOlwiKDAwMTgsMTA0MylcIix2cjpcIlRNXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNTdG9wVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNDQpXCI6e3RhZzpcIigwMDE4LDEwNDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJDb250cmFzdEJvbHVzVG90YWxEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA0NSlcIjp7dGFnOlwiKDAwMTgsMTA0NSlcIix2cjpcIklTXCIsbmFtZTpcIlN5cmluZ2VDb3VudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDQ2KVwiOnt0YWc6XCIoMDAxOCwxMDQ2KVwiLHZyOlwiRFNcIixuYW1lOlwiQ29udHJhc3RGbG93UmF0ZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA0NylcIjp7dGFnOlwiKDAwMTgsMTA0NylcIix2cjpcIkRTXCIsbmFtZTpcIkNvbnRyYXN0Rmxvd0R1cmF0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDQ4KVwiOnt0YWc6XCIoMDAxOCwxMDQ4KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29udHJhc3RCb2x1c0luZ3JlZGllbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDQ5KVwiOnt0YWc6XCIoMDAxOCwxMDQ5KVwiLHZyOlwiRFNcIixuYW1lOlwiQ29udHJhc3RCb2x1c0luZ3JlZGllbnRDb25jZW50cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA1MClcIjp7dGFnOlwiKDAwMTgsMTA1MClcIix2cjpcIkRTXCIsbmFtZTpcIlNwYXRpYWxSZXNvbHV0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA2MClcIjp7dGFnOlwiKDAwMTgsMTA2MClcIix2cjpcIkRTXCIsbmFtZTpcIlRyaWdnZXJUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA2MSlcIjp7dGFnOlwiKDAwMTgsMTA2MSlcIix2cjpcIkxPXCIsbmFtZTpcIlRyaWdnZXJTb3VyY2VPclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDYyKVwiOnt0YWc6XCIoMDAxOCwxMDYyKVwiLHZyOlwiSVNcIixuYW1lOlwiTm9taW5hbEludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA2MylcIjp7dGFnOlwiKDAwMTgsMTA2MylcIix2cjpcIkRTXCIsbmFtZTpcIkZyYW1lVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNjQpXCI6e3RhZzpcIigwMDE4LDEwNjQpXCIsdnI6XCJMT1wiLG5hbWU6XCJDYXJkaWFjRnJhbWluZ1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDY1KVwiOnt0YWc6XCIoMDAxOCwxMDY1KVwiLHZyOlwiRFNcIixuYW1lOlwiRnJhbWVUaW1lVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDY2KVwiOnt0YWc6XCIoMDAxOCwxMDY2KVwiLHZyOlwiRFNcIixuYW1lOlwiRnJhbWVEZWxheVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNjcpXCI6e3RhZzpcIigwMDE4LDEwNjcpXCIsdnI6XCJEU1wiLG5hbWU6XCJJbWFnZVRyaWdnZXJEZWxheVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNjgpXCI6e3RhZzpcIigwMDE4LDEwNjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJNdWx0aXBsZXhHcm91cFRpbWVPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDY5KVwiOnt0YWc6XCIoMDAxOCwxMDY5KVwiLHZyOlwiRFNcIixuYW1lOlwiVHJpZ2dlclRpbWVPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDZBKVwiOnt0YWc6XCIoMDAxOCwxMDZBKVwiLHZyOlwiQ1NcIixuYW1lOlwiU3luY2hyb25pemF0aW9uVHJpZ2dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNkMpXCI6e3RhZzpcIigwMDE4LDEwNkMpXCIsdnI6XCJVU1wiLG5hbWU6XCJTeW5jaHJvbml6YXRpb25DaGFubmVsXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA2RSlcIjp7dGFnOlwiKDAwMTgsMTA2RSlcIix2cjpcIlVMXCIsbmFtZTpcIlRyaWdnZXJTYW1wbGVQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzApXCI6e3RhZzpcIigwMDE4LDEwNzApXCIsdnI6XCJMT1wiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsUm91dGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDcxKVwiOnt0YWc6XCIoMDAxOCwxMDcxKVwiLHZyOlwiRFNcIixuYW1lOlwiUmFkaW9waGFybWFjZXV0aWNhbFZvbHVtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzIpXCI6e3RhZzpcIigwMDE4LDEwNzIpXCIsdnI6XCJUTVwiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsU3RhcnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA3MylcIjp7dGFnOlwiKDAwMTgsMTA3MylcIix2cjpcIlRNXCIsbmFtZTpcIlJhZGlvcGhhcm1hY2V1dGljYWxTdG9wVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzQpXCI6e3RhZzpcIigwMDE4LDEwNzQpXCIsdnI6XCJEU1wiLG5hbWU6XCJSYWRpb251Y2xpZGVUb3RhbERvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDc1KVwiOnt0YWc6XCIoMDAxOCwxMDc1KVwiLHZyOlwiRFNcIixuYW1lOlwiUmFkaW9udWNsaWRlSGFsZkxpZmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDc2KVwiOnt0YWc6XCIoMDAxOCwxMDc2KVwiLHZyOlwiRFNcIixuYW1lOlwiUmFkaW9udWNsaWRlUG9zaXRyb25GcmFjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzcpXCI6e3RhZzpcIigwMDE4LDEwNzcpXCIsdnI6XCJEU1wiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsU3BlY2lmaWNBY3Rpdml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzgpXCI6e3RhZzpcIigwMDE4LDEwNzgpXCIsdnI6XCJEVFwiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsU3RhcnREYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwNzkpXCI6e3RhZzpcIigwMDE4LDEwNzkpXCIsdnI6XCJEVFwiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsU3RvcERhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA4MClcIjp7dGFnOlwiKDAwMTgsMTA4MClcIix2cjpcIkNTXCIsbmFtZTpcIkJlYXRSZWplY3Rpb25GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA4MSlcIjp7dGFnOlwiKDAwMTgsMTA4MSlcIix2cjpcIklTXCIsbmFtZTpcIkxvd1JSVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDgyKVwiOnt0YWc6XCIoMDAxOCwxMDgyKVwiLHZyOlwiSVNcIixuYW1lOlwiSGlnaFJSVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDgzKVwiOnt0YWc6XCIoMDAxOCwxMDgzKVwiLHZyOlwiSVNcIixuYW1lOlwiSW50ZXJ2YWxzQWNxdWlyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDg0KVwiOnt0YWc6XCIoMDAxOCwxMDg0KVwiLHZyOlwiSVNcIixuYW1lOlwiSW50ZXJ2YWxzUmVqZWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDg1KVwiOnt0YWc6XCIoMDAxOCwxMDg1KVwiLHZyOlwiTE9cIixuYW1lOlwiUFZDUmVqZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA4NilcIjp7dGFnOlwiKDAwMTgsMTA4NilcIix2cjpcIklTXCIsbmFtZTpcIlNraXBCZWF0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEwODgpXCI6e3RhZzpcIigwMDE4LDEwODgpXCIsdnI6XCJJU1wiLG5hbWU6XCJIZWFydFJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMDkwKVwiOnt0YWc6XCIoMDAxOCwxMDkwKVwiLHZyOlwiSVNcIixuYW1lOlwiQ2FyZGlhY051bWJlck9mSW1hZ2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTA5NClcIjp7dGFnOlwiKDAwMTgsMTA5NClcIix2cjpcIklTXCIsbmFtZTpcIlRyaWdnZXJXaW5kb3dcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTAwKVwiOnt0YWc6XCIoMDAxOCwxMTAwKVwiLHZyOlwiRFNcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25EaWFtZXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExMTApXCI6e3RhZzpcIigwMDE4LDExMTApXCIsdnI6XCJEU1wiLG5hbWU6XCJEaXN0YW5jZVNvdXJjZVRvRGV0ZWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTExKVwiOnt0YWc6XCIoMDAxOCwxMTExKVwiLHZyOlwiRFNcIixuYW1lOlwiRGlzdGFuY2VTb3VyY2VUb1BhdGllbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTE0KVwiOnt0YWc6XCIoMDAxOCwxMTE0KVwiLHZyOlwiRFNcIixuYW1lOlwiRXN0aW1hdGVkUmFkaW9ncmFwaGljTWFnbmlmaWNhdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExMjApXCI6e3RhZzpcIigwMDE4LDExMjApXCIsdnI6XCJEU1wiLG5hbWU6XCJHYW50cnlEZXRlY3RvclRpbHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTIxKVwiOnt0YWc6XCIoMDAxOCwxMTIxKVwiLHZyOlwiRFNcIixuYW1lOlwiR2FudHJ5RGV0ZWN0b3JTbGV3XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTEzMClcIjp7dGFnOlwiKDAwMTgsMTEzMClcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlSGVpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTEzMSlcIjp7dGFnOlwiKDAwMTgsMTEzMSlcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlVHJhdmVyc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTM0KVwiOnt0YWc6XCIoMDAxOCwxMTM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiVGFibGVNb3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTM1KVwiOnt0YWc6XCIoMDAxOCwxMTM1KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVWZXJ0aWNhbEluY3JlbWVudFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTEzNilcIjp7dGFnOlwiKDAwMTgsMTEzNilcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlTGF0ZXJhbEluY3JlbWVudFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTEzNylcIjp7dGFnOlwiKDAwMTgsMTEzNylcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlTG9uZ2l0dWRpbmFsSW5jcmVtZW50XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTM4KVwiOnt0YWc6XCIoMDAxOCwxMTM4KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExM0EpXCI6e3RhZzpcIigwMDE4LDExM0EpXCIsdnI6XCJDU1wiLG5hbWU6XCJUYWJsZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTQwKVwiOnt0YWc6XCIoMDAxOCwxMTQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUm90YXRpb25EaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTQyKVwiOnt0YWc6XCIoMDAxOCwxMTQyKVwiLHZyOlwiRFNcIixuYW1lOlwiUmFkaWFsUG9zaXRpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNDMpXCI6e3RhZzpcIigwMDE4LDExNDMpXCIsdnI6XCJEU1wiLG5hbWU6XCJTY2FuQXJjXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE0NClcIjp7dGFnOlwiKDAwMTgsMTE0NClcIix2cjpcIkRTXCIsbmFtZTpcIkFuZ3VsYXJTdGVwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE0NSlcIjp7dGFnOlwiKDAwMTgsMTE0NSlcIix2cjpcIkRTXCIsbmFtZTpcIkNlbnRlck9mUm90YXRpb25PZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTQ3KVwiOnt0YWc6XCIoMDAxOCwxMTQ3KVwiLHZyOlwiQ1NcIixuYW1lOlwiRmllbGRPZlZpZXdTaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNDkpXCI6e3RhZzpcIigwMDE4LDExNDkpXCIsdnI6XCJJU1wiLG5hbWU6XCJGaWVsZE9mVmlld0RpbWVuc2lvbnNcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNTApXCI6e3RhZzpcIigwMDE4LDExNTApXCIsdnI6XCJJU1wiLG5hbWU6XCJFeHBvc3VyZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTUxKVwiOnt0YWc6XCIoMDAxOCwxMTUxKVwiLHZyOlwiSVNcIixuYW1lOlwiWFJheVR1YmVDdXJyZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE1MilcIjp7dGFnOlwiKDAwMTgsMTE1MilcIix2cjpcIklTXCIsbmFtZTpcIkV4cG9zdXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE1MylcIjp7dGFnOlwiKDAwMTgsMTE1MylcIix2cjpcIklTXCIsbmFtZTpcIkV4cG9zdXJlSW51QXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTU0KVwiOnt0YWc6XCIoMDAxOCwxMTU0KVwiLHZyOlwiRFNcIixuYW1lOlwiQXZlcmFnZVB1bHNlV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTU1KVwiOnt0YWc6XCIoMDAxOCwxMTU1KVwiLHZyOlwiQ1NcIixuYW1lOlwiUmFkaWF0aW9uU2V0dGluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNTYpXCI6e3RhZzpcIigwMDE4LDExNTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWN0aWZpY2F0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNUEpXCI6e3RhZzpcIigwMDE4LDExNUEpXCIsdnI6XCJDU1wiLG5hbWU6XCJSYWRpYXRpb25Nb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE1RSlcIjp7dGFnOlwiKDAwMTgsMTE1RSlcIix2cjpcIkRTXCIsbmFtZTpcIkltYWdlQW5kRmx1b3Jvc2NvcHlBcmVhRG9zZVByb2R1Y3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTYwKVwiOnt0YWc6XCIoMDAxOCwxMTYwKVwiLHZyOlwiU0hcIixuYW1lOlwiRmlsdGVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNjEpXCI6e3RhZzpcIigwMDE4LDExNjEpXCIsdnI6XCJMT1wiLG5hbWU6XCJUeXBlT2ZGaWx0ZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTYyKVwiOnt0YWc6XCIoMDAxOCwxMTYyKVwiLHZyOlwiRFNcIixuYW1lOlwiSW50ZW5zaWZpZXJTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE2NClcIjp7dGFnOlwiKDAwMTgsMTE2NClcIix2cjpcIkRTXCIsbmFtZTpcIkltYWdlclBpeGVsU3BhY2luZ1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExNjYpXCI6e3RhZzpcIigwMDE4LDExNjYpXCIsdnI6XCJDU1wiLG5hbWU6XCJHcmlkXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTcwKVwiOnt0YWc6XCIoMDAxOCwxMTcwKVwiLHZyOlwiSVNcIixuYW1lOlwiR2VuZXJhdG9yUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTgwKVwiOnt0YWc6XCIoMDAxOCwxMTgwKVwiLHZyOlwiU0hcIixuYW1lOlwiQ29sbGltYXRvckdyaWROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE4MSlcIjp7dGFnOlwiKDAwMTgsMTE4MSlcIix2cjpcIkNTXCIsbmFtZTpcIkNvbGxpbWF0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTE4MilcIjp7dGFnOlwiKDAwMTgsMTE4MilcIix2cjpcIklTXCIsbmFtZTpcIkZvY2FsRGlzdGFuY2VcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExODMpXCI6e3RhZzpcIigwMDE4LDExODMpXCIsdnI6XCJEU1wiLG5hbWU6XCJYRm9jdXNDZW50ZXJcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExODQpXCI6e3RhZzpcIigwMDE4LDExODQpXCIsdnI6XCJEU1wiLG5hbWU6XCJZRm9jdXNDZW50ZXJcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExOTApXCI6e3RhZzpcIigwMDE4LDExOTApXCIsdnI6XCJEU1wiLG5hbWU6XCJGb2NhbFNwb3RzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMTkxKVwiOnt0YWc6XCIoMDAxOCwxMTkxKVwiLHZyOlwiQ1NcIixuYW1lOlwiQW5vZGVUYXJnZXRNYXRlcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExQTApXCI6e3RhZzpcIigwMDE4LDExQTApXCIsdnI6XCJEU1wiLG5hbWU6XCJCb2R5UGFydFRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDExQTIpXCI6e3RhZzpcIigwMDE4LDExQTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJDb21wcmVzc2lvbkZvcmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTFBNClcIjp7dGFnOlwiKDAwMTgsMTFBNClcIix2cjpcIkxPXCIsbmFtZTpcIlBhZGRsZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTIwMClcIjp7dGFnOlwiKDAwMTgsMTIwMClcIix2cjpcIkRBXCIsbmFtZTpcIkRhdGVPZkxhc3RDYWxpYnJhdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTIwMSlcIjp7dGFnOlwiKDAwMTgsMTIwMSlcIix2cjpcIlRNXCIsbmFtZTpcIlRpbWVPZkxhc3RDYWxpYnJhdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTIwMilcIjp7dGFnOlwiKDAwMTgsMTIwMilcIix2cjpcIkRUXCIsbmFtZTpcIkRhdGVUaW1lT2ZMYXN0Q2FsaWJyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMjEwKVwiOnt0YWc6XCIoMDAxOCwxMjEwKVwiLHZyOlwiU0hcIixuYW1lOlwiQ29udm9sdXRpb25LZXJuZWxcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEyNDIpXCI6e3RhZzpcIigwMDE4LDEyNDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJBY3R1YWxGcmFtZUR1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTI0MylcIjp7dGFnOlwiKDAwMTgsMTI0MylcIix2cjpcIklTXCIsbmFtZTpcIkNvdW50UmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEyNDQpXCI6e3RhZzpcIigwMDE4LDEyNDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJQcmVmZXJyZWRQbGF5YmFja1NlcXVlbmNpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMjUwKVwiOnt0YWc6XCIoMDAxOCwxMjUwKVwiLHZyOlwiU0hcIixuYW1lOlwiUmVjZWl2ZUNvaWxOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTI1MSlcIjp7dGFnOlwiKDAwMTgsMTI1MSlcIix2cjpcIlNIXCIsbmFtZTpcIlRyYW5zbWl0Q29pbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMjYwKVwiOnt0YWc6XCIoMDAxOCwxMjYwKVwiLHZyOlwiU0hcIixuYW1lOlwiUGxhdGVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTI2MSlcIjp7dGFnOlwiKDAwMTgsMTI2MSlcIix2cjpcIkxPXCIsbmFtZTpcIlBob3NwaG9yVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEzMDApXCI6e3RhZzpcIigwMDE4LDEzMDApXCIsdnI6XCJEU1wiLG5hbWU6XCJTY2FuVmVsb2NpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMzAxKVwiOnt0YWc6XCIoMDAxOCwxMzAxKVwiLHZyOlwiQ1NcIixuYW1lOlwiV2hvbGVCb2R5VGVjaG5pcXVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMzAyKVwiOnt0YWc6XCIoMDAxOCwxMzAyKVwiLHZyOlwiSVNcIixuYW1lOlwiU2Nhbkxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEzMTApXCI6e3RhZzpcIigwMDE4LDEzMTApXCIsdnI6XCJVU1wiLG5hbWU6XCJBY3F1aXNpdGlvbk1hdHJpeFwiLHZtOlwiNFwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEzMTIpXCI6e3RhZzpcIigwMDE4LDEzMTIpXCIsdnI6XCJDU1wiLG5hbWU6XCJJblBsYW5lUGhhc2VFbmNvZGluZ0RpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEzMTQpXCI6e3RhZzpcIigwMDE4LDEzMTQpXCIsdnI6XCJEU1wiLG5hbWU6XCJGbGlwQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxMzE1KVwiOnt0YWc6XCIoMDAxOCwxMzE1KVwiLHZyOlwiQ1NcIixuYW1lOlwiVmFyaWFibGVGbGlwQW5nbGVGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTMxNilcIjp7dGFnOlwiKDAwMTgsMTMxNilcIix2cjpcIkRTXCIsbmFtZTpcIlNBUlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDEzMTgpXCI6e3RhZzpcIigwMDE4LDEzMTgpXCIsdnI6XCJEU1wiLG5hbWU6XCJkQmR0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQwMClcIjp7dGFnOlwiKDAwMTgsMTQwMClcIix2cjpcIkxPXCIsbmFtZTpcIkFjcXVpc2l0aW9uRGV2aWNlUHJvY2Vzc2luZ0Rlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQwMSlcIjp7dGFnOlwiKDAwMTgsMTQwMSlcIix2cjpcIkxPXCIsbmFtZTpcIkFjcXVpc2l0aW9uRGV2aWNlUHJvY2Vzc2luZ0NvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNDAyKVwiOnt0YWc6XCIoMDAxOCwxNDAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2Fzc2V0dGVPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE0MDMpXCI6e3RhZzpcIigwMDE4LDE0MDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJDYXNzZXR0ZVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNDA0KVwiOnt0YWc6XCIoMDAxOCwxNDA0KVwiLHZyOlwiVVNcIixuYW1lOlwiRXhwb3N1cmVzT25QbGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE0MDUpXCI6e3RhZzpcIigwMDE4LDE0MDUpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWxhdGl2ZVhSYXlFeHBvc3VyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE0MTEpXCI6e3RhZzpcIigwMDE4LDE0MTEpXCIsdnI6XCJEU1wiLG5hbWU6XCJFeHBvc3VyZUluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQxMilcIjp7dGFnOlwiKDAwMTgsMTQxMilcIix2cjpcIkRTXCIsbmFtZTpcIlRhcmdldEV4cG9zdXJlSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNDEzKVwiOnt0YWc6XCIoMDAxOCwxNDEzKVwiLHZyOlwiRFNcIixuYW1lOlwiRGV2aWF0aW9uSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNDUwKVwiOnt0YWc6XCIoMDAxOCwxNDUwKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29sdW1uQW5ndWxhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE0NjApXCI6e3RhZzpcIigwMDE4LDE0NjApXCIsdnI6XCJEU1wiLG5hbWU6XCJUb21vTGF5ZXJIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNDcwKVwiOnt0YWc6XCIoMDAxOCwxNDcwKVwiLHZyOlwiRFNcIixuYW1lOlwiVG9tb0FuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQ4MClcIjp7dGFnOlwiKDAwMTgsMTQ4MClcIix2cjpcIkRTXCIsbmFtZTpcIlRvbW9UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQ5MClcIjp7dGFnOlwiKDAwMTgsMTQ5MClcIix2cjpcIkNTXCIsbmFtZTpcIlRvbW9UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTQ5MSlcIjp7dGFnOlwiKDAwMTgsMTQ5MSlcIix2cjpcIkNTXCIsbmFtZTpcIlRvbW9DbGFzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE0OTUpXCI6e3RhZzpcIigwMDE4LDE0OTUpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlRvbW9zeW50aGVzaXNTb3VyY2VJbWFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNTAwKVwiOnt0YWc6XCIoMDAxOCwxNTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUG9zaXRpb25lck1vdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE1MDgpXCI6e3RhZzpcIigwMDE4LDE1MDgpXCIsdnI6XCJDU1wiLG5hbWU6XCJQb3NpdGlvbmVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE1MTApXCI6e3RhZzpcIigwMDE4LDE1MTApXCIsdnI6XCJEU1wiLG5hbWU6XCJQb3NpdGlvbmVyUHJpbWFyeUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTUxMSlcIjp7dGFnOlwiKDAwMTgsMTUxMSlcIix2cjpcIkRTXCIsbmFtZTpcIlBvc2l0aW9uZXJTZWNvbmRhcnlBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE1MjApXCI6e3RhZzpcIigwMDE4LDE1MjApXCIsdnI6XCJEU1wiLG5hbWU6XCJQb3NpdGlvbmVyUHJpbWFyeUFuZ2xlSW5jcmVtZW50XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNTIxKVwiOnt0YWc6XCIoMDAxOCwxNTIxKVwiLHZyOlwiRFNcIixuYW1lOlwiUG9zaXRpb25lclNlY29uZGFyeUFuZ2xlSW5jcmVtZW50XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNTMwKVwiOnt0YWc6XCIoMDAxOCwxNTMwKVwiLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JQcmltYXJ5QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNTMxKVwiOnt0YWc6XCIoMDAxOCwxNTMxKVwiLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JTZWNvbmRhcnlBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE2MDApXCI6e3RhZzpcIigwMDE4LDE2MDApXCIsdnI6XCJDU1wiLG5hbWU6XCJTaHV0dGVyU2hhcGVcIix2bTpcIjEtM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE2MDIpXCI6e3RhZzpcIigwMDE4LDE2MDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJTaHV0dGVyTGVmdFZlcnRpY2FsRWRnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE2MDQpXCI6e3RhZzpcIigwMDE4LDE2MDQpXCIsdnI6XCJJU1wiLG5hbWU6XCJTaHV0dGVyUmlnaHRWZXJ0aWNhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjA2KVwiOnt0YWc6XCIoMDAxOCwxNjA2KVwiLHZyOlwiSVNcIixuYW1lOlwiU2h1dHRlclVwcGVySG9yaXpvbnRhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjA4KVwiOnt0YWc6XCIoMDAxOCwxNjA4KVwiLHZyOlwiSVNcIixuYW1lOlwiU2h1dHRlckxvd2VySG9yaXpvbnRhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjEwKVwiOnt0YWc6XCIoMDAxOCwxNjEwKVwiLHZyOlwiSVNcIixuYW1lOlwiQ2VudGVyT2ZDaXJjdWxhclNodXR0ZXJcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjEyKVwiOnt0YWc6XCIoMDAxOCwxNjEyKVwiLHZyOlwiSVNcIixuYW1lOlwiUmFkaXVzT2ZDaXJjdWxhclNodXR0ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjIwKVwiOnt0YWc6XCIoMDAxOCwxNjIwKVwiLHZyOlwiSVNcIixuYW1lOlwiVmVydGljZXNPZlRoZVBvbHlnb25hbFNodXR0ZXJcIix2bTpcIjItMm5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjIyKVwiOnt0YWc6XCIoMDAxOCwxNjIyKVwiLHZyOlwiVVNcIixuYW1lOlwiU2h1dHRlclByZXNlbnRhdGlvblZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTYyMylcIjp7dGFnOlwiKDAwMTgsMTYyMylcIix2cjpcIlVTXCIsbmFtZTpcIlNodXR0ZXJPdmVybGF5R3JvdXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNjI0KVwiOnt0YWc6XCIoMDAxOCwxNjI0KVwiLHZyOlwiVVNcIixuYW1lOlwiU2h1dHRlclByZXNlbnRhdGlvbkNvbG9yQ0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNzAwKVwiOnt0YWc6XCIoMDAxOCwxNzAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29sbGltYXRvclNoYXBlXCIsdm06XCIxLTNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNzAyKVwiOnt0YWc6XCIoMDAxOCwxNzAyKVwiLHZyOlwiSVNcIixuYW1lOlwiQ29sbGltYXRvckxlZnRWZXJ0aWNhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwxNzA0KVwiOnt0YWc6XCIoMDAxOCwxNzA0KVwiLHZyOlwiSVNcIixuYW1lOlwiQ29sbGltYXRvclJpZ2h0VmVydGljYWxFZGdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTcwNilcIjp7dGFnOlwiKDAwMTgsMTcwNilcIix2cjpcIklTXCIsbmFtZTpcIkNvbGxpbWF0b3JVcHBlckhvcml6b250YWxFZGdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTcwOClcIjp7dGFnOlwiKDAwMTgsMTcwOClcIix2cjpcIklTXCIsbmFtZTpcIkNvbGxpbWF0b3JMb3dlckhvcml6b250YWxFZGdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTcxMClcIjp7dGFnOlwiKDAwMTgsMTcxMClcIix2cjpcIklTXCIsbmFtZTpcIkNlbnRlck9mQ2lyY3VsYXJDb2xsaW1hdG9yXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTcxMilcIjp7dGFnOlwiKDAwMTgsMTcxMilcIix2cjpcIklTXCIsbmFtZTpcIlJhZGl1c09mQ2lyY3VsYXJDb2xsaW1hdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTcyMClcIjp7dGFnOlwiKDAwMTgsMTcyMClcIix2cjpcIklTXCIsbmFtZTpcIlZlcnRpY2VzT2ZUaGVQb2x5Z29uYWxDb2xsaW1hdG9yXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTgwMClcIjp7dGFnOlwiKDAwMTgsMTgwMClcIix2cjpcIkNTXCIsbmFtZTpcIkFjcXVpc2l0aW9uVGltZVN5bmNocm9uaXplZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE4MDEpXCI6e3RhZzpcIigwMDE4LDE4MDEpXCIsdnI6XCJTSFwiLG5hbWU6XCJUaW1lU291cmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMTgwMilcIjp7dGFnOlwiKDAwMTgsMTgwMilcIix2cjpcIkNTXCIsbmFtZTpcIlRpbWVEaXN0cmlidXRpb25Qcm90b2NvbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDE4MDMpXCI6e3RhZzpcIigwMDE4LDE4MDMpXCIsdnI6XCJMT1wiLG5hbWU6XCJOVFBTb3VyY2VBZGRyZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjAwMSlcIjp7dGFnOlwiKDAwMTgsMjAwMSlcIix2cjpcIklTXCIsbmFtZTpcIlBhZ2VOdW1iZXJWZWN0b3JcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDIwMDIpXCI6e3RhZzpcIigwMDE4LDIwMDIpXCIsdnI6XCJTSFwiLG5hbWU6XCJGcmFtZUxhYmVsVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwyMDAzKVwiOnt0YWc6XCIoMDAxOCwyMDAzKVwiLHZyOlwiRFNcIixuYW1lOlwiRnJhbWVQcmltYXJ5QW5nbGVWZWN0b3JcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDIwMDQpXCI6e3RhZzpcIigwMDE4LDIwMDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJGcmFtZVNlY29uZGFyeUFuZ2xlVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwyMDA1KVwiOnt0YWc6XCIoMDAxOCwyMDA1KVwiLHZyOlwiRFNcIixuYW1lOlwiU2xpY2VMb2NhdGlvblZlY3RvclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjAwNilcIjp7dGFnOlwiKDAwMTgsMjAwNilcIix2cjpcIlNIXCIsbmFtZTpcIkRpc3BsYXlXaW5kb3dMYWJlbFZlY3RvclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjAxMClcIjp7dGFnOlwiKDAwMTgsMjAxMClcIix2cjpcIkRTXCIsbmFtZTpcIk5vbWluYWxTY2FubmVkUGl4ZWxTcGFjaW5nXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjAyMClcIjp7dGFnOlwiKDAwMTgsMjAyMClcIix2cjpcIkNTXCIsbmFtZTpcIkRpZ2l0aXppbmdEZXZpY2VUcmFuc3BvcnREaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwyMDMwKVwiOnt0YWc6XCIoMDAxOCwyMDMwKVwiLHZyOlwiRFNcIixuYW1lOlwiUm90YXRpb25PZlNjYW5uZWRGaWxtXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjA0MSlcIjp7dGFnOlwiKDAwMTgsMjA0MSlcIix2cjpcIlNRXCIsbmFtZTpcIkJpb3BzeVRhcmdldFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjA0MilcIjp7dGFnOlwiKDAwMTgsMjA0MilcIix2cjpcIlVJXCIsbmFtZTpcIlRhcmdldFVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDIwNDMpXCI6e3RhZzpcIigwMDE4LDIwNDMpXCIsdnI6XCJGTFwiLG5hbWU6XCJMb2NhbGl6aW5nQ3Vyc29yUG9zaXRpb25cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwyMDQ0KVwiOnt0YWc6XCIoMDAxOCwyMDQ0KVwiLHZyOlwiRkxcIixuYW1lOlwiQ2FsY3VsYXRlZFRhcmdldFBvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjA0NSlcIjp7dGFnOlwiKDAwMTgsMjA0NSlcIix2cjpcIlNIXCIsbmFtZTpcIlRhcmdldExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMjA0NilcIjp7dGFnOlwiKDAwMTgsMjA0NilcIix2cjpcIkZMXCIsbmFtZTpcIkRpc3BsYXllZFpWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDMxMDApXCI6e3RhZzpcIigwMDE4LDMxMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJJVlVTQWNxdWlzaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwzMTAxKVwiOnt0YWc6XCIoMDAxOCwzMTAxKVwiLHZyOlwiRFNcIixuYW1lOlwiSVZVU1B1bGxiYWNrUmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDMxMDIpXCI6e3RhZzpcIigwMDE4LDMxMDIpXCIsdnI6XCJEU1wiLG5hbWU6XCJJVlVTR2F0ZWRSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMzEwMylcIjp7dGFnOlwiKDAwMTgsMzEwMylcIix2cjpcIklTXCIsbmFtZTpcIklWVVNQdWxsYmFja1N0YXJ0RnJhbWVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCwzMTA0KVwiOnt0YWc6XCIoMDAxOCwzMTA0KVwiLHZyOlwiSVNcIixuYW1lOlwiSVZVU1B1bGxiYWNrU3RvcEZyYW1lTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsMzEwNSlcIjp7dGFnOlwiKDAwMTgsMzEwNSlcIix2cjpcIklTXCIsbmFtZTpcIkxlc2lvbk51bWJlclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTAwMClcIjp7dGFnOlwiKDAwMTgsNTAwMClcIix2cjpcIlNIXCIsbmFtZTpcIk91dHB1dFBvd2VyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw1MDEwKVwiOnt0YWc6XCIoMDAxOCw1MDEwKVwiLHZyOlwiTE9cIixuYW1lOlwiVHJhbnNkdWNlckRhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDUwMTIpXCI6e3RhZzpcIigwMDE4LDUwMTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJGb2N1c0RlcHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTAyMClcIjp7dGFnOlwiKDAwMTgsNTAyMClcIix2cjpcIkxPXCIsbmFtZTpcIlByb2Nlc3NpbmdGdW5jdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDUwMjIpXCI6e3RhZzpcIigwMDE4LDUwMjIpXCIsdnI6XCJEU1wiLG5hbWU6XCJNZWNoYW5pY2FsSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw1MDI0KVwiOnt0YWc6XCIoMDAxOCw1MDI0KVwiLHZyOlwiRFNcIixuYW1lOlwiQm9uZVRoZXJtYWxJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDUwMjYpXCI6e3RhZzpcIigwMDE4LDUwMjYpXCIsdnI6XCJEU1wiLG5hbWU6XCJDcmFuaWFsVGhlcm1hbEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTAyNylcIjp7dGFnOlwiKDAwMTgsNTAyNylcIix2cjpcIkRTXCIsbmFtZTpcIlNvZnRUaXNzdWVUaGVybWFsSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw1MDI4KVwiOnt0YWc6XCIoMDAxOCw1MDI4KVwiLHZyOlwiRFNcIixuYW1lOlwiU29mdFRpc3N1ZUZvY3VzVGhlcm1hbEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTAyOSlcIjp7dGFnOlwiKDAwMTgsNTAyOSlcIix2cjpcIkRTXCIsbmFtZTpcIlNvZnRUaXNzdWVTdXJmYWNlVGhlcm1hbEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTA1MClcIjp7dGFnOlwiKDAwMTgsNTA1MClcIix2cjpcIklTXCIsbmFtZTpcIkRlcHRoT2ZTY2FuRmllbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw1MTAwKVwiOnt0YWc6XCIoMDAxOCw1MTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGF0aWVudFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNTEwMSlcIjp7dGFnOlwiKDAwMTgsNTEwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlZpZXdQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDUxMDQpXCI6e3RhZzpcIigwMDE4LDUxMDQpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcm9qZWN0aW9uRXBvbnltb3VzTmFtZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMDApXCI6e3RhZzpcIigwMDE4LDYwMDApXCIsdnI6XCJEU1wiLG5hbWU6XCJTZW5zaXRpdml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMTEpXCI6e3RhZzpcIigwMDE4LDYwMTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTZXF1ZW5jZU9mVWx0cmFzb3VuZFJlZ2lvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDEyKVwiOnt0YWc6XCIoMDAxOCw2MDEyKVwiLHZyOlwiVVNcIixuYW1lOlwiUmVnaW9uU3BhdGlhbEZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMTQpXCI6e3RhZzpcIigwMDE4LDYwMTQpXCIsdnI6XCJVU1wiLG5hbWU6XCJSZWdpb25EYXRhVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMTYpXCI6e3RhZzpcIigwMDE4LDYwMTYpXCIsdnI6XCJVTFwiLG5hbWU6XCJSZWdpb25GbGFnc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMTgpXCI6e3RhZzpcIigwMDE4LDYwMTgpXCIsdnI6XCJVTFwiLG5hbWU6XCJSZWdpb25Mb2NhdGlvbk1pblgwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjAxQSlcIjp7dGFnOlwiKDAwMTgsNjAxQSlcIix2cjpcIlVMXCIsbmFtZTpcIlJlZ2lvbkxvY2F0aW9uTWluWTBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDFDKVwiOnt0YWc6XCIoMDAxOCw2MDFDKVwiLHZyOlwiVUxcIixuYW1lOlwiUmVnaW9uTG9jYXRpb25NYXhYMVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMUUpXCI6e3RhZzpcIigwMDE4LDYwMUUpXCIsdnI6XCJVTFwiLG5hbWU6XCJSZWdpb25Mb2NhdGlvbk1heFkxXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjAyMClcIjp7dGFnOlwiKDAwMTgsNjAyMClcIix2cjpcIlNMXCIsbmFtZTpcIlJlZmVyZW5jZVBpeGVsWDBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDIyKVwiOnt0YWc6XCIoMDAxOCw2MDIyKVwiLHZyOlwiU0xcIixuYW1lOlwiUmVmZXJlbmNlUGl4ZWxZMFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMjQpXCI6e3RhZzpcIigwMDE4LDYwMjQpXCIsdnI6XCJVU1wiLG5hbWU6XCJQaHlzaWNhbFVuaXRzWERpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMjYpXCI6e3RhZzpcIigwMDE4LDYwMjYpXCIsdnI6XCJVU1wiLG5hbWU6XCJQaHlzaWNhbFVuaXRzWURpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMjgpXCI6e3RhZzpcIigwMDE4LDYwMjgpXCIsdnI6XCJGRFwiLG5hbWU6XCJSZWZlcmVuY2VQaXhlbFBoeXNpY2FsVmFsdWVYXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjAyQSlcIjp7dGFnOlwiKDAwMTgsNjAyQSlcIix2cjpcIkZEXCIsbmFtZTpcIlJlZmVyZW5jZVBpeGVsUGh5c2ljYWxWYWx1ZVlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDJDKVwiOnt0YWc6XCIoMDAxOCw2MDJDKVwiLHZyOlwiRkRcIixuYW1lOlwiUGh5c2ljYWxEZWx0YVhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDJFKVwiOnt0YWc6XCIoMDAxOCw2MDJFKVwiLHZyOlwiRkRcIixuYW1lOlwiUGh5c2ljYWxEZWx0YVlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDMwKVwiOnt0YWc6XCIoMDAxOCw2MDMwKVwiLHZyOlwiVUxcIixuYW1lOlwiVHJhbnNkdWNlckZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMzEpXCI6e3RhZzpcIigwMDE4LDYwMzEpXCIsdnI6XCJDU1wiLG5hbWU6XCJUcmFuc2R1Y2VyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMzIpXCI6e3RhZzpcIigwMDE4LDYwMzIpXCIsdnI6XCJVTFwiLG5hbWU6XCJQdWxzZVJlcGV0aXRpb25GcmVxdWVuY3lcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDM0KVwiOnt0YWc6XCIoMDAxOCw2MDM0KVwiLHZyOlwiRkRcIixuYW1lOlwiRG9wcGxlckNvcnJlY3Rpb25BbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwMzYpXCI6e3RhZzpcIigwMDE4LDYwMzYpXCIsdnI6XCJGRFwiLG5hbWU6XCJTdGVlcmluZ0FuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjAzOSlcIjp7dGFnOlwiKDAwMTgsNjAzOSlcIix2cjpcIlNMXCIsbmFtZTpcIkRvcHBsZXJTYW1wbGVWb2x1bWVYUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDNCKVwiOnt0YWc6XCIoMDAxOCw2MDNCKVwiLHZyOlwiU0xcIixuYW1lOlwiRG9wcGxlclNhbXBsZVZvbHVtZVlQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwM0QpXCI6e3RhZzpcIigwMDE4LDYwM0QpXCIsdnI6XCJTTFwiLG5hbWU6XCJUTUxpbmVQb3NpdGlvblgwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjAzRilcIjp7dGFnOlwiKDAwMTgsNjAzRilcIix2cjpcIlNMXCIsbmFtZTpcIlRNTGluZVBvc2l0aW9uWTBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDQxKVwiOnt0YWc6XCIoMDAxOCw2MDQxKVwiLHZyOlwiU0xcIixuYW1lOlwiVE1MaW5lUG9zaXRpb25YMVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwNDMpXCI6e3RhZzpcIigwMDE4LDYwNDMpXCIsdnI6XCJTTFwiLG5hbWU6XCJUTUxpbmVQb3NpdGlvblkxXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjA0NClcIjp7dGFnOlwiKDAwMTgsNjA0NClcIix2cjpcIlVTXCIsbmFtZTpcIlBpeGVsQ29tcG9uZW50T3JnYW5pemF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjA0NilcIjp7dGFnOlwiKDAwMTgsNjA0NilcIix2cjpcIlVMXCIsbmFtZTpcIlBpeGVsQ29tcG9uZW50TWFza1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwNDgpXCI6e3RhZzpcIigwMDE4LDYwNDgpXCIsdnI6XCJVTFwiLG5hbWU6XCJQaXhlbENvbXBvbmVudFJhbmdlU3RhcnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDRBKVwiOnt0YWc6XCIoMDAxOCw2MDRBKVwiLHZyOlwiVUxcIixuYW1lOlwiUGl4ZWxDb21wb25lbnRSYW5nZVN0b3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDRDKVwiOnt0YWc6XCIoMDAxOCw2MDRDKVwiLHZyOlwiVVNcIixuYW1lOlwiUGl4ZWxDb21wb25lbnRQaHlzaWNhbFVuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjA0RSlcIjp7dGFnOlwiKDAwMTgsNjA0RSlcIix2cjpcIlVTXCIsbmFtZTpcIlBpeGVsQ29tcG9uZW50RGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDUwKVwiOnt0YWc6XCIoMDAxOCw2MDUwKVwiLHZyOlwiVUxcIixuYW1lOlwiTnVtYmVyT2ZUYWJsZUJyZWFrUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjA1MilcIjp7dGFnOlwiKDAwMTgsNjA1MilcIix2cjpcIlVMXCIsbmFtZTpcIlRhYmxlT2ZYQnJlYWtQb2ludHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDYwNTQpXCI6e3RhZzpcIigwMDE4LDYwNTQpXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWJsZU9mWUJyZWFrUG9pbnRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDU2KVwiOnt0YWc6XCIoMDAxOCw2MDU2KVwiLHZyOlwiVUxcIixuYW1lOlwiTnVtYmVyT2ZUYWJsZUVudHJpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDU4KVwiOnt0YWc6XCIoMDAxOCw2MDU4KVwiLHZyOlwiVUxcIixuYW1lOlwiVGFibGVPZlBpeGVsVmFsdWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw2MDVBKVwiOnt0YWc6XCIoMDAxOCw2MDVBKVwiLHZyOlwiRkxcIixuYW1lOlwiVGFibGVPZlBhcmFtZXRlclZhbHVlc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNjA2MClcIjp7dGFnOlwiKDAwMTgsNjA2MClcIix2cjpcIkZMXCIsbmFtZTpcIlJXYXZlVGltZVZlY3RvclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwMClcIjp7dGFnOlwiKDAwMTgsNzAwMClcIix2cjpcIkNTXCIsbmFtZTpcIkRldGVjdG9yQ29uZGl0aW9uc05vbWluYWxGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwMSlcIjp7dGFnOlwiKDAwMTgsNzAwMSlcIix2cjpcIkRTXCIsbmFtZTpcIkRldGVjdG9yVGVtcGVyYXR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDA0KVwiOnt0YWc6XCIoMDAxOCw3MDA0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGV0ZWN0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwNSlcIjp7dGFnOlwiKDAwMTgsNzAwNSlcIix2cjpcIkNTXCIsbmFtZTpcIkRldGVjdG9yQ29uZmlndXJhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMDYpXCI6e3RhZzpcIigwMDE4LDcwMDYpXCIsdnI6XCJMVFwiLG5hbWU6XCJEZXRlY3RvckRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwOClcIjp7dGFnOlwiKDAwMTgsNzAwOClcIix2cjpcIkxUXCIsbmFtZTpcIkRldGVjdG9yTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMEEpXCI6e3RhZzpcIigwMDE4LDcwMEEpXCIsdnI6XCJTSFwiLG5hbWU6XCJEZXRlY3RvcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwQylcIjp7dGFnOlwiKDAwMTgsNzAwQylcIix2cjpcIkRBXCIsbmFtZTpcIkRhdGVPZkxhc3REZXRlY3RvckNhbGlicmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAwRSlcIjp7dGFnOlwiKDAwMTgsNzAwRSlcIix2cjpcIlRNXCIsbmFtZTpcIlRpbWVPZkxhc3REZXRlY3RvckNhbGlicmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAxMClcIjp7dGFnOlwiKDAwMTgsNzAxMClcIix2cjpcIklTXCIsbmFtZTpcIkV4cG9zdXJlc09uRGV0ZWN0b3JTaW5jZUxhc3RDYWxpYnJhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMTEpXCI6e3RhZzpcIigwMDE4LDcwMTEpXCIsdnI6XCJJU1wiLG5hbWU6XCJFeHBvc3VyZXNPbkRldGVjdG9yU2luY2VNYW51ZmFjdHVyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDEyKVwiOnt0YWc6XCIoMDAxOCw3MDEyKVwiLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JUaW1lU2luY2VMYXN0RXhwb3N1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDE0KVwiOnt0YWc6XCIoMDAxOCw3MDE0KVwiLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JBY3RpdmVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAxNilcIjp7dGFnOlwiKDAwMTgsNzAxNilcIix2cjpcIkRTXCIsbmFtZTpcIkRldGVjdG9yQWN0aXZhdGlvbk9mZnNldEZyb21FeHBvc3VyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMUEpXCI6e3RhZzpcIigwMDE4LDcwMUEpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvckJpbm5pbmdcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDIwKVwiOnt0YWc6XCIoMDAxOCw3MDIwKVwiLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JFbGVtZW50UGh5c2ljYWxTaXplXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAyMilcIjp7dGFnOlwiKDAwMTgsNzAyMilcIix2cjpcIkRTXCIsbmFtZTpcIkRldGVjdG9yRWxlbWVudFNwYWNpbmdcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDI0KVwiOnt0YWc6XCIoMDAxOCw3MDI0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGV0ZWN0b3JBY3RpdmVTaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMjYpXCI6e3RhZzpcIigwMDE4LDcwMjYpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvckFjdGl2ZURpbWVuc2lvbnNcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMjgpXCI6e3RhZzpcIigwMDE4LDcwMjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvckFjdGl2ZU9yaWdpblwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMkEpXCI6e3RhZzpcIigwMDE4LDcwMkEpXCIsdnI6XCJMT1wiLG5hbWU6XCJEZXRlY3Rvck1hbnVmYWN0dXJlck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDJCKVwiOnt0YWc6XCIoMDAxOCw3MDJCKVwiLHZyOlwiTE9cIixuYW1lOlwiRGV0ZWN0b3JNYW51ZmFjdHVyZXJNb2RlbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDMwKVwiOnt0YWc6XCIoMDAxOCw3MDMwKVwiLHZyOlwiRFNcIixuYW1lOlwiRmllbGRPZlZpZXdPcmlnaW5cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDMyKVwiOnt0YWc6XCIoMDAxOCw3MDMyKVwiLHZyOlwiRFNcIixuYW1lOlwiRmllbGRPZlZpZXdSb3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwMzQpXCI6e3RhZzpcIigwMDE4LDcwMzQpXCIsdnI6XCJDU1wiLG5hbWU6XCJGaWVsZE9mVmlld0hvcml6b250YWxGbGlwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAzNilcIjp7dGFnOlwiKDAwMTgsNzAzNilcIix2cjpcIkZMXCIsbmFtZTpcIlBpeGVsRGF0YUFyZWFPcmlnaW5SZWxhdGl2ZVRvRk9WXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzAzOClcIjp7dGFnOlwiKDAwMTgsNzAzOClcIix2cjpcIkZMXCIsbmFtZTpcIlBpeGVsRGF0YUFyZWFSb3RhdGlvbkFuZ2xlUmVsYXRpdmVUb0ZPVlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNDApXCI6e3RhZzpcIigwMDE4LDcwNDApXCIsdnI6XCJMVFwiLG5hbWU6XCJHcmlkQWJzb3JiaW5nTWF0ZXJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDQxKVwiOnt0YWc6XCIoMDAxOCw3MDQxKVwiLHZyOlwiTFRcIixuYW1lOlwiR3JpZFNwYWNpbmdNYXRlcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNDIpXCI6e3RhZzpcIigwMDE4LDcwNDIpXCIsdnI6XCJEU1wiLG5hbWU6XCJHcmlkVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzA0NClcIjp7dGFnOlwiKDAwMTgsNzA0NClcIix2cjpcIkRTXCIsbmFtZTpcIkdyaWRQaXRjaFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNDYpXCI6e3RhZzpcIigwMDE4LDcwNDYpXCIsdnI6XCJJU1wiLG5hbWU6XCJHcmlkQXNwZWN0UmF0aW9cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDQ4KVwiOnt0YWc6XCIoMDAxOCw3MDQ4KVwiLHZyOlwiRFNcIixuYW1lOlwiR3JpZFBlcmlvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNEMpXCI6e3RhZzpcIigwMDE4LDcwNEMpXCIsdnI6XCJEU1wiLG5hbWU6XCJHcmlkRm9jYWxEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNTApXCI6e3RhZzpcIigwMDE4LDcwNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJGaWx0ZXJNYXRlcmlhbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsNzA1MilcIjp7dGFnOlwiKDAwMTgsNzA1MilcIix2cjpcIkRTXCIsbmFtZTpcIkZpbHRlclRoaWNrbmVzc01pbmltdW1cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNTQpXCI6e3RhZzpcIigwMDE4LDcwNTQpXCIsdnI6XCJEU1wiLG5hbWU6XCJGaWx0ZXJUaGlja25lc3NNYXhpbXVtXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDU2KVwiOnt0YWc6XCIoMDAxOCw3MDU2KVwiLHZyOlwiRkxcIixuYW1lOlwiRmlsdGVyQmVhbVBhdGhMZW5ndGhNaW5pbXVtXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDU4KVwiOnt0YWc6XCIoMDAxOCw3MDU4KVwiLHZyOlwiRkxcIixuYW1lOlwiRmlsdGVyQmVhbVBhdGhMZW5ndGhNYXhpbXVtXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDYwKVwiOnt0YWc6XCIoMDAxOCw3MDYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhwb3N1cmVDb250cm9sTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDcwNjIpXCI6e3RhZzpcIigwMDE4LDcwNjIpXCIsdnI6XCJMVFwiLG5hbWU6XCJFeHBvc3VyZUNvbnRyb2xNb2RlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDY0KVwiOnt0YWc6XCIoMDAxOCw3MDY0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhwb3N1cmVTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw3MDY1KVwiOnt0YWc6XCIoMDAxOCw3MDY1KVwiLHZyOlwiRFNcIixuYW1lOlwiUGhvdG90aW1lclNldHRpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw4MTUwKVwiOnt0YWc6XCIoMDAxOCw4MTUwKVwiLHZyOlwiRFNcIixuYW1lOlwiRXhwb3N1cmVUaW1lSW51U1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDgxNTEpXCI6e3RhZzpcIigwMDE4LDgxNTEpXCIsdnI6XCJEU1wiLG5hbWU6XCJYUmF5VHViZUN1cnJlbnRJbnVBXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAwNClcIjp7dGFnOlwiKDAwMTgsOTAwNClcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnRlbnRRdWFsaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAwNSlcIjp7dGFnOlwiKDAwMTgsOTAwNSlcIix2cjpcIlNIXCIsbmFtZTpcIlB1bHNlU2VxdWVuY2VOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAwNilcIjp7dGFnOlwiKDAwMTgsOTAwNilcIix2cjpcIlNRXCIsbmFtZTpcIk1SSW1hZ2luZ01vZGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDA4KVwiOnt0YWc6XCIoMDAxOCw5MDA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiRWNob1B1bHNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDA5KVwiOnt0YWc6XCIoMDAxOCw5MDA5KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW52ZXJzaW9uUmVjb3ZlcnlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDEwKVwiOnt0YWc6XCIoMDAxOCw5MDEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRmxvd0NvbXBlbnNhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMTEpXCI6e3RhZzpcIigwMDE4LDkwMTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJNdWx0aXBsZVNwaW5FY2hvXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAxMilcIjp7dGFnOlwiKDAwMTgsOTAxMilcIix2cjpcIkNTXCIsbmFtZTpcIk11bHRpUGxhbmFyRXhjaXRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMTQpXCI6e3RhZzpcIigwMDE4LDkwMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaGFzZUNvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAxNSlcIjp7dGFnOlwiKDAwMTgsOTAxNSlcIix2cjpcIkNTXCIsbmFtZTpcIlRpbWVPZkZsaWdodENvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAxNilcIjp7dGFnOlwiKDAwMTgsOTAxNilcIix2cjpcIkNTXCIsbmFtZTpcIlNwb2lsaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAxNylcIjp7dGFnOlwiKDAwMTgsOTAxNylcIix2cjpcIkNTXCIsbmFtZTpcIlN0ZWFkeVN0YXRlUHVsc2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMTgpXCI6e3RhZzpcIigwMDE4LDkwMTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJFY2hvUGxhbmFyUHVsc2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMTkpXCI6e3RhZzpcIigwMDE4LDkwMTkpXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWdBbmdsZUZpcnN0QXhpc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMjApXCI6e3RhZzpcIigwMDE4LDkwMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJNYWduZXRpemF0aW9uVHJhbnNmZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDIxKVwiOnt0YWc6XCIoMDAxOCw5MDIxKVwiLHZyOlwiQ1NcIixuYW1lOlwiVDJQcmVwYXJhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMjIpXCI6e3RhZzpcIigwMDE4LDkwMjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJCbG9vZFNpZ25hbE51bGxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDI0KVwiOnt0YWc6XCIoMDAxOCw5MDI0KVwiLHZyOlwiQ1NcIixuYW1lOlwiU2F0dXJhdGlvblJlY292ZXJ5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAyNSlcIjp7dGFnOlwiKDAwMTgsOTAyNSlcIix2cjpcIkNTXCIsbmFtZTpcIlNwZWN0cmFsbHlTZWxlY3RlZFN1cHByZXNzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAyNilcIjp7dGFnOlwiKDAwMTgsOTAyNilcIix2cjpcIkNTXCIsbmFtZTpcIlNwZWN0cmFsbHlTZWxlY3RlZEV4Y2l0YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDI3KVwiOnt0YWc6XCIoMDAxOCw5MDI3KVwiLHZyOlwiQ1NcIixuYW1lOlwiU3BhdGlhbFByZXNhdHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDI4KVwiOnt0YWc6XCIoMDAxOCw5MDI4KVwiLHZyOlwiQ1NcIixuYW1lOlwiVGFnZ2luZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMjkpXCI6e3RhZzpcIigwMDE4LDkwMjkpXCIsdnI6XCJDU1wiLG5hbWU6XCJPdmVyc2FtcGxpbmdQaGFzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMzApXCI6e3RhZzpcIigwMDE4LDkwMzApXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWdTcGFjaW5nRmlyc3REaW1lbnNpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDMyKVwiOnt0YWc6XCIoMDAxOCw5MDMyKVwiLHZyOlwiQ1NcIixuYW1lOlwiR2VvbWV0cnlPZktTcGFjZVRyYXZlcnNhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwMzMpXCI6e3RhZzpcIigwMDE4LDkwMzMpXCIsdnI6XCJDU1wiLG5hbWU6XCJTZWdtZW50ZWRLU3BhY2VUcmF2ZXJzYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDM0KVwiOnt0YWc6XCIoMDAxOCw5MDM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVjdGlsaW5lYXJQaGFzZUVuY29kZVJlb3JkZXJpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDM1KVwiOnt0YWc6XCIoMDAxOCw5MDM1KVwiLHZyOlwiRkRcIixuYW1lOlwiVGFnVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAzNilcIjp7dGFnOlwiKDAwMTgsOTAzNilcIix2cjpcIkNTXCIsbmFtZTpcIlBhcnRpYWxGb3VyaWVyRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTAzNylcIjp7dGFnOlwiKDAwMTgsOTAzNylcIix2cjpcIkNTXCIsbmFtZTpcIkNhcmRpYWNTeW5jaHJvbml6YXRpb25UZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDQxKVwiOnt0YWc6XCIoMDAxOCw5MDQxKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVjZWl2ZUNvaWxNYW51ZmFjdHVyZXJOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA0MilcIjp7dGFnOlwiKDAwMTgsOTA0MilcIix2cjpcIlNRXCIsbmFtZTpcIk1SUmVjZWl2ZUNvaWxTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNDMpXCI6e3RhZzpcIigwMDE4LDkwNDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWNlaXZlQ29pbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDQ0KVwiOnt0YWc6XCIoMDAxOCw5MDQ0KVwiLHZyOlwiQ1NcIixuYW1lOlwiUXVhZHJhdHVyZVJlY2VpdmVDb2lsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA0NSlcIjp7dGFnOlwiKDAwMTgsOTA0NSlcIix2cjpcIlNRXCIsbmFtZTpcIk11bHRpQ29pbERlZmluaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNDYpXCI6e3RhZzpcIigwMDE4LDkwNDYpXCIsdnI6XCJMT1wiLG5hbWU6XCJNdWx0aUNvaWxDb25maWd1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA0NylcIjp7dGFnOlwiKDAwMTgsOTA0NylcIix2cjpcIlNIXCIsbmFtZTpcIk11bHRpQ29pbEVsZW1lbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA0OClcIjp7dGFnOlwiKDAwMTgsOTA0OClcIix2cjpcIkNTXCIsbmFtZTpcIk11bHRpQ29pbEVsZW1lbnRVc2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA0OSlcIjp7dGFnOlwiKDAwMTgsOTA0OSlcIix2cjpcIlNRXCIsbmFtZTpcIk1SVHJhbnNtaXRDb2lsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDUwKVwiOnt0YWc6XCIoMDAxOCw5MDUwKVwiLHZyOlwiTE9cIixuYW1lOlwiVHJhbnNtaXRDb2lsTWFudWZhY3R1cmVyTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNTEpXCI6e3RhZzpcIigwMDE4LDkwNTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJUcmFuc21pdENvaWxUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA1MilcIjp7dGFnOlwiKDAwMTgsOTA1MilcIix2cjpcIkZEXCIsbmFtZTpcIlNwZWN0cmFsV2lkdGhcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNTMpXCI6e3RhZzpcIigwMDE4LDkwNTMpXCIsdnI6XCJGRFwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0UmVmZXJlbmNlXCIsdm06XCIxLTJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDU0KVwiOnt0YWc6XCIoMDAxOCw5MDU0KVwiLHZyOlwiQ1NcIixuYW1lOlwiVm9sdW1lTG9jYWxpemF0aW9uVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA1OClcIjp7dGFnOlwiKDAwMTgsOTA1OClcIix2cjpcIlVTXCIsbmFtZTpcIk1SQWNxdWlzaXRpb25GcmVxdWVuY3lFbmNvZGluZ1N0ZXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA1OSlcIjp7dGFnOlwiKDAwMTgsOTA1OSlcIix2cjpcIkNTXCIsbmFtZTpcIkRlY291cGxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDYwKVwiOnt0YWc6XCIoMDAxOCw5MDYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRGVjb3VwbGVkTnVjbGV1c1wiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA2MSlcIjp7dGFnOlwiKDAwMTgsOTA2MSlcIix2cjpcIkZEXCIsbmFtZTpcIkRlY291cGxpbmdGcmVxdWVuY3lcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNjIpXCI6e3RhZzpcIigwMDE4LDkwNjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWNvdXBsaW5nTWV0aG9kXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA2MylcIjp7dGFnOlwiKDAwMTgsOTA2MylcIix2cjpcIkZEXCIsbmFtZTpcIkRlY291cGxpbmdDaGVtaWNhbFNoaWZ0UmVmZXJlbmNlXCIsdm06XCIxLTJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDY0KVwiOnt0YWc6XCIoMDAxOCw5MDY0KVwiLHZyOlwiQ1NcIixuYW1lOlwiS1NwYWNlRmlsdGVyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA2NSlcIjp7dGFnOlwiKDAwMTgsOTA2NSlcIix2cjpcIkNTXCIsbmFtZTpcIlRpbWVEb21haW5GaWx0ZXJpbmdcIix2bTpcIjEtMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNjYpXCI6e3RhZzpcIigwMDE4LDkwNjYpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZlplcm9GaWxsc1wiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA2NylcIjp7dGFnOlwiKDAwMTgsOTA2NylcIix2cjpcIkNTXCIsbmFtZTpcIkJhc2VsaW5lQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNjkpXCI6e3RhZzpcIigwMDE4LDkwNjkpXCIsdnI6XCJGRFwiLG5hbWU6XCJQYXJhbGxlbFJlZHVjdGlvbkZhY3RvckluUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDcwKVwiOnt0YWc6XCIoMDAxOCw5MDcwKVwiLHZyOlwiRkRcIixuYW1lOlwiQ2FyZGlhY1JSSW50ZXJ2YWxTcGVjaWZpZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDczKVwiOnt0YWc6XCIoMDAxOCw5MDczKVwiLHZyOlwiRkRcIixuYW1lOlwiQWNxdWlzaXRpb25EdXJhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNzQpXCI6e3RhZzpcIigwMDE4LDkwNzQpXCIsdnI6XCJEVFwiLG5hbWU6XCJGcmFtZUFjcXVpc2l0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDc1KVwiOnt0YWc6XCIoMDAxOCw5MDc1KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGlmZnVzaW9uRGlyZWN0aW9uYWxpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDc2KVwiOnt0YWc6XCIoMDAxOCw5MDc2KVwiLHZyOlwiU1FcIixuYW1lOlwiRGlmZnVzaW9uR3JhZGllbnREaXJlY3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwNzcpXCI6e3RhZzpcIigwMDE4LDkwNzcpXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXJhbGxlbEFjcXVpc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA3OClcIjp7dGFnOlwiKDAwMTgsOTA3OClcIix2cjpcIkNTXCIsbmFtZTpcIlBhcmFsbGVsQWNxdWlzaXRpb25UZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDc5KVwiOnt0YWc6XCIoMDAxOCw5MDc5KVwiLHZyOlwiRkRcIixuYW1lOlwiSW52ZXJzaW9uVGltZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwODApXCI6e3RhZzpcIigwMDE4LDkwODApXCIsdnI6XCJTVFwiLG5hbWU6XCJNZXRhYm9saXRlTWFwRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDgxKVwiOnt0YWc6XCIoMDAxOCw5MDgxKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGFydGlhbEZvdXJpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDgyKVwiOnt0YWc6XCIoMDAxOCw5MDgyKVwiLHZyOlwiRkRcIixuYW1lOlwiRWZmZWN0aXZlRWNob1RpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDgzKVwiOnt0YWc6XCIoMDAxOCw5MDgzKVwiLHZyOlwiU1FcIixuYW1lOlwiTWV0YWJvbGl0ZU1hcENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwODQpXCI6e3RhZzpcIigwMDE4LDkwODQpXCIsdnI6XCJTUVwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDg1KVwiOnt0YWc6XCIoMDAxOCw5MDg1KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2FyZGlhY1NpZ25hbFNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwODcpXCI6e3RhZzpcIigwMDE4LDkwODcpXCIsdnI6XCJGRFwiLG5hbWU6XCJEaWZmdXNpb25CVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDg5KVwiOnt0YWc6XCIoMDAxOCw5MDg5KVwiLHZyOlwiRkRcIixuYW1lOlwiRGlmZnVzaW9uR3JhZGllbnRPcmllbnRhdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwOTApXCI6e3RhZzpcIigwMDE4LDkwOTApXCIsdnI6XCJGRFwiLG5hbWU6XCJWZWxvY2l0eUVuY29kaW5nRGlyZWN0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTA5MSlcIjp7dGFnOlwiKDAwMTgsOTA5MSlcIix2cjpcIkZEXCIsbmFtZTpcIlZlbG9jaXR5RW5jb2RpbmdNaW5pbXVtVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDkyKVwiOnt0YWc6XCIoMDAxOCw5MDkyKVwiLHZyOlwiU1FcIixuYW1lOlwiVmVsb2NpdHlFbmNvZGluZ0FjcXVpc2l0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDkzKVwiOnt0YWc6XCIoMDAxOCw5MDkzKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZLU3BhY2VUcmFqZWN0b3JpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MDk0KVwiOnt0YWc6XCIoMDAxOCw5MDk0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ292ZXJhZ2VPZktTcGFjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwOTUpXCI6e3RhZzpcIigwMDE4LDkwOTUpXCIsdnI6XCJVTFwiLG5hbWU6XCJTcGVjdHJvc2NvcHlBY3F1aXNpdGlvblBoYXNlUm93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkwOTgpXCI6e3RhZzpcIigwMDE4LDkwOTgpXCIsdnI6XCJGRFwiLG5hbWU6XCJUcmFuc21pdHRlckZyZXF1ZW5jeVwiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEwMClcIjp7dGFnOlwiKDAwMTgsOTEwMClcIix2cjpcIkNTXCIsbmFtZTpcIlJlc29uYW50TnVjbGV1c1wiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEwMSlcIjp7dGFnOlwiKDAwMTgsOTEwMSlcIix2cjpcIkNTXCIsbmFtZTpcIkZyZXF1ZW5jeUNvcnJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTAzKVwiOnt0YWc6XCIoMDAxOCw5MTAzKVwiLHZyOlwiU1FcIixuYW1lOlwiTVJTcGVjdHJvc2NvcHlGT1ZHZW9tZXRyeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEwNClcIjp7dGFnOlwiKDAwMTgsOTEwNClcIix2cjpcIkZEXCIsbmFtZTpcIlNsYWJUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTA1KVwiOnt0YWc6XCIoMDAxOCw5MTA1KVwiLHZyOlwiRkRcIixuYW1lOlwiU2xhYk9yaWVudGF0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEwNilcIjp7dGFnOlwiKDAwMTgsOTEwNilcIix2cjpcIkZEXCIsbmFtZTpcIk1pZFNsYWJQb3NpdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxMDcpXCI6e3RhZzpcIigwMDE4LDkxMDcpXCIsdnI6XCJTUVwiLG5hbWU6XCJNUlNwYXRpYWxTYXR1cmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTEyKVwiOnt0YWc6XCIoMDAxOCw5MTEyKVwiLHZyOlwiU1FcIixuYW1lOlwiTVJUaW1pbmdBbmRSZWxhdGVkUGFyYW1ldGVyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTExNClcIjp7dGFnOlwiKDAwMTgsOTExNClcIix2cjpcIlNRXCIsbmFtZTpcIk1SRWNob1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTExNSlcIjp7dGFnOlwiKDAwMTgsOTExNSlcIix2cjpcIlNRXCIsbmFtZTpcIk1STW9kaWZpZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxMTcpXCI6e3RhZzpcIigwMDE4LDkxMTcpXCIsdnI6XCJTUVwiLG5hbWU6XCJNUkRpZmZ1c2lvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTExOClcIjp7dGFnOlwiKDAwMTgsOTExOClcIix2cjpcIlNRXCIsbmFtZTpcIkNhcmRpYWNTeW5jaHJvbml6YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxMTkpXCI6e3RhZzpcIigwMDE4LDkxMTkpXCIsdnI6XCJTUVwiLG5hbWU6XCJNUkF2ZXJhZ2VzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTI1KVwiOnt0YWc6XCIoMDAxOCw5MTI1KVwiLHZyOlwiU1FcIixuYW1lOlwiTVJGT1ZHZW9tZXRyeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEyNilcIjp7dGFnOlwiKDAwMTgsOTEyNilcIix2cjpcIlNRXCIsbmFtZTpcIlZvbHVtZUxvY2FsaXphdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTEyNylcIjp7dGFnOlwiKDAwMTgsOTEyNylcIix2cjpcIlVMXCIsbmFtZTpcIlNwZWN0cm9zY29weUFjcXVpc2l0aW9uRGF0YUNvbHVtbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTQ3KVwiOnt0YWc6XCIoMDAxOCw5MTQ3KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGlmZnVzaW9uQW5pc290cm9weVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTUxKVwiOnt0YWc6XCIoMDAxOCw5MTUxKVwiLHZyOlwiRFRcIixuYW1lOlwiRnJhbWVSZWZlcmVuY2VEYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNTIpXCI6e3RhZzpcIigwMDE4LDkxNTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJNUk1ldGFib2xpdGVNYXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNTUpXCI6e3RhZzpcIigwMDE4LDkxNTUpXCIsdnI6XCJGRFwiLG5hbWU6XCJQYXJhbGxlbFJlZHVjdGlvbkZhY3Rvck91dE9mUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTU5KVwiOnt0YWc6XCIoMDAxOCw5MTU5KVwiLHZyOlwiVUxcIixuYW1lOlwiU3BlY3Ryb3Njb3B5QWNxdWlzaXRpb25PdXRPZlBsYW5lUGhhc2VTdGVwc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNjgpXCI6e3RhZzpcIigwMDE4LDkxNjgpXCIsdnI6XCJGRFwiLG5hbWU6XCJQYXJhbGxlbFJlZHVjdGlvbkZhY3RvclNlY29uZEluUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTY5KVwiOnt0YWc6XCIoMDAxOCw5MTY5KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2FyZGlhY0JlYXRSZWplY3Rpb25UZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTcwKVwiOnt0YWc6XCIoMDAxOCw5MTcwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVzcGlyYXRvcnlNb3Rpb25Db21wZW5zYXRpb25UZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTcxKVwiOnt0YWc6XCIoMDAxOCw5MTcxKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVzcGlyYXRvcnlTaWduYWxTb3VyY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTcyKVwiOnt0YWc6XCIoMDAxOCw5MTcyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQnVsa01vdGlvbkNvbXBlbnNhdGlvblRlY2huaXF1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNzMpXCI6e3RhZzpcIigwMDE4LDkxNzMpXCIsdnI6XCJDU1wiLG5hbWU6XCJCdWxrTW90aW9uU2lnbmFsU291cmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTE3NClcIjp7dGFnOlwiKDAwMTgsOTE3NClcIix2cjpcIkNTXCIsbmFtZTpcIkFwcGxpY2FibGVTYWZldHlTdGFuZGFyZEFnZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNzUpXCI6e3RhZzpcIigwMDE4LDkxNzUpXCIsdnI6XCJMT1wiLG5hbWU6XCJBcHBsaWNhYmxlU2FmZXR5U3RhbmRhcmREZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNzYpXCI6e3RhZzpcIigwMDE4LDkxNzYpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGVyYXRpbmdNb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTc3KVwiOnt0YWc6XCIoMDAxOCw5MTc3KVwiLHZyOlwiQ1NcIixuYW1lOlwiT3BlcmF0aW5nTW9kZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTc4KVwiOnt0YWc6XCIoMDAxOCw5MTc4KVwiLHZyOlwiQ1NcIixuYW1lOlwiT3BlcmF0aW5nTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxNzkpXCI6e3RhZzpcIigwMDE4LDkxNzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJTcGVjaWZpY0Fic29ycHRpb25SYXRlRGVmaW5pdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxODApXCI6e3RhZzpcIigwMDE4LDkxODApXCIsdnI6XCJDU1wiLG5hbWU6XCJHcmFkaWVudE91dHB1dFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTgxKVwiOnt0YWc6XCIoMDAxOCw5MTgxKVwiLHZyOlwiRkRcIixuYW1lOlwiU3BlY2lmaWNBYnNvcnB0aW9uUmF0ZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTE4MilcIjp7dGFnOlwiKDAwMTgsOTE4MilcIix2cjpcIkZEXCIsbmFtZTpcIkdyYWRpZW50T3V0cHV0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTE4MylcIjp7dGFnOlwiKDAwMTgsOTE4MylcIix2cjpcIkNTXCIsbmFtZTpcIkZsb3dDb21wZW5zYXRpb25EaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTg0KVwiOnt0YWc6XCIoMDAxOCw5MTg0KVwiLHZyOlwiRkRcIixuYW1lOlwiVGFnZ2luZ0RlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTE4NSlcIjp7dGFnOlwiKDAwMTgsOTE4NSlcIix2cjpcIlNUXCIsbmFtZTpcIlJlc3BpcmF0b3J5TW90aW9uQ29tcGVuc2F0aW9uVGVjaG5pcXVlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MTg2KVwiOnt0YWc6XCIoMDAxOCw5MTg2KVwiLHZyOlwiU0hcIixuYW1lOlwiUmVzcGlyYXRvcnlTaWduYWxTb3VyY2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxOTcpXCI6e3RhZzpcIigwMDE4LDkxOTcpXCIsdnI6XCJTUVwiLG5hbWU6XCJNUlZlbG9jaXR5RW5jb2RpbmdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkxOTgpXCI6e3RhZzpcIigwMDE4LDkxOTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJGaXJzdE9yZGVyUGhhc2VDb3JyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTE5OSlcIjp7dGFnOlwiKDAwMTgsOTE5OSlcIix2cjpcIkNTXCIsbmFtZTpcIldhdGVyUmVmZXJlbmNlZFBoYXNlQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyMDApXCI6e3RhZzpcIigwMDE4LDkyMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJNUlNwZWN0cm9zY29weUFjcXVpc2l0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyMTQpXCI6e3RhZzpcIigwMDE4LDkyMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXNwaXJhdG9yeUN5Y2xlUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjE3KVwiOnt0YWc6XCIoMDAxOCw5MjE3KVwiLHZyOlwiRkRcIixuYW1lOlwiVmVsb2NpdHlFbmNvZGluZ01heGltdW1WYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyMTgpXCI6e3RhZzpcIigwMDE4LDkyMTgpXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWdTcGFjaW5nU2Vjb25kRGltZW5zaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTIxOSlcIjp7dGFnOlwiKDAwMTgsOTIxOSlcIix2cjpcIlNTXCIsbmFtZTpcIlRhZ0FuZ2xlU2Vjb25kQXhpc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyMjApXCI6e3RhZzpcIigwMDE4LDkyMjApXCIsdnI6XCJGRFwiLG5hbWU6XCJGcmFtZUFjcXVpc2l0aW9uRHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjI2KVwiOnt0YWc6XCIoMDAxOCw5MjI2KVwiLHZyOlwiU1FcIixuYW1lOlwiTVJJbWFnZUZyYW1lVHlwZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTIyNylcIjp7dGFnOlwiKDAwMTgsOTIyNylcIix2cjpcIlNRXCIsbmFtZTpcIk1SU3BlY3Ryb3Njb3B5RnJhbWVUeXBlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjMxKVwiOnt0YWc6XCIoMDAxOCw5MjMxKVwiLHZyOlwiVVNcIixuYW1lOlwiTVJBY3F1aXNpdGlvblBoYXNlRW5jb2RpbmdTdGVwc0luUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjMyKVwiOnt0YWc6XCIoMDAxOCw5MjMyKVwiLHZyOlwiVVNcIixuYW1lOlwiTVJBY3F1aXNpdGlvblBoYXNlRW5jb2RpbmdTdGVwc091dE9mUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjM0KVwiOnt0YWc6XCIoMDAxOCw5MjM0KVwiLHZyOlwiVUxcIixuYW1lOlwiU3BlY3Ryb3Njb3B5QWNxdWlzaXRpb25QaGFzZUNvbHVtbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjM2KVwiOnt0YWc6XCIoMDAxOCw5MjM2KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2FyZGlhY0N5Y2xlUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjM5KVwiOnt0YWc6XCIoMDAxOCw5MjM5KVwiLHZyOlwiU1FcIixuYW1lOlwiU3BlY2lmaWNBYnNvcnB0aW9uUmF0ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI0MClcIjp7dGFnOlwiKDAwMTgsOTI0MClcIix2cjpcIlVTXCIsbmFtZTpcIlJGRWNob1RyYWluTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI0MSlcIjp7dGFnOlwiKDAwMTgsOTI0MSlcIix2cjpcIlVTXCIsbmFtZTpcIkdyYWRpZW50RWNob1RyYWluTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1MClcIjp7dGFnOlwiKDAwMTgsOTI1MClcIix2cjpcIkNTXCIsbmFtZTpcIkFydGVyaWFsU3BpbkxhYmVsaW5nQ29udHJhc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjUxKVwiOnt0YWc6XCIoMDAxOCw5MjUxKVwiLHZyOlwiU1FcIixuYW1lOlwiTVJBcnRlcmlhbFNwaW5MYWJlbGluZ1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1MilcIjp7dGFnOlwiKDAwMTgsOTI1MilcIix2cjpcIkxPXCIsbmFtZTpcIkFTTFRlY2huaXF1ZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1MylcIjp7dGFnOlwiKDAwMTgsOTI1MylcIix2cjpcIlVTXCIsbmFtZTpcIkFTTFNsYWJOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjU0KVwiOnt0YWc6XCIoMDAxOCw5MjU0KVwiLHZyOlwiRkRcIixuYW1lOlwiQVNMU2xhYlRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyNTUpXCI6e3RhZzpcIigwMDE4LDkyNTUpXCIsdnI6XCJGRFwiLG5hbWU6XCJBU0xTbGFiT3JpZW50YXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjU2KVwiOnt0YWc6XCIoMDAxOCw5MjU2KVwiLHZyOlwiRkRcIixuYW1lOlwiQVNMTWlkU2xhYlBvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1NylcIjp7dGFnOlwiKDAwMTgsOTI1NylcIix2cjpcIkNTXCIsbmFtZTpcIkFTTENvbnRleHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjU4KVwiOnt0YWc6XCIoMDAxOCw5MjU4KVwiLHZyOlwiVUxcIixuYW1lOlwiQVNMUHVsc2VUcmFpbkR1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1OSlcIjp7dGFnOlwiKDAwMTgsOTI1OSlcIix2cjpcIkNTXCIsbmFtZTpcIkFTTENydXNoZXJGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1QSlcIjp7dGFnOlwiKDAwMTgsOTI1QSlcIix2cjpcIkZEXCIsbmFtZTpcIkFTTENydXNoZXJGbG93TGltaXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MjVCKVwiOnt0YWc6XCIoMDAxOCw5MjVCKVwiLHZyOlwiTE9cIixuYW1lOlwiQVNMQ3J1c2hlckRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1QylcIjp7dGFnOlwiKDAwMTgsOTI1QylcIix2cjpcIkNTXCIsbmFtZTpcIkFTTEJvbHVzQ3V0b2ZmRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyNUQpXCI6e3RhZzpcIigwMDE4LDkyNUQpXCIsdnI6XCJTUVwiLG5hbWU6XCJBU0xCb2x1c0N1dG9mZlRpbWluZ1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1RSlcIjp7dGFnOlwiKDAwMTgsOTI1RSlcIix2cjpcIkxPXCIsbmFtZTpcIkFTTEJvbHVzQ3V0b2ZmVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI1RilcIjp7dGFnOlwiKDAwMTgsOTI1RilcIix2cjpcIlVMXCIsbmFtZTpcIkFTTEJvbHVzQ3V0b2ZmRGVsYXlUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI2MClcIjp7dGFnOlwiKDAwMTgsOTI2MClcIix2cjpcIlNRXCIsbmFtZTpcIkFTTFNsYWJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyOTUpXCI6e3RhZzpcIigwMDE4LDkyOTUpXCIsdnI6XCJGRFwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0TWluaW11bUludGVncmF0aW9uTGltaXRJbnBwbVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyOTYpXCI6e3RhZzpcIigwMDE4LDkyOTYpXCIsdnI6XCJGRFwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0TWF4aW11bUludGVncmF0aW9uTGltaXRJbnBwbVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkyOTcpXCI6e3RhZzpcIigwMDE4LDkyOTcpXCIsdnI6XCJDU1wiLG5hbWU6XCJXYXRlclJlZmVyZW5jZUFjcXVpc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTI5OClcIjp7dGFnOlwiKDAwMTgsOTI5OClcIix2cjpcIklTXCIsbmFtZTpcIkVjaG9QZWFrUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzAxKVwiOnt0YWc6XCIoMDAxOCw5MzAxKVwiLHZyOlwiU1FcIixuYW1lOlwiQ1RBY3F1aXNpdGlvblR5cGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMDIpXCI6e3RhZzpcIigwMDE4LDkzMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJBY3F1aXNpdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzAzKVwiOnt0YWc6XCIoMDAxOCw5MzAzKVwiLHZyOlwiRkRcIixuYW1lOlwiVHViZUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMwNClcIjp7dGFnOlwiKDAwMTgsOTMwNClcIix2cjpcIlNRXCIsbmFtZTpcIkNUQWNxdWlzaXRpb25EZXRhaWxzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzA1KVwiOnt0YWc6XCIoMDAxOCw5MzA1KVwiLHZyOlwiRkRcIixuYW1lOlwiUmV2b2x1dGlvblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzA2KVwiOnt0YWc6XCIoMDAxOCw5MzA2KVwiLHZyOlwiRkRcIixuYW1lOlwiU2luZ2xlQ29sbGltYXRpb25XaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMDcpXCI6e3RhZzpcIigwMDE4LDkzMDcpXCIsdnI6XCJGRFwiLG5hbWU6XCJUb3RhbENvbGxpbWF0aW9uV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzA4KVwiOnt0YWc6XCIoMDAxOCw5MzA4KVwiLHZyOlwiU1FcIixuYW1lOlwiQ1RUYWJsZUR5bmFtaWNzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzA5KVwiOnt0YWc6XCIoMDAxOCw5MzA5KVwiLHZyOlwiRkRcIixuYW1lOlwiVGFibGVTcGVlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMTApXCI6e3RhZzpcIigwMDE4LDkzMTApXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWJsZUZlZWRQZXJSb3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMTEpXCI6e3RhZzpcIigwMDE4LDkzMTEpXCIsdnI6XCJGRFwiLG5hbWU6XCJTcGlyYWxQaXRjaEZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMTIpXCI6e3RhZzpcIigwMDE4LDkzMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJDVEdlb21ldHJ5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzEzKVwiOnt0YWc6XCIoMDAxOCw5MzEzKVwiLHZyOlwiRkRcIixuYW1lOlwiRGF0YUNvbGxlY3Rpb25DZW50ZXJQYXRpZW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMxNClcIjp7dGFnOlwiKDAwMTgsOTMxNClcIix2cjpcIlNRXCIsbmFtZTpcIkNUUmVjb25zdHJ1Y3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMTUpXCI6e3RhZzpcIigwMDE4LDkzMTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWNvbnN0cnVjdGlvbkFsZ29yaXRobVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMTYpXCI6e3RhZzpcIigwMDE4LDkzMTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb252b2x1dGlvbktlcm5lbEdyb3VwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMxNylcIjp7dGFnOlwiKDAwMTgsOTMxNylcIix2cjpcIkZEXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uRmllbGRPZlZpZXdcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzE4KVwiOnt0YWc6XCIoMDAxOCw5MzE4KVwiLHZyOlwiRkRcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25UYXJnZXRDZW50ZXJQYXRpZW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMxOSlcIjp7dGFnOlwiKDAwMTgsOTMxOSlcIix2cjpcIkZEXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzIwKVwiOnt0YWc6XCIoMDAxOCw5MzIwKVwiLHZyOlwiU0hcIixuYW1lOlwiSW1hZ2VGaWx0ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzIxKVwiOnt0YWc6XCIoMDAxOCw5MzIxKVwiLHZyOlwiU1FcIixuYW1lOlwiQ1RFeHBvc3VyZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMyMilcIjp7dGFnOlwiKDAwMTgsOTMyMilcIix2cjpcIkZEXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uUGl4ZWxTcGFjaW5nXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMyMylcIjp7dGFnOlwiKDAwMTgsOTMyMylcIix2cjpcIkNTXCIsbmFtZTpcIkV4cG9zdXJlTW9kdWxhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzI0KVwiOnt0YWc6XCIoMDAxOCw5MzI0KVwiLHZyOlwiRkRcIixuYW1lOlwiRXN0aW1hdGVkRG9zZVNhdmluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMjUpXCI6e3RhZzpcIigwMDE4LDkzMjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJDVFhSYXlEZXRhaWxzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzI2KVwiOnt0YWc6XCIoMDAxOCw5MzI2KVwiLHZyOlwiU1FcIixuYW1lOlwiQ1RQb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMyNylcIjp7dGFnOlwiKDAwMTgsOTMyNylcIix2cjpcIkZEXCIsbmFtZTpcIlRhYmxlUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzI4KVwiOnt0YWc6XCIoMDAxOCw5MzI4KVwiLHZyOlwiRkRcIixuYW1lOlwiRXhwb3N1cmVUaW1lSW5tc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMjkpXCI6e3RhZzpcIigwMDE4LDkzMjkpXCIsdnI6XCJTUVwiLG5hbWU6XCJDVEltYWdlRnJhbWVUeXBlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzMwKVwiOnt0YWc6XCIoMDAxOCw5MzMwKVwiLHZyOlwiRkRcIixuYW1lOlwiWFJheVR1YmVDdXJyZW50SW5tQVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMzIpXCI6e3RhZzpcIigwMDE4LDkzMzIpXCIsdnI6XCJGRFwiLG5hbWU6XCJFeHBvc3VyZUlubUFzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMzMylcIjp7dGFnOlwiKDAwMTgsOTMzMylcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnN0YW50Vm9sdW1lRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMzQpXCI6e3RhZzpcIigwMDE4LDkzMzQpXCIsdnI6XCJDU1wiLG5hbWU6XCJGbHVvcm9zY29weUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzM1KVwiOnt0YWc6XCIoMDAxOCw5MzM1KVwiLHZyOlwiRkRcIixuYW1lOlwiRGlzdGFuY2VTb3VyY2VUb0RhdGFDb2xsZWN0aW9uQ2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTMzNylcIjp7dGFnOlwiKDAwMTgsOTMzNylcIix2cjpcIlVTXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNBZ2VudE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzMzgpXCI6e3RhZzpcIigwMDE4LDkzMzgpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb250cmFzdEJvbHVzSW5ncmVkaWVudENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNDApXCI6e3RhZzpcIigwMDE4LDkzNDApXCIsdnI6XCJTUVwiLG5hbWU6XCJDb250cmFzdEFkbWluaXN0cmF0aW9uUHJvZmlsZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTM0MSlcIjp7dGFnOlwiKDAwMTgsOTM0MSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNVc2FnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTM0MilcIjp7dGFnOlwiKDAwMTgsOTM0MilcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNBZ2VudEFkbWluaXN0ZXJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNDMpXCI6e3RhZzpcIigwMDE4LDkzNDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb250cmFzdEJvbHVzQWdlbnREZXRlY3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNDQpXCI6e3RhZzpcIigwMDE4LDkzNDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb250cmFzdEJvbHVzQWdlbnRQaGFzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNDUpXCI6e3RhZzpcIigwMDE4LDkzNDUpXCIsdnI6XCJGRFwiLG5hbWU6XCJDVERJdm9sXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTM0NilcIjp7dGFnOlwiKDAwMTgsOTM0NilcIix2cjpcIlNRXCIsbmFtZTpcIkNURElQaGFudG9tVHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNTEpXCI6e3RhZzpcIigwMDE4LDkzNTEpXCIsdnI6XCJGTFwiLG5hbWU6XCJDYWxjaXVtU2NvcmluZ01hc3NGYWN0b3JQYXRpZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTM1MilcIjp7dGFnOlwiKDAwMTgsOTM1MilcIix2cjpcIkZMXCIsbmFtZTpcIkNhbGNpdW1TY29yaW5nTWFzc0ZhY3RvckRldmljZVwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDkzNTMpXCI6e3RhZzpcIigwMDE4LDkzNTMpXCIsdnI6XCJGTFwiLG5hbWU6XCJFbmVyZ3lXZWlnaHRpbmdGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5MzYwKVwiOnt0YWc6XCIoMDAxOCw5MzYwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ1RBZGRpdGlvbmFsWFJheVNvdXJjZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQwMSlcIjp7dGFnOlwiKDAwMTgsOTQwMSlcIix2cjpcIlNRXCIsbmFtZTpcIlByb2plY3Rpb25QaXhlbENhbGlicmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDAyKVwiOnt0YWc6XCIoMDAxOCw5NDAyKVwiLHZyOlwiRkxcIixuYW1lOlwiRGlzdGFuY2VTb3VyY2VUb0lzb2NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MDMpXCI6e3RhZzpcIigwMDE4LDk0MDMpXCIsdnI6XCJGTFwiLG5hbWU6XCJEaXN0YW5jZU9iamVjdFRvVGFibGVUb3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDA0KVwiOnt0YWc6XCIoMDAxOCw5NDA0KVwiLHZyOlwiRkxcIixuYW1lOlwiT2JqZWN0UGl4ZWxTcGFjaW5nSW5DZW50ZXJPZkJlYW1cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDA1KVwiOnt0YWc6XCIoMDAxOCw5NDA1KVwiLHZyOlwiU1FcIixuYW1lOlwiUG9zaXRpb25lclBvc2l0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDA2KVwiOnt0YWc6XCIoMDAxOCw5NDA2KVwiLHZyOlwiU1FcIixuYW1lOlwiVGFibGVQb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQwNylcIjp7dGFnOlwiKDAwMTgsOTQwNylcIix2cjpcIlNRXCIsbmFtZTpcIkNvbGxpbWF0b3JTaGFwZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQxMClcIjp7dGFnOlwiKDAwMTgsOTQxMClcIix2cjpcIkNTXCIsbmFtZTpcIlBsYW5lc0luQWNxdWlzaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDEyKVwiOnt0YWc6XCIoMDAxOCw5NDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiWEFYUkZGcmFtZUNoYXJhY3RlcmlzdGljc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQxNylcIjp7dGFnOlwiKDAwMTgsOTQxNylcIix2cjpcIlNRXCIsbmFtZTpcIkZyYW1lQWNxdWlzaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MjApXCI6e3RhZzpcIigwMDE4LDk0MjApXCIsdnI6XCJDU1wiLG5hbWU6XCJYUmF5UmVjZXB0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQyMylcIjp7dGFnOlwiKDAwMTgsOTQyMylcIix2cjpcIkxPXCIsbmFtZTpcIkFjcXVpc2l0aW9uUHJvdG9jb2xOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQyNClcIjp7dGFnOlwiKDAwMTgsOTQyNClcIix2cjpcIkxUXCIsbmFtZTpcIkFjcXVpc2l0aW9uUHJvdG9jb2xEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MjUpXCI6e3RhZzpcIigwMDE4LDk0MjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb250cmFzdEJvbHVzSW5ncmVkaWVudE9wYXF1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MjYpXCI6e3RhZzpcIigwMDE4LDk0MjYpXCIsdnI6XCJGTFwiLG5hbWU6XCJEaXN0YW5jZVJlY2VwdG9yUGxhbmVUb0RldGVjdG9ySG91c2luZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MjcpXCI6e3RhZzpcIigwMDE4LDk0MjcpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbnRlbnNpZmllckFjdGl2ZVNoYXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQyOClcIjp7dGFnOlwiKDAwMTgsOTQyOClcIix2cjpcIkZMXCIsbmFtZTpcIkludGVuc2lmaWVyQWN0aXZlRGltZW5zaW9uc1wiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQyOSlcIjp7dGFnOlwiKDAwMTgsOTQyOSlcIix2cjpcIkZMXCIsbmFtZTpcIlBoeXNpY2FsRGV0ZWN0b3JTaXplXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQzMClcIjp7dGFnOlwiKDAwMTgsOTQzMClcIix2cjpcIkZMXCIsbmFtZTpcIlBvc2l0aW9uT2ZJc29jZW50ZXJQcm9qZWN0aW9uXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQzMilcIjp7dGFnOlwiKDAwMTgsOTQzMilcIix2cjpcIlNRXCIsbmFtZTpcIkZpZWxkT2ZWaWV3U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDMzKVwiOnt0YWc6XCIoMDAxOCw5NDMzKVwiLHZyOlwiTE9cIixuYW1lOlwiRmllbGRPZlZpZXdEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MzQpXCI6e3RhZzpcIigwMDE4LDk0MzQpXCIsdnI6XCJTUVwiLG5hbWU6XCJFeHBvc3VyZUNvbnRyb2xTZW5zaW5nUmVnaW9uc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQzNSlcIjp7dGFnOlwiKDAwMTgsOTQzNSlcIix2cjpcIkNTXCIsbmFtZTpcIkV4cG9zdXJlQ29udHJvbFNlbnNpbmdSZWdpb25TaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MzYpXCI6e3RhZzpcIigwMDE4LDk0MzYpXCIsdnI6XCJTU1wiLG5hbWU6XCJFeHBvc3VyZUNvbnRyb2xTZW5zaW5nUmVnaW9uTGVmdFZlcnRpY2FsRWRnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0MzcpXCI6e3RhZzpcIigwMDE4LDk0MzcpXCIsdnI6XCJTU1wiLG5hbWU6XCJFeHBvc3VyZUNvbnRyb2xTZW5zaW5nUmVnaW9uUmlnaHRWZXJ0aWNhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDM4KVwiOnt0YWc6XCIoMDAxOCw5NDM4KVwiLHZyOlwiU1NcIixuYW1lOlwiRXhwb3N1cmVDb250cm9sU2Vuc2luZ1JlZ2lvblVwcGVySG9yaXpvbnRhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDM5KVwiOnt0YWc6XCIoMDAxOCw5NDM5KVwiLHZyOlwiU1NcIixuYW1lOlwiRXhwb3N1cmVDb250cm9sU2Vuc2luZ1JlZ2lvbkxvd2VySG9yaXpvbnRhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDQwKVwiOnt0YWc6XCIoMDAxOCw5NDQwKVwiLHZyOlwiU1NcIixuYW1lOlwiQ2VudGVyT2ZDaXJjdWxhckV4cG9zdXJlQ29udHJvbFNlbnNpbmdSZWdpb25cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDQxKVwiOnt0YWc6XCIoMDAxOCw5NDQxKVwiLHZyOlwiVVNcIixuYW1lOlwiUmFkaXVzT2ZDaXJjdWxhckV4cG9zdXJlQ29udHJvbFNlbnNpbmdSZWdpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDQyKVwiOnt0YWc6XCIoMDAxOCw5NDQyKVwiLHZyOlwiU1NcIixuYW1lOlwiVmVydGljZXNPZlRoZVBvbHlnb25hbEV4cG9zdXJlQ29udHJvbFNlbnNpbmdSZWdpb25cIix2bTpcIjItblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NDcpXCI6e3RhZzpcIigwMDE4LDk0NDcpXCIsdnI6XCJGTFwiLG5hbWU6XCJDb2x1bW5Bbmd1bGF0aW9uUGF0aWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NDkpXCI6e3RhZzpcIigwMDE4LDk0NDkpXCIsdnI6XCJGTFwiLG5hbWU6XCJCZWFtQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDUxKVwiOnt0YWc6XCIoMDAxOCw5NDUxKVwiLHZyOlwiU1FcIixuYW1lOlwiRnJhbWVEZXRlY3RvclBhcmFtZXRlcnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NTIpXCI6e3RhZzpcIigwMDE4LDk0NTIpXCIsdnI6XCJGTFwiLG5hbWU6XCJDYWxjdWxhdGVkQW5hdG9teVRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NTUpXCI6e3RhZzpcIigwMDE4LDk0NTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJDYWxpYnJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ1NilcIjp7dGFnOlwiKDAwMTgsOTQ1NilcIix2cjpcIlNRXCIsbmFtZTpcIk9iamVjdFRoaWNrbmVzc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ1NylcIjp7dGFnOlwiKDAwMTgsOTQ1NylcIix2cjpcIkNTXCIsbmFtZTpcIlBsYW5lSWRlbnRpZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDYxKVwiOnt0YWc6XCIoMDAxOCw5NDYxKVwiLHZyOlwiRkxcIixuYW1lOlwiRmllbGRPZlZpZXdEaW1lbnNpb25zSW5GbG9hdFwiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ2MilcIjp7dGFnOlwiKDAwMTgsOTQ2MilcIix2cjpcIlNRXCIsbmFtZTpcIklzb2NlbnRlclJlZmVyZW5jZVN5c3RlbVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ2MylcIjp7dGFnOlwiKDAwMTgsOTQ2MylcIix2cjpcIkZMXCIsbmFtZTpcIlBvc2l0aW9uZXJJc29jZW50ZXJQcmltYXJ5QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDY0KVwiOnt0YWc6XCIoMDAxOCw5NDY0KVwiLHZyOlwiRkxcIixuYW1lOlwiUG9zaXRpb25lcklzb2NlbnRlclNlY29uZGFyeUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ2NSlcIjp7dGFnOlwiKDAwMTgsOTQ2NSlcIix2cjpcIkZMXCIsbmFtZTpcIlBvc2l0aW9uZXJJc29jZW50ZXJEZXRlY3RvclJvdGF0aW9uQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDY2KVwiOnt0YWc6XCIoMDAxOCw5NDY2KVwiLHZyOlwiRkxcIixuYW1lOlwiVGFibGVYUG9zaXRpb25Ub0lzb2NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NjcpXCI6e3RhZzpcIigwMDE4LDk0NjcpXCIsdnI6XCJGTFwiLG5hbWU6XCJUYWJsZVlQb3NpdGlvblRvSXNvY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ2OClcIjp7dGFnOlwiKDAwMTgsOTQ2OClcIix2cjpcIkZMXCIsbmFtZTpcIlRhYmxlWlBvc2l0aW9uVG9Jc29jZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDY5KVwiOnt0YWc6XCIoMDAxOCw5NDY5KVwiLHZyOlwiRkxcIixuYW1lOlwiVGFibGVIb3Jpem9udGFsUm90YXRpb25BbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NzApXCI6e3RhZzpcIigwMDE4LDk0NzApXCIsdnI6XCJGTFwiLG5hbWU6XCJUYWJsZUhlYWRUaWx0QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDcxKVwiOnt0YWc6XCIoMDAxOCw5NDcxKVwiLHZyOlwiRkxcIixuYW1lOlwiVGFibGVDcmFkbGVUaWx0QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDcyKVwiOnt0YWc6XCIoMDAxOCw5NDcyKVwiLHZyOlwiU1FcIixuYW1lOlwiRnJhbWVEaXNwbGF5U2h1dHRlclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTQ3MylcIjp7dGFnOlwiKDAwMTgsOTQ3MylcIix2cjpcIkZMXCIsbmFtZTpcIkFjcXVpcmVkSW1hZ2VBcmVhRG9zZVByb2R1Y3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NDc0KVwiOnt0YWc6XCIoMDAxOCw5NDc0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ0FybVBvc2l0aW9uZXJUYWJsZXRvcFJlbGF0aW9uc2hpcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NzYpXCI6e3RhZzpcIigwMDE4LDk0NzYpXCIsdnI6XCJTUVwiLG5hbWU6XCJYUmF5R2VvbWV0cnlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk0NzcpXCI6e3RhZzpcIigwMDE4LDk0NzcpXCIsdnI6XCJTUVwiLG5hbWU6XCJJcnJhZGlhdGlvbkV2ZW50SWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MDQpXCI6e3RhZzpcIigwMDE4LDk1MDQpXCIsdnI6XCJTUVwiLG5hbWU6XCJYUmF5M0RGcmFtZVR5cGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MDYpXCI6e3RhZzpcIigwMDE4LDk1MDYpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb250cmlidXRpbmdTb3VyY2VzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTA3KVwiOnt0YWc6XCIoMDAxOCw5NTA3KVwiLHZyOlwiU1FcIixuYW1lOlwiWFJheTNEQWNxdWlzaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MDgpXCI6e3RhZzpcIigwMDE4LDk1MDgpXCIsdnI6XCJGTFwiLG5hbWU6XCJQcmltYXJ5UG9zaXRpb25lclNjYW5BcmNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTA5KVwiOnt0YWc6XCIoMDAxOCw5NTA5KVwiLHZyOlwiRkxcIixuYW1lOlwiU2Vjb25kYXJ5UG9zaXRpb25lclNjYW5BcmNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTEwKVwiOnt0YWc6XCIoMDAxOCw5NTEwKVwiLHZyOlwiRkxcIixuYW1lOlwiUHJpbWFyeVBvc2l0aW9uZXJTY2FuU3RhcnRBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MTEpXCI6e3RhZzpcIigwMDE4LDk1MTEpXCIsdnI6XCJGTFwiLG5hbWU6XCJTZWNvbmRhcnlQb3NpdGlvbmVyU2NhblN0YXJ0QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTE0KVwiOnt0YWc6XCIoMDAxOCw5NTE0KVwiLHZyOlwiRkxcIixuYW1lOlwiUHJpbWFyeVBvc2l0aW9uZXJJbmNyZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTE1KVwiOnt0YWc6XCIoMDAxOCw5NTE1KVwiLHZyOlwiRkxcIixuYW1lOlwiU2Vjb25kYXJ5UG9zaXRpb25lckluY3JlbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MTYpXCI6e3RhZzpcIigwMDE4LDk1MTYpXCIsdnI6XCJEVFwiLG5hbWU6XCJTdGFydEFjcXVpc2l0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTE3KVwiOnt0YWc6XCIoMDAxOCw5NTE3KVwiLHZyOlwiRFRcIixuYW1lOlwiRW5kQWNxdWlzaXRpb25EYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MTgpXCI6e3RhZzpcIigwMDE4LDk1MTgpXCIsdnI6XCJTU1wiLG5hbWU6XCJQcmltYXJ5UG9zaXRpb25lckluY3JlbWVudFNpZ25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTE5KVwiOnt0YWc6XCIoMDAxOCw5NTE5KVwiLHZyOlwiU1NcIixuYW1lOlwiU2Vjb25kYXJ5UG9zaXRpb25lckluY3JlbWVudFNpZ25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTI0KVwiOnt0YWc6XCIoMDAxOCw5NTI0KVwiLHZyOlwiTE9cIixuYW1lOlwiQXBwbGljYXRpb25OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTUyNSlcIjp7dGFnOlwiKDAwMTgsOTUyNSlcIix2cjpcIkxPXCIsbmFtZTpcIkFwcGxpY2F0aW9uVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MjYpXCI6e3RhZzpcIigwMDE4LDk1MjYpXCIsdnI6XCJMT1wiLG5hbWU6XCJBcHBsaWNhdGlvbk1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MjcpXCI6e3RhZzpcIigwMDE4LDk1MjcpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbGdvcml0aG1UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTUyOClcIjp7dGFnOlwiKDAwMTgsOTUyOClcIix2cjpcIkxPXCIsbmFtZTpcIkFsZ29yaXRobURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTUzMClcIjp7dGFnOlwiKDAwMTgsOTUzMClcIix2cjpcIlNRXCIsbmFtZTpcIlhSYXkzRFJlY29uc3RydWN0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTMxKVwiOnt0YWc6XCIoMDAxOCw5NTMxKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1MzgpXCI6e3RhZzpcIigwMDE4LDk1MzgpXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJQcm9qZWN0aW9uQWNxdWlzaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1NDEpXCI6e3RhZzpcIigwMDE4LDk1NDEpXCIsdnI6XCJTUVwiLG5hbWU6XCJEZXRlY3RvclBvc2l0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTQyKVwiOnt0YWc6XCIoMDAxOCw5NTQyKVwiLHZyOlwiU1FcIixuYW1lOlwiWFJheUFjcXVpc2l0aW9uRG9zZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU0MylcIjp7dGFnOlwiKDAwMTgsOTU0MylcIix2cjpcIkZEXCIsbmFtZTpcIlhSYXlTb3VyY2VJc29jZW50ZXJQcmltYXJ5QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTQ0KVwiOnt0YWc6XCIoMDAxOCw5NTQ0KVwiLHZyOlwiRkRcIixuYW1lOlwiWFJheVNvdXJjZUlzb2NlbnRlclNlY29uZGFyeUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU0NSlcIjp7dGFnOlwiKDAwMTgsOTU0NSlcIix2cjpcIkZEXCIsbmFtZTpcIkJyZWFzdFN1cHBvcnRJc29jZW50ZXJQcmltYXJ5QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTQ2KVwiOnt0YWc6XCIoMDAxOCw5NTQ2KVwiLHZyOlwiRkRcIixuYW1lOlwiQnJlYXN0U3VwcG9ydElzb2NlbnRlclNlY29uZGFyeUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU0NylcIjp7dGFnOlwiKDAwMTgsOTU0NylcIix2cjpcIkZEXCIsbmFtZTpcIkJyZWFzdFN1cHBvcnRYUG9zaXRpb25Ub0lzb2NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1NDgpXCI6e3RhZzpcIigwMDE4LDk1NDgpXCIsdnI6XCJGRFwiLG5hbWU6XCJCcmVhc3RTdXBwb3J0WVBvc2l0aW9uVG9Jc29jZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTQ5KVwiOnt0YWc6XCIoMDAxOCw5NTQ5KVwiLHZyOlwiRkRcIixuYW1lOlwiQnJlYXN0U3VwcG9ydFpQb3NpdGlvblRvSXNvY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU1MClcIjp7dGFnOlwiKDAwMTgsOTU1MClcIix2cjpcIkZEXCIsbmFtZTpcIkRldGVjdG9ySXNvY2VudGVyUHJpbWFyeUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU1MSlcIjp7dGFnOlwiKDAwMTgsOTU1MSlcIix2cjpcIkZEXCIsbmFtZTpcIkRldGVjdG9ySXNvY2VudGVyU2Vjb25kYXJ5QW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTUyKVwiOnt0YWc6XCIoMDAxOCw5NTUyKVwiLHZyOlwiRkRcIixuYW1lOlwiRGV0ZWN0b3JYUG9zaXRpb25Ub0lzb2NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1NTMpXCI6e3RhZzpcIigwMDE4LDk1NTMpXCIsdnI6XCJGRFwiLG5hbWU6XCJEZXRlY3RvcllQb3NpdGlvblRvSXNvY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU1NClcIjp7dGFnOlwiKDAwMTgsOTU1NClcIix2cjpcIkZEXCIsbmFtZTpcIkRldGVjdG9yWlBvc2l0aW9uVG9Jc29jZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTU1KVwiOnt0YWc6XCIoMDAxOCw5NTU1KVwiLHZyOlwiU1FcIixuYW1lOlwiWFJheUdyaWRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk1NTYpXCI6e3RhZzpcIigwMDE4LDk1NTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJYUmF5RmlsdGVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NTU3KVwiOnt0YWc6XCIoMDAxOCw5NTU3KVwiLHZyOlwiRkRcIixuYW1lOlwiRGV0ZWN0b3JBY3RpdmVBcmVhVExIQ1Bvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU1OClcIjp7dGFnOlwiKDAwMTgsOTU1OClcIix2cjpcIkZEXCIsbmFtZTpcIkRldGVjdG9yQWN0aXZlQXJlYU9yaWVudGF0aW9uXCIsdm06XCI2XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTU1OSlcIjp7dGFnOlwiKDAwMTgsOTU1OSlcIix2cjpcIkNTXCIsbmFtZTpcIlBvc2l0aW9uZXJQcmltYXJ5QW5nbGVEaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NjAxKVwiOnt0YWc6XCIoMDAxOCw5NjAxKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlmZnVzaW9uQk1hdHJpeFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwMilcIjp7dGFnOlwiKDAwMTgsOTYwMilcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVhYXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwMylcIjp7dGFnOlwiKDAwMTgsOTYwMylcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVhZXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwNClcIjp7dGFnOlwiKDAwMTgsOTYwNClcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVhaXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwNSlcIjp7dGFnOlwiKDAwMTgsOTYwNSlcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVlZXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwNilcIjp7dGFnOlwiKDAwMTgsOTYwNilcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVlaXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTYwNylcIjp7dGFnOlwiKDAwMTgsOTYwNylcIix2cjpcIkZEXCIsbmFtZTpcIkRpZmZ1c2lvbkJWYWx1ZVpaXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcwMSlcIjp7dGFnOlwiKDAwMTgsOTcwMSlcIix2cjpcIkRUXCIsbmFtZTpcIkRlY2F5Q29ycmVjdGlvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcxNSlcIjp7dGFnOlwiKDAwMTgsOTcxNSlcIix2cjpcIkZEXCIsbmFtZTpcIlN0YXJ0RGVuc2l0eVRocmVzaG9sZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MTYpXCI6e3RhZzpcIigwMDE4LDk3MTYpXCIsdnI6XCJGRFwiLG5hbWU6XCJTdGFydFJlbGF0aXZlRGVuc2l0eURpZmZlcmVuY2VUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzE3KVwiOnt0YWc6XCIoMDAxOCw5NzE3KVwiLHZyOlwiRkRcIixuYW1lOlwiU3RhcnRDYXJkaWFjVHJpZ2dlckNvdW50VGhyZXNob2xkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcxOClcIjp7dGFnOlwiKDAwMTgsOTcxOClcIix2cjpcIkZEXCIsbmFtZTpcIlN0YXJ0UmVzcGlyYXRvcnlUcmlnZ2VyQ291bnRUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzE5KVwiOnt0YWc6XCIoMDAxOCw5NzE5KVwiLHZyOlwiRkRcIixuYW1lOlwiVGVybWluYXRpb25Db3VudHNUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzIwKVwiOnt0YWc6XCIoMDAxOCw5NzIwKVwiLHZyOlwiRkRcIixuYW1lOlwiVGVybWluYXRpb25EZW5zaXR5VGhyZXNob2xkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcyMSlcIjp7dGFnOlwiKDAwMTgsOTcyMSlcIix2cjpcIkZEXCIsbmFtZTpcIlRlcm1pbmF0aW9uUmVsYXRpdmVEZW5zaXR5VGhyZXNob2xkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcyMilcIjp7dGFnOlwiKDAwMTgsOTcyMilcIix2cjpcIkZEXCIsbmFtZTpcIlRlcm1pbmF0aW9uVGltZVRocmVzaG9sZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MjMpXCI6e3RhZzpcIigwMDE4LDk3MjMpXCIsdnI6XCJGRFwiLG5hbWU6XCJUZXJtaW5hdGlvbkNhcmRpYWNUcmlnZ2VyQ291bnRUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzI0KVwiOnt0YWc6XCIoMDAxOCw5NzI0KVwiLHZyOlwiRkRcIixuYW1lOlwiVGVybWluYXRpb25SZXNwaXJhdG9yeVRyaWdnZXJDb3VudFRocmVzaG9sZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MjUpXCI6e3RhZzpcIigwMDE4LDk3MjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZXRlY3Rvckdlb21ldHJ5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTcyNilcIjp7dGFnOlwiKDAwMTgsOTcyNilcIix2cjpcIkZEXCIsbmFtZTpcIlRyYW5zdmVyc2VEZXRlY3RvclNlcGFyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzI3KVwiOnt0YWc6XCIoMDAxOCw5NzI3KVwiLHZyOlwiRkRcIixuYW1lOlwiQXhpYWxEZXRlY3RvckRpbWVuc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MjkpXCI6e3RhZzpcIigwMDE4LDk3MjkpXCIsdnI6XCJVU1wiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsQWdlbnROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzMyKVwiOnt0YWc6XCIoMDAxOCw5NzMyKVwiLHZyOlwiU1FcIixuYW1lOlwiUEVURnJhbWVBY3F1aXNpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTczMylcIjp7dGFnOlwiKDAwMTgsOTczMylcIix2cjpcIlNRXCIsbmFtZTpcIlBFVERldGVjdG9yTW90aW9uRGV0YWlsc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTczNClcIjp7dGFnOlwiKDAwMTgsOTczNClcIix2cjpcIlNRXCIsbmFtZTpcIlBFVFRhYmxlRHluYW1pY3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MzUpXCI6e3RhZzpcIigwMDE4LDk3MzUpXCIsdnI6XCJTUVwiLG5hbWU6XCJQRVRQb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTczNilcIjp7dGFnOlwiKDAwMTgsOTczNilcIix2cjpcIlNRXCIsbmFtZTpcIlBFVEZyYW1lQ29ycmVjdGlvbkZhY3RvcnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MzcpXCI6e3RhZzpcIigwMDE4LDk3MzcpXCIsdnI6XCJTUVwiLG5hbWU6XCJSYWRpb3BoYXJtYWNldXRpY2FsVXNhZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3MzgpXCI6e3RhZzpcIigwMDE4LDk3MzgpXCIsdnI6XCJDU1wiLG5hbWU6XCJBdHRlbnVhdGlvbkNvcnJlY3Rpb25Tb3VyY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzM5KVwiOnt0YWc6XCIoMDAxOCw5NzM5KVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZJdGVyYXRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc0MClcIjp7dGFnOlwiKDAwMTgsOTc0MClcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mU3Vic2V0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NDkpXCI6e3RhZzpcIigwMDE4LDk3NDkpXCIsdnI6XCJTUVwiLG5hbWU6XCJQRVRSZWNvbnN0cnVjdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc1MSlcIjp7dGFnOlwiKDAwMTgsOTc1MSlcIix2cjpcIlNRXCIsbmFtZTpcIlBFVEZyYW1lVHlwZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc1NSlcIjp7dGFnOlwiKDAwMTgsOTc1NSlcIix2cjpcIkNTXCIsbmFtZTpcIlRpbWVPZkZsaWdodEluZm9ybWF0aW9uVXNlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NTYpXCI6e3RhZzpcIigwMDE4LDk3NTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWNvbnN0cnVjdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzU4KVwiOnt0YWc6XCIoMDAxOCw5NzU4KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGVjYXlDb3JyZWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzU5KVwiOnt0YWc6XCIoMDAxOCw5NzU5KVwiLHZyOlwiQ1NcIixuYW1lOlwiQXR0ZW51YXRpb25Db3JyZWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzYwKVwiOnt0YWc6XCIoMDAxOCw5NzYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiU2NhdHRlckNvcnJlY3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NjEpXCI6e3RhZzpcIigwMDE4LDk3NjEpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWFkVGltZUNvcnJlY3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NjIpXCI6e3RhZzpcIigwMDE4LDk3NjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJHYW50cnlNb3Rpb25Db3JyZWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzYzKVwiOnt0YWc6XCIoMDAxOCw5NzYzKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGF0aWVudE1vdGlvbkNvcnJlY3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NjQpXCI6e3RhZzpcIigwMDE4LDk3NjQpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3VudExvc3NOb3JtYWxpemF0aW9uQ29ycmVjdGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc2NSlcIjp7dGFnOlwiKDAwMTgsOTc2NSlcIix2cjpcIkNTXCIsbmFtZTpcIlJhbmRvbXNDb3JyZWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5NzY2KVwiOnt0YWc6XCIoMDAxOCw5NzY2KVwiLHZyOlwiQ1NcIixuYW1lOlwiTm9uVW5pZm9ybVJhZGlhbFNhbXBsaW5nQ29ycmVjdGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc2NylcIjp7dGFnOlwiKDAwMTgsOTc2NylcIix2cjpcIkNTXCIsbmFtZTpcIlNlbnNpdGl2aXR5Q2FsaWJyYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NjgpXCI6e3RhZzpcIigwMDE4LDk3NjgpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZXRlY3Rvck5vcm1hbGl6YXRpb25Db3JyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc2OSlcIjp7dGFnOlwiKDAwMTgsOTc2OSlcIix2cjpcIkNTXCIsbmFtZTpcIkl0ZXJhdGl2ZVJlY29uc3RydWN0aW9uTWV0aG9kXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc3MClcIjp7dGFnOlwiKDAwMTgsOTc3MClcIix2cjpcIkNTXCIsbmFtZTpcIkF0dGVudWF0aW9uQ29ycmVjdGlvblRlbXBvcmFsUmVsYXRpb25zaGlwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTc3MSlcIjp7dGFnOlwiKDAwMTgsOTc3MSlcIix2cjpcIlNRXCIsbmFtZTpcIlBhdGllbnRQaHlzaW9sb2dpY2FsU3RhdGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk3NzIpXCI6e3RhZzpcIigwMDE4LDk3NzIpXCIsdnI6XCJTUVwiLG5hbWU6XCJQYXRpZW50UGh5c2lvbG9naWNhbFN0YXRlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwMSlcIjp7dGFnOlwiKDAwMTgsOTgwMSlcIix2cjpcIkZEXCIsbmFtZTpcIkRlcHRoc09mRm9jdXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk4MDMpXCI6e3RhZzpcIigwMDE4LDk4MDMpXCIsdnI6XCJTUVwiLG5hbWU6XCJFeGNsdWRlZEludGVydmFsc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwNClcIjp7dGFnOlwiKDAwMTgsOTgwNClcIix2cjpcIkRUXCIsbmFtZTpcIkV4Y2x1c2lvblN0YXJ0RGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5ODA1KVwiOnt0YWc6XCIoMDAxOCw5ODA1KVwiLHZyOlwiRkRcIixuYW1lOlwiRXhjbHVzaW9uRHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5ODA2KVwiOnt0YWc6XCIoMDAxOCw5ODA2KVwiLHZyOlwiU1FcIixuYW1lOlwiVVNJbWFnZURlc2NyaXB0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5ODA3KVwiOnt0YWc6XCIoMDAxOCw5ODA3KVwiLHZyOlwiU1FcIixuYW1lOlwiSW1hZ2VEYXRhVHlwZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwOClcIjp7dGFnOlwiKDAwMTgsOTgwOClcIix2cjpcIkNTXCIsbmFtZTpcIkRhdGFUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwOSlcIjp7dGFnOlwiKDAwMTgsOTgwOSlcIix2cjpcIlNRXCIsbmFtZTpcIlRyYW5zZHVjZXJTY2FuUGF0dGVybkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk4MEIpXCI6e3RhZzpcIigwMDE4LDk4MEIpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbGlhc2VkRGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAxOCw5ODBDKVwiOnt0YWc6XCIoMDAxOCw5ODBDKVwiLHZyOlwiQ1NcIixuYW1lOlwiUG9zaXRpb25NZWFzdXJpbmdEZXZpY2VVc2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwRClcIjp7dGFnOlwiKDAwMTgsOTgwRClcIix2cjpcIlNRXCIsbmFtZTpcIlRyYW5zZHVjZXJHZW9tZXRyeUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk4MEUpXCI6e3RhZzpcIigwMDE4LDk4MEUpXCIsdnI6XCJTUVwiLG5hbWU6XCJUcmFuc2R1Y2VyQmVhbVN0ZWVyaW5nQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsOTgwRilcIjp7dGFnOlwiKDAwMTgsOTgwRilcIix2cjpcIlNRXCIsbmFtZTpcIlRyYW5zZHVjZXJBcHBsaWNhdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDE4LDk4MTApXCI6e3RhZzpcIigwMDE4LDk4MTApXCIsdnI6XCJ4c1wiLG5hbWU6XCJaZXJvVmVsb2NpdHlQaXhlbFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsQTAwMSlcIjp7dGFnOlwiKDAwMTgsQTAwMSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyaWJ1dGluZ0VxdWlwbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsQTAwMilcIjp7dGFnOlwiKDAwMTgsQTAwMilcIix2cjpcIkRUXCIsbmFtZTpcIkNvbnRyaWJ1dGlvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMTgsQTAwMylcIjp7dGFnOlwiKDAwMTgsQTAwMylcIix2cjpcIlNUXCIsbmFtZTpcIkNvbnRyaWJ1dGlvbkRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMDAwRClcIjp7dGFnOlwiKDAwMjAsMDAwRClcIix2cjpcIlVJXCIsbmFtZTpcIlN0dWR5SW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDBFKVwiOnt0YWc6XCIoMDAyMCwwMDBFKVwiLHZyOlwiVUlcIixuYW1lOlwiU2VyaWVzSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDEwKVwiOnt0YWc6XCIoMDAyMCwwMDEwKVwiLHZyOlwiU0hcIixuYW1lOlwiU3R1ZHlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAwMTEpXCI6e3RhZzpcIigwMDIwLDAwMTEpXCIsdnI6XCJJU1wiLG5hbWU6XCJTZXJpZXNOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDEyKVwiOnt0YWc6XCIoMDAyMCwwMDEyKVwiLHZyOlwiSVNcIixuYW1lOlwiQWNxdWlzaXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDEzKVwiOnt0YWc6XCIoMDAyMCwwMDEzKVwiLHZyOlwiSVNcIixuYW1lOlwiSW5zdGFuY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDE5KVwiOnt0YWc6XCIoMDAyMCwwMDE5KVwiLHZyOlwiSVNcIixuYW1lOlwiSXRlbU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAwMjApXCI6e3RhZzpcIigwMDIwLDAwMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXRpZW50T3JpZW50YXRpb25cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDMyKVwiOnt0YWc6XCIoMDAyMCwwMDMyKVwiLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2VQb3NpdGlvblBhdGllbnRcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDM3KVwiOnt0YWc6XCIoMDAyMCwwMDM3KVwiLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2VPcmllbnRhdGlvblBhdGllbnRcIix2bTpcIjZcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwwMDUyKVwiOnt0YWc6XCIoMDAyMCwwMDUyKVwiLHZyOlwiVUlcIixuYW1lOlwiRnJhbWVPZlJlZmVyZW5jZVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAwNjApXCI6e3RhZzpcIigwMDIwLDAwNjApXCIsdnI6XCJDU1wiLG5hbWU6XCJMYXRlcmFsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMDA2MilcIjp7dGFnOlwiKDAwMjAsMDA2MilcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlTGF0ZXJhbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAxMDApXCI6e3RhZzpcIigwMDIwLDAxMDApXCIsdnI6XCJJU1wiLG5hbWU6XCJUZW1wb3JhbFBvc2l0aW9uSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAxMDUpXCI6e3RhZzpcIigwMDIwLDAxMDUpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlRlbXBvcmFsUG9zaXRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMDExMClcIjp7dGFnOlwiKDAwMjAsMDExMClcIix2cjpcIkRTXCIsbmFtZTpcIlRlbXBvcmFsUmVzb2x1dGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDAyMDApXCI6e3RhZzpcIigwMDIwLDAyMDApXCIsdnI6XCJVSVwiLG5hbWU6XCJTeW5jaHJvbml6YXRpb25GcmFtZU9mUmVmZXJlbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMDI0MilcIjp7dGFnOlwiKDAwMjAsMDI0MilcIix2cjpcIlVJXCIsbmFtZTpcIlNPUEluc3RhbmNlVUlET2ZDb25jYXRlbmF0aW9uU291cmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMTAwMilcIjp7dGFnOlwiKDAwMjAsMTAwMilcIix2cjpcIklTXCIsbmFtZTpcIkltYWdlc0luQWNxdWlzaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwxMDQwKVwiOnt0YWc6XCIoMDAyMCwxMDQwKVwiLHZyOlwiTE9cIixuYW1lOlwiUG9zaXRpb25SZWZlcmVuY2VJbmRpY2F0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwxMDQxKVwiOnt0YWc6XCIoMDAyMCwxMDQxKVwiLHZyOlwiRFNcIixuYW1lOlwiU2xpY2VMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDEyMDApXCI6e3RhZzpcIigwMDIwLDEyMDApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlBhdGllbnRSZWxhdGVkU3R1ZGllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDEyMDIpXCI6e3RhZzpcIigwMDIwLDEyMDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlBhdGllbnRSZWxhdGVkU2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsMTIwNClcIjp7dGFnOlwiKDAwMjAsMTIwNClcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUGF0aWVudFJlbGF0ZWRJbnN0YW5jZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwxMjA2KVwiOnt0YWc6XCIoMDAyMCwxMjA2KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTdHVkeVJlbGF0ZWRTZXJpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwxMjA4KVwiOnt0YWc6XCIoMDAyMCwxMjA4KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTdHVkeVJlbGF0ZWRJbnN0YW5jZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCwxMjA5KVwiOnt0YWc6XCIoMDAyMCwxMjA5KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTZXJpZXNSZWxhdGVkSW5zdGFuY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsNDAwMClcIjp7dGFnOlwiKDAwMjAsNDAwMClcIix2cjpcIkxUXCIsbmFtZTpcIkltYWdlQ29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MDU2KVwiOnt0YWc6XCIoMDAyMCw5MDU2KVwiLHZyOlwiU0hcIixuYW1lOlwiU3RhY2tJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkwNTcpXCI6e3RhZzpcIigwMDIwLDkwNTcpXCIsdnI6XCJVTFwiLG5hbWU6XCJJblN0YWNrUG9zaXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MDcxKVwiOnt0YWc6XCIoMDAyMCw5MDcxKVwiLHZyOlwiU1FcIixuYW1lOlwiRnJhbWVBbmF0b215U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MDcyKVwiOnt0YWc6XCIoMDAyMCw5MDcyKVwiLHZyOlwiQ1NcIixuYW1lOlwiRnJhbWVMYXRlcmFsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTExMSlcIjp7dGFnOlwiKDAwMjAsOTExMSlcIix2cjpcIlNRXCIsbmFtZTpcIkZyYW1lQ29udGVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTExMylcIjp7dGFnOlwiKDAwMjAsOTExMylcIix2cjpcIlNRXCIsbmFtZTpcIlBsYW5lUG9zaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxMTYpXCI6e3RhZzpcIigwMDIwLDkxMTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJQbGFuZU9yaWVudGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MTI4KVwiOnt0YWc6XCIoMDAyMCw5MTI4KVwiLHZyOlwiVUxcIixuYW1lOlwiVGVtcG9yYWxQb3NpdGlvbkluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTE1MylcIjp7dGFnOlwiKDAwMjAsOTE1MylcIix2cjpcIkZEXCIsbmFtZTpcIk5vbWluYWxDYXJkaWFjVHJpZ2dlckRlbGF5VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNTQpXCI6e3RhZzpcIigwMDIwLDkxNTQpXCIsdnI6XCJGTFwiLG5hbWU6XCJOb21pbmFsQ2FyZGlhY1RyaWdnZXJUaW1lUHJpb3JUb1JQZWFrXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTE1NSlcIjp7dGFnOlwiKDAwMjAsOTE1NSlcIix2cjpcIkZMXCIsbmFtZTpcIkFjdHVhbENhcmRpYWNUcmlnZ2VyVGltZVByaW9yVG9SUGVha1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNTYpXCI6e3RhZzpcIigwMDIwLDkxNTYpXCIsdnI6XCJVU1wiLG5hbWU6XCJGcmFtZUFjcXVpc2l0aW9uTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTE1NylcIjp7dGFnOlwiKDAwMjAsOTE1NylcIix2cjpcIlVMXCIsbmFtZTpcIkRpbWVuc2lvbkluZGV4VmFsdWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MTU4KVwiOnt0YWc6XCIoMDAyMCw5MTU4KVwiLHZyOlwiTFRcIixuYW1lOlwiRnJhbWVDb21tZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNjEpXCI6e3RhZzpcIigwMDIwLDkxNjEpXCIsdnI6XCJVSVwiLG5hbWU6XCJDb25jYXRlbmF0aW9uVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTE2MilcIjp7dGFnOlwiKDAwMjAsOTE2MilcIix2cjpcIlVTXCIsbmFtZTpcIkluQ29uY2F0ZW5hdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNjMpXCI6e3RhZzpcIigwMDIwLDkxNjMpXCIsdnI6XCJVU1wiLG5hbWU6XCJJbkNvbmNhdGVuYXRpb25Ub3RhbE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNjQpXCI6e3RhZzpcIigwMDIwLDkxNjQpXCIsdnI6XCJVSVwiLG5hbWU6XCJEaW1lbnNpb25Pcmdhbml6YXRpb25VSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MTY1KVwiOnt0YWc6XCIoMDAyMCw5MTY1KVwiLHZyOlwiQVRcIixuYW1lOlwiRGltZW5zaW9uSW5kZXhQb2ludGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTE2NylcIjp7dGFnOlwiKDAwMjAsOTE2NylcIix2cjpcIkFUXCIsbmFtZTpcIkZ1bmN0aW9uYWxHcm91cFBvaW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MTcwKVwiOnt0YWc6XCIoMDAyMCw5MTcwKVwiLHZyOlwiU1FcIixuYW1lOlwiVW5hc3NpZ25lZFNoYXJlZENvbnZlcnRlZEF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkxNzEpXCI6e3RhZzpcIigwMDIwLDkxNzEpXCIsdnI6XCJTUVwiLG5hbWU6XCJVbmFzc2lnbmVkUGVyRnJhbWVDb252ZXJ0ZWRBdHRyaWJ1dGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MTcyKVwiOnt0YWc6XCIoMDAyMCw5MTcyKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udmVyc2lvblNvdXJjZUF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkyMTMpXCI6e3RhZzpcIigwMDIwLDkyMTMpXCIsdnI6XCJMT1wiLG5hbWU6XCJEaW1lbnNpb25JbmRleFByaXZhdGVDcmVhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTIyMSlcIjp7dGFnOlwiKDAwMjAsOTIyMSlcIix2cjpcIlNRXCIsbmFtZTpcIkRpbWVuc2lvbk9yZ2FuaXphdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTIyMilcIjp7dGFnOlwiKDAwMjAsOTIyMilcIix2cjpcIlNRXCIsbmFtZTpcIkRpbWVuc2lvbkluZGV4U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjI4KVwiOnt0YWc6XCIoMDAyMCw5MjI4KVwiLHZyOlwiVUxcIixuYW1lOlwiQ29uY2F0ZW5hdGlvbkZyYW1lT2Zmc2V0TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTIzOClcIjp7dGFnOlwiKDAwMjAsOTIzOClcIix2cjpcIkxPXCIsbmFtZTpcIkZ1bmN0aW9uYWxHcm91cFByaXZhdGVDcmVhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTI0MSlcIjp7dGFnOlwiKDAwMjAsOTI0MSlcIix2cjpcIkZMXCIsbmFtZTpcIk5vbWluYWxQZXJjZW50YWdlT2ZDYXJkaWFjUGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjQ1KVwiOnt0YWc6XCIoMDAyMCw5MjQ1KVwiLHZyOlwiRkxcIixuYW1lOlwiTm9taW5hbFBlcmNlbnRhZ2VPZlJlc3BpcmF0b3J5UGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjQ2KVwiOnt0YWc6XCIoMDAyMCw5MjQ2KVwiLHZyOlwiRkxcIixuYW1lOlwiU3RhcnRpbmdSZXNwaXJhdG9yeUFtcGxpdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkyNDcpXCI6e3RhZzpcIigwMDIwLDkyNDcpXCIsdnI6XCJDU1wiLG5hbWU6XCJTdGFydGluZ1Jlc3BpcmF0b3J5UGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjQ4KVwiOnt0YWc6XCIoMDAyMCw5MjQ4KVwiLHZyOlwiRkxcIixuYW1lOlwiRW5kaW5nUmVzcGlyYXRvcnlBbXBsaXR1ZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjQ5KVwiOnt0YWc6XCIoMDAyMCw5MjQ5KVwiLHZyOlwiQ1NcIixuYW1lOlwiRW5kaW5nUmVzcGlyYXRvcnlQaGFzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkyNTApXCI6e3RhZzpcIigwMDIwLDkyNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXNwaXJhdG9yeVRyaWdnZXJUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTI1MSlcIjp7dGFnOlwiKDAwMjAsOTI1MSlcIix2cjpcIkZEXCIsbmFtZTpcIlJSSW50ZXJ2YWxUaW1lTm9taW5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkyNTIpXCI6e3RhZzpcIigwMDIwLDkyNTIpXCIsdnI6XCJGRFwiLG5hbWU6XCJBY3R1YWxDYXJkaWFjVHJpZ2dlckRlbGF5VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkyNTMpXCI6e3RhZzpcIigwMDIwLDkyNTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXNwaXJhdG9yeVN5bmNocm9uaXphdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTI1NClcIjp7dGFnOlwiKDAwMjAsOTI1NClcIix2cjpcIkZEXCIsbmFtZTpcIlJlc3BpcmF0b3J5SW50ZXJ2YWxUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTI1NSlcIjp7dGFnOlwiKDAwMjAsOTI1NSlcIix2cjpcIkZEXCIsbmFtZTpcIk5vbWluYWxSZXNwaXJhdG9yeVRyaWdnZXJEZWxheVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjU2KVwiOnt0YWc6XCIoMDAyMCw5MjU2KVwiLHZyOlwiRkRcIixuYW1lOlwiUmVzcGlyYXRvcnlUcmlnZ2VyRGVsYXlUaHJlc2hvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MjU3KVwiOnt0YWc6XCIoMDAyMCw5MjU3KVwiLHZyOlwiRkRcIixuYW1lOlwiQWN0dWFsUmVzcGlyYXRvcnlUcmlnZ2VyRGVsYXlUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTMwMSlcIjp7dGFnOlwiKDAwMjAsOTMwMSlcIix2cjpcIkZEXCIsbmFtZTpcIkltYWdlUG9zaXRpb25Wb2x1bWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MzAyKVwiOnt0YWc6XCIoMDAyMCw5MzAyKVwiLHZyOlwiRkRcIixuYW1lOlwiSW1hZ2VPcmllbnRhdGlvblZvbHVtZVwiLHZtOlwiNlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMDcpXCI6e3RhZzpcIigwMDIwLDkzMDcpXCIsdnI6XCJDU1wiLG5hbWU6XCJVbHRyYXNvdW5kQWNxdWlzaXRpb25HZW9tZXRyeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMDgpXCI6e3RhZzpcIigwMDIwLDkzMDgpXCIsdnI6XCJGRFwiLG5hbWU6XCJBcGV4UG9zaXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MzA5KVwiOnt0YWc6XCIoMDAyMCw5MzA5KVwiLHZyOlwiRkRcIixuYW1lOlwiVm9sdW1lVG9UcmFuc2R1Y2VyTWFwcGluZ01hdHJpeFwiLHZtOlwiMTZcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MzBBKVwiOnt0YWc6XCIoMDAyMCw5MzBBKVwiLHZyOlwiRkRcIixuYW1lOlwiVm9sdW1lVG9UYWJsZU1hcHBpbmdNYXRyaXhcIix2bTpcIjE2XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTMwQilcIjp7dGFnOlwiKDAwMjAsOTMwQilcIix2cjpcIkNTXCIsbmFtZTpcIlZvbHVtZVRvVHJhbnNkdWNlclJlbGF0aW9uc2hpcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMEMpXCI6e3RhZzpcIigwMDIwLDkzMEMpXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXRpZW50RnJhbWVPZlJlZmVyZW5jZVNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMEQpXCI6e3RhZzpcIigwMDIwLDkzMEQpXCIsdnI6XCJGRFwiLG5hbWU6XCJUZW1wb3JhbFBvc2l0aW9uVGltZU9mZnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMEUpXCI6e3RhZzpcIigwMDIwLDkzMEUpXCIsdnI6XCJTUVwiLG5hbWU6XCJQbGFuZVBvc2l0aW9uVm9sdW1lU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MzBGKVwiOnt0YWc6XCIoMDAyMCw5MzBGKVwiLHZyOlwiU1FcIixuYW1lOlwiUGxhbmVPcmllbnRhdGlvblZvbHVtZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTMxMClcIjp7dGFnOlwiKDAwMjAsOTMxMClcIix2cjpcIlNRXCIsbmFtZTpcIlRlbXBvcmFsUG9zaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIwLDkzMTEpXCI6e3RhZzpcIigwMDIwLDkzMTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJEaW1lbnNpb25Pcmdhbml6YXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTMxMilcIjp7dGFnOlwiKDAwMjAsOTMxMilcIix2cjpcIlVJXCIsbmFtZTpcIlZvbHVtZUZyYW1lT2ZSZWZlcmVuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5MzEzKVwiOnt0YWc6XCIoMDAyMCw5MzEzKVwiLHZyOlwiVUlcIixuYW1lOlwiVGFibGVGcmFtZU9mUmVmZXJlbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTQyMSlcIjp7dGFnOlwiKDAwMjAsOTQyMSlcIix2cjpcIkxPXCIsbmFtZTpcIkRpbWVuc2lvbkRlc2NyaXB0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5NDUwKVwiOnt0YWc6XCIoMDAyMCw5NDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudE9yaWVudGF0aW9uSW5GcmFtZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTQ1MylcIjp7dGFnOlwiKDAwMjAsOTQ1MylcIix2cjpcIkxPXCIsbmFtZTpcIkZyYW1lTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMCw5NTE4KVwiOnt0YWc6XCIoMDAyMCw5NTE4KVwiLHZyOlwiVVNcIixuYW1lOlwiQWNxdWlzaXRpb25JbmRleFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTUyOSlcIjp7dGFnOlwiKDAwMjAsOTUyOSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyaWJ1dGluZ1NPUEluc3RhbmNlc1JlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjAsOTUzNilcIjp7dGFnOlwiKDAwMjAsOTUzNilcIix2cjpcIlVTXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDAxKVwiOnt0YWc6XCIoMDAyMiwwMDAxKVwiLHZyOlwiVVNcIixuYW1lOlwiTGlnaHRQYXRoRmlsdGVyUGFzc1Rocm91Z2hXYXZlbGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAwMilcIjp7dGFnOlwiKDAwMjIsMDAwMilcIix2cjpcIlVTXCIsbmFtZTpcIkxpZ2h0UGF0aEZpbHRlclBhc3NCYW5kXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAwMylcIjp7dGFnOlwiKDAwMjIsMDAwMylcIix2cjpcIlVTXCIsbmFtZTpcIkltYWdlUGF0aEZpbHRlclBhc3NUaHJvdWdoV2F2ZWxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMDQpXCI6e3RhZzpcIigwMDIyLDAwMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJJbWFnZVBhdGhGaWx0ZXJQYXNzQmFuZFwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMDUpXCI6e3RhZzpcIigwMDIyLDAwMDUpXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXRpZW50RXllTW92ZW1lbnRDb21tYW5kZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDA2KVwiOnt0YWc6XCIoMDAyMiwwMDA2KVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudEV5ZU1vdmVtZW50Q29tbWFuZENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMDcpXCI6e3RhZzpcIigwMDIyLDAwMDcpXCIsdnI6XCJGTFwiLG5hbWU6XCJTcGhlcmljYWxMZW5zUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDA4KVwiOnt0YWc6XCIoMDAyMiwwMDA4KVwiLHZyOlwiRkxcIixuYW1lOlwiQ3lsaW5kZXJMZW5zUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDA5KVwiOnt0YWc6XCIoMDAyMiwwMDA5KVwiLHZyOlwiRkxcIixuYW1lOlwiQ3lsaW5kZXJBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAwQSlcIjp7dGFnOlwiKDAwMjIsMDAwQSlcIix2cjpcIkZMXCIsbmFtZTpcIkVtbWV0cm9waWNNYWduaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAwQilcIjp7dGFnOlwiKDAwMjIsMDAwQilcIix2cjpcIkZMXCIsbmFtZTpcIkludHJhT2N1bGFyUHJlc3N1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDBDKVwiOnt0YWc6XCIoMDAyMiwwMDBDKVwiLHZyOlwiRkxcIixuYW1lOlwiSG9yaXpvbnRhbEZpZWxkT2ZWaWV3XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAwRClcIjp7dGFnOlwiKDAwMjIsMDAwRClcIix2cjpcIkNTXCIsbmFtZTpcIlB1cGlsRGlsYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMEUpXCI6e3RhZzpcIigwMDIyLDAwMEUpXCIsdnI6XCJGTFwiLG5hbWU6XCJEZWdyZWVPZkRpbGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxMClcIjp7dGFnOlwiKDAwMjIsMDAxMClcIix2cjpcIkZMXCIsbmFtZTpcIlN0ZXJlb0Jhc2VsaW5lQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDExKVwiOnt0YWc6XCIoMDAyMiwwMDExKVwiLHZyOlwiRkxcIixuYW1lOlwiU3RlcmVvQmFzZWxpbmVEaXNwbGFjZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDEyKVwiOnt0YWc6XCIoMDAyMiwwMDEyKVwiLHZyOlwiRkxcIixuYW1lOlwiU3RlcmVvSG9yaXpvbnRhbFBpeGVsT2Zmc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxMylcIjp7dGFnOlwiKDAwMjIsMDAxMylcIix2cjpcIkZMXCIsbmFtZTpcIlN0ZXJlb1ZlcnRpY2FsUGl4ZWxPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDE0KVwiOnt0YWc6XCIoMDAyMiwwMDE0KVwiLHZyOlwiRkxcIixuYW1lOlwiU3RlcmVvUm90YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDE1KVwiOnt0YWc6XCIoMDAyMiwwMDE1KVwiLHZyOlwiU1FcIixuYW1lOlwiQWNxdWlzaXRpb25EZXZpY2VUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxNilcIjp7dGFnOlwiKDAwMjIsMDAxNilcIix2cjpcIlNRXCIsbmFtZTpcIklsbHVtaW5hdGlvblR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDE3KVwiOnt0YWc6XCIoMDAyMiwwMDE3KVwiLHZyOlwiU1FcIixuYW1lOlwiTGlnaHRQYXRoRmlsdGVyVHlwZVN0YWNrQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxOClcIjp7dGFnOlwiKDAwMjIsMDAxOClcIix2cjpcIlNRXCIsbmFtZTpcIkltYWdlUGF0aEZpbHRlclR5cGVTdGFja0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMTkpXCI6e3RhZzpcIigwMDIyLDAwMTkpXCIsdnI6XCJTUVwiLG5hbWU6XCJMZW5zZXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDFBKVwiOnt0YWc6XCIoMDAyMiwwMDFBKVwiLHZyOlwiU1FcIixuYW1lOlwiQ2hhbm5lbERlc2NyaXB0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxQilcIjp7dGFnOlwiKDAwMjIsMDAxQilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZnJhY3RpdmVTdGF0ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxQylcIjp7dGFnOlwiKDAwMjIsMDAxQylcIix2cjpcIlNRXCIsbmFtZTpcIk15ZHJpYXRpY0FnZW50Q29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAxRClcIjp7dGFnOlwiKDAwMjIsMDAxRClcIix2cjpcIlNRXCIsbmFtZTpcIlJlbGF0aXZlSW1hZ2VQb3NpdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMUUpXCI6e3RhZzpcIigwMDIyLDAwMUUpXCIsdnI6XCJGTFwiLG5hbWU6XCJDYW1lcmFBbmdsZU9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMjApXCI6e3RhZzpcIigwMDIyLDAwMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJTdGVyZW9QYWlyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAyMSlcIjp7dGFnOlwiKDAwMjIsMDAyMSlcIix2cjpcIlNRXCIsbmFtZTpcIkxlZnRJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAyMilcIjp7dGFnOlwiKDAwMjIsMDAyMilcIix2cjpcIlNRXCIsbmFtZTpcIlJpZ2h0SW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMjgpXCI6e3RhZzpcIigwMDIyLDAwMjgpXCIsdnI6XCJDU1wiLG5hbWU6XCJTdGVyZW9QYWlyc1ByZXNlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDMwKVwiOnt0YWc6XCIoMDAyMiwwMDMwKVwiLHZyOlwiRkxcIixuYW1lOlwiQXhpYWxMZW5ndGhPZlRoZUV5ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMzEpXCI6e3RhZzpcIigwMDIyLDAwMzEpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljRnJhbWVMb2NhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAzMilcIjp7dGFnOlwiKDAwMjIsMDAzMilcIix2cjpcIkZMXCIsbmFtZTpcIlJlZmVyZW5jZUNvb3JkaW5hdGVzXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDAzNSlcIjp7dGFnOlwiKDAwMjIsMDAzNSlcIix2cjpcIkZMXCIsbmFtZTpcIkRlcHRoU3BhdGlhbFJlc29sdXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDM2KVwiOnt0YWc6XCIoMDAyMiwwMDM2KVwiLHZyOlwiRkxcIixuYW1lOlwiTWF4aW11bURlcHRoRGlzdG9ydGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMzcpXCI6e3RhZzpcIigwMDIyLDAwMzcpXCIsdnI6XCJGTFwiLG5hbWU6XCJBbG9uZ1NjYW5TcGF0aWFsUmVzb2x1dGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMzgpXCI6e3RhZzpcIigwMDIyLDAwMzgpXCIsdnI6XCJGTFwiLG5hbWU6XCJNYXhpbXVtQWxvbmdTY2FuRGlzdG9ydGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwMzkpXCI6e3RhZzpcIigwMDIyLDAwMzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJPcGh0aGFsbWljSW1hZ2VPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwNDEpXCI6e3RhZzpcIigwMDIyLDAwNDEpXCIsdnI6XCJGTFwiLG5hbWU6XCJEZXB0aE9mVHJhbnN2ZXJzZUltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDA0MilcIjp7dGFnOlwiKDAwMjIsMDA0MilcIix2cjpcIlNRXCIsbmFtZTpcIk15ZHJpYXRpY0FnZW50Q29uY2VudHJhdGlvblVuaXRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDQ4KVwiOnt0YWc6XCIoMDAyMiwwMDQ4KVwiLHZyOlwiRkxcIixuYW1lOlwiQWNyb3NzU2NhblNwYXRpYWxSZXNvbHV0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMDA0OSlcIjp7dGFnOlwiKDAwMjIsMDA0OSlcIix2cjpcIkZMXCIsbmFtZTpcIk1heGltdW1BY3Jvc3NTY2FuRGlzdG9ydGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwNEUpXCI6e3RhZzpcIigwMDIyLDAwNEUpXCIsdnI6XCJEU1wiLG5hbWU6XCJNeWRyaWF0aWNBZ2VudENvbmNlbnRyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDU1KVwiOnt0YWc6XCIoMDAyMiwwMDU1KVwiLHZyOlwiRkxcIixuYW1lOlwiSWxsdW1pbmF0aW9uV2F2ZUxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwNTYpXCI6e3RhZzpcIigwMDIyLDAwNTYpXCIsdnI6XCJGTFwiLG5hbWU6XCJJbGx1bWluYXRpb25Qb3dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDAwNTcpXCI6e3RhZzpcIigwMDIyLDAwNTcpXCIsdnI6XCJGTFwiLG5hbWU6XCJJbGx1bWluYXRpb25CYW5kd2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwwMDU4KVwiOnt0YWc6XCIoMDAyMiwwMDU4KVwiLHZyOlwiU1FcIixuYW1lOlwiTXlkcmlhdGljQWdlbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwMDcpXCI6e3RhZzpcIigwMDIyLDEwMDcpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxNZWFzdXJlbWVudHNSaWdodEV5ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTAwOClcIjp7dGFnOlwiKDAwMjIsMTAwOClcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNBeGlhbE1lYXN1cmVtZW50c0xlZnRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwMDkpXCI6e3RhZzpcIigwMDIyLDEwMDkpXCIsdnI6XCJDU1wiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxNZWFzdXJlbWVudHNEZXZpY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTAxMClcIjp7dGFnOlwiKDAwMjIsMTAxMClcIix2cjpcIkNTXCIsbmFtZTpcIk9waHRoYWxtaWNBeGlhbExlbmd0aE1lYXN1cmVtZW50c1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDEyKVwiOnt0YWc6XCIoMDAyMiwxMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiT3BodGhhbG1pY0F4aWFsTGVuZ3RoU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDE5KVwiOnt0YWc6XCIoMDAyMiwxMDE5KVwiLHZyOlwiRkxcIixuYW1lOlwiT3BodGhhbG1pY0F4aWFsTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTAyNClcIjp7dGFnOlwiKDAwMjIsMTAyNClcIix2cjpcIlNRXCIsbmFtZTpcIkxlbnNTdGF0dXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDI1KVwiOnt0YWc6XCIoMDAyMiwxMDI1KVwiLHZyOlwiU1FcIixuYW1lOlwiVml0cmVvdXNTdGF0dXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDI4KVwiOnt0YWc6XCIoMDAyMiwxMDI4KVwiLHZyOlwiU1FcIixuYW1lOlwiSU9MRm9ybXVsYUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwMjkpXCI6e3RhZzpcIigwMDIyLDEwMjkpXCIsdnI6XCJMT1wiLG5hbWU6XCJJT0xGb3JtdWxhRGV0YWlsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTAzMylcIjp7dGFnOlwiKDAwMjIsMTAzMylcIix2cjpcIkZMXCIsbmFtZTpcIktlcmF0b21ldGVySW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDM1KVwiOnt0YWc6XCIoMDAyMiwxMDM1KVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlT2ZPcGh0aGFsbWljQXhpYWxMZW5ndGhDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDM3KVwiOnt0YWc6XCIoMDAyMiwxMDM3KVwiLHZyOlwiRkxcIixuYW1lOlwiVGFyZ2V0UmVmcmFjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwMzkpXCI6e3RhZzpcIigwMDIyLDEwMzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWZyYWN0aXZlUHJvY2VkdXJlT2NjdXJyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDQwKVwiOnt0YWc6XCIoMDAyMiwxMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmcmFjdGl2ZVN1cmdlcnlUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA0NClcIjp7dGFnOlwiKDAwMjIsMTA0NClcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNVbHRyYXNvdW5kTWV0aG9kQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA1MClcIjp7dGFnOlwiKDAwMjIsMTA1MClcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNBeGlhbExlbmd0aE1lYXN1cmVtZW50c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA1MylcIjp7dGFnOlwiKDAwMjIsMTA1MylcIix2cjpcIkZMXCIsbmFtZTpcIklPTFBvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA1NClcIjp7dGFnOlwiKDAwMjIsMTA1NClcIix2cjpcIkZMXCIsbmFtZTpcIlByZWRpY3RlZFJlZnJhY3RpdmVFcnJvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwNTkpXCI6e3RhZzpcIigwMDIyLDEwNTkpXCIsdnI6XCJGTFwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhWZWxvY2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwNjUpXCI6e3RhZzpcIigwMDIyLDEwNjUpXCIsdnI6XCJMT1wiLG5hbWU6XCJMZW5zU3RhdHVzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMDY2KVwiOnt0YWc6XCIoMDAyMiwxMDY2KVwiLHZyOlwiTE9cIixuYW1lOlwiVml0cmVvdXNTdGF0dXNEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwOTApXCI6e3RhZzpcIigwMDIyLDEwOTApXCIsdnI6XCJTUVwiLG5hbWU6XCJJT0xQb3dlclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA5MilcIjp7dGFnOlwiKDAwMjIsMTA5MilcIix2cjpcIlNRXCIsbmFtZTpcIkxlbnNDb25zdGFudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTA5MylcIjp7dGFnOlwiKDAwMjIsMTA5MylcIix2cjpcIkxPXCIsbmFtZTpcIklPTE1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwOTUpXCI6e3RhZzpcIigwMDIyLDEwOTUpXCIsdnI6XCJMT1wiLG5hbWU6XCJJbXBsYW50TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwOTYpXCI6e3RhZzpcIigwMDIyLDEwOTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJLZXJhdG9tZXRyeU1lYXN1cmVtZW50VHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEwOTcpXCI6e3RhZzpcIigwMDIyLDEwOTcpXCIsdnI6XCJMT1wiLG5hbWU6XCJJbXBsYW50UGFydE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExMDApXCI6e3RhZzpcIigwMDIyLDExMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkT3BodGhhbG1pY0F4aWFsTWVhc3VyZW1lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTAxKVwiOnt0YWc6XCIoMDAyMiwxMTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiT3BodGhhbG1pY0F4aWFsTGVuZ3RoTWVhc3VyZW1lbnRzU2VnbWVudE5hbWVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTAzKVwiOnt0YWc6XCIoMDAyMiwxMTAzKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmcmFjdGl2ZUVycm9yQmVmb3JlUmVmcmFjdGl2ZVN1cmdlcnlDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTIxKVwiOnt0YWc6XCIoMDAyMiwxMTIxKVwiLHZyOlwiRkxcIixuYW1lOlwiSU9MUG93ZXJGb3JFeGFjdEVtbWV0cm9waWFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTIyKVwiOnt0YWc6XCIoMDAyMiwxMTIyKVwiLHZyOlwiRkxcIixuYW1lOlwiSU9MUG93ZXJGb3JFeGFjdFRhcmdldFJlZnJhY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTI1KVwiOnt0YWc6XCIoMDAyMiwxMTI1KVwiLHZyOlwiU1FcIixuYW1lOlwiQW50ZXJpb3JDaGFtYmVyRGVwdGhEZWZpbml0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTEyNylcIjp7dGFnOlwiKDAwMjIsMTEyNylcIix2cjpcIlNRXCIsbmFtZTpcIkxlbnNUaGlja25lc3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExMjgpXCI6e3RhZzpcIigwMDIyLDExMjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJBbnRlcmlvckNoYW1iZXJEZXB0aFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTEzMClcIjp7dGFnOlwiKDAwMjIsMTEzMClcIix2cjpcIkZMXCIsbmFtZTpcIkxlbnNUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTMxKVwiOnt0YWc6XCIoMDAyMiwxMTMxKVwiLHZyOlwiRkxcIixuYW1lOlwiQW50ZXJpb3JDaGFtYmVyRGVwdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTMyKVwiOnt0YWc6XCIoMDAyMiwxMTMyKVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlT2ZMZW5zVGhpY2tuZXNzRGF0YUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExMzMpXCI6e3RhZzpcIigwMDIyLDExMzMpXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3VyY2VPZkFudGVyaW9yQ2hhbWJlckRlcHRoRGF0YUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExMzQpXCI6e3RhZzpcIigwMDIyLDExMzQpXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3VyY2VPZlJlZnJhY3RpdmVNZWFzdXJlbWVudHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExMzUpXCI6e3RhZzpcIigwMDIyLDExMzUpXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3VyY2VPZlJlZnJhY3RpdmVNZWFzdXJlbWVudHNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMTQwKVwiOnt0YWc6XCIoMDAyMiwxMTQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiT3BodGhhbG1pY0F4aWFsTGVuZ3RoTWVhc3VyZW1lbnRNb2RpZmllZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExNTApXCI6e3RhZzpcIigwMDIyLDExNTApXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhEYXRhU291cmNlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTE1NSlcIjp7dGFnOlwiKDAwMjIsMTE1NSlcIix2cjpcIkZMXCIsbmFtZTpcIlNpZ25hbFRvTm9pc2VSYXRpb1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDExNTkpXCI6e3RhZzpcIigwMDIyLDExNTkpXCIsdnI6XCJMT1wiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhEYXRhU291cmNlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMjEwKVwiOnt0YWc6XCIoMDAyMiwxMjEwKVwiLHZyOlwiU1FcIixuYW1lOlwiT3BodGhhbG1pY0F4aWFsTGVuZ3RoTWVhc3VyZW1lbnRzVG90YWxMZW5ndGhTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyMTEpXCI6e3RhZzpcIigwMDIyLDEyMTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhNZWFzdXJlbWVudHNTZWdtZW50YWxMZW5ndGhTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyMTIpXCI6e3RhZzpcIigwMDIyLDEyMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhNZWFzdXJlbWVudHNMZW5ndGhTdW1tYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyMjApXCI6e3RhZzpcIigwMDIyLDEyMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJVbHRyYXNvdW5kT3BodGhhbG1pY0F4aWFsTGVuZ3RoTWVhc3VyZW1lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMjI1KVwiOnt0YWc6XCIoMDAyMiwxMjI1KVwiLHZyOlwiU1FcIixuYW1lOlwiT3B0aWNhbE9waHRoYWxtaWNBeGlhbExlbmd0aE1lYXN1cmVtZW50c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTIzMClcIjp7dGFnOlwiKDAwMjIsMTIzMClcIix2cjpcIlNRXCIsbmFtZTpcIlVsdHJhc291bmRTZWxlY3RlZE9waHRoYWxtaWNBeGlhbExlbmd0aFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTI1MClcIjp7dGFnOlwiKDAwMjIsMTI1MClcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNBeGlhbExlbmd0aFNlbGVjdGlvbk1ldGhvZENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyNTUpXCI6e3RhZzpcIigwMDIyLDEyNTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcHRpY2FsU2VsZWN0ZWRPcGh0aGFsbWljQXhpYWxMZW5ndGhTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyNTcpXCI6e3RhZzpcIigwMDIyLDEyNTcpXCIsdnI6XCJTUVwiLG5hbWU6XCJTZWxlY3RlZFNlZ21lbnRhbE9waHRoYWxtaWNBeGlhbExlbmd0aFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTI2MClcIjp7dGFnOlwiKDAwMjIsMTI2MClcIix2cjpcIlNRXCIsbmFtZTpcIlNlbGVjdGVkVG90YWxPcGh0aGFsbWljQXhpYWxMZW5ndGhTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEyNjIpXCI6e3RhZzpcIigwMDIyLDEyNjIpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhRdWFsaXR5TWV0cmljU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMzAwKVwiOnt0YWc6XCIoMDAyMiwxMzAwKVwiLHZyOlwiU1FcIixuYW1lOlwiSW50cmFvY3VsYXJMZW5zQ2FsY3VsYXRpb25zUmlnaHRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDEzMTApXCI6e3RhZzpcIigwMDIyLDEzMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbnRyYW9jdWxhckxlbnNDYWxjdWxhdGlvbnNMZWZ0RXllU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxMzMwKVwiOnt0YWc6XCIoMDAyMiwxMzMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZE9waHRoYWxtaWNBeGlhbExlbmd0aE1lYXN1cmVtZW50UUNJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQxNSlcIjp7dGFnOlwiKDAwMjIsMTQxNSlcIix2cjpcIkNTXCIsbmFtZTpcIk9waHRoYWxtaWNNYXBwaW5nRGV2aWNlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0MjApXCI6e3RhZzpcIigwMDIyLDE0MjApXCIsdnI6XCJTUVwiLG5hbWU6XCJBY3F1aXNpdGlvbk1ldGhvZENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0MjMpXCI6e3RhZzpcIigwMDIyLDE0MjMpXCIsdnI6XCJTUVwiLG5hbWU6XCJBY3F1aXNpdGlvbk1ldGhvZEFsZ29yaXRobVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQzNilcIjp7dGFnOlwiKDAwMjIsMTQzNilcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNUaGlja25lc3NNYXBUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ0MylcIjp7dGFnOlwiKDAwMjIsMTQ0MylcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNUaGlja25lc3NNYXBwaW5nTm9ybWFsc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ0NSlcIjp7dGFnOlwiKDAwMjIsMTQ0NSlcIix2cjpcIlNRXCIsbmFtZTpcIlJldGluYWxUaGlja25lc3NEZWZpbml0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ1MClcIjp7dGFnOlwiKDAwMjIsMTQ1MClcIix2cjpcIlNRXCIsbmFtZTpcIlBpeGVsVmFsdWVNYXBwaW5nVG9Db2RlZENvbmNlcHRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0NTIpXCI6e3RhZzpcIigwMDIyLDE0NTIpXCIsdnI6XCJ4c1wiLG5hbWU6XCJNYXBwZWRQaXhlbFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ1NClcIjp7dGFnOlwiKDAwMjIsMTQ1NClcIix2cjpcIkxPXCIsbmFtZTpcIlBpeGVsVmFsdWVNYXBwaW5nRXhwbGFuYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNDU4KVwiOnt0YWc6XCIoMDAyMiwxNDU4KVwiLHZyOlwiU1FcIixuYW1lOlwiT3BodGhhbG1pY1RoaWNrbmVzc01hcFF1YWxpdHlUaHJlc2hvbGRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0NjApXCI6e3RhZzpcIigwMDIyLDE0NjApXCIsdnI6XCJGTFwiLG5hbWU6XCJPcGh0aGFsbWljVGhpY2tuZXNzTWFwVGhyZXNob2xkUXVhbGl0eVJhdGluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0NjMpXCI6e3RhZzpcIigwMDIyLDE0NjMpXCIsdnI6XCJGTFwiLG5hbWU6XCJBbmF0b21pY1N0cnVjdHVyZVJlZmVyZW5jZVBvaW50XCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ2NSlcIjp7dGFnOlwiKDAwMjIsMTQ2NSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZ2lzdHJhdGlvblRvTG9jYWxpemVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNDY2KVwiOnt0YWc6XCIoMDAyMiwxNDY2KVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVnaXN0ZXJlZExvY2FsaXplclVuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ2NylcIjp7dGFnOlwiKDAwMjIsMTQ2NylcIix2cjpcIkZMXCIsbmFtZTpcIlJlZ2lzdGVyZWRMb2NhbGl6ZXJUb3BMZWZ0SGFuZENvcm5lclwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE0NjgpXCI6e3RhZzpcIigwMDIyLDE0NjgpXCIsdnI6XCJGTFwiLG5hbWU6XCJSZWdpc3RlcmVkTG9jYWxpemVyQm90dG9tUmlnaHRIYW5kQ29ybmVyXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTQ3MClcIjp7dGFnOlwiKDAwMjIsMTQ3MClcIix2cjpcIlNRXCIsbmFtZTpcIk9waHRoYWxtaWNUaGlja25lc3NNYXBRdWFsaXR5UmF0aW5nU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNDcyKVwiOnt0YWc6XCIoMDAyMiwxNDcyKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVsZXZhbnRPUFRBdHRyaWJ1dGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNTEyKVwiOnt0YWc6XCIoMDAyMiwxNTEyKVwiLHZyOlwiU1FcIixuYW1lOlwiVHJhbnNmb3JtYXRpb25NZXRob2RDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNTEzKVwiOnt0YWc6XCIoMDAyMiwxNTEzKVwiLHZyOlwiU1FcIixuYW1lOlwiVHJhbnNmb3JtYXRpb25BbGdvcml0aG1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MTUpXCI6e3RhZzpcIigwMDIyLDE1MTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJPcGh0aGFsbWljQXhpYWxMZW5ndGhNZXRob2RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNTE3KVwiOnt0YWc6XCIoMDAyMiwxNTE3KVwiLHZyOlwiRkxcIixuYW1lOlwiT3BodGhhbG1pY0ZPVlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MTgpXCI6e3RhZzpcIigwMDIyLDE1MTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJUd29EaW1lbnNpb25hbFRvVGhyZWVEaW1lbnNpb25hbE1hcFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjIsMTUyNSlcIjp7dGFnOlwiKDAwMjIsMTUyNSlcIix2cjpcIlNRXCIsbmFtZTpcIldpZGVGaWVsZE9waHRoYWxtaWNQaG90b2dyYXBoeVF1YWxpdHlSYXRpbmdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MjYpXCI6e3RhZzpcIigwMDIyLDE1MjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJXaWRlRmllbGRPcGh0aGFsbWljUGhvdG9ncmFwaHlRdWFsaXR5VGhyZXNob2xkU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyMiwxNTI3KVwiOnt0YWc6XCIoMDAyMiwxNTI3KVwiLHZyOlwiRkxcIixuYW1lOlwiV2lkZUZpZWxkT3BodGhhbG1pY1Bob3RvZ3JhcGh5VGhyZXNob2xkUXVhbGl0eVJhdGluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MjgpXCI6e3RhZzpcIigwMDIyLDE1MjgpXCIsdnI6XCJGTFwiLG5hbWU6XCJYQ29vcmRpbmF0ZXNDZW50ZXJQaXhlbFZpZXdBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MjkpXCI6e3RhZzpcIigwMDIyLDE1MjkpXCIsdnI6XCJGTFwiLG5hbWU6XCJZQ29vcmRpbmF0ZXNDZW50ZXJQaXhlbFZpZXdBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MzApXCI6e3RhZzpcIigwMDIyLDE1MzApXCIsdnI6XCJVTFwiLG5hbWU6XCJOdW1iZXJPZk1hcFBvaW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDIyLDE1MzEpXCI6e3RhZzpcIigwMDIyLDE1MzEpXCIsdnI6XCJPRlwiLG5hbWU6XCJUd29EaW1lbnNpb25hbFRvVGhyZWVEaW1lbnNpb25hbE1hcERhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDEwKVwiOnt0YWc6XCIoMDAyNCwwMDEwKVwiLHZyOlwiRkxcIixuYW1lOlwiVmlzdWFsRmllbGRIb3Jpem9udGFsRXh0ZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAxMSlcIjp7dGFnOlwiKDAwMjQsMDAxMSlcIix2cjpcIkZMXCIsbmFtZTpcIlZpc3VhbEZpZWxkVmVydGljYWxFeHRlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDEyKVwiOnt0YWc6XCIoMDAyNCwwMDEyKVwiLHZyOlwiQ1NcIixuYW1lOlwiVmlzdWFsRmllbGRTaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwMTYpXCI6e3RhZzpcIigwMDI0LDAwMTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJTY3JlZW5pbmdUZXN0TW9kZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwMTgpXCI6e3RhZzpcIigwMDI0LDAwMTgpXCIsdnI6XCJGTFwiLG5hbWU6XCJNYXhpbXVtU3RpbXVsdXNMdW1pbmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDIwKVwiOnt0YWc6XCIoMDAyNCwwMDIwKVwiLHZyOlwiRkxcIixuYW1lOlwiQmFja2dyb3VuZEx1bWluYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwMjEpXCI6e3RhZzpcIigwMDI0LDAwMjEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdGltdWx1c0NvbG9yQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAyNClcIjp7dGFnOlwiKDAwMjQsMDAyNClcIix2cjpcIlNRXCIsbmFtZTpcIkJhY2tncm91bmRJbGx1bWluYXRpb25Db2xvckNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwMjUpXCI6e3RhZzpcIigwMDI0LDAwMjUpXCIsdnI6XCJGTFwiLG5hbWU6XCJTdGltdWx1c0FyZWFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDI4KVwiOnt0YWc6XCIoMDAyNCwwMDI4KVwiLHZyOlwiRkxcIixuYW1lOlwiU3RpbXVsdXNQcmVzZW50YXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAzMilcIjp7dGFnOlwiKDAwMjQsMDAzMilcIix2cjpcIlNRXCIsbmFtZTpcIkZpeGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDMzKVwiOnt0YWc6XCIoMDAyNCwwMDMzKVwiLHZyOlwiU1FcIixuYW1lOlwiRml4YXRpb25Nb25pdG9yaW5nQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAzNClcIjp7dGFnOlwiKDAwMjQsMDAzNClcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEZpZWxkQ2F0Y2hUcmlhbFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAzNSlcIjp7dGFnOlwiKDAwMjQsMDAzNSlcIix2cjpcIlVTXCIsbmFtZTpcIkZpeGF0aW9uQ2hlY2tlZFF1YW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAzNilcIjp7dGFnOlwiKDAwMjQsMDAzNilcIix2cjpcIlVTXCIsbmFtZTpcIlBhdGllbnROb3RQcm9wZXJseUZpeGF0ZWRRdWFudGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwMzcpXCI6e3RhZzpcIigwMDI0LDAwMzcpXCIsdnI6XCJDU1wiLG5hbWU6XCJQcmVzZW50ZWRWaXN1YWxTdGltdWxpRGF0YUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDM4KVwiOnt0YWc6XCIoMDAyNCwwMDM4KVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZWaXN1YWxTdGltdWxpXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDAzOSlcIjp7dGFnOlwiKDAwMjQsMDAzOSlcIix2cjpcIkNTXCIsbmFtZTpcIkV4Y2Vzc2l2ZUZpeGF0aW9uTG9zc2VzRGF0YUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDQwKVwiOnt0YWc6XCIoMDAyNCwwMDQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhjZXNzaXZlRml4YXRpb25Mb3NzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDQyKVwiOnt0YWc6XCIoMDAyNCwwMDQyKVwiLHZyOlwiVVNcIixuYW1lOlwiU3RpbXVsaVJldGVzdGluZ1F1YW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA0NClcIjp7dGFnOlwiKDAwMjQsMDA0NClcIix2cjpcIkxUXCIsbmFtZTpcIkNvbW1lbnRzT25QYXRpZW50UGVyZm9ybWFuY2VPZlZpc3VhbEZpZWxkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA0NSlcIjp7dGFnOlwiKDAwMjQsMDA0NSlcIix2cjpcIkNTXCIsbmFtZTpcIkZhbHNlTmVnYXRpdmVzRXN0aW1hdGVGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA0NilcIjp7dGFnOlwiKDAwMjQsMDA0NilcIix2cjpcIkZMXCIsbmFtZTpcIkZhbHNlTmVnYXRpdmVzRXN0aW1hdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDQ4KVwiOnt0YWc6XCIoMDAyNCwwMDQ4KVwiLHZyOlwiVVNcIixuYW1lOlwiTmVnYXRpdmVDYXRjaFRyaWFsc1F1YW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA1MClcIjp7dGFnOlwiKDAwMjQsMDA1MClcIix2cjpcIlVTXCIsbmFtZTpcIkZhbHNlTmVnYXRpdmVzUXVhbnRpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDUxKVwiOnt0YWc6XCIoMDAyNCwwMDUxKVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhjZXNzaXZlRmFsc2VOZWdhdGl2ZXNEYXRhRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNTIpXCI6e3RhZzpcIigwMDI0LDAwNTIpXCIsdnI6XCJDU1wiLG5hbWU6XCJFeGNlc3NpdmVGYWxzZU5lZ2F0aXZlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNTMpXCI6e3RhZzpcIigwMDI0LDAwNTMpXCIsdnI6XCJDU1wiLG5hbWU6XCJGYWxzZVBvc2l0aXZlc0VzdGltYXRlRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNTQpXCI6e3RhZzpcIigwMDI0LDAwNTQpXCIsdnI6XCJGTFwiLG5hbWU6XCJGYWxzZVBvc2l0aXZlc0VzdGltYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA1NSlcIjp7dGFnOlwiKDAwMjQsMDA1NSlcIix2cjpcIkNTXCIsbmFtZTpcIkNhdGNoVHJpYWxzRGF0YUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDU2KVwiOnt0YWc6XCIoMDAyNCwwMDU2KVwiLHZyOlwiVVNcIixuYW1lOlwiUG9zaXRpdmVDYXRjaFRyaWFsc1F1YW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA1NylcIjp7dGFnOlwiKDAwMjQsMDA1NylcIix2cjpcIkNTXCIsbmFtZTpcIlRlc3RQb2ludE5vcm1hbHNEYXRhRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNTgpXCI6e3RhZzpcIigwMDI0LDAwNTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJUZXN0UG9pbnROb3JtYWxzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDU5KVwiOnt0YWc6XCIoMDAyNCwwMDU5KVwiLHZyOlwiQ1NcIixuYW1lOlwiR2xvYmFsRGV2aWF0aW9uUHJvYmFiaWxpdHlOb3JtYWxzRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNjApXCI6e3RhZzpcIigwMDI0LDAwNjApXCIsdnI6XCJVU1wiLG5hbWU6XCJGYWxzZVBvc2l0aXZlc1F1YW50aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA2MSlcIjp7dGFnOlwiKDAwMjQsMDA2MSlcIix2cjpcIkNTXCIsbmFtZTpcIkV4Y2Vzc2l2ZUZhbHNlUG9zaXRpdmVzRGF0YUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDYyKVwiOnt0YWc6XCIoMDAyNCwwMDYyKVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhjZXNzaXZlRmFsc2VQb3NpdGl2ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDYzKVwiOnt0YWc6XCIoMDAyNCwwMDYzKVwiLHZyOlwiQ1NcIixuYW1lOlwiVmlzdWFsRmllbGRUZXN0Tm9ybWFsc0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDY0KVwiOnt0YWc6XCIoMDAyNCwwMDY0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVzdWx0c05vcm1hbHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNjUpXCI6e3RhZzpcIigwMDI0LDAwNjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJBZ2VDb3JyZWN0ZWRTZW5zaXRpdml0eURldmlhdGlvbkFsZ29yaXRobVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA2NilcIjp7dGFnOlwiKDAwMjQsMDA2NilcIix2cjpcIkZMXCIsbmFtZTpcIkdsb2JhbERldmlhdGlvbkZyb21Ob3JtYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDY3KVwiOnt0YWc6XCIoMDAyNCwwMDY3KVwiLHZyOlwiU1FcIixuYW1lOlwiR2VuZXJhbGl6ZWREZWZlY3RTZW5zaXRpdml0eURldmlhdGlvbkFsZ29yaXRobVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA2OClcIjp7dGFnOlwiKDAwMjQsMDA2OClcIix2cjpcIkZMXCIsbmFtZTpcIkxvY2FsaXplZERldmlhdGlvbkZyb21Ob3JtYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDY5KVwiOnt0YWc6XCIoMDAyNCwwMDY5KVwiLHZyOlwiTE9cIixuYW1lOlwiUGF0aWVudFJlbGlhYmlsaXR5SW5kaWNhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA3MClcIjp7dGFnOlwiKDAwMjQsMDA3MClcIix2cjpcIkZMXCIsbmFtZTpcIlZpc3VhbEZpZWxkTWVhblNlbnNpdGl2aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA3MSlcIjp7dGFnOlwiKDAwMjQsMDA3MSlcIix2cjpcIkZMXCIsbmFtZTpcIkdsb2JhbERldmlhdGlvblByb2JhYmlsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA3MilcIjp7dGFnOlwiKDAwMjQsMDA3MilcIix2cjpcIkNTXCIsbmFtZTpcIkxvY2FsRGV2aWF0aW9uUHJvYmFiaWxpdHlOb3JtYWxzRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNzMpXCI6e3RhZzpcIigwMDI0LDAwNzMpXCIsdnI6XCJGTFwiLG5hbWU6XCJMb2NhbGl6ZWREZXZpYXRpb25Qcm9iYWJpbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNzQpXCI6e3RhZzpcIigwMDI0LDAwNzQpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaG9ydFRlcm1GbHVjdHVhdGlvbkNhbGN1bGF0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDc1KVwiOnt0YWc6XCIoMDAyNCwwMDc1KVwiLHZyOlwiRkxcIixuYW1lOlwiU2hvcnRUZXJtRmx1Y3R1YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDc2KVwiOnt0YWc6XCIoMDAyNCwwMDc2KVwiLHZyOlwiQ1NcIixuYW1lOlwiU2hvcnRUZXJtRmx1Y3R1YXRpb25Qcm9iYWJpbGl0eUNhbGN1bGF0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDc3KVwiOnt0YWc6XCIoMDAyNCwwMDc3KVwiLHZyOlwiRkxcIixuYW1lOlwiU2hvcnRUZXJtRmx1Y3R1YXRpb25Qcm9iYWJpbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNzgpXCI6e3RhZzpcIigwMDI0LDAwNzgpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3JyZWN0ZWRMb2NhbGl6ZWREZXZpYXRpb25Gcm9tTm9ybWFsQ2FsY3VsYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwNzkpXCI6e3RhZzpcIigwMDI0LDAwNzkpXCIsdnI6XCJGTFwiLG5hbWU6XCJDb3JyZWN0ZWRMb2NhbGl6ZWREZXZpYXRpb25Gcm9tTm9ybWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA4MClcIjp7dGFnOlwiKDAwMjQsMDA4MClcIix2cjpcIkNTXCIsbmFtZTpcIkNvcnJlY3RlZExvY2FsaXplZERldmlhdGlvbkZyb21Ob3JtYWxQcm9iYWJpbGl0eUNhbGN1bGF0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDgxKVwiOnt0YWc6XCIoMDAyNCwwMDgxKVwiLHZyOlwiRkxcIixuYW1lOlwiQ29ycmVjdGVkTG9jYWxpemVkRGV2aWF0aW9uRnJvbU5vcm1hbFByb2JhYmlsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA4MylcIjp7dGFnOlwiKDAwMjQsMDA4MylcIix2cjpcIlNRXCIsbmFtZTpcIkdsb2JhbERldmlhdGlvblByb2JhYmlsaXR5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDg1KVwiOnt0YWc6XCIoMDAyNCwwMDg1KVwiLHZyOlwiU1FcIixuYW1lOlwiTG9jYWxpemVkRGV2aWF0aW9uUHJvYmFiaWxpdHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwODYpXCI6e3RhZzpcIigwMDI0LDAwODYpXCIsdnI6XCJDU1wiLG5hbWU6XCJGb3ZlYWxTZW5zaXRpdml0eU1lYXN1cmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA4NylcIjp7dGFnOlwiKDAwMjQsMDA4NylcIix2cjpcIkZMXCIsbmFtZTpcIkZvdmVhbFNlbnNpdGl2aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA4OClcIjp7dGFnOlwiKDAwMjQsMDA4OClcIix2cjpcIkZMXCIsbmFtZTpcIlZpc3VhbEZpZWxkVGVzdER1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA4OSlcIjp7dGFnOlwiKDAwMjQsMDA4OSlcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEZpZWxkVGVzdFBvaW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDkwKVwiOnt0YWc6XCIoMDAyNCwwMDkwKVwiLHZyOlwiRkxcIixuYW1lOlwiVmlzdWFsRmllbGRUZXN0UG9pbnRYQ29vcmRpbmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAwOTEpXCI6e3RhZzpcIigwMDI0LDAwOTEpXCIsdnI6XCJGTFwiLG5hbWU6XCJWaXN1YWxGaWVsZFRlc3RQb2ludFlDb29yZGluYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA5MilcIjp7dGFnOlwiKDAwMjQsMDA5MilcIix2cjpcIkZMXCIsbmFtZTpcIkFnZUNvcnJlY3RlZFNlbnNpdGl2aXR5RGV2aWF0aW9uVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDkzKVwiOnt0YWc6XCIoMDAyNCwwMDkzKVwiLHZyOlwiQ1NcIixuYW1lOlwiU3RpbXVsdXNSZXN1bHRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA5NClcIjp7dGFnOlwiKDAwMjQsMDA5NClcIix2cjpcIkZMXCIsbmFtZTpcIlNlbnNpdGl2aXR5VmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDk1KVwiOnt0YWc6XCIoMDAyNCwwMDk1KVwiLHZyOlwiQ1NcIixuYW1lOlwiUmV0ZXN0U3RpbXVsdXNTZWVuXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDA5NilcIjp7dGFnOlwiKDAwMjQsMDA5NilcIix2cjpcIkZMXCIsbmFtZTpcIlJldGVzdFNlbnNpdGl2aXR5VmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDk3KVwiOnt0YWc6XCIoMDAyNCwwMDk3KVwiLHZyOlwiU1FcIixuYW1lOlwiVmlzdWFsRmllbGRUZXN0UG9pbnROb3JtYWxzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMDk4KVwiOnt0YWc6XCIoMDAyNCwwMDk4KVwiLHZyOlwiRkxcIixuYW1lOlwiUXVhbnRpZmllZERlZmVjdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMDApXCI6e3RhZzpcIigwMDI0LDAxMDApXCIsdnI6XCJGTFwiLG5hbWU6XCJBZ2VDb3JyZWN0ZWRTZW5zaXRpdml0eURldmlhdGlvblByb2JhYmlsaXR5VmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMTAyKVwiOnt0YWc6XCIoMDAyNCwwMTAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiR2VuZXJhbGl6ZWREZWZlY3RDb3JyZWN0ZWRTZW5zaXRpdml0eURldmlhdGlvbkZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMTAzKVwiOnt0YWc6XCIoMDAyNCwwMTAzKVwiLHZyOlwiRkxcIixuYW1lOlwiR2VuZXJhbGl6ZWREZWZlY3RDb3JyZWN0ZWRTZW5zaXRpdml0eURldmlhdGlvblZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDEwNClcIjp7dGFnOlwiKDAwMjQsMDEwNClcIix2cjpcIkZMXCIsbmFtZTpcIkdlbmVyYWxpemVkRGVmZWN0Q29ycmVjdGVkU2Vuc2l0aXZpdHlEZXZpYXRpb25Qcm9iYWJpbGl0eVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDEwNSlcIjp7dGFnOlwiKDAwMjQsMDEwNSlcIix2cjpcIkZMXCIsbmFtZTpcIk1pbmltdW1TZW5zaXRpdml0eVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDEwNilcIjp7dGFnOlwiKDAwMjQsMDEwNilcIix2cjpcIkNTXCIsbmFtZTpcIkJsaW5kU3BvdExvY2FsaXplZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMDcpXCI6e3RhZzpcIigwMDI0LDAxMDcpXCIsdnI6XCJGTFwiLG5hbWU6XCJCbGluZFNwb3RYQ29vcmRpbmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMDgpXCI6e3RhZzpcIigwMDI0LDAxMDgpXCIsdnI6XCJGTFwiLG5hbWU6XCJCbGluZFNwb3RZQ29vcmRpbmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMTApXCI6e3RhZzpcIigwMDI0LDAxMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJWaXN1YWxBY3VpdHlNZWFzdXJlbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDExMilcIjp7dGFnOlwiKDAwMjQsMDExMilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZnJhY3RpdmVQYXJhbWV0ZXJzVXNlZE9uUGF0aWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDExMylcIjp7dGFnOlwiKDAwMjQsMDExMylcIix2cjpcIkNTXCIsbmFtZTpcIk1lYXN1cmVtZW50TGF0ZXJhbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMTQpXCI6e3RhZzpcIigwMDI0LDAxMTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcGh0aGFsbWljUGF0aWVudENsaW5pY2FsSW5mb3JtYXRpb25MZWZ0RXllU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMTE1KVwiOnt0YWc6XCIoMDAyNCwwMTE1KVwiLHZyOlwiU1FcIixuYW1lOlwiT3BodGhhbG1pY1BhdGllbnRDbGluaWNhbEluZm9ybWF0aW9uUmlnaHRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMTcpXCI6e3RhZzpcIigwMDI0LDAxMTcpXCIsdnI6XCJDU1wiLG5hbWU6XCJGb3ZlYWxQb2ludE5vcm1hdGl2ZURhdGFGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDExOClcIjp7dGFnOlwiKDAwMjQsMDExOClcIix2cjpcIkZMXCIsbmFtZTpcIkZvdmVhbFBvaW50UHJvYmFiaWxpdHlWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMjApXCI6e3RhZzpcIigwMDI0LDAxMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJTY3JlZW5pbmdCYXNlbGluZU1lYXN1cmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDEyMilcIjp7dGFnOlwiKDAwMjQsMDEyMilcIix2cjpcIlNRXCIsbmFtZTpcIlNjcmVlbmluZ0Jhc2VsaW5lTWVhc3VyZWRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAxMjQpXCI6e3RhZzpcIigwMDI0LDAxMjQpXCIsdnI6XCJDU1wiLG5hbWU6XCJTY3JlZW5pbmdCYXNlbGluZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMTI2KVwiOnt0YWc6XCIoMDAyNCwwMTI2KVwiLHZyOlwiRkxcIixuYW1lOlwiU2NyZWVuaW5nQmFzZWxpbmVWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAyMDIpXCI6e3RhZzpcIigwMDI0LDAyMDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJBbGdvcml0aG1Tb3VyY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzA2KVwiOnt0YWc6XCIoMDAyNCwwMzA2KVwiLHZyOlwiTE9cIixuYW1lOlwiRGF0YVNldE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzA3KVwiOnt0YWc6XCIoMDAyNCwwMzA3KVwiLHZyOlwiTE9cIixuYW1lOlwiRGF0YVNldFZlcnNpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzA4KVwiOnt0YWc6XCIoMDAyNCwwMzA4KVwiLHZyOlwiTE9cIixuYW1lOlwiRGF0YVNldFNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAzMDkpXCI6e3RhZzpcIigwMDI0LDAzMDkpXCIsdnI6XCJMT1wiLG5hbWU6XCJEYXRhU2V0RGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzE3KVwiOnt0YWc6XCIoMDAyNCwwMzE3KVwiLHZyOlwiU1FcIixuYW1lOlwiVmlzdWFsRmllbGRUZXN0UmVsaWFiaWxpdHlHbG9iYWxJbmRleFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDMyMClcIjp7dGFnOlwiKDAwMjQsMDMyMClcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEZpZWxkR2xvYmFsUmVzdWx0c0luZGV4U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzI1KVwiOnt0YWc6XCIoMDAyNCwwMzI1KVwiLHZyOlwiU1FcIixuYW1lOlwiRGF0YU9ic2VydmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyNCwwMzM4KVwiOnt0YWc6XCIoMDAyNCwwMzM4KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5kZXhOb3JtYWxzRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI0LDAzNDEpXCI6e3RhZzpcIigwMDI0LDAzNDEpXCIsdnI6XCJGTFwiLG5hbWU6XCJJbmRleFByb2JhYmlsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjQsMDM0NClcIjp7dGFnOlwiKDAwMjQsMDM0NClcIix2cjpcIlNRXCIsbmFtZTpcIkluZGV4UHJvYmFiaWxpdHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAwMDIpXCI6e3RhZzpcIigwMDI4LDAwMDIpXCIsdnI6XCJVU1wiLG5hbWU6XCJTYW1wbGVzUGVyUGl4ZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDAzKVwiOnt0YWc6XCIoMDAyOCwwMDAzKVwiLHZyOlwiVVNcIixuYW1lOlwiU2FtcGxlc1BlclBpeGVsVXNlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAwMDQpXCI6e3RhZzpcIigwMDI4LDAwMDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaG90b21ldHJpY0ludGVycHJldGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDAwNilcIjp7dGFnOlwiKDAwMjgsMDAwNilcIix2cjpcIlVTXCIsbmFtZTpcIlBsYW5hckNvbmZpZ3VyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDA4KVwiOnt0YWc6XCIoMDAyOCwwMDA4KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZGcmFtZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDA5KVwiOnt0YWc6XCIoMDAyOCwwMDA5KVwiLHZyOlwiQVRcIixuYW1lOlwiRnJhbWVJbmNyZW1lbnRQb2ludGVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDBBKVwiOnt0YWc6XCIoMDAyOCwwMDBBKVwiLHZyOlwiQVRcIixuYW1lOlwiRnJhbWVEaW1lbnNpb25Qb2ludGVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDEwKVwiOnt0YWc6XCIoMDAyOCwwMDEwKVwiLHZyOlwiVVNcIixuYW1lOlwiUm93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAwMTEpXCI6e3RhZzpcIigwMDI4LDAwMTEpXCIsdnI6XCJVU1wiLG5hbWU6XCJDb2x1bW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDAxNClcIjp7dGFnOlwiKDAwMjgsMDAxNClcIix2cjpcIlVTXCIsbmFtZTpcIlVsdHJhc291bmRDb2xvckRhdGFQcmVzZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDAzMClcIjp7dGFnOlwiKDAwMjgsMDAzMClcIix2cjpcIkRTXCIsbmFtZTpcIlBpeGVsU3BhY2luZ1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAwMzEpXCI6e3RhZzpcIigwMDI4LDAwMzEpXCIsdnI6XCJEU1wiLG5hbWU6XCJab29tRmFjdG9yXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDAzMilcIjp7dGFnOlwiKDAwMjgsMDAzMilcIix2cjpcIkRTXCIsbmFtZTpcIlpvb21DZW50ZXJcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMDM0KVwiOnt0YWc6XCIoMDAyOCwwMDM0KVwiLHZyOlwiSVNcIixuYW1lOlwiUGl4ZWxBc3BlY3RSYXRpb1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAwNTEpXCI6e3RhZzpcIigwMDI4LDAwNTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3JyZWN0ZWRJbWFnZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDEwMClcIjp7dGFnOlwiKDAwMjgsMDEwMClcIix2cjpcIlVTXCIsbmFtZTpcIkJpdHNBbGxvY2F0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMTAxKVwiOnt0YWc6XCIoMDAyOCwwMTAxKVwiLHZyOlwiVVNcIixuYW1lOlwiQml0c1N0b3JlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAxMDIpXCI6e3RhZzpcIigwMDI4LDAxMDIpXCIsdnI6XCJVU1wiLG5hbWU6XCJIaWdoQml0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDEwMylcIjp7dGFnOlwiKDAwMjgsMDEwMylcIix2cjpcIlVTXCIsbmFtZTpcIlBpeGVsUmVwcmVzZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMTA2KVwiOnt0YWc6XCIoMDAyOCwwMTA2KVwiLHZyOlwieHNcIixuYW1lOlwiU21hbGxlc3RJbWFnZVBpeGVsVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMTA3KVwiOnt0YWc6XCIoMDAyOCwwMTA3KVwiLHZyOlwieHNcIixuYW1lOlwiTGFyZ2VzdEltYWdlUGl4ZWxWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAxMDgpXCI6e3RhZzpcIigwMDI4LDAxMDgpXCIsdnI6XCJ4c1wiLG5hbWU6XCJTbWFsbGVzdFBpeGVsVmFsdWVJblNlcmllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAxMDkpXCI6e3RhZzpcIigwMDI4LDAxMDkpXCIsdnI6XCJ4c1wiLG5hbWU6XCJMYXJnZXN0UGl4ZWxWYWx1ZUluU2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDEyMClcIjp7dGFnOlwiKDAwMjgsMDEyMClcIix2cjpcInhzXCIsbmFtZTpcIlBpeGVsUGFkZGluZ1ZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDEyMSlcIjp7dGFnOlwiKDAwMjgsMDEyMSlcIix2cjpcInhzXCIsbmFtZTpcIlBpeGVsUGFkZGluZ1JhbmdlTGltaXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMTIyKVwiOnt0YWc6XCIoMDAyOCwwMTIyKVwiLHZyOlwiRkxcIixuYW1lOlwiRmxvYXRQaXhlbFBhZGRpbmdWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAxMjMpXCI6e3RhZzpcIigwMDI4LDAxMjMpXCIsdnI6XCJGRFwiLG5hbWU6XCJEb3VibGVGbG9hdFBpeGVsUGFkZGluZ1ZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDEyNClcIjp7dGFnOlwiKDAwMjgsMDEyNClcIix2cjpcIkZMXCIsbmFtZTpcIkZsb2F0UGl4ZWxQYWRkaW5nUmFuZ2VMaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAxMjUpXCI6e3RhZzpcIigwMDI4LDAxMjUpXCIsdnI6XCJGRFwiLG5hbWU6XCJEb3VibGVGbG9hdFBpeGVsUGFkZGluZ1JhbmdlTGltaXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMzAwKVwiOnt0YWc6XCIoMDAyOCwwMzAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUXVhbGl0eUNvbnRyb2xJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDAzMDEpXCI6e3RhZzpcIigwMDI4LDAzMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJCdXJuZWRJbkFubm90YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMzAyKVwiOnt0YWc6XCIoMDAyOCwwMzAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVjb2duaXphYmxlVmlzdWFsRmVhdHVyZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwMzAzKVwiOnt0YWc6XCIoMDAyOCwwMzAzKVwiLHZyOlwiQ1NcIixuYW1lOlwiTG9uZ2l0dWRpbmFsVGVtcG9yYWxJbmZvcm1hdGlvbk1vZGlmaWVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMDMwNClcIjp7dGFnOlwiKDAwMjgsMDMwNClcIix2cjpcIlVJXCIsbmFtZTpcIlJlZmVyZW5jZWRDb2xvclBhbGV0dGVJbnN0YW5jZVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDBBMDIpXCI6e3RhZzpcIigwMDI4LDBBMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaXhlbFNwYWNpbmdDYWxpYnJhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwwQTA0KVwiOnt0YWc6XCIoMDAyOCwwQTA0KVwiLHZyOlwiTE9cIixuYW1lOlwiUGl4ZWxTcGFjaW5nQ2FsaWJyYXRpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEwNDApXCI6e3RhZzpcIigwMDI4LDEwNDApXCIsdnI6XCJDU1wiLG5hbWU6XCJQaXhlbEludGVuc2l0eVJlbGF0aW9uc2hpcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEwNDEpXCI6e3RhZzpcIigwMDI4LDEwNDEpXCIsdnI6XCJTU1wiLG5hbWU6XCJQaXhlbEludGVuc2l0eVJlbGF0aW9uc2hpcFNpZ25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMDUwKVwiOnt0YWc6XCIoMDAyOCwxMDUwKVwiLHZyOlwiRFNcIixuYW1lOlwiV2luZG93Q2VudGVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMDUxKVwiOnt0YWc6XCIoMDAyOCwxMDUxKVwiLHZyOlwiRFNcIixuYW1lOlwiV2luZG93V2lkdGhcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEwNTIpXCI6e3RhZzpcIigwMDI4LDEwNTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJSZXNjYWxlSW50ZXJjZXB0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTA1MylcIjp7dGFnOlwiKDAwMjgsMTA1MylcIix2cjpcIkRTXCIsbmFtZTpcIlJlc2NhbGVTbG9wZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEwNTQpXCI6e3RhZzpcIigwMDI4LDEwNTQpXCIsdnI6XCJMT1wiLG5hbWU6XCJSZXNjYWxlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEwNTUpXCI6e3RhZzpcIigwMDI4LDEwNTUpXCIsdnI6XCJMT1wiLG5hbWU6XCJXaW5kb3dDZW50ZXJXaWR0aEV4cGxhbmF0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMDU2KVwiOnt0YWc6XCIoMDAyOCwxMDU2KVwiLHZyOlwiQ1NcIixuYW1lOlwiVk9JTFVURnVuY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMDkwKVwiOnt0YWc6XCIoMDAyOCwxMDkwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVjb21tZW5kZWRWaWV3aW5nTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDExMDEpXCI6e3RhZzpcIigwMDI4LDExMDEpXCIsdnI6XCJ4c1wiLG5hbWU6XCJSZWRQYWxldHRlQ29sb3JMb29rdXBUYWJsZURlc2NyaXB0b3JcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMTAyKVwiOnt0YWc6XCIoMDAyOCwxMTAyKVwiLHZyOlwieHNcIixuYW1lOlwiR3JlZW5QYWxldHRlQ29sb3JMb29rdXBUYWJsZURlc2NyaXB0b3JcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMTAzKVwiOnt0YWc6XCIoMDAyOCwxMTAzKVwiLHZyOlwieHNcIixuYW1lOlwiQmx1ZVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDExMDQpXCI6e3RhZzpcIigwMDI4LDExMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJBbHBoYVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDExOTkpXCI6e3RhZzpcIigwMDI4LDExOTkpXCIsdnI6XCJVSVwiLG5hbWU6XCJQYWxldHRlQ29sb3JMb29rdXBUYWJsZVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEyMDEpXCI6e3RhZzpcIigwMDI4LDEyMDEpXCIsdnI6XCJPV1wiLG5hbWU6XCJSZWRQYWxldHRlQ29sb3JMb29rdXBUYWJsZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMjAyKVwiOnt0YWc6XCIoMDAyOCwxMjAyKVwiLHZyOlwiT1dcIixuYW1lOlwiR3JlZW5QYWxldHRlQ29sb3JMb29rdXBUYWJsZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMjAzKVwiOnt0YWc6XCIoMDAyOCwxMjAzKVwiLHZyOlwiT1dcIixuYW1lOlwiQmx1ZVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEyMDQpXCI6e3RhZzpcIigwMDI4LDEyMDQpXCIsdnI6XCJPV1wiLG5hbWU6XCJBbHBoYVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEyMjEpXCI6e3RhZzpcIigwMDI4LDEyMjEpXCIsdnI6XCJPV1wiLG5hbWU6XCJTZWdtZW50ZWRSZWRQYWxldHRlQ29sb3JMb29rdXBUYWJsZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMjIyKVwiOnt0YWc6XCIoMDAyOCwxMjIyKVwiLHZyOlwiT1dcIixuYW1lOlwiU2VnbWVudGVkR3JlZW5QYWxldHRlQ29sb3JMb29rdXBUYWJsZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxMjIzKVwiOnt0YWc6XCIoMDAyOCwxMjIzKVwiLHZyOlwiT1dcIixuYW1lOlwiU2VnbWVudGVkQmx1ZVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEzMDApXCI6e3RhZzpcIigwMDI4LDEzMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJCcmVhc3RJbXBsYW50UHJlc2VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEzNTApXCI6e3RhZzpcIigwMDI4LDEzNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXJ0aWFsVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDEzNTEpXCI6e3RhZzpcIigwMDI4LDEzNTEpXCIsdnI6XCJTVFwiLG5hbWU6XCJQYXJ0aWFsVmlld0Rlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTM1MilcIjp7dGFnOlwiKDAwMjgsMTM1MilcIix2cjpcIlNRXCIsbmFtZTpcIlBhcnRpYWxWaWV3Q29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTM1QSlcIjp7dGFnOlwiKDAwMjgsMTM1QSlcIix2cjpcIkNTXCIsbmFtZTpcIlNwYXRpYWxMb2NhdGlvbnNQcmVzZXJ2ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxNDAxKVwiOnt0YWc6XCIoMDAyOCwxNDAxKVwiLHZyOlwiU1FcIixuYW1lOlwiRGF0YUZyYW1lQXNzaWdubWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTQwMilcIjp7dGFnOlwiKDAwMjgsMTQwMilcIix2cjpcIkNTXCIsbmFtZTpcIkRhdGFQYXRoQXNzaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDE0MDMpXCI6e3RhZzpcIigwMDI4LDE0MDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJCaXRzTWFwcGVkVG9Db2xvckxvb2t1cFRhYmxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTQwNClcIjp7dGFnOlwiKDAwMjgsMTQwNClcIix2cjpcIlNRXCIsbmFtZTpcIkJsZW5kaW5nTFVUMVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTQwNSlcIjp7dGFnOlwiKDAwMjgsMTQwNSlcIix2cjpcIkNTXCIsbmFtZTpcIkJsZW5kaW5nTFVUMVRyYW5zZmVyRnVuY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxNDA2KVwiOnt0YWc6XCIoMDAyOCwxNDA2KVwiLHZyOlwiRkRcIixuYW1lOlwiQmxlbmRpbmdXZWlnaHRDb25zdGFudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDE0MDcpXCI6e3RhZzpcIigwMDI4LDE0MDcpXCIsdnI6XCJVU1wiLG5hbWU6XCJCbGVuZGluZ0xvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDE0MDgpXCI6e3RhZzpcIigwMDI4LDE0MDgpXCIsdnI6XCJPV1wiLG5hbWU6XCJCbGVuZGluZ0xvb2t1cFRhYmxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDE0MEIpXCI6e3RhZzpcIigwMDI4LDE0MEIpXCIsdnI6XCJTUVwiLG5hbWU6XCJFbmhhbmNlZFBhbGV0dGVDb2xvckxvb2t1cFRhYmxlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxNDBDKVwiOnt0YWc6XCIoMDAyOCwxNDBDKVwiLHZyOlwiU1FcIixuYW1lOlwiQmxlbmRpbmdMVVQyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxNDBEKVwiOnt0YWc6XCIoMDAyOCwxNDBEKVwiLHZyOlwiQ1NcIixuYW1lOlwiQmxlbmRpbmdMVVQyVHJhbnNmZXJGdW5jdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDE0MEUpXCI6e3RhZzpcIigwMDI4LDE0MEUpXCIsdnI6XCJDU1wiLG5hbWU6XCJEYXRhUGF0aElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTQwRilcIjp7dGFnOlwiKDAwMjgsMTQwRilcIix2cjpcIkNTXCIsbmFtZTpcIlJHQkxVVFRyYW5zZmVyRnVuY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwxNDEwKVwiOnt0YWc6XCIoMDAyOCwxNDEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQWxwaGFMVVRUcmFuc2ZlckZ1bmN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMjAwMClcIjp7dGFnOlwiKDAwMjgsMjAwMClcIix2cjpcIk9CXCIsbmFtZTpcIklDQ1Byb2ZpbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwyMTEwKVwiOnt0YWc6XCIoMDAyOCwyMTEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiTG9zc3lJbWFnZUNvbXByZXNzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMjExMilcIjp7dGFnOlwiKDAwMjgsMjExMilcIix2cjpcIkRTXCIsbmFtZTpcIkxvc3N5SW1hZ2VDb21wcmVzc2lvblJhdGlvXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwyMTE0KVwiOnt0YWc6XCIoMDAyOCwyMTE0KVwiLHZyOlwiQ1NcIixuYW1lOlwiTG9zc3lJbWFnZUNvbXByZXNzaW9uTWV0aG9kXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwzMDAwKVwiOnt0YWc6XCIoMDAyOCwzMDAwKVwiLHZyOlwiU1FcIixuYW1lOlwiTW9kYWxpdHlMVVRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDMwMDIpXCI6e3RhZzpcIigwMDI4LDMwMDIpXCIsdnI6XCJ4c1wiLG5hbWU6XCJMVVREZXNjcmlwdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMzAwMylcIjp7dGFnOlwiKDAwMjgsMzAwMylcIix2cjpcIkxPXCIsbmFtZTpcIkxVVEV4cGxhbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMzAwNClcIjp7dGFnOlwiKDAwMjgsMzAwNClcIix2cjpcIkxPXCIsbmFtZTpcIk1vZGFsaXR5TFVUVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDMwMDYpXCI6e3RhZzpcIigwMDI4LDMwMDYpXCIsdnI6XCJsdFwiLG5hbWU6XCJMVVREYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwzMDEwKVwiOnt0YWc6XCIoMDAyOCwzMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiVk9JTFVUU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCwzMTEwKVwiOnt0YWc6XCIoMDAyOCwzMTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiU29mdGNvcHlWT0lMVVRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYwMTApXCI6e3RhZzpcIigwMDI4LDYwMTApXCIsdnI6XCJVU1wiLG5hbWU6XCJSZXByZXNlbnRhdGl2ZUZyYW1lTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjAyMClcIjp7dGFnOlwiKDAwMjgsNjAyMClcIix2cjpcIlVTXCIsbmFtZTpcIkZyYW1lTnVtYmVyc09mSW50ZXJlc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYwMjIpXCI6e3RhZzpcIigwMDI4LDYwMjIpXCIsdnI6XCJMT1wiLG5hbWU6XCJGcmFtZU9mSW50ZXJlc3REZXNjcmlwdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjAyMylcIjp7dGFnOlwiKDAwMjgsNjAyMylcIix2cjpcIkNTXCIsbmFtZTpcIkZyYW1lT2ZJbnRlcmVzdFR5cGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYwNDApXCI6e3RhZzpcIigwMDI4LDYwNDApXCIsdnI6XCJVU1wiLG5hbWU6XCJSV2F2ZVBvaW50ZXJcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYxMDApXCI6e3RhZzpcIigwMDI4LDYxMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJNYXNrU3VidHJhY3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYxMDEpXCI6e3RhZzpcIigwMDI4LDYxMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJNYXNrT3BlcmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjEwMilcIjp7dGFnOlwiKDAwMjgsNjEwMilcIix2cjpcIlVTXCIsbmFtZTpcIkFwcGxpY2FibGVGcmFtZVJhbmdlXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjExMClcIjp7dGFnOlwiKDAwMjgsNjExMClcIix2cjpcIlVTXCIsbmFtZTpcIk1hc2tGcmFtZU51bWJlcnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYxMTIpXCI6e3RhZzpcIigwMDI4LDYxMTIpXCIsdnI6XCJVU1wiLG5hbWU6XCJDb250cmFzdEZyYW1lQXZlcmFnaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjExNClcIjp7dGFnOlwiKDAwMjgsNjExNClcIix2cjpcIkZMXCIsbmFtZTpcIk1hc2tTdWJQaXhlbFNoaWZ0XCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNjEyMClcIjp7dGFnOlwiKDAwMjgsNjEyMClcIix2cjpcIlNTXCIsbmFtZTpcIlRJRE9mZnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDYxOTApXCI6e3RhZzpcIigwMDI4LDYxOTApXCIsdnI6XCJTVFwiLG5hbWU6XCJNYXNrT3BlcmF0aW9uRXhwbGFuYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDAwKVwiOnt0YWc6XCIoMDAyOCw3MDAwKVwiLHZyOlwiU1FcIixuYW1lOlwiRXF1aXBtZW50QWRtaW5pc3RyYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwMSlcIjp7dGFnOlwiKDAwMjgsNzAwMSlcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mRGlzcGxheVN1YnN5c3RlbXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDAyKVwiOnt0YWc6XCIoMDAyOCw3MDAyKVwiLHZyOlwiVVNcIixuYW1lOlwiQ3VycmVudENvbmZpZ3VyYXRpb25JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMDMpXCI6e3RhZzpcIigwMDI4LDcwMDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJEaXNwbGF5U3Vic3lzdGVtSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDA0KVwiOnt0YWc6XCIoMDAyOCw3MDA0KVwiLHZyOlwiU0hcIixuYW1lOlwiRGlzcGxheVN1YnN5c3RlbU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDA1KVwiOnt0YWc6XCIoMDAyOCw3MDA1KVwiLHZyOlwiTE9cIixuYW1lOlwiRGlzcGxheVN1YnN5c3RlbURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwNilcIjp7dGFnOlwiKDAwMjgsNzAwNilcIix2cjpcIkNTXCIsbmFtZTpcIlN5c3RlbVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMDcpXCI6e3RhZzpcIigwMDI4LDcwMDcpXCIsdnI6XCJMT1wiLG5hbWU6XCJTeXN0ZW1TdGF0dXNDb21tZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwOClcIjp7dGFnOlwiKDAwMjgsNzAwOClcIix2cjpcIlNRXCIsbmFtZTpcIlRhcmdldEx1bWluYW5jZUNoYXJhY3RlcmlzdGljc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwOSlcIjp7dGFnOlwiKDAwMjgsNzAwOSlcIix2cjpcIlVTXCIsbmFtZTpcIkx1bWluYW5jZUNoYXJhY3RlcmlzdGljc0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwQSlcIjp7dGFnOlwiKDAwMjgsNzAwQSlcIix2cjpcIlNRXCIsbmFtZTpcIkRpc3BsYXlTdWJzeXN0ZW1Db25maWd1cmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDBCKVwiOnt0YWc6XCIoMDAyOCw3MDBCKVwiLHZyOlwiVVNcIixuYW1lOlwiQ29uZmlndXJhdGlvbklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwQylcIjp7dGFnOlwiKDAwMjgsNzAwQylcIix2cjpcIlNIXCIsbmFtZTpcIkNvbmZpZ3VyYXRpb25OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAwRClcIjp7dGFnOlwiKDAwMjgsNzAwRClcIix2cjpcIkxPXCIsbmFtZTpcIkNvbmZpZ3VyYXRpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMEUpXCI6e3RhZzpcIigwMDI4LDcwMEUpXCIsdnI6XCJVU1wiLG5hbWU6XCJSZWZlcmVuY2VkVGFyZ2V0THVtaW5hbmNlQ2hhcmFjdGVyaXN0aWNzSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDBGKVwiOnt0YWc6XCIoMDAyOCw3MDBGKVwiLHZyOlwiU1FcIixuYW1lOlwiUUFSZXN1bHRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDEwKVwiOnt0YWc6XCIoMDAyOCw3MDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlzcGxheVN1YnN5c3RlbVFBUmVzdWx0c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxMSlcIjp7dGFnOlwiKDAwMjgsNzAxMSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbmZpZ3VyYXRpb25RQVJlc3VsdHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMTIpXCI6e3RhZzpcIigwMDI4LDcwMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJNZWFzdXJlbWVudEVxdWlwbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxMylcIjp7dGFnOlwiKDAwMjgsNzAxMylcIix2cjpcIkNTXCIsbmFtZTpcIk1lYXN1cmVtZW50RnVuY3Rpb25zXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDE0KVwiOnt0YWc6XCIoMDAyOCw3MDE0KVwiLHZyOlwiQ1NcIixuYW1lOlwiTWVhc3VyZW1lbnRFcXVpcG1lbnRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxNSlcIjp7dGFnOlwiKDAwMjgsNzAxNSlcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEV2YWx1YXRpb25SZXN1bHRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMTYpXCI6e3RhZzpcIigwMDI4LDcwMTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJEaXNwbGF5Q2FsaWJyYXRpb25SZXN1bHRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMTcpXCI6e3RhZzpcIigwMDI4LDcwMTcpXCIsdnI6XCJVU1wiLG5hbWU6XCJERExWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMTgpXCI6e3RhZzpcIigwMDI4LDcwMTgpXCIsdnI6XCJGTFwiLG5hbWU6XCJDSUV4eVdoaXRlUG9pbnRcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDE5KVwiOnt0YWc6XCIoMDAyOCw3MDE5KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGlzcGxheUZ1bmN0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMUEpXCI6e3RhZzpcIigwMDI4LDcwMUEpXCIsdnI6XCJGTFwiLG5hbWU6XCJHYW1tYVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxQilcIjp7dGFnOlwiKDAwMjgsNzAxQilcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mTHVtaW5hbmNlUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxQylcIjp7dGFnOlwiKDAwMjgsNzAxQylcIix2cjpcIlNRXCIsbmFtZTpcIkx1bWluYW5jZVJlc3BvbnNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDFEKVwiOnt0YWc6XCIoMDAyOCw3MDFEKVwiLHZyOlwiRkxcIixuYW1lOlwiVGFyZ2V0TWluaW11bUx1bWluYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMUUpXCI6e3RhZzpcIigwMDI4LDcwMUUpXCIsdnI6XCJGTFwiLG5hbWU6XCJUYXJnZXRNYXhpbXVtTHVtaW5hbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAxRilcIjp7dGFnOlwiKDAwMjgsNzAxRilcIix2cjpcIkZMXCIsbmFtZTpcIkx1bWluYW5jZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyMClcIjp7dGFnOlwiKDAwMjgsNzAyMClcIix2cjpcIkxPXCIsbmFtZTpcIkx1bWluYW5jZVJlc3BvbnNlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDIxKVwiOnt0YWc6XCIoMDAyOCw3MDIxKVwiLHZyOlwiQ1NcIixuYW1lOlwiV2hpdGVQb2ludEZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDIyKVwiOnt0YWc6XCIoMDAyOCw3MDIyKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlzcGxheURldmljZVR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDIzKVwiOnt0YWc6XCIoMDAyOCw3MDIzKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlzcGxheVN1YnN5c3RlbVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyNClcIjp7dGFnOlwiKDAwMjgsNzAyNClcIix2cjpcIlNRXCIsbmFtZTpcIkx1bWluYW5jZVJlc3VsdFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyNSlcIjp7dGFnOlwiKDAwMjgsNzAyNSlcIix2cjpcIkNTXCIsbmFtZTpcIkFtYmllbnRMaWdodFZhbHVlU291cmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyNilcIjp7dGFnOlwiKDAwMjgsNzAyNilcIix2cjpcIkNTXCIsbmFtZTpcIk1lYXN1cmVkQ2hhcmFjdGVyaXN0aWNzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDI3KVwiOnt0YWc6XCIoMDAyOCw3MDI3KVwiLHZyOlwiU1FcIixuYW1lOlwiTHVtaW5hbmNlVW5pZm9ybWl0eVJlc3VsdFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyOClcIjp7dGFnOlwiKDAwMjgsNzAyOClcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEV2YWx1YXRpb25UZXN0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw3MDI5KVwiOnt0YWc6XCIoMDAyOCw3MDI5KVwiLHZyOlwiQ1NcIixuYW1lOlwiVGVzdFJlc3VsdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMkEpXCI6e3RhZzpcIigwMDI4LDcwMkEpXCIsdnI6XCJMT1wiLG5hbWU6XCJUZXN0UmVzdWx0Q29tbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMkIpXCI6e3RhZzpcIigwMDI4LDcwMkIpXCIsdnI6XCJDU1wiLG5hbWU6XCJUZXN0SW1hZ2VWYWxpZGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyQylcIjp7dGFnOlwiKDAwMjgsNzAyQylcIix2cjpcIlNRXCIsbmFtZTpcIlRlc3RQYXR0ZXJuQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsNzAyRClcIjp7dGFnOlwiKDAwMjgsNzAyRClcIix2cjpcIlNRXCIsbmFtZTpcIk1lYXN1cmVtZW50UGF0dGVybkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDcwMkUpXCI6e3RhZzpcIigwMDI4LDcwMkUpXCIsdnI6XCJTUVwiLG5hbWU6XCJWaXN1YWxFdmFsdWF0aW9uTWV0aG9kQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsN0ZFMClcIjp7dGFnOlwiKDAwMjgsN0ZFMClcIix2cjpcIlVSXCIsbmFtZTpcIlBpeGVsRGF0YVByb3ZpZGVyVVJMXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTAwMSlcIjp7dGFnOlwiKDAwMjgsOTAwMSlcIix2cjpcIlVMXCIsbmFtZTpcIkRhdGFQb2ludFJvd3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw5MDAyKVwiOnt0YWc6XCIoMDAyOCw5MDAyKVwiLHZyOlwiVUxcIixuYW1lOlwiRGF0YVBvaW50Q29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDkwMDMpXCI6e3RhZzpcIigwMDI4LDkwMDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaWduYWxEb21haW5Db2x1bW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTEwOClcIjp7dGFnOlwiKDAwMjgsOTEwOClcIix2cjpcIkNTXCIsbmFtZTpcIkRhdGFSZXByZXNlbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDkxMTApXCI6e3RhZzpcIigwMDI4LDkxMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJQaXhlbE1lYXN1cmVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw5MTMyKVwiOnt0YWc6XCIoMDAyOCw5MTMyKVwiLHZyOlwiU1FcIixuYW1lOlwiRnJhbWVWT0lMVVRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDkxNDUpXCI6e3RhZzpcIigwMDI4LDkxNDUpXCIsdnI6XCJTUVwiLG5hbWU6XCJQaXhlbFZhbHVlVHJhbnNmb3JtYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDkyMzUpXCI6e3RhZzpcIigwMDI4LDkyMzUpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaWduYWxEb21haW5Sb3dzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQxMSlcIjp7dGFnOlwiKDAwMjgsOTQxMSlcIix2cjpcIkZMXCIsbmFtZTpcIkRpc3BsYXlGaWx0ZXJQZXJjZW50YWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQxNSlcIjp7dGFnOlwiKDAwMjgsOTQxNSlcIix2cjpcIlNRXCIsbmFtZTpcIkZyYW1lUGl4ZWxTaGlmdFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQxNilcIjp7dGFnOlwiKDAwMjgsOTQxNilcIix2cjpcIlVTXCIsbmFtZTpcIlN1YnRyYWN0aW9uSXRlbUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQyMilcIjp7dGFnOlwiKDAwMjgsOTQyMilcIix2cjpcIlNRXCIsbmFtZTpcIlBpeGVsSW50ZW5zaXR5UmVsYXRpb25zaGlwTFVUU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw5NDQzKVwiOnt0YWc6XCIoMDAyOCw5NDQzKVwiLHZyOlwiU1FcIixuYW1lOlwiRnJhbWVQaXhlbERhdGFQcm9wZXJ0aWVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw5NDQ0KVwiOnt0YWc6XCIoMDAyOCw5NDQ0KVwiLHZyOlwiQ1NcIixuYW1lOlwiR2VvbWV0cmljYWxQcm9wZXJ0aWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQ0NSlcIjp7dGFnOlwiKDAwMjgsOTQ0NSlcIix2cjpcIkZMXCIsbmFtZTpcIkdlb21ldHJpY01heGltdW1EaXN0b3J0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTQ0NilcIjp7dGFnOlwiKDAwMjgsOTQ0NilcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlUHJvY2Vzc2luZ0FwcGxpZWRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk0NTQpXCI6e3RhZzpcIigwMDI4LDk0NTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJNYXNrU2VsZWN0aW9uTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk0NzQpXCI6e3RhZzpcIigwMDI4LDk0NzQpXCIsdnI6XCJDU1wiLG5hbWU6XCJMVVRGdW5jdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk0NzgpXCI6e3RhZzpcIigwMDI4LDk0NzgpXCIsdnI6XCJGTFwiLG5hbWU6XCJNYXNrVmlzaWJpbGl0eVBlcmNlbnRhZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAyOCw5NTAxKVwiOnt0YWc6XCIoMDAyOCw5NTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiUGl4ZWxTaGlmdFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTUwMilcIjp7dGFnOlwiKDAwMjgsOTUwMilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZ2lvblBpeGVsU2hpZnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk1MDMpXCI6e3RhZzpcIigwMDI4LDk1MDMpXCIsdnI6XCJTU1wiLG5hbWU6XCJWZXJ0aWNlc09mVGhlUmVnaW9uXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTUwNSlcIjp7dGFnOlwiKDAwMjgsOTUwNSlcIix2cjpcIlNRXCIsbmFtZTpcIk11bHRpRnJhbWVQcmVzZW50YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk1MDYpXCI6e3RhZzpcIigwMDI4LDk1MDYpXCIsdnI6XCJVU1wiLG5hbWU6XCJQaXhlbFNoaWZ0RnJhbWVSYW5nZVwiLHZtOlwiMi0yblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk1MDcpXCI6e3RhZzpcIigwMDI4LDk1MDcpXCIsdnI6XCJVU1wiLG5hbWU6XCJMVVRGcmFtZVJhbmdlXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsOTUyMClcIjp7dGFnOlwiKDAwMjgsOTUyMClcIix2cjpcIkRTXCIsbmFtZTpcIkltYWdlVG9FcXVpcG1lbnRNYXBwaW5nTWF0cml4XCIsdm06XCIxNlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDI4LDk1MzcpXCI6e3RhZzpcIigwMDI4LDk1MzcpXCIsdnI6XCJDU1wiLG5hbWU6XCJFcXVpcG1lbnRDb29yZGluYXRlU3lzdGVtSWRlbnRpZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzMiwxMDMxKVwiOnt0YWc6XCIoMDAzMiwxMDMxKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVxdWVzdGluZ1BoeXNpY2lhbklkZW50aWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzMiwxMDMyKVwiOnt0YWc6XCIoMDAzMiwxMDMyKVwiLHZyOlwiUE5cIixuYW1lOlwiUmVxdWVzdGluZ1BoeXNpY2lhblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDMyLDEwMzMpXCI6e3RhZzpcIigwMDMyLDEwMzMpXCIsdnI6XCJMT1wiLG5hbWU6XCJSZXF1ZXN0aW5nU2VydmljZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDMyLDEwMzQpXCI6e3RhZzpcIigwMDMyLDEwMzQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXF1ZXN0aW5nU2VydmljZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDMyLDEwNjApXCI6e3RhZzpcIigwMDMyLDEwNjApXCIsdnI6XCJMT1wiLG5hbWU6XCJSZXF1ZXN0ZWRQcm9jZWR1cmVEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDMyLDEwNjQpXCI6e3RhZzpcIigwMDMyLDEwNjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXF1ZXN0ZWRQcm9jZWR1cmVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzMiwxMDcwKVwiOnt0YWc6XCIoMDAzMiwxMDcwKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVxdWVzdGVkQ29udHJhc3RBZ2VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAwMDQpXCI6e3RhZzpcIigwMDM4LDAwMDQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkUGF0aWVudEFsaWFzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMDA4KVwiOnt0YWc6XCIoMDAzOCwwMDA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiVmlzaXRTdGF0dXNJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAwMTApXCI6e3RhZzpcIigwMDM4LDAwMTApXCIsdnI6XCJMT1wiLG5hbWU6XCJBZG1pc3Npb25JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAwMTQpXCI6e3RhZzpcIigwMDM4LDAwMTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJJc3N1ZXJPZkFkbWlzc2lvbklEU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMDE2KVwiOnt0YWc6XCIoMDAzOCwwMDE2KVwiLHZyOlwiTE9cIixuYW1lOlwiUm91dGVPZkFkbWlzc2lvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMDIwKVwiOnt0YWc6XCIoMDAzOCwwMDIwKVwiLHZyOlwiREFcIixuYW1lOlwiQWRtaXR0aW5nRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAwMjEpXCI6e3RhZzpcIigwMDM4LDAwMjEpXCIsdnI6XCJUTVwiLG5hbWU6XCJBZG1pdHRpbmdUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMzgsMDA1MClcIjp7dGFnOlwiKDAwMzgsMDA1MClcIix2cjpcIkxPXCIsbmFtZTpcIlNwZWNpYWxOZWVkc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAwNjApXCI6e3RhZzpcIigwMDM4LDAwNjApXCIsdnI6XCJMT1wiLG5hbWU6XCJTZXJ2aWNlRXBpc29kZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMzgsMDA2MilcIjp7dGFnOlwiKDAwMzgsMDA2MilcIix2cjpcIkxPXCIsbmFtZTpcIlNlcnZpY2VFcGlzb2RlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMDY0KVwiOnt0YWc6XCIoMDAzOCwwMDY0KVwiLHZyOlwiU1FcIixuYW1lOlwiSXNzdWVyT2ZTZXJ2aWNlRXBpc29kZUlEU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMTAwKVwiOnt0YWc6XCIoMDAzOCwwMTAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVydGluZW50RG9jdW1lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMTAxKVwiOnt0YWc6XCIoMDAzOCwwMTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVydGluZW50UmVzb3VyY2VzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwMTAyKVwiOnt0YWc6XCIoMDAzOCwwMTAyKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVzb3VyY2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDAzMDApXCI6e3RhZzpcIigwMDM4LDAzMDApXCIsdnI6XCJMT1wiLG5hbWU6XCJDdXJyZW50UGF0aWVudExvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMzgsMDQwMClcIjp7dGFnOlwiKDAwMzgsMDQwMClcIix2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRJbnN0aXR1dGlvblJlc2lkZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDM4LDA1MDApXCI6e3RhZzpcIigwMDM4LDA1MDApXCIsdnI6XCJMT1wiLG5hbWU6XCJQYXRpZW50U3RhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCwwNTAyKVwiOnt0YWc6XCIoMDAzOCwwNTAyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudENsaW5pY2FsVHJpYWxQYXJ0aWNpcGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzOCw0MDAwKVwiOnt0YWc6XCIoMDAzOCw0MDAwKVwiLHZyOlwiTFRcIixuYW1lOlwiVmlzaXRDb21tZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAwMDQpXCI6e3RhZzpcIigwMDNBLDAwMDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJXYXZlZm9ybU9yaWdpbmFsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDAwNSlcIjp7dGFnOlwiKDAwM0EsMDAwNSlcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mV2F2ZWZvcm1DaGFubmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAwMTApXCI6e3RhZzpcIigwMDNBLDAwMTApXCIsdnI6XCJVTFwiLG5hbWU6XCJOdW1iZXJPZldhdmVmb3JtU2FtcGxlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAwMUEpXCI6e3RhZzpcIigwMDNBLDAwMUEpXCIsdnI6XCJEU1wiLG5hbWU6XCJTYW1wbGluZ0ZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAwMjApXCI6e3RhZzpcIigwMDNBLDAwMjApXCIsdnI6XCJTSFwiLG5hbWU6XCJNdWx0aXBsZXhHcm91cExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIwMClcIjp7dGFnOlwiKDAwM0EsMDIwMClcIix2cjpcIlNRXCIsbmFtZTpcIkNoYW5uZWxEZWZpbml0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjAyKVwiOnt0YWc6XCIoMDAzQSwwMjAyKVwiLHZyOlwiSVNcIixuYW1lOlwiV2F2ZWZvcm1DaGFubmVsTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIwMylcIjp7dGFnOlwiKDAwM0EsMDIwMylcIix2cjpcIlNIXCIsbmFtZTpcIkNoYW5uZWxMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyMDUpXCI6e3RhZzpcIigwMDNBLDAyMDUpXCIsdnI6XCJDU1wiLG5hbWU6XCJDaGFubmVsU3RhdHVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjA4KVwiOnt0YWc6XCIoMDAzQSwwMjA4KVwiLHZyOlwiU1FcIixuYW1lOlwiQ2hhbm5lbFNvdXJjZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIwOSlcIjp7dGFnOlwiKDAwM0EsMDIwOSlcIix2cjpcIlNRXCIsbmFtZTpcIkNoYW5uZWxTb3VyY2VNb2RpZmllcnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyMEEpXCI6e3RhZzpcIigwMDNBLDAyMEEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3VyY2VXYXZlZm9ybVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIwQylcIjp7dGFnOlwiKDAwM0EsMDIwQylcIix2cjpcIkxPXCIsbmFtZTpcIkNoYW5uZWxEZXJpdmF0aW9uRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjEwKVwiOnt0YWc6XCIoMDAzQSwwMjEwKVwiLHZyOlwiRFNcIixuYW1lOlwiQ2hhbm5lbFNlbnNpdGl2aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIxMSlcIjp7dGFnOlwiKDAwM0EsMDIxMSlcIix2cjpcIlNRXCIsbmFtZTpcIkNoYW5uZWxTZW5zaXRpdml0eVVuaXRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjEyKVwiOnt0YWc6XCIoMDAzQSwwMjEyKVwiLHZyOlwiRFNcIixuYW1lOlwiQ2hhbm5lbFNlbnNpdGl2aXR5Q29ycmVjdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyMTMpXCI6e3RhZzpcIigwMDNBLDAyMTMpXCIsdnI6XCJEU1wiLG5hbWU6XCJDaGFubmVsQmFzZWxpbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjE0KVwiOnt0YWc6XCIoMDAzQSwwMjE0KVwiLHZyOlwiRFNcIixuYW1lOlwiQ2hhbm5lbFRpbWVTa2V3XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIxNSlcIjp7dGFnOlwiKDAwM0EsMDIxNSlcIix2cjpcIkRTXCIsbmFtZTpcIkNoYW5uZWxTYW1wbGVTa2V3XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIxOClcIjp7dGFnOlwiKDAwM0EsMDIxOClcIix2cjpcIkRTXCIsbmFtZTpcIkNoYW5uZWxPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjFBKVwiOnt0YWc6XCIoMDAzQSwwMjFBKVwiLHZyOlwiVVNcIixuYW1lOlwiV2F2ZWZvcm1CaXRzU3RvcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIyMClcIjp7dGFnOlwiKDAwM0EsMDIyMClcIix2cjpcIkRTXCIsbmFtZTpcIkZpbHRlckxvd0ZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyMjEpXCI6e3RhZzpcIigwMDNBLDAyMjEpXCIsdnI6XCJEU1wiLG5hbWU6XCJGaWx0ZXJIaWdoRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIyMilcIjp7dGFnOlwiKDAwM0EsMDIyMilcIix2cjpcIkRTXCIsbmFtZTpcIk5vdGNoRmlsdGVyRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIyMylcIjp7dGFnOlwiKDAwM0EsMDIyMylcIix2cjpcIkRTXCIsbmFtZTpcIk5vdGNoRmlsdGVyQmFuZHdpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDIzMClcIjp7dGFnOlwiKDAwM0EsMDIzMClcIix2cjpcIkZMXCIsbmFtZTpcIldhdmVmb3JtRGF0YURpc3BsYXlTY2FsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyMzEpXCI6e3RhZzpcIigwMDNBLDAyMzEpXCIsdnI6XCJVU1wiLG5hbWU6XCJXYXZlZm9ybURpc3BsYXlCYWNrZ3JvdW5kQ0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjQwKVwiOnt0YWc6XCIoMDAzQSwwMjQwKVwiLHZyOlwiU1FcIixuYW1lOlwiV2F2ZWZvcm1QcmVzZW50YXRpb25Hcm91cFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDI0MSlcIjp7dGFnOlwiKDAwM0EsMDI0MSlcIix2cjpcIlVTXCIsbmFtZTpcIlByZXNlbnRhdGlvbkdyb3VwTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDI0MilcIjp7dGFnOlwiKDAwM0EsMDI0MilcIix2cjpcIlNRXCIsbmFtZTpcIkNoYW5uZWxEaXNwbGF5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjQ0KVwiOnt0YWc6XCIoMDAzQSwwMjQ0KVwiLHZyOlwiVVNcIixuYW1lOlwiQ2hhbm5lbFJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDI0NSlcIjp7dGFnOlwiKDAwM0EsMDI0NSlcIix2cjpcIkZMXCIsbmFtZTpcIkNoYW5uZWxQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDNBLDAyNDYpXCI6e3RhZzpcIigwMDNBLDAyNDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJEaXNwbGF5U2hhZGluZ0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjQ3KVwiOnt0YWc6XCIoMDAzQSwwMjQ3KVwiLHZyOlwiRkxcIixuYW1lOlwiRnJhY3Rpb25hbENoYW5uZWxEaXNwbGF5U2NhbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMjQ4KVwiOnt0YWc6XCIoMDAzQSwwMjQ4KVwiLHZyOlwiRkxcIixuYW1lOlwiQWJzb2x1dGVDaGFubmVsRGlzcGxheVNjYWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDMwMClcIjp7dGFnOlwiKDAwM0EsMDMwMClcIix2cjpcIlNRXCIsbmFtZTpcIk11bHRpcGxleGVkQXVkaW9DaGFubmVsc0Rlc2NyaXB0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwM0EsMDMwMSlcIjp7dGFnOlwiKDAwM0EsMDMwMSlcIix2cjpcIklTXCIsbmFtZTpcIkNoYW5uZWxJZGVudGlmaWNhdGlvbkNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDAzQSwwMzAyKVwiOnt0YWc6XCIoMDAzQSwwMzAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2hhbm5lbE1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDAxKVwiOnt0YWc6XCIoMDA0MCwwMDAxKVwiLHZyOlwiQUVcIixuYW1lOlwiU2NoZWR1bGVkU3RhdGlvbkFFVGl0bGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMDIpXCI6e3RhZzpcIigwMDQwLDAwMDIpXCIsdnI6XCJEQVwiLG5hbWU6XCJTY2hlZHVsZWRQcm9jZWR1cmVTdGVwU3RhcnREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAwMylcIjp7dGFnOlwiKDAwNDAsMDAwMylcIix2cjpcIlRNXCIsbmFtZTpcIlNjaGVkdWxlZFByb2NlZHVyZVN0ZXBTdGFydFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDA0KVwiOnt0YWc6XCIoMDA0MCwwMDA0KVwiLHZyOlwiREFcIixuYW1lOlwiU2NoZWR1bGVkUHJvY2VkdXJlU3RlcEVuZERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDA1KVwiOnt0YWc6XCIoMDA0MCwwMDA1KVwiLHZyOlwiVE1cIixuYW1lOlwiU2NoZWR1bGVkUHJvY2VkdXJlU3RlcEVuZFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDA2KVwiOnt0YWc6XCIoMDA0MCwwMDA2KVwiLHZyOlwiUE5cIixuYW1lOlwiU2NoZWR1bGVkUGVyZm9ybWluZ1BoeXNpY2lhbk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDA3KVwiOnt0YWc6XCIoMDA0MCwwMDA3KVwiLHZyOlwiTE9cIixuYW1lOlwiU2NoZWR1bGVkUHJvY2VkdXJlU3RlcERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAwOClcIjp7dGFnOlwiKDAwNDAsMDAwOClcIix2cjpcIlNRXCIsbmFtZTpcIlNjaGVkdWxlZFByb3RvY29sQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAwOSlcIjp7dGFnOlwiKDAwNDAsMDAwOSlcIix2cjpcIlNIXCIsbmFtZTpcIlNjaGVkdWxlZFByb2NlZHVyZVN0ZXBJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMEEpXCI6e3RhZzpcIigwMDQwLDAwMEEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdGFnZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMEIpXCI6e3RhZzpcIigwMDQwLDAwMEIpXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2hlZHVsZWRQZXJmb3JtaW5nUGh5c2ljaWFuSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMTApXCI6e3RhZzpcIigwMDQwLDAwMTApXCIsdnI6XCJTSFwiLG5hbWU6XCJTY2hlZHVsZWRTdGF0aW9uTmFtZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAxMSlcIjp7dGFnOlwiKDAwNDAsMDAxMSlcIix2cjpcIlNIXCIsbmFtZTpcIlNjaGVkdWxlZFByb2NlZHVyZVN0ZXBMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMTIpXCI6e3RhZzpcIigwMDQwLDAwMTIpXCIsdnI6XCJMT1wiLG5hbWU6XCJQcmVNZWRpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAyMClcIjp7dGFnOlwiKDAwNDAsMDAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlNjaGVkdWxlZFByb2NlZHVyZVN0ZXBTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDI2KVwiOnt0YWc6XCIoMDA0MCwwMDI2KVwiLHZyOlwiU1FcIixuYW1lOlwiT3JkZXJQbGFjZXJJZGVudGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDI3KVwiOnt0YWc6XCIoMDA0MCwwMDI3KVwiLHZyOlwiU1FcIixuYW1lOlwiT3JkZXJGaWxsZXJJZGVudGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDMxKVwiOnt0YWc6XCIoMDA0MCwwMDMxKVwiLHZyOlwiVVRcIixuYW1lOlwiTG9jYWxOYW1lc3BhY2VFbnRpdHlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMzIpXCI6e3RhZzpcIigwMDQwLDAwMzIpXCIsdnI6XCJVVFwiLG5hbWU6XCJVbml2ZXJzYWxFbnRpdHlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAwMzMpXCI6e3RhZzpcIigwMDQwLDAwMzMpXCIsdnI6XCJDU1wiLG5hbWU6XCJVbml2ZXJzYWxFbnRpdHlJRFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDM1KVwiOnt0YWc6XCIoMDA0MCwwMDM1KVwiLHZyOlwiQ1NcIixuYW1lOlwiSWRlbnRpZmllclR5cGVDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAzNilcIjp7dGFnOlwiKDAwNDAsMDAzNilcIix2cjpcIlNRXCIsbmFtZTpcIkFzc2lnbmluZ0ZhY2lsaXR5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMDM5KVwiOnt0YWc6XCIoMDA0MCwwMDM5KVwiLHZyOlwiU1FcIixuYW1lOlwiQXNzaWduaW5nSnVyaXNkaWN0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDAzQSlcIjp7dGFnOlwiKDAwNDAsMDAzQSlcIix2cjpcIlNRXCIsbmFtZTpcIkFzc2lnbmluZ0FnZW5jeU9yRGVwYXJ0bWVudENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAxMDApXCI6e3RhZzpcIigwMDQwLDAxMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2hlZHVsZWRQcm9jZWR1cmVTdGVwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjIwKVwiOnt0YWc6XCIoMDA0MCwwMjIwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZE5vbkltYWdlQ29tcG9zaXRlU09QSW5zdGFuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNDEpXCI6e3RhZzpcIigwMDQwLDAyNDEpXCIsdnI6XCJBRVwiLG5hbWU6XCJQZXJmb3JtZWRTdGF0aW9uQUVUaXRsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNDIpXCI6e3RhZzpcIigwMDQwLDAyNDIpXCIsdnI6XCJTSFwiLG5hbWU6XCJQZXJmb3JtZWRTdGF0aW9uTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNDMpXCI6e3RhZzpcIigwMDQwLDAyNDMpXCIsdnI6XCJTSFwiLG5hbWU6XCJQZXJmb3JtZWRMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNDQpXCI6e3RhZzpcIigwMDQwLDAyNDQpXCIsdnI6XCJEQVwiLG5hbWU6XCJQZXJmb3JtZWRQcm9jZWR1cmVTdGVwU3RhcnREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDI0NSlcIjp7dGFnOlwiKDAwNDAsMDI0NSlcIix2cjpcIlRNXCIsbmFtZTpcIlBlcmZvcm1lZFByb2NlZHVyZVN0ZXBTdGFydFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjUwKVwiOnt0YWc6XCIoMDA0MCwwMjUwKVwiLHZyOlwiREFcIixuYW1lOlwiUGVyZm9ybWVkUHJvY2VkdXJlU3RlcEVuZERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjUxKVwiOnt0YWc6XCIoMDA0MCwwMjUxKVwiLHZyOlwiVE1cIixuYW1lOlwiUGVyZm9ybWVkUHJvY2VkdXJlU3RlcEVuZFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjUyKVwiOnt0YWc6XCIoMDA0MCwwMjUyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGVyZm9ybWVkUHJvY2VkdXJlU3RlcFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNTMpXCI6e3RhZzpcIigwMDQwLDAyNTMpXCIsdnI6XCJTSFwiLG5hbWU6XCJQZXJmb3JtZWRQcm9jZWR1cmVTdGVwSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjU0KVwiOnt0YWc6XCIoMDA0MCwwMjU0KVwiLHZyOlwiTE9cIixuYW1lOlwiUGVyZm9ybWVkUHJvY2VkdXJlU3RlcERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDI1NSlcIjp7dGFnOlwiKDAwNDAsMDI1NSlcIix2cjpcIkxPXCIsbmFtZTpcIlBlcmZvcm1lZFByb2NlZHVyZVR5cGVEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNjApXCI6e3RhZzpcIigwMDQwLDAyNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJmb3JtZWRQcm90b2NvbENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNjEpXCI6e3RhZzpcIigwMDQwLDAyNjEpXCIsdnI6XCJDU1wiLG5hbWU6XCJQZXJmb3JtZWRQcm90b2NvbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjcwKVwiOnt0YWc6XCIoMDA0MCwwMjcwKVwiLHZyOlwiU1FcIixuYW1lOlwiU2NoZWR1bGVkU3RlcEF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyNzUpXCI6e3RhZzpcIigwMDQwLDAyNzUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXF1ZXN0QXR0cmlidXRlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDI4MClcIjp7dGFnOlwiKDAwNDAsMDI4MClcIix2cjpcIlNUXCIsbmFtZTpcIkNvbW1lbnRzT25UaGVQZXJmb3JtZWRQcm9jZWR1cmVTdGVwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDI4MSlcIjp7dGFnOlwiKDAwNDAsMDI4MSlcIix2cjpcIlNRXCIsbmFtZTpcIlBlcmZvcm1lZFByb2NlZHVyZVN0ZXBEaXNjb250aW51YXRpb25SZWFzb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMjkzKVwiOnt0YWc6XCIoMDA0MCwwMjkzKVwiLHZyOlwiU1FcIixuYW1lOlwiUXVhbnRpdHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyOTQpXCI6e3RhZzpcIigwMDQwLDAyOTQpXCIsdnI6XCJEU1wiLG5hbWU6XCJRdWFudGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAyOTUpXCI6e3RhZzpcIigwMDQwLDAyOTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJNZWFzdXJpbmdVbml0c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDI5NilcIjp7dGFnOlwiKDAwNDAsMDI5NilcIix2cjpcIlNRXCIsbmFtZTpcIkJpbGxpbmdJdGVtU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMzAwKVwiOnt0YWc6XCIoMDA0MCwwMzAwKVwiLHZyOlwiVVNcIixuYW1lOlwiVG90YWxUaW1lT2ZGbHVvcm9zY29weVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMDEpXCI6e3RhZzpcIigwMDQwLDAzMDEpXCIsdnI6XCJVU1wiLG5hbWU6XCJUb3RhbE51bWJlck9mRXhwb3N1cmVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDMwMilcIjp7dGFnOlwiKDAwNDAsMDMwMilcIix2cjpcIlVTXCIsbmFtZTpcIkVudHJhbmNlRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMDMpXCI6e3RhZzpcIigwMDQwLDAzMDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJFeHBvc2VkQXJlYVwiLHZtOlwiMS0yXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDMwNilcIjp7dGFnOlwiKDAwNDAsMDMwNilcIix2cjpcIkRTXCIsbmFtZTpcIkRpc3RhbmNlU291cmNlVG9FbnRyYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMEUpXCI6e3RhZzpcIigwMDQwLDAzMEUpXCIsdnI6XCJTUVwiLG5hbWU6XCJFeHBvc3VyZURvc2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMTApXCI6e3RhZzpcIigwMDQwLDAzMTApXCIsdnI6XCJTVFwiLG5hbWU6XCJDb21tZW50c09uUmFkaWF0aW9uRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMTIpXCI6e3RhZzpcIigwMDQwLDAzMTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJYUmF5T3V0cHV0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDMxNClcIjp7dGFnOlwiKDAwNDAsMDMxNClcIix2cjpcIkRTXCIsbmFtZTpcIkhhbGZWYWx1ZUxheWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDMxNilcIjp7dGFnOlwiKDAwNDAsMDMxNilcIix2cjpcIkRTXCIsbmFtZTpcIk9yZ2FuRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMTgpXCI6e3RhZzpcIigwMDQwLDAzMTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJPcmdhbkV4cG9zZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMzIwKVwiOnt0YWc6XCIoMDA0MCwwMzIwKVwiLHZyOlwiU1FcIixuYW1lOlwiQmlsbGluZ1Byb2NlZHVyZVN0ZXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMjEpXCI6e3RhZzpcIigwMDQwLDAzMjEpXCIsdnI6XCJTUVwiLG5hbWU6XCJGaWxtQ29uc3VtcHRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDAzMjQpXCI6e3RhZzpcIigwMDQwLDAzMjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJCaWxsaW5nU3VwcGxpZXNBbmREZXZpY2VzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwMzQwKVwiOnt0YWc6XCIoMDA0MCwwMzQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyZm9ybWVkU2VyaWVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNDAwKVwiOnt0YWc6XCIoMDA0MCwwNDAwKVwiLHZyOlwiTFRcIixuYW1lOlwiQ29tbWVudHNPblRoZVNjaGVkdWxlZFByb2NlZHVyZVN0ZXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNDQwKVwiOnt0YWc6XCIoMDA0MCwwNDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvdG9jb2xDb250ZXh0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNDQxKVwiOnt0YWc6XCIoMDA0MCwwNDQxKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udGVudEl0ZW1Nb2RpZmllclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDUwMClcIjp7dGFnOlwiKDAwNDAsMDUwMClcIix2cjpcIlNRXCIsbmFtZTpcIlNjaGVkdWxlZFNwZWNpbWVuU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTEyKVwiOnt0YWc6XCIoMDA0MCwwNTEyKVwiLHZyOlwiTE9cIixuYW1lOlwiQ29udGFpbmVySWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA1MTMpXCI6e3RhZzpcIigwMDQwLDA1MTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJJc3N1ZXJPZlRoZUNvbnRhaW5lcklkZW50aWZpZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA1MTUpXCI6e3RhZzpcIigwMDQwLDA1MTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJBbHRlcm5hdGVDb250YWluZXJJZGVudGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTE4KVwiOnt0YWc6XCIoMDA0MCwwNTE4KVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udGFpbmVyVHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA1MUEpXCI6e3RhZzpcIigwMDQwLDA1MUEpXCIsdnI6XCJMT1wiLG5hbWU6XCJDb250YWluZXJEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA1MjApXCI6e3RhZzpcIigwMDQwLDA1MjApXCIsdnI6XCJTUVwiLG5hbWU6XCJDb250YWluZXJDb21wb25lbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA1NTEpXCI6e3RhZzpcIigwMDQwLDA1NTEpXCIsdnI6XCJMT1wiLG5hbWU6XCJTcGVjaW1lbklkZW50aWZpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTU0KVwiOnt0YWc6XCIoMDA0MCwwNTU0KVwiLHZyOlwiVUlcIixuYW1lOlwiU3BlY2ltZW5VSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTU1KVwiOnt0YWc6XCIoMDA0MCwwNTU1KVwiLHZyOlwiU1FcIixuYW1lOlwiQWNxdWlzaXRpb25Db250ZXh0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTU2KVwiOnt0YWc6XCIoMDA0MCwwNTU2KVwiLHZyOlwiU1RcIixuYW1lOlwiQWNxdWlzaXRpb25Db250ZXh0RGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTYwKVwiOnt0YWc6XCIoMDA0MCwwNTYwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3BlY2ltZW5EZXNjcmlwdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDU2MilcIjp7dGFnOlwiKDAwNDAsMDU2MilcIix2cjpcIlNRXCIsbmFtZTpcIklzc3Vlck9mVGhlU3BlY2ltZW5JZGVudGlmaWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNTlBKVwiOnt0YWc6XCIoMDA0MCwwNTlBKVwiLHZyOlwiU1FcIixuYW1lOlwiU3BlY2ltZW5UeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDYwMClcIjp7dGFnOlwiKDAwNDAsMDYwMClcIix2cjpcIkxPXCIsbmFtZTpcIlNwZWNpbWVuU2hvcnREZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA2MDIpXCI6e3RhZzpcIigwMDQwLDA2MDIpXCIsdnI6XCJVVFwiLG5hbWU6XCJTcGVjaW1lbkRldGFpbGVkRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNjEwKVwiOnt0YWc6XCIoMDA0MCwwNjEwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3BlY2ltZW5QcmVwYXJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDYxMilcIjp7dGFnOlwiKDAwNDAsMDYxMilcIix2cjpcIlNRXCIsbmFtZTpcIlNwZWNpbWVuUHJlcGFyYXRpb25TdGVwQ29udGVudEl0ZW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA2MjApXCI6e3RhZzpcIigwMDQwLDA2MjApXCIsdnI6XCJTUVwiLG5hbWU6XCJTcGVjaW1lbkxvY2FsaXphdGlvbkNvbnRlbnRJdGVtU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNzFBKVwiOnt0YWc6XCIoMDA0MCwwNzFBKVwiLHZyOlwiU1FcIixuYW1lOlwiSW1hZ2VDZW50ZXJQb2ludENvb3JkaW5hdGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwNzJBKVwiOnt0YWc6XCIoMDA0MCwwNzJBKVwiLHZyOlwiRFNcIixuYW1lOlwiWE9mZnNldEluU2xpZGVDb29yZGluYXRlU3lzdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMDczQSlcIjp7dGFnOlwiKDAwNDAsMDczQSlcIix2cjpcIkRTXCIsbmFtZTpcIllPZmZzZXRJblNsaWRlQ29vcmRpbmF0ZVN5c3RlbVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDA3NEEpXCI6e3RhZzpcIigwMDQwLDA3NEEpXCIsdnI6XCJEU1wiLG5hbWU6XCJaT2Zmc2V0SW5TbGlkZUNvb3JkaW5hdGVTeXN0ZW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwwOEVBKVwiOnt0YWc6XCIoMDA0MCwwOEVBKVwiLHZyOlwiU1FcIixuYW1lOlwiTWVhc3VyZW1lbnRVbml0c0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMDEpXCI6e3RhZzpcIigwMDQwLDEwMDEpXCIsdnI6XCJTSFwiLG5hbWU6XCJSZXF1ZXN0ZWRQcm9jZWR1cmVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMDIpXCI6e3RhZzpcIigwMDQwLDEwMDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSZWFzb25Gb3JUaGVSZXF1ZXN0ZWRQcm9jZWR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMDAzKVwiOnt0YWc6XCIoMDA0MCwxMDAzKVwiLHZyOlwiU0hcIixuYW1lOlwiUmVxdWVzdGVkUHJvY2VkdXJlUHJpb3JpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMDA0KVwiOnt0YWc6XCIoMDA0MCwxMDA0KVwiLHZyOlwiTE9cIixuYW1lOlwiUGF0aWVudFRyYW5zcG9ydEFycmFuZ2VtZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMDUpXCI6e3RhZzpcIigwMDQwLDEwMDUpXCIsdnI6XCJMT1wiLG5hbWU6XCJSZXF1ZXN0ZWRQcm9jZWR1cmVMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMDgpXCI6e3RhZzpcIigwMDQwLDEwMDgpXCIsdnI6XCJMT1wiLG5hbWU6XCJDb25maWRlbnRpYWxpdHlDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMTAwOSlcIjp7dGFnOlwiKDAwNDAsMTAwOSlcIix2cjpcIlNIXCIsbmFtZTpcIlJlcG9ydGluZ1ByaW9yaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMTAwQSlcIjp7dGFnOlwiKDAwNDAsMTAwQSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlYXNvbkZvclJlcXVlc3RlZFByb2NlZHVyZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMTApXCI6e3RhZzpcIigwMDQwLDEwMTApXCIsdnI6XCJQTlwiLG5hbWU6XCJOYW1lc09mSW50ZW5kZWRSZWNpcGllbnRzT2ZSZXN1bHRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMDExKVwiOnt0YWc6XCIoMDA0MCwxMDExKVwiLHZyOlwiU1FcIixuYW1lOlwiSW50ZW5kZWRSZWNpcGllbnRzT2ZSZXN1bHRzSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDEwMTIpXCI6e3RhZzpcIigwMDQwLDEwMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWFzb25Gb3JQZXJmb3JtZWRQcm9jZWR1cmVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMTAxKVwiOnt0YWc6XCIoMDA0MCwxMTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyc29uSWRlbnRpZmljYXRpb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMTAyKVwiOnt0YWc6XCIoMDA0MCwxMTAyKVwiLHZyOlwiU1RcIixuYW1lOlwiUGVyc29uQWRkcmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDExMDMpXCI6e3RhZzpcIigwMDQwLDExMDMpXCIsdnI6XCJMT1wiLG5hbWU6XCJQZXJzb25UZWxlcGhvbmVOdW1iZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCwxMTA0KVwiOnt0YWc6XCIoMDA0MCwxMTA0KVwiLHZyOlwiTFRcIixuYW1lOlwiUGVyc29uVGVsZWNvbUluZm9ybWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMTQwMClcIjp7dGFnOlwiKDAwNDAsMTQwMClcIix2cjpcIkxUXCIsbmFtZTpcIlJlcXVlc3RlZFByb2NlZHVyZUNvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAwNClcIjp7dGFnOlwiKDAwNDAsMjAwNClcIix2cjpcIkRBXCIsbmFtZTpcIklzc3VlRGF0ZU9mSW1hZ2luZ1NlcnZpY2VSZXF1ZXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAwNSlcIjp7dGFnOlwiKDAwNDAsMjAwNSlcIix2cjpcIlRNXCIsbmFtZTpcIklzc3VlVGltZU9mSW1hZ2luZ1NlcnZpY2VSZXF1ZXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAwOClcIjp7dGFnOlwiKDAwNDAsMjAwOClcIix2cjpcIlBOXCIsbmFtZTpcIk9yZGVyRW50ZXJlZEJ5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAwOSlcIjp7dGFnOlwiKDAwNDAsMjAwOSlcIix2cjpcIlNIXCIsbmFtZTpcIk9yZGVyRW50ZXJlckxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAxMClcIjp7dGFnOlwiKDAwNDAsMjAxMClcIix2cjpcIlNIXCIsbmFtZTpcIk9yZGVyQ2FsbGJhY2tQaG9uZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDIwMTEpXCI6e3RhZzpcIigwMDQwLDIwMTEpXCIsdnI6XCJMVFwiLG5hbWU6XCJPcmRlckNhbGxiYWNrVGVsZWNvbUluZm9ybWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAxNilcIjp7dGFnOlwiKDAwNDAsMjAxNilcIix2cjpcIkxPXCIsbmFtZTpcIlBsYWNlck9yZGVyTnVtYmVySW1hZ2luZ1NlcnZpY2VSZXF1ZXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjAxNylcIjp7dGFnOlwiKDAwNDAsMjAxNylcIix2cjpcIkxPXCIsbmFtZTpcIkZpbGxlck9yZGVyTnVtYmVySW1hZ2luZ1NlcnZpY2VSZXF1ZXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMjQwMClcIjp7dGFnOlwiKDAwNDAsMjQwMClcIix2cjpcIkxUXCIsbmFtZTpcIkltYWdpbmdTZXJ2aWNlUmVxdWVzdENvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsMzAwMSlcIjp7dGFnOlwiKDAwNDAsMzAwMSlcIix2cjpcIkxPXCIsbmFtZTpcIkNvbmZpZGVudGlhbGl0eUNvbnN0cmFpbnRPblBhdGllbnREYXRhRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDA1KVwiOnt0YWc6XCIoMDA0MCw0MDA1KVwiLHZyOlwiRFRcIixuYW1lOlwiU2NoZWR1bGVkUHJvY2VkdXJlU3RlcFN0YXJ0RGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDA3KVwiOnt0YWc6XCIoMDA0MCw0MDA3KVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyZm9ybWVkUHJvY2Vzc2luZ0FwcGxpY2F0aW9uc0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMDkpXCI6e3RhZzpcIigwMDQwLDQwMDkpXCIsdnI6XCJTUVwiLG5hbWU6XCJIdW1hblBlcmZvcm1lckNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMTApXCI6e3RhZzpcIigwMDQwLDQwMTApXCIsdnI6XCJEVFwiLG5hbWU6XCJTY2hlZHVsZWRQcm9jZWR1cmVTdGVwTW9kaWZpY2F0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDExKVwiOnt0YWc6XCIoMDA0MCw0MDExKVwiLHZyOlwiRFRcIixuYW1lOlwiRXhwZWN0ZWRDb21wbGV0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDE4KVwiOnt0YWc6XCIoMDA0MCw0MDE4KVwiLHZyOlwiU1FcIixuYW1lOlwiU2NoZWR1bGVkV29ya2l0ZW1Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDE5KVwiOnt0YWc6XCIoMDA0MCw0MDE5KVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyZm9ybWVkV29ya2l0ZW1Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDIwKVwiOnt0YWc6XCIoMDA0MCw0MDIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5wdXRBdmFpbGFiaWxpdHlGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsNDAyMSlcIjp7dGFnOlwiKDAwNDAsNDAyMSlcIix2cjpcIlNRXCIsbmFtZTpcIklucHV0SW5mb3JtYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMjUpXCI6e3RhZzpcIigwMDQwLDQwMjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2hlZHVsZWRTdGF0aW9uTmFtZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMjYpXCI6e3RhZzpcIigwMDQwLDQwMjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2hlZHVsZWRTdGF0aW9uQ2xhc3NDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDI3KVwiOnt0YWc6XCIoMDA0MCw0MDI3KVwiLHZyOlwiU1FcIixuYW1lOlwiU2NoZWR1bGVkU3RhdGlvbkdlb2dyYXBoaWNMb2NhdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMjgpXCI6e3RhZzpcIigwMDQwLDQwMjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJmb3JtZWRTdGF0aW9uTmFtZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMjkpXCI6e3RhZzpcIigwMDQwLDQwMjkpXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJmb3JtZWRTdGF0aW9uQ2xhc3NDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDMwKVwiOnt0YWc6XCIoMDA0MCw0MDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyZm9ybWVkU3RhdGlvbkdlb2dyYXBoaWNMb2NhdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwMzMpXCI6e3RhZzpcIigwMDQwLDQwMzMpXCIsdnI6XCJTUVwiLG5hbWU6XCJPdXRwdXRJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsNDAzNClcIjp7dGFnOlwiKDAwNDAsNDAzNClcIix2cjpcIlNRXCIsbmFtZTpcIlNjaGVkdWxlZEh1bWFuUGVyZm9ybWVyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsNDAzNSlcIjp7dGFnOlwiKDAwNDAsNDAzNSlcIix2cjpcIlNRXCIsbmFtZTpcIkFjdHVhbEh1bWFuUGVyZm9ybWVyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsNDAzNilcIjp7dGFnOlwiKDAwNDAsNDAzNilcIix2cjpcIkxPXCIsbmFtZTpcIkh1bWFuUGVyZm9ybWVyT3JnYW5pemF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsNDAzNylcIjp7dGFnOlwiKDAwNDAsNDAzNylcIix2cjpcIlBOXCIsbmFtZTpcIkh1bWFuUGVyZm9ybWVyTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwNDApXCI6e3RhZzpcIigwMDQwLDQwNDApXCIsdnI6XCJDU1wiLG5hbWU6XCJSYXdEYXRhSGFuZGxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDQxKVwiOnt0YWc6XCIoMDA0MCw0MDQxKVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5wdXRSZWFkaW5lc3NTdGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwNTApXCI6e3RhZzpcIigwMDQwLDQwNTApXCIsdnI6XCJEVFwiLG5hbWU6XCJQZXJmb3JtZWRQcm9jZWR1cmVTdGVwU3RhcnREYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDQwNTEpXCI6e3RhZzpcIigwMDQwLDQwNTEpXCIsdnI6XCJEVFwiLG5hbWU6XCJQZXJmb3JtZWRQcm9jZWR1cmVTdGVwRW5kRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw0MDUyKVwiOnt0YWc6XCIoMDA0MCw0MDUyKVwiLHZyOlwiRFRcIixuYW1lOlwiUHJvY2VkdXJlU3RlcENhbmNlbGxhdGlvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsODMwMilcIjp7dGFnOlwiKDAwNDAsODMwMilcIix2cjpcIkRTXCIsbmFtZTpcIkVudHJhbmNlRG9zZUlubUd5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsOTA5MilcIjp7dGFnOlwiKDAwNDAsOTA5MilcIix2cjpcIlNRXCIsbmFtZTpcIlBhcmFtZXRyaWNNYXBGcmFtZVR5cGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkwOTQpXCI6e3RhZzpcIigwMDQwLDkwOTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkSW1hZ2VSZWFsV29ybGRWYWx1ZU1hcHBpbmdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkwOTYpXCI6e3RhZzpcIigwMDQwLDkwOTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWFsV29ybGRWYWx1ZU1hcHBpbmdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkwOTgpXCI6e3RhZzpcIigwMDQwLDkwOTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJQaXhlbFZhbHVlTWFwcGluZ0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkyMTApXCI6e3RhZzpcIigwMDQwLDkyMTApXCIsdnI6XCJTSFwiLG5hbWU6XCJMVVRMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkyMTEpXCI6e3RhZzpcIigwMDQwLDkyMTEpXCIsdnI6XCJ4c1wiLG5hbWU6XCJSZWFsV29ybGRWYWx1ZUxhc3RWYWx1ZU1hcHBlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkyMTIpXCI6e3RhZzpcIigwMDQwLDkyMTIpXCIsdnI6XCJGRFwiLG5hbWU6XCJSZWFsV29ybGRWYWx1ZUxVVERhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLDkyMTYpXCI6e3RhZzpcIigwMDQwLDkyMTYpXCIsdnI6XCJ4c1wiLG5hbWU6XCJSZWFsV29ybGRWYWx1ZUZpcnN0VmFsdWVNYXBwZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw5MjIwKVwiOnt0YWc6XCIoMDA0MCw5MjIwKVwiLHZyOlwiU1FcIixuYW1lOlwiUXVhbnRpdHlEZWZpbml0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw5MjI0KVwiOnt0YWc6XCIoMDA0MCw5MjI0KVwiLHZyOlwiRkRcIixuYW1lOlwiUmVhbFdvcmxkVmFsdWVJbnRlcmNlcHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCw5MjI1KVwiOnt0YWc6XCIoMDA0MCw5MjI1KVwiLHZyOlwiRkRcIixuYW1lOlwiUmVhbFdvcmxkVmFsdWVTbG9wZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwMTApXCI6e3RhZzpcIigwMDQwLEEwMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWxhdGlvbnNoaXBUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTAyNylcIjp7dGFnOlwiKDAwNDAsQTAyNylcIix2cjpcIkxPXCIsbmFtZTpcIlZlcmlmeWluZ09yZ2FuaXphdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwMzApXCI6e3RhZzpcIigwMDQwLEEwMzApXCIsdnI6XCJEVFwiLG5hbWU6XCJWZXJpZmljYXRpb25EYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwMzIpXCI6e3RhZzpcIigwMDQwLEEwMzIpXCIsdnI6XCJEVFwiLG5hbWU6XCJPYnNlcnZhdGlvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTA0MClcIjp7dGFnOlwiKDAwNDAsQTA0MClcIix2cjpcIkNTXCIsbmFtZTpcIlZhbHVlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwNDMpXCI6e3RhZzpcIigwMDQwLEEwNDMpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwNTApXCI6e3RhZzpcIigwMDQwLEEwNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJDb250aW51aXR5T2ZDb250ZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTA3MylcIjp7dGFnOlwiKDAwNDAsQTA3MylcIix2cjpcIlNRXCIsbmFtZTpcIlZlcmlmeWluZ09ic2VydmVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMDc1KVwiOnt0YWc6XCIoMDA0MCxBMDc1KVwiLHZyOlwiUE5cIixuYW1lOlwiVmVyaWZ5aW5nT2JzZXJ2ZXJOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTA3OClcIjp7dGFnOlwiKDAwNDAsQTA3OClcIix2cjpcIlNRXCIsbmFtZTpcIkF1dGhvck9ic2VydmVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMDdBKVwiOnt0YWc6XCIoMDA0MCxBMDdBKVwiLHZyOlwiU1FcIixuYW1lOlwiUGFydGljaXBhbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwN0MpXCI6e3RhZzpcIigwMDQwLEEwN0MpXCIsdnI6XCJTUVwiLG5hbWU6XCJDdXN0b2RpYWxPcmdhbml6YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwODApXCI6e3RhZzpcIigwMDQwLEEwODApXCIsdnI6XCJDU1wiLG5hbWU6XCJQYXJ0aWNpcGF0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEwODIpXCI6e3RhZzpcIigwMDQwLEEwODIpXCIsdnI6XCJEVFwiLG5hbWU6XCJQYXJ0aWNpcGF0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMDg0KVwiOnt0YWc6XCIoMDA0MCxBMDg0KVwiLHZyOlwiQ1NcIixuYW1lOlwiT2JzZXJ2ZXJUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTA4OClcIjp7dGFnOlwiKDAwNDAsQTA4OClcIix2cjpcIlNRXCIsbmFtZTpcIlZlcmlmeWluZ09ic2VydmVySWRlbnRpZmljYXRpb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMEIwKVwiOnt0YWc6XCIoMDA0MCxBMEIwKVwiLHZyOlwiVVNcIixuYW1lOlwiUmVmZXJlbmNlZFdhdmVmb3JtQ2hhbm5lbHNcIix2bTpcIjItMm5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTIwKVwiOnt0YWc6XCIoMDA0MCxBMTIwKVwiLHZyOlwiRFRcIixuYW1lOlwiRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTIxKVwiOnt0YWc6XCIoMDA0MCxBMTIxKVwiLHZyOlwiREFcIixuYW1lOlwiRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExMjIpXCI6e3RhZzpcIigwMDQwLEExMjIpXCIsdnI6XCJUTVwiLG5hbWU6XCJUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTEyMylcIjp7dGFnOlwiKDAwNDAsQTEyMylcIix2cjpcIlBOXCIsbmFtZTpcIlBlcnNvbk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTI0KVwiOnt0YWc6XCIoMDA0MCxBMTI0KVwiLHZyOlwiVUlcIixuYW1lOlwiVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTEzMClcIjp7dGFnOlwiKDAwNDAsQTEzMClcIix2cjpcIkNTXCIsbmFtZTpcIlRlbXBvcmFsUmFuZ2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTEzMilcIjp7dGFnOlwiKDAwNDAsQTEzMilcIix2cjpcIlVMXCIsbmFtZTpcIlJlZmVyZW5jZWRTYW1wbGVQb3NpdGlvbnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExMzYpXCI6e3RhZzpcIigwMDQwLEExMzYpXCIsdnI6XCJVU1wiLG5hbWU6XCJSZWZlcmVuY2VkRnJhbWVOdW1iZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTM4KVwiOnt0YWc6XCIoMDA0MCxBMTM4KVwiLHZyOlwiRFNcIixuYW1lOlwiUmVmZXJlbmNlZFRpbWVPZmZzZXRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTNBKVwiOnt0YWc6XCIoMDA0MCxBMTNBKVwiLHZyOlwiRFRcIixuYW1lOlwiUmVmZXJlbmNlZERhdGVUaW1lXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTYwKVwiOnt0YWc6XCIoMDA0MCxBMTYwKVwiLHZyOlwiVVRcIixuYW1lOlwiVGV4dFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTE2MSlcIjp7dGFnOlwiKDAwNDAsQTE2MSlcIix2cjpcIkZEXCIsbmFtZTpcIkZsb2F0aW5nUG9pbnRWYWx1ZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTE2MilcIjp7dGFnOlwiKDAwNDAsQTE2MilcIix2cjpcIlNMXCIsbmFtZTpcIlJhdGlvbmFsTnVtZXJhdG9yVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExNjMpXCI6e3RhZzpcIigwMDQwLEExNjMpXCIsdnI6XCJVTFwiLG5hbWU6XCJSYXRpb25hbERlbm9taW5hdG9yVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExNjgpXCI6e3RhZzpcIigwMDQwLEExNjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb25jZXB0Q29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTE3MClcIjp7dGFnOlwiKDAwNDAsQTE3MClcIix2cjpcIlNRXCIsbmFtZTpcIlB1cnBvc2VPZlJlZmVyZW5jZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExNzEpXCI6e3RhZzpcIigwMDQwLEExNzEpXCIsdnI6XCJVSVwiLG5hbWU6XCJPYnNlcnZhdGlvblVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEExODApXCI6e3RhZzpcIigwMDQwLEExODApXCIsdnI6XCJVU1wiLG5hbWU6XCJBbm5vdGF0aW9uR3JvdXBOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMTk1KVwiOnt0YWc6XCIoMDA0MCxBMTk1KVwiLHZyOlwiU1FcIixuYW1lOlwiTW9kaWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMzAwKVwiOnt0YWc6XCIoMDA0MCxBMzAwKVwiLHZyOlwiU1FcIixuYW1lOlwiTWVhc3VyZWRWYWx1ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTMwMSlcIjp7dGFnOlwiKDAwNDAsQTMwMSlcIix2cjpcIlNRXCIsbmFtZTpcIk51bWVyaWNWYWx1ZVF1YWxpZmllckNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEzMEEpXCI6e3RhZzpcIigwMDQwLEEzMEEpXCIsdnI6XCJEU1wiLG5hbWU6XCJOdW1lcmljVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEzNjApXCI6e3RhZzpcIigwMDQwLEEzNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJQcmVkZWNlc3NvckRvY3VtZW50c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTM3MClcIjp7dGFnOlwiKDAwNDAsQTM3MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRSZXF1ZXN0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBMzcyKVwiOnt0YWc6XCIoMDA0MCxBMzcyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGVyZm9ybWVkUHJvY2VkdXJlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTM3NSlcIjp7dGFnOlwiKDAwNDAsQTM3NSlcIix2cjpcIlNRXCIsbmFtZTpcIkN1cnJlbnRSZXF1ZXN0ZWRQcm9jZWR1cmVFdmlkZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTM4NSlcIjp7dGFnOlwiKDAwNDAsQTM4NSlcIix2cjpcIlNRXCIsbmFtZTpcIlBlcnRpbmVudE90aGVyRXZpZGVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEEzOTApXCI6e3RhZzpcIigwMDQwLEEzOTApXCIsdnI6XCJTUVwiLG5hbWU6XCJITDdTdHJ1Y3R1cmVkRG9jdW1lbnRSZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEE0OTEpXCI6e3RhZzpcIigwMDQwLEE0OTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb21wbGV0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEE0OTIpXCI6e3RhZzpcIigwMDQwLEE0OTIpXCIsdnI6XCJMT1wiLG5hbWU6XCJDb21wbGV0aW9uRmxhZ0Rlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQTQ5MylcIjp7dGFnOlwiKDAwNDAsQTQ5MylcIix2cjpcIkNTXCIsbmFtZTpcIlZlcmlmaWNhdGlvbkZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBNDk0KVwiOnt0YWc6XCIoMDA0MCxBNDk0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQXJjaGl2ZVJlcXVlc3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEE0OTYpXCI6e3RhZzpcIigwMDQwLEE0OTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJQcmVsaW1pbmFyeUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBNTA0KVwiOnt0YWc6XCIoMDA0MCxBNTA0KVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udGVudFRlbXBsYXRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBNTI1KVwiOnt0YWc6XCIoMDA0MCxBNTI1KVwiLHZyOlwiU1FcIixuYW1lOlwiSWRlbnRpY2FsRG9jdW1lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxBNzMwKVwiOnt0YWc6XCIoMDA0MCxBNzMwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udGVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsQjAyMClcIjp7dGFnOlwiKDAwNDAsQjAyMClcIix2cjpcIlNRXCIsbmFtZTpcIldhdmVmb3JtQW5ub3RhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsREIwMClcIjp7dGFnOlwiKDAwNDAsREIwMClcIix2cjpcIkNTXCIsbmFtZTpcIlRlbXBsYXRlSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLERCNzMpXCI6e3RhZzpcIigwMDQwLERCNzMpXCIsdnI6XCJVTFwiLG5hbWU6XCJSZWZlcmVuY2VkQ29udGVudEl0ZW1JZGVudGlmaWVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxFMDAxKVwiOnt0YWc6XCIoMDA0MCxFMDAxKVwiLHZyOlwiU1RcIixuYW1lOlwiSEw3SW5zdGFuY2VJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsRTAwNClcIjp7dGFnOlwiKDAwNDAsRTAwNClcIix2cjpcIkRUXCIsbmFtZTpcIkhMN0RvY3VtZW50RWZmZWN0aXZlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEUwMDYpXCI6e3RhZzpcIigwMDQwLEUwMDYpXCIsdnI6XCJTUVwiLG5hbWU6XCJITDdEb2N1bWVudFR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxFMDA4KVwiOnt0YWc6XCIoMDA0MCxFMDA4KVwiLHZyOlwiU1FcIixuYW1lOlwiRG9jdW1lbnRDbGFzc0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEUwMTApXCI6e3RhZzpcIigwMDQwLEUwMTApXCIsdnI6XCJVUlwiLG5hbWU6XCJSZXRyaWV2ZVVSSVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEUwMTEpXCI6e3RhZzpcIigwMDQwLEUwMTEpXCIsdnI6XCJVSVwiLG5hbWU6XCJSZXRyaWV2ZUxvY2F0aW9uVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsRTAyMClcIjp7dGFnOlwiKDAwNDAsRTAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlR5cGVPZkluc3RhbmNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEUwMjEpXCI6e3RhZzpcIigwMDQwLEUwMjEpXCIsdnI6XCJTUVwiLG5hbWU6XCJESUNPTVJldHJpZXZhbFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsRTAyMilcIjp7dGFnOlwiKDAwNDAsRTAyMilcIix2cjpcIlNRXCIsbmFtZTpcIkRJQ09NTWVkaWFSZXRyaWV2YWxTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQwLEUwMjMpXCI6e3RhZzpcIigwMDQwLEUwMjMpXCIsdnI6XCJTUVwiLG5hbWU6XCJXQURPUmV0cmlldmFsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxFMDI0KVwiOnt0YWc6XCIoMDA0MCxFMDI0KVwiLHZyOlwiU1FcIixuYW1lOlwiWERTUmV0cmlldmFsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxFMDI1KVwiOnt0YWc6XCIoMDA0MCxFMDI1KVwiLHZyOlwiU1FcIixuYW1lOlwiV0FET1JTUmV0cmlldmFsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0MCxFMDMwKVwiOnt0YWc6XCIoMDA0MCxFMDMwKVwiLHZyOlwiVUlcIixuYW1lOlwiUmVwb3NpdG9yeVVuaXF1ZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDAsRTAzMSlcIjp7dGFnOlwiKDAwNDAsRTAzMSlcIix2cjpcIlVJXCIsbmFtZTpcIkhvbWVDb21tdW5pdHlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQyLDAwMTApXCI6e3RhZzpcIigwMDQyLDAwMTApXCIsdnI6XCJTVFwiLG5hbWU6XCJEb2N1bWVudFRpdGxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDIsMDAxMSlcIjp7dGFnOlwiKDAwNDIsMDAxMSlcIix2cjpcIk9CXCIsbmFtZTpcIkVuY2Fwc3VsYXRlZERvY3VtZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDIsMDAxMilcIjp7dGFnOlwiKDAwNDIsMDAxMilcIix2cjpcIkxPXCIsbmFtZTpcIk1JTUVUeXBlT2ZFbmNhcHN1bGF0ZWREb2N1bWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQyLDAwMTMpXCI6e3RhZzpcIigwMDQyLDAwMTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3VyY2VJbnN0YW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDIsMDAxNClcIjp7dGFnOlwiKDAwNDIsMDAxNClcIix2cjpcIkxPXCIsbmFtZTpcIkxpc3RPZk1JTUVUeXBlc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDQsMDAwMSlcIjp7dGFnOlwiKDAwNDQsMDAwMSlcIix2cjpcIlNUXCIsbmFtZTpcIlByb2R1Y3RQYWNrYWdlSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ0LDAwMDIpXCI6e3RhZzpcIigwMDQ0LDAwMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJTdWJzdGFuY2VBZG1pbmlzdHJhdGlvbkFwcHJvdmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDQsMDAwMylcIjp7dGFnOlwiKDAwNDQsMDAwMylcIix2cjpcIkxUXCIsbmFtZTpcIkFwcHJvdmFsU3RhdHVzRnVydGhlckRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDQsMDAwNClcIjp7dGFnOlwiKDAwNDQsMDAwNClcIix2cjpcIkRUXCIsbmFtZTpcIkFwcHJvdmFsU3RhdHVzRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDA3KVwiOnt0YWc6XCIoMDA0NCwwMDA3KVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvZHVjdFR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDA4KVwiOnt0YWc6XCIoMDA0NCwwMDA4KVwiLHZyOlwiTE9cIixuYW1lOlwiUHJvZHVjdE5hbWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ0LDAwMDkpXCI6e3RhZzpcIigwMDQ0LDAwMDkpXCIsdnI6XCJMVFwiLG5hbWU6XCJQcm9kdWN0RGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDBBKVwiOnt0YWc6XCIoMDA0NCwwMDBBKVwiLHZyOlwiTE9cIixuYW1lOlwiUHJvZHVjdExvdElkZW50aWZpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDBCKVwiOnt0YWc6XCIoMDA0NCwwMDBCKVwiLHZyOlwiRFRcIixuYW1lOlwiUHJvZHVjdEV4cGlyYXRpb25EYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ0LDAwMTApXCI6e3RhZzpcIigwMDQ0LDAwMTApXCIsdnI6XCJEVFwiLG5hbWU6XCJTdWJzdGFuY2VBZG1pbmlzdHJhdGlvbkRhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDQsMDAxMSlcIjp7dGFnOlwiKDAwNDQsMDAxMSlcIix2cjpcIkxPXCIsbmFtZTpcIlN1YnN0YW5jZUFkbWluaXN0cmF0aW9uTm90ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDEyKVwiOnt0YWc6XCIoMDA0NCwwMDEyKVwiLHZyOlwiTE9cIixuYW1lOlwiU3Vic3RhbmNlQWRtaW5pc3RyYXRpb25EZXZpY2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ0LDAwMTMpXCI6e3RhZzpcIigwMDQ0LDAwMTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcm9kdWN0UGFyYW1ldGVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NCwwMDE5KVwiOnt0YWc6XCIoMDA0NCwwMDE5KVwiLHZyOlwiU1FcIixuYW1lOlwiU3Vic3RhbmNlQWRtaW5pc3RyYXRpb25QYXJhbWV0ZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwMTIpXCI6e3RhZzpcIigwMDQ2LDAwMTIpXCIsdnI6XCJMT1wiLG5hbWU6XCJMZW5zRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDE0KVwiOnt0YWc6XCIoMDA0NiwwMDE0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmlnaHRMZW5zU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDE1KVwiOnt0YWc6XCIoMDA0NiwwMDE1KVwiLHZyOlwiU1FcIixuYW1lOlwiTGVmdExlbnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwMTYpXCI6e3RhZzpcIigwMDQ2LDAwMTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJVbnNwZWNpZmllZExhdGVyYWxpdHlMZW5zU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDE4KVwiOnt0YWc6XCIoMDA0NiwwMDE4KVwiLHZyOlwiU1FcIixuYW1lOlwiQ3lsaW5kZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwMjgpXCI6e3RhZzpcIigwMDQ2LDAwMjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcmlzbVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDAzMClcIjp7dGFnOlwiKDAwNDYsMDAzMClcIix2cjpcIkZEXCIsbmFtZTpcIkhvcml6b250YWxQcmlzbVBvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDAzMilcIjp7dGFnOlwiKDAwNDYsMDAzMilcIix2cjpcIkNTXCIsbmFtZTpcIkhvcml6b250YWxQcmlzbUJhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDM0KVwiOnt0YWc6XCIoMDA0NiwwMDM0KVwiLHZyOlwiRkRcIixuYW1lOlwiVmVydGljYWxQcmlzbVBvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDAzNilcIjp7dGFnOlwiKDAwNDYsMDAzNilcIix2cjpcIkNTXCIsbmFtZTpcIlZlcnRpY2FsUHJpc21CYXNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDAzOClcIjp7dGFnOlwiKDAwNDYsMDAzOClcIix2cjpcIkNTXCIsbmFtZTpcIkxlbnNTZWdtZW50VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNDApXCI6e3RhZzpcIigwMDQ2LDAwNDApXCIsdnI6XCJGRFwiLG5hbWU6XCJPcHRpY2FsVHJhbnNtaXR0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNDIpXCI6e3RhZzpcIigwMDQ2LDAwNDIpXCIsdnI6XCJGRFwiLG5hbWU6XCJDaGFubmVsV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDQ0KVwiOnt0YWc6XCIoMDA0NiwwMDQ0KVwiLHZyOlwiRkRcIixuYW1lOlwiUHVwaWxTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA0NilcIjp7dGFnOlwiKDAwNDYsMDA0NilcIix2cjpcIkZEXCIsbmFtZTpcIkNvcm5lYWxTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA1MClcIjp7dGFnOlwiKDAwNDYsMDA1MClcIix2cjpcIlNRXCIsbmFtZTpcIkF1dG9yZWZyYWN0aW9uUmlnaHRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNTIpXCI6e3RhZzpcIigwMDQ2LDAwNTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJBdXRvcmVmcmFjdGlvbkxlZnRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNjApXCI6e3RhZzpcIigwMDQ2LDAwNjApXCIsdnI6XCJGRFwiLG5hbWU6XCJEaXN0YW5jZVB1cGlsbGFyeURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA2MilcIjp7dGFnOlwiKDAwNDYsMDA2MilcIix2cjpcIkZEXCIsbmFtZTpcIk5lYXJQdXBpbGxhcnlEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNjMpXCI6e3RhZzpcIigwMDQ2LDAwNjMpXCIsdnI6XCJGRFwiLG5hbWU6XCJJbnRlcm1lZGlhdGVQdXBpbGxhcnlEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNjQpXCI6e3RhZzpcIigwMDQ2LDAwNjQpXCIsdnI6XCJGRFwiLG5hbWU6XCJPdGhlclB1cGlsbGFyeURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA3MClcIjp7dGFnOlwiKDAwNDYsMDA3MClcIix2cjpcIlNRXCIsbmFtZTpcIktlcmF0b21ldHJ5UmlnaHRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNzEpXCI6e3RhZzpcIigwMDQ2LDAwNzEpXCIsdnI6XCJTUVwiLG5hbWU6XCJLZXJhdG9tZXRyeUxlZnRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNzQpXCI6e3RhZzpcIigwMDQ2LDAwNzQpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdGVlcEtlcmF0b21ldHJpY0F4aXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNzUpXCI6e3RhZzpcIigwMDQ2LDAwNzUpXCIsdnI6XCJGRFwiLG5hbWU6XCJSYWRpdXNPZkN1cnZhdHVyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNzYpXCI6e3RhZzpcIigwMDQ2LDAwNzYpXCIsdnI6XCJGRFwiLG5hbWU6XCJLZXJhdG9tZXRyaWNQb3dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwNzcpXCI6e3RhZzpcIigwMDQ2LDAwNzcpXCIsdnI6XCJGRFwiLG5hbWU6XCJLZXJhdG9tZXRyaWNBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA4MClcIjp7dGFnOlwiKDAwNDYsMDA4MClcIix2cjpcIlNRXCIsbmFtZTpcIkZsYXRLZXJhdG9tZXRyaWNBeGlzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMDkyKVwiOnt0YWc6XCIoMDA0NiwwMDkyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQmFja2dyb3VuZENvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA5NClcIjp7dGFnOlwiKDAwNDYsMDA5NClcIix2cjpcIkNTXCIsbmFtZTpcIk9wdG90eXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA5NSlcIjp7dGFnOlwiKDAwNDYsMDA5NSlcIix2cjpcIkNTXCIsbmFtZTpcIk9wdG90eXBlUHJlc2VudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDA5NylcIjp7dGFnOlwiKDAwNDYsMDA5NylcIix2cjpcIlNRXCIsbmFtZTpcIlN1YmplY3RpdmVSZWZyYWN0aW9uUmlnaHRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAwOTgpXCI6e3RhZzpcIigwMDQ2LDAwOTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdWJqZWN0aXZlUmVmcmFjdGlvbkxlZnRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMDApXCI6e3RhZzpcIigwMDQ2LDAxMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJBZGROZWFyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMTAxKVwiOnt0YWc6XCIoMDA0NiwwMTAxKVwiLHZyOlwiU1FcIixuYW1lOlwiQWRkSW50ZXJtZWRpYXRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMTAyKVwiOnt0YWc6XCIoMDA0NiwwMTAyKVwiLHZyOlwiU1FcIixuYW1lOlwiQWRkT3RoZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMDQpXCI6e3RhZzpcIigwMDQ2LDAxMDQpXCIsdnI6XCJGRFwiLG5hbWU6XCJBZGRQb3dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMDYpXCI6e3RhZzpcIigwMDQ2LDAxMDYpXCIsdnI6XCJGRFwiLG5hbWU6XCJWaWV3aW5nRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMTIxKVwiOnt0YWc6XCIoMDA0NiwwMTIxKVwiLHZyOlwiU1FcIixuYW1lOlwiVmlzdWFsQWN1aXR5VHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMjIpXCI6e3RhZzpcIigwMDQ2LDAxMjIpXCIsdnI6XCJTUVwiLG5hbWU6XCJWaXN1YWxBY3VpdHlSaWdodEV5ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDEyMylcIjp7dGFnOlwiKDAwNDYsMDEyMylcIix2cjpcIlNRXCIsbmFtZTpcIlZpc3VhbEFjdWl0eUxlZnRFeWVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMjQpXCI6e3RhZzpcIigwMDQ2LDAxMjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJWaXN1YWxBY3VpdHlCb3RoRXllc09wZW5TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMjUpXCI6e3RhZzpcIigwMDQ2LDAxMjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJWaWV3aW5nRGlzdGFuY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDEzNSlcIjp7dGFnOlwiKDAwNDYsMDEzNSlcIix2cjpcIlNTXCIsbmFtZTpcIlZpc3VhbEFjdWl0eU1vZGlmaWVyc1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAxMzcpXCI6e3RhZzpcIigwMDQ2LDAxMzcpXCIsdnI6XCJGRFwiLG5hbWU6XCJEZWNpbWFsVmlzdWFsQWN1aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDEzOSlcIjp7dGFnOlwiKDAwNDYsMDEzOSlcIix2cjpcIkxPXCIsbmFtZTpcIk9wdG90eXBlRGV0YWlsZWREZWZpbml0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDE0NSlcIjp7dGFnOlwiKDAwNDYsMDE0NSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRSZWZyYWN0aXZlTWVhc3VyZW1lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMTQ2KVwiOnt0YWc6XCIoMDA0NiwwMTQ2KVwiLHZyOlwiRkRcIixuYW1lOlwiU3BoZXJlUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMTQ3KVwiOnt0YWc6XCIoMDA0NiwwMTQ3KVwiLHZyOlwiRkRcIixuYW1lOlwiQ3lsaW5kZXJQb3dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMDEpXCI6e3RhZzpcIigwMDQ2LDAyMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3JuZWFsVG9wb2dyYXBoeVN1cmZhY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjAyKVwiOnt0YWc6XCIoMDA0NiwwMjAyKVwiLHZyOlwiRkxcIixuYW1lOlwiQ29ybmVhbFZlcnRleExvY2F0aW9uXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIwMylcIjp7dGFnOlwiKDAwNDYsMDIwMylcIix2cjpcIkZMXCIsbmFtZTpcIlB1cGlsQ2VudHJvaWRYQ29vcmRpbmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMDQpXCI6e3RhZzpcIigwMDQ2LDAyMDQpXCIsdnI6XCJGTFwiLG5hbWU6XCJQdXBpbENlbnRyb2lkWUNvb3JkaW5hdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjA1KVwiOnt0YWc6XCIoMDA0NiwwMjA1KVwiLHZyOlwiRkxcIixuYW1lOlwiRXF1aXZhbGVudFB1cGlsUmFkaXVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIwNylcIjp7dGFnOlwiKDAwNDYsMDIwNylcIix2cjpcIlNRXCIsbmFtZTpcIkNvcm5lYWxUb3BvZ3JhcGh5TWFwVHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMDgpXCI6e3RhZzpcIigwMDQ2LDAyMDgpXCIsdnI6XCJJU1wiLG5hbWU6XCJWZXJ0aWNlc09mVGhlT3V0bGluZU9mUHVwaWxcIix2bTpcIjItMm5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjEwKVwiOnt0YWc6XCIoMDA0NiwwMjEwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29ybmVhbFRvcG9ncmFwaHlNYXBwaW5nTm9ybWFsc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIxMSlcIjp7dGFnOlwiKDAwNDYsMDIxMSlcIix2cjpcIlNRXCIsbmFtZTpcIk1heGltdW1Db3JuZWFsQ3VydmF0dXJlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjEyKVwiOnt0YWc6XCIoMDA0NiwwMjEyKVwiLHZyOlwiRkxcIixuYW1lOlwiTWF4aW11bUNvcm5lYWxDdXJ2YXR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjEzKVwiOnt0YWc6XCIoMDA0NiwwMjEzKVwiLHZyOlwiRkxcIixuYW1lOlwiTWF4aW11bUNvcm5lYWxDdXJ2YXR1cmVMb2NhdGlvblwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMTUpXCI6e3RhZzpcIigwMDQ2LDAyMTUpXCIsdnI6XCJTUVwiLG5hbWU6XCJNaW5pbXVtS2VyYXRvbWV0cmljU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjE4KVwiOnt0YWc6XCIoMDA0NiwwMjE4KVwiLHZyOlwiU1FcIixuYW1lOlwiU2ltdWxhdGVkS2VyYXRvbWV0cmljQ3lsaW5kZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMjApXCI6e3RhZzpcIigwMDQ2LDAyMjApXCIsdnI6XCJGTFwiLG5hbWU6XCJBdmVyYWdlQ29ybmVhbFBvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIyNClcIjp7dGFnOlwiKDAwNDYsMDIyNClcIix2cjpcIkZMXCIsbmFtZTpcIkNvcm5lYWxJU1ZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIyNylcIjp7dGFnOlwiKDAwNDYsMDIyNylcIix2cjpcIkZMXCIsbmFtZTpcIkFuYWx5emVkQXJlYVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMzApXCI6e3RhZzpcIigwMDQ2LDAyMzApXCIsdnI6XCJGTFwiLG5hbWU6XCJTdXJmYWNlUmVndWxhcml0eUluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDIzMilcIjp7dGFnOlwiKDAwNDYsMDIzMilcIix2cjpcIkZMXCIsbmFtZTpcIlN1cmZhY2VBc3ltbWV0cnlJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyMzQpXCI6e3RhZzpcIigwMDQ2LDAyMzQpXCIsdnI6XCJGTFwiLG5hbWU6XCJDb3JuZWFsRWNjZW50cmljaXR5SW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjM2KVwiOnt0YWc6XCIoMDA0NiwwMjM2KVwiLHZyOlwiRkxcIixuYW1lOlwiS2VyYXRvY29udXNQcmVkaWN0aW9uSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjM4KVwiOnt0YWc6XCIoMDA0NiwwMjM4KVwiLHZyOlwiRkxcIixuYW1lOlwiRGVjaW1hbFBvdGVudGlhbFZpc3VhbEFjdWl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyNDIpXCI6e3RhZzpcIigwMDQ2LDAyNDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3JuZWFsVG9wb2dyYXBoeU1hcFF1YWxpdHlFdmFsdWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDI0NClcIjp7dGFnOlwiKDAwNDYsMDI0NClcIix2cjpcIlNRXCIsbmFtZTpcIlNvdXJjZUltYWdlQ29ybmVhbFByb2Nlc3NlZERhdGFTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyNDcpXCI6e3RhZzpcIigwMDQ2LDAyNDcpXCIsdnI6XCJGTFwiLG5hbWU6XCJDb3JuZWFsUG9pbnRMb2NhdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyNDgpXCI6e3RhZzpcIigwMDQ2LDAyNDgpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb3JuZWFsUG9pbnRFc3RpbWF0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjQ5KVwiOnt0YWc6XCIoMDA0NiwwMjQ5KVwiLHZyOlwiRkxcIixuYW1lOlwiQXhpYWxQb3dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ2LDAyNTApXCI6e3RhZzpcIigwMDQ2LDAyNTApXCIsdnI6XCJGTFwiLG5hbWU6XCJUYW5nZW50aWFsUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0NiwwMjUxKVwiOnt0YWc6XCIoMDA0NiwwMjUxKVwiLHZyOlwiRkxcIixuYW1lOlwiUmVmcmFjdGl2ZVBvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDI1MilcIjp7dGFnOlwiKDAwNDYsMDI1MilcIix2cjpcIkZMXCIsbmFtZTpcIlJlbGF0aXZlRWxldmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDYsMDI1MylcIjp7dGFnOlwiKDAwNDYsMDI1MylcIix2cjpcIkZMXCIsbmFtZTpcIkNvcm5lYWxXYXZlZnJvbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMDAxKVwiOnt0YWc6XCIoMDA0OCwwMDAxKVwiLHZyOlwiRkxcIixuYW1lOlwiSW1hZ2VkVm9sdW1lV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMDAyKVwiOnt0YWc6XCIoMDA0OCwwMDAyKVwiLHZyOlwiRkxcIixuYW1lOlwiSW1hZ2VkVm9sdW1lSGVpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAwMylcIjp7dGFnOlwiKDAwNDgsMDAwMylcIix2cjpcIkZMXCIsbmFtZTpcIkltYWdlZFZvbHVtZURlcHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAwNilcIjp7dGFnOlwiKDAwNDgsMDAwNilcIix2cjpcIlVMXCIsbmFtZTpcIlRvdGFsUGl4ZWxNYXRyaXhDb2x1bW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAwNylcIjp7dGFnOlwiKDAwNDgsMDAwNylcIix2cjpcIlVMXCIsbmFtZTpcIlRvdGFsUGl4ZWxNYXRyaXhSb3dzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAwOClcIjp7dGFnOlwiKDAwNDgsMDAwOClcIix2cjpcIlNRXCIsbmFtZTpcIlRvdGFsUGl4ZWxNYXRyaXhPcmlnaW5TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAwMTApXCI6e3RhZzpcIigwMDQ4LDAwMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJTcGVjaW1lbkxhYmVsSW5JbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAwMTEpXCI6e3RhZzpcIigwMDQ4LDAwMTEpXCIsdnI6XCJDU1wiLG5hbWU6XCJGb2N1c01ldGhvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAwMTIpXCI6e3RhZzpcIigwMDQ4LDAwMTIpXCIsdnI6XCJDU1wiLG5hbWU6XCJFeHRlbmRlZERlcHRoT2ZGaWVsZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAwMTMpXCI6e3RhZzpcIigwMDQ4LDAwMTMpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZkZvY2FsUGxhbmVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAxNClcIjp7dGFnOlwiKDAwNDgsMDAxNClcIix2cjpcIkZMXCIsbmFtZTpcIkRpc3RhbmNlQmV0d2VlbkZvY2FsUGxhbmVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDAxNSlcIjp7dGFnOlwiKDAwNDgsMDAxNSlcIix2cjpcIlVTXCIsbmFtZTpcIlJlY29tbWVuZGVkQWJzZW50UGl4ZWxDSUVMYWJWYWx1ZVwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAxMDApXCI6e3RhZzpcIigwMDQ4LDAxMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbGx1bWluYXRvclR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMTAyKVwiOnt0YWc6XCIoMDA0OCwwMTAyKVwiLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2VPcmllbnRhdGlvblNsaWRlXCIsdm06XCI2XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDEwNSlcIjp7dGFnOlwiKDAwNDgsMDEwNSlcIix2cjpcIlNRXCIsbmFtZTpcIk9wdGljYWxQYXRoU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMTA2KVwiOnt0YWc6XCIoMDA0OCwwMTA2KVwiLHZyOlwiU0hcIixuYW1lOlwiT3B0aWNhbFBhdGhJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDEwNylcIjp7dGFnOlwiKDAwNDgsMDEwNylcIix2cjpcIlNUXCIsbmFtZTpcIk9wdGljYWxQYXRoRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMTA4KVwiOnt0YWc6XCIoMDA0OCwwMTA4KVwiLHZyOlwiU1FcIixuYW1lOlwiSWxsdW1pbmF0aW9uQ29sb3JDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMTEwKVwiOnt0YWc6XCIoMDA0OCwwMTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3BlY2ltZW5SZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAxMTEpXCI6e3RhZzpcIigwMDQ4LDAxMTEpXCIsdnI6XCJEU1wiLG5hbWU6XCJDb25kZW5zZXJMZW5zUG93ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMTEyKVwiOnt0YWc6XCIoMDA0OCwwMTEyKVwiLHZyOlwiRFNcIixuYW1lOlwiT2JqZWN0aXZlTGVuc1Bvd2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDExMylcIjp7dGFnOlwiKDAwNDgsMDExMylcIix2cjpcIkRTXCIsbmFtZTpcIk9iamVjdGl2ZUxlbnNOdW1lcmljYWxBcGVydHVyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAxMjApXCI6e3RhZzpcIigwMDQ4LDAxMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJQYWxldHRlQ29sb3JMb29rdXBUYWJsZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDIwMClcIjp7dGFnOlwiKDAwNDgsMDIwMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRJbWFnZU5hdmlnYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAyMDEpXCI6e3RhZzpcIigwMDQ4LDAyMDEpXCIsdnI6XCJVU1wiLG5hbWU6XCJUb3BMZWZ0SGFuZENvcm5lck9mTG9jYWxpemVyQXJlYVwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAyMDIpXCI6e3RhZzpcIigwMDQ4LDAyMDIpXCIsdnI6XCJVU1wiLG5hbWU6XCJCb3R0b21SaWdodEhhbmRDb3JuZXJPZkxvY2FsaXplckFyZWFcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMjA3KVwiOnt0YWc6XCIoMDA0OCwwMjA3KVwiLHZyOlwiU1FcIixuYW1lOlwiT3B0aWNhbFBhdGhJZGVudGlmaWNhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDIxQSlcIjp7dGFnOlwiKDAwNDgsMDIxQSlcIix2cjpcIlNRXCIsbmFtZTpcIlBsYW5lUG9zaXRpb25TbGlkZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNDgsMDIxRSlcIjp7dGFnOlwiKDAwNDgsMDIxRSlcIix2cjpcIlNMXCIsbmFtZTpcIkNvbHVtblBvc2l0aW9uSW5Ub3RhbEltYWdlUGl4ZWxNYXRyaXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA0OCwwMjFGKVwiOnt0YWc6XCIoMDA0OCwwMjFGKVwiLHZyOlwiU0xcIixuYW1lOlwiUm93UG9zaXRpb25JblRvdGFsSW1hZ2VQaXhlbE1hdHJpeFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDQ4LDAzMDEpXCI6e3RhZzpcIigwMDQ4LDAzMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaXhlbE9yaWdpbkludGVycHJldGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAwNClcIjp7dGFnOlwiKDAwNTAsMDAwNClcIix2cjpcIkNTXCIsbmFtZTpcIkNhbGlicmF0aW9uSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDEwKVwiOnt0YWc6XCIoMDA1MCwwMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiRGV2aWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDEyKVwiOnt0YWc6XCIoMDA1MCwwMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udGFpbmVyQ29tcG9uZW50VHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUwLDAwMTMpXCI6e3RhZzpcIigwMDUwLDAwMTMpXCIsdnI6XCJGRFwiLG5hbWU6XCJDb250YWluZXJDb21wb25lbnRUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDE0KVwiOnt0YWc6XCIoMDA1MCwwMDE0KVwiLHZyOlwiRFNcIixuYW1lOlwiRGV2aWNlTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxNSlcIjp7dGFnOlwiKDAwNTAsMDAxNSlcIix2cjpcIkZEXCIsbmFtZTpcIkNvbnRhaW5lckNvbXBvbmVudFdpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxNilcIjp7dGFnOlwiKDAwNTAsMDAxNilcIix2cjpcIkRTXCIsbmFtZTpcIkRldmljZURpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxNylcIjp7dGFnOlwiKDAwNTAsMDAxNylcIix2cjpcIkNTXCIsbmFtZTpcIkRldmljZURpYW1ldGVyVW5pdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDE4KVwiOnt0YWc6XCIoMDA1MCwwMDE4KVwiLHZyOlwiRFNcIixuYW1lOlwiRGV2aWNlVm9sdW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxOSlcIjp7dGFnOlwiKDAwNTAsMDAxOSlcIix2cjpcIkRTXCIsbmFtZTpcIkludGVyTWFya2VyRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDFBKVwiOnt0YWc6XCIoMDA1MCwwMDFBKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29udGFpbmVyQ29tcG9uZW50TWF0ZXJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDFCKVwiOnt0YWc6XCIoMDA1MCwwMDFCKVwiLHZyOlwiTE9cIixuYW1lOlwiQ29udGFpbmVyQ29tcG9uZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MCwwMDFDKVwiOnt0YWc6XCIoMDA1MCwwMDFDKVwiLHZyOlwiRkRcIixuYW1lOlwiQ29udGFpbmVyQ29tcG9uZW50TGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxRClcIjp7dGFnOlwiKDAwNTAsMDAxRClcIix2cjpcIkZEXCIsbmFtZTpcIkNvbnRhaW5lckNvbXBvbmVudERpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAxRSlcIjp7dGFnOlwiKDAwNTAsMDAxRSlcIix2cjpcIkxPXCIsbmFtZTpcIkNvbnRhaW5lckNvbXBvbmVudERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTAsMDAyMClcIjp7dGFnOlwiKDAwNTAsMDAyMClcIix2cjpcIkxPXCIsbmFtZTpcIkRldmljZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAwMSlcIjp7dGFnOlwiKDAwNTIsMDAwMSlcIix2cjpcIkZMXCIsbmFtZTpcIkNvbnRyYXN0Qm9sdXNJbmdyZWRpZW50UGVyY2VudEJ5Vm9sdW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAwMilcIjp7dGFnOlwiKDAwNTIsMDAwMilcIix2cjpcIkZEXCIsbmFtZTpcIk9DVEZvY2FsRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MiwwMDAzKVwiOnt0YWc6XCIoMDA1MiwwMDAzKVwiLHZyOlwiRkRcIixuYW1lOlwiQmVhbVNwb3RTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAwNClcIjp7dGFnOlwiKDAwNTIsMDAwNClcIix2cjpcIkZEXCIsbmFtZTpcIkVmZmVjdGl2ZVJlZnJhY3RpdmVJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMDYpXCI6e3RhZzpcIigwMDUyLDAwMDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJPQ1RBY3F1aXNpdGlvbkRvbWFpblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMDcpXCI6e3RhZzpcIigwMDUyLDAwMDcpXCIsdnI6XCJGRFwiLG5hbWU6XCJPQ1RPcHRpY2FsQ2VudGVyV2F2ZWxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMDgpXCI6e3RhZzpcIigwMDUyLDAwMDgpXCIsdnI6XCJGRFwiLG5hbWU6XCJBeGlhbFJlc29sdXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MiwwMDA5KVwiOnt0YWc6XCIoMDA1MiwwMDA5KVwiLHZyOlwiRkRcIixuYW1lOlwiUmFuZ2luZ0RlcHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAxMSlcIjp7dGFnOlwiKDAwNTIsMDAxMSlcIix2cjpcIkZEXCIsbmFtZTpcIkFMaW5lUmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMTIpXCI6e3RhZzpcIigwMDUyLDAwMTIpXCIsdnI6XCJVU1wiLG5hbWU6XCJBTGluZXNQZXJGcmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMTMpXCI6e3RhZzpcIigwMDUyLDAwMTMpXCIsdnI6XCJGRFwiLG5hbWU6XCJDYXRoZXRlclJvdGF0aW9uYWxSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAxNClcIjp7dGFnOlwiKDAwNTIsMDAxNClcIix2cjpcIkZEXCIsbmFtZTpcIkFMaW5lUGl4ZWxTcGFjaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAxNilcIjp7dGFnOlwiKDAwNTIsMDAxNilcIix2cjpcIlNRXCIsbmFtZTpcIk1vZGVPZlBlcmN1dGFuZW91c0FjY2Vzc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAyNSlcIjp7dGFnOlwiKDAwNTIsMDAyNSlcIix2cjpcIlNRXCIsbmFtZTpcIkludHJhdmFzY3VsYXJPQ1RGcmFtZVR5cGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMjYpXCI6e3RhZzpcIigwMDUyLDAwMjYpXCIsdnI6XCJDU1wiLG5hbWU6XCJPQ1RaT2Zmc2V0QXBwbGllZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMjcpXCI6e3RhZzpcIigwMDUyLDAwMjcpXCIsdnI6XCJTUVwiLG5hbWU6XCJJbnRyYXZhc2N1bGFyRnJhbWVDb250ZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MiwwMDI4KVwiOnt0YWc6XCIoMDA1MiwwMDI4KVwiLHZyOlwiRkRcIixuYW1lOlwiSW50cmF2YXNjdWxhckxvbmdpdHVkaW5hbERpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTIsMDAyOSlcIjp7dGFnOlwiKDAwNTIsMDAyOSlcIix2cjpcIlNRXCIsbmFtZTpcIkludHJhdmFzY3VsYXJPQ1RGcmFtZUNvbnRlbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMzApXCI6e3RhZzpcIigwMDUyLDAwMzApXCIsdnI6XCJTU1wiLG5hbWU6XCJPQ1RaT2Zmc2V0Q29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMzEpXCI6e3RhZzpcIigwMDUyLDAwMzEpXCIsdnI6XCJDU1wiLG5hbWU6XCJDYXRoZXRlckRpcmVjdGlvbk9mUm90YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MiwwMDMzKVwiOnt0YWc6XCIoMDA1MiwwMDMzKVwiLHZyOlwiRkRcIixuYW1lOlwiU2VhbUxpbmVMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMzQpXCI6e3RhZzpcIigwMDUyLDAwMzQpXCIsdnI6XCJGRFwiLG5hbWU6XCJGaXJzdEFMaW5lTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1MiwwMDM2KVwiOnt0YWc6XCIoMDA1MiwwMDM2KVwiLHZyOlwiVVNcIixuYW1lOlwiU2VhbUxpbmVJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMzgpXCI6e3RhZzpcIigwMDUyLDAwMzgpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZlBhZGRlZEFMaW5lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwMzkpXCI6e3RhZzpcIigwMDUyLDAwMzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbnRlcnBvbGF0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDUyLDAwM0EpXCI6e3RhZzpcIigwMDUyLDAwM0EpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWZyYWN0aXZlSW5kZXhBcHBsaWVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAxMClcIjp7dGFnOlwiKDAwNTQsMDAxMClcIix2cjpcIlVTXCIsbmFtZTpcIkVuZXJneVdpbmRvd1ZlY3RvclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAxMSlcIjp7dGFnOlwiKDAwNTQsMDAxMSlcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mRW5lcmd5V2luZG93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwMTIpXCI6e3RhZzpcIigwMDU0LDAwMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJFbmVyZ3lXaW5kb3dJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAxMylcIjp7dGFnOlwiKDAwNTQsMDAxMylcIix2cjpcIlNRXCIsbmFtZTpcIkVuZXJneVdpbmRvd1JhbmdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDE0KVwiOnt0YWc6XCIoMDA1NCwwMDE0KVwiLHZyOlwiRFNcIixuYW1lOlwiRW5lcmd5V2luZG93TG93ZXJMaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwMTUpXCI6e3RhZzpcIigwMDU0LDAwMTUpXCIsdnI6XCJEU1wiLG5hbWU6XCJFbmVyZ3lXaW5kb3dVcHBlckxpbWl0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAxNilcIjp7dGFnOlwiKDAwNTQsMDAxNilcIix2cjpcIlNRXCIsbmFtZTpcIlJhZGlvcGhhcm1hY2V1dGljYWxJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAxNylcIjp7dGFnOlwiKDAwNTQsMDAxNylcIix2cjpcIklTXCIsbmFtZTpcIlJlc2lkdWFsU3lyaW5nZUNvdW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwMTgpXCI6e3RhZzpcIigwMDU0LDAwMTgpXCIsdnI6XCJTSFwiLG5hbWU6XCJFbmVyZ3lXaW5kb3dOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAyMClcIjp7dGFnOlwiKDAwNTQsMDAyMClcIix2cjpcIlVTXCIsbmFtZTpcIkRldGVjdG9yVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDIxKVwiOnt0YWc6XCIoMDA1NCwwMDIxKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZEZXRlY3RvcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDIyKVwiOnt0YWc6XCIoMDA1NCwwMDIyKVwiLHZyOlwiU1FcIixuYW1lOlwiRGV0ZWN0b3JJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAzMClcIjp7dGFnOlwiKDAwNTQsMDAzMClcIix2cjpcIlVTXCIsbmFtZTpcIlBoYXNlVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDMxKVwiOnt0YWc6XCIoMDA1NCwwMDMxKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZQaGFzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDMyKVwiOnt0YWc6XCIoMDA1NCwwMDMyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGhhc2VJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAzMylcIjp7dGFnOlwiKDAwNTQsMDAzMylcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mRnJhbWVzSW5QaGFzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwMzYpXCI6e3RhZzpcIigwMDU0LDAwMzYpXCIsdnI6XCJJU1wiLG5hbWU6XCJQaGFzZURlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDAzOClcIjp7dGFnOlwiKDAwNTQsMDAzOClcIix2cjpcIklTXCIsbmFtZTpcIlBhdXNlQmV0d2VlbkZyYW1lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwMzkpXCI6e3RhZzpcIigwMDU0LDAwMzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaGFzZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDA1MClcIjp7dGFnOlwiKDAwNTQsMDA1MClcIix2cjpcIlVTXCIsbmFtZTpcIlJvdGF0aW9uVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDUxKVwiOnt0YWc6XCIoMDA1NCwwMDUxKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZSb3RhdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDUyKVwiOnt0YWc6XCIoMDA1NCwwMDUyKVwiLHZyOlwiU1FcIixuYW1lOlwiUm90YXRpb25JbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDA1MylcIjp7dGFnOlwiKDAwNTQsMDA1MylcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mRnJhbWVzSW5Sb3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwNjApXCI6e3RhZzpcIigwMDU0LDAwNjApXCIsdnI6XCJVU1wiLG5hbWU6XCJSUkludGVydmFsVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDYxKVwiOnt0YWc6XCIoMDA1NCwwMDYxKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZSUkludGVydmFsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwNjIpXCI6e3RhZzpcIigwMDU0LDAwNjIpXCIsdnI6XCJTUVwiLG5hbWU6XCJHYXRlZEluZm9ybWF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDYzKVwiOnt0YWc6XCIoMDA1NCwwMDYzKVwiLHZyOlwiU1FcIixuYW1lOlwiRGF0YUluZm9ybWF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDcwKVwiOnt0YWc6XCIoMDA1NCwwMDcwKVwiLHZyOlwiVVNcIixuYW1lOlwiVGltZVNsb3RWZWN0b3JcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwNzEpXCI6e3RhZzpcIigwMDU0LDAwNzEpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZlRpbWVTbG90c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAwNzIpXCI6e3RhZzpcIigwMDU0LDAwNzIpXCIsdnI6XCJTUVwiLG5hbWU6XCJUaW1lU2xvdEluZm9ybWF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDczKVwiOnt0YWc6XCIoMDA1NCwwMDczKVwiLHZyOlwiRFNcIixuYW1lOlwiVGltZVNsb3RUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDA4MClcIjp7dGFnOlwiKDAwNTQsMDA4MClcIix2cjpcIlVTXCIsbmFtZTpcIlNsaWNlVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDgxKVwiOnt0YWc6XCIoMDA1NCwwMDgxKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZTbGljZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMDkwKVwiOnt0YWc6XCIoMDA1NCwwMDkwKVwiLHZyOlwiVVNcIixuYW1lOlwiQW5ndWxhclZpZXdWZWN0b3JcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAxMDApXCI6e3RhZzpcIigwMDU0LDAxMDApXCIsdnI6XCJVU1wiLG5hbWU6XCJUaW1lU2xpY2VWZWN0b3JcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAxMDEpXCI6e3RhZzpcIigwMDU0LDAxMDEpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZlRpbWVTbGljZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMjAwKVwiOnt0YWc6XCIoMDA1NCwwMjAwKVwiLHZyOlwiRFNcIixuYW1lOlwiU3RhcnRBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAyMDIpXCI6e3RhZzpcIigwMDU0LDAyMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJUeXBlT2ZEZXRlY3Rvck1vdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAyMTApXCI6e3RhZzpcIigwMDU0LDAyMTApXCIsdnI6XCJJU1wiLG5hbWU6XCJUcmlnZ2VyVmVjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMjExKVwiOnt0YWc6XCIoMDA1NCwwMjExKVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZUcmlnZ2Vyc0luUGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMjIwKVwiOnt0YWc6XCIoMDA1NCwwMjIwKVwiLHZyOlwiU1FcIixuYW1lOlwiVmlld0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAyMjIpXCI6e3RhZzpcIigwMDU0LDAyMjIpXCIsdnI6XCJTUVwiLG5hbWU6XCJWaWV3TW9kaWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMzAwKVwiOnt0YWc6XCIoMDA1NCwwMzAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmFkaW9udWNsaWRlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDMwMilcIjp7dGFnOlwiKDAwNTQsMDMwMilcIix2cjpcIlNRXCIsbmFtZTpcIkFkbWluaXN0cmF0aW9uUm91dGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwMzA0KVwiOnt0YWc6XCIoMDA1NCwwMzA0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmFkaW9waGFybWFjZXV0aWNhbENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAzMDYpXCI6e3RhZzpcIigwMDU0LDAzMDYpXCIsdnI6XCJTUVwiLG5hbWU6XCJDYWxpYnJhdGlvbkRhdGFTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDAzMDgpXCI6e3RhZzpcIigwMDU0LDAzMDgpXCIsdnI6XCJVU1wiLG5hbWU6XCJFbmVyZ3lXaW5kb3dOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwNDAwKVwiOnt0YWc6XCIoMDA1NCwwNDAwKVwiLHZyOlwiU0hcIixuYW1lOlwiSW1hZ2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDA0MTApXCI6e3RhZzpcIigwMDU0LDA0MTApXCIsdnI6XCJTUVwiLG5hbWU6XCJQYXRpZW50T3JpZW50YXRpb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwNDEyKVwiOnt0YWc6XCIoMDA1NCwwNDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudE9yaWVudGF0aW9uTW9kaWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwwNDE0KVwiOnt0YWc6XCIoMDA1NCwwNDE0KVwiLHZyOlwiU1FcIixuYW1lOlwiUGF0aWVudEdhbnRyeVJlbGF0aW9uc2hpcENvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDA1MDApXCI6e3RhZzpcIigwMDU0LDA1MDApXCIsdnI6XCJDU1wiLG5hbWU6XCJTbGljZVByb2dyZXNzaW9uRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMDUwMSlcIjp7dGFnOlwiKDAwNTQsMDUwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlNjYW5Qcm9ncmVzc2lvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEwMDApXCI6e3RhZzpcIigwMDU0LDEwMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJTZXJpZXNUeXBlXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTAwMSlcIjp7dGFnOlwiKDAwNTQsMTAwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlVuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTAwMilcIjp7dGFnOlwiKDAwNTQsMTAwMilcIix2cjpcIkNTXCIsbmFtZTpcIkNvdW50c1NvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEwMDQpXCI6e3RhZzpcIigwMDU0LDEwMDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXByb2plY3Rpb25NZXRob2RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMDA2KVwiOnt0YWc6XCIoMDA1NCwxMDA2KVwiLHZyOlwiQ1NcIixuYW1lOlwiU1VWVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDExMDApXCI6e3RhZzpcIigwMDU0LDExMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJSYW5kb21zQ29ycmVjdGlvbk1ldGhvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDExMDEpXCI6e3RhZzpcIigwMDU0LDExMDEpXCIsdnI6XCJMT1wiLG5hbWU6XCJBdHRlbnVhdGlvbkNvcnJlY3Rpb25NZXRob2RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMTAyKVwiOnt0YWc6XCIoMDA1NCwxMTAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiRGVjYXlDb3JyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTEwMylcIjp7dGFnOlwiKDAwNTQsMTEwMylcIix2cjpcIkxPXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uTWV0aG9kXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTEwNClcIjp7dGFnOlwiKDAwNTQsMTEwNClcIix2cjpcIkxPXCIsbmFtZTpcIkRldGVjdG9yTGluZXNPZlJlc3BvbnNlVXNlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDExMDUpXCI6e3RhZzpcIigwMDU0LDExMDUpXCIsdnI6XCJMT1wiLG5hbWU6XCJTY2F0dGVyQ29ycmVjdGlvbk1ldGhvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEyMDApXCI6e3RhZzpcIigwMDU0LDEyMDApXCIsdnI6XCJEU1wiLG5hbWU6XCJBeGlhbEFjY2VwdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMjAxKVwiOnt0YWc6XCIoMDA1NCwxMjAxKVwiLHZyOlwiSVNcIixuYW1lOlwiQXhpYWxNYXNoXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTIwMilcIjp7dGFnOlwiKDAwNTQsMTIwMilcIix2cjpcIklTXCIsbmFtZTpcIlRyYW5zdmVyc2VNYXNoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTIwMylcIjp7dGFnOlwiKDAwNTQsMTIwMylcIix2cjpcIkRTXCIsbmFtZTpcIkRldGVjdG9yRWxlbWVudFNpemVcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMjEwKVwiOnt0YWc6XCIoMDA1NCwxMjEwKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29pbmNpZGVuY2VXaW5kb3dXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEyMjApXCI6e3RhZzpcIigwMDU0LDEyMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJTZWNvbmRhcnlDb3VudHNUeXBlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMzAwKVwiOnt0YWc6XCIoMDA1NCwxMzAwKVwiLHZyOlwiRFNcIixuYW1lOlwiRnJhbWVSZWZlcmVuY2VUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTMxMClcIjp7dGFnOlwiKDAwNTQsMTMxMClcIix2cjpcIklTXCIsbmFtZTpcIlByaW1hcnlQcm9tcHRzQ291bnRzQWNjdW11bGF0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMzExKVwiOnt0YWc6XCIoMDA1NCwxMzExKVwiLHZyOlwiSVNcIixuYW1lOlwiU2Vjb25kYXJ5Q291bnRzQWNjdW11bGF0ZWRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEzMjApXCI6e3RhZzpcIigwMDU0LDEzMjApXCIsdnI6XCJEU1wiLG5hbWU6XCJTbGljZVNlbnNpdGl2aXR5RmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTMyMSlcIjp7dGFnOlwiKDAwNTQsMTMyMSlcIix2cjpcIkRTXCIsbmFtZTpcIkRlY2F5RmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNTQsMTMyMilcIjp7dGFnOlwiKDAwNTQsMTMyMilcIix2cjpcIkRTXCIsbmFtZTpcIkRvc2VDYWxpYnJhdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDU0LDEzMjMpXCI6e3RhZzpcIigwMDU0LDEzMjMpXCIsdnI6XCJEU1wiLG5hbWU6XCJTY2F0dGVyRnJhY3Rpb25GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMzI0KVwiOnt0YWc6XCIoMDA1NCwxMzI0KVwiLHZyOlwiRFNcIixuYW1lOlwiRGVhZFRpbWVGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA1NCwxMzMwKVwiOnt0YWc6XCIoMDA1NCwxMzMwKVwiLHZyOlwiVVNcIixuYW1lOlwiSW1hZ2VJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDYwLDMwMDApXCI6e3RhZzpcIigwMDYwLDMwMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJIaXN0b2dyYW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDYwLDMwMDIpXCI6e3RhZzpcIigwMDYwLDMwMDIpXCIsdnI6XCJVU1wiLG5hbWU6XCJIaXN0b2dyYW1OdW1iZXJPZkJpbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MCwzMDA0KVwiOnt0YWc6XCIoMDA2MCwzMDA0KVwiLHZyOlwieHNcIixuYW1lOlwiSGlzdG9ncmFtRmlyc3RCaW5WYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDYwLDMwMDYpXCI6e3RhZzpcIigwMDYwLDMwMDYpXCIsdnI6XCJ4c1wiLG5hbWU6XCJIaXN0b2dyYW1MYXN0QmluVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MCwzMDA4KVwiOnt0YWc6XCIoMDA2MCwzMDA4KVwiLHZyOlwiVVNcIixuYW1lOlwiSGlzdG9ncmFtQmluV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MCwzMDEwKVwiOnt0YWc6XCIoMDA2MCwzMDEwKVwiLHZyOlwiTE9cIixuYW1lOlwiSGlzdG9ncmFtRXhwbGFuYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MCwzMDIwKVwiOnt0YWc6XCIoMDA2MCwzMDIwKVwiLHZyOlwiVUxcIixuYW1lOlwiSGlzdG9ncmFtRGF0YVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwMSlcIjp7dGFnOlwiKDAwNjIsMDAwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlNlZ21lbnRhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDAyKVwiOnt0YWc6XCIoMDA2MiwwMDAyKVwiLHZyOlwiU1FcIixuYW1lOlwiU2VnbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwMylcIjp7dGFnOlwiKDAwNjIsMDAwMylcIix2cjpcIlNRXCIsbmFtZTpcIlNlZ21lbnRlZFByb3BlcnR5Q2F0ZWdvcnlDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDA0KVwiOnt0YWc6XCIoMDA2MiwwMDA0KVwiLHZyOlwiVVNcIixuYW1lOlwiU2VnbWVudE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDYyLDAwMDUpXCI6e3RhZzpcIigwMDYyLDAwMDUpXCIsdnI6XCJMT1wiLG5hbWU6XCJTZWdtZW50TGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDA2KVwiOnt0YWc6XCIoMDA2MiwwMDA2KVwiLHZyOlwiU1RcIixuYW1lOlwiU2VnbWVudERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwOClcIjp7dGFnOlwiKDAwNjIsMDAwOClcIix2cjpcIkNTXCIsbmFtZTpcIlNlZ21lbnRBbGdvcml0aG1UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwOSlcIjp7dGFnOlwiKDAwNjIsMDAwOSlcIix2cjpcIkxPXCIsbmFtZTpcIlNlZ21lbnRBbGdvcml0aG1OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwQSlcIjp7dGFnOlwiKDAwNjIsMDAwQSlcIix2cjpcIlNRXCIsbmFtZTpcIlNlZ21lbnRJZGVudGlmaWNhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjIsMDAwQilcIjp7dGFnOlwiKDAwNjIsMDAwQilcIix2cjpcIlVTXCIsbmFtZTpcIlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDBDKVwiOnt0YWc6XCIoMDA2MiwwMDBDKVwiLHZyOlwiVVNcIixuYW1lOlwiUmVjb21tZW5kZWREaXNwbGF5R3JheXNjYWxlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDBEKVwiOnt0YWc6XCIoMDA2MiwwMDBEKVwiLHZyOlwiVVNcIixuYW1lOlwiUmVjb21tZW5kZWREaXNwbGF5Q0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDBFKVwiOnt0YWc6XCIoMDA2MiwwMDBFKVwiLHZyOlwiVVNcIixuYW1lOlwiTWF4aW11bUZyYWN0aW9uYWxWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDYyLDAwMEYpXCI6e3RhZzpcIigwMDYyLDAwMEYpXCIsdnI6XCJTUVwiLG5hbWU6XCJTZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDEwKVwiOnt0YWc6XCIoMDA2MiwwMDEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiU2VnbWVudGF0aW9uRnJhY3Rpb25hbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDExKVwiOnt0YWc6XCIoMDA2MiwwMDExKVwiLHZyOlwiU1FcIixuYW1lOlwiU2VnbWVudGVkUHJvcGVydHlUeXBlTW9kaWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2MiwwMDEyKVwiOnt0YWc6XCIoMDA2MiwwMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiVXNlZFNlZ21lbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NCwwMDAyKVwiOnt0YWc6XCIoMDA2NCwwMDAyKVwiLHZyOlwiU1FcIixuYW1lOlwiRGVmb3JtYWJsZVJlZ2lzdHJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjQsMDAwMylcIjp7dGFnOlwiKDAwNjQsMDAwMylcIix2cjpcIlVJXCIsbmFtZTpcIlNvdXJjZUZyYW1lT2ZSZWZlcmVuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NCwwMDA1KVwiOnt0YWc6XCIoMDA2NCwwMDA1KVwiLHZyOlwiU1FcIixuYW1lOlwiRGVmb3JtYWJsZVJlZ2lzdHJhdGlvbkdyaWRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY0LDAwMDcpXCI6e3RhZzpcIigwMDY0LDAwMDcpXCIsdnI6XCJVTFwiLG5hbWU6XCJHcmlkRGltZW5zaW9uc1wiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY0LDAwMDgpXCI6e3RhZzpcIigwMDY0LDAwMDgpXCIsdnI6XCJGRFwiLG5hbWU6XCJHcmlkUmVzb2x1dGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY0LDAwMDkpXCI6e3RhZzpcIigwMDY0LDAwMDkpXCIsdnI6XCJPRlwiLG5hbWU6XCJWZWN0b3JHcmlkRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY0LDAwMEYpXCI6e3RhZzpcIigwMDY0LDAwMEYpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcmVEZWZvcm1hdGlvbk1hdHJpeFJlZ2lzdHJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjQsMDAxMClcIjp7dGFnOlwiKDAwNjQsMDAxMClcIix2cjpcIlNRXCIsbmFtZTpcIlBvc3REZWZvcm1hdGlvbk1hdHJpeFJlZ2lzdHJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAwMSlcIjp7dGFnOlwiKDAwNjYsMDAwMSlcIix2cjpcIlVMXCIsbmFtZTpcIk51bWJlck9mU3VyZmFjZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDAyKVwiOnt0YWc6XCIoMDA2NiwwMDAyKVwiLHZyOlwiU1FcIixuYW1lOlwiU3VyZmFjZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAwMylcIjp7dGFnOlwiKDAwNjYsMDAwMylcIix2cjpcIlVMXCIsbmFtZTpcIlN1cmZhY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDA0KVwiOnt0YWc6XCIoMDA2NiwwMDA0KVwiLHZyOlwiTFRcIixuYW1lOlwiU3VyZmFjZUNvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAwOSlcIjp7dGFnOlwiKDAwNjYsMDAwOSlcIix2cjpcIkNTXCIsbmFtZTpcIlN1cmZhY2VQcm9jZXNzaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAwQSlcIjp7dGFnOlwiKDAwNjYsMDAwQSlcIix2cjpcIkZMXCIsbmFtZTpcIlN1cmZhY2VQcm9jZXNzaW5nUmF0aW9cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDBCKVwiOnt0YWc6XCIoMDA2NiwwMDBCKVwiLHZyOlwiTE9cIixuYW1lOlwiU3VyZmFjZVByb2Nlc3NpbmdEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMEMpXCI6e3RhZzpcIigwMDY2LDAwMEMpXCIsdnI6XCJGTFwiLG5hbWU6XCJSZWNvbW1lbmRlZFByZXNlbnRhdGlvbk9wYWNpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDBEKVwiOnt0YWc6XCIoMDA2NiwwMDBEKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVjb21tZW5kZWRQcmVzZW50YXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAwRSlcIjp7dGFnOlwiKDAwNjYsMDAwRSlcIix2cjpcIkNTXCIsbmFtZTpcIkZpbml0ZVZvbHVtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMTApXCI6e3RhZzpcIigwMDY2LDAwMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJNYW5pZm9sZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMTEpXCI6e3RhZzpcIigwMDY2LDAwMTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdXJmYWNlUG9pbnRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDEyKVwiOnt0YWc6XCIoMDA2NiwwMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiU3VyZmFjZVBvaW50c05vcm1hbHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMTMpXCI6e3RhZzpcIigwMDY2LDAwMTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdXJmYWNlTWVzaFByaW1pdGl2ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMTUpXCI6e3RhZzpcIigwMDY2LDAwMTUpXCIsdnI6XCJVTFwiLG5hbWU6XCJOdW1iZXJPZlN1cmZhY2VQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDE2KVwiOnt0YWc6XCIoMDA2NiwwMDE2KVwiLHZyOlwiT0ZcIixuYW1lOlwiUG9pbnRDb29yZGluYXRlc0RhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDE3KVwiOnt0YWc6XCIoMDA2NiwwMDE3KVwiLHZyOlwiRkxcIixuYW1lOlwiUG9pbnRQb3NpdGlvbkFjY3VyYWN5XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAxOClcIjp7dGFnOlwiKDAwNjYsMDAxOClcIix2cjpcIkZMXCIsbmFtZTpcIk1lYW5Qb2ludERpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAxOSlcIjp7dGFnOlwiKDAwNjYsMDAxOSlcIix2cjpcIkZMXCIsbmFtZTpcIk1heGltdW1Qb2ludERpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAxQSlcIjp7dGFnOlwiKDAwNjYsMDAxQSlcIix2cjpcIkZMXCIsbmFtZTpcIlBvaW50c0JvdW5kaW5nQm94Q29vcmRpbmF0ZXNcIix2bTpcIjZcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDFCKVwiOnt0YWc6XCIoMDA2NiwwMDFCKVwiLHZyOlwiRkxcIixuYW1lOlwiQXhpc09mUm90YXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDFDKVwiOnt0YWc6XCIoMDA2NiwwMDFDKVwiLHZyOlwiRkxcIixuYW1lOlwiQ2VudGVyT2ZSb3RhdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMUUpXCI6e3RhZzpcIigwMDY2LDAwMUUpXCIsdnI6XCJVTFwiLG5hbWU6XCJOdW1iZXJPZlZlY3RvcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDFGKVwiOnt0YWc6XCIoMDA2NiwwMDFGKVwiLHZyOlwiVVNcIixuYW1lOlwiVmVjdG9yRGltZW5zaW9uYWxpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDIwKVwiOnt0YWc6XCIoMDA2NiwwMDIwKVwiLHZyOlwiRkxcIixuYW1lOlwiVmVjdG9yQWNjdXJhY3lcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMjEpXCI6e3RhZzpcIigwMDY2LDAwMjEpXCIsdnI6XCJPRlwiLG5hbWU6XCJWZWN0b3JDb29yZGluYXRlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMjMpXCI6e3RhZzpcIigwMDY2LDAwMjMpXCIsdnI6XCJPV1wiLG5hbWU6XCJUcmlhbmdsZVBvaW50SW5kZXhMaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAyNClcIjp7dGFnOlwiKDAwNjYsMDAyNClcIix2cjpcIk9XXCIsbmFtZTpcIkVkZ2VQb2ludEluZGV4TGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMjUpXCI6e3RhZzpcIigwMDY2LDAwMjUpXCIsdnI6XCJPV1wiLG5hbWU6XCJWZXJ0ZXhQb2ludEluZGV4TGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMjYpXCI6e3RhZzpcIigwMDY2LDAwMjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJUcmlhbmdsZVN0cmlwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDI3KVwiOnt0YWc6XCIoMDA2NiwwMDI3KVwiLHZyOlwiU1FcIixuYW1lOlwiVHJpYW5nbGVGYW5TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMjgpXCI6e3RhZzpcIigwMDY2LDAwMjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJMaW5lU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDI5KVwiOnt0YWc6XCIoMDA2NiwwMDI5KVwiLHZyOlwiT1dcIixuYW1lOlwiUHJpbWl0aXZlUG9pbnRJbmRleExpc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDJBKVwiOnt0YWc6XCIoMDA2NiwwMDJBKVwiLHZyOlwiVUxcIixuYW1lOlwiU3VyZmFjZUNvdW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAyQilcIjp7dGFnOlwiKDAwNjYsMDAyQilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRTdXJmYWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDJDKVwiOnt0YWc6XCIoMDA2NiwwMDJDKVwiLHZyOlwiVUxcIixuYW1lOlwiUmVmZXJlbmNlZFN1cmZhY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDJEKVwiOnt0YWc6XCIoMDA2NiwwMDJEKVwiLHZyOlwiU1FcIixuYW1lOlwiU2VnbWVudFN1cmZhY2VHZW5lcmF0aW9uQWxnb3JpdGhtSWRlbnRpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMkUpXCI6e3RhZzpcIigwMDY2LDAwMkUpXCIsdnI6XCJTUVwiLG5hbWU6XCJTZWdtZW50U3VyZmFjZVNvdXJjZUluc3RhbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDJGKVwiOnt0YWc6XCIoMDA2NiwwMDJGKVwiLHZyOlwiU1FcIixuYW1lOlwiQWxnb3JpdGhtRmFtaWx5Q29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAzMClcIjp7dGFnOlwiKDAwNjYsMDAzMClcIix2cjpcIlNRXCIsbmFtZTpcIkFsZ29yaXRobU5hbWVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDMxKVwiOnt0YWc6XCIoMDA2NiwwMDMxKVwiLHZyOlwiTE9cIixuYW1lOlwiQWxnb3JpdGhtVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMzIpXCI6e3RhZzpcIigwMDY2LDAwMzIpXCIsdnI6XCJMVFwiLG5hbWU6XCJBbGdvcml0aG1QYXJhbWV0ZXJzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAzNClcIjp7dGFnOlwiKDAwNjYsMDAzNClcIix2cjpcIlNRXCIsbmFtZTpcIkZhY2V0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDM1KVwiOnt0YWc6XCIoMDA2NiwwMDM1KVwiLHZyOlwiU1FcIixuYW1lOlwiU3VyZmFjZVByb2Nlc3NpbmdBbGdvcml0aG1JZGVudGlmaWNhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjYsMDAzNilcIjp7dGFnOlwiKDAwNjYsMDAzNilcIix2cjpcIkxPXCIsbmFtZTpcIkFsZ29yaXRobU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDM3KVwiOnt0YWc6XCIoMDA2NiwwMDM3KVwiLHZyOlwiRkxcIixuYW1lOlwiUmVjb21tZW5kZWRQb2ludFJhZGl1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwMzgpXCI6e3RhZzpcIigwMDY2LDAwMzgpXCIsdnI6XCJGTFwiLG5hbWU6XCJSZWNvbW1lbmRlZExpbmVUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDQwKVwiOnt0YWc6XCIoMDA2NiwwMDQwKVwiLHZyOlwiVUxcIixuYW1lOlwiTG9uZ1ByaW1pdGl2ZVBvaW50SW5kZXhMaXN0XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDQxKVwiOnt0YWc6XCIoMDA2NiwwMDQxKVwiLHZyOlwiVUxcIixuYW1lOlwiTG9uZ1RyaWFuZ2xlUG9pbnRJbmRleExpc3RcIix2bTpcIjMtM25cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2NiwwMDQyKVwiOnt0YWc6XCIoMDA2NiwwMDQyKVwiLHZyOlwiVUxcIixuYW1lOlwiTG9uZ0VkZ2VQb2ludEluZGV4TGlzdFwiLHZtOlwiMi0yblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY2LDAwNDMpXCI6e3RhZzpcIigwMDY2LDAwNDMpXCIsdnI6XCJVTFwiLG5hbWU6XCJMb25nVmVydGV4UG9pbnRJbmRleExpc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYyMTApXCI6e3RhZzpcIigwMDY4LDYyMTApXCIsdnI6XCJMT1wiLG5hbWU6XCJJbXBsYW50U2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYyMjEpXCI6e3RhZzpcIigwMDY4LDYyMjEpXCIsdnI6XCJMT1wiLG5hbWU6XCJJbXBsYW50VGVtcGxhdGVWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjIyMilcIjp7dGFnOlwiKDAwNjgsNjIyMilcIix2cjpcIlNRXCIsbmFtZTpcIlJlcGxhY2VkSW1wbGFudFRlbXBsYXRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MjIzKVwiOnt0YWc6XCIoMDA2OCw2MjIzKVwiLHZyOlwiQ1NcIixuYW1lOlwiSW1wbGFudFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MjI0KVwiOnt0YWc6XCIoMDA2OCw2MjI0KVwiLHZyOlwiU1FcIixuYW1lOlwiRGVyaXZhdGlvbkltcGxhbnRUZW1wbGF0ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjIyNSlcIjp7dGFnOlwiKDAwNjgsNjIyNSlcIix2cjpcIlNRXCIsbmFtZTpcIk9yaWdpbmFsSW1wbGFudFRlbXBsYXRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MjI2KVwiOnt0YWc6XCIoMDA2OCw2MjI2KVwiLHZyOlwiRFRcIixuYW1lOlwiRWZmZWN0aXZlRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MjMwKVwiOnt0YWc6XCIoMDA2OCw2MjMwKVwiLHZyOlwiU1FcIixuYW1lOlwiSW1wbGFudFRhcmdldEFuYXRvbXlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYyNjApXCI6e3RhZzpcIigwMDY4LDYyNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbmZvcm1hdGlvbkZyb21NYW51ZmFjdHVyZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYyNjUpXCI6e3RhZzpcIigwMDY4LDYyNjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJOb3RpZmljYXRpb25Gcm9tTWFudWZhY3R1cmVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MjcwKVwiOnt0YWc6XCIoMDA2OCw2MjcwKVwiLHZyOlwiRFRcIixuYW1lOlwiSW5mb3JtYXRpb25Jc3N1ZURhdGVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjI4MClcIjp7dGFnOlwiKDAwNjgsNjI4MClcIix2cjpcIlNUXCIsbmFtZTpcIkluZm9ybWF0aW9uU3VtbWFyeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYyQTApXCI6e3RhZzpcIigwMDY4LDYyQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbXBsYW50UmVndWxhdG9yeURpc2FwcHJvdmFsQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjJBNSlcIjp7dGFnOlwiKDAwNjgsNjJBNSlcIix2cjpcIkZEXCIsbmFtZTpcIk92ZXJhbGxUZW1wbGF0ZVNwYXRpYWxUb2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MkMwKVwiOnt0YWc6XCIoMDA2OCw2MkMwKVwiLHZyOlwiU1FcIixuYW1lOlwiSFBHTERvY3VtZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MkQwKVwiOnt0YWc6XCIoMDA2OCw2MkQwKVwiLHZyOlwiVVNcIixuYW1lOlwiSFBHTERvY3VtZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MkQ1KVwiOnt0YWc6XCIoMDA2OCw2MkQ1KVwiLHZyOlwiTE9cIixuYW1lOlwiSFBHTERvY3VtZW50TGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MkUwKVwiOnt0YWc6XCIoMDA2OCw2MkUwKVwiLHZyOlwiU1FcIixuYW1lOlwiVmlld09yaWVudGF0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjJGMClcIjp7dGFnOlwiKDAwNjgsNjJGMClcIix2cjpcIkZEXCIsbmFtZTpcIlZpZXdPcmllbnRhdGlvbk1vZGlmaWVyXCIsdm06XCI5XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjJGMilcIjp7dGFnOlwiKDAwNjgsNjJGMilcIix2cjpcIkZEXCIsbmFtZTpcIkhQR0xEb2N1bWVudFNjYWxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MzAwKVwiOnt0YWc6XCIoMDA2OCw2MzAwKVwiLHZyOlwiT0JcIixuYW1lOlwiSFBHTERvY3VtZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjMxMClcIjp7dGFnOlwiKDAwNjgsNjMxMClcIix2cjpcIlVTXCIsbmFtZTpcIkhQR0xDb250b3VyUGVuTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjMyMClcIjp7dGFnOlwiKDAwNjgsNjMyMClcIix2cjpcIlNRXCIsbmFtZTpcIkhQR0xQZW5TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzMzApXCI6e3RhZzpcIigwMDY4LDYzMzApXCIsdnI6XCJVU1wiLG5hbWU6XCJIUEdMUGVuTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjM0MClcIjp7dGFnOlwiKDAwNjgsNjM0MClcIix2cjpcIkxPXCIsbmFtZTpcIkhQR0xQZW5MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzNDUpXCI6e3RhZzpcIigwMDY4LDYzNDUpXCIsdnI6XCJTVFwiLG5hbWU6XCJIUEdMUGVuRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MzQ2KVwiOnt0YWc6XCIoMDA2OCw2MzQ2KVwiLHZyOlwiRkRcIixuYW1lOlwiUmVjb21tZW5kZWRSb3RhdGlvblBvaW50XCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjM0NylcIjp7dGFnOlwiKDAwNjgsNjM0NylcIix2cjpcIkZEXCIsbmFtZTpcIkJvdW5kaW5nUmVjdGFuZ2xlXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjM1MClcIjp7dGFnOlwiKDAwNjgsNjM1MClcIix2cjpcIlVTXCIsbmFtZTpcIkltcGxhbnRUZW1wbGF0ZTNETW9kZWxTdXJmYWNlTnVtYmVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2MzYwKVwiOnt0YWc6XCIoMDA2OCw2MzYwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3VyZmFjZU1vZGVsRGVzY3JpcHRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzODApXCI6e3RhZzpcIigwMDY4LDYzODApXCIsdnI6XCJMT1wiLG5hbWU6XCJTdXJmYWNlTW9kZWxMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzOTApXCI6e3RhZzpcIigwMDY4LDYzOTApXCIsdnI6XCJGRFwiLG5hbWU6XCJTdXJmYWNlTW9kZWxTY2FsaW5nRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjNBMClcIjp7dGFnOlwiKDAwNjgsNjNBMClcIix2cjpcIlNRXCIsbmFtZTpcIk1hdGVyaWFsc0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzQTQpXCI6e3RhZzpcIigwMDY4LDYzQTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb2F0aW5nTWF0ZXJpYWxzQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjNBOClcIjp7dGFnOlwiKDAwNjgsNjNBOClcIix2cjpcIlNRXCIsbmFtZTpcIkltcGxhbnRUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjNBQylcIjp7dGFnOlwiKDAwNjgsNjNBQylcIix2cjpcIlNRXCIsbmFtZTpcIkZpeGF0aW9uTWV0aG9kQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjNCMClcIjp7dGFnOlwiKDAwNjgsNjNCMClcIix2cjpcIlNRXCIsbmFtZTpcIk1hdGluZ0ZlYXR1cmVTZXRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2M0MwKVwiOnt0YWc6XCIoMDA2OCw2M0MwKVwiLHZyOlwiVVNcIixuYW1lOlwiTWF0aW5nRmVhdHVyZVNldElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjNEMClcIjp7dGFnOlwiKDAwNjgsNjNEMClcIix2cjpcIkxPXCIsbmFtZTpcIk1hdGluZ0ZlYXR1cmVTZXRMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDYzRTApXCI6e3RhZzpcIigwMDY4LDYzRTApXCIsdnI6XCJTUVwiLG5hbWU6XCJNYXRpbmdGZWF0dXJlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2M0YwKVwiOnt0YWc6XCIoMDA2OCw2M0YwKVwiLHZyOlwiVVNcIixuYW1lOlwiTWF0aW5nRmVhdHVyZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjQwMClcIjp7dGFnOlwiKDAwNjgsNjQwMClcIix2cjpcIlNRXCIsbmFtZTpcIk1hdGluZ0ZlYXR1cmVEZWdyZWVPZkZyZWVkb21TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY0MTApXCI6e3RhZzpcIigwMDY4LDY0MTApXCIsdnI6XCJVU1wiLG5hbWU6XCJEZWdyZWVPZkZyZWVkb21JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY0MjApXCI6e3RhZzpcIigwMDY4LDY0MjApXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWdyZWVPZkZyZWVkb21UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjQzMClcIjp7dGFnOlwiKDAwNjgsNjQzMClcIix2cjpcIlNRXCIsbmFtZTpcIlR3b0RNYXRpbmdGZWF0dXJlQ29vcmRpbmF0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY0NDApXCI6e3RhZzpcIigwMDY4LDY0NDApXCIsdnI6XCJVU1wiLG5hbWU6XCJSZWZlcmVuY2VkSFBHTERvY3VtZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NDUwKVwiOnt0YWc6XCIoMDA2OCw2NDUwKVwiLHZyOlwiRkRcIixuYW1lOlwiVHdvRE1hdGluZ1BvaW50XCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjQ2MClcIjp7dGFnOlwiKDAwNjgsNjQ2MClcIix2cjpcIkZEXCIsbmFtZTpcIlR3b0RNYXRpbmdBeGVzXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjQ3MClcIjp7dGFnOlwiKDAwNjgsNjQ3MClcIix2cjpcIlNRXCIsbmFtZTpcIlR3b0REZWdyZWVPZkZyZWVkb21TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY0OTApXCI6e3RhZzpcIigwMDY4LDY0OTApXCIsdnI6XCJGRFwiLG5hbWU6XCJUaHJlZUREZWdyZWVPZkZyZWVkb21BeGlzXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjRBMClcIjp7dGFnOlwiKDAwNjgsNjRBMClcIix2cjpcIkZEXCIsbmFtZTpcIlJhbmdlT2ZGcmVlZG9tXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjRDMClcIjp7dGFnOlwiKDAwNjgsNjRDMClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlRE1hdGluZ1BvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjREMClcIjp7dGFnOlwiKDAwNjgsNjREMClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlRE1hdGluZ0F4ZXNcIix2bTpcIjlcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NEYwKVwiOnt0YWc6XCIoMDA2OCw2NEYwKVwiLHZyOlwiRkRcIixuYW1lOlwiVHdvRERlZ3JlZU9mRnJlZWRvbUF4aXNcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NTAwKVwiOnt0YWc6XCIoMDA2OCw2NTAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGxhbm5pbmdMYW5kbWFya1BvaW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NTEwKVwiOnt0YWc6XCIoMDA2OCw2NTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUGxhbm5pbmdMYW5kbWFya0xpbmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY1MjApXCI6e3RhZzpcIigwMDY4LDY1MjApXCIsdnI6XCJTUVwiLG5hbWU6XCJQbGFubmluZ0xhbmRtYXJrUGxhbmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY1MzApXCI6e3RhZzpcIigwMDY4LDY1MzApXCIsdnI6XCJVU1wiLG5hbWU6XCJQbGFubmluZ0xhbmRtYXJrSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NTQwKVwiOnt0YWc6XCIoMDA2OCw2NTQwKVwiLHZyOlwiTE9cIixuYW1lOlwiUGxhbm5pbmdMYW5kbWFya0Rlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjU0NSlcIjp7dGFnOlwiKDAwNjgsNjU0NSlcIix2cjpcIlNRXCIsbmFtZTpcIlBsYW5uaW5nTGFuZG1hcmtJZGVudGlmaWNhdGlvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDY4LDY1NTApXCI6e3RhZzpcIigwMDY4LDY1NTApXCIsdnI6XCJTUVwiLG5hbWU6XCJUd29EUG9pbnRDb29yZGluYXRlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjU2MClcIjp7dGFnOlwiKDAwNjgsNjU2MClcIix2cjpcIkZEXCIsbmFtZTpcIlR3b0RQb2ludENvb3JkaW5hdGVzXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjU5MClcIjp7dGFnOlwiKDAwNjgsNjU5MClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlRFBvaW50Q29vcmRpbmF0ZXNcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NUEwKVwiOnt0YWc6XCIoMDA2OCw2NUEwKVwiLHZyOlwiU1FcIixuYW1lOlwiVHdvRExpbmVDb29yZGluYXRlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjVCMClcIjp7dGFnOlwiKDAwNjgsNjVCMClcIix2cjpcIkZEXCIsbmFtZTpcIlR3b0RMaW5lQ29vcmRpbmF0ZXNcIix2bTpcIjRcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NUQwKVwiOnt0YWc6XCIoMDA2OCw2NUQwKVwiLHZyOlwiRkRcIixuYW1lOlwiVGhyZWVETGluZUNvb3JkaW5hdGVzXCIsdm06XCI2XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjVFMClcIjp7dGFnOlwiKDAwNjgsNjVFMClcIix2cjpcIlNRXCIsbmFtZTpcIlR3b0RQbGFuZUNvb3JkaW5hdGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA2OCw2NUYwKVwiOnt0YWc6XCIoMDA2OCw2NUYwKVwiLHZyOlwiRkRcIixuYW1lOlwiVHdvRFBsYW5lSW50ZXJzZWN0aW9uXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjYxMClcIjp7dGFnOlwiKDAwNjgsNjYxMClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlRFBsYW5lT3JpZ2luXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNjgsNjYyMClcIjp7dGFnOlwiKDAwNjgsNjYyMClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlRFBsYW5lTm9ybWFsXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAwMSlcIjp7dGFnOlwiKDAwNzAsMDAwMSlcIix2cjpcIlNRXCIsbmFtZTpcIkdyYXBoaWNBbm5vdGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDAyKVwiOnt0YWc6XCIoMDA3MCwwMDAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiR3JhcGhpY0xheWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAwMylcIjp7dGFnOlwiKDAwNzAsMDAwMylcIix2cjpcIkNTXCIsbmFtZTpcIkJvdW5kaW5nQm94QW5ub3RhdGlvblVuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAwNClcIjp7dGFnOlwiKDAwNzAsMDAwNClcIix2cjpcIkNTXCIsbmFtZTpcIkFuY2hvclBvaW50QW5ub3RhdGlvblVuaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAwNSlcIjp7dGFnOlwiKDAwNzAsMDAwNSlcIix2cjpcIkNTXCIsbmFtZTpcIkdyYXBoaWNBbm5vdGF0aW9uVW5pdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDA2KVwiOnt0YWc6XCIoMDA3MCwwMDA2KVwiLHZyOlwiU1RcIixuYW1lOlwiVW5mb3JtYXR0ZWRUZXh0VmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDA4KVwiOnt0YWc6XCIoMDA3MCwwMDA4KVwiLHZyOlwiU1FcIixuYW1lOlwiVGV4dE9iamVjdFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAwOSlcIjp7dGFnOlwiKDAwNzAsMDAwOSlcIix2cjpcIlNRXCIsbmFtZTpcIkdyYXBoaWNPYmplY3RTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwMTApXCI6e3RhZzpcIigwMDcwLDAwMTApXCIsdnI6XCJGTFwiLG5hbWU6XCJCb3VuZGluZ0JveFRvcExlZnRIYW5kQ29ybmVyXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAxMSlcIjp7dGFnOlwiKDAwNzAsMDAxMSlcIix2cjpcIkZMXCIsbmFtZTpcIkJvdW5kaW5nQm94Qm90dG9tUmlnaHRIYW5kQ29ybmVyXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAxMilcIjp7dGFnOlwiKDAwNzAsMDAxMilcIix2cjpcIkNTXCIsbmFtZTpcIkJvdW5kaW5nQm94VGV4dEhvcml6b250YWxKdXN0aWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAxNClcIjp7dGFnOlwiKDAwNzAsMDAxNClcIix2cjpcIkZMXCIsbmFtZTpcIkFuY2hvclBvaW50XCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDAxNSlcIjp7dGFnOlwiKDAwNzAsMDAxNSlcIix2cjpcIkNTXCIsbmFtZTpcIkFuY2hvclBvaW50VmlzaWJpbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwMjApXCI6e3RhZzpcIigwMDcwLDAwMjApXCIsdnI6XCJVU1wiLG5hbWU6XCJHcmFwaGljRGltZW5zaW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwMjEpXCI6e3RhZzpcIigwMDcwLDAwMjEpXCIsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZkdyYXBoaWNQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDIyKVwiOnt0YWc6XCIoMDA3MCwwMDIyKVwiLHZyOlwiRkxcIixuYW1lOlwiR3JhcGhpY0RhdGFcIix2bTpcIjItblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwMjMpXCI6e3RhZzpcIigwMDcwLDAwMjMpXCIsdnI6XCJDU1wiLG5hbWU6XCJHcmFwaGljVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwMjQpXCI6e3RhZzpcIigwMDcwLDAwMjQpXCIsdnI6XCJDU1wiLG5hbWU6XCJHcmFwaGljRmlsbGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDA0MSlcIjp7dGFnOlwiKDAwNzAsMDA0MSlcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlSG9yaXpvbnRhbEZsaXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDQyKVwiOnt0YWc6XCIoMDA3MCwwMDQyKVwiLHZyOlwiVVNcIixuYW1lOlwiSW1hZ2VSb3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwNTIpXCI6e3RhZzpcIigwMDcwLDAwNTIpXCIsdnI6XCJTTFwiLG5hbWU6XCJEaXNwbGF5ZWRBcmVhVG9wTGVmdEhhbmRDb3JuZXJcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDUzKVwiOnt0YWc6XCIoMDA3MCwwMDUzKVwiLHZyOlwiU0xcIixuYW1lOlwiRGlzcGxheWVkQXJlYUJvdHRvbVJpZ2h0SGFuZENvcm5lclwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwNUEpXCI6e3RhZzpcIigwMDcwLDAwNUEpXCIsdnI6XCJTUVwiLG5hbWU6XCJEaXNwbGF5ZWRBcmVhU2VsZWN0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDYwKVwiOnt0YWc6XCIoMDA3MCwwMDYwKVwiLHZyOlwiU1FcIixuYW1lOlwiR3JhcGhpY0xheWVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDYyKVwiOnt0YWc6XCIoMDA3MCwwMDYyKVwiLHZyOlwiSVNcIixuYW1lOlwiR3JhcGhpY0xheWVyT3JkZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDY2KVwiOnt0YWc6XCIoMDA3MCwwMDY2KVwiLHZyOlwiVVNcIixuYW1lOlwiR3JhcGhpY0xheWVyUmVjb21tZW5kZWREaXNwbGF5R3JheXNjYWxlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDY4KVwiOnt0YWc6XCIoMDA3MCwwMDY4KVwiLHZyOlwiTE9cIixuYW1lOlwiR3JhcGhpY0xheWVyRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDgwKVwiOnt0YWc6XCIoMDA3MCwwMDgwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29udGVudExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDA4MSlcIjp7dGFnOlwiKDAwNzAsMDA4MSlcIix2cjpcIkxPXCIsbmFtZTpcIkNvbnRlbnREZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwODIpXCI6e3RhZzpcIigwMDcwLDAwODIpXCIsdnI6XCJEQVwiLG5hbWU6XCJQcmVzZW50YXRpb25DcmVhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMDgzKVwiOnt0YWc6XCIoMDA3MCwwMDgzKVwiLHZyOlwiVE1cIixuYW1lOlwiUHJlc2VudGF0aW9uQ3JlYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDA4NClcIjp7dGFnOlwiKDAwNzAsMDA4NClcIix2cjpcIlBOXCIsbmFtZTpcIkNvbnRlbnRDcmVhdG9yTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAwODYpXCI6e3RhZzpcIigwMDcwLDAwODYpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb250ZW50Q3JlYXRvcklkZW50aWZpY2F0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDA4NylcIjp7dGFnOlwiKDAwNzAsMDA4NylcIix2cjpcIlNRXCIsbmFtZTpcIkFsdGVybmF0ZUNvbnRlbnREZXNjcmlwdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDEwMClcIjp7dGFnOlwiKDAwNzAsMDEwMClcIix2cjpcIkNTXCIsbmFtZTpcIlByZXNlbnRhdGlvblNpemVNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDEwMSlcIjp7dGFnOlwiKDAwNzAsMDEwMSlcIix2cjpcIkRTXCIsbmFtZTpcIlByZXNlbnRhdGlvblBpeGVsU3BhY2luZ1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAxMDIpXCI6e3RhZzpcIigwMDcwLDAxMDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJQcmVzZW50YXRpb25QaXhlbEFzcGVjdFJhdGlvXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDEwMylcIjp7dGFnOlwiKDAwNzAsMDEwMylcIix2cjpcIkZMXCIsbmFtZTpcIlByZXNlbnRhdGlvblBpeGVsTWFnbmlmaWNhdGlvblJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIwNylcIjp7dGFnOlwiKDAwNzAsMDIwNylcIix2cjpcIkxPXCIsbmFtZTpcIkdyYXBoaWNHcm91cExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIwOClcIjp7dGFnOlwiKDAwNzAsMDIwOClcIix2cjpcIlNUXCIsbmFtZTpcIkdyYXBoaWNHcm91cERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIwOSlcIjp7dGFnOlwiKDAwNzAsMDIwOSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbXBvdW5kR3JhcGhpY1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIyNilcIjp7dGFnOlwiKDAwNzAsMDIyNilcIix2cjpcIlVMXCIsbmFtZTpcIkNvbXBvdW5kR3JhcGhpY0luc3RhbmNlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjI3KVwiOnt0YWc6XCIoMDA3MCwwMjI3KVwiLHZyOlwiTE9cIixuYW1lOlwiRm9udE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjI4KVwiOnt0YWc6XCIoMDA3MCwwMjI4KVwiLHZyOlwiQ1NcIixuYW1lOlwiRm9udE5hbWVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIyOSlcIjp7dGFnOlwiKDAwNzAsMDIyOSlcIix2cjpcIkxPXCIsbmFtZTpcIkNTU0ZvbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDIzMClcIjp7dGFnOlwiKDAwNzAsMDIzMClcIix2cjpcIkZEXCIsbmFtZTpcIlJvdGF0aW9uQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjMxKVwiOnt0YWc6XCIoMDA3MCwwMjMxKVwiLHZyOlwiU1FcIixuYW1lOlwiVGV4dFN0eWxlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjMyKVwiOnt0YWc6XCIoMDA3MCwwMjMyKVwiLHZyOlwiU1FcIixuYW1lOlwiTGluZVN0eWxlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjMzKVwiOnt0YWc6XCIoMDA3MCwwMjMzKVwiLHZyOlwiU1FcIixuYW1lOlwiRmlsbFN0eWxlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjM0KVwiOnt0YWc6XCIoMDA3MCwwMjM0KVwiLHZyOlwiU1FcIixuYW1lOlwiR3JhcGhpY0dyb3VwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjQxKVwiOnt0YWc6XCIoMDA3MCwwMjQxKVwiLHZyOlwiVVNcIixuYW1lOlwiVGV4dENvbG9yQ0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjQyKVwiOnt0YWc6XCIoMDA3MCwwMjQyKVwiLHZyOlwiQ1NcIixuYW1lOlwiSG9yaXpvbnRhbEFsaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNDMpXCI6e3RhZzpcIigwMDcwLDAyNDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJWZXJ0aWNhbEFsaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNDQpXCI6e3RhZzpcIigwMDcwLDAyNDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaGFkb3dTdHlsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNDUpXCI6e3RhZzpcIigwMDcwLDAyNDUpXCIsdnI6XCJGTFwiLG5hbWU6XCJTaGFkb3dPZmZzZXRYXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI0NilcIjp7dGFnOlwiKDAwNzAsMDI0NilcIix2cjpcIkZMXCIsbmFtZTpcIlNoYWRvd09mZnNldFlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjQ3KVwiOnt0YWc6XCIoMDA3MCwwMjQ3KVwiLHZyOlwiVVNcIixuYW1lOlwiU2hhZG93Q29sb3JDSUVMYWJWYWx1ZVwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNDgpXCI6e3RhZzpcIigwMDcwLDAyNDgpXCIsdnI6XCJDU1wiLG5hbWU6XCJVbmRlcmxpbmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI0OSlcIjp7dGFnOlwiKDAwNzAsMDI0OSlcIix2cjpcIkNTXCIsbmFtZTpcIkJvbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjUwKVwiOnt0YWc6XCIoMDA3MCwwMjUwKVwiLHZyOlwiQ1NcIixuYW1lOlwiSXRhbGljXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI1MSlcIjp7dGFnOlwiKDAwNzAsMDI1MSlcIix2cjpcIlVTXCIsbmFtZTpcIlBhdHRlcm5PbkNvbG9yQ0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjUyKVwiOnt0YWc6XCIoMDA3MCwwMjUyKVwiLHZyOlwiVVNcIixuYW1lOlwiUGF0dGVybk9mZkNvbG9yQ0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjUzKVwiOnt0YWc6XCIoMDA3MCwwMjUzKVwiLHZyOlwiRkxcIixuYW1lOlwiTGluZVRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNTQpXCI6e3RhZzpcIigwMDcwLDAyNTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJMaW5lRGFzaGluZ1N0eWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI1NSlcIjp7dGFnOlwiKDAwNzAsMDI1NSlcIix2cjpcIlVMXCIsbmFtZTpcIkxpbmVQYXR0ZXJuXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI1NilcIjp7dGFnOlwiKDAwNzAsMDI1NilcIix2cjpcIk9CXCIsbmFtZTpcIkZpbGxQYXR0ZXJuXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI1NylcIjp7dGFnOlwiKDAwNzAsMDI1NylcIix2cjpcIkNTXCIsbmFtZTpcIkZpbGxNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI1OClcIjp7dGFnOlwiKDAwNzAsMDI1OClcIix2cjpcIkZMXCIsbmFtZTpcIlNoYWRvd09wYWNpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjYxKVwiOnt0YWc6XCIoMDA3MCwwMjYxKVwiLHZyOlwiRkxcIixuYW1lOlwiR2FwTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI2MilcIjp7dGFnOlwiKDAwNzAsMDI2MilcIix2cjpcIkZMXCIsbmFtZTpcIkRpYW1ldGVyT2ZWaXNpYmlsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI3MylcIjp7dGFnOlwiKDAwNzAsMDI3MylcIix2cjpcIkZMXCIsbmFtZTpcIlJvdGF0aW9uUG9pbnRcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjc0KVwiOnt0YWc6XCIoMDA3MCwwMjc0KVwiLHZyOlwiQ1NcIixuYW1lOlwiVGlja0FsaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyNzgpXCI6e3RhZzpcIigwMDcwLDAyNzgpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaG93VGlja0xhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI3OSlcIjp7dGFnOlwiKDAwNzAsMDI3OSlcIix2cjpcIkNTXCIsbmFtZTpcIlRpY2tMYWJlbEFsaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyODIpXCI6e3RhZzpcIigwMDcwLDAyODIpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb21wb3VuZEdyYXBoaWNVbml0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyODQpXCI6e3RhZzpcIigwMDcwLDAyODQpXCIsdnI6XCJGTFwiLG5hbWU6XCJQYXR0ZXJuT25PcGFjaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI4NSlcIjp7dGFnOlwiKDAwNzAsMDI4NSlcIix2cjpcIkZMXCIsbmFtZTpcIlBhdHRlcm5PZmZPcGFjaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI4NylcIjp7dGFnOlwiKDAwNzAsMDI4NylcIix2cjpcIlNRXCIsbmFtZTpcIk1ham9yVGlja3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAyODgpXCI6e3RhZzpcIigwMDcwLDAyODgpXCIsdnI6XCJGTFwiLG5hbWU6XCJUaWNrUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjg5KVwiOnt0YWc6XCIoMDA3MCwwMjg5KVwiLHZyOlwiU0hcIixuYW1lOlwiVGlja0xhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDI5NClcIjp7dGFnOlwiKDAwNzAsMDI5NClcIix2cjpcIkNTXCIsbmFtZTpcIkNvbXBvdW5kR3JhcGhpY1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMjk1KVwiOnt0YWc6XCIoMDA3MCwwMjk1KVwiLHZyOlwiVUxcIixuYW1lOlwiR3JhcGhpY0dyb3VwSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMzA2KVwiOnt0YWc6XCIoMDA3MCwwMzA2KVwiLHZyOlwiQ1NcIixuYW1lOlwiU2hhcGVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMwOClcIjp7dGFnOlwiKDAwNzAsMDMwOClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZ2lzdHJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMwOSlcIjp7dGFnOlwiKDAwNzAsMDMwOSlcIix2cjpcIlNRXCIsbmFtZTpcIk1hdHJpeFJlZ2lzdHJhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMwQSlcIjp7dGFnOlwiKDAwNzAsMDMwQSlcIix2cjpcIlNRXCIsbmFtZTpcIk1hdHJpeFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMwQylcIjp7dGFnOlwiKDAwNzAsMDMwQylcIix2cjpcIkNTXCIsbmFtZTpcIkZyYW1lT2ZSZWZlcmVuY2VUcmFuc2Zvcm1hdGlvbk1hdHJpeFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMzBEKVwiOnt0YWc6XCIoMDA3MCwwMzBEKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVnaXN0cmF0aW9uVHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAzMEYpXCI6e3RhZzpcIigwMDcwLDAzMEYpXCIsdnI6XCJTVFwiLG5hbWU6XCJGaWR1Y2lhbERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMxMClcIjp7dGFnOlwiKDAwNzAsMDMxMClcIix2cjpcIlNIXCIsbmFtZTpcIkZpZHVjaWFsSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAzMTEpXCI6e3RhZzpcIigwMDcwLDAzMTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJGaWR1Y2lhbElkZW50aWZpZXJDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMzEyKVwiOnt0YWc6XCIoMDA3MCwwMzEyKVwiLHZyOlwiRkRcIixuYW1lOlwiQ29udG91clVuY2VydGFpbnR5UmFkaXVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDMxNClcIjp7dGFnOlwiKDAwNzAsMDMxNClcIix2cjpcIlNRXCIsbmFtZTpcIlVzZWRGaWR1Y2lhbHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAzMTgpXCI6e3RhZzpcIigwMDcwLDAzMTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJHcmFwaGljQ29vcmRpbmF0ZXNEYXRhU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMzFBKVwiOnt0YWc6XCIoMDA3MCwwMzFBKVwiLHZyOlwiVUlcIixuYW1lOlwiRmlkdWNpYWxVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwMzFDKVwiOnt0YWc6XCIoMDA3MCwwMzFDKVwiLHZyOlwiU1FcIixuYW1lOlwiRmlkdWNpYWxTZXRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcwLDAzMUUpXCI6e3RhZzpcIigwMDcwLDAzMUUpXCIsdnI6XCJTUVwiLG5hbWU6XCJGaWR1Y2lhbFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDQwMSlcIjp7dGFnOlwiKDAwNzAsMDQwMSlcIix2cjpcIlVTXCIsbmFtZTpcIkdyYXBoaWNMYXllclJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDQwMilcIjp7dGFnOlwiKDAwNzAsMDQwMilcIix2cjpcIlNRXCIsbmFtZTpcIkJsZW5kaW5nU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwNDAzKVwiOnt0YWc6XCIoMDA3MCwwNDAzKVwiLHZyOlwiRkxcIixuYW1lOlwiUmVsYXRpdmVPcGFjaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzAsMDQwNClcIjp7dGFnOlwiKDAwNzAsMDQwNClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRTcGF0aWFsUmVnaXN0cmF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MCwwNDA1KVwiOnt0YWc6XCIoMDA3MCwwNDA1KVwiLHZyOlwiQ1NcIixuYW1lOlwiQmxlbmRpbmdQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwMDIpXCI6e3RhZzpcIigwMDcyLDAwMDIpXCIsdnI6XCJTSFwiLG5hbWU6XCJIYW5naW5nUHJvdG9jb2xOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAwNClcIjp7dGFnOlwiKDAwNzIsMDAwNClcIix2cjpcIkxPXCIsbmFtZTpcIkhhbmdpbmdQcm90b2NvbERlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAwNilcIjp7dGFnOlwiKDAwNzIsMDAwNilcIix2cjpcIkNTXCIsbmFtZTpcIkhhbmdpbmdQcm90b2NvbExldmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAwOClcIjp7dGFnOlwiKDAwNzIsMDAwOClcIix2cjpcIkxPXCIsbmFtZTpcIkhhbmdpbmdQcm90b2NvbENyZWF0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDBBKVwiOnt0YWc6XCIoMDA3MiwwMDBBKVwiLHZyOlwiRFRcIixuYW1lOlwiSGFuZ2luZ1Byb3RvY29sQ3JlYXRpb25EYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwMEMpXCI6e3RhZzpcIigwMDcyLDAwMEMpXCIsdnI6XCJTUVwiLG5hbWU6XCJIYW5naW5nUHJvdG9jb2xEZWZpbml0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDBFKVwiOnt0YWc6XCIoMDA3MiwwMDBFKVwiLHZyOlwiU1FcIixuYW1lOlwiSGFuZ2luZ1Byb3RvY29sVXNlcklkZW50aWZpY2F0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAxMClcIjp7dGFnOlwiKDAwNzIsMDAxMClcIix2cjpcIkxPXCIsbmFtZTpcIkhhbmdpbmdQcm90b2NvbFVzZXJHcm91cE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDEyKVwiOnt0YWc6XCIoMDA3MiwwMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiU291cmNlSGFuZ2luZ1Byb3RvY29sU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDE0KVwiOnt0YWc6XCIoMDA3MiwwMDE0KVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZQcmlvcnNSZWZlcmVuY2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAyMClcIjp7dGFnOlwiKDAwNzIsMDAyMClcIix2cjpcIlNRXCIsbmFtZTpcIkltYWdlU2V0c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAyMilcIjp7dGFnOlwiKDAwNzIsMDAyMilcIix2cjpcIlNRXCIsbmFtZTpcIkltYWdlU2V0U2VsZWN0b3JTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwMjQpXCI6e3RhZzpcIigwMDcyLDAwMjQpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbWFnZVNldFNlbGVjdG9yVXNhZ2VGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAyNilcIjp7dGFnOlwiKDAwNzIsMDAyNilcIix2cjpcIkFUXCIsbmFtZTpcIlNlbGVjdG9yQXR0cmlidXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAyOClcIjp7dGFnOlwiKDAwNzIsMDAyOClcIix2cjpcIlVTXCIsbmFtZTpcIlNlbGVjdG9yVmFsdWVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDMwKVwiOnt0YWc6XCIoMDA3MiwwMDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiVGltZUJhc2VkSW1hZ2VTZXRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDMyKVwiOnt0YWc6XCIoMDA3MiwwMDMyKVwiLHZyOlwiVVNcIixuYW1lOlwiSW1hZ2VTZXROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDM0KVwiOnt0YWc6XCIoMDA3MiwwMDM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW1hZ2VTZXRTZWxlY3RvckNhdGVnb3J5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDAzOClcIjp7dGFnOlwiKDAwNzIsMDAzOClcIix2cjpcIlVTXCIsbmFtZTpcIlJlbGF0aXZlVGltZVwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwM0EpXCI6e3RhZzpcIigwMDcyLDAwM0EpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWxhdGl2ZVRpbWVVbml0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwM0MpXCI6e3RhZzpcIigwMDcyLDAwM0MpXCIsdnI6XCJTU1wiLG5hbWU6XCJBYnN0cmFjdFByaW9yVmFsdWVcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDNFKVwiOnt0YWc6XCIoMDA3MiwwMDNFKVwiLHZyOlwiU1FcIixuYW1lOlwiQWJzdHJhY3RQcmlvckNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNDApXCI6e3RhZzpcIigwMDcyLDAwNDApXCIsdnI6XCJMT1wiLG5hbWU6XCJJbWFnZVNldExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDA1MClcIjp7dGFnOlwiKDAwNzIsMDA1MClcIix2cjpcIkNTXCIsbmFtZTpcIlNlbGVjdG9yQXR0cmlidXRlVlJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDUyKVwiOnt0YWc6XCIoMDA3MiwwMDUyKVwiLHZyOlwiQVRcIixuYW1lOlwiU2VsZWN0b3JTZXF1ZW5jZVBvaW50ZXJcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNTQpXCI6e3RhZzpcIigwMDcyLDAwNTQpXCIsdnI6XCJMT1wiLG5hbWU6XCJTZWxlY3RvclNlcXVlbmNlUG9pbnRlclByaXZhdGVDcmVhdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDU2KVwiOnt0YWc6XCIoMDA3MiwwMDU2KVwiLHZyOlwiTE9cIixuYW1lOlwiU2VsZWN0b3JBdHRyaWJ1dGVQcml2YXRlQ3JlYXRvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNjApXCI6e3RhZzpcIigwMDcyLDAwNjApXCIsdnI6XCJBVFwiLG5hbWU6XCJTZWxlY3RvckFUVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNjIpXCI6e3RhZzpcIigwMDcyLDAwNjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJTZWxlY3RvckNTVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNjQpXCI6e3RhZzpcIigwMDcyLDAwNjQpXCIsdnI6XCJJU1wiLG5hbWU6XCJTZWxlY3RvcklTVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNjYpXCI6e3RhZzpcIigwMDcyLDAwNjYpXCIsdnI6XCJMT1wiLG5hbWU6XCJTZWxlY3RvckxPVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNjgpXCI6e3RhZzpcIigwMDcyLDAwNjgpXCIsdnI6XCJMVFwiLG5hbWU6XCJTZWxlY3RvckxUVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDZBKVwiOnt0YWc6XCIoMDA3MiwwMDZBKVwiLHZyOlwiUE5cIixuYW1lOlwiU2VsZWN0b3JQTlZhbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDZDKVwiOnt0YWc6XCIoMDA3MiwwMDZDKVwiLHZyOlwiU0hcIixuYW1lOlwiU2VsZWN0b3JTSFZhbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMDZFKVwiOnt0YWc6XCIoMDA3MiwwMDZFKVwiLHZyOlwiU1RcIixuYW1lOlwiU2VsZWN0b3JTVFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDA3MClcIjp7dGFnOlwiKDAwNzIsMDA3MClcIix2cjpcIlVUXCIsbmFtZTpcIlNlbGVjdG9yVVRWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNzIpXCI6e3RhZzpcIigwMDcyLDAwNzIpXCIsdnI6XCJEU1wiLG5hbWU6XCJTZWxlY3RvckRTVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNzQpXCI6e3RhZzpcIigwMDcyLDAwNzQpXCIsdnI6XCJGRFwiLG5hbWU6XCJTZWxlY3RvckZEVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNzYpXCI6e3RhZzpcIigwMDcyLDAwNzYpXCIsdnI6XCJGTFwiLG5hbWU6XCJTZWxlY3RvckZMVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwNzgpXCI6e3RhZzpcIigwMDcyLDAwNzgpXCIsdnI6XCJVTFwiLG5hbWU6XCJTZWxlY3RvclVMVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwN0EpXCI6e3RhZzpcIigwMDcyLDAwN0EpXCIsdnI6XCJVU1wiLG5hbWU6XCJTZWxlY3RvclVTVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwN0MpXCI6e3RhZzpcIigwMDcyLDAwN0MpXCIsdnI6XCJTTFwiLG5hbWU6XCJTZWxlY3RvclNMVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwN0UpXCI6e3RhZzpcIigwMDcyLDAwN0UpXCIsdnI6XCJTU1wiLG5hbWU6XCJTZWxlY3RvclNTVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwN0YpXCI6e3RhZzpcIigwMDcyLDAwN0YpXCIsdnI6XCJVSVwiLG5hbWU6XCJTZWxlY3RvclVJVmFsdWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAwODApXCI6e3RhZzpcIigwMDcyLDAwODApXCIsdnI6XCJTUVwiLG5hbWU6XCJTZWxlY3RvckNvZGVTZXF1ZW5jZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDEwMClcIjp7dGFnOlwiKDAwNzIsMDEwMClcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mU2NyZWVuc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAxMDIpXCI6e3RhZzpcIigwMDcyLDAxMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJOb21pbmFsU2NyZWVuRGVmaW5pdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDEwNClcIjp7dGFnOlwiKDAwNzIsMDEwNClcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mVmVydGljYWxQaXhlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMTA2KVwiOnt0YWc6XCIoMDA3MiwwMTA2KVwiLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZIb3Jpem9udGFsUGl4ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDEwOClcIjp7dGFnOlwiKDAwNzIsMDEwOClcIix2cjpcIkZEXCIsbmFtZTpcIkRpc3BsYXlFbnZpcm9ubWVudFNwYXRpYWxQb3NpdGlvblwiLHZtOlwiNFwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAxMEEpXCI6e3RhZzpcIigwMDcyLDAxMEEpXCIsdnI6XCJVU1wiLG5hbWU6XCJTY3JlZW5NaW5pbXVtR3JheXNjYWxlQml0RGVwdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMTBDKVwiOnt0YWc6XCIoMDA3MiwwMTBDKVwiLHZyOlwiVVNcIixuYW1lOlwiU2NyZWVuTWluaW11bUNvbG9yQml0RGVwdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMTBFKVwiOnt0YWc6XCIoMDA3MiwwMTBFKVwiLHZyOlwiVVNcIixuYW1lOlwiQXBwbGljYXRpb25NYXhpbXVtUmVwYWludFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjAwKVwiOnt0YWc6XCIoMDA3MiwwMjAwKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlzcGxheVNldHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAyMDIpXCI6e3RhZzpcIigwMDcyLDAyMDIpXCIsdnI6XCJVU1wiLG5hbWU6XCJEaXNwbGF5U2V0TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDIwMylcIjp7dGFnOlwiKDAwNzIsMDIwMylcIix2cjpcIkxPXCIsbmFtZTpcIkRpc3BsYXlTZXRMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAyMDQpXCI6e3RhZzpcIigwMDcyLDAyMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJEaXNwbGF5U2V0UHJlc2VudGF0aW9uR3JvdXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjA2KVwiOnt0YWc6XCIoMDA3MiwwMjA2KVwiLHZyOlwiTE9cIixuYW1lOlwiRGlzcGxheVNldFByZXNlbnRhdGlvbkdyb3VwRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjA4KVwiOnt0YWc6XCIoMDA3MiwwMjA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiUGFydGlhbERhdGFEaXNwbGF5SGFuZGxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjEwKVwiOnt0YWc6XCIoMDA3MiwwMjEwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3luY2hyb25pemVkU2Nyb2xsaW5nU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjEyKVwiOnt0YWc6XCIoMDA3MiwwMjEyKVwiLHZyOlwiVVNcIixuYW1lOlwiRGlzcGxheVNldFNjcm9sbGluZ0dyb3VwXCIsdm06XCIyLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMjE0KVwiOnt0YWc6XCIoMDA3MiwwMjE0KVwiLHZyOlwiU1FcIixuYW1lOlwiTmF2aWdhdGlvbkluZGljYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDIxNilcIjp7dGFnOlwiKDAwNzIsMDIxNilcIix2cjpcIlVTXCIsbmFtZTpcIk5hdmlnYXRpb25EaXNwbGF5U2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDIxOClcIjp7dGFnOlwiKDAwNzIsMDIxOClcIix2cjpcIlVTXCIsbmFtZTpcIlJlZmVyZW5jZURpc3BsYXlTZXRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMzAwKVwiOnt0YWc6XCIoMDA3MiwwMzAwKVwiLHZyOlwiU1FcIixuYW1lOlwiSW1hZ2VCb3hlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMwMilcIjp7dGFnOlwiKDAwNzIsMDMwMilcIix2cjpcIlVTXCIsbmFtZTpcIkltYWdlQm94TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMwNClcIjp7dGFnOlwiKDAwNzIsMDMwNClcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlQm94TGF5b3V0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAzMDYpXCI6e3RhZzpcIigwMDcyLDAzMDYpXCIsdnI6XCJVU1wiLG5hbWU6XCJJbWFnZUJveFRpbGVIb3Jpem9udGFsRGltZW5zaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMwOClcIjp7dGFnOlwiKDAwNzIsMDMwOClcIix2cjpcIlVTXCIsbmFtZTpcIkltYWdlQm94VGlsZVZlcnRpY2FsRGltZW5zaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMxMClcIjp7dGFnOlwiKDAwNzIsMDMxMClcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlQm94U2Nyb2xsRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMxMilcIjp7dGFnOlwiKDAwNzIsMDMxMilcIix2cjpcIkNTXCIsbmFtZTpcIkltYWdlQm94U21hbGxTY3JvbGxUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDMxNClcIjp7dGFnOlwiKDAwNzIsMDMxNClcIix2cjpcIlVTXCIsbmFtZTpcIkltYWdlQm94U21hbGxTY3JvbGxBbW91bnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMzE2KVwiOnt0YWc6XCIoMDA3MiwwMzE2KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW1hZ2VCb3hMYXJnZVNjcm9sbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwMzE4KVwiOnt0YWc6XCIoMDA3MiwwMzE4KVwiLHZyOlwiVVNcIixuYW1lOlwiSW1hZ2VCb3hMYXJnZVNjcm9sbEFtb3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAzMjApXCI6e3RhZzpcIigwMDcyLDAzMjApXCIsdnI6XCJVU1wiLG5hbWU6XCJJbWFnZUJveE92ZXJsYXBQcmlvcml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDAzMzApXCI6e3RhZzpcIigwMDcyLDAzMzApXCIsdnI6XCJGRFwiLG5hbWU6XCJDaW5lUmVsYXRpdmVUb1JlYWxUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDQwMClcIjp7dGFnOlwiKDAwNzIsMDQwMClcIix2cjpcIlNRXCIsbmFtZTpcIkZpbHRlck9wZXJhdGlvbnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA0MDIpXCI6e3RhZzpcIigwMDcyLDA0MDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJGaWx0ZXJCeUNhdGVnb3J5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDQwNClcIjp7dGFnOlwiKDAwNzIsMDQwNClcIix2cjpcIkNTXCIsbmFtZTpcIkZpbHRlckJ5QXR0cmlidXRlUHJlc2VuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNDA2KVwiOnt0YWc6XCIoMDA3MiwwNDA2KVwiLHZyOlwiQ1NcIixuYW1lOlwiRmlsdGVyQnlPcGVyYXRvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA0MjApXCI6e3RhZzpcIigwMDcyLDA0MjApXCIsdnI6XCJVU1wiLG5hbWU6XCJTdHJ1Y3R1cmVkRGlzcGxheUJhY2tncm91bmRDSUVMYWJWYWx1ZVwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA0MjEpXCI6e3RhZzpcIigwMDcyLDA0MjEpXCIsdnI6XCJVU1wiLG5hbWU6XCJFbXB0eUltYWdlQm94Q0lFTGFiVmFsdWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNDIyKVwiOnt0YWc6XCIoMDA3MiwwNDIyKVwiLHZyOlwiU1FcIixuYW1lOlwiU3RydWN0dXJlZERpc3BsYXlJbWFnZUJveFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDQyNClcIjp7dGFnOlwiKDAwNzIsMDQyNClcIix2cjpcIlNRXCIsbmFtZTpcIlN0cnVjdHVyZWREaXNwbGF5VGV4dEJveFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDQyNylcIjp7dGFnOlwiKDAwNzIsMDQyNylcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRGaXJzdEZyYW1lU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNDMwKVwiOnt0YWc6XCIoMDA3MiwwNDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiSW1hZ2VCb3hTeW5jaHJvbml6YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA0MzIpXCI6e3RhZzpcIigwMDcyLDA0MzIpXCIsdnI6XCJVU1wiLG5hbWU6XCJTeW5jaHJvbml6ZWRJbWFnZUJveExpc3RcIix2bTpcIjItblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA0MzQpXCI6e3RhZzpcIigwMDcyLDA0MzQpXCIsdnI6XCJDU1wiLG5hbWU6XCJUeXBlT2ZTeW5jaHJvbml6YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNTAwKVwiOnt0YWc6XCIoMDA3MiwwNTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQmxlbmRpbmdPcGVyYXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDUxMClcIjp7dGFnOlwiKDAwNzIsMDUxMClcIix2cjpcIkNTXCIsbmFtZTpcIlJlZm9ybWF0dGluZ09wZXJhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNTEyKVwiOnt0YWc6XCIoMDA3MiwwNTEyKVwiLHZyOlwiRkRcIixuYW1lOlwiUmVmb3JtYXR0aW5nVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDUxNClcIjp7dGFnOlwiKDAwNzIsMDUxNClcIix2cjpcIkZEXCIsbmFtZTpcIlJlZm9ybWF0dGluZ0ludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDUxNilcIjp7dGFnOlwiKDAwNzIsMDUxNilcIix2cjpcIkNTXCIsbmFtZTpcIlJlZm9ybWF0dGluZ09wZXJhdGlvbkluaXRpYWxWaWV3RGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDUyMClcIjp7dGFnOlwiKDAwNzIsMDUyMClcIix2cjpcIkNTXCIsbmFtZTpcIlRocmVlRFJlbmRlcmluZ1R5cGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA2MDApXCI6e3RhZzpcIigwMDcyLDA2MDApXCIsdnI6XCJTUVwiLG5hbWU6XCJTb3J0aW5nT3BlcmF0aW9uc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDYwMilcIjp7dGFnOlwiKDAwNzIsMDYwMilcIix2cjpcIkNTXCIsbmFtZTpcIlNvcnRCeUNhdGVnb3J5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDYwNClcIjp7dGFnOlwiKDAwNzIsMDYwNClcIix2cjpcIkNTXCIsbmFtZTpcIlNvcnRpbmdEaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNzAwKVwiOnt0YWc6XCIoMDA3MiwwNzAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRGlzcGxheVNldFBhdGllbnRPcmllbnRhdGlvblwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA3MDIpXCI6e3RhZzpcIigwMDcyLDA3MDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJWT0lUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDcwNClcIjp7dGFnOlwiKDAwNzIsMDcwNClcIix2cjpcIkNTXCIsbmFtZTpcIlBzZXVkb0NvbG9yVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA3MDUpXCI6e3RhZzpcIigwMDcyLDA3MDUpXCIsdnI6XCJTUVwiLG5hbWU6XCJQc2V1ZG9Db2xvclBhbGV0dGVJbnN0YW5jZVJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDcwNilcIjp7dGFnOlwiKDAwNzIsMDcwNilcIix2cjpcIkNTXCIsbmFtZTpcIlNob3dHcmF5c2NhbGVJbnZlcnRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA3MTApXCI6e3RhZzpcIigwMDcyLDA3MTApXCIsdnI6XCJDU1wiLG5hbWU6XCJTaG93SW1hZ2VUcnVlU2l6ZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNzEyKVwiOnt0YWc6XCIoMDA3MiwwNzEyKVwiLHZyOlwiQ1NcIixuYW1lOlwiU2hvd0dyYXBoaWNBbm5vdGF0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDcyLDA3MTQpXCI6e3RhZzpcIigwMDcyLDA3MTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaG93UGF0aWVudERlbW9ncmFwaGljc0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNzE2KVwiOnt0YWc6XCIoMDA3MiwwNzE2KVwiLHZyOlwiQ1NcIixuYW1lOlwiU2hvd0FjcXVpc2l0aW9uVGVjaG5pcXVlc0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3MiwwNzE3KVwiOnt0YWc6XCIoMDA3MiwwNzE3KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGlzcGxheVNldEhvcml6b250YWxKdXN0aWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzIsMDcxOClcIjp7dGFnOlwiKDAwNzIsMDcxOClcIix2cjpcIkNTXCIsbmFtZTpcIkRpc3BsYXlTZXRWZXJ0aWNhbEp1c3RpZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwwMTIwKVwiOnt0YWc6XCIoMDA3NCwwMTIwKVwiLHZyOlwiRkRcIixuYW1lOlwiQ29udGludWF0aW9uU3RhcnRNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDAxMjEpXCI6e3RhZzpcIigwMDc0LDAxMjEpXCIsdnI6XCJGRFwiLG5hbWU6XCJDb250aW51YXRpb25FbmRNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMDApXCI6e3RhZzpcIigwMDc0LDEwMDApXCIsdnI6XCJDU1wiLG5hbWU6XCJQcm9jZWR1cmVTdGVwU3RhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDAyKVwiOnt0YWc6XCIoMDA3NCwxMDAyKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvY2VkdXJlU3RlcFByb2dyZXNzSW5mb3JtYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMDQpXCI6e3RhZzpcIigwMDc0LDEwMDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJQcm9jZWR1cmVTdGVwUHJvZ3Jlc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDA2KVwiOnt0YWc6XCIoMDA3NCwxMDA2KVwiLHZyOlwiU1RcIixuYW1lOlwiUHJvY2VkdXJlU3RlcFByb2dyZXNzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDA4KVwiOnt0YWc6XCIoMDA3NCwxMDA4KVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvY2VkdXJlU3RlcENvbW11bmljYXRpb25zVVJJU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDBBKVwiOnt0YWc6XCIoMDA3NCwxMDBBKVwiLHZyOlwiVVJcIixuYW1lOlwiQ29udGFjdFVSSVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMEMpXCI6e3RhZzpcIigwMDc0LDEwMEMpXCIsdnI6XCJMT1wiLG5hbWU6XCJDb250YWN0RGlzcGxheU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDBFKVwiOnt0YWc6XCIoMDA3NCwxMDBFKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJvY2VkdXJlU3RlcERpc2NvbnRpbnVhdGlvblJlYXNvbkNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMjApXCI6e3RhZzpcIigwMDc0LDEwMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJCZWFtVGFza1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTAyMilcIjp7dGFnOlwiKDAwNzQsMTAyMilcIix2cjpcIkNTXCIsbmFtZTpcIkJlYW1UYXNrVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMjUpXCI6e3RhZzpcIigwMDc0LDEwMjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJBdXRvc2VxdWVuY2VGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTAyNilcIjp7dGFnOlwiKDAwNzQsMTAyNilcIix2cjpcIkZEXCIsbmFtZTpcIlRhYmxlVG9wVmVydGljYWxBZGp1c3RlZFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTAyNylcIjp7dGFnOlwiKDAwNzQsMTAyNylcIix2cjpcIkZEXCIsbmFtZTpcIlRhYmxlVG9wTG9uZ2l0dWRpbmFsQWRqdXN0ZWRQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMjgpXCI6e3RhZzpcIigwMDc0LDEwMjgpXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWJsZVRvcExhdGVyYWxBZGp1c3RlZFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTAyQSlcIjp7dGFnOlwiKDAwNzQsMTAyQSlcIix2cjpcIkZEXCIsbmFtZTpcIlBhdGllbnRTdXBwb3J0QWRqdXN0ZWRBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMkIpXCI6e3RhZzpcIigwMDc0LDEwMkIpXCIsdnI6XCJGRFwiLG5hbWU6XCJUYWJsZVRvcEVjY2VudHJpY0FkanVzdGVkQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDJDKVwiOnt0YWc6XCIoMDA3NCwxMDJDKVwiLHZyOlwiRkRcIixuYW1lOlwiVGFibGVUb3BQaXRjaEFkanVzdGVkQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDJEKVwiOnt0YWc6XCIoMDA3NCwxMDJEKVwiLHZyOlwiRkRcIixuYW1lOlwiVGFibGVUb3BSb2xsQWRqdXN0ZWRBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwMzApXCI6e3RhZzpcIigwMDc0LDEwMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJEZWxpdmVyeVZlcmlmaWNhdGlvbkltYWdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDMyKVwiOnt0YWc6XCIoMDA3NCwxMDMyKVwiLHZyOlwiQ1NcIixuYW1lOlwiVmVyaWZpY2F0aW9uSW1hZ2VUaW1pbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDM0KVwiOnt0YWc6XCIoMDA3NCwxMDM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRG91YmxlRXhwb3N1cmVGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTAzNilcIjp7dGFnOlwiKDAwNzQsMTAzNilcIix2cjpcIkNTXCIsbmFtZTpcIkRvdWJsZUV4cG9zdXJlT3JkZXJpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDQwKVwiOnt0YWc6XCIoMDA3NCwxMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVsYXRlZFJlZmVyZW5jZVJUSW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwNDIpXCI6e3RhZzpcIigwMDc0LDEwNDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJHZW5lcmFsTWFjaGluZVZlcmlmaWNhdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTA0NClcIjp7dGFnOlwiKDAwNzQsMTA0NClcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnZlbnRpb25hbE1hY2hpbmVWZXJpZmljYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwNDYpXCI6e3RhZzpcIigwMDc0LDEwNDYpXCIsdnI6XCJTUVwiLG5hbWU6XCJJb25NYWNoaW5lVmVyaWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDQ4KVwiOnt0YWc6XCIoMDA3NCwxMDQ4KVwiLHZyOlwiU1FcIixuYW1lOlwiRmFpbGVkQXR0cmlidXRlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTA0QSlcIjp7dGFnOlwiKDAwNzQsMTA0QSlcIix2cjpcIlNRXCIsbmFtZTpcIk92ZXJyaWRkZW5BdHRyaWJ1dGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDRDKVwiOnt0YWc6XCIoMDA3NCwxMDRDKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udmVudGlvbmFsQ29udHJvbFBvaW50VmVyaWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDRFKVwiOnt0YWc6XCIoMDA3NCwxMDRFKVwiLHZyOlwiU1FcIixuYW1lOlwiSW9uQ29udHJvbFBvaW50VmVyaWZpY2F0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDUwKVwiOnt0YWc6XCIoMDA3NCwxMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiQXR0cmlidXRlT2NjdXJyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTA1MilcIjp7dGFnOlwiKDAwNzQsMTA1MilcIix2cjpcIkFUXCIsbmFtZTpcIkF0dHJpYnV0ZU9jY3VycmVuY2VQb2ludGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTA1NClcIjp7dGFnOlwiKDAwNzQsMTA1NClcIix2cjpcIlVMXCIsbmFtZTpcIkF0dHJpYnV0ZUl0ZW1TZWxlY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEwNTYpXCI6e3RhZzpcIigwMDc0LDEwNTYpXCIsdnI6XCJMT1wiLG5hbWU6XCJBdHRyaWJ1dGVPY2N1cnJlbmNlUHJpdmF0ZUNyZWF0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMDU3KVwiOnt0YWc6XCIoMDA3NCwxMDU3KVwiLHZyOlwiSVNcIixuYW1lOlwiU2VsZWN0b3JTZXF1ZW5jZVBvaW50ZXJJdGVtc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTIwMClcIjp7dGFnOlwiKDAwNzQsMTIwMClcIix2cjpcIkNTXCIsbmFtZTpcIlNjaGVkdWxlZFByb2NlZHVyZVN0ZXBQcmlvcml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyMDIpXCI6e3RhZzpcIigwMDc0LDEyMDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJXb3JrbGlzdExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTIwNClcIjp7dGFnOlwiKDAwNzQsMTIwNClcIix2cjpcIkxPXCIsbmFtZTpcIlByb2NlZHVyZVN0ZXBMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyMTApXCI6e3RhZzpcIigwMDc0LDEyMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJTY2hlZHVsZWRQcm9jZXNzaW5nUGFyYW1ldGVyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTIxMilcIjp7dGFnOlwiKDAwNzQsMTIxMilcIix2cjpcIlNRXCIsbmFtZTpcIlBlcmZvcm1lZFByb2Nlc3NpbmdQYXJhbWV0ZXJzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMjE2KVwiOnt0YWc6XCIoMDA3NCwxMjE2KVwiLHZyOlwiU1FcIixuYW1lOlwiVW5pZmllZFByb2NlZHVyZVN0ZXBQZXJmb3JtZWRQcm9jZWR1cmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyMjQpXCI6e3RhZzpcIigwMDc0LDEyMjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXBsYWNlZFByb2NlZHVyZVN0ZXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyMzApXCI6e3RhZzpcIigwMDc0LDEyMzApXCIsdnI6XCJMT1wiLG5hbWU6XCJEZWxldGlvbkxvY2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMjM0KVwiOnt0YWc6XCIoMDA3NCwxMjM0KVwiLHZyOlwiQUVcIixuYW1lOlwiUmVjZWl2aW5nQUVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMjM2KVwiOnt0YWc6XCIoMDA3NCwxMjM2KVwiLHZyOlwiQUVcIixuYW1lOlwiUmVxdWVzdGluZ0FFXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzQsMTIzOClcIjp7dGFnOlwiKDAwNzQsMTIzOClcIix2cjpcIkxUXCIsbmFtZTpcIlJlYXNvbkZvckNhbmNlbGxhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyNDIpXCI6e3RhZzpcIigwMDc0LDEyNDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJTQ1BTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMjQ0KVwiOnt0YWc6XCIoMDA3NCwxMjQ0KVwiLHZyOlwiQ1NcIixuYW1lOlwiU3Vic2NyaXB0aW9uTGlzdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEyNDYpXCI6e3RhZzpcIigwMDc0LDEyNDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJVbmlmaWVkUHJvY2VkdXJlU3RlcExpc3RTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMzI0KVwiOnt0YWc6XCIoMDA3NCwxMzI0KVwiLHZyOlwiVUxcIixuYW1lOlwiQmVhbU9yZGVySW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NCwxMzM4KVwiOnt0YWc6XCIoMDA3NCwxMzM4KVwiLHZyOlwiRkRcIixuYW1lOlwiRG91YmxlRXhwb3N1cmVNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc0LDEzM0EpXCI6e3RhZzpcIigwMDc0LDEzM0EpXCIsdnI6XCJGRFwiLG5hbWU6XCJEb3VibGVFeHBvc3VyZUZpZWxkRGVsdGFcIix2bTpcIjRcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDAxKVwiOnt0YWc6XCIoMDA3NiwwMDAxKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1wbGFudEFzc2VtYmx5VGVtcGxhdGVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAwMylcIjp7dGFnOlwiKDAwNzYsMDAwMylcIix2cjpcIkxPXCIsbmFtZTpcIkltcGxhbnRBc3NlbWJseVRlbXBsYXRlSXNzdWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAwNilcIjp7dGFnOlwiKDAwNzYsMDAwNilcIix2cjpcIkxPXCIsbmFtZTpcIkltcGxhbnRBc3NlbWJseVRlbXBsYXRlVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwMDgpXCI6e3RhZzpcIigwMDc2LDAwMDgpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZXBsYWNlZEltcGxhbnRBc3NlbWJseVRlbXBsYXRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDBBKVwiOnt0YWc6XCIoMDA3NiwwMDBBKVwiLHZyOlwiQ1NcIixuYW1lOlwiSW1wbGFudEFzc2VtYmx5VGVtcGxhdGVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAwQylcIjp7dGFnOlwiKDAwNzYsMDAwQylcIix2cjpcIlNRXCIsbmFtZTpcIk9yaWdpbmFsSW1wbGFudEFzc2VtYmx5VGVtcGxhdGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwMEUpXCI6e3RhZzpcIigwMDc2LDAwMEUpXCIsdnI6XCJTUVwiLG5hbWU6XCJEZXJpdmF0aW9uSW1wbGFudEFzc2VtYmx5VGVtcGxhdGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwMTApXCI6e3RhZzpcIigwMDc2LDAwMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbXBsYW50QXNzZW1ibHlUZW1wbGF0ZVRhcmdldEFuYXRvbXlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwMjApXCI6e3RhZzpcIigwMDc2LDAwMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJQcm9jZWR1cmVUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAzMClcIjp7dGFnOlwiKDAwNzYsMDAzMClcIix2cjpcIkxPXCIsbmFtZTpcIlN1cmdpY2FsVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAzMilcIjp7dGFnOlwiKDAwNzYsMDAzMilcIix2cjpcIlNRXCIsbmFtZTpcIkNvbXBvbmVudFR5cGVzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDM0KVwiOnt0YWc6XCIoMDA3NiwwMDM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29tcG9uZW50VHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwMzYpXCI6e3RhZzpcIigwMDc2LDAwMzYpXCIsdnI6XCJDU1wiLG5hbWU6XCJFeGNsdXNpdmVDb21wb25lbnRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDAzOClcIjp7dGFnOlwiKDAwNzYsMDAzOClcIix2cjpcIkNTXCIsbmFtZTpcIk1hbmRhdG9yeUNvbXBvbmVudFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDQwKVwiOnt0YWc6XCIoMDA3NiwwMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29tcG9uZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDU1KVwiOnt0YWc6XCIoMDA3NiwwMDU1KVwiLHZyOlwiVVNcIixuYW1lOlwiQ29tcG9uZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMDYwKVwiOnt0YWc6XCIoMDA3NiwwMDYwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29tcG9uZW50QXNzZW1ibHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc2LDAwNzApXCI6e3RhZzpcIigwMDc2LDAwNzApXCIsdnI6XCJVU1wiLG5hbWU6XCJDb21wb25lbnQxUmVmZXJlbmNlZElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDA4MClcIjp7dGFnOlwiKDAwNzYsMDA4MClcIix2cjpcIlVTXCIsbmFtZTpcIkNvbXBvbmVudDFSZWZlcmVuY2VkTWF0aW5nRmVhdHVyZVNldElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDA5MClcIjp7dGFnOlwiKDAwNzYsMDA5MClcIix2cjpcIlVTXCIsbmFtZTpcIkNvbXBvbmVudDFSZWZlcmVuY2VkTWF0aW5nRmVhdHVyZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzYsMDBBMClcIjp7dGFnOlwiKDAwNzYsMDBBMClcIix2cjpcIlVTXCIsbmFtZTpcIkNvbXBvbmVudDJSZWZlcmVuY2VkSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMEIwKVwiOnt0YWc6XCIoMDA3NiwwMEIwKVwiLHZyOlwiVVNcIixuYW1lOlwiQ29tcG9uZW50MlJlZmVyZW5jZWRNYXRpbmdGZWF0dXJlU2V0SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3NiwwMEMwKVwiOnt0YWc6XCIoMDA3NiwwMEMwKVwiLHZyOlwiVVNcIixuYW1lOlwiQ29tcG9uZW50MlJlZmVyZW5jZWRNYXRpbmdGZWF0dXJlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3OCwwMDAxKVwiOnt0YWc6XCIoMDA3OCwwMDAxKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1wbGFudFRlbXBsYXRlR3JvdXBOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDAxMClcIjp7dGFnOlwiKDAwNzgsMDAxMClcIix2cjpcIlNUXCIsbmFtZTpcIkltcGxhbnRUZW1wbGF0ZUdyb3VwRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3OCwwMDIwKVwiOnt0YWc6XCIoMDA3OCwwMDIwKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1wbGFudFRlbXBsYXRlR3JvdXBJc3N1ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3OCwwMDI0KVwiOnt0YWc6XCIoMDA3OCwwMDI0KVwiLHZyOlwiTE9cIixuYW1lOlwiSW1wbGFudFRlbXBsYXRlR3JvdXBWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDAyNilcIjp7dGFnOlwiKDAwNzgsMDAyNilcIix2cjpcIlNRXCIsbmFtZTpcIlJlcGxhY2VkSW1wbGFudFRlbXBsYXRlR3JvdXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc4LDAwMjgpXCI6e3RhZzpcIigwMDc4LDAwMjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJJbXBsYW50VGVtcGxhdGVHcm91cFRhcmdldEFuYXRvbXlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc4LDAwMkEpXCI6e3RhZzpcIigwMDc4LDAwMkEpXCIsdnI6XCJTUVwiLG5hbWU6XCJJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlcnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc4LDAwMkUpXCI6e3RhZzpcIigwMDc4LDAwMkUpXCIsdnI6XCJVU1wiLG5hbWU6XCJJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDA1MClcIjp7dGFnOlwiKDAwNzgsMDA1MClcIix2cjpcIkZEXCIsbmFtZTpcIlRocmVlREltcGxhbnRUZW1wbGF0ZUdyb3VwTWVtYmVyTWF0Y2hpbmdQb2ludFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc4LDAwNjApXCI6e3RhZzpcIigwMDc4LDAwNjApXCIsdnI6XCJGRFwiLG5hbWU6XCJUaHJlZURJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlck1hdGNoaW5nQXhlc1wiLHZtOlwiOVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDc4LDAwNzApXCI6e3RhZzpcIigwMDc4LDAwNzApXCIsdnI6XCJTUVwiLG5hbWU6XCJJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlck1hdGNoaW5nMkRDb29yZGluYXRlc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDA5MClcIjp7dGFnOlwiKDAwNzgsMDA5MClcIix2cjpcIkZEXCIsbmFtZTpcIlR3b0RJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlck1hdGNoaW5nUG9pbnRcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3OCwwMEEwKVwiOnt0YWc6XCIoMDA3OCwwMEEwKVwiLHZyOlwiRkRcIixuYW1lOlwiVHdvREltcGxhbnRUZW1wbGF0ZUdyb3VwTWVtYmVyTWF0Y2hpbmdBeGVzXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDBCMClcIjp7dGFnOlwiKDAwNzgsMDBCMClcIix2cjpcIlNRXCIsbmFtZTpcIkltcGxhbnRUZW1wbGF0ZUdyb3VwVmFyaWF0aW9uRGltZW5zaW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA3OCwwMEIyKVwiOnt0YWc6XCIoMDA3OCwwMEIyKVwiLHZyOlwiTE9cIixuYW1lOlwiSW1wbGFudFRlbXBsYXRlR3JvdXBWYXJpYXRpb25EaW1lbnNpb25OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDBCNClcIjp7dGFnOlwiKDAwNzgsMDBCNClcIix2cjpcIlNRXCIsbmFtZTpcIkltcGxhbnRUZW1wbGF0ZUdyb3VwVmFyaWF0aW9uRGltZW5zaW9uUmFua1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDBCNilcIjp7dGFnOlwiKDAwNzgsMDBCNilcIix2cjpcIlVTXCIsbmFtZTpcIlJlZmVyZW5jZWRJbXBsYW50VGVtcGxhdGVHcm91cE1lbWJlcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwNzgsMDBCOClcIjp7dGFnOlwiKDAwNzgsMDBCOClcIix2cjpcIlVTXCIsbmFtZTpcIkltcGxhbnRUZW1wbGF0ZUdyb3VwVmFyaWF0aW9uRGltZW5zaW9uUmFua1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDgwLDAwMDEpXCI6e3RhZzpcIigwMDgwLDAwMDEpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdXJmYWNlU2NhbkFjcXVpc2l0aW9uVHlwZUNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDgwLDAwMDIpXCI6e3RhZzpcIigwMDgwLDAwMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJTdXJmYWNlU2Nhbk1vZGVDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDAzKVwiOnt0YWc6XCIoMDA4MCwwMDAzKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVnaXN0cmF0aW9uTWV0aG9kQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwODAsMDAwNClcIjp7dGFnOlwiKDAwODAsMDAwNClcIix2cjpcIkZEXCIsbmFtZTpcIlNob3REdXJhdGlvblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDA1KVwiOnt0YWc6XCIoMDA4MCwwMDA1KVwiLHZyOlwiRkRcIixuYW1lOlwiU2hvdE9mZnNldFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDA2KVwiOnt0YWc6XCIoMDA4MCwwMDA2KVwiLHZyOlwiVVNcIixuYW1lOlwiU3VyZmFjZVBvaW50UHJlc2VudGF0aW9uVmFsdWVEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDA3KVwiOnt0YWc6XCIoMDA4MCwwMDA3KVwiLHZyOlwiVVNcIixuYW1lOlwiU3VyZmFjZVBvaW50Q29sb3JDSUVMYWJWYWx1ZURhdGFcIix2bTpcIjMtM25cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDA4KVwiOnt0YWc6XCIoMDA4MCwwMDA4KVwiLHZyOlwiU1FcIixuYW1lOlwiVVZNYXBwaW5nU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDA5KVwiOnt0YWc6XCIoMDA4MCwwMDA5KVwiLHZyOlwiU0hcIixuYW1lOlwiVGV4dHVyZUxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwODAsMDAxMClcIjp7dGFnOlwiKDAwODAsMDAxMClcIix2cjpcIk9GXCIsbmFtZTpcIlVWYWx1ZURhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDgwLDAwMTEpXCI6e3RhZzpcIigwMDgwLDAwMTEpXCIsdnI6XCJPRlwiLG5hbWU6XCJWVmFsdWVEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4MCwwMDEyKVwiOnt0YWc6XCIoMDA4MCwwMDEyKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFRleHR1cmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDgwLDAwMTMpXCI6e3RhZzpcIigwMDgwLDAwMTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkU3VyZmFjZURhdGFTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDg4LDAxMzApXCI6e3RhZzpcIigwMDg4LDAxMzApXCIsdnI6XCJTSFwiLG5hbWU6XCJTdG9yYWdlTWVkaWFGaWxlU2V0SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDA4OCwwMTQwKVwiOnt0YWc6XCIoMDA4OCwwMTQwKVwiLHZyOlwiVUlcIixuYW1lOlwiU3RvcmFnZU1lZGlhRmlsZVNldFVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMDg4LDAyMDApXCI6e3RhZzpcIigwMDg4LDAyMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJJY29uSW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMTAwLDA0MTApXCI6e3RhZzpcIigwMTAwLDA0MTApXCIsdnI6XCJDU1wiLG5hbWU6XCJTT1BJbnN0YW5jZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwMTAwLDA0MjApXCI6e3RhZzpcIigwMTAwLDA0MjApXCIsdnI6XCJEVFwiLG5hbWU6XCJTT1BBdXRob3JpemF0aW9uRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDEwMCwwNDI0KVwiOnt0YWc6XCIoMDEwMCwwNDI0KVwiLHZyOlwiTFRcIixuYW1lOlwiU09QQXV0aG9yaXphdGlvbkNvbW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDEwMCwwNDI2KVwiOnt0YWc6XCIoMDEwMCwwNDI2KVwiLHZyOlwiTE9cIixuYW1lOlwiQXV0aG9yaXphdGlvbkVxdWlwbWVudENlcnRpZmljYXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMDA1KVwiOnt0YWc6XCIoMDQwMCwwMDA1KVwiLHZyOlwiVVNcIixuYW1lOlwiTUFDSUROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMDEwKVwiOnt0YWc6XCIoMDQwMCwwMDEwKVwiLHZyOlwiVUlcIixuYW1lOlwiTUFDQ2FsY3VsYXRpb25UcmFuc2ZlclN5bnRheFVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDAwMTUpXCI6e3RhZzpcIigwNDAwLDAwMTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJNQUNBbGdvcml0aG1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMDIwKVwiOnt0YWc6XCIoMDQwMCwwMDIwKVwiLHZyOlwiQVRcIixuYW1lOlwiRGF0YUVsZW1lbnRzU2lnbmVkXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMTAwKVwiOnt0YWc6XCIoMDQwMCwwMTAwKVwiLHZyOlwiVUlcIixuYW1lOlwiRGlnaXRhbFNpZ25hdHVyZVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDAxMDUpXCI6e3RhZzpcIigwNDAwLDAxMDUpXCIsdnI6XCJEVFwiLG5hbWU6XCJEaWdpdGFsU2lnbmF0dXJlRGF0ZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMTEwKVwiOnt0YWc6XCIoMDQwMCwwMTEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ2VydGlmaWNhdGVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDA0MDAsMDExNSlcIjp7dGFnOlwiKDA0MDAsMDExNSlcIix2cjpcIk9CXCIsbmFtZTpcIkNlcnRpZmljYXRlT2ZTaWduZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMTIwKVwiOnt0YWc6XCIoMDQwMCwwMTIwKVwiLHZyOlwiT0JcIixuYW1lOlwiU2lnbmF0dXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDA0MDAsMDMwNSlcIjp7dGFnOlwiKDA0MDAsMDMwNSlcIix2cjpcIkNTXCIsbmFtZTpcIkNlcnRpZmllZFRpbWVzdGFtcFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwMzEwKVwiOnt0YWc6XCIoMDQwMCwwMzEwKVwiLHZyOlwiT0JcIixuYW1lOlwiQ2VydGlmaWVkVGltZXN0YW1wXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDA0MDAsMDQwMSlcIjp7dGFnOlwiKDA0MDAsMDQwMSlcIix2cjpcIlNRXCIsbmFtZTpcIkRpZ2l0YWxTaWduYXR1cmVQdXJwb3NlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDA0MDAsMDQwMilcIjp7dGFnOlwiKDA0MDAsMDQwMilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWREaWdpdGFsU2lnbmF0dXJlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwNDAzKVwiOnt0YWc6XCIoMDQwMCwwNDAzKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFNPUEluc3RhbmNlTUFDU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwNDA0KVwiOnt0YWc6XCIoMDQwMCwwNDA0KVwiLHZyOlwiT0JcIixuYW1lOlwiTUFDXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDA0MDAsMDUwMClcIjp7dGFnOlwiKDA0MDAsMDUwMClcIix2cjpcIlNRXCIsbmFtZTpcIkVuY3J5cHRlZEF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1MTApXCI6e3RhZzpcIigwNDAwLDA1MTApXCIsdnI6XCJVSVwiLG5hbWU6XCJFbmNyeXB0ZWRDb250ZW50VHJhbnNmZXJTeW50YXhVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwNTIwKVwiOnt0YWc6XCIoMDQwMCwwNTIwKVwiLHZyOlwiT0JcIixuYW1lOlwiRW5jcnlwdGVkQ29udGVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1NTApXCI6e3RhZzpcIigwNDAwLDA1NTApXCIsdnI6XCJTUVwiLG5hbWU6XCJNb2RpZmllZEF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1NjEpXCI6e3RhZzpcIigwNDAwLDA1NjEpXCIsdnI6XCJTUVwiLG5hbWU6XCJPcmlnaW5hbEF0dHJpYnV0ZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1NjIpXCI6e3RhZzpcIigwNDAwLDA1NjIpXCIsdnI6XCJEVFwiLG5hbWU6XCJBdHRyaWJ1dGVNb2RpZmljYXRpb25EYXRlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1NjMpXCI6e3RhZzpcIigwNDAwLDA1NjMpXCIsdnI6XCJMT1wiLG5hbWU6XCJNb2RpZnlpbmdTeXN0ZW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMDQwMCwwNTY0KVwiOnt0YWc6XCIoMDQwMCwwNTY0KVwiLHZyOlwiTE9cIixuYW1lOlwiU291cmNlT2ZQcmV2aW91c1ZhbHVlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigwNDAwLDA1NjUpXCI6e3RhZzpcIigwNDAwLDA1NjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJSZWFzb25Gb3JUaGVBdHRyaWJ1dGVNb2RpZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAwMCwwMDEwKVwiOnt0YWc6XCIoMjAwMCwwMDEwKVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZDb3BpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAwMCwwMDFFKVwiOnt0YWc6XCIoMjAwMCwwMDFFKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJpbnRlckNvbmZpZ3VyYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDAwLDAwMjApXCI6e3RhZzpcIigyMDAwLDAwMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJQcmludFByaW9yaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMDAsMDAzMClcIjp7dGFnOlwiKDIwMDAsMDAzMClcIix2cjpcIkNTXCIsbmFtZTpcIk1lZGl1bVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAwMCwwMDQwKVwiOnt0YWc6XCIoMjAwMCwwMDQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRmlsbURlc3RpbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMDAsMDA1MClcIjp7dGFnOlwiKDIwMDAsMDA1MClcIix2cjpcIkxPXCIsbmFtZTpcIkZpbG1TZXNzaW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAwMCwwMDYwKVwiOnt0YWc6XCIoMjAwMCwwMDYwKVwiLHZyOlwiSVNcIixuYW1lOlwiTWVtb3J5QWxsb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDAwLDAwNjEpXCI6e3RhZzpcIigyMDAwLDAwNjEpXCIsdnI6XCJJU1wiLG5hbWU6XCJNYXhpbXVtTWVtb3J5QWxsb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDAwLDAwQTApXCI6e3RhZzpcIigyMDAwLDAwQTApXCIsdnI6XCJVU1wiLG5hbWU6XCJNZW1vcnlCaXREZXB0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDAwLDAwQTEpXCI6e3RhZzpcIigyMDAwLDAwQTEpXCIsdnI6XCJVU1wiLG5hbWU6XCJQcmludGluZ0JpdERlcHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMDAsMDBBMilcIjp7dGFnOlwiKDIwMDAsMDBBMilcIix2cjpcIlNRXCIsbmFtZTpcIk1lZGlhSW5zdGFsbGVkU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAwMCwwMEE0KVwiOnt0YWc6XCIoMjAwMCwwMEE0KVwiLHZyOlwiU1FcIixuYW1lOlwiT3RoZXJNZWRpYUF2YWlsYWJsZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMDAsMDBBOClcIjp7dGFnOlwiKDIwMDAsMDBBOClcIix2cjpcIlNRXCIsbmFtZTpcIlN1cHBvcnRlZEltYWdlRGlzcGxheUZvcm1hdHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDAwLDA1MDApXCI6e3RhZzpcIigyMDAwLDA1MDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkRmlsbUJveFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDAxMClcIjp7dGFnOlwiKDIwMTAsMDAxMClcIix2cjpcIlNUXCIsbmFtZTpcIkltYWdlRGlzcGxheUZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAwMzApXCI6e3RhZzpcIigyMDEwLDAwMzApXCIsdnI6XCJDU1wiLG5hbWU6XCJBbm5vdGF0aW9uRGlzcGxheUZvcm1hdElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDA0MClcIjp7dGFnOlwiKDIwMTAsMDA0MClcIix2cjpcIkNTXCIsbmFtZTpcIkZpbG1PcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAwNTApXCI6e3RhZzpcIigyMDEwLDAwNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJGaWxtU2l6ZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDA1MilcIjp7dGFnOlwiKDIwMTAsMDA1MilcIix2cjpcIkNTXCIsbmFtZTpcIlByaW50ZXJSZXNvbHV0aW9uSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMDU0KVwiOnt0YWc6XCIoMjAxMCwwMDU0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRGVmYXVsdFByaW50ZXJSZXNvbHV0aW9uSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMDYwKVwiOnt0YWc6XCIoMjAxMCwwMDYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiTWFnbmlmaWNhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMDgwKVwiOnt0YWc6XCIoMjAxMCwwMDgwKVwiLHZyOlwiQ1NcIixuYW1lOlwiU21vb3RoaW5nVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAwQTYpXCI6e3RhZzpcIigyMDEwLDAwQTYpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWZhdWx0TWFnbmlmaWNhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMEE3KVwiOnt0YWc6XCIoMjAxMCwwMEE3KVwiLHZyOlwiQ1NcIixuYW1lOlwiT3RoZXJNYWduaWZpY2F0aW9uVHlwZXNBdmFpbGFibGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAwQTgpXCI6e3RhZzpcIigyMDEwLDAwQTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWZhdWx0U21vb3RoaW5nVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAwQTkpXCI6e3RhZzpcIigyMDEwLDAwQTkpXCIsdnI6XCJDU1wiLG5hbWU6XCJPdGhlclNtb290aGluZ1R5cGVzQXZhaWxhYmxlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMTAwKVwiOnt0YWc6XCIoMjAxMCwwMTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQm9yZGVyRGVuc2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAxMTApXCI6e3RhZzpcIigyMDEwLDAxMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJFbXB0eUltYWdlRGVuc2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAxMjApXCI6e3RhZzpcIigyMDEwLDAxMjApXCIsdnI6XCJVU1wiLG5hbWU6XCJNaW5EZW5zaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDEzMClcIjp7dGFnOlwiKDIwMTAsMDEzMClcIix2cjpcIlVTXCIsbmFtZTpcIk1heERlbnNpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMTQwKVwiOnt0YWc6XCIoMjAxMCwwMTQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiVHJpbVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAxNTApXCI6e3RhZzpcIigyMDEwLDAxNTApXCIsdnI6XCJTVFwiLG5hbWU6XCJDb25maWd1cmF0aW9uSW5mb3JtYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMTUyKVwiOnt0YWc6XCIoMjAxMCwwMTUyKVwiLHZyOlwiTFRcIixuYW1lOlwiQ29uZmlndXJhdGlvbkluZm9ybWF0aW9uRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMTU0KVwiOnt0YWc6XCIoMjAxMCwwMTU0KVwiLHZyOlwiSVNcIixuYW1lOlwiTWF4aW11bUNvbGxhdGVkRmlsbXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAxMCwwMTVFKVwiOnt0YWc6XCIoMjAxMCwwMTVFKVwiLHZyOlwiVVNcIixuYW1lOlwiSWxsdW1pbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDE2MClcIjp7dGFnOlwiKDIwMTAsMDE2MClcIix2cjpcIlVTXCIsbmFtZTpcIlJlZmxlY3RlZEFtYmllbnRMaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDEwLDAzNzYpXCI6e3RhZzpcIigyMDEwLDAzNzYpXCIsdnI6XCJEU1wiLG5hbWU6XCJQcmludGVyUGl4ZWxTcGFjaW5nXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDUwMClcIjp7dGFnOlwiKDIwMTAsMDUwMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRGaWxtU2Vzc2lvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDUxMClcIjp7dGFnOlwiKDIwMTAsMDUxMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRJbWFnZUJveFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMTAsMDUyMClcIjp7dGFnOlwiKDIwMTAsMDUyMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRCYXNpY0Fubm90YXRpb25Cb3hTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDIwLDAwMTApXCI6e3RhZzpcIigyMDIwLDAwMTApXCIsdnI6XCJVU1wiLG5hbWU6XCJJbWFnZUJveFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMjAsMDAyMClcIjp7dGFnOlwiKDIwMjAsMDAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlBvbGFyaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMjAsMDAzMClcIjp7dGFnOlwiKDIwMjAsMDAzMClcIix2cjpcIkRTXCIsbmFtZTpcIlJlcXVlc3RlZEltYWdlU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDIwLDAwNDApXCI6e3RhZzpcIigyMDIwLDAwNDApXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXF1ZXN0ZWREZWNpbWF0ZUNyb3BCZWhhdmlvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDIwLDAwNTApXCI6e3RhZzpcIigyMDIwLDAwNTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSZXF1ZXN0ZWRSZXNvbHV0aW9uSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAyMCwwMEEwKVwiOnt0YWc6XCIoMjAyMCwwMEEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVxdWVzdGVkSW1hZ2VTaXplRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDIwLDAwQTIpXCI6e3RhZzpcIigyMDIwLDAwQTIpXCIsdnI6XCJDU1wiLG5hbWU6XCJEZWNpbWF0ZUNyb3BSZXN1bHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjAyMCwwMTEwKVwiOnt0YWc6XCIoMjAyMCwwMTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiQmFzaWNHcmF5c2NhbGVJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMjAsMDExMSlcIjp7dGFnOlwiKDIwMjAsMDExMSlcIix2cjpcIlNRXCIsbmFtZTpcIkJhc2ljQ29sb3JJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwMzAsMDAxMClcIjp7dGFnOlwiKDIwMzAsMDAxMClcIix2cjpcIlVTXCIsbmFtZTpcIkFubm90YXRpb25Qb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMDMwLDAwMjApXCI6e3RhZzpcIigyMDMwLDAwMjApXCIsdnI6XCJMT1wiLG5hbWU6XCJUZXh0U3RyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwNTAsMDAxMClcIjp7dGFnOlwiKDIwNTAsMDAxMClcIix2cjpcIlNRXCIsbmFtZTpcIlByZXNlbnRhdGlvbkxVVFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwNTAsMDAyMClcIjp7dGFnOlwiKDIwNTAsMDAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlByZXNlbnRhdGlvbkxVVFNoYXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIwNTAsMDUwMClcIjp7dGFnOlwiKDIwNTAsMDUwMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRQcmVzZW50YXRpb25MVVRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMTAwLDAwMjApXCI6e3RhZzpcIigyMTAwLDAwMjApXCIsdnI6XCJDU1wiLG5hbWU6XCJFeGVjdXRpb25TdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjEwMCwwMDMwKVwiOnt0YWc6XCIoMjEwMCwwMDMwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRXhlY3V0aW9uU3RhdHVzSW5mb1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMTAwLDAwNDApXCI6e3RhZzpcIigyMTAwLDAwNDApXCIsdnI6XCJEQVwiLG5hbWU6XCJDcmVhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjEwMCwwMDUwKVwiOnt0YWc6XCIoMjEwMCwwMDUwKVwiLHZyOlwiVE1cIixuYW1lOlwiQ3JlYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIxMDAsMDA3MClcIjp7dGFnOlwiKDIxMDAsMDA3MClcIix2cjpcIkFFXCIsbmFtZTpcIk9yaWdpbmF0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjEwMCwwMTYwKVwiOnt0YWc6XCIoMjEwMCwwMTYwKVwiLHZyOlwiU0hcIixuYW1lOlwiT3duZXJJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMTAwLDAxNzApXCI6e3RhZzpcIigyMTAwLDAxNzApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkZpbG1zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIxMTAsMDAxMClcIjp7dGFnOlwiKDIxMTAsMDAxMClcIix2cjpcIkNTXCIsbmFtZTpcIlByaW50ZXJTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjExMCwwMDIwKVwiOnt0YWc6XCIoMjExMCwwMDIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUHJpbnRlclN0YXR1c0luZm9cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjExMCwwMDMwKVwiOnt0YWc6XCIoMjExMCwwMDMwKVwiLHZyOlwiTE9cIixuYW1lOlwiUHJpbnRlck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjIwMCwwMDAxKVwiOnt0YWc6XCIoMjIwMCwwMDAxKVwiLHZyOlwiQ1NcIixuYW1lOlwiTGFiZWxVc2luZ0luZm9ybWF0aW9uRXh0cmFjdGVkRnJvbUluc3RhbmNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMDIpXCI6e3RhZzpcIigyMjAwLDAwMDIpXCIsdnI6XCJVVFwiLG5hbWU6XCJMYWJlbFRleHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjIwMCwwMDAzKVwiOnt0YWc6XCIoMjIwMCwwMDAzKVwiLHZyOlwiQ1NcIixuYW1lOlwiTGFiZWxTdHlsZVNlbGVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMDQpXCI6e3RhZzpcIigyMjAwLDAwMDQpXCIsdnI6XCJMVFwiLG5hbWU6XCJNZWRpYURpc3Bvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIyMDAsMDAwNSlcIjp7dGFnOlwiKDIyMDAsMDAwNSlcIix2cjpcIkxUXCIsbmFtZTpcIkJhcmNvZGVWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMDYpXCI6e3RhZzpcIigyMjAwLDAwMDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJCYXJjb2RlU3ltYm9sb2d5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIyMDAsMDAwNylcIjp7dGFnOlwiKDIyMDAsMDAwNylcIix2cjpcIkNTXCIsbmFtZTpcIkFsbG93TWVkaWFTcGxpdHRpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjIwMCwwMDA4KVwiOnt0YWc6XCIoMjIwMCwwMDA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5jbHVkZU5vbkRJQ09NT2JqZWN0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMDkpXCI6e3RhZzpcIigyMjAwLDAwMDkpXCIsdnI6XCJDU1wiLG5hbWU6XCJJbmNsdWRlRGlzcGxheUFwcGxpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIyMDAsMDAwQSlcIjp7dGFnOlwiKDIyMDAsMDAwQSlcIix2cjpcIkNTXCIsbmFtZTpcIlByZXNlcnZlQ29tcG9zaXRlSW5zdGFuY2VzQWZ0ZXJNZWRpYUNyZWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDIyMDAsMDAwQilcIjp7dGFnOlwiKDIyMDAsMDAwQilcIix2cjpcIlVTXCIsbmFtZTpcIlRvdGFsTnVtYmVyT2ZQaWVjZXNPZk1lZGlhQ3JlYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMEMpXCI6e3RhZzpcIigyMjAwLDAwMEMpXCIsdnI6XCJMT1wiLG5hbWU6XCJSZXF1ZXN0ZWRNZWRpYUFwcGxpY2F0aW9uUHJvZmlsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMEQpXCI6e3RhZzpcIigyMjAwLDAwMEQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkU3RvcmFnZU1lZGlhU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjIwMCwwMDBFKVwiOnt0YWc6XCIoMjIwMCwwMDBFKVwiLHZyOlwiQVRcIixuYW1lOlwiRmFpbHVyZUF0dHJpYnV0ZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigyMjAwLDAwMEYpXCI6e3RhZzpcIigyMjAwLDAwMEYpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbGxvd0xvc3N5Q29tcHJlc3Npb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMjIwMCwwMDIwKVwiOnt0YWc6XCIoMjIwMCwwMDIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVxdWVzdFByaW9yaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDAwMilcIjp7dGFnOlwiKDMwMDIsMDAwMilcIix2cjpcIlNIXCIsbmFtZTpcIlJUSW1hZ2VMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMDMpXCI6e3RhZzpcIigzMDAyLDAwMDMpXCIsdnI6XCJMT1wiLG5hbWU6XCJSVEltYWdlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMDQpXCI6e3RhZzpcIigzMDAyLDAwMDQpXCIsdnI6XCJTVFwiLG5hbWU6XCJSVEltYWdlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDBBKVwiOnt0YWc6XCIoMzAwMiwwMDBBKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVwb3J0ZWRWYWx1ZXNPcmlnaW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDBDKVwiOnt0YWc6XCIoMzAwMiwwMDBDKVwiLHZyOlwiQ1NcIixuYW1lOlwiUlRJbWFnZVBsYW5lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDAwRClcIjp7dGFnOlwiKDMwMDIsMDAwRClcIix2cjpcIkRTXCIsbmFtZTpcIlhSYXlJbWFnZVJlY2VwdG9yVHJhbnNsYXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDBFKVwiOnt0YWc6XCIoMzAwMiwwMDBFKVwiLHZyOlwiRFNcIixuYW1lOlwiWFJheUltYWdlUmVjZXB0b3JBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMTApXCI6e3RhZzpcIigzMDAyLDAwMTApXCIsdnI6XCJEU1wiLG5hbWU6XCJSVEltYWdlT3JpZW50YXRpb25cIix2bTpcIjZcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDExKVwiOnt0YWc6XCIoMzAwMiwwMDExKVwiLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2VQbGFuZVBpeGVsU3BhY2luZ1wiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMTIpXCI6e3RhZzpcIigzMDAyLDAwMTIpXCIsdnI6XCJEU1wiLG5hbWU6XCJSVEltYWdlUG9zaXRpb25cIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDIwKVwiOnt0YWc6XCIoMzAwMiwwMDIwKVwiLHZyOlwiU0hcIixuYW1lOlwiUmFkaWF0aW9uTWFjaGluZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDIyKVwiOnt0YWc6XCIoMzAwMiwwMDIyKVwiLHZyOlwiRFNcIixuYW1lOlwiUmFkaWF0aW9uTWFjaGluZVNBRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMjQpXCI6e3RhZzpcIigzMDAyLDAwMjQpXCIsdnI6XCJEU1wiLG5hbWU6XCJSYWRpYXRpb25NYWNoaW5lU1NEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDAyNilcIjp7dGFnOlwiKDMwMDIsMDAyNilcIix2cjpcIkRTXCIsbmFtZTpcIlJUSW1hZ2VTSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDI4KVwiOnt0YWc6XCIoMzAwMiwwMDI4KVwiLHZyOlwiRFNcIixuYW1lOlwiU291cmNlVG9SZWZlcmVuY2VPYmplY3REaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMjkpXCI6e3RhZzpcIigzMDAyLDAwMjkpXCIsdnI6XCJJU1wiLG5hbWU6XCJGcmFjdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDAyLDAwMzApXCI6e3RhZzpcIigzMDAyLDAwMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJFeHBvc3VyZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDAzMilcIjp7dGFnOlwiKDMwMDIsMDAzMilcIix2cjpcIkRTXCIsbmFtZTpcIk1ldGVyc2V0RXhwb3N1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDM0KVwiOnt0YWc6XCIoMzAwMiwwMDM0KVwiLHZyOlwiRFNcIixuYW1lOlwiRGlhcGhyYWdtUG9zaXRpb25cIix2bTpcIjRcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDQwKVwiOnt0YWc6XCIoMzAwMiwwMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiRmx1ZW5jZU1hcFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDA0MSlcIjp7dGFnOlwiKDMwMDIsMDA0MSlcIix2cjpcIkNTXCIsbmFtZTpcIkZsdWVuY2VEYXRhU291cmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDIsMDA0MilcIjp7dGFnOlwiKDMwMDIsMDA0MilcIix2cjpcIkRTXCIsbmFtZTpcIkZsdWVuY2VEYXRhU2NhbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDUwKVwiOnt0YWc6XCIoMzAwMiwwMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiUHJpbWFyeUZsdWVuY2VNb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDUxKVwiOnt0YWc6XCIoMzAwMiwwMDUxKVwiLHZyOlwiQ1NcIixuYW1lOlwiRmx1ZW5jZU1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwMiwwMDUyKVwiOnt0YWc6XCIoMzAwMiwwMDUyKVwiLHZyOlwiU0hcIixuYW1lOlwiRmx1ZW5jZU1vZGVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMDEpXCI6e3RhZzpcIigzMDA0LDAwMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJEVkhUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDAwMilcIjp7dGFnOlwiKDMwMDQsMDAwMilcIix2cjpcIkNTXCIsbmFtZTpcIkRvc2VVbml0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMDQpXCI6e3RhZzpcIigzMDA0LDAwMDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJEb3NlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMDUpXCI6e3RhZzpcIigzMDA0LDAwMDUpXCIsdnI6XCJDU1wiLG5hbWU6XCJTcGF0aWFsVHJhbnNmb3JtT2ZEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDAwNilcIjp7dGFnOlwiKDMwMDQsMDAwNilcIix2cjpcIkxPXCIsbmFtZTpcIkRvc2VDb21tZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDAwOClcIjp7dGFnOlwiKDMwMDQsMDAwOClcIix2cjpcIkRTXCIsbmFtZTpcIk5vcm1hbGl6YXRpb25Qb2ludFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMEEpXCI6e3RhZzpcIigzMDA0LDAwMEEpXCIsdnI6XCJDU1wiLG5hbWU6XCJEb3NlU3VtbWF0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMEMpXCI6e3RhZzpcIigzMDA0LDAwMEMpXCIsdnI6XCJEU1wiLG5hbWU6XCJHcmlkRnJhbWVPZmZzZXRWZWN0b3JcIix2bTpcIjItblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA0LDAwMEUpXCI6e3RhZzpcIigzMDA0LDAwMEUpXCIsdnI6XCJEU1wiLG5hbWU6XCJEb3NlR3JpZFNjYWxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDEwKVwiOnt0YWc6XCIoMzAwNCwwMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUlREb3NlUk9JU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDEyKVwiOnt0YWc6XCIoMzAwNCwwMDEyKVwiLHZyOlwiRFNcIixuYW1lOlwiRG9zZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDAxNClcIjp7dGFnOlwiKDMwMDQsMDAxNClcIix2cjpcIkNTXCIsbmFtZTpcIlRpc3N1ZUhldGVyb2dlbmVpdHlDb3JyZWN0aW9uXCIsdm06XCIxLTNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDQwKVwiOnt0YWc6XCIoMzAwNCwwMDQwKVwiLHZyOlwiRFNcIixuYW1lOlwiRFZITm9ybWFsaXphdGlvblBvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDA0MilcIjp7dGFnOlwiKDMwMDQsMDA0MilcIix2cjpcIkRTXCIsbmFtZTpcIkRWSE5vcm1hbGl6YXRpb25Eb3NlVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDUwKVwiOnt0YWc6XCIoMzAwNCwwMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiRFZIU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDUyKVwiOnt0YWc6XCIoMzAwNCwwMDUyKVwiLHZyOlwiRFNcIixuYW1lOlwiRFZIRG9zZVNjYWxpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDU0KVwiOnt0YWc6XCIoMzAwNCwwMDU0KVwiLHZyOlwiQ1NcIixuYW1lOlwiRFZIVm9sdW1lVW5pdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDU2KVwiOnt0YWc6XCIoMzAwNCwwMDU2KVwiLHZyOlwiSVNcIixuYW1lOlwiRFZITnVtYmVyT2ZCaW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDA1OClcIjp7dGFnOlwiKDMwMDQsMDA1OClcIix2cjpcIkRTXCIsbmFtZTpcIkRWSERhdGFcIix2bTpcIjItMm5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDYwKVwiOnt0YWc6XCIoMzAwNCwwMDYwKVwiLHZyOlwiU1FcIixuYW1lOlwiRFZIUmVmZXJlbmNlZFJPSVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDQsMDA2MilcIjp7dGFnOlwiKDMwMDQsMDA2MilcIix2cjpcIkNTXCIsbmFtZTpcIkRWSFJPSUNvbnRyaWJ1dGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDcwKVwiOnt0YWc6XCIoMzAwNCwwMDcwKVwiLHZyOlwiRFNcIixuYW1lOlwiRFZITWluaW11bURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDcyKVwiOnt0YWc6XCIoMzAwNCwwMDcyKVwiLHZyOlwiRFNcIixuYW1lOlwiRFZITWF4aW11bURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNCwwMDc0KVwiOnt0YWc6XCIoMzAwNCwwMDc0KVwiLHZyOlwiRFNcIixuYW1lOlwiRFZITWVhbkRvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDAyKVwiOnt0YWc6XCIoMzAwNiwwMDAyKVwiLHZyOlwiU0hcIixuYW1lOlwiU3RydWN0dXJlU2V0TGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDA0KVwiOnt0YWc6XCIoMzAwNiwwMDA0KVwiLHZyOlwiTE9cIixuYW1lOlwiU3RydWN0dXJlU2V0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMDYpXCI6e3RhZzpcIigzMDA2LDAwMDYpXCIsdnI6XCJTVFwiLG5hbWU6XCJTdHJ1Y3R1cmVTZXREZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMDgpXCI6e3RhZzpcIigzMDA2LDAwMDgpXCIsdnI6XCJEQVwiLG5hbWU6XCJTdHJ1Y3R1cmVTZXREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAwOSlcIjp7dGFnOlwiKDMwMDYsMDAwOSlcIix2cjpcIlRNXCIsbmFtZTpcIlN0cnVjdHVyZVNldFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDEwKVwiOnt0YWc6XCIoMzAwNiwwMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZEZyYW1lT2ZSZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMTIpXCI6e3RhZzpcIigzMDA2LDAwMTIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSVFJlZmVyZW5jZWRTdHVkeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAxNClcIjp7dGFnOlwiKDMwMDYsMDAxNClcIix2cjpcIlNRXCIsbmFtZTpcIlJUUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAxNilcIjp7dGFnOlwiKDMwMDYsMDAxNilcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRvdXJJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAxOClcIjp7dGFnOlwiKDMwMDYsMDAxOClcIix2cjpcIlNRXCIsbmFtZTpcIlByZWRlY2Vzc29yU3RydWN0dXJlU2V0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDIwKVwiOnt0YWc6XCIoMzAwNiwwMDIwKVwiLHZyOlwiU1FcIixuYW1lOlwiU3RydWN0dXJlU2V0Uk9JU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDIyKVwiOnt0YWc6XCIoMzAwNiwwMDIyKVwiLHZyOlwiSVNcIixuYW1lOlwiUk9JTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAyNClcIjp7dGFnOlwiKDMwMDYsMDAyNClcIix2cjpcIlVJXCIsbmFtZTpcIlJlZmVyZW5jZWRGcmFtZU9mUmVmZXJlbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAyNilcIjp7dGFnOlwiKDMwMDYsMDAyNilcIix2cjpcIkxPXCIsbmFtZTpcIlJPSU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDI4KVwiOnt0YWc6XCIoMzAwNiwwMDI4KVwiLHZyOlwiU1RcIixuYW1lOlwiUk9JRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDJBKVwiOnt0YWc6XCIoMzAwNiwwMDJBKVwiLHZyOlwiSVNcIixuYW1lOlwiUk9JRGlzcGxheUNvbG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAyQylcIjp7dGFnOlwiKDMwMDYsMDAyQylcIix2cjpcIkRTXCIsbmFtZTpcIlJPSVZvbHVtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMzApXCI6e3RhZzpcIigzMDA2LDAwMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJSVFJlbGF0ZWRST0lTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMzMpXCI6e3RhZzpcIigzMDA2LDAwMzMpXCIsdnI6XCJDU1wiLG5hbWU6XCJSVFJPSVJlbGF0aW9uc2hpcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMzYpXCI6e3RhZzpcIigzMDA2LDAwMzYpXCIsdnI6XCJDU1wiLG5hbWU6XCJST0lHZW5lcmF0aW9uQWxnb3JpdGhtXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDAzOClcIjp7dGFnOlwiKDMwMDYsMDAzOClcIix2cjpcIkxPXCIsbmFtZTpcIlJPSUdlbmVyYXRpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwMzkpXCI6e3RhZzpcIigzMDA2LDAwMzkpXCIsdnI6XCJTUVwiLG5hbWU6XCJST0lDb250b3VyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDQwKVwiOnt0YWc6XCIoMzAwNiwwMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiQ29udG91clNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA0MilcIjp7dGFnOlwiKDMwMDYsMDA0MilcIix2cjpcIkNTXCIsbmFtZTpcIkNvbnRvdXJHZW9tZXRyaWNUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA0NClcIjp7dGFnOlwiKDMwMDYsMDA0NClcIix2cjpcIkRTXCIsbmFtZTpcIkNvbnRvdXJTbGFiVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA0NSlcIjp7dGFnOlwiKDMwMDYsMDA0NSlcIix2cjpcIkRTXCIsbmFtZTpcIkNvbnRvdXJPZmZzZXRWZWN0b3JcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDQ2KVwiOnt0YWc6XCIoMzAwNiwwMDQ2KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZDb250b3VyUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA0OClcIjp7dGFnOlwiKDMwMDYsMDA0OClcIix2cjpcIklTXCIsbmFtZTpcIkNvbnRvdXJOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDQ5KVwiOnt0YWc6XCIoMzAwNiwwMDQ5KVwiLHZyOlwiSVNcIixuYW1lOlwiQXR0YWNoZWRDb250b3Vyc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA1MClcIjp7dGFnOlwiKDMwMDYsMDA1MClcIix2cjpcIkRTXCIsbmFtZTpcIkNvbnRvdXJEYXRhXCIsdm06XCIzLTNuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA4MClcIjp7dGFnOlwiKDMwMDYsMDA4MClcIix2cjpcIlNRXCIsbmFtZTpcIlJUUk9JT2JzZXJ2YXRpb25zU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDgyKVwiOnt0YWc6XCIoMzAwNiwwMDgyKVwiLHZyOlwiSVNcIixuYW1lOlwiT2JzZXJ2YXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDg0KVwiOnt0YWc6XCIoMzAwNiwwMDg0KVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZFJPSU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwODUpXCI6e3RhZzpcIigzMDA2LDAwODUpXCIsdnI6XCJTSFwiLG5hbWU6XCJST0lPYnNlcnZhdGlvbkxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDA4NilcIjp7dGFnOlwiKDMwMDYsMDA4NilcIix2cjpcIlNRXCIsbmFtZTpcIlJUUk9JSWRlbnRpZmljYXRpb25Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMDg4KVwiOnt0YWc6XCIoMzAwNiwwMDg4KVwiLHZyOlwiU1RcIixuYW1lOlwiUk9JT2JzZXJ2YXRpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQTApXCI6e3RhZzpcIigzMDA2LDAwQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWxhdGVkUlRST0lPYnNlcnZhdGlvbnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQTQpXCI6e3RhZzpcIigzMDA2LDAwQTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJSVFJPSUludGVycHJldGVkVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQTYpXCI6e3RhZzpcIigzMDA2LDAwQTYpXCIsdnI6XCJQTlwiLG5hbWU6XCJST0lJbnRlcnByZXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQjApXCI6e3RhZzpcIigzMDA2LDAwQjApXCIsdnI6XCJTUVwiLG5hbWU6XCJST0lQaHlzaWNhbFByb3BlcnRpZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQjIpXCI6e3RhZzpcIigzMDA2LDAwQjIpXCIsdnI6XCJDU1wiLG5hbWU6XCJST0lQaHlzaWNhbFByb3BlcnR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDBCNClcIjp7dGFnOlwiKDMwMDYsMDBCNClcIix2cjpcIkRTXCIsbmFtZTpcIlJPSVBoeXNpY2FsUHJvcGVydHlWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA2LDAwQjYpXCI6e3RhZzpcIigzMDA2LDAwQjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJST0lFbGVtZW50YWxDb21wb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDBCNylcIjp7dGFnOlwiKDMwMDYsMDBCNylcIix2cjpcIlVTXCIsbmFtZTpcIlJPSUVsZW1lbnRhbENvbXBvc2l0aW9uQXRvbWljTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDBCOClcIjp7dGFnOlwiKDMwMDYsMDBCOClcIix2cjpcIkZMXCIsbmFtZTpcIlJPSUVsZW1lbnRhbENvbXBvc2l0aW9uQXRvbWljTWFzc0ZyYWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDBCOSlcIjp7dGFnOlwiKDMwMDYsMDBCOSlcIix2cjpcIlNRXCIsbmFtZTpcIkFkZGl0aW9uYWxSVFJPSUlkZW50aWZpY2F0aW9uQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDYsMDBDNilcIjp7dGFnOlwiKDMwMDYsMDBDNilcIix2cjpcIkRTXCIsbmFtZTpcIkZyYW1lT2ZSZWZlcmVuY2VUcmFuc2Zvcm1hdGlvbk1hdHJpeFwiLHZtOlwiMTZcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwNiwwMEM4KVwiOnt0YWc6XCIoMzAwNiwwMEM4KVwiLHZyOlwiTE9cIixuYW1lOlwiRnJhbWVPZlJlZmVyZW5jZVRyYW5zZm9ybWF0aW9uQ29tbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMTApXCI6e3RhZzpcIigzMDA4LDAwMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJNZWFzdXJlZERvc2VSZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMTIpXCI6e3RhZzpcIigzMDA4LDAwMTIpXCIsdnI6XCJTVFwiLG5hbWU6XCJNZWFzdXJlZERvc2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMTQpXCI6e3RhZzpcIigzMDA4LDAwMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJNZWFzdXJlZERvc2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDAxNilcIjp7dGFnOlwiKDMwMDgsMDAxNilcIix2cjpcIkRTXCIsbmFtZTpcIk1lYXN1cmVkRG9zZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDAyMClcIjp7dGFnOlwiKDMwMDgsMDAyMClcIix2cjpcIlNRXCIsbmFtZTpcIlRyZWF0bWVudFNlc3Npb25CZWFtU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDIxKVwiOnt0YWc6XCIoMzAwOCwwMDIxKVwiLHZyOlwiU1FcIixuYW1lOlwiVHJlYXRtZW50U2Vzc2lvbklvbkJlYW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMjIpXCI6e3RhZzpcIigzMDA4LDAwMjIpXCIsdnI6XCJJU1wiLG5hbWU6XCJDdXJyZW50RnJhY3Rpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDI0KVwiOnt0YWc6XCIoMzAwOCwwMDI0KVwiLHZyOlwiREFcIixuYW1lOlwiVHJlYXRtZW50Q29udHJvbFBvaW50RGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMjUpXCI6e3RhZzpcIigzMDA4LDAwMjUpXCIsdnI6XCJUTVwiLG5hbWU6XCJUcmVhdG1lbnRDb250cm9sUG9pbnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDAyQSlcIjp7dGFnOlwiKDMwMDgsMDAyQSlcIix2cjpcIkNTXCIsbmFtZTpcIlRyZWF0bWVudFRlcm1pbmF0aW9uU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDAyQilcIjp7dGFnOlwiKDMwMDgsMDAyQilcIix2cjpcIlNIXCIsbmFtZTpcIlRyZWF0bWVudFRlcm1pbmF0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMkMpXCI6e3RhZzpcIigzMDA4LDAwMkMpXCIsdnI6XCJDU1wiLG5hbWU6XCJUcmVhdG1lbnRWZXJpZmljYXRpb25TdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDMwKVwiOnt0YWc6XCIoMzAwOCwwMDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFRyZWF0bWVudFJlY29yZFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDAzMilcIjp7dGFnOlwiKDMwMDgsMDAzMilcIix2cjpcIkRTXCIsbmFtZTpcIlNwZWNpZmllZFByaW1hcnlNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMzMpXCI6e3RhZzpcIigzMDA4LDAwMzMpXCIsdnI6XCJEU1wiLG5hbWU6XCJTcGVjaWZpZWRTZWNvbmRhcnlNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwMzYpXCI6e3RhZzpcIigzMDA4LDAwMzYpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZWxpdmVyZWRQcmltYXJ5TWV0ZXJzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDM3KVwiOnt0YWc6XCIoMzAwOCwwMDM3KVwiLHZyOlwiRFNcIixuYW1lOlwiRGVsaXZlcmVkU2Vjb25kYXJ5TWV0ZXJzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDNBKVwiOnt0YWc6XCIoMzAwOCwwMDNBKVwiLHZyOlwiRFNcIixuYW1lOlwiU3BlY2lmaWVkVHJlYXRtZW50VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwM0IpXCI6e3RhZzpcIigzMDA4LDAwM0IpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZWxpdmVyZWRUcmVhdG1lbnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA0MClcIjp7dGFnOlwiKDMwMDgsMDA0MClcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyb2xQb2ludERlbGl2ZXJ5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDQxKVwiOnt0YWc6XCIoMzAwOCwwMDQxKVwiLHZyOlwiU1FcIixuYW1lOlwiSW9uQ29udHJvbFBvaW50RGVsaXZlcnlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNDIpXCI6e3RhZzpcIigzMDA4LDAwNDIpXCIsdnI6XCJEU1wiLG5hbWU6XCJTcGVjaWZpZWRNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNDQpXCI6e3RhZzpcIigzMDA4LDAwNDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZWxpdmVyZWRNZXRlcnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNDUpXCI6e3RhZzpcIigzMDA4LDAwNDUpXCIsdnI6XCJGTFwiLG5hbWU6XCJNZXRlcnNldFJhdGVTZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDQ2KVwiOnt0YWc6XCIoMzAwOCwwMDQ2KVwiLHZyOlwiRkxcIixuYW1lOlwiTWV0ZXJzZXRSYXRlRGVsaXZlcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA0NylcIjp7dGFnOlwiKDMwMDgsMDA0NylcIix2cjpcIkZMXCIsbmFtZTpcIlNjYW5TcG90TWV0ZXJzZXRzRGVsaXZlcmVkXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDQ4KVwiOnt0YWc6XCIoMzAwOCwwMDQ4KVwiLHZyOlwiRFNcIixuYW1lOlwiRG9zZVJhdGVEZWxpdmVyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDUwKVwiOnt0YWc6XCIoMzAwOCwwMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiVHJlYXRtZW50U3VtbWFyeUNhbGN1bGF0ZWREb3NlUmVmZXJlbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDUyKVwiOnt0YWc6XCIoMzAwOCwwMDUyKVwiLHZyOlwiRFNcIixuYW1lOlwiQ3VtdWxhdGl2ZURvc2VUb0Rvc2VSZWZlcmVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDU0KVwiOnt0YWc6XCIoMzAwOCwwMDU0KVwiLHZyOlwiREFcIixuYW1lOlwiRmlyc3RUcmVhdG1lbnREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA1NilcIjp7dGFnOlwiKDMwMDgsMDA1NilcIix2cjpcIkRBXCIsbmFtZTpcIk1vc3RSZWNlbnRUcmVhdG1lbnREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA1QSlcIjp7dGFnOlwiKDMwMDgsMDA1QSlcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mRnJhY3Rpb25zRGVsaXZlcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA2MClcIjp7dGFnOlwiKDMwMDgsMDA2MClcIix2cjpcIlNRXCIsbmFtZTpcIk92ZXJyaWRlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDYxKVwiOnt0YWc6XCIoMzAwOCwwMDYxKVwiLHZyOlwiQVRcIixuYW1lOlwiUGFyYW1ldGVyU2VxdWVuY2VQb2ludGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA2MilcIjp7dGFnOlwiKDMwMDgsMDA2MilcIix2cjpcIkFUXCIsbmFtZTpcIk92ZXJyaWRlUGFyYW1ldGVyUG9pbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNjMpXCI6e3RhZzpcIigzMDA4LDAwNjMpXCIsdnI6XCJJU1wiLG5hbWU6XCJQYXJhbWV0ZXJJdGVtSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDY0KVwiOnt0YWc6XCIoMzAwOCwwMDY0KVwiLHZyOlwiSVNcIixuYW1lOlwiTWVhc3VyZWREb3NlUmVmZXJlbmNlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA2NSlcIjp7dGFnOlwiKDMwMDgsMDA2NSlcIix2cjpcIkFUXCIsbmFtZTpcIlBhcmFtZXRlclBvaW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDY2KVwiOnt0YWc6XCIoMzAwOCwwMDY2KVwiLHZyOlwiU1RcIixuYW1lOlwiT3ZlcnJpZGVSZWFzb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDY4KVwiOnt0YWc6XCIoMzAwOCwwMDY4KVwiLHZyOlwiU1FcIixuYW1lOlwiQ29ycmVjdGVkUGFyYW1ldGVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDZBKVwiOnt0YWc6XCIoMzAwOCwwMDZBKVwiLHZyOlwiRkxcIixuYW1lOlwiQ29ycmVjdGlvblZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA3MClcIjp7dGFnOlwiKDMwMDgsMDA3MClcIix2cjpcIlNRXCIsbmFtZTpcIkNhbGN1bGF0ZWREb3NlUmVmZXJlbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDcyKVwiOnt0YWc6XCIoMzAwOCwwMDcyKVwiLHZyOlwiSVNcIixuYW1lOlwiQ2FsY3VsYXRlZERvc2VSZWZlcmVuY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMDc0KVwiOnt0YWc6XCIoMzAwOCwwMDc0KVwiLHZyOlwiU1RcIixuYW1lOlwiQ2FsY3VsYXRlZERvc2VSZWZlcmVuY2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNzYpXCI6e3RhZzpcIigzMDA4LDAwNzYpXCIsdnI6XCJEU1wiLG5hbWU6XCJDYWxjdWxhdGVkRG9zZVJlZmVyZW5jZURvc2VWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwNzgpXCI6e3RhZzpcIigzMDA4LDAwNzgpXCIsdnI6XCJEU1wiLG5hbWU6XCJTdGFydE1ldGVyc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA3QSlcIjp7dGFnOlwiKDMwMDgsMDA3QSlcIix2cjpcIkRTXCIsbmFtZTpcIkVuZE1ldGVyc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA4MClcIjp7dGFnOlwiKDMwMDgsMDA4MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRNZWFzdXJlZERvc2VSZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwODIpXCI6e3RhZzpcIigzMDA4LDAwODIpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkTWVhc3VyZWREb3NlUmVmZXJlbmNlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA5MClcIjp7dGFnOlwiKDMwMDgsMDA5MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRDYWxjdWxhdGVkRG9zZVJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDA5MilcIjp7dGFnOlwiKDMwMDgsMDA5MilcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRDYWxjdWxhdGVkRG9zZVJlZmVyZW5jZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwQTApXCI6e3RhZzpcIigzMDA4LDAwQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VMZWFmUGFpcnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwQjApXCI6e3RhZzpcIigzMDA4LDAwQjApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWNvcmRlZFdlZGdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMEMwKVwiOnt0YWc6XCIoMzAwOCwwMEMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRDb21wZW5zYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDBEMClcIjp7dGFnOlwiKDMwMDgsMDBEMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlY29yZGVkQmxvY2tTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAwRTApXCI6e3RhZzpcIigzMDA4LDAwRTApXCIsdnI6XCJTUVwiLG5hbWU6XCJUcmVhdG1lbnRTdW1tYXJ5TWVhc3VyZWREb3NlUmVmZXJlbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMEYwKVwiOnt0YWc6XCIoMzAwOCwwMEYwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRTbm91dFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDBGMilcIjp7dGFnOlwiKDMwMDgsMDBGMilcIix2cjpcIlNRXCIsbmFtZTpcIlJlY29yZGVkUmFuZ2VTaGlmdGVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMEY0KVwiOnt0YWc6XCIoMzAwOCwwMEY0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRMYXRlcmFsU3ByZWFkaW5nRGV2aWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMEY2KVwiOnt0YWc6XCIoMzAwOCwwMEY2KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRSYW5nZU1vZHVsYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDEwMClcIjp7dGFnOlwiKDMwMDgsMDEwMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlY29yZGVkU291cmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTA1KVwiOnt0YWc6XCIoMzAwOCwwMTA1KVwiLHZyOlwiTE9cIixuYW1lOlwiU291cmNlU2VyaWFsTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDExMClcIjp7dGFnOlwiKDMwMDgsMDExMClcIix2cjpcIlNRXCIsbmFtZTpcIlRyZWF0bWVudFNlc3Npb25BcHBsaWNhdGlvblNldHVwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTE2KVwiOnt0YWc6XCIoMzAwOCwwMTE2KVwiLHZyOlwiQ1NcIixuYW1lOlwiQXBwbGljYXRpb25TZXR1cENoZWNrXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDEyMClcIjp7dGFnOlwiKDMwMDgsMDEyMClcIix2cjpcIlNRXCIsbmFtZTpcIlJlY29yZGVkQnJhY2h5QWNjZXNzb3J5RGV2aWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTIyKVwiOnt0YWc6XCIoMzAwOCwwMTIyKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZEJyYWNoeUFjY2Vzc29yeURldmljZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAxMzApXCI6e3RhZzpcIigzMDA4LDAxMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWNvcmRlZENoYW5uZWxTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAxMzIpXCI6e3RhZzpcIigzMDA4LDAxMzIpXCIsdnI6XCJEU1wiLG5hbWU6XCJTcGVjaWZpZWRDaGFubmVsVG90YWxUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDEzNClcIjp7dGFnOlwiKDMwMDgsMDEzNClcIix2cjpcIkRTXCIsbmFtZTpcIkRlbGl2ZXJlZENoYW5uZWxUb3RhbFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTM2KVwiOnt0YWc6XCIoMzAwOCwwMTM2KVwiLHZyOlwiSVNcIixuYW1lOlwiU3BlY2lmaWVkTnVtYmVyT2ZQdWxzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTM4KVwiOnt0YWc6XCIoMzAwOCwwMTM4KVwiLHZyOlwiSVNcIixuYW1lOlwiRGVsaXZlcmVkTnVtYmVyT2ZQdWxzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTNBKVwiOnt0YWc6XCIoMzAwOCwwMTNBKVwiLHZyOlwiRFNcIixuYW1lOlwiU3BlY2lmaWVkUHVsc2VSZXBldGl0aW9uSW50ZXJ2YWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTNDKVwiOnt0YWc6XCIoMzAwOCwwMTNDKVwiLHZyOlwiRFNcIixuYW1lOlwiRGVsaXZlcmVkUHVsc2VSZXBldGl0aW9uSW50ZXJ2YWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTQwKVwiOnt0YWc6XCIoMzAwOCwwMTQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRTb3VyY2VBcHBsaWNhdG9yU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTQyKVwiOnt0YWc6XCIoMzAwOCwwMTQyKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZFNvdXJjZUFwcGxpY2F0b3JOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTUwKVwiOnt0YWc6XCIoMzAwOCwwMTUwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVjb3JkZWRDaGFubmVsU2hpZWxkU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTUyKVwiOnt0YWc6XCIoMzAwOCwwMTUyKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZENoYW5uZWxTaGllbGROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTYwKVwiOnt0YWc6XCIoMzAwOCwwMTYwKVwiLHZyOlwiU1FcIixuYW1lOlwiQnJhY2h5Q29udHJvbFBvaW50RGVsaXZlcmVkU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTYyKVwiOnt0YWc6XCIoMzAwOCwwMTYyKVwiLHZyOlwiREFcIixuYW1lOlwiU2FmZVBvc2l0aW9uRXhpdERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTY0KVwiOnt0YWc6XCIoMzAwOCwwMTY0KVwiLHZyOlwiVE1cIixuYW1lOlwiU2FmZVBvc2l0aW9uRXhpdFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMTY2KVwiOnt0YWc6XCIoMzAwOCwwMTY2KVwiLHZyOlwiREFcIixuYW1lOlwiU2FmZVBvc2l0aW9uUmV0dXJuRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAxNjgpXCI6e3RhZzpcIigzMDA4LDAxNjgpXCIsdnI6XCJUTVwiLG5hbWU6XCJTYWZlUG9zaXRpb25SZXR1cm5UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDE3MSlcIjp7dGFnOlwiKDMwMDgsMDE3MSlcIix2cjpcIlNRXCIsbmFtZTpcIlB1bHNlU3BlY2lmaWNCcmFjaHlDb250cm9sUG9pbnREZWxpdmVyZWRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAxNzIpXCI6e3RhZzpcIigzMDA4LDAxNzIpXCIsdnI6XCJVU1wiLG5hbWU6XCJQdWxzZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAxNzMpXCI6e3RhZzpcIigzMDA4LDAxNzMpXCIsdnI6XCJTUVwiLG5hbWU6XCJCcmFjaHlQdWxzZUNvbnRyb2xQb2ludERlbGl2ZXJlZFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDIwMClcIjp7dGFnOlwiKDMwMDgsMDIwMClcIix2cjpcIkNTXCIsbmFtZTpcIkN1cnJlbnRUcmVhdG1lbnRTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMjAyKVwiOnt0YWc6XCIoMzAwOCwwMjAyKVwiLHZyOlwiU1RcIixuYW1lOlwiVHJlYXRtZW50U3RhdHVzQ29tbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAyMjApXCI6e3RhZzpcIigzMDA4LDAyMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJGcmFjdGlvbkdyb3VwU3VtbWFyeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDIyMylcIjp7dGFnOlwiKDMwMDgsMDIyMylcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRGcmFjdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAyMjQpXCI6e3RhZzpcIigzMDA4LDAyMjQpXCIsdnI6XCJDU1wiLG5hbWU6XCJGcmFjdGlvbkdyb3VwVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDA4LDAyMzApXCI6e3RhZzpcIigzMDA4LDAyMzApXCIsdnI6XCJDU1wiLG5hbWU6XCJCZWFtU3RvcHBlclBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDI0MClcIjp7dGFnOlwiKDMwMDgsMDI0MClcIix2cjpcIlNRXCIsbmFtZTpcIkZyYWN0aW9uU3RhdHVzU3VtbWFyeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMDgsMDI1MClcIjp7dGFnOlwiKDMwMDgsMDI1MClcIix2cjpcIkRBXCIsbmFtZTpcIlRyZWF0bWVudERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwOCwwMjUxKVwiOnt0YWc6XCIoMzAwOCwwMjUxKVwiLHZyOlwiVE1cIixuYW1lOlwiVHJlYXRtZW50VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMDIpXCI6e3RhZzpcIigzMDBBLDAwMDIpXCIsdnI6XCJTSFwiLG5hbWU6XCJSVFBsYW5MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMDMpXCI6e3RhZzpcIigzMDBBLDAwMDMpXCIsdnI6XCJMT1wiLG5hbWU6XCJSVFBsYW5OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAwNClcIjp7dGFnOlwiKDMwMEEsMDAwNClcIix2cjpcIlNUXCIsbmFtZTpcIlJUUGxhbkRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAwNilcIjp7dGFnOlwiKDMwMEEsMDAwNilcIix2cjpcIkRBXCIsbmFtZTpcIlJUUGxhbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDA3KVwiOnt0YWc6XCIoMzAwQSwwMDA3KVwiLHZyOlwiVE1cIixuYW1lOlwiUlRQbGFuVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMDkpXCI6e3RhZzpcIigzMDBBLDAwMDkpXCIsdnI6XCJMT1wiLG5hbWU6XCJUcmVhdG1lbnRQcm90b2NvbHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMEEpXCI6e3RhZzpcIigzMDBBLDAwMEEpXCIsdnI6XCJDU1wiLG5hbWU6XCJQbGFuSW50ZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAwQilcIjp7dGFnOlwiKDMwMEEsMDAwQilcIix2cjpcIkxPXCIsbmFtZTpcIlRyZWF0bWVudFNpdGVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDBDKVwiOnt0YWc6XCIoMzAwQSwwMDBDKVwiLHZyOlwiQ1NcIixuYW1lOlwiUlRQbGFuR2VvbWV0cnlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDBFKVwiOnt0YWc6XCIoMzAwQSwwMDBFKVwiLHZyOlwiU1RcIixuYW1lOlwiUHJlc2NyaXB0aW9uRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDEwKVwiOnt0YWc6XCIoMzAwQSwwMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiRG9zZVJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAxMilcIjp7dGFnOlwiKDMwMEEsMDAxMilcIix2cjpcIklTXCIsbmFtZTpcIkRvc2VSZWZlcmVuY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDEzKVwiOnt0YWc6XCIoMzAwQSwwMDEzKVwiLHZyOlwiVUlcIixuYW1lOlwiRG9zZVJlZmVyZW5jZVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMTQpXCI6e3RhZzpcIigzMDBBLDAwMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJEb3NlUmVmZXJlbmNlU3RydWN0dXJlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMTUpXCI6e3RhZzpcIigzMDBBLDAwMTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJOb21pbmFsQmVhbUVuZXJneVVuaXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDE2KVwiOnt0YWc6XCIoMzAwQSwwMDE2KVwiLHZyOlwiTE9cIixuYW1lOlwiRG9zZVJlZmVyZW5jZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAxOClcIjp7dGFnOlwiKDMwMEEsMDAxOClcIix2cjpcIkRTXCIsbmFtZTpcIkRvc2VSZWZlcmVuY2VQb2ludENvb3JkaW5hdGVzXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAxQSlcIjp7dGFnOlwiKDMwMEEsMDAxQSlcIix2cjpcIkRTXCIsbmFtZTpcIk5vbWluYWxQcmlvckRvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDIwKVwiOnt0YWc6XCIoMzAwQSwwMDIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiRG9zZVJlZmVyZW5jZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDIxKVwiOnt0YWc6XCIoMzAwQSwwMDIxKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29uc3RyYWludFdlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMjIpXCI6e3RhZzpcIigzMDBBLDAwMjIpXCIsdnI6XCJEU1wiLG5hbWU6XCJEZWxpdmVyeVdhcm5pbmdEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAyMylcIjp7dGFnOlwiKDMwMEEsMDAyMylcIix2cjpcIkRTXCIsbmFtZTpcIkRlbGl2ZXJ5TWF4aW11bURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDI1KVwiOnt0YWc6XCIoMzAwQSwwMDI1KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFyZ2V0TWluaW11bURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDI2KVwiOnt0YWc6XCIoMzAwQSwwMDI2KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFyZ2V0UHJlc2NyaXB0aW9uRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMjcpXCI6e3RhZzpcIigzMDBBLDAwMjcpXCIsdnI6XCJEU1wiLG5hbWU6XCJUYXJnZXRNYXhpbXVtRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMjgpXCI6e3RhZzpcIigzMDBBLDAwMjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJUYXJnZXRVbmRlcmRvc2VWb2x1bWVGcmFjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwMkEpXCI6e3RhZzpcIigzMDBBLDAwMkEpXCIsdnI6XCJEU1wiLG5hbWU6XCJPcmdhbkF0Umlza0Z1bGxWb2x1bWVEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAyQilcIjp7dGFnOlwiKDMwMEEsMDAyQilcIix2cjpcIkRTXCIsbmFtZTpcIk9yZ2FuQXRSaXNrTGltaXREb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDAyQylcIjp7dGFnOlwiKDMwMEEsMDAyQylcIix2cjpcIkRTXCIsbmFtZTpcIk9yZ2FuQXRSaXNrTWF4aW11bURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDJEKVwiOnt0YWc6XCIoMzAwQSwwMDJEKVwiLHZyOlwiRFNcIixuYW1lOlwiT3JnYW5BdFJpc2tPdmVyZG9zZVZvbHVtZUZyYWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA0MClcIjp7dGFnOlwiKDMwMEEsMDA0MClcIix2cjpcIlNRXCIsbmFtZTpcIlRvbGVyYW5jZVRhYmxlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDQyKVwiOnt0YWc6XCIoMzAwQSwwMDQyKVwiLHZyOlwiSVNcIixuYW1lOlwiVG9sZXJhbmNlVGFibGVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDQzKVwiOnt0YWc6XCIoMzAwQSwwMDQzKVwiLHZyOlwiU0hcIixuYW1lOlwiVG9sZXJhbmNlVGFibGVMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNDQpXCI6e3RhZzpcIigzMDBBLDAwNDQpXCIsdnI6XCJEU1wiLG5hbWU6XCJHYW50cnlBbmdsZVRvbGVyYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNDYpXCI6e3RhZzpcIigzMDBBLDAwNDYpXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VBbmdsZVRvbGVyYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNDgpXCI6e3RhZzpcIigzMDBBLDAwNDgpXCIsdnI6XCJTUVwiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VUb2xlcmFuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNEEpXCI6e3RhZzpcIigzMDBBLDAwNEEpXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VQb3NpdGlvblRvbGVyYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNEIpXCI6e3RhZzpcIigzMDBBLDAwNEIpXCIsdnI6XCJGTFwiLG5hbWU6XCJTbm91dFBvc2l0aW9uVG9sZXJhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA0QylcIjp7dGFnOlwiKDMwMEEsMDA0QylcIix2cjpcIkRTXCIsbmFtZTpcIlBhdGllbnRTdXBwb3J0QW5nbGVUb2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDRFKVwiOnt0YWc6XCIoMzAwQSwwMDRFKVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BFY2NlbnRyaWNBbmdsZVRvbGVyYW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNEYpXCI6e3RhZzpcIigzMDBBLDAwNEYpXCIsdnI6XCJGTFwiLG5hbWU6XCJUYWJsZVRvcFBpdGNoQW5nbGVUb2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDUwKVwiOnt0YWc6XCIoMzAwQSwwMDUwKVwiLHZyOlwiRkxcIixuYW1lOlwiVGFibGVUb3BSb2xsQW5nbGVUb2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDUxKVwiOnt0YWc6XCIoMzAwQSwwMDUxKVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BWZXJ0aWNhbFBvc2l0aW9uVG9sZXJhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA1MilcIjp7dGFnOlwiKDMwMEEsMDA1MilcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlVG9wTG9uZ2l0dWRpbmFsUG9zaXRpb25Ub2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDUzKVwiOnt0YWc6XCIoMzAwQSwwMDUzKVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BMYXRlcmFsUG9zaXRpb25Ub2xlcmFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDU1KVwiOnt0YWc6XCIoMzAwQSwwMDU1KVwiLHZyOlwiQ1NcIixuYW1lOlwiUlRQbGFuUmVsYXRpb25zaGlwXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA3MClcIjp7dGFnOlwiKDMwMEEsMDA3MClcIix2cjpcIlNRXCIsbmFtZTpcIkZyYWN0aW9uR3JvdXBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNzEpXCI6e3RhZzpcIigzMDBBLDAwNzEpXCIsdnI6XCJJU1wiLG5hbWU6XCJGcmFjdGlvbkdyb3VwTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA3MilcIjp7dGFnOlwiKDMwMEEsMDA3MilcIix2cjpcIkxPXCIsbmFtZTpcIkZyYWN0aW9uR3JvdXBEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwNzgpXCI6e3RhZzpcIigzMDBBLDAwNzgpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkZyYWN0aW9uc1BsYW5uZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDc5KVwiOnt0YWc6XCIoMzAwQSwwMDc5KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZGcmFjdGlvblBhdHRlcm5EaWdpdHNQZXJEYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDdBKVwiOnt0YWc6XCIoMzAwQSwwMDdBKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVwZWF0RnJhY3Rpb25DeWNsZUxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwN0IpXCI6e3RhZzpcIigzMDBBLDAwN0IpXCIsdnI6XCJMVFwiLG5hbWU6XCJGcmFjdGlvblBhdHRlcm5cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDgwKVwiOnt0YWc6XCIoMzAwQSwwMDgwKVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZCZWFtc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwODIpXCI6e3RhZzpcIigzMDBBLDAwODIpXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtRG9zZVNwZWNpZmljYXRpb25Qb2ludFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwODQpXCI6e3RhZzpcIigzMDBBLDAwODQpXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwODYpXCI6e3RhZzpcIigzMDBBLDAwODYpXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtTWV0ZXJzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDhCKVwiOnt0YWc6XCIoMzAwQSwwMDhCKVwiLHZyOlwiQ1NcIixuYW1lOlwiQmVhbURvc2VNZWFuaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDA4QylcIjp7dGFnOlwiKDMwMEEsMDA4QylcIix2cjpcIlNRXCIsbmFtZTpcIkJlYW1Eb3NlVmVyaWZpY2F0aW9uQ29udHJvbFBvaW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMDhEKVwiOnt0YWc6XCIoMzAwQSwwMDhEKVwiLHZyOlwiRkxcIixuYW1lOlwiQXZlcmFnZUJlYW1Eb3NlUG9pbnREZXB0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwOEUpXCI6e3RhZzpcIigzMDBBLDAwOEUpXCIsdnI6XCJGTFwiLG5hbWU6XCJBdmVyYWdlQmVhbURvc2VQb2ludEVxdWl2YWxlbnREZXB0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwOEYpXCI6e3RhZzpcIigzMDBBLDAwOEYpXCIsdnI6XCJGTFwiLG5hbWU6XCJBdmVyYWdlQmVhbURvc2VQb2ludFNTRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQTApXCI6e3RhZzpcIigzMDBBLDAwQTApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkJyYWNoeUFwcGxpY2F0aW9uU2V0dXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBBMilcIjp7dGFnOlwiKDMwMEEsMDBBMilcIix2cjpcIkRTXCIsbmFtZTpcIkJyYWNoeUFwcGxpY2F0aW9uU2V0dXBEb3NlU3BlY2lmaWNhdGlvblBvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBBNClcIjp7dGFnOlwiKDMwMEEsMDBBNClcIix2cjpcIkRTXCIsbmFtZTpcIkJyYWNoeUFwcGxpY2F0aW9uU2V0dXBEb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBCMClcIjp7dGFnOlwiKDMwMEEsMDBCMClcIix2cjpcIlNRXCIsbmFtZTpcIkJlYW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQjIpXCI6e3RhZzpcIigzMDBBLDAwQjIpXCIsdnI6XCJTSFwiLG5hbWU6XCJUcmVhdG1lbnRNYWNoaW5lTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQjMpXCI6e3RhZzpcIigzMDBBLDAwQjMpXCIsdnI6XCJDU1wiLG5hbWU6XCJQcmltYXJ5RG9zaW1ldGVyVW5pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQjQpXCI6e3RhZzpcIigzMDBBLDAwQjQpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VBeGlzRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEI2KVwiOnt0YWc6XCIoMzAwQSwwMEI2KVwiLHZyOlwiU1FcIixuYW1lOlwiQmVhbUxpbWl0aW5nRGV2aWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEI4KVwiOnt0YWc6XCIoMzAwQSwwMEI4KVwiLHZyOlwiQ1NcIixuYW1lOlwiUlRCZWFtTGltaXRpbmdEZXZpY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBCQSlcIjp7dGFnOlwiKDMwMEEsMDBCQSlcIix2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZVRvQmVhbUxpbWl0aW5nRGV2aWNlRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEJCKVwiOnt0YWc6XCIoMzAwQSwwMEJCKVwiLHZyOlwiRkxcIixuYW1lOlwiSXNvY2VudGVyVG9CZWFtTGltaXRpbmdEZXZpY2VEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQkMpXCI6e3RhZzpcIigzMDBBLDAwQkMpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkxlYWZKYXdQYWlyc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQkUpXCI6e3RhZzpcIigzMDBBLDAwQkUpXCIsdnI6XCJEU1wiLG5hbWU6XCJMZWFmUG9zaXRpb25Cb3VuZGFyaWVzXCIsdm06XCIzLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEMwKVwiOnt0YWc6XCIoMzAwQSwwMEMwKVwiLHZyOlwiSVNcIixuYW1lOlwiQmVhbU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQzIpXCI6e3RhZzpcIigzMDBBLDAwQzIpXCIsdnI6XCJMT1wiLG5hbWU6XCJCZWFtTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQzMpXCI6e3RhZzpcIigzMDBBLDAwQzMpXCIsdnI6XCJTVFwiLG5hbWU6XCJCZWFtRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEM0KVwiOnt0YWc6XCIoMzAwQSwwMEM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQmVhbVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEM1KVwiOnt0YWc6XCIoMzAwQSwwMEM1KVwiLHZyOlwiRkRcIixuYW1lOlwiQmVhbURlbGl2ZXJ5RHVyYXRpb25MaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQzYpXCI6e3RhZzpcIigzMDBBLDAwQzYpXCIsdnI6XCJDU1wiLG5hbWU6XCJSYWRpYXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBDNylcIjp7dGFnOlwiKDMwMEEsMDBDNylcIix2cjpcIkNTXCIsbmFtZTpcIkhpZ2hEb3NlVGVjaG5pcXVlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQzgpXCI6e3RhZzpcIigzMDBBLDAwQzgpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VJbWFnZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQ0EpXCI6e3RhZzpcIigzMDBBLDAwQ0EpXCIsdnI6XCJTUVwiLG5hbWU6XCJQbGFubmVkVmVyaWZpY2F0aW9uSW1hZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQ0MpXCI6e3RhZzpcIigzMDBBLDAwQ0MpXCIsdnI6XCJMT1wiLG5hbWU6XCJJbWFnaW5nRGV2aWNlU3BlY2lmaWNBY3F1aXNpdGlvblBhcmFtZXRlcnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwQ0UpXCI6e3RhZzpcIigzMDBBLDAwQ0UpXCIsdnI6XCJDU1wiLG5hbWU6XCJUcmVhdG1lbnREZWxpdmVyeVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEQwKVwiOnt0YWc6XCIoMzAwQSwwMEQwKVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZXZWRnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEQxKVwiOnt0YWc6XCIoMzAwQSwwMEQxKVwiLHZyOlwiU1FcIixuYW1lOlwiV2VkZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRDIpXCI6e3RhZzpcIigzMDBBLDAwRDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJXZWRnZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRDMpXCI6e3RhZzpcIigzMDBBLDAwRDMpXCIsdnI6XCJDU1wiLG5hbWU6XCJXZWRnZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEQ0KVwiOnt0YWc6XCIoMzAwQSwwMEQ0KVwiLHZyOlwiU0hcIixuYW1lOlwiV2VkZ2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRDUpXCI6e3RhZzpcIigzMDBBLDAwRDUpXCIsdnI6XCJJU1wiLG5hbWU6XCJXZWRnZUFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBENilcIjp7dGFnOlwiKDMwMEEsMDBENilcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBENylcIjp7dGFnOlwiKDMwMEEsMDBENylcIix2cjpcIkZMXCIsbmFtZTpcIlRvdGFsV2VkZ2VUcmF5V2F0ZXJFcXVpdmFsZW50VGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBEOClcIjp7dGFnOlwiKDMwMEEsMDBEOClcIix2cjpcIkRTXCIsbmFtZTpcIldlZGdlT3JpZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEQ5KVwiOnt0YWc6XCIoMzAwQSwwMEQ5KVwiLHZyOlwiRkxcIixuYW1lOlwiSXNvY2VudGVyVG9XZWRnZVRyYXlEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwREEpXCI6e3RhZzpcIigzMDBBLDAwREEpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VUb1dlZGdlVHJheURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBEQilcIjp7dGFnOlwiKDMwMEEsMDBEQilcIix2cjpcIkZMXCIsbmFtZTpcIldlZGdlVGhpbkVkZ2VQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwREMpXCI6e3RhZzpcIigzMDBBLDAwREMpXCIsdnI6XCJTSFwiLG5hbWU6XCJCb2x1c0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBERClcIjp7dGFnOlwiKDMwMEEsMDBERClcIix2cjpcIlNUXCIsbmFtZTpcIkJvbHVzRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMERFKVwiOnt0YWc6XCIoMzAwQSwwMERFKVwiLHZyOlwiRFNcIixuYW1lOlwiRWZmZWN0aXZlV2VkZ2VBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRTApXCI6e3RhZzpcIigzMDBBLDAwRTApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkNvbXBlbnNhdG9yc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRTEpXCI6e3RhZzpcIigzMDBBLDAwRTEpXCIsdnI6XCJTSFwiLG5hbWU6XCJNYXRlcmlhbElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBFMilcIjp7dGFnOlwiKDMwMEEsMDBFMilcIix2cjpcIkRTXCIsbmFtZTpcIlRvdGFsQ29tcGVuc2F0b3JUcmF5RmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBFMylcIjp7dGFnOlwiKDMwMEEsMDBFMylcIix2cjpcIlNRXCIsbmFtZTpcIkNvbXBlbnNhdG9yU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEU0KVwiOnt0YWc6XCIoMzAwQSwwMEU0KVwiLHZyOlwiSVNcIixuYW1lOlwiQ29tcGVuc2F0b3JOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEU1KVwiOnt0YWc6XCIoMzAwQSwwMEU1KVwiLHZyOlwiU0hcIixuYW1lOlwiQ29tcGVuc2F0b3JJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRTYpXCI6e3RhZzpcIigzMDBBLDAwRTYpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VUb0NvbXBlbnNhdG9yVHJheURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBFNylcIjp7dGFnOlwiKDMwMEEsMDBFNylcIix2cjpcIklTXCIsbmFtZTpcIkNvbXBlbnNhdG9yUm93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRTgpXCI6e3RhZzpcIigzMDBBLDAwRTgpXCIsdnI6XCJJU1wiLG5hbWU6XCJDb21wZW5zYXRvckNvbHVtbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEU5KVwiOnt0YWc6XCIoMzAwQSwwMEU5KVwiLHZyOlwiRFNcIixuYW1lOlwiQ29tcGVuc2F0b3JQaXhlbFNwYWNpbmdcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEVBKVwiOnt0YWc6XCIoMzAwQSwwMEVBKVwiLHZyOlwiRFNcIixuYW1lOlwiQ29tcGVuc2F0b3JQb3NpdGlvblwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRUIpXCI6e3RhZzpcIigzMDBBLDAwRUIpXCIsdnI6XCJEU1wiLG5hbWU6XCJDb21wZW5zYXRvclRyYW5zbWlzc2lvbkRhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRUMpXCI6e3RhZzpcIigzMDBBLDAwRUMpXCIsdnI6XCJEU1wiLG5hbWU6XCJDb21wZW5zYXRvclRoaWNrbmVzc0RhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRUQpXCI6e3RhZzpcIigzMDBBLDAwRUQpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkJvbGlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEVFKVwiOnt0YWc6XCIoMzAwQSwwMEVFKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29tcGVuc2F0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBFRilcIjp7dGFnOlwiKDMwMEEsMDBFRilcIix2cjpcIlNIXCIsbmFtZTpcIkNvbXBlbnNhdG9yVHJheUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGMClcIjp7dGFnOlwiKDMwMEEsMDBGMClcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mQmxvY2tzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGMilcIjp7dGFnOlwiKDMwMEEsMDBGMilcIix2cjpcIkRTXCIsbmFtZTpcIlRvdGFsQmxvY2tUcmF5RmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGMylcIjp7dGFnOlwiKDMwMEEsMDBGMylcIix2cjpcIkZMXCIsbmFtZTpcIlRvdGFsQmxvY2tUcmF5V2F0ZXJFcXVpdmFsZW50VGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGNClcIjp7dGFnOlwiKDMwMEEsMDBGNClcIix2cjpcIlNRXCIsbmFtZTpcIkJsb2NrU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEY1KVwiOnt0YWc6XCIoMzAwQSwwMEY1KVwiLHZyOlwiU0hcIixuYW1lOlwiQmxvY2tUcmF5SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEY2KVwiOnt0YWc6XCIoMzAwQSwwMEY2KVwiLHZyOlwiRFNcIixuYW1lOlwiU291cmNlVG9CbG9ja1RyYXlEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRjcpXCI6e3RhZzpcIigzMDBBLDAwRjcpXCIsdnI6XCJGTFwiLG5hbWU6XCJJc29jZW50ZXJUb0Jsb2NrVHJheURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGOClcIjp7dGFnOlwiKDMwMEEsMDBGOClcIix2cjpcIkNTXCIsbmFtZTpcIkJsb2NrVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRjkpXCI6e3RhZzpcIigzMDBBLDAwRjkpXCIsdnI6XCJMT1wiLG5hbWU6XCJBY2Nlc3NvcnlDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDBGQSlcIjp7dGFnOlwiKDMwMEEsMDBGQSlcIix2cjpcIkNTXCIsbmFtZTpcIkJsb2NrRGl2ZXJnZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAwRkIpXCI6e3RhZzpcIigzMDBBLDAwRkIpXCIsdnI6XCJDU1wiLG5hbWU6XCJCbG9ja01vdW50aW5nUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEZDKVwiOnt0YWc6XCIoMzAwQSwwMEZDKVwiLHZyOlwiSVNcIixuYW1lOlwiQmxvY2tOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMEZFKVwiOnt0YWc6XCIoMzAwQSwwMEZFKVwiLHZyOlwiTE9cIixuYW1lOlwiQmxvY2tOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEwMClcIjp7dGFnOlwiKDMwMEEsMDEwMClcIix2cjpcIkRTXCIsbmFtZTpcIkJsb2NrVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEwMilcIjp7dGFnOlwiKDMwMEEsMDEwMilcIix2cjpcIkRTXCIsbmFtZTpcIkJsb2NrVHJhbnNtaXNzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEwNClcIjp7dGFnOlwiKDMwMEEsMDEwNClcIix2cjpcIklTXCIsbmFtZTpcIkJsb2NrTnVtYmVyT2ZQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTA2KVwiOnt0YWc6XCIoMzAwQSwwMTA2KVwiLHZyOlwiRFNcIixuYW1lOlwiQmxvY2tEYXRhXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEwNylcIjp7dGFnOlwiKDMwMEEsMDEwNylcIix2cjpcIlNRXCIsbmFtZTpcIkFwcGxpY2F0b3JTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMDgpXCI6e3RhZzpcIigzMDBBLDAxMDgpXCIsdnI6XCJTSFwiLG5hbWU6XCJBcHBsaWNhdG9ySURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTA5KVwiOnt0YWc6XCIoMzAwQSwwMTA5KVwiLHZyOlwiQ1NcIixuYW1lOlwiQXBwbGljYXRvclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTBBKVwiOnt0YWc6XCIoMzAwQSwwMTBBKVwiLHZyOlwiTE9cIixuYW1lOlwiQXBwbGljYXRvckRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEwQylcIjp7dGFnOlwiKDMwMEEsMDEwQylcIix2cjpcIkRTXCIsbmFtZTpcIkN1bXVsYXRpdmVEb3NlUmVmZXJlbmNlQ29lZmZpY2llbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTBFKVwiOnt0YWc6XCIoMzAwQSwwMTBFKVwiLHZyOlwiRFNcIixuYW1lOlwiRmluYWxDdW11bGF0aXZlTWV0ZXJzZXRXZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTEwKVwiOnt0YWc6XCIoMzAwQSwwMTEwKVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZDb250cm9sUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExMSlcIjp7dGFnOlwiKDMwMEEsMDExMSlcIix2cjpcIlNRXCIsbmFtZTpcIkNvbnRyb2xQb2ludFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExMilcIjp7dGFnOlwiKDMwMEEsMDExMilcIix2cjpcIklTXCIsbmFtZTpcIkNvbnRyb2xQb2ludEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExNClcIjp7dGFnOlwiKDMwMEEsMDExNClcIix2cjpcIkRTXCIsbmFtZTpcIk5vbWluYWxCZWFtRW5lcmd5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExNSlcIjp7dGFnOlwiKDMwMEEsMDExNSlcIix2cjpcIkRTXCIsbmFtZTpcIkRvc2VSYXRlU2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExNilcIjp7dGFnOlwiKDMwMEEsMDExNilcIix2cjpcIlNRXCIsbmFtZTpcIldlZGdlUG9zaXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMTgpXCI6e3RhZzpcIigzMDBBLDAxMTgpXCIsdnI6XCJDU1wiLG5hbWU6XCJXZWRnZVBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDExQSlcIjp7dGFnOlwiKDMwMEEsMDExQSlcIix2cjpcIlNRXCIsbmFtZTpcIkJlYW1MaW1pdGluZ0RldmljZVBvc2l0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTFDKVwiOnt0YWc6XCIoMzAwQSwwMTFDKVwiLHZyOlwiRFNcIixuYW1lOlwiTGVhZkphd1Bvc2l0aW9uc1wiLHZtOlwiMi0yblwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMUUpXCI6e3RhZzpcIigzMDBBLDAxMUUpXCIsdnI6XCJEU1wiLG5hbWU6XCJHYW50cnlBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMUYpXCI6e3RhZzpcIigzMDBBLDAxMUYpXCIsdnI6XCJDU1wiLG5hbWU6XCJHYW50cnlSb3RhdGlvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMjApXCI6e3RhZzpcIigzMDBBLDAxMjApXCIsdnI6XCJEU1wiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMjEpXCI6e3RhZzpcIigzMDBBLDAxMjEpXCIsdnI6XCJDU1wiLG5hbWU6XCJCZWFtTGltaXRpbmdEZXZpY2VSb3RhdGlvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMjIpXCI6e3RhZzpcIigzMDBBLDAxMjIpXCIsdnI6XCJEU1wiLG5hbWU6XCJQYXRpZW50U3VwcG9ydEFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEyMylcIjp7dGFnOlwiKDMwMEEsMDEyMylcIix2cjpcIkNTXCIsbmFtZTpcIlBhdGllbnRTdXBwb3J0Um90YXRpb25EaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTI0KVwiOnt0YWc6XCIoMzAwQSwwMTI0KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BFY2NlbnRyaWNBeGlzRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTI1KVwiOnt0YWc6XCIoMzAwQSwwMTI1KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BFY2NlbnRyaWNBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMjYpXCI6e3RhZzpcIigzMDBBLDAxMjYpXCIsdnI6XCJDU1wiLG5hbWU6XCJUYWJsZVRvcEVjY2VudHJpY1JvdGF0aW9uRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEyOClcIjp7dGFnOlwiKDMwMEEsMDEyOClcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlVG9wVmVydGljYWxQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMjkpXCI6e3RhZzpcIigzMDBBLDAxMjkpXCIsdnI6XCJEU1wiLG5hbWU6XCJUYWJsZVRvcExvbmdpdHVkaW5hbFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEyQSlcIjp7dGFnOlwiKDMwMEEsMDEyQSlcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlVG9wTGF0ZXJhbFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEyQylcIjp7dGFnOlwiKDMwMEEsMDEyQylcIix2cjpcIkRTXCIsbmFtZTpcIklzb2NlbnRlclBvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEyRSlcIjp7dGFnOlwiKDMwMEEsMDEyRSlcIix2cjpcIkRTXCIsbmFtZTpcIlN1cmZhY2VFbnRyeVBvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEzMClcIjp7dGFnOlwiKDMwMEEsMDEzMClcIix2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZVRvU3VyZmFjZURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEzMSlcIjp7dGFnOlwiKDMwMEEsMDEzMSlcIix2cjpcIkZMXCIsbmFtZTpcIkF2ZXJhZ2VCZWFtRG9zZVBvaW50U291cmNlVG9FeHRlcm5hbENvbnRvdXJTdXJmYWNlRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTMyKVwiOnt0YWc6XCIoMzAwQSwwMTMyKVwiLHZyOlwiRkxcIixuYW1lOlwiU291cmNlVG9FeHRlcm5hbENvbnRvdXJEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxMzMpXCI6e3RhZzpcIigzMDBBLDAxMzMpXCIsdnI6XCJGTFwiLG5hbWU6XCJFeHRlcm5hbENvbnRvdXJFbnRyeVBvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDEzNClcIjp7dGFnOlwiKDMwMEEsMDEzNClcIix2cjpcIkRTXCIsbmFtZTpcIkN1bXVsYXRpdmVNZXRlcnNldFdlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxNDApXCI6e3RhZzpcIigzMDBBLDAxNDApXCIsdnI6XCJGTFwiLG5hbWU6XCJUYWJsZVRvcFBpdGNoQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTQyKVwiOnt0YWc6XCIoMzAwQSwwMTQyKVwiLHZyOlwiQ1NcIixuYW1lOlwiVGFibGVUb3BQaXRjaFJvdGF0aW9uRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE0NClcIjp7dGFnOlwiKDMwMEEsMDE0NClcIix2cjpcIkZMXCIsbmFtZTpcIlRhYmxlVG9wUm9sbEFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE0NilcIjp7dGFnOlwiKDMwMEEsMDE0NilcIix2cjpcIkNTXCIsbmFtZTpcIlRhYmxlVG9wUm9sbFJvdGF0aW9uRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE0OClcIjp7dGFnOlwiKDMwMEEsMDE0OClcIix2cjpcIkZMXCIsbmFtZTpcIkhlYWRGaXhhdGlvbkFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE0QSlcIjp7dGFnOlwiKDMwMEEsMDE0QSlcIix2cjpcIkZMXCIsbmFtZTpcIkdhbnRyeVBpdGNoQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTRDKVwiOnt0YWc6XCIoMzAwQSwwMTRDKVwiLHZyOlwiQ1NcIixuYW1lOlwiR2FudHJ5UGl0Y2hSb3RhdGlvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxNEUpXCI6e3RhZzpcIigzMDBBLDAxNEUpXCIsdnI6XCJGTFwiLG5hbWU6XCJHYW50cnlQaXRjaEFuZ2xlVG9sZXJhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE4MClcIjp7dGFnOlwiKDMwMEEsMDE4MClcIix2cjpcIlNRXCIsbmFtZTpcIlBhdGllbnRTZXR1cFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE4MilcIjp7dGFnOlwiKDMwMEEsMDE4MilcIix2cjpcIklTXCIsbmFtZTpcIlBhdGllbnRTZXR1cE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxODMpXCI6e3RhZzpcIigzMDBBLDAxODMpXCIsdnI6XCJMT1wiLG5hbWU6XCJQYXRpZW50U2V0dXBMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxODQpXCI6e3RhZzpcIigzMDBBLDAxODQpXCIsdnI6XCJMT1wiLG5hbWU6XCJQYXRpZW50QWRkaXRpb25hbFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE5MClcIjp7dGFnOlwiKDMwMEEsMDE5MClcIix2cjpcIlNRXCIsbmFtZTpcIkZpeGF0aW9uRGV2aWNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTkyKVwiOnt0YWc6XCIoMzAwQSwwMTkyKVwiLHZyOlwiQ1NcIixuYW1lOlwiRml4YXRpb25EZXZpY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE5NClcIjp7dGFnOlwiKDMwMEEsMDE5NClcIix2cjpcIlNIXCIsbmFtZTpcIkZpeGF0aW9uRGV2aWNlTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMTk2KVwiOnt0YWc6XCIoMzAwQSwwMTk2KVwiLHZyOlwiU1RcIixuYW1lOlwiRml4YXRpb25EZXZpY2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxOTgpXCI6e3RhZzpcIigzMDBBLDAxOTgpXCIsdnI6XCJTSFwiLG5hbWU6XCJGaXhhdGlvbkRldmljZVBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDE5OSlcIjp7dGFnOlwiKDMwMEEsMDE5OSlcIix2cjpcIkZMXCIsbmFtZTpcIkZpeGF0aW9uRGV2aWNlUGl0Y2hBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxOUEpXCI6e3RhZzpcIigzMDBBLDAxOUEpXCIsdnI6XCJGTFwiLG5hbWU6XCJGaXhhdGlvbkRldmljZVJvbGxBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxQTApXCI6e3RhZzpcIigzMDBBLDAxQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJTaGllbGRpbmdEZXZpY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxQTIpXCI6e3RhZzpcIigzMDBBLDAxQTIpXCIsdnI6XCJDU1wiLG5hbWU6XCJTaGllbGRpbmdEZXZpY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFBNClcIjp7dGFnOlwiKDMwMEEsMDFBNClcIix2cjpcIlNIXCIsbmFtZTpcIlNoaWVsZGluZ0RldmljZUxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFBNilcIjp7dGFnOlwiKDMwMEEsMDFBNilcIix2cjpcIlNUXCIsbmFtZTpcIlNoaWVsZGluZ0RldmljZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFBOClcIjp7dGFnOlwiKDMwMEEsMDFBOClcIix2cjpcIlNIXCIsbmFtZTpcIlNoaWVsZGluZ0RldmljZVBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFCMClcIjp7dGFnOlwiKDMwMEEsMDFCMClcIix2cjpcIkNTXCIsbmFtZTpcIlNldHVwVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFCMilcIjp7dGFnOlwiKDMwMEEsMDFCMilcIix2cjpcIlNUXCIsbmFtZTpcIlNldHVwVGVjaG5pcXVlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMUI0KVwiOnt0YWc6XCIoMzAwQSwwMUI0KVwiLHZyOlwiU1FcIixuYW1lOlwiU2V0dXBEZXZpY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxQjYpXCI6e3RhZzpcIigzMDBBLDAxQjYpXCIsdnI6XCJDU1wiLG5hbWU6XCJTZXR1cERldmljZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMUI4KVwiOnt0YWc6XCIoMzAwQSwwMUI4KVwiLHZyOlwiU0hcIixuYW1lOlwiU2V0dXBEZXZpY2VMYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAxQkEpXCI6e3RhZzpcIigzMDBBLDAxQkEpXCIsdnI6XCJTVFwiLG5hbWU6XCJTZXR1cERldmljZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFCQylcIjp7dGFnOlwiKDMwMEEsMDFCQylcIix2cjpcIkRTXCIsbmFtZTpcIlNldHVwRGV2aWNlUGFyYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFEMClcIjp7dGFnOlwiKDMwMEEsMDFEMClcIix2cjpcIlNUXCIsbmFtZTpcIlNldHVwUmVmZXJlbmNlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMUQyKVwiOnt0YWc6XCIoMzAwQSwwMUQyKVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BWZXJ0aWNhbFNldHVwRGlzcGxhY2VtZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDFENClcIjp7dGFnOlwiKDMwMEEsMDFENClcIix2cjpcIkRTXCIsbmFtZTpcIlRhYmxlVG9wTG9uZ2l0dWRpbmFsU2V0dXBEaXNwbGFjZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMUQ2KVwiOnt0YWc6XCIoMzAwQSwwMUQ2KVwiLHZyOlwiRFNcIixuYW1lOlwiVGFibGVUb3BMYXRlcmFsU2V0dXBEaXNwbGFjZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjAwKVwiOnt0YWc6XCIoMzAwQSwwMjAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQnJhY2h5VHJlYXRtZW50VGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDIwMilcIjp7dGFnOlwiKDMwMEEsMDIwMilcIix2cjpcIkNTXCIsbmFtZTpcIkJyYWNoeVRyZWF0bWVudFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjA2KVwiOnt0YWc6XCIoMzAwQSwwMjA2KVwiLHZyOlwiU1FcIixuYW1lOlwiVHJlYXRtZW50TWFjaGluZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDIxMClcIjp7dGFnOlwiKDMwMEEsMDIxMClcIix2cjpcIlNRXCIsbmFtZTpcIlNvdXJjZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDIxMilcIjp7dGFnOlwiKDMwMEEsMDIxMilcIix2cjpcIklTXCIsbmFtZTpcIlNvdXJjZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMTQpXCI6e3RhZzpcIigzMDBBLDAyMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJTb3VyY2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDIxNilcIjp7dGFnOlwiKDMwMEEsMDIxNilcIix2cjpcIkxPXCIsbmFtZTpcIlNvdXJjZU1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMTgpXCI6e3RhZzpcIigzMDBBLDAyMTgpXCIsdnI6XCJEU1wiLG5hbWU6XCJBY3RpdmVTb3VyY2VEaWFtZXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMUEpXCI6e3RhZzpcIigzMDBBLDAyMUEpXCIsdnI6XCJEU1wiLG5hbWU6XCJBY3RpdmVTb3VyY2VMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjFCKVwiOnt0YWc6XCIoMzAwQSwwMjFCKVwiLHZyOlwiU0hcIixuYW1lOlwiU291cmNlTW9kZWxJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMUMpXCI6e3RhZzpcIigzMDBBLDAyMUMpXCIsdnI6XCJMT1wiLG5hbWU6XCJTb3VyY2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMjIpXCI6e3RhZzpcIigzMDBBLDAyMjIpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VFbmNhcHN1bGF0aW9uTm9taW5hbFRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMjQpXCI6e3RhZzpcIigzMDBBLDAyMjQpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VFbmNhcHN1bGF0aW9uTm9taW5hbFRyYW5zbWlzc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMjYpXCI6e3RhZzpcIigzMDBBLDAyMjYpXCIsdnI6XCJMT1wiLG5hbWU6XCJTb3VyY2VJc290b3BlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMjgpXCI6e3RhZzpcIigzMDBBLDAyMjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VJc290b3BlSGFsZkxpZmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjI5KVwiOnt0YWc6XCIoMzAwQSwwMjI5KVwiLHZyOlwiQ1NcIixuYW1lOlwiU291cmNlU3RyZW5ndGhVbml0c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMkEpXCI6e3RhZzpcIigzMDBBLDAyMkEpXCIsdnI6XCJEU1wiLG5hbWU6XCJSZWZlcmVuY2VBaXJLZXJtYVJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjJCKVwiOnt0YWc6XCIoMzAwQSwwMjJCKVwiLHZyOlwiRFNcIixuYW1lOlwiU291cmNlU3RyZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjJDKVwiOnt0YWc6XCIoMzAwQSwwMjJDKVwiLHZyOlwiREFcIixuYW1lOlwiU291cmNlU3RyZW5ndGhSZWZlcmVuY2VEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDIyRSlcIjp7dGFnOlwiKDMwMEEsMDIyRSlcIix2cjpcIlRNXCIsbmFtZTpcIlNvdXJjZVN0cmVuZ3RoUmVmZXJlbmNlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMzApXCI6e3RhZzpcIigzMDBBLDAyMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJBcHBsaWNhdGlvblNldHVwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjMyKVwiOnt0YWc6XCIoMzAwQSwwMjMyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQXBwbGljYXRpb25TZXR1cFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjM0KVwiOnt0YWc6XCIoMzAwQSwwMjM0KVwiLHZyOlwiSVNcIixuYW1lOlwiQXBwbGljYXRpb25TZXR1cE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMzYpXCI6e3RhZzpcIigzMDBBLDAyMzYpXCIsdnI6XCJMT1wiLG5hbWU6XCJBcHBsaWNhdGlvblNldHVwTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyMzgpXCI6e3RhZzpcIigzMDBBLDAyMzgpXCIsdnI6XCJMT1wiLG5hbWU6XCJBcHBsaWNhdGlvblNldHVwTWFudWZhY3R1cmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI0MClcIjp7dGFnOlwiKDMwMEEsMDI0MClcIix2cjpcIklTXCIsbmFtZTpcIlRlbXBsYXRlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI0MilcIjp7dGFnOlwiKDMwMEEsMDI0MilcIix2cjpcIlNIXCIsbmFtZTpcIlRlbXBsYXRlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyNDQpXCI6e3RhZzpcIigzMDBBLDAyNDQpXCIsdnI6XCJMT1wiLG5hbWU6XCJUZW1wbGF0ZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjUwKVwiOnt0YWc6XCIoMzAwQSwwMjUwKVwiLHZyOlwiRFNcIixuYW1lOlwiVG90YWxSZWZlcmVuY2VBaXJLZXJtYVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyNjApXCI6e3RhZzpcIigzMDBBLDAyNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJCcmFjaHlBY2Nlc3NvcnlEZXZpY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyNjIpXCI6e3RhZzpcIigzMDBBLDAyNjIpXCIsdnI6XCJJU1wiLG5hbWU6XCJCcmFjaHlBY2Nlc3NvcnlEZXZpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjYzKVwiOnt0YWc6XCIoMzAwQSwwMjYzKVwiLHZyOlwiU0hcIixuYW1lOlwiQnJhY2h5QWNjZXNzb3J5RGV2aWNlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjY0KVwiOnt0YWc6XCIoMzAwQSwwMjY0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQnJhY2h5QWNjZXNzb3J5RGV2aWNlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyNjYpXCI6e3RhZzpcIigzMDBBLDAyNjYpXCIsdnI6XCJMT1wiLG5hbWU6XCJCcmFjaHlBY2Nlc3NvcnlEZXZpY2VOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI2QSlcIjp7dGFnOlwiKDMwMEEsMDI2QSlcIix2cjpcIkRTXCIsbmFtZTpcIkJyYWNoeUFjY2Vzc29yeURldmljZU5vbWluYWxUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjZDKVwiOnt0YWc6XCIoMzAwQSwwMjZDKVwiLHZyOlwiRFNcIixuYW1lOlwiQnJhY2h5QWNjZXNzb3J5RGV2aWNlTm9taW5hbFRyYW5zbWlzc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyODApXCI6e3RhZzpcIigzMDBBLDAyODApXCIsdnI6XCJTUVwiLG5hbWU6XCJDaGFubmVsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjgyKVwiOnt0YWc6XCIoMzAwQSwwMjgyKVwiLHZyOlwiSVNcIixuYW1lOlwiQ2hhbm5lbE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyODQpXCI6e3RhZzpcIigzMDBBLDAyODQpXCIsdnI6XCJEU1wiLG5hbWU6XCJDaGFubmVsTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI4NilcIjp7dGFnOlwiKDMwMEEsMDI4NilcIix2cjpcIkRTXCIsbmFtZTpcIkNoYW5uZWxUb3RhbFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjg4KVwiOnt0YWc6XCIoMzAwQSwwMjg4KVwiLHZyOlwiQ1NcIixuYW1lOlwiU291cmNlTW92ZW1lbnRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI4QSlcIjp7dGFnOlwiKDMwMEEsMDI4QSlcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUHVsc2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI4QylcIjp7dGFnOlwiKDMwMEEsMDI4QylcIix2cjpcIkRTXCIsbmFtZTpcIlB1bHNlUmVwZXRpdGlvbkludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI5MClcIjp7dGFnOlwiKDMwMEEsMDI5MClcIix2cjpcIklTXCIsbmFtZTpcIlNvdXJjZUFwcGxpY2F0b3JOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjkxKVwiOnt0YWc6XCIoMzAwQSwwMjkxKVwiLHZyOlwiU0hcIixuYW1lOlwiU291cmNlQXBwbGljYXRvcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI5MilcIjp7dGFnOlwiKDMwMEEsMDI5MilcIix2cjpcIkNTXCIsbmFtZTpcIlNvdXJjZUFwcGxpY2F0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI5NClcIjp7dGFnOlwiKDMwMEEsMDI5NClcIix2cjpcIkxPXCIsbmFtZTpcIlNvdXJjZUFwcGxpY2F0b3JOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDI5NilcIjp7dGFnOlwiKDMwMEEsMDI5NilcIix2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZUFwcGxpY2F0b3JMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjk4KVwiOnt0YWc6XCIoMzAwQSwwMjk4KVwiLHZyOlwiTE9cIixuYW1lOlwiU291cmNlQXBwbGljYXRvck1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyOUMpXCI6e3RhZzpcIigzMDBBLDAyOUMpXCIsdnI6XCJEU1wiLG5hbWU6XCJTb3VyY2VBcHBsaWNhdG9yV2FsbE5vbWluYWxUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMjlFKVwiOnt0YWc6XCIoMzAwQSwwMjlFKVwiLHZyOlwiRFNcIixuYW1lOlwiU291cmNlQXBwbGljYXRvcldhbGxOb21pbmFsVHJhbnNtaXNzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJBMClcIjp7dGFnOlwiKDMwMEEsMDJBMClcIix2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZUFwcGxpY2F0b3JTdGVwU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQTIpXCI6e3RhZzpcIigzMDBBLDAyQTIpXCIsdnI6XCJJU1wiLG5hbWU6XCJUcmFuc2ZlclR1YmVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkE0KVwiOnt0YWc6XCIoMzAwQSwwMkE0KVwiLHZyOlwiRFNcIixuYW1lOlwiVHJhbnNmZXJUdWJlTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJCMClcIjp7dGFnOlwiKDMwMEEsMDJCMClcIix2cjpcIlNRXCIsbmFtZTpcIkNoYW5uZWxTaGllbGRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQjIpXCI6e3RhZzpcIigzMDBBLDAyQjIpXCIsdnI6XCJJU1wiLG5hbWU6XCJDaGFubmVsU2hpZWxkTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJCMylcIjp7dGFnOlwiKDMwMEEsMDJCMylcIix2cjpcIlNIXCIsbmFtZTpcIkNoYW5uZWxTaGllbGRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQjQpXCI6e3RhZzpcIigzMDBBLDAyQjQpXCIsdnI6XCJMT1wiLG5hbWU6XCJDaGFubmVsU2hpZWxkTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQjgpXCI6e3RhZzpcIigzMDBBLDAyQjgpXCIsdnI6XCJEU1wiLG5hbWU6XCJDaGFubmVsU2hpZWxkTm9taW5hbFRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQkEpXCI6e3RhZzpcIigzMDBBLDAyQkEpXCIsdnI6XCJEU1wiLG5hbWU6XCJDaGFubmVsU2hpZWxkTm9taW5hbFRyYW5zbWlzc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyQzgpXCI6e3RhZzpcIigzMDBBLDAyQzgpXCIsdnI6XCJEU1wiLG5hbWU6XCJGaW5hbEN1bXVsYXRpdmVUaW1lV2VpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJEMClcIjp7dGFnOlwiKDMwMEEsMDJEMClcIix2cjpcIlNRXCIsbmFtZTpcIkJyYWNoeUNvbnRyb2xQb2ludFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJEMilcIjp7dGFnOlwiKDMwMEEsMDJEMilcIix2cjpcIkRTXCIsbmFtZTpcIkNvbnRyb2xQb2ludFJlbGF0aXZlUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkQ0KVwiOnt0YWc6XCIoMzAwQSwwMkQ0KVwiLHZyOlwiRFNcIixuYW1lOlwiQ29udHJvbFBvaW50M0RQb3NpdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyRDYpXCI6e3RhZzpcIigzMDBBLDAyRDYpXCIsdnI6XCJEU1wiLG5hbWU6XCJDdW11bGF0aXZlVGltZVdlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyRTApXCI6e3RhZzpcIigzMDBBLDAyRTApXCIsdnI6XCJDU1wiLG5hbWU6XCJDb21wZW5zYXRvckRpdmVyZ2VuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkUxKVwiOnt0YWc6XCIoMzAwQSwwMkUxKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29tcGVuc2F0b3JNb3VudGluZ1Bvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJFMilcIjp7dGFnOlwiKDMwMEEsMDJFMilcIix2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZVRvQ29tcGVuc2F0b3JEaXN0YW5jZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJFMylcIjp7dGFnOlwiKDMwMEEsMDJFMylcIix2cjpcIkZMXCIsbmFtZTpcIlRvdGFsQ29tcGVuc2F0b3JUcmF5V2F0ZXJFcXVpdmFsZW50VGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJFNClcIjp7dGFnOlwiKDMwMEEsMDJFNClcIix2cjpcIkZMXCIsbmFtZTpcIklzb2NlbnRlclRvQ29tcGVuc2F0b3JUcmF5RGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkU1KVwiOnt0YWc6XCIoMzAwQSwwMkU1KVwiLHZyOlwiRkxcIixuYW1lOlwiQ29tcGVuc2F0b3JDb2x1bW5PZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkU2KVwiOnt0YWc6XCIoMzAwQSwwMkU2KVwiLHZyOlwiRkxcIixuYW1lOlwiSXNvY2VudGVyVG9Db21wZW5zYXRvckRpc3RhbmNlc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJFNylcIjp7dGFnOlwiKDMwMEEsMDJFNylcIix2cjpcIkZMXCIsbmFtZTpcIkNvbXBlbnNhdG9yUmVsYXRpdmVTdG9wcGluZ1Bvd2VyUmF0aW9cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMkU4KVwiOnt0YWc6XCIoMzAwQSwwMkU4KVwiLHZyOlwiRkxcIixuYW1lOlwiQ29tcGVuc2F0b3JNaWxsaW5nVG9vbERpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDJFQSlcIjp7dGFnOlwiKDMwMEEsMDJFQSlcIix2cjpcIlNRXCIsbmFtZTpcIklvblJhbmdlQ29tcGVuc2F0b3JTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAyRUIpXCI6e3RhZzpcIigzMDBBLDAyRUIpXCIsdnI6XCJMVFwiLG5hbWU6XCJDb21wZW5zYXRvckRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMwMilcIjp7dGFnOlwiKDMwMEEsMDMwMilcIix2cjpcIklTXCIsbmFtZTpcIlJhZGlhdGlvbk1hc3NOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzA0KVwiOnt0YWc6XCIoMzAwQSwwMzA0KVwiLHZyOlwiSVNcIixuYW1lOlwiUmFkaWF0aW9uQXRvbWljTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMwNilcIjp7dGFnOlwiKDMwMEEsMDMwNilcIix2cjpcIlNTXCIsbmFtZTpcIlJhZGlhdGlvbkNoYXJnZVN0YXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMwOClcIjp7dGFnOlwiKDMwMEEsMDMwOClcIix2cjpcIkNTXCIsbmFtZTpcIlNjYW5Nb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMwQSlcIjp7dGFnOlwiKDMwMEEsMDMwQSlcIix2cjpcIkZMXCIsbmFtZTpcIlZpcnR1YWxTb3VyY2VBeGlzRGlzdGFuY2VzXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMwQylcIjp7dGFnOlwiKDMwMEEsMDMwQylcIix2cjpcIlNRXCIsbmFtZTpcIlNub3V0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzBEKVwiOnt0YWc6XCIoMzAwQSwwMzBEKVwiLHZyOlwiRkxcIixuYW1lOlwiU25vdXRQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMEYpXCI6e3RhZzpcIigzMDBBLDAzMEYpXCIsdnI6XCJTSFwiLG5hbWU6XCJTbm91dElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMxMilcIjp7dGFnOlwiKDMwMEEsMDMxMilcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUmFuZ2VTaGlmdGVyc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMTQpXCI6e3RhZzpcIigzMDBBLDAzMTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSYW5nZVNoaWZ0ZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMTYpXCI6e3RhZzpcIigzMDBBLDAzMTYpXCIsdnI6XCJJU1wiLG5hbWU6XCJSYW5nZVNoaWZ0ZXJOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzE4KVwiOnt0YWc6XCIoMzAwQSwwMzE4KVwiLHZyOlwiU0hcIixuYW1lOlwiUmFuZ2VTaGlmdGVySURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzIwKVwiOnt0YWc6XCIoMzAwQSwwMzIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmFuZ2VTaGlmdGVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMjIpXCI6e3RhZzpcIigzMDBBLDAzMjIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSYW5nZVNoaWZ0ZXJEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMzApXCI6e3RhZzpcIigzMDBBLDAzMzApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkxhdGVyYWxTcHJlYWRpbmdEZXZpY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMzMilcIjp7dGFnOlwiKDMwMEEsMDMzMilcIix2cjpcIlNRXCIsbmFtZTpcIkxhdGVyYWxTcHJlYWRpbmdEZXZpY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMzQpXCI6e3RhZzpcIigzMDBBLDAzMzQpXCIsdnI6XCJJU1wiLG5hbWU6XCJMYXRlcmFsU3ByZWFkaW5nRGV2aWNlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDMzNilcIjp7dGFnOlwiKDMwMEEsMDMzNilcIix2cjpcIlNIXCIsbmFtZTpcIkxhdGVyYWxTcHJlYWRpbmdEZXZpY2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzMzgpXCI6e3RhZzpcIigzMDBBLDAzMzgpXCIsdnI6XCJDU1wiLG5hbWU6XCJMYXRlcmFsU3ByZWFkaW5nRGV2aWNlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzM0EpXCI6e3RhZzpcIigzMDBBLDAzM0EpXCIsdnI6XCJMT1wiLG5hbWU6XCJMYXRlcmFsU3ByZWFkaW5nRGV2aWNlRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzNDKVwiOnt0YWc6XCIoMzAwQSwwMzNDKVwiLHZyOlwiRkxcIixuYW1lOlwiTGF0ZXJhbFNwcmVhZGluZ0RldmljZVdhdGVyRXF1aXZhbGVudFRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzNDApXCI6e3RhZzpcIigzMDBBLDAzNDApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlJhbmdlTW9kdWxhdG9yc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzNDIpXCI6e3RhZzpcIigzMDBBLDAzNDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSYW5nZU1vZHVsYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM0NClcIjp7dGFnOlwiKDMwMEEsMDM0NClcIix2cjpcIklTXCIsbmFtZTpcIlJhbmdlTW9kdWxhdG9yTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM0NilcIjp7dGFnOlwiKDMwMEEsMDM0NilcIix2cjpcIlNIXCIsbmFtZTpcIlJhbmdlTW9kdWxhdG9ySURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzQ4KVwiOnt0YWc6XCIoMzAwQSwwMzQ4KVwiLHZyOlwiQ1NcIixuYW1lOlwiUmFuZ2VNb2R1bGF0b3JUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM0QSlcIjp7dGFnOlwiKDMwMEEsMDM0QSlcIix2cjpcIkxPXCIsbmFtZTpcIlJhbmdlTW9kdWxhdG9yRGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzRDKVwiOnt0YWc6XCIoMzAwQSwwMzRDKVwiLHZyOlwiU0hcIixuYW1lOlwiQmVhbUN1cnJlbnRNb2R1bGF0aW9uSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzUwKVwiOnt0YWc6XCIoMzAwQSwwMzUwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUGF0aWVudFN1cHBvcnRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM1MilcIjp7dGFnOlwiKDMwMEEsMDM1MilcIix2cjpcIlNIXCIsbmFtZTpcIlBhdGllbnRTdXBwb3J0SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzU0KVwiOnt0YWc6XCIoMzAwQSwwMzU0KVwiLHZyOlwiTE9cIixuYW1lOlwiUGF0aWVudFN1cHBvcnRBY2Nlc3NvcnlDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM1NilcIjp7dGFnOlwiKDMwMEEsMDM1NilcIix2cjpcIkZMXCIsbmFtZTpcIkZpeGF0aW9uTGlnaHRBemltdXRoYWxBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzNTgpXCI6e3RhZzpcIigzMDBBLDAzNTgpXCIsdnI6XCJGTFwiLG5hbWU6XCJGaXhhdGlvbkxpZ2h0UG9sYXJBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzNUEpXCI6e3RhZzpcIigzMDBBLDAzNUEpXCIsdnI6XCJGTFwiLG5hbWU6XCJNZXRlcnNldFJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzYwKVwiOnt0YWc6XCIoMzAwQSwwMzYwKVwiLHZyOlwiU1FcIixuYW1lOlwiUmFuZ2VTaGlmdGVyU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzNjIpXCI6e3RhZzpcIigzMDBBLDAzNjIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSYW5nZVNoaWZ0ZXJTZXR0aW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM2NClcIjp7dGFnOlwiKDMwMEEsMDM2NClcIix2cjpcIkZMXCIsbmFtZTpcIklzb2NlbnRlclRvUmFuZ2VTaGlmdGVyRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzY2KVwiOnt0YWc6XCIoMzAwQSwwMzY2KVwiLHZyOlwiRkxcIixuYW1lOlwiUmFuZ2VTaGlmdGVyV2F0ZXJFcXVpdmFsZW50VGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM3MClcIjp7dGFnOlwiKDMwMEEsMDM3MClcIix2cjpcIlNRXCIsbmFtZTpcIkxhdGVyYWxTcHJlYWRpbmdEZXZpY2VTZXR0aW5nc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM3MilcIjp7dGFnOlwiKDMwMEEsMDM3MilcIix2cjpcIkxPXCIsbmFtZTpcIkxhdGVyYWxTcHJlYWRpbmdEZXZpY2VTZXR0aW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM3NClcIjp7dGFnOlwiKDMwMEEsMDM3NClcIix2cjpcIkZMXCIsbmFtZTpcIklzb2NlbnRlclRvTGF0ZXJhbFNwcmVhZGluZ0RldmljZURpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM4MClcIjp7dGFnOlwiKDMwMEEsMDM4MClcIix2cjpcIlNRXCIsbmFtZTpcIlJhbmdlTW9kdWxhdG9yU2V0dGluZ3NTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzODIpXCI6e3RhZzpcIigzMDBBLDAzODIpXCIsdnI6XCJGTFwiLG5hbWU6XCJSYW5nZU1vZHVsYXRvckdhdGluZ1N0YXJ0VmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzg0KVwiOnt0YWc6XCIoMzAwQSwwMzg0KVwiLHZyOlwiRkxcIixuYW1lOlwiUmFuZ2VNb2R1bGF0b3JHYXRpbmdTdG9wVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzg2KVwiOnt0YWc6XCIoMzAwQSwwMzg2KVwiLHZyOlwiRkxcIixuYW1lOlwiUmFuZ2VNb2R1bGF0b3JHYXRpbmdTdGFydFdhdGVyRXF1aXZhbGVudFRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzODgpXCI6e3RhZzpcIigzMDBBLDAzODgpXCIsdnI6XCJGTFwiLG5hbWU6XCJSYW5nZU1vZHVsYXRvckdhdGluZ1N0b3BXYXRlckVxdWl2YWxlbnRUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzhBKVwiOnt0YWc6XCIoMzAwQSwwMzhBKVwiLHZyOlwiRkxcIixuYW1lOlwiSXNvY2VudGVyVG9SYW5nZU1vZHVsYXRvckRpc3RhbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM5MClcIjp7dGFnOlwiKDMwMEEsMDM5MClcIix2cjpcIlNIXCIsbmFtZTpcIlNjYW5TcG90VHVuZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM5MilcIjp7dGFnOlwiKDMwMEEsMDM5MilcIix2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU2NhblNwb3RQb3NpdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzk0KVwiOnt0YWc6XCIoMzAwQSwwMzk0KVwiLHZyOlwiRkxcIixuYW1lOlwiU2NhblNwb3RQb3NpdGlvbk1hcFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDM5NilcIjp7dGFnOlwiKDMwMEEsMDM5NilcIix2cjpcIkZMXCIsbmFtZTpcIlNjYW5TcG90TWV0ZXJzZXRXZWlnaHRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwMzk4KVwiOnt0YWc6XCIoMzAwQSwwMzk4KVwiLHZyOlwiRkxcIixuYW1lOlwiU2Nhbm5pbmdTcG90U2l6ZVwiLHZtOlwiMlwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzOUEpXCI6e3RhZzpcIigzMDBBLDAzOUEpXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlBhaW50aW5nc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzQTApXCI6e3RhZzpcIigzMDBBLDAzQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJJb25Ub2xlcmFuY2VUYWJsZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDNBMilcIjp7dGFnOlwiKDMwMEEsMDNBMilcIix2cjpcIlNRXCIsbmFtZTpcIklvbkJlYW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzQTQpXCI6e3RhZzpcIigzMDBBLDAzQTQpXCIsdnI6XCJTUVwiLG5hbWU6XCJJb25CZWFtTGltaXRpbmdEZXZpY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDAzQTYpXCI6e3RhZzpcIigzMDBBLDAzQTYpXCIsdnI6XCJTUVwiLG5hbWU6XCJJb25CbG9ja1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDNBOClcIjp7dGFnOlwiKDMwMEEsMDNBOClcIix2cjpcIlNRXCIsbmFtZTpcIklvbkNvbnRyb2xQb2ludFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDNBQSlcIjp7dGFnOlwiKDMwMEEsMDNBQSlcIix2cjpcIlNRXCIsbmFtZTpcIklvbldlZGdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwM0FDKVwiOnt0YWc6XCIoMzAwQSwwM0FDKVwiLHZyOlwiU1FcIixuYW1lOlwiSW9uV2VkZ2VQb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQwMSlcIjp7dGFnOlwiKDMwMEEsMDQwMSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRTZXR1cEltYWdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDAyKVwiOnt0YWc6XCIoMzAwQSwwNDAyKVwiLHZyOlwiU1RcIixuYW1lOlwiU2V0dXBJbWFnZUNvbW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDEwKVwiOnt0YWc6XCIoMzAwQSwwNDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiTW90aW9uU3luY2hyb25pemF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDEyKVwiOnt0YWc6XCIoMzAwQSwwNDEyKVwiLHZyOlwiRkxcIixuYW1lOlwiQ29udHJvbFBvaW50T3JpZW50YXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDIwKVwiOnt0YWc6XCIoMzAwQSwwNDIwKVwiLHZyOlwiU1FcIixuYW1lOlwiR2VuZXJhbEFjY2Vzc29yeVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQyMSlcIjp7dGFnOlwiKDMwMEEsMDQyMSlcIix2cjpcIlNIXCIsbmFtZTpcIkdlbmVyYWxBY2Nlc3NvcnlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MjIpXCI6e3RhZzpcIigzMDBBLDA0MjIpXCIsdnI6XCJTVFwiLG5hbWU6XCJHZW5lcmFsQWNjZXNzb3J5RGVzY3JpcHRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDIzKVwiOnt0YWc6XCIoMzAwQSwwNDIzKVwiLHZyOlwiQ1NcIixuYW1lOlwiR2VuZXJhbEFjY2Vzc29yeVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDI0KVwiOnt0YWc6XCIoMzAwQSwwNDI0KVwiLHZyOlwiSVNcIixuYW1lOlwiR2VuZXJhbEFjY2Vzc29yeU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MjUpXCI6e3RhZzpcIigzMDBBLDA0MjUpXCIsdnI6XCJGTFwiLG5hbWU6XCJTb3VyY2VUb0dlbmVyYWxBY2Nlc3NvcnlEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MzEpXCI6e3RhZzpcIigzMDBBLDA0MzEpXCIsdnI6XCJTUVwiLG5hbWU6XCJBcHBsaWNhdG9yR2VvbWV0cnlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MzIpXCI6e3RhZzpcIigzMDBBLDA0MzIpXCIsdnI6XCJDU1wiLG5hbWU6XCJBcHBsaWNhdG9yQXBlcnR1cmVTaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MzMpXCI6e3RhZzpcIigzMDBBLDA0MzMpXCIsdnI6XCJGTFwiLG5hbWU6XCJBcHBsaWNhdG9yT3BlbmluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0MzQpXCI6e3RhZzpcIigzMDBBLDA0MzQpXCIsdnI6XCJGTFwiLG5hbWU6XCJBcHBsaWNhdG9yT3BlbmluZ1hcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDM1KVwiOnt0YWc6XCIoMzAwQSwwNDM1KVwiLHZyOlwiRkxcIixuYW1lOlwiQXBwbGljYXRvck9wZW5pbmdZXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQzNilcIjp7dGFnOlwiKDMwMEEsMDQzNilcIix2cjpcIkZMXCIsbmFtZTpcIlNvdXJjZVRvQXBwbGljYXRvck1vdW50aW5nUG9zaXRpb25EaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0NDApXCI6e3RhZzpcIigzMDBBLDA0NDApXCIsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkJsb2NrU2xhYkl0ZW1zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQ0MSlcIjp7dGFnOlwiKDMwMEEsMDQ0MSlcIix2cjpcIlNRXCIsbmFtZTpcIkJsb2NrU2xhYlNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQ0MilcIjp7dGFnOlwiKDMwMEEsMDQ0MilcIix2cjpcIkRTXCIsbmFtZTpcIkJsb2NrU2xhYlRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBBLDA0NDMpXCI6e3RhZzpcIigzMDBBLDA0NDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJCbG9ja1NsYWJOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDUwKVwiOnt0YWc6XCIoMzAwQSwwNDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiRGV2aWNlTW90aW9uQ29udHJvbFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQ1MSlcIjp7dGFnOlwiKDMwMEEsMDQ1MSlcIix2cjpcIkNTXCIsbmFtZTpcIkRldmljZU1vdGlvbkV4ZWN1dGlvbk1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQSwwNDUyKVwiOnt0YWc6XCIoMzAwQSwwNDUyKVwiLHZyOlwiQ1NcIixuYW1lOlwiRGV2aWNlTW90aW9uT2JzZXJ2YXRpb25Nb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEEsMDQ1MylcIjp7dGFnOlwiKDMwMEEsMDQ1MylcIix2cjpcIlNRXCIsbmFtZTpcIkRldmljZU1vdGlvblBhcmFtZXRlckNvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwMDIpXCI6e3RhZzpcIigzMDBDLDAwMDIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkUlRQbGFuU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDA0KVwiOnt0YWc6XCIoMzAwQywwMDA0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZEJlYW1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwMDYpXCI6e3RhZzpcIigzMDBDLDAwMDYpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkQmVhbU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwMDcpXCI6e3RhZzpcIigzMDBDLDAwMDcpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkUmVmZXJlbmNlSW1hZ2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDA4KVwiOnt0YWc6XCIoMzAwQywwMDA4KVwiLHZyOlwiRFNcIixuYW1lOlwiU3RhcnRDdW11bGF0aXZlTWV0ZXJzZXRXZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDA5KVwiOnt0YWc6XCIoMzAwQywwMDA5KVwiLHZyOlwiRFNcIixuYW1lOlwiRW5kQ3VtdWxhdGl2ZU1ldGVyc2V0V2VpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDAwQSlcIjp7dGFnOlwiKDMwMEMsMDAwQSlcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRCcmFjaHlBcHBsaWNhdGlvblNldHVwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDBDKVwiOnt0YWc6XCIoMzAwQywwMDBDKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZEJyYWNoeUFwcGxpY2F0aW9uU2V0dXBOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDBFKVwiOnt0YWc6XCIoMzAwQywwMDBFKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZFNvdXJjZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwMjApXCI6e3RhZzpcIigzMDBDLDAwMjApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkRnJhY3Rpb25Hcm91cFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDAyMilcIjp7dGFnOlwiKDMwMEMsMDAyMilcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRGcmFjdGlvbkdyb3VwTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDA0MClcIjp7dGFnOlwiKDMwMEMsMDA0MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRWZXJpZmljYXRpb25JbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDA0MilcIjp7dGFnOlwiKDMwMEMsMDA0MilcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWRSZWZlcmVuY2VJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDA1MClcIjp7dGFnOlwiKDMwMEMsMDA1MClcIix2cjpcIlNRXCIsbmFtZTpcIlJlZmVyZW5jZWREb3NlUmVmZXJlbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDUxKVwiOnt0YWc6XCIoMzAwQywwMDUxKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZERvc2VSZWZlcmVuY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDU1KVwiOnt0YWc6XCIoMzAwQywwMDU1KVwiLHZyOlwiU1FcIixuYW1lOlwiQnJhY2h5UmVmZXJlbmNlZERvc2VSZWZlcmVuY2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwNjApXCI6e3RhZzpcIigzMDBDLDAwNjApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkU3RydWN0dXJlU2V0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMDZBKVwiOnt0YWc6XCIoMzAwQywwMDZBKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZFBhdGllbnRTZXR1cE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwODApXCI6e3RhZzpcIigzMDBDLDAwODApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkRG9zZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDBBMClcIjp7dGFnOlwiKDMwMEMsMDBBMClcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRUb2xlcmFuY2VUYWJsZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwQjApXCI6e3RhZzpcIigzMDBDLDAwQjApXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkQm9sdXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwQzApXCI6e3RhZzpcIigzMDBDLDAwQzApXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkV2VkZ2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMEQwKVwiOnt0YWc6XCIoMzAwQywwMEQwKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZENvbXBlbnNhdG9yTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDBFMClcIjp7dGFnOlwiKDMwMEMsMDBFMClcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRCbG9ja051bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAwRjApXCI6e3RhZzpcIigzMDBDLDAwRjApXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkQ29udHJvbFBvaW50SW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMEYyKVwiOnt0YWc6XCIoMzAwQywwMEYyKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZENvbnRyb2xQb2ludFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDBGNClcIjp7dGFnOlwiKDMwMEMsMDBGNClcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRTdGFydENvbnRyb2xQb2ludEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEMsMDBGNilcIjp7dGFnOlwiKDMwMEMsMDBGNilcIix2cjpcIklTXCIsbmFtZTpcIlJlZmVyZW5jZWRTdG9wQ29udHJvbFBvaW50SW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMTAwKVwiOnt0YWc6XCIoMzAwQywwMTAwKVwiLHZyOlwiSVNcIixuYW1lOlwiUmVmZXJlbmNlZFJhbmdlU2hpZnRlck51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAxMDIpXCI6e3RhZzpcIigzMDBDLDAxMDIpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkTGF0ZXJhbFNwcmVhZGluZ0RldmljZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBDLDAxMDQpXCI6e3RhZzpcIigzMDBDLDAxMDQpXCIsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VkUmFuZ2VNb2R1bGF0b3JOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMTExKVwiOnt0YWc6XCIoMzAwQywwMTExKVwiLHZyOlwiU1FcIixuYW1lOlwiT21pdHRlZEJlYW1UYXNrU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMTEyKVwiOnt0YWc6XCIoMzAwQywwMTEyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUmVhc29uRm9yT21pc3Npb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwQywwMTEzKVwiOnt0YWc6XCIoMzAwQywwMTEzKVwiLHZyOlwiTE9cIixuYW1lOlwiUmVhc29uRm9yT21pc3Npb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBFLDAwMDIpXCI6e3RhZzpcIigzMDBFLDAwMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJBcHByb3ZhbFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIigzMDBFLDAwMDQpXCI6e3RhZzpcIigzMDBFLDAwMDQpXCIsdnI6XCJEQVwiLG5hbWU6XCJSZXZpZXdEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDMwMEUsMDAwNSlcIjp7dGFnOlwiKDMwMEUsMDAwNSlcIix2cjpcIlRNXCIsbmFtZTpcIlJldmlld1RpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoMzAwRSwwMDA4KVwiOnt0YWc6XCIoMzAwRSwwMDA4KVwiLHZyOlwiUE5cIixuYW1lOlwiUmV2aWV3ZXJOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDQwMTAsMDAwMSlcIjp7dGFnOlwiKDQwMTAsMDAwMSlcIix2cjpcIkNTXCIsbmFtZTpcIkxvd0VuZXJneURldGVjdG9yc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDAwMDIpXCI6e3RhZzpcIig0MDEwLDAwMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJIaWdoRW5lcmd5RGV0ZWN0b3JzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMDAwNClcIjp7dGFnOlwiKDQwMTAsMDAwNClcIix2cjpcIlNRXCIsbmFtZTpcIkRldGVjdG9yR2VvbWV0cnlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMDEpXCI6e3RhZzpcIig0MDEwLDEwMDEpXCIsdnI6XCJTUVwiLG5hbWU6XCJUaHJlYXRST0lWb3hlbFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAwNClcIjp7dGFnOlwiKDQwMTAsMTAwNClcIix2cjpcIkZMXCIsbmFtZTpcIlRocmVhdFJPSUJhc2VcIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDA1KVwiOnt0YWc6XCIoNDAxMCwxMDA1KVwiLHZyOlwiRkxcIixuYW1lOlwiVGhyZWF0Uk9JRXh0ZW50c1wiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMDYpXCI6e3RhZzpcIig0MDEwLDEwMDYpXCIsdnI6XCJPQlwiLG5hbWU6XCJUaHJlYXRST0lCaXRtYXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDA3KVwiOnt0YWc6XCIoNDAxMCwxMDA3KVwiLHZyOlwiU0hcIixuYW1lOlwiUm91dGVTZWdtZW50SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDA4KVwiOnt0YWc6XCIoNDAxMCwxMDA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiR2FudHJ5VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMDkpXCI6e3RhZzpcIig0MDEwLDEwMDkpXCIsdnI6XCJDU1wiLG5hbWU6XCJPT0lPd25lclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDBBKVwiOnt0YWc6XCIoNDAxMCwxMDBBKVwiLHZyOlwiU1FcIixuYW1lOlwiUm91dGVTZWdtZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDEwKVwiOnt0YWc6XCIoNDAxMCwxMDEwKVwiLHZyOlwiVVNcIixuYW1lOlwiUG90ZW50aWFsVGhyZWF0T2JqZWN0SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDExKVwiOnt0YWc6XCIoNDAxMCwxMDExKVwiLHZyOlwiU1FcIixuYW1lOlwiVGhyZWF0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDEyKVwiOnt0YWc6XCIoNDAxMCwxMDEyKVwiLHZyOlwiQ1NcIixuYW1lOlwiVGhyZWF0Q2F0ZWdvcnlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDEzKVwiOnt0YWc6XCIoNDAxMCwxMDEzKVwiLHZyOlwiTFRcIixuYW1lOlwiVGhyZWF0Q2F0ZWdvcnlEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMTQpXCI6e3RhZzpcIig0MDEwLDEwMTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJBVERBYmlsaXR5QXNzZXNzbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMTUpXCI6e3RhZzpcIig0MDEwLDEwMTUpXCIsdnI6XCJDU1wiLG5hbWU6XCJBVERBc3Nlc3NtZW50RmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMTYpXCI6e3RhZzpcIig0MDEwLDEwMTYpXCIsdnI6XCJGTFwiLG5hbWU6XCJBVERBc3Nlc3NtZW50UHJvYmFiaWxpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDE3KVwiOnt0YWc6XCIoNDAxMCwxMDE3KVwiLHZyOlwiRkxcIixuYW1lOlwiTWFzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMTgpXCI6e3RhZzpcIig0MDEwLDEwMTgpXCIsdnI6XCJGTFwiLG5hbWU6XCJEZW5zaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAxOSlcIjp7dGFnOlwiKDQwMTAsMTAxOSlcIix2cjpcIkZMXCIsbmFtZTpcIlpFZmZlY3RpdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDFBKVwiOnt0YWc6XCIoNDAxMCwxMDFBKVwiLHZyOlwiU0hcIixuYW1lOlwiQm9hcmRpbmdQYXNzSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDFCKVwiOnt0YWc6XCIoNDAxMCwxMDFCKVwiLHZyOlwiRkxcIixuYW1lOlwiQ2VudGVyT2ZNYXNzXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAxQylcIjp7dGFnOlwiKDQwMTAsMTAxQylcIix2cjpcIkZMXCIsbmFtZTpcIkNlbnRlck9mUFRPXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAxRClcIjp7dGFnOlwiKDQwMTAsMTAxRClcIix2cjpcIkZMXCIsbmFtZTpcIkJvdW5kaW5nUG9seWdvblwiLHZtOlwiNi1uXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAxRSlcIjp7dGFnOlwiKDQwMTAsMTAxRSlcIix2cjpcIlNIXCIsbmFtZTpcIlJvdXRlU2VnbWVudFN0YXJ0TG9jYXRpb25JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMUYpXCI6e3RhZzpcIig0MDEwLDEwMUYpXCIsdnI6XCJTSFwiLG5hbWU6XCJSb3V0ZVNlZ21lbnRFbmRMb2NhdGlvbklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAyMClcIjp7dGFnOlwiKDQwMTAsMTAyMClcIix2cjpcIkNTXCIsbmFtZTpcIlJvdXRlU2VnbWVudExvY2F0aW9uSURUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAyMSlcIjp7dGFnOlwiKDQwMTAsMTAyMSlcIix2cjpcIkNTXCIsbmFtZTpcIkFib3J0UmVhc29uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDIzKVwiOnt0YWc6XCIoNDAxMCwxMDIzKVwiLHZyOlwiRkxcIixuYW1lOlwiVm9sdW1lT2ZQVE9cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDI0KVwiOnt0YWc6XCIoNDAxMCwxMDI0KVwiLHZyOlwiQ1NcIixuYW1lOlwiQWJvcnRGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAyNSlcIjp7dGFnOlwiKDQwMTAsMTAyNSlcIix2cjpcIkRUXCIsbmFtZTpcIlJvdXRlU2VnbWVudFN0YXJ0VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMjYpXCI6e3RhZzpcIig0MDEwLDEwMjYpXCIsdnI6XCJEVFwiLG5hbWU6XCJSb3V0ZVNlZ21lbnRFbmRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAyNylcIjp7dGFnOlwiKDQwMTAsMTAyNylcIix2cjpcIkNTXCIsbmFtZTpcIlREUlR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDI4KVwiOnt0YWc6XCIoNDAxMCwxMDI4KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW50ZXJuYXRpb25hbFJvdXRlU2VnbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMjkpXCI6e3RhZzpcIig0MDEwLDEwMjkpXCIsdnI6XCJMT1wiLG5hbWU6XCJUaHJlYXREZXRlY3Rpb25BbGdvcml0aG1hbmRWZXJzaW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDJBKVwiOnt0YWc6XCIoNDAxMCwxMDJBKVwiLHZyOlwiU0hcIixuYW1lOlwiQXNzaWduZWRMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMkIpXCI6e3RhZzpcIig0MDEwLDEwMkIpXCIsdnI6XCJEVFwiLG5hbWU6XCJBbGFybURlY2lzaW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwMzEpXCI6e3RhZzpcIig0MDEwLDEwMzEpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbGFybURlY2lzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAzMylcIjp7dGFnOlwiKDQwMTAsMTAzMylcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mVG90YWxPYmplY3RzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAzNClcIjp7dGFnOlwiKDQwMTAsMTAzNClcIix2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mQWxhcm1PYmplY3RzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAzNylcIjp7dGFnOlwiKDQwMTAsMTAzNylcIix2cjpcIlNRXCIsbmFtZTpcIlBUT1JlcHJlc2VudGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDM4KVwiOnt0YWc6XCIoNDAxMCwxMDM4KVwiLHZyOlwiU1FcIixuYW1lOlwiQVREQXNzZXNzbWVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTAzOSlcIjp7dGFnOlwiKDQwMTAsMTAzOSlcIix2cjpcIkNTXCIsbmFtZTpcIlRJUFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDNBKVwiOnt0YWc6XCIoNDAxMCwxMDNBKVwiLHZyOlwiQ1NcIixuYW1lOlwiRElDT1NWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA0MSlcIjp7dGFnOlwiKDQwMTAsMTA0MSlcIix2cjpcIkRUXCIsbmFtZTpcIk9PSU93bmVyQ3JlYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA0MilcIjp7dGFnOlwiKDQwMTAsMTA0MilcIix2cjpcIkNTXCIsbmFtZTpcIk9PSVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDQzKVwiOnt0YWc6XCIoNDAxMCwxMDQzKVwiLHZyOlwiRkxcIixuYW1lOlwiT09JU2l6ZVwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNDQpXCI6e3RhZzpcIig0MDEwLDEwNDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJBY3F1aXNpdGlvblN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNDUpXCI6e3RhZzpcIig0MDEwLDEwNDUpXCIsdnI6XCJTUVwiLG5hbWU6XCJCYXNpc01hdGVyaWFsc0NvZGVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNDYpXCI6e3RhZzpcIig0MDEwLDEwNDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJQaGFudG9tVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNDcpXCI6e3RhZzpcIig0MDEwLDEwNDcpXCIsdnI6XCJTUVwiLG5hbWU6XCJPT0lPd25lclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA0OClcIjp7dGFnOlwiKDQwMTAsMTA0OClcIix2cjpcIkNTXCIsbmFtZTpcIlNjYW5UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA1MSlcIjp7dGFnOlwiKDQwMTAsMTA1MSlcIix2cjpcIkxPXCIsbmFtZTpcIkl0aW5lcmFyeUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA1MilcIjp7dGFnOlwiKDQwMTAsMTA1MilcIix2cjpcIlNIXCIsbmFtZTpcIkl0aW5lcmFyeUlEVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNTMpXCI6e3RhZzpcIig0MDEwLDEwNTMpXCIsdnI6XCJMT1wiLG5hbWU6XCJJdGluZXJhcnlJREFzc2lnbmluZ0F1dGhvcml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNTQpXCI6e3RhZzpcIig0MDEwLDEwNTQpXCIsdnI6XCJTSFwiLG5hbWU6XCJSb3V0ZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA1NSlcIjp7dGFnOlwiKDQwMTAsMTA1NSlcIix2cjpcIlNIXCIsbmFtZTpcIlJvdXRlSURBc3NpZ25pbmdBdXRob3JpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDU2KVwiOnt0YWc6XCIoNDAxMCwxMDU2KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW5ib3VuZEFycml2YWxUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA1OClcIjp7dGFnOlwiKDQwMTAsMTA1OClcIix2cjpcIlNIXCIsbmFtZTpcIkNhcnJpZXJJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNTkpXCI6e3RhZzpcIig0MDEwLDEwNTkpXCIsdnI6XCJDU1wiLG5hbWU6XCJDYXJyaWVySURBc3NpZ25pbmdBdXRob3JpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDYwKVwiOnt0YWc6XCIoNDAxMCwxMDYwKVwiLHZyOlwiRkxcIixuYW1lOlwiU291cmNlT3JpZW50YXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDYxKVwiOnt0YWc6XCIoNDAxMCwxMDYxKVwiLHZyOlwiRkxcIixuYW1lOlwiU291cmNlUG9zaXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDYyKVwiOnt0YWc6XCIoNDAxMCwxMDYyKVwiLHZyOlwiRkxcIixuYW1lOlwiQmVsdEhlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNjQpXCI6e3RhZzpcIig0MDEwLDEwNjQpXCIsdnI6XCJTUVwiLG5hbWU6XCJBbGdvcml0aG1Sb3V0aW5nQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA2NylcIjp7dGFnOlwiKDQwMTAsMTA2NylcIix2cjpcIkNTXCIsbmFtZTpcIlRyYW5zcG9ydENsYXNzaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA2OClcIjp7dGFnOlwiKDQwMTAsMTA2OClcIix2cjpcIkxUXCIsbmFtZTpcIk9PSVR5cGVEZXNjcmlwdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA2OSlcIjp7dGFnOlwiKDQwMTAsMTA2OSlcIix2cjpcIkZMXCIsbmFtZTpcIlRvdGFsUHJvY2Vzc2luZ1RpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDZDKVwiOnt0YWc6XCIoNDAxMCwxMDZDKVwiLHZyOlwiT0JcIixuYW1lOlwiRGV0ZWN0b3JDYWxpYnJhdGlvbkRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDZEKVwiOnt0YWc6XCIoNDAxMCwxMDZEKVwiLHZyOlwiQ1NcIixuYW1lOlwiQWRkaXRpb25hbFNjcmVlbmluZ1BlcmZvcm1lZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNkUpXCI6e3RhZzpcIig0MDEwLDEwNkUpXCIsdnI6XCJDU1wiLG5hbWU6XCJBZGRpdGlvbmFsSW5zcGVjdGlvblNlbGVjdGlvbkNyaXRlcmlhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA2RilcIjp7dGFnOlwiKDQwMTAsMTA2RilcIix2cjpcIlNRXCIsbmFtZTpcIkFkZGl0aW9uYWxJbnNwZWN0aW9uTWV0aG9kU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDcwKVwiOnt0YWc6XCIoNDAxMCwxMDcwKVwiLHZyOlwiQ1NcIixuYW1lOlwiQUlURGV2aWNlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNzEpXCI6e3RhZzpcIig0MDEwLDEwNzEpXCIsdnI6XCJTUVwiLG5hbWU6XCJRUk1lYXN1cmVtZW50c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA3MilcIjp7dGFnOlwiKDQwMTAsMTA3MilcIix2cjpcIlNRXCIsbmFtZTpcIlRhcmdldE1hdGVyaWFsU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDczKVwiOnt0YWc6XCIoNDAxMCwxMDczKVwiLHZyOlwiRkRcIixuYW1lOlwiU05SVGhyZXNob2xkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA3NSlcIjp7dGFnOlwiKDQwMTAsMTA3NSlcIix2cjpcIkRTXCIsbmFtZTpcIkltYWdlU2NhbGVSZXByZXNlbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNzYpXCI6e3RhZzpcIig0MDEwLDEwNzYpXCIsdnI6XCJTUVwiLG5hbWU6XCJSZWZlcmVuY2VkUFRPU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDc3KVwiOnt0YWc6XCIoNDAxMCwxMDc3KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFREUkluc3RhbmNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDc4KVwiOnt0YWc6XCIoNDAxMCwxMDc4KVwiLHZyOlwiU1RcIixuYW1lOlwiUFRPTG9jYXRpb25EZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwNzkpXCI6e3RhZzpcIig0MDEwLDEwNzkpXCIsdnI6XCJTUVwiLG5hbWU6XCJBbm9tYWx5TG9jYXRvckluZGljYXRvclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA3QSlcIjp7dGFnOlwiKDQwMTAsMTA3QSlcIix2cjpcIkZMXCIsbmFtZTpcIkFub21hbHlMb2NhdG9ySW5kaWNhdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA3QilcIjp7dGFnOlwiKDQwMTAsMTA3QilcIix2cjpcIlNRXCIsbmFtZTpcIlBUT1JlZ2lvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL0RJQ09TXCJ9LFwiKDQwMTAsMTA3QylcIjp7dGFnOlwiKDQwMTAsMTA3QylcIix2cjpcIkNTXCIsbmFtZTpcIkluc3BlY3Rpb25TZWxlY3Rpb25Dcml0ZXJpYVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9ESUNPU1wifSxcIig0MDEwLDEwN0QpXCI6e3RhZzpcIig0MDEwLDEwN0QpXCIsdnI6XCJTUVwiLG5hbWU6XCJTZWNvbmRhcnlJbnNwZWN0aW9uTWV0aG9kU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNDAxMCwxMDdFKVwiOnt0YWc6XCIoNDAxMCwxMDdFKVwiLHZyOlwiRFNcIixuYW1lOlwiUFJDU1RvUkNTT3JpZW50YXRpb25cIix2bTpcIjZcIix2ZXJzaW9uOlwiRElDT00vRElDT1NcIn0sXCIoNEZGRSwwMDAxKVwiOnt0YWc6XCIoNEZGRSwwMDAxKVwiLHZyOlwiU1FcIixuYW1lOlwiTUFDUGFyYW1ldGVyc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDUyMDAsOTIyOSlcIjp7dGFnOlwiKDUyMDAsOTIyOSlcIix2cjpcIlNRXCIsbmFtZTpcIlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig1MjAwLDkyMzApXCI6e3RhZzpcIig1MjAwLDkyMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig1NDAwLDAxMDApXCI6e3RhZzpcIig1NDAwLDAxMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJXYXZlZm9ybVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDU0MDAsMDExMClcIjp7dGFnOlwiKDU0MDAsMDExMClcIix2cjpcIm94XCIsbmFtZTpcIkNoYW5uZWxNaW5pbXVtVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNTQwMCwwMTEyKVwiOnt0YWc6XCIoNTQwMCwwMTEyKVwiLHZyOlwib3hcIixuYW1lOlwiQ2hhbm5lbE1heGltdW1WYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig1NDAwLDEwMDQpXCI6e3RhZzpcIig1NDAwLDEwMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJXYXZlZm9ybUJpdHNBbGxvY2F0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNTQwMCwxMDA2KVwiOnt0YWc6XCIoNTQwMCwxMDA2KVwiLHZyOlwiQ1NcIixuYW1lOlwiV2F2ZWZvcm1TYW1wbGVJbnRlcnByZXRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig1NDAwLDEwMEEpXCI6e3RhZzpcIig1NDAwLDEwMEEpXCIsdnI6XCJveFwiLG5hbWU6XCJXYXZlZm9ybVBhZGRpbmdWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig1NDAwLDEwMTApXCI6e3RhZzpcIig1NDAwLDEwMTApXCIsdnI6XCJveFwiLG5hbWU6XCJXYXZlZm9ybURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNTYwMCwwMDEwKVwiOnt0YWc6XCIoNTYwMCwwMDEwKVwiLHZyOlwiT0ZcIixuYW1lOlwiRmlyc3RPcmRlclBoYXNlQ29ycmVjdGlvbkFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDU2MDAsMDAyMClcIjp7dGFnOlwiKDU2MDAsMDAyMClcIix2cjpcIk9GXCIsbmFtZTpcIlNwZWN0cm9zY29weURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNjAwMC02MEZGLDAwMTApXCI6e3RhZzpcIig2MDAwLTYwRkYsMDAxMClcIix2cjpcIlVTXCIsbmFtZTpcIk92ZXJsYXlSb3dzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwwMDExKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAwMTEpXCIsdnI6XCJVU1wiLG5hbWU6XCJPdmVybGF5Q29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig2MDAwLTYwRkYsMDAxNSlcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDE1KVwiLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZGcmFtZXNJbk92ZXJsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNjAwMC02MEZGLDAwMjIpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDAyMilcIix2cjpcIkxPXCIsbmFtZTpcIk92ZXJsYXlEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig2MDAwLTYwRkYsMDA0MClcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiT3ZlcmxheVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoNjAwMC02MEZGLDAwNDUpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDA0NSlcIix2cjpcIkxPXCIsbmFtZTpcIk92ZXJsYXlTdWJ0eXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwwMDUwKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAwNTApXCIsdnI6XCJTU1wiLG5hbWU6XCJPdmVybGF5T3JpZ2luXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwwMDUxKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAwNTEpXCIsdnI6XCJVU1wiLG5hbWU6XCJJbWFnZUZyYW1lT3JpZ2luXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwwMTAwKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAxMDApXCIsdnI6XCJVU1wiLG5hbWU6XCJPdmVybGF5Qml0c0FsbG9jYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig2MDAwLTYwRkYsMDEwMilcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMTAyKVwiLHZyOlwiVVNcIixuYW1lOlwiT3ZlcmxheUJpdFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwxMDAxKVwiOnt0YWc6XCIoNjAwMC02MEZGLDEwMDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJPdmVybGF5QWN0aXZhdGlvbkxheWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwxMzAxKVwiOnt0YWc6XCIoNjAwMC02MEZGLDEzMDEpXCIsdnI6XCJJU1wiLG5hbWU6XCJST0lBcmVhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwxMzAyKVwiOnt0YWc6XCIoNjAwMC02MEZGLDEzMDIpXCIsdnI6XCJEU1wiLG5hbWU6XCJST0lNZWFuXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwxMzAzKVwiOnt0YWc6XCIoNjAwMC02MEZGLDEzMDMpXCIsdnI6XCJEU1wiLG5hbWU6XCJST0lTdGFuZGFyZERldmlhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig2MDAwLTYwRkYsMTUwMClcIjp7dGFnOlwiKDYwMDAtNjBGRiwxNTAwKVwiLHZyOlwiTE9cIixuYW1lOlwiT3ZlcmxheUxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDYwMDAtNjBGRiwzMDAwKVwiOnt0YWc6XCIoNjAwMC02MEZGLDMwMDApXCIsdnI6XCJveFwiLG5hbWU6XCJPdmVybGF5RGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig3RkUwLDAwMDgpXCI6e3RhZzpcIig3RkUwLDAwMDgpXCIsdnI6XCJPRlwiLG5hbWU6XCJGbG9hdFBpeGVsRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig3RkUwLDAwMDkpXCI6e3RhZzpcIig3RkUwLDAwMDkpXCIsdnI6XCJPRFwiLG5hbWU6XCJEb3VibGVGbG9hdFBpeGVsRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIig3RkUwLDAwMTApXCI6e3RhZzpcIig3RkUwLDAwMTApXCIsdnI6XCJveFwiLG5hbWU6XCJQaXhlbERhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoRkZGQSxGRkZBKVwiOnt0YWc6XCIoRkZGQSxGRkZBKVwiLHZyOlwiU1FcIixuYW1lOlwiRGlnaXRhbFNpZ25hdHVyZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTVwifSxcIihGRkZDLEZGRkMpXCI6e3RhZzpcIihGRkZDLEZGRkMpXCIsdnI6XCJPQlwiLG5hbWU6XCJEYXRhU2V0VHJhaWxpbmdQYWRkaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKEZGRkUsRTAwMClcIjp7dGFnOlwiKEZGRkUsRTAwMClcIix2cjpcIm5hXCIsbmFtZTpcIkl0ZW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoRkZGRSxFMDBEKVwiOnt0YWc6XCIoRkZGRSxFMDBEKVwiLHZyOlwibmFcIixuYW1lOlwiSXRlbURlbGltaXRhdGlvbkl0ZW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT01cIn0sXCIoRkZGRSxFMEREKVwiOnt0YWc6XCIoRkZGRSxFMEREKVwiLHZyOlwibmFcIixuYW1lOlwiU2VxdWVuY2VEZWxpbWl0YXRpb25JdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NXCJ9LFwiKDAwMjgsMTIyNClcIjp7dGFnOlwiKDAwMjgsMTIyNClcIix2cjpcIk9XXCIsbmFtZTpcIlNlZ21lbnRlZEFscGhhUGFsZXR0ZUNvbG9yTG9va3VwVGFibGVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTEwMSlcIjp7dGFnOlwiKDAwNzAsMTEwMSlcIix2cjpcIlVJXCIsbmFtZTpcIlByZXNlbnRhdGlvbkRpc3BsYXlDb2xsZWN0aW9uVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTEwMilcIjp7dGFnOlwiKDAwNzAsMTEwMilcIix2cjpcIlVJXCIsbmFtZTpcIlByZXNlbnRhdGlvblNlcXVlbmNlQ29sbGVjdGlvblVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDExMDMpXCI6e3RhZzpcIigwMDcwLDExMDMpXCIsdnI6XCJVU1wiLG5hbWU6XCJQcmVzZW50YXRpb25TZXF1ZW5jZVBvc2l0aW9uSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxMTA0KVwiOnt0YWc6XCIoMDA3MCwxMTA0KVwiLHZyOlwiU1FcIixuYW1lOlwiUmVuZGVyZWRJbWFnZVJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTIwMSlcIjp7dGFnOlwiKDAwNzAsMTIwMSlcIix2cjpcIlNRXCIsbmFtZTpcIlZvbHVtZXRyaWNQcmVzZW50YXRpb25TdGF0ZUlucHV0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxMjAyKVwiOnt0YWc6XCIoMDA3MCwxMjAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUHJlc2VudGF0aW9uSW5wdXRUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTIwMylcIjp7dGFnOlwiKDAwNzAsMTIwMylcIix2cjpcIlVTXCIsbmFtZTpcIklucHV0U2VxdWVuY2VQb3NpdGlvbkluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTIwNClcIjp7dGFnOlwiKDAwNzAsMTIwNClcIix2cjpcIkNTXCIsbmFtZTpcIkNyb3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxMjA1KVwiOnt0YWc6XCIoMDA3MCwxMjA1KVwiLHZyOlwiVVNcIixuYW1lOlwiQ3JvcHBpbmdTcGVjaWZpY2F0aW9uSW5kZXhcIix2bTpcIjEtblwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDEyMDYpXCI6e3RhZzpcIigwMDcwLDEyMDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJDb21wb3NpdGluZ01ldGhvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDEyMDcpXCI6e3RhZzpcIigwMDcwLDEyMDcpXCIsdnI6XCJVU1wiLG5hbWU6XCJWb2x1bWV0cmljUHJlc2VudGF0aW9uSW5wdXROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxMjA4KVwiOnt0YWc6XCIoMDA3MCwxMjA4KVwiLHZyOlwiQ1NcIixuYW1lOlwiSW1hZ2VWb2x1bWVHZW9tZXRyeVwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDEzMDEpXCI6e3RhZzpcIigwMDcwLDEzMDEpXCIsdnI6XCJTUVwiLG5hbWU6XCJWb2x1bWVDcm9wcGluZ1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTMwMilcIjp7dGFnOlwiKDAwNzAsMTMwMilcIix2cjpcIkNTXCIsbmFtZTpcIlZvbHVtZUNyb3BwaW5nTWV0aG9kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTMwMylcIjp7dGFnOlwiKDAwNzAsMTMwMylcIix2cjpcIkZEXCIsbmFtZTpcIkJvdW5kaW5nQm94Q3JvcFwiLHZtOlwiNlwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDEzMDQpXCI6e3RhZzpcIigwMDcwLDEzMDQpXCIsdnI6XCJTUVwiLG5hbWU6XCJPYmxpcXVlQ3JvcHBpbmdQbGFuZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTMwNSlcIjp7dGFnOlwiKDAwNzAsMTMwNSlcIix2cjpcIkZEXCIsbmFtZTpcIk9ibGlxdWVDcm9wcGluZ1BsYW5lXCIsdm06XCI0XCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTMwNilcIjp7dGFnOlwiKDAwNzAsMTMwNilcIix2cjpcIkZEXCIsbmFtZTpcIk9ibGlxdWVDcm9wcGluZ1BsYW5lTm9ybWFsXCIsdm06XCIzXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTMwOSlcIjp7dGFnOlwiKDAwNzAsMTMwOSlcIix2cjpcIlVTXCIsbmFtZTpcIkNyb3BwaW5nU3BlY2lmaWNhdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE1MDEpXCI6e3RhZzpcIigwMDcwLDE1MDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJNdWx0aVBsYW5hclJlY29uc3RydWN0aW9uU3R5bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxNTAyKVwiOnt0YWc6XCIoMDA3MCwxNTAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiTVBSVGhpY2tuZXNzVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE1MDMpXCI6e3RhZzpcIigwMDcwLDE1MDMpXCIsdnI6XCJGRFwiLG5hbWU6XCJNUFJTbGFiVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTUwNSlcIjp7dGFnOlwiKDAwNzAsMTUwNSlcIix2cjpcIkZEXCIsbmFtZTpcIk1QUlRvcExlZnRIYW5kQ29ybmVyXCIsdm06XCIzXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTUwNylcIjp7dGFnOlwiKDAwNzAsMTUwNylcIix2cjpcIkZEXCIsbmFtZTpcIk1QUlZpZXdXaWR0aERpcmVjdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE1MDgpXCI6e3RhZzpcIigwMDcwLDE1MDgpXCIsdnI6XCJGRFwiLG5hbWU6XCJNUFJWaWV3V2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxNTBDKVwiOnt0YWc6XCIoMDA3MCwxNTBDKVwiLHZyOlwiRkxcIixuYW1lOlwiTnVtYmVyT2ZWb2x1bWV0cmljQ3VydmVQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxNTBEKVwiOnt0YWc6XCIoMDA3MCwxNTBEKVwiLHZyOlwiT0RcIixuYW1lOlwiVm9sdW1ldHJpY0N1cnZlUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTUxMSlcIjp7dGFnOlwiKDAwNzAsMTUxMSlcIix2cjpcIkZEXCIsbmFtZTpcIk1QUlZpZXdIZWlnaHREaXJlY3Rpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxNTEyKVwiOnt0YWc6XCIoMDA3MCwxNTEyKVwiLHZyOlwiRkRcIixuYW1lOlwiTVBSVmlld0hlaWdodFwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE4MDEpXCI6e3RhZzpcIigwMDcwLDE4MDEpXCIsdnI6XCJTUVwiLG5hbWU6XCJQcmVzZW50YXRpb25TdGF0ZUNsYXNzaWZpY2F0aW9uQ29tcG9uZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxODAyKVwiOnt0YWc6XCIoMDA3MCwxODAyKVwiLHZyOlwiQ1NcIixuYW1lOlwiQ29tcG9uZW50VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE4MDMpXCI6e3RhZzpcIigwMDcwLDE4MDMpXCIsdnI6XCJTUVwiLG5hbWU6XCJDb21wb25lbnRJbnB1dFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTgwNClcIjp7dGFnOlwiKDAwNzAsMTgwNClcIix2cjpcIlVTXCIsbmFtZTpcIlZvbHVtZXRyaWNQcmVzZW50YXRpb25JbnB1dEluZGV4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTgwNSlcIjp7dGFnOlwiKDAwNzAsMTgwNSlcIix2cjpcIlNRXCIsbmFtZTpcIlByZXNlbnRhdGlvblN0YXRlQ29tcG9zaXRvckNvbXBvbmVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTgwNilcIjp7dGFnOlwiKDAwNzAsMTgwNilcIix2cjpcIlNRXCIsbmFtZTpcIldlaWdodGluZ1RyYW5zZmVyRnVuY3Rpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE4MDcpXCI6e3RhZzpcIigwMDcwLDE4MDcpXCIsdnI6XCJVU1wiLG5hbWU6XCJXZWlnaHRpbmdMb29rdXBUYWJsZURlc2NyaXB0b3JcIix2bTpcIjNcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxODA4KVwiOnt0YWc6XCIoMDA3MCwxODA4KVwiLHZyOlwiT0JcIixuYW1lOlwiV2VpZ2h0aW5nTG9va3VwVGFibGVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTkwMSlcIjp7dGFnOlwiKDAwNzAsMTkwMSlcIix2cjpcIlNRXCIsbmFtZTpcIlZvbHVtZXRyaWNBbm5vdGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxOTAzKVwiOnt0YWc6XCIoMDA3MCwxOTAzKVwiLHZyOlwiU1FcIixuYW1lOlwiUmVmZXJlbmNlZFN0cnVjdHVyZWRDb250ZXh0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxOTA0KVwiOnt0YWc6XCIoMDA3MCwxOTA0KVwiLHZyOlwiVUlcIixuYW1lOlwiUmVmZXJlbmNlZENvbnRlbnRJdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMTkwNSlcIjp7dGFnOlwiKDAwNzAsMTkwNSlcIix2cjpcIlNRXCIsbmFtZTpcIlZvbHVtZXRyaWNQcmVzZW50YXRpb25JbnB1dEFubm90YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJTdXBwbGVtZW50XzE1NlwifSxcIigwMDcwLDE5MDcpXCI6e3RhZzpcIigwMDcwLDE5MDcpXCIsdnI6XCJDU1wiLG5hbWU6XCJBbm5vdGF0aW9uQ2xpcHBpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxQTAxKVwiOnt0YWc6XCIoMDA3MCwxQTAxKVwiLHZyOlwiQ1NcIixuYW1lOlwiUHJlc2VudGF0aW9uQW5pbWF0aW9uU3R5bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxQTAzKVwiOnt0YWc6XCIoMDA3MCwxQTAzKVwiLHZyOlwiRkRcIixuYW1lOlwiUmVjb21tZW5kZWRBbmltYXRpb25SYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlN1cHBsZW1lbnRfMTU2XCJ9LFwiKDAwNzAsMUEwNClcIjp7dGFnOlwiKDAwNzAsMUEwNClcIix2cjpcIlNRXCIsbmFtZTpcIkFuaW1hdGlvbkN1cnZlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA3MCwxQTA1KVwiOnt0YWc6XCIoMDA3MCwxQTA1KVwiLHZyOlwiRkRcIixuYW1lOlwiQW5pbWF0aW9uU3RlcFNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiU3VwcGxlbWVudF8xNTZcIn0sXCIoMDA0MCw0MDcwKVwiOnt0YWc6XCIoMDA0MCw0MDcwKVwiLHZyOlwiU1FcIixuYW1lOlwiT3V0cHV0RGVzdGluYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJDUF8xNDQxXCJ9LFwiKDAwNDAsNDA3MSlcIjp7dGFnOlwiKDAwNDAsNDA3MSlcIix2cjpcIlNRXCIsbmFtZTpcIkRJQ09NU3RvcmFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkNQXzE0NDFcIn0sXCIoMDA0MCw0MDcyKVwiOnt0YWc6XCIoMDA0MCw0MDcyKVwiLHZyOlwiU1FcIixuYW1lOlwiU1RPV1JTU3RvcmFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkNQXzE0NDFcIn0sXCIoMDA0MCw0MDczKVwiOnt0YWc6XCIoMDA0MCw0MDczKVwiLHZyOlwiVVJcIixuYW1lOlwiU3RvcmFnZVVSTFwiLHZtOlwiMVwiLHZlcnNpb246XCJDUF8xNDQxXCJ9LFwiKDAwNDAsNDA3NClcIjp7dGFnOlwiKDAwNDAsNDA3NClcIix2cjpcIlNRXCIsbmFtZTpcIlhEU1N0b3JhZ2VTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJDUF8xNDQxXCJ9LFwiKDAwMjgsMjAwMilcIjp7dGFnOlwiKDAwMjgsMjAwMilcIix2cjpcIkNTXCIsbmFtZTpcIkNvbG9yU3BhY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiQ1BfMTQ1NFwifSxcIigwMDQwLDkyMTMpXCI6e3RhZzpcIigwMDQwLDkyMTMpXCIsdnI6XCJGRFwiLG5hbWU6XCJEb3VibGVGbG9hdFJlYWxXb3JsZFZhbHVlTGFzdFZhbHVlTWFwcGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkNQXzE0NThcIn0sXCIoMDA0MCw5MjE0KVwiOnt0YWc6XCIoMDA0MCw5MjE0KVwiLHZyOlwiRkRcIixuYW1lOlwiRG91YmxlRmxvYXRSZWFsV29ybGRWYWx1ZUZpcnN0VmFsdWVNYXBwZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiQ1BfMTQ1OFwifSxcIigwMDE4LDEzMjApXCI6e3RhZzpcIigwMDE4LDEzMjApXCIsdnI6XCJGTFwiLG5hbWU6XCJCMXJtc1wiLHZtOlwiMVwiLHZlcnNpb246XCJDUF8xNDYxXCJ9LFwiKDAwMDktby1GRkZGLDAwMDApXCI6e3RhZzpcIigwMDA5LW8tRkZGRiwwMDAwKVwiLHZyOlwiVUxcIixuYW1lOlwiUHJpdmF0ZUdyb3VwTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlBSSVZBVEVcIn0sXCIoMDAwOS1vLUZGRkYsMDAxMC11LTAwRkYpXCI6e3RhZzpcIigwMDA5LW8tRkZGRiwwMDEwLXUtMDBGRilcIix2cjpcIkxPXCIsbmFtZTpcIlByaXZhdGVDcmVhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlBSSVZBVEVcIn0sXCIoMDAwMS1vLTAwMDcsMDAwMClcIjp7dGFnOlwiKDAwMDEtby0wMDA3LDAwMDApXCIsdnI6XCJVTFwiLG5hbWU6XCJJbGxlZ2FsR3JvdXBMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiSUxMRUdBTFwifSxcIigwMDAxLW8tMDAwNywwMDEwLXUtMDBGRilcIjp7dGFnOlwiKDAwMDEtby0wMDA3LDAwMTAtdS0wMEZGKVwiLHZyOlwiTE9cIixuYW1lOlwiSWxsZWdhbFByaXZhdGVDcmVhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIklMTEVHQUxcIn0sXCIoMDAwMC11LUZGRkYsMDAwMClcIjp7dGFnOlwiKDAwMDAtdS1GRkZGLDAwMDApXCIsdnI6XCJVTFwiLG5hbWU6XCJHZW5lcmljR3JvdXBMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiR0VORVJJQ1wifSxcIigwMDAwLDAwMDEpXCI6e3RhZzpcIigwMDAwLDAwMDEpXCIsdnI6XCJVTFwiLG5hbWU6XCJSRVRJUkVEX0NvbW1hbmRMZW5ndGhUb0VuZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsMDAxMClcIjp7dGFnOlwiKDAwMDAsMDAxMClcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfQ29tbWFuZFJlY29nbml0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsMDIwMClcIjp7dGFnOlwiKDAwMDAsMDIwMClcIix2cjpcIkFFXCIsbmFtZTpcIlJFVElSRURfSW5pdGlhdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCwwMzAwKVwiOnt0YWc6XCIoMDAwMCwwMzAwKVwiLHZyOlwiQUVcIixuYW1lOlwiUkVUSVJFRF9SZWNlaXZlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsMDQwMClcIjp7dGFnOlwiKDAwMDAsMDQwMClcIix2cjpcIkFFXCIsbmFtZTpcIlJFVElSRURfRmluZExvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCwwODUwKVwiOnt0YWc6XCIoMDAwMCwwODUwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9OdW1iZXJPZk1hdGNoZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDA4NjApXCI6e3RhZzpcIigwMDAwLDA4NjApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1Jlc3BvbnNlU2VxdWVuY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDQwMDApXCI6e3RhZzpcIigwMDAwLDQwMDApXCIsdnI6XCJMVFwiLG5hbWU6XCJSRVRJUkVEX0RpYWxvZ1JlY2VpdmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw0MDEwKVwiOnt0YWc6XCIoMDAwMCw0MDEwKVwiLHZyOlwiTFRcIixuYW1lOlwiUkVUSVJFRF9UZXJtaW5hbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDUwMTApXCI6e3RhZzpcIigwMDAwLDUwMTApXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX01lc3NhZ2VTZXRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsNTAyMClcIjp7dGFnOlwiKDAwMDAsNTAyMClcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfRW5kTWVzc2FnZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw1MTEwKVwiOnt0YWc6XCIoMDAwMCw1MTEwKVwiLHZyOlwiTFRcIixuYW1lOlwiUkVUSVJFRF9EaXNwbGF5Rm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw1MTIwKVwiOnt0YWc6XCIoMDAwMCw1MTIwKVwiLHZyOlwiTFRcIixuYW1lOlwiUkVUSVJFRF9QYWdlUG9zaXRpb25JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsNTEzMClcIjp7dGFnOlwiKDAwMDAsNTEzMClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfVGV4dEZvcm1hdElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw1MTQwKVwiOnt0YWc6XCIoMDAwMCw1MTQwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Ob3JtYWxSZXZlcnNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw1MTUwKVwiOnt0YWc6XCIoMDAwMCw1MTUwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9BZGRHcmF5U2NhbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDUxNjApXCI6e3RhZzpcIigwMDAwLDUxNjApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX0JvcmRlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDUxNzApXCI6e3RhZzpcIigwMDAwLDUxNzApXCIsdnI6XCJJU1wiLG5hbWU6XCJSRVRJUkVEX0NvcGllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsNTE4MClcIjp7dGFnOlwiKDAwMDAsNTE4MClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfQ29tbWFuZE1hZ25pZmljYXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwMCw1MTkwKVwiOnt0YWc6XCIoMDAwMCw1MTkwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9FcmFzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDAsNTFBMClcIjp7dGFnOlwiKDAwMDAsNTFBMClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfUHJpbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDAwLDUxQjApXCI6e3RhZzpcIigwMDAwLDUxQjApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX092ZXJsYXlzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA0LDE1MDQpXCI6e3RhZzpcIigwMDA0LDE1MDQpXCIsdnI6XCJ1cFwiLG5hbWU6XCJSRVRJUkVEX01SRFJEaXJlY3RvcnlSZWNvcmRPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA0LDE2MDApXCI6e3RhZzpcIigwMDA0LDE2MDApXCIsdnI6XCJVTFwiLG5hbWU6XCJSRVRJUkVEX051bWJlck9mUmVmZXJlbmNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMDAwMSlcIjp7dGFnOlwiKDAwMDgsMDAwMSlcIix2cjpcIlVMXCIsbmFtZTpcIlJFVElSRURfTGVuZ3RoVG9FbmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDAwMTApXCI6e3RhZzpcIigwMDA4LDAwMTApXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX1JlY29nbml0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMDAyNClcIjp7dGFnOlwiKDAwMDgsMDAyNClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheURhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDAwMjUpXCI6e3RhZzpcIigwMDA4LDAwMjUpXCIsdnI6XCJEQVwiLG5hbWU6XCJSRVRJUkVEX0N1cnZlRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMDAzNClcIjp7dGFnOlwiKDAwMDgsMDAzNClcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDAwMzUpXCI6e3RhZzpcIigwMDA4LDAwMzUpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX0N1cnZlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMDA0MClcIjp7dGFnOlwiKDAwMDgsMDA0MClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfRGF0YVNldFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDAwNDEpXCI6e3RhZzpcIigwMDA4LDAwNDEpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0RhdGFTZXRTdWJ0eXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwwMDQyKVwiOnt0YWc6XCIoMDAwOCwwMDQyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9OdWNsZWFyTWVkaWNpbmVTZXJpZXNUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwxMDAwKVwiOnt0YWc6XCIoMDAwOCwxMDAwKVwiLHZyOlwiQUVcIixuYW1lOlwiUkVUSVJFRF9OZXR3b3JrSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDExMDApXCI6e3RhZzpcIigwMDA4LDExMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRSZXN1bHRzU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDExMzApXCI6e3RhZzpcIigwMDA4LDExMzApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRPdmVybGF5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDExNDUpXCI6e3RhZzpcIigwMDA4LDExNDUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRDdXJ2ZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMTEwKVwiOnt0YWc6XCIoMDAwOCwyMTEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Mb3NzeUltYWdlQ29tcHJlc3Npb25SZXRpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjAwKVwiOnt0YWc6XCIoMDAwOCwyMjAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9UcmFuc2R1Y2VyUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyMDQpXCI6e3RhZzpcIigwMDA4LDIyMDQpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1RyYW5zZHVjZXJPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMjIwOClcIjp7dGFnOlwiKDAwMDgsMjIwOClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfQW5hdG9taWNTdHJ1Y3R1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNDApXCI6e3RhZzpcIigwMDA4LDIyNDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1RyYW5zZHVjZXJQb3NpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjQyKVwiOnt0YWc6XCIoMDAwOCwyMjQyKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9UcmFuc2R1Y2VyUG9zaXRpb25Nb2RpZmllclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjQ0KVwiOnt0YWc6XCIoMDAwOCwyMjQ0KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9UcmFuc2R1Y2VyT3JpZW50YXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMjI0NilcIjp7dGFnOlwiKDAwMDgsMjI0NilcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfVHJhbnNkdWNlck9yaWVudGF0aW9uTW9kaWZpZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMDgsMjI1MSlcIjp7dGFnOlwiKDAwMDgsMjI1MSlcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfQW5hdG9taWNTdHJ1Y3R1cmVTcGFjZU9yUmVnaW9uQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNTMpXCI6e3RhZzpcIigwMDA4LDIyNTMpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0FuYXRvbWljUG9ydGFsT2ZFbnRyYW5jZUNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjU1KVwiOnt0YWc6XCIoMDAwOCwyMjU1KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9BbmF0b21pY0FwcHJvYWNoRGlyZWN0aW9uQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNTYpXCI6e3RhZzpcIigwMDA4LDIyNTYpXCIsdnI6XCJTVFwiLG5hbWU6XCJSRVRJUkVEX0FuYXRvbWljUGVyc3BlY3RpdmVEZXNjcmlwdGlvblRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjU3KVwiOnt0YWc6XCIoMDAwOCwyMjU3KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9BbmF0b21pY1BlcnNwZWN0aXZlQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNTgpXCI6e3RhZzpcIigwMDA4LDIyNTgpXCIsdnI6XCJTVFwiLG5hbWU6XCJSRVRJUkVEX0FuYXRvbWljTG9jYXRpb25PZkV4YW1pbmluZ0luc3RydW1lbnREZXNjcmlwdGlvblRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCwyMjU5KVwiOnt0YWc6XCIoMDAwOCwyMjU5KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9BbmF0b21pY0xvY2F0aW9uT2ZFeGFtaW5pbmdJbnN0cnVtZW50Q29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNUEpXCI6e3RhZzpcIigwMDA4LDIyNUEpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0FuYXRvbWljU3RydWN0dXJlU3BhY2VPclJlZ2lvbk1vZGlmaWVyQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDA4LDIyNUMpXCI6e3RhZzpcIigwMDA4LDIyNUMpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX09uQXhpc0JhY2tncm91bmRBbmF0b21pY1N0cnVjdHVyZUNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAwOCw0MDAwKVwiOnt0YWc6XCIoMDAwOCw0MDAwKVwiLHZyOlwiTFRcIixuYW1lOlwiUkVUSVJFRF9JZGVudGlmeWluZ0NvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxMCwxMDUwKVwiOnt0YWc6XCIoMDAxMCwxMDUwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9JbnN1cmFuY2VQbGFuSWRlbnRpZmljYXRpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTQsMDAyMylcIjp7dGFnOlwiKDAwMTQsMDAyMylcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfQ0FERmlsZUZvcm1hdFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxNCwwMDI0KVwiOnt0YWc6XCIoMDAxNCwwMDI0KVwiLHZyOlwiU1RcIixuYW1lOlwiUkVUSVJFRF9Db21wb25lbnRSZWZlcmVuY2VTeXN0ZW1cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTQsMDA0NSlcIjp7dGFnOlwiKDAwMTQsMDA0NSlcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfTWF0ZXJpYWxQcm9wZXJ0aWVzRmlsZUZvcm1hdFJldGlyZWRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMDAzMClcIjp7dGFnOlwiKDAwMTgsMDAzMClcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfUmFkaW9udWNsaWRlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDAwMzIpXCI6e3RhZzpcIigwMDE4LDAwMzIpXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0VuZXJneVdpbmRvd0NlbnRlcmxpbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDAwMzMpXCI6e3RhZzpcIigwMDE4LDAwMzMpXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0VuZXJneVdpbmRvd1RvdGFsV2lkdGhcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMDAzNylcIjp7dGFnOlwiKDAwMTgsMDAzNylcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfVGhlcmFweVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDAwMzkpXCI6e3RhZzpcIigwMDE4LDAwMzkpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1RoZXJhcHlEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMTAxMSlcIjp7dGFnOlwiKDAwMTgsMTAxMSlcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfSGFyZGNvcHlDcmVhdGlvbkRldmljZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCwxMDE3KVwiOnt0YWc6XCIoMDAxOCwxMDE3KVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9IYXJkY29weURldmljZU1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMTAxQSlcIjp7dGFnOlwiKDAwMTgsMTAxQSlcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfSGFyZGNvcHlEZXZpY2VTb2Z0d2FyZVZlcnNpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMTAxQilcIjp7dGFnOlwiKDAwMTgsMTAxQilcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfSGFyZGNvcHlEZXZpY2VNYW51ZmFjdHVyZXJNb2RlbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDExNDEpXCI6e3RhZzpcIigwMDE4LDExNDEpXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0FuZ3VsYXJQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMTE0NilcIjp7dGFnOlwiKDAwMTgsMTE0NilcIix2cjpcIkRTXCIsbmFtZTpcIlJFVElSRURfUm90YXRpb25PZmZzZXRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsMTI0MClcIjp7dGFnOlwiKDAwMTgsMTI0MClcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfVXBwZXJMb3dlclBpeGVsVmFsdWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDQwMDApXCI6e3RhZzpcIigwMDE4LDQwMDApXCIsdnI6XCJMVFwiLG5hbWU6XCJSRVRJUkVEX0FjcXVpc2l0aW9uQ29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDUwMjEpXCI6e3RhZzpcIigwMDE4LDUwMjEpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1Bvc3Rwcm9jZXNzaW5nRnVuY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDUwMzApXCI6e3RhZzpcIigwMDE4LDUwMzApXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0R5bmFtaWNSYW5nZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsNTA0MClcIjp7dGFnOlwiKDAwMTgsNTA0MClcIix2cjpcIkRTXCIsbmFtZTpcIlJFVElSRURfVG90YWxHYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw1MjEwKVwiOnt0YWc6XCIoMDAxOCw1MjEwKVwiLHZyOlwiRFNcIixuYW1lOlwiUkVUSVJFRF9JbWFnZVRyYW5zZm9ybWF0aW9uTWF0cml4XCIsdm06XCI2XCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw1MjEyKVwiOnt0YWc6XCIoMDAxOCw1MjEyKVwiLHZyOlwiRFNcIixuYW1lOlwiUkVUSVJFRF9JbWFnZVRyYW5zbGF0aW9uVmVjdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw2MDM4KVwiOnt0YWc6XCIoMDAxOCw2MDM4KVwiLHZyOlwiVUxcIixuYW1lOlwiUkVUSVJFRF9Eb3BwbGVyU2FtcGxlVm9sdW1lWFBvc2l0aW9uUmV0aXJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsNjAzQSlcIjp7dGFnOlwiKDAwMTgsNjAzQSlcIix2cjpcIlVMXCIsbmFtZTpcIlJFVElSRURfRG9wcGxlclNhbXBsZVZvbHVtZVlQb3NpdGlvblJldGlyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDYwM0MpXCI6e3RhZzpcIigwMDE4LDYwM0MpXCIsdnI6XCJVTFwiLG5hbWU6XCJSRVRJUkVEX1RNTGluZVBvc2l0aW9uWDBSZXRpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw2MDNFKVwiOnt0YWc6XCIoMDAxOCw2MDNFKVwiLHZyOlwiVUxcIixuYW1lOlwiUkVUSVJFRF9UTUxpbmVQb3NpdGlvblkwUmV0aXJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMTgsNjA0MClcIjp7dGFnOlwiKDAwMTgsNjA0MClcIix2cjpcIlVMXCIsbmFtZTpcIlJFVElSRURfVE1MaW5lUG9zaXRpb25YMVJldGlyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDE4LDYwNDIpXCI6e3RhZzpcIigwMDE4LDYwNDIpXCIsdnI6XCJVTFwiLG5hbWU6XCJSRVRJUkVEX1RNTGluZVBvc2l0aW9uWTFSZXRpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw5MDk2KVwiOnt0YWc6XCIoMDAxOCw5MDk2KVwiLHZyOlwiRkRcIixuYW1lOlwiUkVUSVJFRF9QYXJhbGxlbFJlZHVjdGlvbkZhY3RvckluUGxhbmVSZXRpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw5MTY2KVwiOnt0YWc6XCIoMDAxOCw5MTY2KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9CdWxrTW90aW9uU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw5MTk1KVwiOnt0YWc6XCIoMDAxOCw5MTk1KVwiLHZyOlwiRkRcIixuYW1lOlwiUkVUSVJFRF9DaGVtaWNhbFNoaWZ0TWluaW11bUludGVncmF0aW9uTGltaXRJbkh6XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAxOCw5MTk2KVwiOnt0YWc6XCIoMDAxOCw5MTk2KVwiLHZyOlwiRkRcIixuYW1lOlwiUkVUSVJFRF9DaGVtaWNhbFNoaWZ0TWF4aW11bUludGVncmF0aW9uTGltaXRJbkh6XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwwMDE0KVwiOnt0YWc6XCIoMDAyMCwwMDE0KVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9Jc290b3BlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwwMDE1KVwiOnt0YWc6XCIoMDAyMCwwMDE1KVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9QaGFzZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDAxNilcIjp7dGFnOlwiKDAwMjAsMDAxNilcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfSW50ZXJ2YWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDAwMTcpXCI6e3RhZzpcIigwMDIwLDAwMTcpXCIsdnI6XCJJU1wiLG5hbWU6XCJSRVRJUkVEX1RpbWVTbG90TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwwMDE4KVwiOnt0YWc6XCIoMDAyMCwwMDE4KVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9BbmdsZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDAyMilcIjp7dGFnOlwiKDAwMjAsMDAyMilcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDAyNClcIjp7dGFnOlwiKDAwMjAsMDAyNClcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfQ3VydmVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDAwMjYpXCI6e3RhZzpcIigwMDIwLDAwMjYpXCIsdnI6XCJJU1wiLG5hbWU6XCJSRVRJUkVEX0xVVE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDAzMClcIjp7dGFnOlwiKDAwMjAsMDAzMClcIix2cjpcIkRTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VQb3NpdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDAzNSlcIjp7dGFnOlwiKDAwMjAsMDAzNSlcIix2cjpcIkRTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VPcmllbnRhdGlvblwiLHZtOlwiNlwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDA1MClcIjp7dGFnOlwiKDAwMjAsMDA1MClcIix2cjpcIkRTXCIsbmFtZTpcIlJFVElSRURfTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDAwNzApXCI6e3RhZzpcIigwMDIwLDAwNzApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0ltYWdlR2VvbWV0cnlUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwwMDgwKVwiOnt0YWc6XCIoMDAyMCwwMDgwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9NYXNraW5nSW1hZ2VcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMDBBQSlcIjp7dGFnOlwiKDAwMjAsMDBBQSlcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfUmVwb3J0TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwxMDAwKVwiOnt0YWc6XCIoMDAyMCwxMDAwKVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9TZXJpZXNJblN0dWR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwxMDAxKVwiOnt0YWc6XCIoMDAyMCwxMDAxKVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9BY3F1aXNpdGlvbnNJblNlcmllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMTAwMylcIjp7dGFnOlwiKDAwMjAsMTAwMylcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VzSW5TZXJpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDEwMDQpXCI6e3RhZzpcIigwMDIwLDEwMDQpXCIsdnI6XCJJU1wiLG5hbWU6XCJSRVRJUkVEX0FjcXVpc2l0aW9uc0luU3R1ZHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDEwMDUpXCI6e3RhZzpcIigwMDIwLDEwMDUpXCIsdnI6XCJJU1wiLG5hbWU6XCJSRVRJUkVEX0ltYWdlc0luU3R1ZHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDEwMjApXCI6e3RhZzpcIigwMDIwLDEwMjApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwxMDcwKVwiOnt0YWc6XCIoMDAyMCwxMDcwKVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9PdGhlclN0dWR5TnVtYmVyc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMCwzMTAwLTMxRkYpXCI6e3RhZzpcIigwMDIwLDMxMDAtMzFGRilcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfU291cmNlSW1hZ2VJRHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMzQwMSlcIjp7dGFnOlwiKDAwMjAsMzQwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfTW9kaWZ5aW5nRGV2aWNlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDM0MDIpXCI6e3RhZzpcIigwMDIwLDM0MDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX01vZGlmaWVkSW1hZ2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMzQwMylcIjp7dGFnOlwiKDAwMjAsMzQwMylcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfTW9kaWZpZWRJbWFnZURhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDM0MDQpXCI6e3RhZzpcIigwMDIwLDM0MDQpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX01vZGlmeWluZ0RldmljZU1hbnVmYWN0dXJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsMzQwNSlcIjp7dGFnOlwiKDAwMjAsMzQwNSlcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfTW9kaWZpZWRJbWFnZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDM0MDYpXCI6e3RhZzpcIigwMDIwLDM0MDYpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX01vZGlmaWVkSW1hZ2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjAsNTAwMClcIjp7dGFnOlwiKDAwMjAsNTAwMClcIix2cjpcIkFUXCIsbmFtZTpcIlJFVElSRURfT3JpZ2luYWxJbWFnZUlkZW50aWZpY2F0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIwLDUwMDIpXCI6e3RhZzpcIigwMDIwLDUwMDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX09yaWdpbmFsSW1hZ2VJZGVudGlmaWNhdGlvbk5vbWVuY2xhdHVyZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMiwxMDk0KVwiOnt0YWc6XCIoMDAyMiwxMDk0KVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9MZW5zQ29uc3RhbnREZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjIsMTE1MylcIjp7dGFnOlwiKDAwMjIsMTE1MylcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfT3BodGhhbG1pY0F4aWFsTGVuZ3RoQWNxdWlzaXRpb25NZXRob2RDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDIyLDEyNjUpXCI6e3RhZzpcIigwMDIyLDEyNjUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX09waHRoYWxtaWNBeGlhbExlbmd0aFF1YWxpdHlNZXRyaWNUeXBlQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyMiwxMjczKVwiOnt0YWc6XCIoMDAyMiwxMjczKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9PcGh0aGFsbWljQXhpYWxMZW5ndGhRdWFsaXR5TWV0cmljVHlwZURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDA1KVwiOnt0YWc6XCIoMDAyOCwwMDA1KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9JbWFnZURpbWVuc2lvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwMTIpXCI6e3RhZzpcIigwMDI4LDAwMTIpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1BsYW5lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA0MClcIjp7dGFnOlwiKDAwMjgsMDA0MClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VGb3JtYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwNTApXCI6e3RhZzpcIigwMDI4LDAwNTApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX01hbmlwdWxhdGVkSW1hZ2VcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA1RilcIjp7dGFnOlwiKDAwMjgsMDA1RilcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfQ29tcHJlc3Npb25SZWNvZ25pdGlvbkNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwNjApXCI6e3RhZzpcIigwMDI4LDAwNjApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX0NvbXByZXNzaW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA2MSlcIjp7dGFnOlwiKDAwMjgsMDA2MSlcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfQ29tcHJlc3Npb25PcmlnaW5hdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDYyKVwiOnt0YWc6XCIoMDAyOCwwMDYyKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9Db21wcmVzc2lvbkxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDYzKVwiOnt0YWc6XCIoMDAyOCwwMDYzKVwiLHZyOlwiU0hcIixuYW1lOlwiUkVUSVJFRF9Db21wcmVzc2lvbkRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDY1KVwiOnt0YWc6XCIoMDAyOCwwMDY1KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Db21wcmVzc2lvblNlcXVlbmNlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwNjYpXCI6e3RhZzpcIigwMDI4LDAwNjYpXCIsdnI6XCJBVFwiLG5hbWU6XCJSRVRJUkVEX0NvbXByZXNzaW9uU3RlcFBvaW50ZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwNjgpXCI6e3RhZzpcIigwMDI4LDAwNjgpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1JlcGVhdEludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDY5KVwiOnt0YWc6XCIoMDAyOCwwMDY5KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9CaXRzR3JvdXBlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA3MClcIjp7dGFnOlwiKDAwMjgsMDA3MClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfUGVyaW1ldGVyVGFibGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA3MSlcIjp7dGFnOlwiKDAwMjgsMDA3MSlcIix2cjpcInhzXCIsbmFtZTpcIlJFVElSRURfUGVyaW1ldGVyVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwODApXCI6e3RhZzpcIigwMDI4LDAwODApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1ByZWRpY3RvclJvd3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwODEpXCI6e3RhZzpcIigwMDI4LDAwODEpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1ByZWRpY3RvckNvbHVtbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwODIpXCI6e3RhZzpcIigwMDI4LDAwODIpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1ByZWRpY3RvckNvbnN0YW50c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDkwKVwiOnt0YWc6XCIoMDAyOCwwMDkwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9CbG9ja2VkUGl4ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwMDkxKVwiOnt0YWc6XCIoMDAyOCwwMDkxKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9CbG9ja1Jvd3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAwOTIpXCI6e3RhZzpcIigwMDI4LDAwOTIpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0Jsb2NrQ29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA5MylcIjp7dGFnOlwiKDAwMjgsMDA5MylcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfUm93T3ZlcmxhcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDA5NClcIjp7dGFnOlwiKDAwMjgsMDA5NClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfQ29sdW1uT3ZlcmxhcFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDEwNClcIjp7dGFnOlwiKDAwMjgsMDEwNClcIix2cjpcInhzXCIsbmFtZTpcIlJFVElSRURfU21hbGxlc3RWYWxpZFBpeGVsVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAxMDUpXCI6e3RhZzpcIigwMDI4LDAxMDUpXCIsdnI6XCJ4c1wiLG5hbWU6XCJSRVRJUkVEX0xhcmdlc3RWYWxpZFBpeGVsVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAxMTApXCI6e3RhZzpcIigwMDI4LDAxMTApXCIsdnI6XCJ4c1wiLG5hbWU6XCJSRVRJUkVEX1NtYWxsZXN0SW1hZ2VQaXhlbFZhbHVlSW5QbGFuZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDExMSlcIjp7dGFnOlwiKDAwMjgsMDExMSlcIix2cjpcInhzXCIsbmFtZTpcIlJFVElSRURfTGFyZ2VzdEltYWdlUGl4ZWxWYWx1ZUluUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDAyMDApXCI6e3RhZzpcIigwMDI4LDAyMDApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0ltYWdlTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA0MDApXCI6e3RhZzpcIigwMDI4LDA0MDApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1RyYW5zZm9ybUxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNDAxKVwiOnt0YWc6XCIoMDAyOCwwNDAxKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9UcmFuc2Zvcm1WZXJzaW9uTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNDAyKVwiOnt0YWc6XCIoMDAyOCwwNDAyKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9OdW1iZXJPZlRyYW5zZm9ybVN0ZXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNDAzKVwiOnt0YWc6XCIoMDAyOCwwNDAzKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9TZXF1ZW5jZU9mQ29tcHJlc3NlZERhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDQwNClcIjp7dGFnOlwiKDAwMjgsMDQwNClcIix2cjpcIkFUXCIsbmFtZTpcIlJFVElSRURfRGV0YWlsc09mQ29lZmZpY2llbnRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA0MTApXCI6e3RhZzpcIigwMDI4LDA0MTApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1Jvd3NGb3JOdGhPcmRlckNvZWZmaWNpZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDQxMSlcIjp7dGFnOlwiKDAwMjgsMDQxMSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfQ29sdW1uc0Zvck50aE9yZGVyQ29lZmZpY2llbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNDEyKVwiOnt0YWc6XCIoMDAyOCwwNDEyKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9Db2VmZmljaWVudENvZGluZ1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNDEzKVwiOnt0YWc6XCIoMDAyOCwwNDEzKVwiLHZyOlwiQVRcIixuYW1lOlwiUkVUSVJFRF9Db2VmZmljaWVudENvZGluZ1BvaW50ZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA3MDApXCI6e3RhZzpcIigwMDI4LDA3MDApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0RDVExhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNzAxKVwiOnt0YWc6XCIoMDAyOCwwNzAxKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9EYXRhQmxvY2tEZXNjcmlwdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNzAyKVwiOnt0YWc6XCIoMDAyOCwwNzAyKVwiLHZyOlwiQVRcIixuYW1lOlwiUkVUSVJFRF9EYXRhQmxvY2tcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDcxMClcIjp7dGFnOlwiKDAwMjgsMDcxMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfTm9ybWFsaXphdGlvbkZhY3RvckZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDcyMClcIjp7dGFnOlwiKDAwMjgsMDcyMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfWm9uYWxNYXBOdW1iZXJGb3JtYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA3MjEpXCI6e3RhZzpcIigwMDI4LDA3MjEpXCIsdnI6XCJBVFwiLG5hbWU6XCJSRVRJUkVEX1pvbmFsTWFwTG9jYXRpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDcyMilcIjp7dGFnOlwiKDAwMjgsMDcyMilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfWm9uYWxNYXBGb3JtYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA3MzApXCI6e3RhZzpcIigwMDI4LDA3MzApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0FkYXB0aXZlTWFwRm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwNzQwKVwiOnt0YWc6XCIoMDAyOCwwNzQwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9Db2RlTnVtYmVyRm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwwODAwKVwiOnt0YWc6XCIoMDAyOCwwODAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Db2RlTGFiZWxcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDgwMilcIjp7dGFnOlwiKDAwMjgsMDgwMilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfTnVtYmVyT2ZUYWJsZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA4MDMpXCI6e3RhZzpcIigwMDI4LDA4MDMpXCIsdnI6XCJBVFwiLG5hbWU6XCJSRVRJUkVEX0NvZGVUYWJsZUxvY2F0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDA4MDQpXCI6e3RhZzpcIigwMDI4LDA4MDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0JpdHNGb3JDb2RlV29yZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMDgwOClcIjp7dGFnOlwiKDAwMjgsMDgwOClcIix2cjpcIkFUXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VEYXRhTG9jYXRpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMTA4MClcIjp7dGFnOlwiKDAwMjgsMTA4MClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfR3JheVNjYWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwxMTAwKVwiOnt0YWc6XCIoMDAyOCwxMTAwKVwiLHZyOlwieHNcIixuYW1lOlwiUkVUSVJFRF9HcmF5TG9va3VwVGFibGVEZXNjcmlwdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwxMTExKVwiOnt0YWc6XCIoMDAyOCwxMTExKVwiLHZyOlwieHNcIixuYW1lOlwiUkVUSVJFRF9MYXJnZVJlZFBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiNFwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMTExMilcIjp7dGFnOlwiKDAwMjgsMTExMilcIix2cjpcInhzXCIsbmFtZTpcIlJFVElSRURfTGFyZ2VHcmVlblBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiNFwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsMTExMylcIjp7dGFnOlwiKDAwMjgsMTExMylcIix2cjpcInhzXCIsbmFtZTpcIlJFVElSRURfTGFyZ2VCbHVlUGFsZXR0ZUNvbG9yTG9va3VwVGFibGVEZXNjcmlwdG9yXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwxMjAwKVwiOnt0YWc6XCIoMDAyOCwxMjAwKVwiLHZyOlwibHRcIixuYW1lOlwiUkVUSVJFRF9HcmF5TG9va3VwVGFibGVEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDEyMTEpXCI6e3RhZzpcIigwMDI4LDEyMTEpXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX0xhcmdlUmVkUGFsZXR0ZUNvbG9yTG9va3VwVGFibGVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwxMjEyKVwiOnt0YWc6XCIoMDAyOCwxMjEyKVwiLHZyOlwiT1dcIixuYW1lOlwiUkVUSVJFRF9MYXJnZUdyZWVuUGFsZXR0ZUNvbG9yTG9va3VwVGFibGVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCwxMjEzKVwiOnt0YWc6XCIoMDAyOCwxMjEzKVwiLHZyOlwiT1dcIixuYW1lOlwiUkVUSVJFRF9MYXJnZUJsdWVQYWxldHRlQ29sb3JMb29rdXBUYWJsZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDEyMTQpXCI6e3RhZzpcIigwMDI4LDEyMTQpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX0xhcmdlUGFsZXR0ZUNvbG9yTG9va3VwVGFibGVVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDQwMDApXCI6e3RhZzpcIigwMDI4LDQwMDApXCIsdnI6XCJMVFwiLG5hbWU6XCJSRVRJUkVEX0ltYWdlUHJlc2VudGF0aW9uQ29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDI4LDUwMDApXCI6e3RhZzpcIigwMDI4LDUwMDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0JpUGxhbmVBY3F1aXNpdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAyOCw2MDMwKVwiOnt0YWc6XCIoMDAyOCw2MDMwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9NYXNrUG9pbnRlcnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMjgsOTA5OSlcIjp7dGFnOlwiKDAwMjgsOTA5OSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfTGFyZ2VzdE1vbm9jaHJvbWVQaXhlbFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwwMDBBKVwiOnt0YWc6XCIoMDAzMiwwMDBBKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9TdHVkeVN0YXR1c0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwwMDBDKVwiOnt0YWc6XCIoMDAzMiwwMDBDKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9TdHVkeVByaW9yaXR5SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDMyLDAwMTIpXCI6e3RhZzpcIigwMDMyLDAwMTIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1N0dWR5SURJc3N1ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDMyLDAwMzIpXCI6e3RhZzpcIigwMDMyLDAwMzIpXCIsdnI6XCJEQVwiLG5hbWU6XCJSRVRJUkVEX1N0dWR5VmVyaWZpZWREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwwMDMzKVwiOnt0YWc6XCIoMDAzMiwwMDMzKVwiLHZyOlwiVE1cIixuYW1lOlwiUkVUSVJFRF9TdHVkeVZlcmlmaWVkVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMDAzNClcIjp7dGFnOlwiKDAwMzIsMDAzNClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlSZWFkRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMDAzNSlcIjp7dGFnOlwiKDAwMzIsMDAzNSlcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlSZWFkVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTAwMClcIjp7dGFnOlwiKDAwMzIsMTAwMClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkU3R1ZHlTdGFydERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDMyLDEwMDEpXCI6e3RhZzpcIigwMDMyLDEwMDEpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX1NjaGVkdWxlZFN0dWR5U3RhcnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwxMDEwKVwiOnt0YWc6XCIoMDAzMiwxMDEwKVwiLHZyOlwiREFcIixuYW1lOlwiUkVUSVJFRF9TY2hlZHVsZWRTdHVkeVN0b3BEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwxMDExKVwiOnt0YWc6XCIoMDAzMiwxMDExKVwiLHZyOlwiVE1cIixuYW1lOlwiUkVUSVJFRF9TY2hlZHVsZWRTdHVkeVN0b3BUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwxMDIwKVwiOnt0YWc6XCIoMDAzMiwxMDIwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9TY2hlZHVsZWRTdHVkeUxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwxMDIxKVwiOnt0YWc6XCIoMDAzMiwxMDIxKVwiLHZyOlwiQUVcIixuYW1lOlwiUkVUSVJFRF9TY2hlZHVsZWRTdHVkeUxvY2F0aW9uQUVUaXRsZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzMiwxMDMwKVwiOnt0YWc6XCIoMDAzMiwxMDMwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9SZWFzb25Gb3JTdHVkeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTA0MClcIjp7dGFnOlwiKDAwMzIsMTA0MClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlBcnJpdmFsRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTA0MSlcIjp7dGFnOlwiKDAwMzIsMTA0MSlcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlBcnJpdmFsVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTA1MClcIjp7dGFnOlwiKDAwMzIsMTA1MClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlDb21wbGV0aW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTA1MSlcIjp7dGFnOlwiKDAwMzIsMTA1MSlcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlDb21wbGV0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsMTA1NSlcIjp7dGFnOlwiKDAwMzIsMTA1NSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlDb21wb25lbnRTdGF0dXNJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzIsNDAwMClcIjp7dGFnOlwiKDAwMzIsNDAwMClcIix2cjpcIkxUXCIsbmFtZTpcIlJFVElSRURfU3R1ZHlDb21tZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxMSlcIjp7dGFnOlwiKDAwMzgsMDAxMSlcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfSXNzdWVyT2ZBZG1pc3Npb25JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxQSlcIjp7dGFnOlwiKDAwMzgsMDAxQSlcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkQWRtaXNzaW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxQilcIjp7dGFnOlwiKDAwMzgsMDAxQilcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkQWRtaXNzaW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxQylcIjp7dGFnOlwiKDAwMzgsMDAxQylcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkRGlzY2hhcmdlRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxRClcIjp7dGFnOlwiKDAwMzgsMDAxRClcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkRGlzY2hhcmdlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDAxRSlcIjp7dGFnOlwiKDAwMzgsMDAxRSlcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfU2NoZWR1bGVkUGF0aWVudEluc3RpdHV0aW9uUmVzaWRlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzOCwwMDMwKVwiOnt0YWc6XCIoMDAzOCwwMDMwKVwiLHZyOlwiREFcIixuYW1lOlwiUkVUSVJFRF9EaXNjaGFyZ2VEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzOCwwMDMyKVwiOnt0YWc6XCIoMDAzOCwwMDMyKVwiLHZyOlwiVE1cIixuYW1lOlwiUkVUSVJFRF9EaXNjaGFyZ2VUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzOCwwMDQwKVwiOnt0YWc6XCIoMDAzOCwwMDQwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9EaXNjaGFyZ2VEaWFnbm9zaXNEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwMzgsMDA0NClcIjp7dGFnOlwiKDAwMzgsMDA0NClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfRGlzY2hhcmdlRGlhZ25vc2lzQ29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDAzOCwwMDYxKVwiOnt0YWc6XCIoMDAzOCwwMDYxKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9Jc3N1ZXJPZlNlcnZpY2VFcGlzb2RlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDAzMDcpXCI6e3RhZzpcIigwMDQwLDAzMDcpXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0Rpc3RhbmNlU291cmNlVG9TdXBwb3J0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCwwMzMwKVwiOnt0YWc6XCIoMDA0MCwwMzMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkUHJvY2VkdXJlU3RlcFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCwwNTBBKVwiOnt0YWc6XCIoMDA0MCwwNTBBKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9TcGVjaW1lbkFjY2Vzc2lvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMDU1MClcIjp7dGFnOlwiKDAwNDAsMDU1MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfU3BlY2ltZW5TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMDU1MilcIjp7dGFnOlwiKDAwNDAsMDU1MilcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfU3BlY2ltZW5EZXNjcmlwdGlvblNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDA1NTMpXCI6e3RhZzpcIigwMDQwLDA1NTMpXCIsdnI6XCJTVFwiLG5hbWU6XCJSRVRJUkVEX1NwZWNpbWVuRGVzY3JpcHRpb25UcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMDZGQSlcIjp7dGFnOlwiKDAwNDAsMDZGQSlcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfU2xpZGVJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCwwOEQ4KVwiOnt0YWc6XCIoMDA0MCwwOEQ4KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9QaXhlbFNwYWNpbmdTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMDhEQSlcIjp7dGFnOlwiKDAwNDAsMDhEQSlcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfQ29vcmRpbmF0ZVN5c3RlbUF4aXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDA5RjgpXCI6e3RhZzpcIigwMDQwLDA5RjgpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1ZpdGFsU3RhaW5Db2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMTAwNilcIjp7dGFnOlwiKDAwNDAsMTAwNilcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfUGxhY2VyT3JkZXJOdW1iZXJQcm9jZWR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDEwMDcpXCI6e3RhZzpcIigwMDQwLDEwMDcpXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX0ZpbGxlck9yZGVyTnVtYmVyUHJvY2VkdXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCwxMDYwKVwiOnt0YWc6XCIoMDA0MCwxMDYwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9SZXF1ZXN0ZWRQcm9jZWR1cmVEZXNjcmlwdGlvblRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCwyMDAxKVwiOnt0YWc6XCIoMDA0MCwyMDAxKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9SZWFzb25Gb3JUaGVJbWFnaW5nU2VydmljZVJlcXVlc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDIwMDYpXCI6e3RhZzpcIigwMDQwLDIwMDYpXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX1BsYWNlck9yZGVyTnVtYmVySW1hZ2luZ1NlcnZpY2VSZXF1ZXN0UmV0aXJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsMjAwNylcIjp7dGFnOlwiKDAwNDAsMjAwNylcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfRmlsbGVyT3JkZXJOdW1iZXJJbWFnaW5nU2VydmljZVJlcXVlc3RSZXRpcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCw0MDAxKVwiOnt0YWc6XCIoMDA0MCw0MDAxKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9HZW5lcmFsUHVycG9zZVNjaGVkdWxlZFByb2NlZHVyZVN0ZXBTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDQwMDIpXCI6e3RhZzpcIigwMDQwLDQwMDIpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX0dlbmVyYWxQdXJwb3NlUGVyZm9ybWVkUHJvY2VkdXJlU3RlcFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsNDAwMylcIjp7dGFnOlwiKDAwNDAsNDAwMylcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfR2VuZXJhbFB1cnBvc2VTY2hlZHVsZWRQcm9jZWR1cmVTdGVwUHJpb3JpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDQwMDQpXCI6e3RhZzpcIigwMDQwLDQwMDQpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1NjaGVkdWxlZFByb2Nlc3NpbmdBcHBsaWNhdGlvbnNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDQwMDYpXCI6e3RhZzpcIigwMDQwLDQwMDYpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX011bHRpcGxlQ29waWVzRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsNDAxNSlcIjp7dGFnOlwiKDAwNDAsNDAxNSlcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVzdWx0aW5nR2VuZXJhbFB1cnBvc2VQZXJmb3JtZWRQcm9jZWR1cmVTdGVwc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCw0MDE2KVwiOnt0YWc6XCIoMDA0MCw0MDE2KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkR2VuZXJhbFB1cnBvc2VTY2hlZHVsZWRQcm9jZWR1cmVTdGVwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDQwMjIpXCI6e3RhZzpcIigwMDQwLDQwMjIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlbGV2YW50SW5mb3JtYXRpb25TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsNDAyMylcIjp7dGFnOlwiKDAwNDAsNDAyMylcIix2cjpcIlVJXCIsbmFtZTpcIlJFVElSRURfUmVmZXJlbmNlZEdlbmVyYWxQdXJwb3NlU2NoZWR1bGVkUHJvY2VkdXJlU3RlcFRyYW5zYWN0aW9uVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCw0MDMxKVwiOnt0YWc6XCIoMDA0MCw0MDMxKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZXF1ZXN0ZWRTdWJzZXF1ZW50V29ya2l0ZW1Db2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLDQwMzIpXCI6e3RhZzpcIigwMDQwLDQwMzIpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX05vbkRJQ09NT3V0cHV0Q29kZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDA3KVwiOnt0YWc6XCIoMDA0MCxBMDA3KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9GaW5kaW5nc0ZsYWdUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTAyMClcIjp7dGFnOlwiKDAwNDAsQTAyMClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfRmluZGluZ3NTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDIxKVwiOnt0YWc6XCIoMDA0MCxBMDIxKVwiLHZyOlwiVUlcIixuYW1lOlwiUkVUSVJFRF9GaW5kaW5nc0dyb3VwVUlEVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwMjIpXCI6e3RhZzpcIigwMDQwLEEwMjIpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRGaW5kaW5nc0dyb3VwVUlEVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwMjMpXCI6e3RhZzpcIigwMDQwLEEwMjMpXCIsdnI6XCJEQVwiLG5hbWU6XCJSRVRJUkVEX0ZpbmRpbmdzR3JvdXBSZWNvcmRpbmdEYXRlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwMjQpXCI6e3RhZzpcIigwMDQwLEEwMjQpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX0ZpbmRpbmdzR3JvdXBSZWNvcmRpbmdUaW1lVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwMjYpXCI6e3RhZzpcIigwMDQwLEEwMjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0ZpbmRpbmdzU291cmNlQ2F0ZWdvcnlDb2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTAyOClcIjp7dGFnOlwiKDAwNDAsQTAyOClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfRG9jdW1lbnRpbmdPcmdhbml6YXRpb25JZGVudGlmaWVyQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwNDcpXCI6e3RhZzpcIigwMDQwLEEwNDcpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX01lYXN1cmVtZW50UHJlY2lzaW9uRGVzY3JpcHRpb25UcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTA1NylcIjp7dGFnOlwiKDAwNDAsQTA1NylcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfVXJnZW5jeU9yUHJpb3JpdHlBbGVydHNUcmlhbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDYwKVwiOnt0YWc6XCIoMDA0MCxBMDYwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9TZXF1ZW5jaW5nSW5kaWNhdG9yVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwNjYpXCI6e3RhZzpcIigwMDQwLEEwNjYpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0RvY3VtZW50SWRlbnRpZmllckNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDY3KVwiOnt0YWc6XCIoMDA0MCxBMDY3KVwiLHZyOlwiUE5cIixuYW1lOlwiUkVUSVJFRF9Eb2N1bWVudEF1dGhvclRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDY4KVwiOnt0YWc6XCIoMDA0MCxBMDY4KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9Eb2N1bWVudEF1dGhvcklkZW50aWZpZXJDb2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTA3MClcIjp7dGFnOlwiKDAwNDAsQTA3MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfSWRlbnRpZmllckNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDc0KVwiOnt0YWc6XCIoMDA0MCxBMDc0KVwiLHZyOlwiT0JcIixuYW1lOlwiUkVUSVJFRF9PYmplY3RCaW5hcnlJZGVudGlmaWVyVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwNzYpXCI6e3RhZzpcIigwMDQwLEEwNzYpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0RvY3VtZW50aW5nT2JzZXJ2ZXJJZGVudGlmaWVyQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEwODUpXCI6e3RhZzpcIigwMDQwLEEwODUpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1Byb2NlZHVyZUlkZW50aWZpZXJDb2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTA4OSlcIjp7dGFnOlwiKDAwNDAsQTA4OSlcIix2cjpcIk9CXCIsbmFtZTpcIlJFVElSRURfT2JqZWN0RGlyZWN0b3J5QmluYXJ5SWRlbnRpZmllclRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMDkwKVwiOnt0YWc6XCIoMDA0MCxBMDkwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9FcXVpdmFsZW50Q0RBRG9jdW1lbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTExMClcIjp7dGFnOlwiKDAwNDAsQTExMClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfRGF0ZU9mRG9jdW1lbnRPclZlcmJhbFRyYW5zYWN0aW9uVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEExMTIpXCI6e3RhZzpcIigwMDQwLEExMTIpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX1RpbWVPZkRvY3VtZW50Q3JlYXRpb25PclZlcmJhbFRyYW5zYWN0aW9uVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEExMjUpXCI6e3RhZzpcIigwMDQwLEExMjUpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1JlcG9ydFN0YXR1c0lEVHJpYWxcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEExNjcpXCI6e3RhZzpcIigwMDQwLEExNjcpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX09ic2VydmF0aW9uQ2F0ZWdvcnlDb2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTE2QSlcIjp7dGFnOlwiKDAwNDAsQTE2QSlcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfQmlibGlvZ3JhcGhpY0NpdGF0aW9uVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEExNzIpXCI6e3RhZzpcIigwMDQwLEExNzIpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRPYnNlcnZhdGlvblVJRFRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMTczKVwiOnt0YWc6XCIoMDA0MCxBMTczKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkT2JzZXJ2YXRpb25DbGFzc1RyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMTc0KVwiOnt0YWc6XCIoMDA0MCxBMTc0KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkT2JqZWN0T2JzZXJ2YXRpb25DbGFzc1RyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMTkyKVwiOnt0YWc6XCIoMDA0MCxBMTkyKVwiLHZyOlwiREFcIixuYW1lOlwiUkVUSVJFRF9PYnNlcnZhdGlvbkRhdGVUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTE5MylcIjp7dGFnOlwiKDAwNDAsQTE5MylcIix2cjpcIlRNXCIsbmFtZTpcIlJFVElSRURfT2JzZXJ2YXRpb25UaW1lVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEExOTQpXCI6e3RhZzpcIigwMDQwLEExOTQpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX01lYXN1cmVtZW50QXV0b21hdGlvblRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMjI0KVwiOnt0YWc6XCIoMDA0MCxBMjI0KVwiLHZyOlwiU1RcIixuYW1lOlwiUkVUSVJFRF9JZGVudGlmaWNhdGlvbkRlc2NyaXB0aW9uVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEyOTApXCI6e3RhZzpcIigwMDQwLEEyOTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX0Nvb3JkaW5hdGVzU2V0R2VvbWV0cmljVHlwZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMjk2KVwiOnt0YWc6XCIoMDA0MCxBMjk2KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9BbGdvcml0aG1Db2RlU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTI5NylcIjp7dGFnOlwiKDAwNDAsQTI5NylcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfQWxnb3JpdGhtRGVzY3JpcHRpb25UcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTI5QSlcIjp7dGFnOlwiKDAwNDAsQTI5QSlcIix2cjpcIlNMXCIsbmFtZTpcIlJFVElSRURfUGl4ZWxDb29yZGluYXRlc1NldFRyaWFsXCIsdm06XCIyLTJuXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMzA3KVwiOnt0YWc6XCIoMDA0MCxBMzA3KVwiLHZyOlwiUE5cIixuYW1lOlwiUkVUSVJFRF9DdXJyZW50T2JzZXJ2ZXJUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTMxMylcIjp7dGFnOlwiKDAwNDAsQTMxMylcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVmZXJlbmNlZEFjY2Vzc2lvblNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEzM0EpXCI6e3RhZzpcIigwMDQwLEEzM0EpXCIsdnI6XCJTVFwiLG5hbWU6XCJSRVRJUkVEX1JlcG9ydFN0YXR1c0NvbW1lbnRUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTM0MClcIjp7dGFnOlwiKDAwNDAsQTM0MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUHJvY2VkdXJlQ29udGV4dFNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEzNTIpXCI6e3RhZzpcIigwMDQwLEEzNTIpXCIsdnI6XCJQTlwiLG5hbWU6XCJSRVRJUkVEX1ZlcmJhbFNvdXJjZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMzUzKVwiOnt0YWc6XCIoMDA0MCxBMzUzKVwiLHZyOlwiU1RcIixuYW1lOlwiUkVUSVJFRF9BZGRyZXNzVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEzNTQpXCI6e3RhZzpcIigwMDQwLEEzNTQpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1RlbGVwaG9uZU51bWJlclRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBMzU4KVwiOnt0YWc6XCIoMDA0MCxBMzU4KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9WZXJiYWxTb3VyY2VJZGVudGlmaWVyQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEEzODApXCI6e3RhZzpcIigwMDQwLEEzODApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlcG9ydERldGFpbFNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEE0MDIpXCI6e3RhZzpcIigwMDQwLEE0MDIpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX09ic2VydmF0aW9uU3ViamVjdFVJRFRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBNDAzKVwiOnt0YWc6XCIoMDA0MCxBNDAzKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9PYnNlcnZhdGlvblN1YmplY3RDbGFzc1RyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBNDA0KVwiOnt0YWc6XCIoMDA0MCxBNDA0KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9PYnNlcnZhdGlvblN1YmplY3RUeXBlQ29kZVNlcXVlbmNlVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEE2MDApXCI6e3RhZzpcIigwMDQwLEE2MDApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX09ic2VydmF0aW9uU3ViamVjdENvbnRleHRGbGFnVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLEE2MDEpXCI6e3RhZzpcIigwMDQwLEE2MDEpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX09ic2VydmVyQ29udGV4dEZsYWdUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTYwMylcIjp7dGFnOlwiKDAwNDAsQTYwMylcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfUHJvY2VkdXJlQ29udGV4dEZsYWdUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTczMSlcIjp7dGFnOlwiKDAwNDAsQTczMSlcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVsYXRpb25zaGlwU2VxdWVuY2VUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsQTczMilcIjp7dGFnOlwiKDAwNDAsQTczMilcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVsYXRpb25zaGlwVHlwZUNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBNzQ0KVwiOnt0YWc6XCIoMDA0MCxBNzQ0KVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9MYW5ndWFnZUNvZGVTZXF1ZW5jZVRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA0MCxBOTkyKVwiOnt0YWc6XCIoMDA0MCxBOTkyKVwiLHZyOlwiU1RcIixuYW1lOlwiUkVUSVJFRF9Vbmlmb3JtUmVzb3VyY2VMb2NhdG9yVHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLERCMDYpXCI6e3RhZzpcIigwMDQwLERCMDYpXCIsdnI6XCJEVFwiLG5hbWU6XCJSRVRJUkVEX1RlbXBsYXRlVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsREIwNylcIjp7dGFnOlwiKDAwNDAsREIwNylcIix2cjpcIkRUXCIsbmFtZTpcIlJFVElSRURfVGVtcGxhdGVMb2NhbFZlcnNpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLERCMEIpXCI6e3RhZzpcIigwMDQwLERCMEIpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1RlbXBsYXRlRXh0ZW5zaW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNDAsREIwQylcIjp7dGFnOlwiKDAwNDAsREIwQylcIix2cjpcIlVJXCIsbmFtZTpcIlJFVElSRURfVGVtcGxhdGVFeHRlbnNpb25Pcmdhbml6YXRpb25VSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDQwLERCMEQpXCI6e3RhZzpcIigwMDQwLERCMEQpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX1RlbXBsYXRlRXh0ZW5zaW9uQ3JlYXRvclVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNTQsMTQwMClcIjp7dGFnOlwiKDAwNTQsMTQwMClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfQ291bnRzSW5jbHVkZWRcIix2bTpcIjEtblwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNTQsMTQwMSlcIjp7dGFnOlwiKDAwNTQsMTQwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfRGVhZFRpbWVDb3JyZWN0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwNzAsMDA0MClcIjp7dGFnOlwiKDAwNzAsMDA0MClcIix2cjpcIklTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VSb3RhdGlvblJldGlyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDcwLDAwNTApXCI6e3RhZzpcIigwMDcwLDAwNTApXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0Rpc3BsYXllZEFyZWFUb3BMZWZ0SGFuZENvcm5lclRyaWFsXCIsdm06XCIyXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA3MCwwMDUxKVwiOnt0YWc6XCIoMDA3MCwwMDUxKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9EaXNwbGF5ZWRBcmVhQm90dG9tUmlnaHRIYW5kQ29ybmVyVHJpYWxcIix2bTpcIjJcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDcwLDAwNjcpXCI6e3RhZzpcIigwMDcwLDAwNjcpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX0dyYXBoaWNMYXllclJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA3NCwxMDI0KVwiOnt0YWc6XCIoMDA3NCwxMDI0KVwiLHZyOlwiSVNcIixuYW1lOlwiUkVUSVJFRF9CZWFtT3JkZXJJbmRleFRyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA3NCwxMDM4KVwiOnt0YWc6XCIoMDA3NCwxMDM4KVwiLHZyOlwiRFNcIixuYW1lOlwiUkVUSVJFRF9Eb3VibGVFeHBvc3VyZU1ldGVyc2V0VHJpYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigwMDc0LDEwM0EpXCI6e3RhZzpcIigwMDc0LDEwM0EpXCIsdnI6XCJEU1wiLG5hbWU6XCJSRVRJUkVEX0RvdWJsZUV4cG9zdXJlRmllbGREZWx0YVRyaWFsXCIsdm06XCI0XCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA3NCwxMjIwKVwiOnt0YWc6XCIoMDA3NCwxMjIwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWxhdGVkUHJvY2VkdXJlU3RlcFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA3NCwxMjIyKVwiOnt0YWc6XCIoMDA3NCwxMjIyKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9Qcm9jZWR1cmVTdGVwUmVsYXRpb25zaGlwVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwODgsMDkwNClcIjp7dGFnOlwiKDAwODgsMDkwNClcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfVG9waWNUaXRsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwODgsMDkwNilcIjp7dGFnOlwiKDAwODgsMDkwNilcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfVG9waWNTdWJqZWN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMDA4OCwwOTEwKVwiOnt0YWc6XCIoMDA4OCwwOTEwKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9Ub3BpY0F1dGhvclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDAwODgsMDkxMilcIjp7dGFnOlwiKDAwODgsMDkxMilcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfVG9waWNLZXl3b3Jkc1wiLHZtOlwiMS0zMlwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDEwMDAsMDAxMClcIjp7dGFnOlwiKDEwMDAsMDAxMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfRXNjYXBlVHJpcGxldFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDEwMDAsMDAxMSlcIjp7dGFnOlwiKDEwMDAsMDAxMSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfUnVuTGVuZ3RoVHJpcGxldFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDEwMDAsMDAxMilcIjp7dGFnOlwiKDEwMDAsMDAxMilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfSHVmZm1hblRhYmxlU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDEwMDAsMDAxMylcIjp7dGFnOlwiKDEwMDAsMDAxMylcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfSHVmZm1hblRhYmxlVHJpcGxldFwiLHZtOlwiM1wiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDEwMDAsMDAxNClcIjp7dGFnOlwiKDEwMDAsMDAxNClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfU2hpZnRUYWJsZVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigxMDAwLDAwMTUpXCI6e3RhZzpcIigxMDAwLDAwMTUpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1NoaWZ0VGFibGVUcmlwbGV0XCIsdm06XCIzXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMTAxMCwwMDA0KVwiOnt0YWc6XCIoMTAxMCwwMDA0KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9ab25hbE1hcFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjAwMCwwMDYyKVwiOnt0YWc6XCIoMjAwMCwwMDYyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Db2xvckltYWdlUHJpbnRpbmdGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjAwMCwwMDYzKVwiOnt0YWc6XCIoMjAwMCwwMDYzKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Db2xsYXRpb25GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjAwMCwwMDY1KVwiOnt0YWc6XCIoMjAwMCwwMDY1KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9Bbm5vdGF0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwMDAsMDA2NylcIjp7dGFnOlwiKDIwMDAsMDA2NylcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VPdmVybGF5RmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwMDAsMDA2OSlcIjp7dGFnOlwiKDIwMDAsMDA2OSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfUHJlc2VudGF0aW9uTFVURmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwMDAsMDA2QSlcIjp7dGFnOlwiKDIwMDAsMDA2QSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VCb3hQcmVzZW50YXRpb25MVVRGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjAwMCwwNTEwKVwiOnt0YWc6XCIoMjAwMCwwNTEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkU3RvcmVkUHJpbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwMjAsMDEzMClcIjp7dGFnOlwiKDIwMjAsMDEzMClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVmZXJlbmNlZEltYWdlT3ZlcmxheUJveFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjAyMCwwMTQwKVwiOnt0YWc6XCIoMjAyMCwwMTQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkVk9JTFVUQm94U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMDQwLDAwMTApXCI6e3RhZzpcIigyMDQwLDAwMTApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRPdmVybGF5UGxhbmVTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwNDAsMDAxMSlcIjp7dGFnOlwiKDIwNDAsMDAxMSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfUmVmZXJlbmNlZE92ZXJsYXlQbGFuZUdyb3Vwc1wiLHZtOlwiMS05OVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwNDAsMDAyMClcIjp7dGFnOlwiKDIwNDAsMDAyMClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheVBpeGVsRGF0YVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjA0MCwwMDYwKVwiOnt0YWc6XCIoMjA0MCwwMDYwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5TWFnbmlmaWNhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMDQwLDAwNzApXCI6e3RhZzpcIigyMDQwLDAwNzApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX092ZXJsYXlTbW9vdGhpbmdUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjA0MCwwMDcyKVwiOnt0YWc6XCIoMjA0MCwwMDcyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5T3JJbWFnZU1hZ25pZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMDQwLDAwNzQpXCI6e3RhZzpcIigyMDQwLDAwNzQpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX01hZ25pZnlUb051bWJlck9mQ29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIwNDAsMDA4MClcIjp7dGFnOlwiKDIwNDAsMDA4MClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUZvcmVncm91bmREZW5zaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjA0MCwwMDgyKVwiOnt0YWc6XCIoMjA0MCwwMDgyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5QmFja2dyb3VuZERlbnNpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMDQwLDAwOTApXCI6e3RhZzpcIigyMDQwLDAwOTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX092ZXJsYXlNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjA0MCwwMTAwKVwiOnt0YWc6XCIoMjA0MCwwMTAwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9UaHJlc2hvbGREZW5zaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjA0MCwwNTAwKVwiOnt0YWc6XCIoMjA0MCwwNTAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VkSW1hZ2VCb3hTZXF1ZW5jZVJldGlyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTAwLDAwMTApXCI6e3RhZzpcIigyMTAwLDAwMTApXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX1ByaW50Sm9iSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTAwLDAxNDApXCI6e3RhZzpcIigyMTAwLDAxNDApXCIsdnI6XCJBRVwiLG5hbWU6XCJSRVRJUkVEX0Rlc3RpbmF0aW9uQUVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTAwLDA1MDApXCI6e3RhZzpcIigyMTAwLDA1MDApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRQcmludEpvYlNlcXVlbmNlUHVsbFN0b3JlZFByaW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjExMCwwMDk5KVwiOnt0YWc6XCIoMjExMCwwMDk5KVwiLHZyOlwiU0hcIixuYW1lOlwiUkVUSVJFRF9QcmludFF1ZXVlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTIwLDAwMTApXCI6e3RhZzpcIigyMTIwLDAwMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1F1ZXVlU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjEyMCwwMDUwKVwiOnt0YWc6XCIoMjEyMCwwMDUwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9QcmludEpvYkRlc2NyaXB0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTIwLDAwNzApXCI6e3RhZzpcIigyMTIwLDAwNzApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1JlZmVyZW5jZWRQcmludEpvYlNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjEzMCwwMDEwKVwiOnt0YWc6XCIoMjEzMCwwMDEwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9QcmludE1hbmFnZW1lbnRDYXBhYmlsaXRpZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIxMzAsMDAxNSlcIjp7dGFnOlwiKDIxMzAsMDAxNSlcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUHJpbnRlckNoYXJhY3RlcmlzdGljc1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjEzMCwwMDMwKVwiOnt0YWc6XCIoMjEzMCwwMDMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9GaWxtQm94Q29udGVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjEzMCwwMDQwKVwiOnt0YWc6XCIoMjEzMCwwMDQwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9JbWFnZUJveENvbnRlbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIxMzAsMDA1MClcIjp7dGFnOlwiKDIxMzAsMDA1MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfQW5ub3RhdGlvbkNvbnRlbnRTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIxMzAsMDA2MClcIjp7dGFnOlwiKDIxMzAsMDA2MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfSW1hZ2VPdmVybGF5Qm94Q29udGVudFNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMjEzMCwwMDgwKVwiOnt0YWc6XCIoMjEzMCwwMDgwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9QcmVzZW50YXRpb25MVVRDb250ZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigyMTMwLDAwQTApXCI6e3RhZzpcIigyMTMwLDAwQTApXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1Byb3Bvc2VkU3R1ZHlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDIxMzAsMDBDMClcIjp7dGFnOlwiKDIxMzAsMDBDMClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfT3JpZ2luYWxJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMzAwNiwwMEMwKVwiOnt0YWc6XCIoMzAwNiwwMEMwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9GcmFtZU9mUmVmZXJlbmNlUmVsYXRpb25zaGlwU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigzMDA2LDAwQzIpXCI6e3RhZzpcIigzMDA2LDAwQzIpXCIsdnI6XCJVSVwiLG5hbWU6XCJSRVRJUkVEX1JlbGF0ZWRGcmFtZU9mUmVmZXJlbmNlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMzAwNiwwMEM0KVwiOnt0YWc6XCIoMzAwNiwwMEM0KVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9GcmFtZU9mUmVmZXJlbmNlVHJhbnNmb3JtYXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoMzAwQSwwMDg4KVwiOnt0YWc6XCIoMzAwQSwwMDg4KVwiLHZyOlwiRkxcIixuYW1lOlwiUkVUSVJFRF9CZWFtRG9zZVBvaW50RGVwdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigzMDBBLDAwODkpXCI6e3RhZzpcIigzMDBBLDAwODkpXCIsdnI6XCJGTFwiLG5hbWU6XCJSRVRJUkVEX0JlYW1Eb3NlUG9pbnRFcXVpdmFsZW50RGVwdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIigzMDBBLDAwOEEpXCI6e3RhZzpcIigzMDBBLDAwOEEpXCIsdnI6XCJGTFwiLG5hbWU6XCJSRVRJUkVEX0JlYW1Eb3NlUG9pbnRTU0RcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDAwLDAwMTApXCI6e3RhZzpcIig0MDAwLDAwMTApXCIsdnI6XCJMVFwiLG5hbWU6XCJSRVRJUkVEX0FyYml0cmFyeVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDAsNDAwMClcIjp7dGFnOlwiKDQwMDAsNDAwMClcIix2cjpcIkxUXCIsbmFtZTpcIlJFVElSRURfVGV4dENvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMDQwKVwiOnt0YWc6XCIoNDAwOCwwMDQwKVwiLHZyOlwiU0hcIixuYW1lOlwiUkVUSVJFRF9SZXN1bHRzSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAwNDIpXCI6e3RhZzpcIig0MDA4LDAwNDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX1Jlc3VsdHNJRElzc3VlclwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDA1MClcIjp7dGFnOlwiKDQwMDgsMDA1MClcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfUmVmZXJlbmNlZEludGVycHJldGF0aW9uU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAwRkYpXCI6e3RhZzpcIig0MDA4LDAwRkYpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX1JlcG9ydFByb2R1Y3Rpb25TdGF0dXNUcmlhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDEwMClcIjp7dGFnOlwiKDQwMDgsMDEwMClcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfSW50ZXJwcmV0YXRpb25SZWNvcmRlZERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMDEpXCI6e3RhZzpcIig0MDA4LDAxMDEpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uUmVjb3JkZWRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMTAyKVwiOnt0YWc6XCIoNDAwOCwwMTAyKVwiLHZyOlwiUE5cIixuYW1lOlwiUkVUSVJFRF9JbnRlcnByZXRhdGlvblJlY29yZGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMTAzKVwiOnt0YWc6XCIoNDAwOCwwMTAzKVwiLHZyOlwiTE9cIixuYW1lOlwiUkVUSVJFRF9SZWZlcmVuY2VUb1JlY29yZGVkU291bmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMDgpXCI6e3RhZzpcIig0MDA4LDAxMDgpXCIsdnI6XCJEQVwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uVHJhbnNjcmlwdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMDkpXCI6e3RhZzpcIig0MDA4LDAxMDkpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uVHJhbnNjcmlwdGlvblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMEEpXCI6e3RhZzpcIig0MDA4LDAxMEEpXCIsdnI6XCJQTlwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uVHJhbnNjcmliZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMEIpXCI6e3RhZzpcIig0MDA4LDAxMEIpXCIsdnI6XCJTVFwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uVGV4dFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDEwQylcIjp7dGFnOlwiKDQwMDgsMDEwQylcIix2cjpcIlBOXCIsbmFtZTpcIlJFVElSRURfSW50ZXJwcmV0YXRpb25BdXRob3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMTEpXCI6e3RhZzpcIig0MDA4LDAxMTEpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uQXBwcm92ZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDExMilcIjp7dGFnOlwiKDQwMDgsMDExMilcIix2cjpcIkRBXCIsbmFtZTpcIlJFVElSRURfSW50ZXJwcmV0YXRpb25BcHByb3ZhbERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMTMpXCI6e3RhZzpcIig0MDA4LDAxMTMpXCIsdnI6XCJUTVwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uQXBwcm92YWxUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMTE0KVwiOnt0YWc6XCIoNDAwOCwwMTE0KVwiLHZyOlwiUE5cIixuYW1lOlwiUkVUSVJFRF9QaHlzaWNpYW5BcHByb3ZpbmdJbnRlcnByZXRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDExNSlcIjp7dGFnOlwiKDQwMDgsMDExNSlcIix2cjpcIkxUXCIsbmFtZTpcIlJFVElSRURfSW50ZXJwcmV0YXRpb25EaWFnbm9zaXNEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsMDExNylcIjp7dGFnOlwiKDQwMDgsMDExNylcIix2cjpcIlNRXCIsbmFtZTpcIlJFVElSRURfSW50ZXJwcmV0YXRpb25EaWFnbm9zaXNDb2RlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMTgpXCI6e3RhZzpcIig0MDA4LDAxMTgpXCIsdnI6XCJTUVwiLG5hbWU6XCJSRVRJUkVEX1Jlc3VsdHNEaXN0cmlidXRpb25MaXN0U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMTkpXCI6e3RhZzpcIig0MDA4LDAxMTkpXCIsdnI6XCJQTlwiLG5hbWU6XCJSRVRJUkVEX0Rpc3RyaWJ1dGlvbk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAxMUEpXCI6e3RhZzpcIig0MDA4LDAxMUEpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0Rpc3RyaWJ1dGlvbkFkZHJlc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAyMDApXCI6e3RhZzpcIig0MDA4LDAyMDApXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAyMDIpXCI6e3RhZzpcIig0MDA4LDAyMDIpXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uSURJc3N1ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig0MDA4LDAyMTApXCI6e3RhZzpcIig0MDA4LDAyMTApXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX0ludGVycHJldGF0aW9uVHlwZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMjEyKVwiOnt0YWc6XCIoNDAwOCwwMjEyKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9JbnRlcnByZXRhdGlvblN0YXR1c0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNDAwOCwwMzAwKVwiOnt0YWc6XCIoNDAwOCwwMzAwKVwiLHZyOlwiU1RcIixuYW1lOlwiUkVUSVJFRF9JbXByZXNzaW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDQwMDgsNDAwMClcIjp7dGFnOlwiKDQwMDgsNDAwMClcIix2cjpcIlNUXCIsbmFtZTpcIlJFVElSRURfUmVzdWx0c0NvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAwMDUpXCI6e3RhZzpcIig1MDAwLTUwRkYsMDAwNSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfQ3VydmVEaW1lbnNpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAwMTApXCI6e3RhZzpcIig1MDAwLTUwRkYsMDAxMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfTnVtYmVyT2ZQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDAyMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMDIwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9UeXBlT2ZEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAwMjIpXCI6e3RhZzpcIig1MDAwLTUwRkYsMDAyMilcIix2cjpcIkxPXCIsbmFtZTpcIlJFVElSRURfQ3VydmVEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDUwMDAtNTBGRiwwMDMwKVwiOnt0YWc6XCIoNTAwMC01MEZGLDAwMzApXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX0F4aXNVbml0c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAwNDApXCI6e3RhZzpcIig1MDAwLTUwRkYsMDA0MClcIix2cjpcIlNIXCIsbmFtZTpcIlJFVElSRURfQXhpc0xhYmVsc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAxMDMpXCI6e3RhZzpcIig1MDAwLTUwRkYsMDEwMylcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfRGF0YVZhbHVlUmVwcmVzZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDEwNClcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMTA0KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9NaW5pbXVtQ29vcmRpbmF0ZVZhbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDEwNSlcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMTA1KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9NYXhpbXVtQ29vcmRpbmF0ZVZhbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDEwNilcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMTA2KVwiLHZyOlwiU0hcIixuYW1lOlwiUkVUSVJFRF9DdXJ2ZVJhbmdlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDExMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMTEwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9DdXJ2ZURhdGFEZXNjcmlwdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMDExMilcIjp7dGFnOlwiKDUwMDAtNTBGRiwwMTEyKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9Db29yZGluYXRlU3RhcnRWYWx1ZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDAxMTQpXCI6e3RhZzpcIig1MDAwLTUwRkYsMDExNClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfQ29vcmRpbmF0ZVN0ZXBWYWx1ZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDEwMDEpXCI6e3RhZzpcIig1MDAwLTUwRkYsMTAwMSlcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfQ3VydmVBY3RpdmF0aW9uTGF5ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjAwMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwyMDAwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9BdWRpb1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjAwMilcIjp7dGFnOlwiKDUwMDAtNTBGRiwyMDAyKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9BdWRpb1NhbXBsZUZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDUwMDAtNTBGRiwyMDA0KVwiOnt0YWc6XCIoNTAwMC01MEZGLDIwMDQpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX051bWJlck9mQ2hhbm5lbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjAwNilcIjp7dGFnOlwiKDUwMDAtNTBGRiwyMDA2KVwiLHZyOlwiVUxcIixuYW1lOlwiUkVUSVJFRF9OdW1iZXJPZlNhbXBsZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjAwOClcIjp7dGFnOlwiKDUwMDAtNTBGRiwyMDA4KVwiLHZyOlwiVUxcIixuYW1lOlwiUkVUSVJFRF9TYW1wbGVSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDIwMEEpXCI6e3RhZzpcIig1MDAwLTUwRkYsMjAwQSlcIix2cjpcIlVMXCIsbmFtZTpcIlJFVElSRURfVG90YWxUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDIwMEMpXCI6e3RhZzpcIig1MDAwLTUwRkYsMjAwQylcIix2cjpcIm94XCIsbmFtZTpcIlJFVElSRURfQXVkaW9TYW1wbGVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNTAwMC01MEZGLDIwMEUpXCI6e3RhZzpcIig1MDAwLTUwRkYsMjAwRSlcIix2cjpcIkxUXCIsbmFtZTpcIlJFVElSRURfQXVkaW9Db21tZW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDUwMDAtNTBGRiwyNTAwKVwiOnt0YWc6XCIoNTAwMC01MEZGLDI1MDApXCIsdnI6XCJMT1wiLG5hbWU6XCJSRVRJUkVEX0N1cnZlTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjYwMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwyNjAwKVwiLHZyOlwiU1FcIixuYW1lOlwiUkVUSVJFRF9DdXJ2ZVJlZmVyZW5jZWRPdmVybGF5U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMjYxMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwyNjEwKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9DdXJ2ZVJlZmVyZW5jZWRPdmVybGF5R3JvdXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig1MDAwLTUwRkYsMzAwMClcIjp7dGFnOlwiKDUwMDAtNTBGRiwzMDAwKVwiLHZyOlwib3hcIixuYW1lOlwiUkVUSVJFRF9DdXJ2ZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDAxMilcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDEyKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5UGxhbmVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDAwNTIpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDA1MilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheVBsYW5lT3JpZ2luXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDAwNjApXCI6e3RhZzpcIig2MDAwLTYwRkYsMDA2MClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUNvbXByZXNzaW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDYwMDAtNjBGRiwwMDYxKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAwNjEpXCIsdnI6XCJTSFwiLG5hbWU6XCJSRVRJUkVEX092ZXJsYXlDb21wcmVzc2lvbk9yaWdpbmF0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDA2MilcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDYyKVwiLHZyOlwiU0hcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5Q29tcHJlc3Npb25MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDYwMDAtNjBGRiwwMDYzKVwiOnt0YWc6XCIoNjAwMC02MEZGLDAwNjMpXCIsdnI6XCJDU1wiLG5hbWU6XCJSRVRJUkVEX092ZXJsYXlDb21wcmVzc2lvbkRlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDAwNjYpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDA2NilcIix2cjpcIkFUXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUNvbXByZXNzaW9uU3RlcFBvaW50ZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDA2OClcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDY4KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5UmVwZWF0SW50ZXJ2YWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDA2OSlcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMDY5KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5Qml0c0dyb3VwZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDExMClcIjp7dGFnOlwiKDYwMDAtNjBGRiwwMTEwKVwiLHZyOlwiQ1NcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5Rm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDAyMDApXCI6e3RhZzpcIig2MDAwLTYwRkYsMDIwMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDA4MDApXCI6e3RhZzpcIig2MDAwLTYwRkYsMDgwMClcIix2cjpcIkNTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUNvZGVMYWJlbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDA4MDIpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDgwMilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheU51bWJlck9mVGFibGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDA4MDMpXCI6e3RhZzpcIig2MDAwLTYwRkYsMDgwMylcIix2cjpcIkFUXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheUNvZGVUYWJsZUxvY2F0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMDgwNClcIjp7dGFnOlwiKDYwMDAtNjBGRiwwODA0KVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5Qml0c0ZvckNvZGVXb3JkXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDExMDApXCI6e3RhZzpcIig2MDAwLTYwRkYsMTEwMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheURlc2NyaXB0b3JHcmF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDExMDEpXCI6e3RhZzpcIig2MDAwLTYwRkYsMTEwMSlcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheURlc2NyaXB0b3JSZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMTEwMilcIjp7dGFnOlwiKDYwMDAtNjBGRiwxMTAyKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5RGVzY3JpcHRvckdyZWVuXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDExMDMpXCI6e3RhZzpcIig2MDAwLTYwRkYsMTEwMylcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheURlc2NyaXB0b3JCbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDEyMDApXCI6e3RhZzpcIig2MDAwLTYwRkYsMTIwMClcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheXNHcmF5XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsMTIwMSlcIjp7dGFnOlwiKDYwMDAtNjBGRiwxMjAxKVwiLHZyOlwiVVNcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5c1JlZFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDEyMDIpXCI6e3RhZzpcIig2MDAwLTYwRkYsMTIwMilcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheXNHcmVlblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIkRJQ09NL3JldGlyZWRcIn0sXCIoNjAwMC02MEZGLDEyMDMpXCI6e3RhZzpcIig2MDAwLTYwRkYsMTIwMylcIix2cjpcIlVTXCIsbmFtZTpcIlJFVElSRURfT3ZlcmxheXNCbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig2MDAwLTYwRkYsNDAwMClcIjp7dGFnOlwiKDYwMDAtNjBGRiw0MDAwKVwiLHZyOlwiTFRcIixuYW1lOlwiUkVUSVJFRF9PdmVybGF5Q29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig3RkUwLDAwMjApXCI6e3RhZzpcIig3RkUwLDAwMjApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX0NvZWZmaWNpZW50c1NEVk5cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig3RkUwLDAwMzApXCI6e3RhZzpcIig3RkUwLDAwMzApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX0NvZWZmaWNpZW50c1NESE5cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig3RkUwLDAwNDApXCI6e3RhZzpcIig3RkUwLDAwNDApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX0NvZWZmaWNpZW50c1NERE5cIix2bTpcIjFcIix2ZXJzaW9uOlwiRElDT00vcmV0aXJlZFwifSxcIig3RjAwLTdGRkYsMDAxMClcIjp7dGFnOlwiKDdGMDAtN0ZGRiwwMDEwKVwiLHZyOlwib3hcIixuYW1lOlwiUkVUSVJFRF9WYXJpYWJsZVBpeGVsRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDdGMDAtN0ZGRiwwMDExKVwiOnt0YWc6XCIoN0YwMC03RkZGLDAwMTEpXCIsdnI6XCJVU1wiLG5hbWU6XCJSRVRJUkVEX1ZhcmlhYmxlTmV4dERhdGFHcm91cFwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDdGMDAtN0ZGRiwwMDIwKVwiOnt0YWc6XCIoN0YwMC03RkZGLDAwMjApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX1ZhcmlhYmxlQ29lZmZpY2llbnRzU0RWTlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDdGMDAtN0ZGRiwwMDMwKVwiOnt0YWc6XCIoN0YwMC03RkZGLDAwMzApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX1ZhcmlhYmxlQ29lZmZpY2llbnRzU0RITlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiKDdGMDAtN0ZGRiwwMDQwKVwiOnt0YWc6XCIoN0YwMC03RkZGLDAwNDApXCIsdnI6XCJPV1wiLG5hbWU6XCJSRVRJUkVEX1ZhcmlhYmxlQ29lZmZpY2llbnRzU0RETlwiLHZtOlwiMVwiLHZlcnNpb246XCJESUNPTS9yZXRpcmVkXCJ9LFwiXCI6e3RhZzpcIlwifSwnKDAwMTksXCIxLjIuODQwLjExMzY4MVwiLDEwKSc6e3RhZzonKDAwMTksXCIxLjIuODQwLjExMzY4MVwiLDEwKScsdnI6XCJTVFwiLG5hbWU6XCJDUkltYWdlUGFyYW1zQ29tbW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiMS4yLjg0MC4xMTM2ODFcIiwxMSknOnt0YWc6JygwMDE5LFwiMS4yLjg0MC4xMTM2ODFcIiwxMSknLHZyOlwiU1RcIixuYW1lOlwiQ1JJbWFnZUlQUGFyYW1zU2luZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiMS4yLjg0MC4xMTM2ODFcIiwxMiknOnt0YWc6JygwMDE5LFwiMS4yLjg0MC4xMTM2ODFcIiwxMiknLHZyOlwiU1RcIixuYW1lOlwiQ1JJbWFnZUlQUGFyYW1zTGVmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIjEuMi44NDAuMTEzNjgxXCIsMTMpJzp7dGFnOicoMDAxOSxcIjEuMi44NDAuMTEzNjgxXCIsMTMpJyx2cjpcIlNUXCIsbmFtZTpcIkNSSW1hZ2VJUFBhcmFtc1JpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDg3LFwiMS4yLjg0MC4xMTM3MDguNzk0LjEuMS4yLjBcIiwxMCknOnt0YWc6JygwMDg3LFwiMS4yLjg0MC4xMTM3MDguNzk0LjEuMS4yLjBcIiwxMCknLHZyOlwiQ1NcIixuYW1lOlwiTWVkaWFUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDg3LFwiMS4yLjg0MC4xMTM3MDguNzk0LjEuMS4yLjBcIiwyMCknOnt0YWc6JygwMDg3LFwiMS4yLjg0MC4xMTM3MDguNzk0LjEuMS4yLjBcIiwyMCknLHZyOlwiQ1NcIixuYW1lOlwiTWVkaWFMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA4NyxcIjEuMi44NDAuMTEzNzA4Ljc5NC4xLjEuMi4wXCIsNTApJzp7dGFnOicoMDA4NyxcIjEuMi44NDAuMTEzNzA4Ljc5NC4xLjEuMi4wXCIsNTApJyx2cjpcIklTXCIsbmFtZTpcIkVzdGltYXRlZFJldHJpZXZlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDAwKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwMCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDAxKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwMSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDAyKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwMiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDAzKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwMyknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA0KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwNCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA1KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwNSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA2KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwNiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA3KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwNyknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA4KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwOCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDA5KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwOSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBhKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwYSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBiKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwYiknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBjKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwYyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBkKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwZCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBlKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwZSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDBmKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwwZiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDEwKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxMCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDExKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxMSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDEyKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxMiknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDEzKSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxMyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDE0KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFDVVNPTlwiLDE1KSc6e3RhZzonKDAwMDksXCJBQ1VTT05cIiwxNSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwMyxcIkFFR0lTX0RJQ09NXzIuMDBcIiwwMCknOnt0YWc6JygwMDAzLFwiQUVHSVNfRElDT01fMi4wMFwiLDAwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDUsXCJBRUdJU19ESUNPTV8yLjAwXCIsMDApJzp7dGFnOicoMDAwNSxcIkFFR0lTX0RJQ09NXzIuMDBcIiwwMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiQUVHSVNfRElDT01fMi4wMFwiLDAwKSc6e3RhZzonKDAwMDksXCJBRUdJU19ESUNPTV8yLjAwXCIsMDApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkFFR0lTX0RJQ09NXzIuMDBcIiwwMCknOnt0YWc6JygwMDE5LFwiQUVHSVNfRElDT01fMi4wMFwiLDAwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJBRUdJU19ESUNPTV8yLjAwXCIsMDApJzp7dGFnOicoMDAyOSxcIkFFR0lTX0RJQ09NXzIuMDBcIiwwMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygxMzY5LFwiQUVHSVNfRElDT01fMi4wMFwiLDAwKSc6e3RhZzonKDEzNjksXCJBRUdJU19ESUNPTV8yLjAwXCIsMDApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFHRkFcIiwxMCknOnt0YWc6JygwMDA5LFwiQUdGQVwiLDEwKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiQUdGQVwiLDExKSc6e3RhZzonKDAwMDksXCJBR0ZBXCIsMTEpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJBR0ZBXCIsMTMpJzp7dGFnOicoMDAwOSxcIkFHRkFcIiwxMyknLHZyOlwiTE9cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkFHRkFcIiwxNCknOnt0YWc6JygwMDA5LFwiQUdGQVwiLDE0KScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiQUdGQVwiLDE1KSc6e3RhZzonKDAwMDksXCJBR0ZBXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzEsXCJBR0ZBIFBBQ1MgQXJjaGl2ZSBNaXJyb3JpbmcgMS4wXCIsMDApJzp7dGFnOicoMDAzMSxcIkFHRkEgUEFDUyBBcmNoaXZlIE1pcnJvcmluZyAxLjBcIiwwMCknLHZyOlwiQ1NcIixuYW1lOlwiU3R1ZHlTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzEsXCJBR0ZBIFBBQ1MgQXJjaGl2ZSBNaXJyb3JpbmcgMS4wXCIsMDEpJzp7dGFnOicoMDAzMSxcIkFHRkEgUEFDUyBBcmNoaXZlIE1pcnJvcmluZyAxLjBcIiwwMSknLHZyOlwiVUxcIixuYW1lOlwiRGF0ZVRpbWVWZXJpZmllZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBTVRST05JQ1MgSVBcIiwxMCknOnt0YWc6JygwMDI5LFwiQ0FNVFJPTklDUyBJUFwiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiQ0FNVFJPTklDUyBJUFwiLDIwKSc6e3RhZzonKDAwMjksXCJDQU1UUk9OSUNTIElQXCIsMjApJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJDQU1UUk9OSUNTIElQXCIsMzApJzp7dGFnOicoMDAyOSxcIkNBTVRST05JQ1MgSVBcIiwzMCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBTVRST05JQ1MgSVBcIiw0MCknOnt0YWc6JygwMDI5LFwiQ0FNVFJPTklDUyBJUFwiLDQwKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiQ0FNVFJPTklDU1wiLDEwKSc6e3RhZzonKDAwMjksXCJDQU1UUk9OSUNTXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIkNvbW1lbnRsaW5lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiQ0FNVFJPTklDU1wiLDIwKSc6e3RhZzonKDAwMjksXCJDQU1UUk9OSUNTXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIkVkZ2VFbmhhbmNlbWVudENvZWZmaWNpZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiQ0FNVFJPTklDU1wiLDUwKSc6e3RhZzonKDAwMjksXCJDQU1UUk9OSUNTXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIlNjZW5lVGV4dFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBTVRST05JQ1NcIiw2MCknOnt0YWc6JygwMDI5LFwiQ0FNVFJPTklDU1wiLDYwKScsdnI6XCJMVFwiLG5hbWU6XCJJbWFnZVRleHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJDQU1UUk9OSUNTXCIsNzApJzp7dGFnOicoMDAyOSxcIkNBTVRST05JQ1NcIiw3MCknLHZyOlwiSVNcIixuYW1lOlwiUGl4ZWxTaGlmdEhvcml6b250YWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJDQU1UUk9OSUNTXCIsODApJzp7dGFnOicoMDAyOSxcIkNBTVRST05JQ1NcIiw4MCknLHZyOlwiSVNcIixuYW1lOlwiUGl4ZWxTaGlmdFZlcnRpY2FsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiQ0FNVFJPTklDU1wiLDkwKSc6e3RhZzonKDAwMjksXCJDQU1UUk9OSUNTXCIsOTApJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJDQVJESU8tRC5SLiAxLjBcIiwwMCknOnt0YWc6JygwMDA5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMDApJyx2cjpcIlVMXCIsbmFtZTpcIkZpbGVMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDAxKSc6e3RhZzonKDAwMDksXCJDQVJESU8tRC5SLiAxLjBcIiwwMSknLHZyOlwiVUxcIixuYW1lOlwiRmlsZVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJDQVJESU8tRC5SLiAxLjBcIiw0MCknOnt0YWc6JygwMDA5LFwiQ0FSRElPLUQuUi4gMS4wXCIsNDApJyx2cjpcIlNRXCIsbmFtZTpcIkFsdGVybmF0ZUltYWdlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwwMCknOnt0YWc6JygwMDE5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMDApJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlQmxhbmtpbmdTaGFwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDAyKSc6e3RhZzonKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwwMiknLHZyOlwiSVNcIixuYW1lOlwiSW1hZ2VCbGFua2luZ0xlZnRWZXJ0aWNhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwwNCknOnt0YWc6JygwMDE5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMDQpJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlQmxhbmtpbmdSaWdodFZlcnRpY2FsRWRnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDA2KSc6e3RhZzonKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwwNiknLHZyOlwiSVNcIixuYW1lOlwiSW1hZ2VCbGFua2luZ1VwcGVySG9yaXpvbnRhbEVkZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwwOCknOnt0YWc6JygwMDE5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMDgpJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlQmxhbmtpbmdMb3dlckhvcml6b250YWxFZGdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMTApJzp7dGFnOicoMDAxOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDEwKScsdnI6XCJJU1wiLG5hbWU6XCJDZW50ZXJPZkNpcmN1bGFySW1hZ2VCbGFua2luZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDEyKSc6e3RhZzonKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwxMiknLHZyOlwiSVNcIixuYW1lOlwiUmFkaXVzT2ZDaXJjdWxhckltYWdlQmxhbmtpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJDQVJESU8tRC5SLiAxLjBcIiwzMCknOnt0YWc6JygwMDE5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMzApJyx2cjpcIlVMXCIsbmFtZTpcIk1heGltdW1JbWFnZUZyYW1lU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkNBUkRJTy1ELlIuIDEuMFwiLDEzKSc6e3RhZzonKDAwMjEsXCJDQVJESU8tRC5SLiAxLjBcIiwxMyknLHZyOlwiSVNcIixuYW1lOlwiSW1hZ2VTZXF1ZW5jZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDAwKSc6e3RhZzonKDAwMjksXCJDQVJESU8tRC5SLiAxLjBcIiwwMCknLHZyOlwiU1FcIixuYW1lOlwiRWRnZUVuaGFuY2VtZW50U2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJDQVJESU8tRC5SLiAxLjBcIiwwMSknOnt0YWc6JygwMDI5LFwiQ0FSRElPLUQuUi4gMS4wXCIsMDEpJyx2cjpcIlVTXCIsbmFtZTpcIkNvbnZvbHV0aW9uS2VybmVsU2l6ZVwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDAyKSc6e3RhZzonKDAwMjksXCJDQVJESU8tRC5SLiAxLjBcIiwwMiknLHZyOlwiRFNcIixuYW1lOlwiQ29udm9sdXRpb25LZXJuZWxDb2VmZmljaWVudHNcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkNBUkRJTy1ELlIuIDEuMFwiLDAzKSc6e3RhZzonKDAwMjksXCJDQVJESU8tRC5SLiAxLjBcIiwwMyknLHZyOlwiRFNcIixuYW1lOlwiRWRnZUVuaGFuY2VtZW50R2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkNNUjQyIENJUkNMRUNWSVwiLDEwMTApJzp7dGFnOicoMDAyNSxcIkNNUjQyIENJUkNMRUNWSVwiLDEwMTApJyx2cjpcIkxPXCIsbmFtZTpcIldvcmtzcGFjZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiQ01SNDIgQ0lSQ0xFQ1ZJXCIsMTAyMCknOnt0YWc6JygwMDI1LFwiQ01SNDIgQ0lSQ0xFQ1ZJXCIsMTAyMCknLHZyOlwiTE9cIixuYW1lOlwiV29ya3NwYWNlVGltZVN0cmluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkNNUjQyIENJUkNMRUNWSVwiLDEwMzApJzp7dGFnOicoMDAyNSxcIkNNUjQyIENJUkNMRUNWSVwiLDEwMzApJyx2cjpcIk9CXCIsbmFtZTpcIldvcmtzcGFjZVN0cmVhbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkRDTVRLX0FOT05ZTUlaRVJcIiwwMCknOnt0YWc6JygwMDA5LFwiRENNVEtfQU5PTllNSVpFUlwiLDAwKScsdnI6XCJTUVwiLG5hbWU6XCJBbm9ueW1pemVyVUlETWFwXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRENNVEtfQU5PTllNSVpFUlwiLDEwKSc6e3RhZzonKDAwMDksXCJEQ01US19BTk9OWU1JWkVSXCIsMTApJyx2cjpcIlVJXCIsbmFtZTpcIkFub255bWl6ZXJVSURLZXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJEQ01US19BTk9OWU1JWkVSXCIsMjApJzp7dGFnOicoMDAwOSxcIkRDTVRLX0FOT05ZTUlaRVJcIiwyMCknLHZyOlwiVUlcIixuYW1lOlwiQW5vbnltaXplclVJRFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRENNVEtfQU5PTllNSVpFUlwiLDMwKSc6e3RhZzonKDAwMDksXCJEQ01US19BTk9OWU1JWkVSXCIsMzApJyx2cjpcIlNRXCIsbmFtZTpcIkFub255bWl6ZXJQYXRpZW50SURNYXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJEQ01US19BTk9OWU1JWkVSXCIsNDApJzp7dGFnOicoMDAwOSxcIkRDTVRLX0FOT05ZTUlaRVJcIiw0MCknLHZyOlwiTE9cIixuYW1lOlwiQW5vbnltaXplclBhdGllbnRJREtleVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkRDTVRLX0FOT05ZTUlaRVJcIiw1MCknOnt0YWc6JygwMDA5LFwiRENNVEtfQU5PTllNSVpFUlwiLDUwKScsdnI6XCJMT1wiLG5hbWU6XCJBbm9ueW1pemVyUGF0aWVudElEVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiwyMiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsMjIpJyx2cjpcIlVOXCIsbmFtZTpcIlJvdXRlQUVUXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsMjMpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDIzKScsdnI6XCJEU1wiLG5hbWU6XCJQQ1JQcmludFNjYWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsMjQpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDI0KScsdnI6XCJVTlwiLG5hbWU6XCJQQ1JQcmludEpvYkVuZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDI1KSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiwyNSknLHZyOlwiSVNcIixuYW1lOlwiUENSTm9GaWxtQ29waWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsMjYpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDI2KScsdnI6XCJJU1wiLG5hbWU6XCJQQ1JGaWxtTGF5b3V0UG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiwyNyknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsMjcpJyx2cjpcIlVOXCIsbmFtZTpcIlBDUlByaW50UmVwb3J0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDcwKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiw3MCknLHZyOlwiVU5cIixuYW1lOlwiUkFEUHJvdG9jb2xQcmludGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsNzEpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDcxKScsdnI6XCJVTlwiLG5hbWU6XCJSQURQcm90b2NvbE1lZGl1bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDkwKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiw5MCknLHZyOlwiTE9cIixuYW1lOlwiVW5wcm9jZXNzZWRGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsOTEpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLDkxKScsdnI6XCJVTlwiLG5hbWU6XCJLZXlWYWx1ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIiw5MiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsOTIpJyx2cjpcIlVOXCIsbmFtZTpcIkRlc3RpbmF0aW9uUG9zdHByb2Nlc3NpbmdGdW5jdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEEwKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBMCknLHZyOlwiVU5cIixuYW1lOlwiVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEExKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBMSknLHZyOlwiVU5cIixuYW1lOlwiUmFuZ2luZ01vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBMiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTIpJyx2cjpcIlVOXCIsbmFtZTpcIkFiZG9tZW5CcmlnaHRuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTMpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEEzKScsdnI6XCJVTlwiLG5hbWU6XCJGaXhlZEJyaWdodG5lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBNCknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTQpJyx2cjpcIlVOXCIsbmFtZTpcIkRldGFpbENvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTUpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEE1KScsdnI6XCJVTlwiLG5hbWU6XCJDb250cmFzdEJhbGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBNiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTYpJyx2cjpcIlVOXCIsbmFtZTpcIlN0cnVjdHVyZUJvb3N0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTcpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEE3KScsdnI6XCJVTlwiLG5hbWU6XCJTdHJ1Y3R1cmVQcmVmZXJlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTgpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEE4KScsdnI6XCJVTlwiLG5hbWU6XCJOb2lzZVJvYnVzdG5lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBOSknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQTkpJyx2cjpcIlVOXCIsbmFtZTpcIk5vaXNlRG9zZUxpbWl0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQUEpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEFBKScsdnI6XCJVTlwiLG5hbWU6XCJOb2lzZURvc2VTdGVwXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQUIpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEFCKScsdnI6XCJVTlwiLG5hbWU6XCJOb2lzZUZyZXF1ZW5jeUxpbWl0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQUMpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEFDKScsdnI6XCJVTlwiLG5hbWU6XCJXZWFrQ29udHJhc3RMaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEFEKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBRCknLHZyOlwiVU5cIixuYW1lOlwiU3Ryb25nQ29udHJhc3RMaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEFFKSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBRSknLHZyOlwiVU5cIixuYW1lOlwiU3RydWN0dXJlQm9vc3RPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixBRiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQUYpJyx2cjpcIlVOXCIsbmFtZTpcIlNtb290aEdhaW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCMCknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQjApJyx2cjpcIlVOXCIsbmFtZTpcIk1lYXN1cmVGaWVsZDFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCMSknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQjEpJyx2cjpcIlVOXCIsbmFtZTpcIk1lYXN1cmVGaWVsZDJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCMiknOnt0YWc6JygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQjIpJyx2cjpcIlVOXCIsbmFtZTpcIktleVBlcmNlbnRpbGUxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRElESSBUTyBQQ1IgMS4xXCIsQjMpJzp7dGFnOicoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEIzKScsdnI6XCJVTlwiLG5hbWU6XCJLZXlQZXJjZW50aWxlMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEI0KSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCNCknLHZyOlwiVU5cIixuYW1lOlwiRGVuc2l0eUxVVFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEI1KSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCNSknLHZyOlwiVU5cIixuYW1lOlwiQnJpZ2h0bmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRJREkgVE8gUENSIDEuMVwiLEI2KSc6e3RhZzonKDAwMTksXCJESURJIFRPIFBDUiAxLjFcIixCNiknLHZyOlwiVU5cIixuYW1lOlwiR2FtbWFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwODksXCJESURJIFRPIFBDUiAxLjFcIiwxMCknOnt0YWc6JygwMDg5LFwiRElESSBUTyBQQ1IgMS4xXCIsMTApJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMxKSc6e3RhZzonKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMyKSc6e3RhZzonKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMzKSc6e3RhZzonKDAwMjksXCJESUdJU0NBTiBJTUFHRVwiLDMzKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiRElHSVNDQU4gSU1BR0VcIiwzNCknOnt0YWc6JygwMDI5LFwiRElHSVNDQU4gSU1BR0VcIiwzNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNzAwMS1vLTcwZmYsXCJETFhfQU5OT1RfMDFcIiwwNCknOnt0YWc6Jyg3MDAxLW8tNzBmZixcIkRMWF9BTk5PVF8wMVwiLDA0KScsdnI6XCJTVFwiLG5hbWU6XCJUZXh0QW5ub3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNzAwMS1vLTcwZmYsXCJETFhfQU5OT1RfMDFcIiwwNSknOnt0YWc6Jyg3MDAxLW8tNzBmZixcIkRMWF9BTk5PVF8wMVwiLDA1KScsdnI6XCJJU1wiLG5hbWU6XCJCb3hcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDcwMDEtby03MGZmLFwiRExYX0FOTk9UXzAxXCIsMDcpJzp7dGFnOicoNzAwMS1vLTcwZmYsXCJETFhfQU5OT1RfMDFcIiwwNyknLHZyOlwiSVNcIixuYW1lOlwiQXJyb3dFbmRcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTUsXCJETFhfRVhBTVNfMDFcIiwwMSknOnt0YWc6JygwMDE1LFwiRExYX0VYQU1TXzAxXCIsMDEpJyx2cjpcIkRTXCIsbmFtZTpcIlN0ZW5vc2lzQ2FsaWJyYXRpb25SYXRpb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxNSxcIkRMWF9FWEFNU18wMVwiLDAyKSc6e3RhZzonKDAwMTUsXCJETFhfRVhBTVNfMDFcIiwwMiknLHZyOlwiRFNcIixuYW1lOlwiU3Rlbm9zaXNNYWduaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE1LFwiRExYX0VYQU1TXzAxXCIsMDMpJzp7dGFnOicoMDAxNSxcIkRMWF9FWEFNU18wMVwiLDAzKScsdnI6XCJEU1wiLG5hbWU6XCJDYXJkaWFjQ2FsaWJyYXRpb25SYXRpb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJETFhfTEtVUF8wMVwiLDAxKSc6e3RhZzonKDYwMDEtby02MGZmLFwiRExYX0xLVVBfMDFcIiwwMSknLHZyOlwiVVNcIixuYW1lOlwiR3JheVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGVzY3JpcHRvclwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJETFhfTEtVUF8wMVwiLDAyKSc6e3RhZzonKDYwMDEtby02MGZmLFwiRExYX0xLVVBfMDFcIiwwMiknLHZyOlwiVVNcIixuYW1lOlwiR3JheVBhbGV0dGVDb2xvckxvb2t1cFRhYmxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkRMWF9QQVROVF8wMVwiLDAxKSc6e3RhZzonKDAwMTEsXCJETFhfUEFUTlRfMDFcIiwwMSknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudERPQlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDAxKSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwMSknLHZyOlwiRFNcIixuYW1lOlwiQW5nbGVWYWx1ZUxBcm1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwMiknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMDIpJyx2cjpcIkRTXCIsbmFtZTpcIkFuZ2xlVmFsdWVQQXJtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMDMpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDAzKScsdnI6XCJEU1wiLG5hbWU6XCJBbmdsZVZhbHVlQ0FybVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDA0KSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwNCknLHZyOlwiQ1NcIixuYW1lOlwiQW5nbGVMYWJlbExBcm1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwNSknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMDUpJyx2cjpcIkNTXCIsbmFtZTpcIkFuZ2xlTGFiZWxQQXJtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMDYpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDA2KScsdnI6XCJDU1wiLG5hbWU6XCJBbmdsZUxhYmVsQ0FybVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDA3KSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwNyknLHZyOlwiU1RcIixuYW1lOlwiUHJvY2VkdXJlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDA4KSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwOCknLHZyOlwiU1RcIixuYW1lOlwiRXhhbU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwwOSknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMDkpJyx2cjpcIlNIXCIsbmFtZTpcIlBhdGllbnRTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMGEpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDBhKScsdnI6XCJJU1wiLG5hbWU6XCJSZWNvcmRWaWV3XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTApJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDEwKScsdnI6XCJEU1wiLG5hbWU6XCJJbmplY3RvckRlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTEpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDExKScsdnI6XCJDU1wiLG5hbWU6XCJBdXRvSW5qZWN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTQpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDE0KScsdnI6XCJJU1wiLG5hbWU6XCJBY3F1aXNpdGlvbk1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxNSknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTUpJyx2cjpcIkNTXCIsbmFtZTpcIkNhbWVyYVJvdGF0aW9uRW5hYmxlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDE2KSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxNiknLHZyOlwiQ1NcIixuYW1lOlwiUmV2ZXJzZVN3ZWVwXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTcpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDE3KScsdnI6XCJJU1wiLG5hbWU6XCJTcGF0aWFsRmlsdGVyU3RyZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxOCknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTgpJyx2cjpcIklTXCIsbmFtZTpcIlpvb21GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxOSknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMTkpJyx2cjpcIklTXCIsbmFtZTpcIlhab29tQ2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMWEpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDFhKScsdnI6XCJJU1wiLG5hbWU6XCJZWm9vbUNlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDFiKSc6e3RhZzonKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxYiknLHZyOlwiRFNcIixuYW1lOlwiRm9jdXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxYyknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMWMpJyx2cjpcIkNTXCIsbmFtZTpcIkRvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJETFhfU0VSSUVfMDFcIiwxZCknOnt0YWc6JygwMDE5LFwiRExYX1NFUklFXzAxXCIsMWQpJyx2cjpcIklTXCIsbmFtZTpcIlNpZGVNYXJrXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMWUpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDFlKScsdnI6XCJJU1wiLG5hbWU6XCJQZXJjZW50YWdlTGFuZHNjYXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRExYX1NFUklFXzAxXCIsMWYpJzp7dGFnOicoMDAxOSxcIkRMWF9TRVJJRV8wMVwiLDFmKScsdnI6XCJEU1wiLG5hbWU6XCJFeHBvc3VyZUR1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMEUxLFwiRUxTQ0lOVDFcIiwwMSknOnt0YWc6JygwMEUxLFwiRUxTQ0lOVDFcIiwwMSknLHZyOlwiVVNcIixuYW1lOlwiRGF0YURpY3Rpb25hcnlWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMEUxLFwiRUxTQ0lOVDFcIiwxNCknOnt0YWc6JygwMEUxLFwiRUxTQ0lOVDFcIiwxNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDBFMSxcIkVMU0NJTlQxXCIsMjIpJzp7dGFnOicoMDBFMSxcIkVMU0NJTlQxXCIsMjIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwRTEsXCJFTFNDSU5UMVwiLDIzKSc6e3RhZzonKDAwRTEsXCJFTFNDSU5UMVwiLDIzKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMEUxLFwiRUxTQ0lOVDFcIiwyNCknOnt0YWc6JygwMEUxLFwiRUxTQ0lOVDFcIiwyNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDBFMSxcIkVMU0NJTlQxXCIsMjUpJzp7dGFnOicoMDBFMSxcIkVMU0NJTlQxXCIsMjUpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwRTEsXCJFTFNDSU5UMVwiLDQwKSc6e3RhZzonKDAwRTEsXCJFTFNDSU5UMVwiLDQwKScsdnI6XCJTSFwiLG5hbWU6XCJPZmZzZXRGcm9tQ1RNUkltYWdlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsMDApJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsMDApJyx2cjpcIlNIXCIsbmFtZTpcIkltcGxlbWVudGF0aW9uVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsMjApJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIlJlbGF0aXZlVGFibGVQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsMjEpJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsMjEpJyx2cjpcIkRTXCIsbmFtZTpcIlJlbGF0aXZlVGFibGVIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDA2MDEsXCJFTFNDSU5UMVwiLDMwKSc6e3RhZzonKDA2MDEsXCJFTFNDSU5UMVwiLDMwKScsdnI6XCJTSFwiLG5hbWU6XCJTdXJ2aWV3RGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwNjAxLFwiRUxTQ0lOVDFcIiwzMSknOnt0YWc6JygwNjAxLFwiRUxTQ0lOVDFcIiwzMSknLHZyOlwiRFNcIixuYW1lOlwiU3Vydmlld0xlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsNTApJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsNTApJyx2cjpcIlNIXCIsbmFtZTpcIkltYWdlVmlld1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDA2MDEsXCJFTFNDSU5UMVwiLDcwKSc6e3RhZzonKDA2MDEsXCJFTFNDSU5UMVwiLDcwKScsdnI6XCJEU1wiLG5hbWU6XCJCYXRjaE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsNzEpJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsNzEpJyx2cjpcIkRTXCIsbmFtZTpcIkJhdGNoU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDYwMSxcIkVMU0NJTlQxXCIsNzIpJzp7dGFnOicoMDYwMSxcIkVMU0NJTlQxXCIsNzIpJyx2cjpcIkRTXCIsbmFtZTpcIkJhdGNoU2xpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDA0KSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDA0KScsdnI6XCJTSFwiLG5hbWU6XCJJbWFnZUNvbnRyb2xVbml0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRkRNUyAxLjBcIiwwNSknOnt0YWc6JygwMDA5LFwiRkRNUyAxLjBcIiwwNSknLHZyOlwiT1dcIixuYW1lOlwiSW1hZ2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDA2KSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDA2KScsdnI6XCJPV1wiLG5hbWU6XCJSb3V0ZUltYWdlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRkRNUyAxLjBcIiwwOCknOnt0YWc6JygwMDA5LFwiRkRNUyAxLjBcIiwwOCknLHZyOlwiVUxcIixuYW1lOlwiSW1hZ2VEaXNwbGF5SW5mb3JtYXRpb25WZXJzaW9uTm9cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDA5KSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDA5KScsdnI6XCJVTFwiLG5hbWU6XCJQYXRpZW50SW5mb3JtYXRpb25WZXJzaW9uTm9cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDBDKSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDBDKScsdnI6XCJPV1wiLG5hbWU6XCJGaWxtVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRkRNUyAxLjBcIiwxMCknOnt0YWc6JygwMDA5LFwiRkRNUyAxLjBcIiwxMCknLHZyOlwiQ1NcIixuYW1lOlwiRXhwb3N1cmVVbml0VHlwZUNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDgwKSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDgwKScsdnI6XCJMT1wiLG5hbWU6XCJLYW5qaUhvc3BpdGFsTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkZETVMgMS4wXCIsOTApJzp7dGFnOicoMDAwOSxcIkZETVMgMS4wXCIsOTApJyx2cjpcIlNUXCIsbmFtZTpcIkRpc3RyaWJ1dGlvbkNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJGRE1TIDEuMFwiLDkyKSc6e3RhZzonKDAwMDksXCJGRE1TIDEuMFwiLDkyKScsdnI6XCJTSFwiLG5hbWU6XCJLYW5qaURlcGFydG1lbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiRkRNUyAxLjBcIixGMCknOnt0YWc6JygwMDA5LFwiRkRNUyAxLjBcIixGMCknLHZyOlwiQ1NcIixuYW1lOlwiQmxhY2tlbmluZ1Byb2Nlc3NGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiwxNSknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiwxNSknLHZyOlwiTE9cIixuYW1lOlwiS2FuamlCb2R5UGFydEZvckV4cG9zdXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiwzMiknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiwzMiknLHZyOlwiTE9cIixuYW1lOlwiS2FuamlNZW51TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkZETVMgMS4wXCIsNDApJzp7dGFnOicoMDAxOSxcIkZETVMgMS4wXCIsNDApJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlUHJvY2Vzc2luZ1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJGRE1TIDEuMFwiLDUwKSc6e3RhZzonKDAwMTksXCJGRE1TIDEuMFwiLDUwKScsdnI6XCJDU1wiLG5hbWU6XCJFRFJNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiw2MCknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiw2MCknLHZyOlwiU0hcIixuYW1lOlwiUmFkaW9ncmFwaGVyc0NvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJGRE1TIDEuMFwiLDcwKSc6e3RhZzonKDAwMTksXCJGRE1TIDEuMFwiLDcwKScsdnI6XCJJU1wiLG5hbWU6XCJTcGxpdEV4cG9zdXJlRm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiw3MSknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiw3MSknLHZyOlwiSVNcIixuYW1lOlwiTm9PZlNwbGl0RXhwb3N1cmVGcmFtZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJGRE1TIDEuMFwiLDgwKSc6e3RhZzonKDAwMTksXCJGRE1TIDEuMFwiLDgwKScsdnI6XCJJU1wiLG5hbWU6XCJSZWFkaW5nUG9zaXRpb25TcGVjaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiw4MSknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiw4MSknLHZyOlwiSVNcIixuYW1lOlwiUmVhZGluZ1NlbnNpdGl2aXR5Q2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiw5MCknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiw5MCknLHZyOlwiU0hcIixuYW1lOlwiRmlsbUFubm90YXRpb25DaGFyYWN0ZXJTdHJpbmcxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiRkRNUyAxLjBcIiw5MSknOnt0YWc6JygwMDE5LFwiRkRNUyAxLjBcIiw5MSknLHZyOlwiU0hcIixuYW1lOlwiRmlsbUFubm90YXRpb25DaGFyYWN0ZXJTdHJpbmcyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiRkRNUyAxLjBcIiwxMCknOnt0YWc6JygwMDIxLFwiRkRNUyAxLjBcIiwxMCknLHZyOlwiQ1NcIixuYW1lOlwiRkNSSW1hZ2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkZETVMgMS4wXCIsMzApJzp7dGFnOicoMDAyMSxcIkZETVMgMS4wXCIsMzApJyx2cjpcIkNTXCIsbmFtZTpcIlNldE5vXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiRkRNUyAxLjBcIiw0MCknOnt0YWc6JygwMDIxLFwiRkRNUyAxLjBcIiw0MCknLHZyOlwiSVNcIixuYW1lOlwiSW1hZ2VOb0luVGhlU2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiRkRNUyAxLjBcIiw1MCknOnt0YWc6JygwMDIxLFwiRkRNUyAxLjBcIiw1MCknLHZyOlwiQ1NcIixuYW1lOlwiUGFpclByb2Nlc3NpbmdJbmZvcm1hdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkZETVMgMS4wXCIsODApJzp7dGFnOicoMDAyMSxcIkZETVMgMS4wXCIsODApJyx2cjpcIk9CXCIsbmFtZTpcIkVxdWlwbWVudFR5cGVTcGVjaWZpY0luZm9ybWF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiRkRNUyAxLjBcIiwxMCknOnt0YWc6JygwMDIzLFwiRkRNUyAxLjBcIiwxMCknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkZETVMgMS4wXCIsMjApJzp7dGFnOicoMDAyMyxcIkZETVMgMS4wXCIsMjApJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJGRE1TIDEuMFwiLDMwKSc6e3RhZzonKDAwMjMsXCJGRE1TIDEuMFwiLDMwKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiwxMCknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiUmVsYXRpdmVMaWdodEVtaXNzaW9uQW1vdW50U2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDExKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDExKScsdnI6XCJVU1wiLG5hbWU6XCJUZXJtT2ZDb3JyZWN0aW9uRm9yRWFjaElQVHlwZVN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiwxMiknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiwxMiknLHZyOlwiVVNcIixuYW1lOlwiUmVhZGluZ0dhaW5HcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsMTMpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsMTMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDE1KSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDE1KScsdnI6XCJDU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiwyMCknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiwyMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsMjEpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsMjEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDMwKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDMwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiwzMSknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiwzMSknLHZyOlwiU1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsMzIpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsMzIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDMzKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDMzKScsdnI6XCJTU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiwzNCknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiwzNCknLHZyOlwiU1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNDApJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNDApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDQxKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDQxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw0MiknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw0MiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNDMpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNDMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDUwKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDUwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw1MSknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw1MSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNTIpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDUzKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDUzKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw2MCknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw2MCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNjEpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNjEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDYyKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDYyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw2MyknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw2MyknLHZyOlwiQ1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNzApJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNzApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDcxKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDcxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw3MiknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw3MiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNzMpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNzMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsNzQpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsNzQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsODApJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsODApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDgxKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDgxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw4MiknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw4MiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsODMpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsODMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsODQpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsODQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsOTApJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsOTApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDkxKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDkxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw5MiknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw5MiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsOTMpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsOTMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLDk0KSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLDk0KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIiw5NSknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIiw5NSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsOTYpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsOTYpJyx2cjpcIkNTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLGEwKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLGEwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiRkRNUyAxLjBcIixhMSknOnt0YWc6JygwMDI1LFwiRkRNUyAxLjBcIixhMSknLHZyOlwiU1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkZETVMgMS4wXCIsYTIpJzp7dGFnOicoMDAyNSxcIkZETVMgMS4wXCIsYTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJGRE1TIDEuMFwiLGEzKSc6e3RhZzonKDAwMjUsXCJGRE1TIDEuMFwiLGEzKScsdnI6XCJTU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiRkRNUyAxLjBcIiwxMCknOnt0YWc6JygwMDI3LFwiRkRNUyAxLjBcIiwxMCknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkZETVMgMS4wXCIsMjApJzp7dGFnOicoMDAyNyxcIkZETVMgMS4wXCIsMjApJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJGRE1TIDEuMFwiLDMwKSc6e3RhZzonKDAwMjcsXCJGRE1TIDEuMFwiLDMwKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiRkRNUyAxLjBcIiw0MCknOnt0YWc6JygwMDI3LFwiRkRNUyAxLjBcIiw0MCknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkZETVMgMS4wXCIsNTApJzp7dGFnOicoMDAyNyxcIkZETVMgMS4wXCIsNTApJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJGRE1TIDEuMFwiLDYwKSc6e3RhZzonKDAwMjcsXCJGRE1TIDEuMFwiLDYwKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiRkRNUyAxLjBcIiw3MCknOnt0YWc6JygwMDI3LFwiRkRNUyAxLjBcIiw3MCknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkZETVMgMS4wXCIsODApJzp7dGFnOicoMDAyNyxcIkZETVMgMS4wXCIsODApJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJGRE1TIDEuMFwiLGEwKSc6e3RhZzonKDAwMjcsXCJGRE1TIDEuMFwiLGEwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiRkRNUyAxLjBcIixhMSknOnt0YWc6JygwMDI3LFwiRkRNUyAxLjBcIixhMSknLHZyOlwiQ1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkZETVMgMS4wXCIsYTIpJzp7dGFnOicoMDAyNyxcIkZETVMgMS4wXCIsYTIpJyx2cjpcIkNTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJGRE1TIDEuMFwiLGEzKSc6e3RhZzonKDAwMjcsXCJGRE1TIDEuMFwiLGEzKScsdnI6XCJTU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJGRE1TIDEuMFwiLDIwKSc6e3RhZzonKDAwMjksXCJGRE1TIDEuMFwiLDIwKScsdnI6XCJDU1wiLG5hbWU6XCJJbWFnZVNjYW5uaW5nRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiRkRNUyAxLjBcIiwzMCknOnt0YWc6JygwMDI5LFwiRkRNUyAxLjBcIiwzMCknLHZyOlwiQ1NcIixuYW1lOlwiRXh0ZW5kZWRSZWFkaW5nU2l6ZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiRkRNUyAxLjBcIiwzNCknOnt0YWc6JygwMDI5LFwiRkRNUyAxLjBcIiwzNCknLHZyOlwiVVNcIixuYW1lOlwiTWFnbmlmaWNhdGlvblJlZHVjdGlvblJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiRkRNUyAxLjBcIiw0NCknOnt0YWc6JygwMDI5LFwiRkRNUyAxLjBcIiw0NCknLHZyOlwiQ1NcIixuYW1lOlwiTGluZURlbnNpdHlDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiRkRNUyAxLjBcIiw1MCknOnt0YWc6JygwMDI5LFwiRkRNUyAxLjBcIiw1MCknLHZyOlwiQ1NcIixuYW1lOlwiRGF0YUNvbXByZXNzaW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAxMSxcIkZETVMgMS4wXCIsMTEpJzp7dGFnOicoMjAxMSxcIkZETVMgMS4wXCIsMTEpJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlUG9zaXRpb24gU3BlY2lmeWluZ0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDUwRjEsXCJGRE1TIDEuMFwiLDA2KSc6e3RhZzonKDUwRjEsXCJGRE1TIDEuMFwiLDA2KScsdnI6XCJDU1wiLG5hbWU6XCJFbmVyZ3lTdWJ0cmFjdGlvblBhcmFtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg1MEYxLFwiRkRNUyAxLjBcIiwwNyknOnt0YWc6Jyg1MEYxLFwiRkRNUyAxLjBcIiwwNyknLHZyOlwiQ1NcIixuYW1lOlwiU3VidHJhY3Rpb25SZWdpc3RyYXRpb25SZXN1bHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDUwRjEsXCJGRE1TIDEuMFwiLDA4KSc6e3RhZzonKDUwRjEsXCJGRE1TIDEuMFwiLDA4KScsdnI6XCJDU1wiLG5hbWU6XCJFbmVyZ3lTdWJ0cmFjdGlvblBhcmFtMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNTBGMSxcIkZETVMgMS4wXCIsMDkpJzp7dGFnOicoNTBGMSxcIkZETVMgMS4wXCIsMDkpJyx2cjpcIlNMXCIsbmFtZTpcIkFmaW5Db252ZXJzaW9uQ29lZmZpY2llbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDUwRjEsXCJGRE1TIDEuMFwiLDEwKSc6e3RhZzonKDUwRjEsXCJGRE1TIDEuMFwiLDEwKScsdnI6XCJDU1wiLG5hbWU6XCJGaWxtT3V0cHV0Rm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg1MEYxLFwiRkRNUyAxLjBcIiwyMCknOnt0YWc6Jyg1MEYxLFwiRkRNUyAxLjBcIiwyMCknLHZyOlwiQ1NcIixuYW1lOlwiSW1hZ2VQcm9jZXNzaW5nTW9kaWZpY2F0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkZGUCBEQVRBXCIsMDEpJzp7dGFnOicoMDAwOSxcIkZGUCBEQVRBXCIsMDEpJyx2cjpcIlVOXCIsbmFtZTpcIkNSSGVhZGVySW5mb3JtYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRSA/Pz8gRnJvbSBBZGFudGFnZSBSZXZpZXcgQ1NcIiwzMCknOnt0YWc6JygwMDE5LFwiR0UgPz8/IEZyb20gQWRhbnRhZ2UgUmV2aWV3IENTXCIsMzApJyx2cjpcIkxPXCIsbmFtZTpcIkNSRURSTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFID8/PyBGcm9tIEFkYW50YWdlIFJldmlldyBDU1wiLDQwKSc6e3RhZzonKDAwMTksXCJHRSA/Pz8gRnJvbSBBZGFudGFnZSBSZXZpZXcgQ1NcIiw0MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JMYXRpdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFID8/PyBGcm9tIEFkYW50YWdlIFJldmlldyBDU1wiLDUwKSc6e3RhZzonKDAwMTksXCJHRSA/Pz8gRnJvbSBBZGFudGFnZSBSZXZpZXcgQ1NcIiw1MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JHcm91cE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFID8/PyBGcm9tIEFkYW50YWdlIFJldmlldyBDU1wiLDcwKSc6e3RhZzonKDAwMTksXCJHRSA/Pz8gRnJvbSBBZGFudGFnZSBSZXZpZXcgQ1NcIiw3MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JJbWFnZVNlcmlhbE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFID8/PyBGcm9tIEFkYW50YWdlIFJldmlldyBDU1wiLDgwKSc6e3RhZzonKDAwMTksXCJHRSA/Pz8gRnJvbSBBZGFudGFnZSBSZXZpZXcgQ1NcIiw4MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JCYXJDb2RlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0UgPz8/IEZyb20gQWRhbnRhZ2UgUmV2aWV3IENTXCIsOTApJzp7dGFnOicoMDAxOSxcIkdFID8/PyBGcm9tIEFkYW50YWdlIFJldmlldyBDU1wiLDkwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkZpbG1PdXRwdXRFeHBvc3VyZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiwyNCknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsMjQpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiwyNSknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsMjUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiwzZSknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsM2UpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiwzZiknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsM2YpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiw0MiknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsNDIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIiw0MyknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsNDMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIixmOCknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsZjgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0FDUVVfMDFcIixmYiknOnt0YWc6JygwMDA5LFwiR0VNU19BQ1FVXzAxXCIsZmIpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwMSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMDEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwMiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMDIpJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mQ2VsbHNJbkRldGVjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMDMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDAzKScsdnI6XCJEU1wiLG5hbWU6XCJDZWxsTnVtYmVyQXRUaGV0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDA0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwNCknLHZyOlwiRFNcIixuYW1lOlwiQ2VsbFNwYWNpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwNSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMDUpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwNiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMDYpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwZSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMGUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwwZiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMGYpJyx2cjpcIkRTXCIsbmFtZTpcIkhvcml6b250YWxGcmFtZU9mUmVmZXJlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDExKScsdnI6XCJTU1wiLG5hbWU6XCJTZXJpZXNDb250cmFzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDEyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxMiknLHZyOlwiU1NcIixuYW1lOlwiTGFzdFBzZXFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxMyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTMpJyx2cjpcIlNTXCIsbmFtZTpcIlN0YXJ0TnVtYmVyRm9yQmFzZWxpbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxNCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTQpJyx2cjpcIlNTXCIsbmFtZTpcIkVuZCBOdW1iZXJGb3JCYXNlbGluZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDE1KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxNSknLHZyOlwiU1NcIixuYW1lOlwiU3RhcnROdW1iZXJGb3JFbmhhbmNlZFNjYW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDE2KScsdnI6XCJTU1wiLG5hbWU6XCJFbmROdW1iZXJGb3JFbmhhbmNlZFNjYW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTcpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDE3KScsdnI6XCJTU1wiLG5hbWU6XCJTZXJpZXNQbGFuZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDE4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxOCknLHZyOlwiTE9cIixuYW1lOlwiRmlyc3RTY2FuUkFTXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMTkpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDE5KScsdnI6XCJEU1wiLG5hbWU6XCJGaXJzdFNjYW5Mb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDFhKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxYSknLHZyOlwiTE9cIixuYW1lOlwiTGFzdFNjYW5SQVNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxYiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMWIpJyx2cjpcIkRTXCIsbmFtZTpcIkxhc3RTY2FuTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwxZSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMWUpJyx2cjpcIkRTXCIsbmFtZTpcIkRpc3BsYXlGaWVsZE9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDIwKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyMCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDIyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyMiknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDIzKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyMyknLHZyOlwiRFNcIixuYW1lOlwiVGFibGVTcGVlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDI0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyNCknLHZyOlwiRFNcIixuYW1lOlwiTWlkU2NhblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyNSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMjUpJyx2cjpcIlNTXCIsbmFtZTpcIk1pZFNjYW5GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMjYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDI2KScsdnI6XCJTTFwiLG5hbWU6XCJEZWdyZWVzT2ZBemltdXRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMjcpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDI3KScsdnI6XCJEU1wiLG5hbWU6XCJHYW50cnlQZXJpb2RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyYSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmEpJyx2cjpcIkRTXCIsbmFtZTpcIlhyYXlPblBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDJiKScsdnI6XCJEU1wiLG5hbWU6XCJYcmF5T2ZmUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyYyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmMpJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mVHJpZ2dlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyZCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyZSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmUpJyx2cjpcIkRTXCIsbmFtZTpcIkFuZ2xlT2ZGaXJzdFZpZXdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwyZiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMmYpJyx2cjpcIkRTXCIsbmFtZTpcIlRyaWdnZXJGcmVxdWVuY3lcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiwzOSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsMzkpJyx2cjpcIlNTXCIsbmFtZTpcIlNjYW5GT1ZUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsM2EpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDNhKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsM2IpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDNiKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsM2MpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDNjKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsM2UpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDNlKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsM2YpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDNmKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNDApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQwKScsdnI6XCJTU1wiLG5hbWU6XCJTdGF0UmVjb25GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNDEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQxKScsdnI6XCJTU1wiLG5hbWU6XCJDb21wdXRlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0MiknLHZyOlwiU1NcIixuYW1lOlwiU2VnbWVudE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQzKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0MyknLHZyOlwiU1NcIixuYW1lOlwiVG90YWxTZWdtZW50c1JlcXVlc3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQ0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0NCknLHZyOlwiRFNcIixuYW1lOlwiSW50ZXJzY2FuRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0NyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNDcpJyx2cjpcIlNTXCIsbmFtZTpcIlZpZXdDb21wcmVzc2lvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQ4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0OCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDQ5KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0OSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDRhKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw0YSknLHZyOlwiU1NcIixuYW1lOlwiVG90YWxOdW1iZXJPZlJlZkNoYW5uZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNGIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDRiKScsdnI6XCJTTFwiLG5hbWU6XCJEYXRhU2l6ZUZvclNjYW5EYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNTIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDUyKScsdnI6XCJTU1wiLG5hbWU6XCJSZWNvblBvc3RQcm9jZXNzaW5nRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDU0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw1NCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDU3KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw1NyknLHZyOlwiU1NcIixuYW1lOlwiQ1RXYXRlck51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDU4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw1OCknLHZyOlwiU1NcIixuYW1lOlwiQ1RCb25lTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNWEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDVhKScsdnI6XCJGTFwiLG5hbWU6XCJBY3F1aXNpdGlvbkR1cmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNWQpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDVkKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNWUpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDVlKScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZkNoYW5uZWxzMVRvNTEyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNWYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDVmKScsdnI6XCJTTFwiLG5hbWU6XCJJbmNyZW1lbnRCZXR3ZWVuQ2hhbm5lbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw2MCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNjApJyx2cjpcIlNMXCIsbmFtZTpcIlN0YXJ0aW5nVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDYxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw2MSknLHZyOlwiU0xcIixuYW1lOlwiTnVtYmVyT2ZWaWV3c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDYyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw2MiknLHZyOlwiU0xcIixuYW1lOlwiSW5jcmVtZW50QmV0d2VlblZpZXdzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNmEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDZhKScsdnI6XCJTU1wiLG5hbWU6XCJEZXBlbmRhbnRPbk51bWJlck9mVmlld3NQcm9jZXNzZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw2YiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNmIpJyx2cjpcIlNTXCIsbmFtZTpcIkZpZWxkT2ZWaWV3SW5EZXRlY3RvckNlbGxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDcwKScsdnI6XCJTU1wiLG5hbWU6XCJWYWx1ZU9mQmFja1Byb2plY3Rpb25CdXR0b25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3MSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzEpJyx2cjpcIlNTXCIsbmFtZTpcIlNldElmRmF0cUVzdGltYXRlc1dlcmVVc2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDcyKScsdnI6XCJEU1wiLG5hbWU6XCJaQ2hhbm5lbEF2Z092ZXJWaWV3c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDczKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3MyknLHZyOlwiRFNcIixuYW1lOlwiQXZnT2ZMZWZ0UmVmQ2hhbm5lbHNPdmVyVmlld3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3NCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzQpJyx2cjpcIkRTXCIsbmFtZTpcIk1heExlZnRDaGFubmVsT3ZlclZpZXdzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzUpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDc1KScsdnI6XCJEU1wiLG5hbWU6XCJBdmdPZlJpZ2h0UmVmQ2hhbm5lbHNPdmVyVmlld3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3NiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsNzYpJyx2cjpcIkRTXCIsbmFtZTpcIk1heFJpZ2h0Q2hhbm5lbE92ZXJWaWV3c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDdkKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3ZCknLHZyOlwiRFNcIixuYW1lOlwiU2Vjb25kRWNob1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDdlKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3ZSknLHZyOlwiU1NcIixuYW1lOlwiTnVtYmVyT2ZFY2hvc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDdmKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw3ZiknLHZyOlwiRFNcIixuYW1lOlwiVGFibGVEZWx0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDgxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4MSknLHZyOlwiU1NcIixuYW1lOlwiQ29udGlndW91c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDgyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4MiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDgzKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4MyknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDg0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4NCknLHZyOlwiRFNcIixuYW1lOlwiUGVha1NBUlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDg1KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4NSknLHZyOlwiU1NcIixuYW1lOlwiTW9uaXRvclNBUlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDg2KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4NiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDg3KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4NyknLHZyOlwiRFNcIixuYW1lOlwiQ2FyZGlhY1JlcGV0aXRpb24gVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDg4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4OCknLHZyOlwiU1NcIixuYW1lOlwiSW1hZ2VzUGVyQ2FyZGlhY0N5Y2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOGEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDhhKScsdnI6XCJTU1wiLG5hbWU6XCJBY3R1YWxSZWNlaXZlR2FpbkFuYWxvZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDhiKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4YiknLHZyOlwiU1NcIixuYW1lOlwiQWN0dWFsUmVjZWl2ZUdhaW5EaWdpdGFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOGQpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDhkKScsdnI6XCJEU1wiLG5hbWU6XCJEZWxheUFmdGVyVHJpZ2dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDhmKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw4ZiknLHZyOlwiU1NcIixuYW1lOlwiU3dhcFBoYXNlRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDkwKScsdnI6XCJTU1wiLG5hbWU6XCJQYXVzZUludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDkxKScsdnI6XCJEU1wiLG5hbWU6XCJQdWxzZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5MiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTIpJyx2cjpcIlNMXCIsbmFtZTpcIlNsaWNlT2Zmc2V0T25GcmVxdWVuY3lBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDkzKScsdnI6XCJEU1wiLG5hbWU6XCJDZW50ZXJGcmVxdWVuY3lcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5NCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTQpJyx2cjpcIlNTXCIsbmFtZTpcIlRyYW5zbWl0R2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDk1KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5NSknLHZyOlwiU1NcIixuYW1lOlwiQW5hbG9nUmVjZWl2ZXJHYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDk2KScsdnI6XCJTU1wiLG5hbWU6XCJEaWdpdGFsUmVjZWl2ZXJHYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTcpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDk3KScsdnI6XCJTTFwiLG5hbWU6XCJCaXRtYXBEZWZpbmluZ0NWc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDk4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5OCknLHZyOlwiU1NcIixuYW1lOlwiQ2VudGVyRnJlcXVlbmN5TWV0aG9kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOTkpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDk5KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOWIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDliKScsdnI6XCJTU1wiLG5hbWU6XCJQdWxzZVNlcXVlbmNlTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDljKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5YyknLHZyOlwiTE9cIixuYW1lOlwiUHVsc2VTZXF1ZW5jZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIiw5ZCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOWQpJyx2cjpcIkRUXCIsbmFtZTpcIlB1bHNlU2VxdWVuY2VEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOWUpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDllKScsdnI6XCJMT1wiLG5hbWU6XCJJbnRlcm5hbFB1bHNlU2VxdWVuY2VOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsOWYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLDlmKScsdnI6XCJTU1wiLG5hbWU6XCJUcmFuc21pdHRpbmdDb2lsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGEwKScsdnI6XCJTU1wiLG5hbWU6XCJTdXJmYWNlQ29pbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhMSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTEpJyx2cjpcIlNTXCIsbmFtZTpcIkV4dHJlbWl0eUNvaWxGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTIpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGEyKScsdnI6XCJTTFwiLG5hbWU6XCJSYXdEYXRhUnVuTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGEzKScsdnI6XCJVTFwiLG5hbWU6XCJDYWxpYnJhdGVkRmllbGRTdHJlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGE0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhNCknLHZyOlwiU1NcIixuYW1lOlwiU0FURmF0V2F0ZXJCb25lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTUpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGE1KScsdnI6XCJEU1wiLG5hbWU6XCJSZWNlaXZlQmFuZHdpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTcpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGE3KScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGE4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhOCknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhOSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYTkpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYWEpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGFhKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGFiKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhYiknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhYyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYWMpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYWQpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGFkKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGFlKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhZSknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixhZiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYWYpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGIwKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGIxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiMSknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiMiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjIpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGIzKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGI0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiNCknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiNSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjUpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGI2KScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGI3KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiNyknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiOCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjgpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYjkpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGI5KScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGJhKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiYSknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiYiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYmIpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYmMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGJjKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGJkKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiZCknLHZyOlwiRFNcIixuYW1lOlwiVXNlckRhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixiZSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYmUpJyx2cjpcIkRTXCIsbmFtZTpcIlByb2plY3Rpb25BbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGMwKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjMCknLHZyOlwiU1NcIixuYW1lOlwiU2F0dXJhdGlvblBsYW5lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGMxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjMSknLHZyOlwiU1NcIixuYW1lOlwiU3VyZmFjZUNvaWxJbnRlbnNpdHlDb3JyZWN0aW9uRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGMyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjMiknLHZyOlwiU1NcIixuYW1lOlwiU0FUTG9jYXRpb25SXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYzMpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGMzKScsdnI6XCJTU1wiLG5hbWU6XCJTQVRMb2NhdGlvbkxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjNCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYzQpJyx2cjpcIlNTXCIsbmFtZTpcIlNBVExvY2F0aW9uQVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGM1KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjNSknLHZyOlwiU1NcIixuYW1lOlwiU0FUTG9jYXRpb25QXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYzYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGM2KScsdnI6XCJTU1wiLG5hbWU6XCJTQVRMb2NhdGlvbkhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjNyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYzcpJyx2cjpcIlNTXCIsbmFtZTpcIlNBVExvY2F0aW9uRlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGM4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjOCknLHZyOlwiU1NcIixuYW1lOlwiU0FUVGhpY2tuZXNzUkxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjOSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsYzkpJyx2cjpcIlNTXCIsbmFtZTpcIlNBVFRoaWNrbmVzc0FQXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsY2EpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNhKScsdnI6XCJTU1wiLG5hbWU6XCJTQVRUaGlja25lc3NIRlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNiKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjYiknLHZyOlwiU1NcIixuYW1lOlwiUHJlc2NyaWJlZEZsb3dBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsY2MpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNjKScsdnI6XCJTU1wiLG5hbWU6XCJWZWxvY2l0eUVuY29kaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsY2QpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNkKScsdnI6XCJTU1wiLG5hbWU6XCJUaGlja25lc3NEaXNjbGFpbWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsY2UpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNlKScsdnI6XCJTU1wiLG5hbWU6XCJQcmVzY2FuVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGNmKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixjZiknLHZyOlwiU1NcIixuYW1lOlwiUHJlc2NhblN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGQwKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkMCknLHZyOlwiU0hcIixuYW1lOlwiUmF3RGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkMiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDIpJyx2cjpcIlNTXCIsbmFtZTpcIlByb2plY3Rpb25BbGdvcml0aG1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkMyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDMpJyx2cjpcIlNIXCIsbmFtZTpcIlByb2plY3Rpb25BbGdvcml0aG1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkNCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkNSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDUpJyx2cjpcIlNTXCIsbmFtZTpcIkZyYWN0aW9uYWxFY2hvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDYpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGQ2KScsdnI6XCJTU1wiLG5hbWU6XCJQcmVwUHVsc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkNyknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDcpJyx2cjpcIlNTXCIsbmFtZTpcIkNhcmRpYWNQaGFzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkOCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDgpJyx2cjpcIlNTXCIsbmFtZTpcIlZhcmlhYmxlRWNob0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkOSknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZDkpJyx2cjpcIkRTXCIsbmFtZTpcIkNvbmNhdGVuYXRlZFNBVFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGRhKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkYSknLHZyOlwiU1NcIixuYW1lOlwiUmVmZXJlbmNlQ2hhbm5lbFVzZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkYiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZGIpJyx2cjpcIkRTXCIsbmFtZTpcIkJhY2tQcm9qZWN0b3JDb2VmZmljaWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGRjKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkYyknLHZyOlwiU1NcIixuYW1lOlwiUHJpbWFyeVNwZWVkQ29ycmVjdGlvblVzZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkZCknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZGQpJyx2cjpcIlNTXCIsbmFtZTpcIk92ZXJyYW5nZUNvcnJlY3Rpb25Vc2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZGUpJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGRlKScsdnI6XCJEU1wiLG5hbWU6XCJEeW5hbWljWkFscGhhVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRU1TX0FDUVVfMDFcIixkZiknOnt0YWc6JygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZGYpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZXJEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VNU19BQ1FVXzAxXCIsZTApJzp7dGFnOicoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGUwKScsdnI6XCJEU1wiLG5hbWU6XCJVc2VyRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGUxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlMSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGUyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlMiknLHZyOlwiRFNcIixuYW1lOlwiVmVsb2NpdHlFbmNvZGVTY2FsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGUzKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlMyknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGU0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGU1KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlNSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGU2KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlNiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGU4KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlOCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGU5KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlOSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGViKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlYiknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGVjKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixlYyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGYwKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmMCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGYxKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmMSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGYyKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmMiknLHZyOlwiU1NcIixuYW1lOlwiRmFzdFBoYXNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGYzKSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmMyknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGY0KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFTVNfQUNRVV8wMVwiLGY5KSc6e3RhZzonKDAwMTksXCJHRU1TX0FDUVVfMDFcIixmOSknLHZyOlwiRFNcIixuYW1lOlwiVHJhbnNtaXRHYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsMDApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMVwiLDAwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkV4cG9zdXJlTWVudUNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiwxMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIkNSRXhwb3N1cmVNZW51U3RyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsMjApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMVwiLDIwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkVEUk1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiwzMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsMzApJyx2cjpcIkxPXCIsbmFtZTpcIkNSTGF0aXR1ZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw0MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsNDApJyx2cjpcIkxPXCIsbmFtZTpcIkNSR3JvdXBOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw1MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsNTApJyx2cjpcIlVTXCIsbmFtZTpcIkNSSW1hZ2VTZXJpYWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw2MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsNjApJyx2cjpcIkxPXCIsbmFtZTpcIkNSQmFyQ29kZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMVwiLDcwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw3MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JGaWxtT3V0cHV0RXhwb3N1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw4MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0sxXCIsODApJyx2cjpcIkxPXCIsbmFtZTpcIkNSRmlsbUZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMVwiLDkwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzFcIiw5MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JTU2hpZnRTdHJpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiwwMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0syXCIsMDApJyx2cjpcIlVTXCIsbmFtZTpcIkNSU1NoaWZ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0syXCIsMTApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDEwKScsdnI6XCJEU1wiLG5hbWU6XCJDUkNTaGlmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDIwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiwyMCknLHZyOlwiRFNcIixuYW1lOlwiQ1JHVFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDMwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiwzMCknLHZyOlwiRFNcIixuYW1lOlwiQ1JHQVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDQwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw0MCknLHZyOlwiRFNcIixuYW1lOlwiQ1JHQ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDUwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw1MCknLHZyOlwiRFNcIixuYW1lOlwiQ1JHU1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDYwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw2MCknLHZyOlwiRFNcIixuYW1lOlwiQ1JSVFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDcwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw3MCknLHZyOlwiRFNcIixuYW1lOlwiQ1JSRVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDgwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw4MCknLHZyOlwiVVNcIixuYW1lOlwiQ1JSTlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLMlwiLDkwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzJcIiw5MCknLHZyOlwiRFNcIixuYW1lOlwiQ1JEUlRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzNcIiwwMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsMDApJyx2cjpcIkRTXCIsbmFtZTpcIkNSRFJFXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsMTApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDEwKScsdnI6XCJVU1wiLG5hbWU6XCJDUkRSTlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDIwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzNcIiwyMCknLHZyOlwiRFNcIixuYW1lOlwiQ1JPUkVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzNcIiwzMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsMzApJyx2cjpcIlVTXCIsbmFtZTpcIkNST1JOXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsNDApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDQwKScsdnI6XCJVU1wiLG5hbWU6XCJDUk9SRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDUwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzNcIiw1MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JDYXNzZXR0ZVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzEuMCBCTE9DSzNcIiw2MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsNjApJyx2cjpcIkxPXCIsbmFtZTpcIkNSTWFjaGluZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsNzApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDcwKScsdnI6XCJMT1wiLG5hbWU6XCJDUk1hY2hpbmVUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsODApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDgwKScsdnI6XCJMT1wiLG5hbWU6XCJDUlRlY2huaWNpYW5Db2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8xLjAgQkxPQ0szXCIsOTApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMS4wIEJMT0NLM1wiLDkwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkVuZXJneVN1YnRyYWN0aW9uUGFyYW1ldGVyc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDAwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzFcIiwwMCknLHZyOlwiTE9cIixuYW1lOlwiQ1JFeHBvc3VyZU1lbnVDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsMTApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDEwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkV4cG9zdXJlTWVudVN0cmluZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDIwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzFcIiwyMCknLHZyOlwiTE9cIixuYW1lOlwiQ1JFRFJNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsMzApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDMwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkxhdGl0dWRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsNDApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDQwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkdyb3VwTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsNTApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDUwKScsdnI6XCJVU1wiLG5hbWU6XCJDUkltYWdlU2VyaWFsTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsNjApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDYwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkJhckNvZGVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzFcIiw3MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsNzApJyx2cjpcIkxPXCIsbmFtZTpcIkNSRmlsbU91dHB1dEV4cG9zdXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsODApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMVwiLDgwKScsdnI6XCJMT1wiLG5hbWU6XCJDUkZpbG1Gb3JtYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzFcIiw5MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0sxXCIsOTApJyx2cjpcIkxPXCIsbmFtZTpcIkNSU1NoaWZ0U3RyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsMDApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMlwiLDAwKScsdnI6XCJVU1wiLG5hbWU6XCJDUlNTaGlmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLMlwiLDEwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiwxMCknLHZyOlwiTE9cIixuYW1lOlwiQ1JDU2hpZnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiwyMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIkNSR1RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiwzMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsMzApJyx2cjpcIkRTXCIsbmFtZTpcIkNSR0FcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw0MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsNDApJyx2cjpcIkRTXCIsbmFtZTpcIkNSR0NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw1MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsNTApJyx2cjpcIkRTXCIsbmFtZTpcIkNSR1NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw2MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsNjApJyx2cjpcIkxPXCIsbmFtZTpcIkNSUlRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw3MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsNzApJyx2cjpcIkRTXCIsbmFtZTpcIkNSUkVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw4MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsODApJyx2cjpcIlVTXCIsbmFtZTpcIkNSUk5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzJcIiw5MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0syXCIsOTApJyx2cjpcIkRTXCIsbmFtZTpcIkNSRFJUXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsMDApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDAwKScsdnI6XCJEU1wiLG5hbWU6XCJDUkRSRVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDEwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiQ1JEUk5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiwyMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIkNST1JFXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsMzApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDMwKScsdnI6XCJVU1wiLG5hbWU6XCJDUk9STlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDQwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiw0MCknLHZyOlwiVVNcIixuYW1lOlwiQ1JPUkRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiw1MCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsNTApJyx2cjpcIkxPXCIsbmFtZTpcIkNSQ2Fzc2V0dGVTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsNjApJzp7dGFnOicoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDYwKScsdnI6XCJMT1wiLG5hbWU6XCJDUk1hY2hpbmVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDcwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiw3MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JNYWNoaW5lVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDgwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiw4MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JUZWNobmljaWFuQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLDkwKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIiw5MCknLHZyOlwiTE9cIixuYW1lOlwiQ1JFbmVyZ3lTdWJ0cmFjdGlvblBhcmFtZXRlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIixmMCknOnt0YWc6JygwMDIzLFwiR0VNU19BQ1JRQV8yLjAgQkxPQ0szXCIsZjApJyx2cjpcIkxPXCIsbmFtZTpcIkNSRGlzdHJpYnV0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfQUNSUUFfMi4wIEJMT0NLM1wiLGZmKSc6e3RhZzonKDAwMjMsXCJHRU1TX0FDUlFBXzIuMCBCTE9DSzNcIixmZiknLHZyOlwiVVNcIixuYW1lOlwiQ1JTaHV0dGVyc0FwcGxpZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsMDEpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiwwMSknLHZyOlwiU1FcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb24gUGFyYW1ldGVycyBTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1MCknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDUwKScsdnI6XCJVTFwiLG5hbWU6XCJWb2x1bWVWb3hlbENvdW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDUxKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNTEpJyx2cjpcIlVMXCIsbmFtZTpcIlZvbHVtZVNlZ21lbnRDb3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1MyknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDUzKScsdnI6XCJVU1wiLG5hbWU6XCJWb2x1bWVTbGljZVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNTQpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1NCknLHZyOlwiVVNcIixuYW1lOlwiVm9sdW1lU2xpY2VDb3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1NSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDU1KScsdnI6XCJTTFwiLG5hbWU6XCJWb2x1bWVUaHJlc2hvbGRWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1NyknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDU3KScsdnI6XCJEU1wiLG5hbWU6XCJWb2x1bWVWb3hlbFJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDU4KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNTgpJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZVZveGVsU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw1OSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDU5KScsdnI6XCJVU1wiLG5hbWU6XCJWb2x1bWVaUG9zaXRpb25TaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDYwKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNjApJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZUJhc2VMaW5lXCIsdm06XCI5XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDYxKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNjEpJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZUNlbnRlclBvaW50XCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDYzKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNjMpJyx2cjpcIlNMXCIsbmFtZTpcIlZvbHVtZVNrZXdCYXNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDY0KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNjQpJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZVJlZ2lzdHJhdGlvblRyYW5zZm9ybVJvdGF0aW9uTWF0cml4XCIsdm06XCI5XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDY1KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNjUpJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZVJlZ2lzdHJhdGlvblRyYW5zZm9ybVRyYW5zbGF0aW9uVmVjdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDcwKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNzApJyx2cjpcIkRTXCIsbmFtZTpcIktWUExpc3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw3MSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDcxKScsdnI6XCJJU1wiLG5hbWU6XCJYUmF5VHViZUN1cnJlbnRMaXN0XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsNzIpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw3MiknLHZyOlwiSVNcIixuYW1lOlwiRXhwb3N1cmVMaXN0XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsODApJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw4MCknLHZyOlwiTE9cIixuYW1lOlwiQWNxdWlzaXRpb25ETFhJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDg1KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsODUpJyx2cjpcIlNRXCIsbmFtZTpcIkFjcXVpc2l0aW9uRExYMkRTZXJpZXNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw4OSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDg5KScsdnI6XCJEU1wiLG5hbWU6XCJDb250cmFzdEFnZW50Vm9sdW1lTGlzdFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDhBKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOEEpJyx2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mSW5qZWN0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw4QiknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDhCKScsdnI6XCJVU1wiLG5hbWU6XCJGcmFtZUNvdW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDkxKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOTEpJyx2cjpcIkxPXCIsbmFtZTpcIlhBM0RSZWNvbnN0cnVjdGlvbkFsZ29yaXRobU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOTIpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5MiknLHZyOlwiQ1NcIixuYW1lOlwiWEEzRFJlY29uc3RydWN0aW9uQWxnb3JpdGhtVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5MyknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDkzKScsdnI6XCJEQVwiLG5hbWU6XCJETFhDYWxpYnJhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOTQpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5NCknLHZyOlwiVE1cIixuYW1lOlwiRExYQ2FsaWJyYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDk1KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOTUpJyx2cjpcIkNTXCIsbmFtZTpcIkRMWENhbGlicmF0aW9uU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDk2KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsOTYpJyx2cjpcIklTXCIsbmFtZTpcIlVzZWRGcmFtZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5OCknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDk4KScsdnI6XCJVU1wiLG5hbWU6XCJUcmFuc2Zvcm1Db3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5OSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDk5KScsdnI6XCJTUVwiLG5hbWU6XCJUcmFuc2Zvcm1TZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5QSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDlBKScsdnI6XCJEU1wiLG5hbWU6XCJUcmFuc2Zvcm1Sb3RhdGlvbk1hdHJpeFwiLHZtOlwiOVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5QiknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDlCKScsdnI6XCJEU1wiLG5hbWU6XCJUcmFuc2Zvcm1UcmFuc2xhdGlvblZlY3RvclwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIiw5QyknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLDlDKScsdnI6XCJMT1wiLG5hbWU6XCJUcmFuc2Zvcm1MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixCMCknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEIwKScsdnI6XCJTUVwiLG5hbWU6XCJXaXJlZnJhbWVMaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEIxKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjEpJyx2cjpcIlVTXCIsbmFtZTpcIldpcmVmcmFtZUNvdW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEIyKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjIpJyx2cjpcIlVTXCIsbmFtZTpcIkxvY2F0aW9uU3lzdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEI1KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjUpJyx2cjpcIkxPXCIsbmFtZTpcIldpcmVmcmFtZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjYpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixCNiknLHZyOlwiTE9cIixuYW1lOlwiV2lyZWZyYW1lR3JvdXBOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEI3KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjcpJyx2cjpcIkxPXCIsbmFtZTpcIldpcmVmcmFtZUNvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEI4KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjgpJyx2cjpcIlNMXCIsbmFtZTpcIldpcmVmcmFtZUF0dHJpYnV0ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQjkpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixCOSknLHZyOlwiU0xcIixuYW1lOlwiV2lyZWZyYW1lUG9pbnRDb3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixCQSknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEJBKScsdnI6XCJTTFwiLG5hbWU6XCJXaXJlZnJhbWVUaW1lc3RhbXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQkIpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixCQiknLHZyOlwiU1FcIixuYW1lOlwiV2lyZWZyYW1lUG9pbnRMaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEJDKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQkMpJyx2cjpcIkRTXCIsbmFtZTpcIldpcmVmcmFtZVBvaW50c0Nvb3JkaW5hdGVzXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEMwKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQzApJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZVVwcGVyTGVmdEhpZ2hDb3JuZXJSQVNcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQzEpJzp7dGFnOicoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixDMSknLHZyOlwiRFNcIixuYW1lOlwiVm9sdW1lU2xpY2VUb1JBU1JvdGF0aW9uTWF0cml4XCIsdm06XCI5XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEMyKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsQzIpJyx2cjpcIkRTXCIsbmFtZTpcIlZvbHVtZVVwcGVyTGVmdEhpZ2hDb3JuZXJUTE9DXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEQxKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsRDEpJyx2cjpcIk9CXCIsbmFtZTpcIlZvbHVtZVNlZ21lbnRMaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEQyKSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsRDIpJyx2cjpcIk9CXCIsbmFtZTpcIlZvbHVtZUdyYWRpZW50TGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixEMyknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEQzKScsdnI6XCJPQlwiLG5hbWU6XCJWb2x1bWVEZW5zaXR5TGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NyxcIkdFTVNfQURXU29mdF8zRDFcIixENCknOnt0YWc6JygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEQ0KScsdnI6XCJPQlwiLG5hbWU6XCJWb2x1bWVaUG9zaXRpb25MaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ3LFwiR0VNU19BRFdTb2Z0XzNEMVwiLEQ1KSc6e3RhZzonKDAwNDcsXCJHRU1TX0FEV1NvZnRfM0QxXCIsRDUpJyx2cjpcIk9CXCIsbmFtZTpcIlZvbHVtZU9yaWdpbmFsSW5kZXhMaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDM5LFwiR0VNU19BRFdTb2Z0X0RQT1wiLDgwKSc6e3RhZzonKDAwMzksXCJHRU1TX0FEV1NvZnRfRFBPXCIsODApJyx2cjpcIklTXCIsbmFtZTpcIlByaXZhdGVFbnRpdHlOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzksXCJHRU1TX0FEV1NvZnRfRFBPXCIsODUpJzp7dGFnOicoMDAzOSxcIkdFTVNfQURXU29mdF9EUE9cIiw4NSknLHZyOlwiREFcIixuYW1lOlwiUHJpdmF0ZUVudGl0eURhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzksXCJHRU1TX0FEV1NvZnRfRFBPXCIsOTApJzp7dGFnOicoMDAzOSxcIkdFTVNfQURXU29mdF9EUE9cIiw5MCknLHZyOlwiVE1cIixuYW1lOlwiUHJpdmF0ZUVudGl0eVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzksXCJHRU1TX0FEV1NvZnRfRFBPXCIsOTUpJzp7dGFnOicoMDAzOSxcIkdFTVNfQURXU29mdF9EUE9cIiw5NSknLHZyOlwiTE9cIixuYW1lOlwiUHJpdmF0ZUVudGl0eUxhdW5jaENvbW1hbmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzksXCJHRU1TX0FEV1NvZnRfRFBPXCIsQUEpJzp7dGFnOicoMDAzOSxcIkdFTVNfQURXU29mdF9EUE9cIixBQSknLHZyOlwiQ1NcIixuYW1lOlwiUHJpdmF0ZUVudGl0eVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzMsXCJHRU1TX0NUSERfMDFcIiwwMiknOnt0YWc6JygwMDMzLFwiR0VNU19DVEhEXzAxXCIsMDIpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzcsXCJHRU1TX0RSU18xXCIsMTApJzp7dGFnOicoMDAzNyxcIkdFTVNfRFJTXzFcIiwxMCknLHZyOlwiTE9cIixuYW1lOlwiUmVmZXJyaW5nRGVwYXJ0bWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzNyxcIkdFTVNfRFJTXzFcIiwyMCknOnt0YWc6JygwMDM3LFwiR0VNU19EUlNfMVwiLDIwKScsdnI6XCJVU1wiLG5hbWU6XCJTY3JlZW5OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzcsXCJHRU1TX0RSU18xXCIsNDApJzp7dGFnOicoMDAzNyxcIkdFTVNfRFJTXzFcIiw0MCknLHZyOlwiU0hcIixuYW1lOlwiTGVmdE9yaWVudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDM3LFwiR0VNU19EUlNfMVwiLDQyKSc6e3RhZzonKDAwMzcsXCJHRU1TX0RSU18xXCIsNDIpJyx2cjpcIlNIXCIsbmFtZTpcIlJpZ2h0T3JpZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzcsXCJHRU1TX0RSU18xXCIsNTApJzp7dGFnOicoMDAzNyxcIkdFTVNfRFJTXzFcIiw1MCknLHZyOlwiQ1NcIixuYW1lOlwiSW52ZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDM3LFwiR0VNU19EUlNfMVwiLDYwKSc6e3RhZzonKDAwMzcsXCJHRU1TX0RSU18xXCIsNjApJyx2cjpcIlVTXCIsbmFtZTpcIkRTQVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDEwKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwxMCknLHZyOlwiTE9cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDExKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwxMSknLHZyOlwiU0xcIixuYW1lOlwiU3R1ZHlGbGFnc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDEyKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwxMiknLHZyOlwiU0xcIixuYW1lOlwiU3R1ZHlUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMWUpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDFlKScsdnI6XCJVSVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjApJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDIwKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjEpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDIxKScsdnI6XCJTTFwiLG5hbWU6XCJTZXJpZXNGbGFnc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDIyKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwyMiknLHZyOlwiU0hcIixuYW1lOlwiVXNlck9yaWVudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjMpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDIzKScsdnI6XCJTTFwiLG5hbWU6XCJJbml0aWF0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDI0KSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwyNCknLHZyOlwiU0xcIixuYW1lOlwiSW5pdGlhdGlvbkRlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjUpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDI1KScsdnI6XCJTTFwiLG5hbWU6XCJJbml0aWF0aW9uQ291bnRSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjYpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDI2KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJFbmVyZ3lTZXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjcpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDI3KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJEZXRlY3RvcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwyOSknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMjkpJyx2cjpcIlNMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwyYSknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMmEpJyx2cjpcIlNMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwyYyknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMmMpJyx2cjpcIkxPXCIsbmFtZTpcIlNlcmllc0NvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMmQpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDJkKScsdnI6XCJTTFwiLG5hbWU6XCJUcmFja0JlYXRBdmVyYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMmUpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDJlKScsdnI6XCJGRFwiLG5hbWU6XCJEaXN0YW5jZVByZXNjcmliZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwzMCknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMzApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwzNSknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMzUpJyx2cjpcIlNMXCIsbmFtZTpcIkdhbnRyeUxvY3VzVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDM3KSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiwzNyknLHZyOlwiU0xcIixuYW1lOlwiU3RhcnRpbmdIZWFydFJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwzOCknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMzgpJyx2cjpcIlNMXCIsbmFtZTpcIlJSV2luZG93V2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiwzOSknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsMzkpJyx2cjpcIlNMXCIsbmFtZTpcIlJSV2luZG93T2Zmc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19HRU5JRV8xXCIsM2EpJzp7dGFnOicoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDNhKScsdnI6XCJTTFwiLG5hbWU6XCJQZXJjZW50Q3ljbGVJbWFnZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiw0MCknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsNDApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0dFTklFXzFcIiw0MSknOnt0YWc6JygwMDA5LFwiR0VNU19HRU5JRV8xXCIsNDEpJyx2cjpcIlNMXCIsbmFtZTpcIlBhdGllbnRGbGFnc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDQyKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiw0MiknLHZyOlwiREFcIixuYW1lOlwiUGF0aWVudENyZWF0aW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfR0VOSUVfMVwiLDQzKSc6e3RhZzonKDAwMDksXCJHRU1TX0dFTklFXzFcIiw0MyknLHZyOlwiVE1cIixuYW1lOlwiUGF0aWVudENyZWF0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDBhKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwwYSknLHZyOlwiU0xcIixuYW1lOlwiU2VyaWVzVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDBiKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwwYiknLHZyOlwiU0xcIixuYW1lOlwiRWZmZWN0aXZlU2VyaWVzRHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwwYyknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMGMpJyx2cjpcIlNMXCIsbmFtZTpcIk51bUJlYXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMGQpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDBkKScsdnI6XCJMT1wiLG5hbWU6XCJSYWRpb051Y2xpZGVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTApJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDEwKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTIpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDEyKScsdnI6XCJMT1wiLG5hbWU6XCJEYXRhc2V0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDEzKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxMyknLHZyOlwiU0xcIixuYW1lOlwiRGF0YXNldFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxNSknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTUpJyx2cjpcIlNMXCIsbmFtZTpcIkRldGVjdG9yTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTYpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDE2KScsdnI6XCJTTFwiLG5hbWU6XCJFbmVyZ3lOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxNyknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTcpJyx2cjpcIlNMXCIsbmFtZTpcIlJSSW50ZXJ2YWxXaW5kb3dOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxOCknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTgpJyx2cjpcIlNMXCIsbmFtZTpcIk1HQmluTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMTkpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDE5KScsdnI6XCJGRFwiLG5hbWU6XCJSYWRpdXNPZlJvdGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMWEpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDFhKScsdnI6XCJTTFwiLG5hbWU6XCJEZXRlY3RvckNvdW50Wm9uZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDFiKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxYiknLHZyOlwiU0xcIixuYW1lOlwiTnVtRW5lcmd5V2luZG93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDFjKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxYyknLHZyOlwiU0xcIixuYW1lOlwiRW5lcmd5T2Zmc2V0XCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMWQpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDFkKScsdnI6XCJTTFwiLG5hbWU6XCJFbmVyZ3lSYW5nZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDFmKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwxZiknLHZyOlwiU0xcIixuYW1lOlwiSW1hZ2VPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDIzKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwyMyknLHZyOlwiU0xcIixuYW1lOlwiVXNlRk9WTWFza1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDI0KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwyNCknLHZyOlwiU0xcIixuYW1lOlwiRk9WTWFza1lDdXRvZmZBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDI1KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwyNSknLHZyOlwiU0xcIixuYW1lOlwiRk9WTWFza0N1dG9mZkFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMjYpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDI2KScsdnI6XCJTTFwiLG5hbWU6XCJUYWJsZU9yaWVudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMjcpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDI3KScsdnI6XCJTTFwiLG5hbWU6XCJST0lUb3BMZWZ0XCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMjgpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDI4KScsdnI6XCJTTFwiLG5hbWU6XCJST0lCb3R0b21SaWdodFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDMwKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzMCknLHZyOlwiTE9cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDMzKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzMyknLHZyOlwiTE9cIixuYW1lOlwiRW5lcmd5Q29ycmVjdE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzNCknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMzQpJyx2cjpcIkxPXCIsbmFtZTpcIlNwYXRpYWxDb3JyZWN0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDM1KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzNSknLHZyOlwiTE9cIixuYW1lOlwiVHVuaW5nQ2FsaWJOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsMzYpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDM2KScsdnI6XCJMT1wiLG5hbWU6XCJVbmlmb3JtaXR5Q29ycmVjdE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzNyknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsMzcpJyx2cjpcIkxPXCIsbmFtZTpcIkFjcXVpc2l0aW9uU3BlY2lmaWNDb3JyZWN0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDM4KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzOCknLHZyOlwiU0xcIixuYW1lOlwiQnl0ZU9yZGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsM2EpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDNhKScsdnI6XCJTTFwiLG5hbWU6XCJQaWN0dXJlRm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsM2IpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDNiKScsdnI6XCJGRFwiLG5hbWU6XCJQaXhlbFNjYWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsM2MpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDNjKScsdnI6XCJGRFwiLG5hbWU6XCJQaXhlbE9mZnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDNlKSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzZSknLHZyOlwiU0xcIixuYW1lOlwiRk9WU2hhcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiwzZiknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsM2YpJyx2cjpcIlNMXCIsbmFtZTpcIkRhdGFzZXRGbGFnc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDQ0KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiw0NCknLHZyOlwiRkRcIixuYW1lOlwiVGhyZXNob2xkQ2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiR0VNU19HRU5JRV8xXCIsNDUpJzp7dGFnOicoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDQ1KScsdnI6XCJGRFwiLG5hbWU6XCJUaHJlc2hvbGRXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDQ2KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiw0NiknLHZyOlwiU0xcIixuYW1lOlwiSW50ZXJwb2xhdGlvblR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX0dFTklFXzFcIiw1NSknOnt0YWc6JygwMDExLFwiR0VNU19HRU5JRV8xXCIsNTUpJyx2cjpcIkZEXCIsbmFtZTpcIlBlcmlvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIkdFTVNfR0VOSUVfMVwiLDU2KSc6e3RhZzonKDAwMTEsXCJHRU1TX0dFTklFXzFcIiw1NiknLHZyOlwiRkRcIixuYW1lOlwiRWxhcHNlZFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxMCknOnt0YWc6JygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTApJyx2cjpcIkZEXCIsbmFtZTpcIkRpZ2l0YWxGT1ZcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxMSknOnt0YWc6JygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTEpJyx2cjpcIlNMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxMiknOnt0YWc6JygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTIpJyx2cjpcIlNMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxNiknOnt0YWc6JygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTYpJyx2cjpcIlNMXCIsbmFtZTpcIkF1dG9UcmFja1BlYWtcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxNyknOnt0YWc6JygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTcpJyx2cjpcIlNMXCIsbmFtZTpcIkF1dG9UcmFja1dpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMTgpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDE4KScsdnI6XCJGRFwiLG5hbWU6XCJUcmFuc21pc3Npb25TY2FuVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDE5KSc6e3RhZzonKDAwMTMsXCJHRU1TX0dFTklFXzFcIiwxOSknLHZyOlwiRkRcIixuYW1lOlwiVHJhbnNtaXNzaW9uTWFza1dpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMWEpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDFhKScsdnI6XCJGRFwiLG5hbWU6XCJDb3BwZXJBdHRlbnVhdG9yVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMWMpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDFjKScsdnI6XCJGRFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMWQpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDFkKScsdnI6XCJGRFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMWUpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDFlKScsdnI6XCJGRFwiLG5hbWU6XCJUb21vVmlld09mZnNldFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiR0VNU19HRU5JRV8xXCIsMjYpJzp7dGFnOicoMDAxMyxcIkdFTVNfR0VOSUVfMVwiLDI2KScsdnI6XCJMVFwiLG5hbWU6XCJTdHVkeUNvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDMzLFwiR0VNU19HTkhEXzAxXCIsMDEpJzp7dGFnOicoMDAzMyxcIkdFTVNfR05IRF8wMVwiLDAxKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDMzLFwiR0VNU19HTkhEXzAxXCIsMDIpJzp7dGFnOicoMDAzMyxcIkdFTVNfR05IRF8wMVwiLDAyKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsMDEpJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDAxKScsdnI6XCJMT1wiLG5hbWU6XCJGdWxsRmlkZWxpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIiwwMiknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsMDIpJyx2cjpcIlNIXCIsbmFtZTpcIlN1aXRlSWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIiwwNCknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsMDQpJyx2cjpcIlNIXCIsbmFtZTpcIlByb2R1Y3RJZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDE3KSc6e3RhZzonKDAwMDksXCJHRU1TX0lERU5fMDFcIiwxNyknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDFhKSc6e3RhZzonKDAwMDksXCJHRU1TX0lERU5fMDFcIiwxYSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDIwKSc6e3RhZzonKDAwMDksXCJHRU1TX0lERU5fMDFcIiwyMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDI3KSc6e3RhZzonKDAwMDksXCJHRU1TX0lERU5fMDFcIiwyNyknLHZyOlwiU0xcIixuYW1lOlwiSW1hZ2VBY3R1YWxEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsMmYpJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDJmKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsMzApJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLDMwKScsdnI6XCJTSFwiLG5hbWU6XCJTZXJ2aWNlSWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIiwzMSknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsMzEpJyx2cjpcIlNIXCIsbmFtZTpcIk1vYmlsZUxvY2F0aW9uTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTIpJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLGUyKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTMpJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLGUzKScsdnI6XCJVSVwiLG5hbWU6XCJFcXVpcG1lbnRVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIixlNiknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTYpJyx2cjpcIlNIXCIsbmFtZTpcIkdlbmVzaXNWZXJzaW9uTm93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTcpJzp7dGFnOicoMDAwOSxcIkdFTVNfSURFTl8wMVwiLGU3KScsdnI6XCJVTFwiLG5hbWU6XCJFeGFtUmVjb3JkQ2hlY2tzdW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIixlOCknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTgpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJHRU1TX0lERU5fMDFcIixlOSknOnt0YWc6JygwMDA5LFwiR0VNU19JREVOXzAxXCIsZTkpJyx2cjpcIlNMXCIsbmFtZTpcIkFjdHVhbFNlcmllc0RhdGFUaW1lU3RhbXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwwNiknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMDYpJyx2cjpcIlNMXCIsbmFtZTpcIkltYWdlQXJjaGl2ZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwxMCknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMTApJyx2cjpcIlNTXCIsbmFtZTpcIlNjb3V0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDFjKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwxYyknLHZyOlwiU0xcIixuYW1lOlwiVm1hTWFtcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDFkKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwxZCknLHZyOlwiU1NcIixuYW1lOlwiVm1hUGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwxZSknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMWUpJyx2cjpcIlNMXCIsbmFtZTpcIlZtYU1vZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDFmKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwxZiknLHZyOlwiU0xcIixuYW1lOlwiVm1hQ2xpcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDIwKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwyMCknLHZyOlwiU1NcIixuYW1lOlwiU21hcnRTY2FuT25PZmZGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMzApJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDMwKScsdnI6XCJTSFwiLG5hbWU6XCJGb3JlaWduSW1hZ2VSZXZpc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDMxKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwzMSknLHZyOlwiU1NcIixuYW1lOlwiSW1hZ2luZ01vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwzMiknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMzIpJyx2cjpcIlNTXCIsbmFtZTpcIlB1bHNlU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwzMyknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMzMpJyx2cjpcIlNMXCIsbmFtZTpcIkltYWdpbmdPcHRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMzUpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDM1KScsdnI6XCJTU1wiLG5hbWU6XCJQbGFuZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiwzNiknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsMzYpJyx2cjpcIlNMXCIsbmFtZTpcIk9ibGlxdWVQbGFuZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQwKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw0MCknLHZyOlwiU0hcIixuYW1lOlwiUkFTTGV0dGVyT2ZJbWFnZUxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDEpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQxKScsdnI6XCJGTFwiLG5hbWU6XCJJbWFnZUxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDIpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQyKScsdnI6XCJGTFwiLG5hbWU6XCJDZW50ZXJSQ29vcmRPZlBsYW5lSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw0MyknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDMpJyx2cjpcIkZMXCIsbmFtZTpcIkNlbnRlckFDb29yZE9mUGxhbmVJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQ0KSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw0NCknLHZyOlwiRkxcIixuYW1lOlwiQ2VudGVyU0Nvb3JkT2ZQbGFuZUltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDUpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQ1KScsdnI6XCJGTFwiLG5hbWU6XCJOb3JtYWxSQ29vcmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw0NiknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDYpJyx2cjpcIkZMXCIsbmFtZTpcIk5vcm1hbEFDb29yZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQ3KSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw0NyknLHZyOlwiRkxcIixuYW1lOlwiTm9ybWFsU0Nvb3JkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDgpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQ4KScsdnI6XCJGTFwiLG5hbWU6XCJSQ29vcmRPZlRvcFJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNDkpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDQ5KScsdnI6XCJGTFwiLG5hbWU6XCJBQ29vcmRPZlRvcFJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNGEpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDRhKScsdnI6XCJGTFwiLG5hbWU6XCJTQ29vcmRPZlRvcFJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNGIpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDRiKScsdnI6XCJGTFwiLG5hbWU6XCJSQ29vcmRPZkJvdHRvbVJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNGMpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDRjKScsdnI6XCJGTFwiLG5hbWU6XCJBQ29vcmRPZkJvdHRvbVJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNGQpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDRkKScsdnI6XCJGTFwiLG5hbWU6XCJTQ29vcmRPZkJvdHRvbVJpZ2h0Q29ybmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNTApJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDUwKScsdnI6XCJGTFwiLG5hbWU6XCJUYWJsZVN0YXJ0TG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw1MSknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNTEpJyx2cjpcIkZMXCIsbmFtZTpcIlRhYmxlRW5kTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw1MiknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNTIpJyx2cjpcIlNIXCIsbmFtZTpcIlJBU0xldHRlckZvclNpZGVPZkltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNTMpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDUzKScsdnI6XCJTSFwiLG5hbWU6XCJSQVNMZXR0ZXJGb3JBbnRlcmlvclBvc3RlcmlvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDU0KSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw1NCknLHZyOlwiU0hcIixuYW1lOlwiUkFTTGV0dGVyRm9yU2NvdXRTdGFydExvY1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDU1KSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw1NSknLHZyOlwiU0hcIixuYW1lOlwiUkFTTGV0dGVyRm9yU2NvdXRFbmRMb2NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw2MCknOnt0YWc6JygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNjApJyx2cjpcIkZMXCIsbmFtZTpcIkltYWdlRGltZW5zaW9uWFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDYxKSc6e3RhZzonKDAwMjcsXCJHRU1TX0lNQUdfMDFcIiw2MSknLHZyOlwiRkxcIixuYW1lOlwiSW1hZ2VEaW1lbnNpb25ZXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiR0VNU19JTUFHXzAxXCIsNjIpJzp7dGFnOicoMDAyNyxcIkdFTVNfSU1BR18wMVwiLDYyKScsdnI6XCJGTFwiLG5hbWU6XCJOdW1iZXJPZkV4Y2l0YXRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMDQpJzp7dGFnOicoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDA0KScsdnI6XCJTTFwiLG5hbWU6XCJMb3dlclJhbmdlT2ZQaXhlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwwNSknOnt0YWc6JygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMDUpJyx2cjpcIkRTXCIsbmFtZTpcIkxvd2VyUmFuZ2VPZlBpeGVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDA2KSc6e3RhZzonKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwwNiknLHZyOlwiRFNcIixuYW1lOlwiTG93ZXJSYW5nZU9mUGl4ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMDcpJzp7dGFnOicoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDA3KScsdnI6XCJTTFwiLG5hbWU6XCJMb3dlclJhbmdlT2ZQaXhlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwwOCknOnt0YWc6JygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMDgpJyx2cjpcIlNIXCIsbmFtZTpcIkxvd2VyUmFuZ2VPZlBpeGVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDA5KSc6e3RhZzonKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwwOSknLHZyOlwiU0hcIixuYW1lOlwiTG93ZXJSYW5nZU9mUGl4ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMGEpJzp7dGFnOicoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDBhKScsdnI6XCJTU1wiLG5hbWU6XCJMb3dlclJhbmdlT2ZQaXhlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwxNSknOnt0YWc6JygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMTUpJyx2cjpcIlNMXCIsbmFtZTpcIkxvd2VyUmFuZ2VPZlBpeGVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDE2KSc6e3RhZzonKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwxNiknLHZyOlwiU0xcIixuYW1lOlwiTG93ZXJSYW5nZU9mUGl4ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMTcpJzp7dGFnOicoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDE3KScsdnI6XCJTTFwiLG5hbWU6XCJMb3dlclJhbmdlT2ZQaXhlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwxOCknOnt0YWc6JygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMTgpJyx2cjpcIlNMXCIsbmFtZTpcIlVwcGVyUmFuZ2VPZlBpeGVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDFhKSc6e3RhZzonKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwxYSknLHZyOlwiU0xcIixuYW1lOlwiTGVuZ3RoT2ZUb3RhbEhlYWRlckluQnl0ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwyNiknOnt0YWc6JygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMjYpJyx2cjpcIlNTXCIsbmFtZTpcIlZlcnNpb25PZkhlYWRlclN0cnVjdHVyZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDM0KSc6e3RhZzonKDAwMjksXCJHRU1TX0lNUFNfMDFcIiwzNCknLHZyOlwiU0xcIixuYW1lOlwiQWR2YW50YWdlQ29tcE92ZXJmbG93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiR0VNU19JTVBTXzAxXCIsMzUpJzp7dGFnOicoMDAyOSxcIkdFTVNfSU1QU18wMVwiLDM1KScsdnI6XCJTTFwiLG5hbWU6XCJBZHZhbnRhZ2VDb21wVW5kZXJmbG93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDAxKScsdnI6XCJTU1wiLG5hbWU6XCJCaXRtYXBPZlByZXNjYW5PcHRpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDIpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDAyKScsdnI6XCJTU1wiLG5hbWU6XCJHcmFkaWVudE9mZnNldEluWFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDAzKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwMyknLHZyOlwiU1NcIixuYW1lOlwiR3JhZGllbnRPZmZzZXRJbllcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwNCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDQpJyx2cjpcIlNTXCIsbmFtZTpcIkdyYWRpZW50T2Zmc2V0SW5aXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDUpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDA1KScsdnI6XCJTU1wiLG5hbWU6XCJJbWFnZUlzT3JpZ2luYWxPclVub3JpZ2luYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwNiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDYpJyx2cjpcIlNTXCIsbmFtZTpcIk51bWJlck9mRVBJU2hvdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwNyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDcpJyx2cjpcIlNTXCIsbmFtZTpcIlZpZXdzUGVyU2VnbWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDA4KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwOCknLHZyOlwiU1NcIixuYW1lOlwiUmVzcGlyYXRvcnlSYXRlSW5CUE1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwOSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMDkpJyx2cjpcIlNTXCIsbmFtZTpcIlJlc3BpcmF0b3J5VHJpZ2dlclBvaW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDBhKScsdnI6XCJTU1wiLG5hbWU6XCJUeXBlT2ZSZWNlaXZlclVzZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwYiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGIpJyx2cjpcIkRTXCIsbmFtZTpcIlBlYWtSYXRlT2ZDaGFuZ2VPZkdyYWRpZW50RmllbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwYyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGMpJyx2cjpcIkRTXCIsbmFtZTpcIkxpbWl0c0luVW5pdHNPZlBlcmNlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwZCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGQpJyx2cjpcIkRTXCIsbmFtZTpcIlBTREVzdGltYXRlZExpbWl0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGUpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDBlKScsdnI6XCJEU1wiLG5hbWU6XCJQU0RFc3RpbWF0ZWRMaW1pdEluVGVzbGFQZXJTZWNvbmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwwZiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMGYpJyx2cjpcIkRTXCIsbmFtZTpcIlNBUkF2Z0hlYWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxMCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTApJyx2cjpcIlVTXCIsbmFtZTpcIldpbmRvd1ZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDExKScsdnI6XCJVU1wiLG5hbWU6XCJUb3RhbElucHV0Vmlld3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxMiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTIpJyx2cjpcIlNTXCIsbmFtZTpcIlhyYXlDaGFpblwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDEzKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxMyknLHZyOlwiU1NcIixuYW1lOlwiUmVjb25LZXJuZWxQYXJhbWV0ZXJzXCIsdm06XCI1XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTQpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDE0KScsdnI6XCJTU1wiLG5hbWU6XCJDYWxpYnJhdGlvblBhcmFtZXRlcnNcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxNSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTUpJyx2cjpcIlNTXCIsbmFtZTpcIlRvdGFsT3V0cHV0Vmlld3NcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxNiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTYpJyx2cjpcIlNTXCIsbmFtZTpcIk51bWJlck9mT3ZlcnJhbmdlc1wiLHZtOlwiNVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDE3KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxNyknLHZyOlwiRFNcIixuYW1lOlwiSUJISW1hZ2VTY2FsZUZhY3RvcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxOCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMTgpJyx2cjpcIkRTXCIsbmFtZTpcIkJCSENvZWZmaWNpZW50c1wiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDE5KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxOSknLHZyOlwiU1NcIixuYW1lOlwiTnVtYmVyT2ZCQkhDaGFpbnNUb0JsZW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDFhKScsdnI6XCJTTFwiLG5hbWU6XCJTdGFydGluZ0NoYW5uZWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxYiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWIpJyx2cjpcIlNTXCIsbmFtZTpcIlBQU2NhblBhcmFtZXRlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxYyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWMpJyx2cjpcIlNTXCIsbmFtZTpcIkdFSW1hZ2VJbnRlZ3JpdHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxZCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWQpJyx2cjpcIlNTXCIsbmFtZTpcIkxldmVsVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwxZSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWUpJyx2cjpcIkRTXCIsbmFtZTpcIkRlbHRhU3RhcnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMWYpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDFmKScsdnI6XCJTTFwiLG5hbWU6XCJNYXhPdmVycmFuZ2VzSW5BVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDIwKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyMCknLHZyOlwiRFNcIixuYW1lOlwiQXZnT3ZlcnJhbmdlc0FsbFZpZXdzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMjEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDIxKScsdnI6XCJTU1wiLG5hbWU6XCJDb3JyZWN0ZWRBZnRlcmdsb3dUZXJtc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDI1KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyNSknLHZyOlwiU1NcIixuYW1lOlwiUmVmZXJlbmNlQ2hhbm5lbHNcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyNiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMjYpJyx2cjpcIlVTXCIsbmFtZTpcIk5vVmlld3NSZWZDaGFubmVsc0Jsb2NrZWRcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyNyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMjcpJyx2cjpcIlNIXCIsbmFtZTpcIlNjYW5QaXRjaFJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMjgpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDI4KScsdnI6XCJPQlwiLG5hbWU6XCJVbmlxdWVJbWFnZUlkZW50aWZpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyOSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMjkpJyx2cjpcIk9CXCIsbmFtZTpcIkhpc3RvZ3JhbVRhYmxlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDJhKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyYSknLHZyOlwiT0JcIixuYW1lOlwiVXNlckRlZmluZWREYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMmIpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDJiKScsdnI6XCJTU1wiLG5hbWU6XCJQcml2YXRlU2Nhbk9wdGlvbnNcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwyYyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMmMpJyx2cjpcIlNTXCIsbmFtZTpcIkVmZmVjdGl2ZUVjaG9TcGFjaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMmQpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDJkKScsdnI6XCJTSFwiLG5hbWU6XCJTdHJpbmdTbG9wRmllbGQxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMmUpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDJlKScsdnI6XCJTSFwiLG5hbWU6XCJTdHJpbmdTbG9wRmllbGQyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMmYpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDJmKScsdnI6XCJTU1wiLG5hbWU6XCJSYXdEYXRhVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDMwKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzMCknLHZyOlwiU1NcIixuYW1lOlwiUmF3RGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzMSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMzEpJyx2cjpcIkRTXCIsbmFtZTpcIlJBQ29vcmRPZlRhcmdldFJlY29uQ2VudHJlXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMzIpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDMyKScsdnI6XCJTU1wiLG5hbWU6XCJSYXdEYXRhVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDMzKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzMyknLHZyOlwiRkxcIixuYW1lOlwiTmVnU2NhblNwYWNpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzNCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMzQpJyx2cjpcIklTXCIsbmFtZTpcIk9mZnNldEZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDM1KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzNSknLHZyOlwiVUxcIixuYW1lOlwiVXNlclVzYWdlVGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMzYpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDM2KScsdnI6XCJVTFwiLG5hbWU6XCJVc2VyRmlsbE1hcE1TV1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDM3KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzNyknLHZyOlwiVUxcIixuYW1lOlwiVXNlckZpbGxNYXBMU1dcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzOCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsMzgpJyx2cjpcIkZMXCIsbmFtZTpcIlVzZXIyNVRvVXNlcjQ4XCIsdm06XCIyNFwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDM5KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiwzOSknLHZyOlwiSVNcIixuYW1lOlwiU2xvcEludGVnZXI2VG9TbG9wSW50ZWdlcjlcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0MCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDApJyx2cjpcIkZMXCIsbmFtZTpcIlRyaWdnZXJPblBvc2l0aW9uXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDQxKScsdnI6XCJGTFwiLG5hbWU6XCJEZWdyZWVPZlJvdGF0aW9uXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDIpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDQyKScsdnI6XCJTTFwiLG5hbWU6XCJEQVNUcmlnZ2VyU291cmNlXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDMpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDQzKScsdnI6XCJTTFwiLG5hbWU6XCJEQVNGcGFHYWluXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDQpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDQ0KScsdnI6XCJTTFwiLG5hbWU6XCJEQVNPdXRwdXRTb3VyY2VcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0NSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDUpJyx2cjpcIlNMXCIsbmFtZTpcIkRBU0FkSW5wdXRcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0NiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDYpJyx2cjpcIlNMXCIsbmFtZTpcIkRBU0NhbE1vZGVcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0NyknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDcpJyx2cjpcIlNMXCIsbmFtZTpcIkRBU0NhbEZyZXF1ZW5jeVwiLHZtOlwiNFwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDQ4KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0OCknLHZyOlwiU0xcIixuYW1lOlwiREFTUmVnWG1cIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0OSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNDkpJyx2cjpcIlNMXCIsbmFtZTpcIkRBU0F1dG9aZXJvXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNGEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDRhKScsdnI6XCJTU1wiLG5hbWU6XCJTdGFydGluZ0NoYW5uZWxPZlZpZXdcIix2bTpcIjRcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0YiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNGIpJyx2cjpcIlNMXCIsbmFtZTpcIkRBU1htUGF0dGVyblwiLHZtOlwiNFwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDRjKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw0YyknLHZyOlwiU1NcIixuYW1lOlwiVEdHQ1RyaWdnZXJNb2RlXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNGQpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDRkKScsdnI6XCJGTFwiLG5hbWU6XCJTdGFydFNjYW5Ub1hyYXlPbkRlbGF5XCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNGUpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDRlKScsdnI6XCJGTFwiLG5hbWU6XCJEdXJhdGlvbk9mWHJheU9uXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNjApJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDYwKScsdnI6XCJJU1wiLG5hbWU6XCJTbG9wSW50ZWdlcjEwVG9TbG9wSW50ZWdlcjE3XCIsdm06XCI4XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNjEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDYxKScsdnI6XCJVSVwiLG5hbWU6XCJTY2FubmVyU3R1ZHlFbnRpdHlVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw2MiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNjIpJyx2cjpcIlNIXCIsbmFtZTpcIlNjYW5uZXJTdHVkeUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNmYpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDZmKScsdnI6XCJEU1wiLG5hbWU6XCJTY2FubmVyVGFibGVFbnRyeVwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDcwKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3MCknLHZyOlwiTE9cIixuYW1lOlwiUGFyYWRpZ21OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzEpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDcxKScsdnI6XCJTVFwiLG5hbWU6XCJQYXJhZGlnbURlc2NyaXB0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzIpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDcyKScsdnI6XCJVSVwiLG5hbWU6XCJQYXJhZGlnbVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDczKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3MyknLHZyOlwiVVNcIixuYW1lOlwiRXhwZXJpbWVudFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3NCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzQpJyx2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mUmVzdFZvbHVtZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3NSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzUpJyx2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mQWN0aXZlVm9sdW1lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDc2KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3NiknLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZEdW1teVNjYW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzcpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDc3KScsdnI6XCJTSFwiLG5hbWU6XCJBcHBsaWNhdGlvbk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3OCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsNzgpJyx2cjpcIlNIXCIsbmFtZTpcIkFwcGxpY2F0aW9uVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDc5KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3OSknLHZyOlwiVVNcIixuYW1lOlwiU2xpY2VzUGVyVm9sdW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsN2EpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDdhKScsdnI6XCJVU1wiLG5hbWU6XCJFeHBlY3RlZFRpbWVQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3YiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsN2IpJyx2cjpcIkZMXCIsbmFtZTpcIlJlZ3Jlc3NvclZhbHVlc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsN2MpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDdjKScsdnI6XCJGTFwiLG5hbWU6XCJEZWxheUFmdGVyU2xpY2VHcm91cFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDdkKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3ZCknLHZyOlwiVVNcIixuYW1lOlwiUmVjb25Nb2RlRmxhZ1dvcmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3ZSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsN2UpJyx2cjpcIkxPXCIsbmFtZTpcIlBBQ0NTcGVjaWZpY0luZm9ybWF0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw3ZiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsN2YpJyx2cjpcIkRTXCIsbmFtZTpcIkVEV0lTY2FsZUZhY3RvclwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODApJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDgwKScsdnI6XCJMT1wiLG5hbWU6XCJDb2lsSUREYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4MSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODEpJyx2cjpcIkxPXCIsbmFtZTpcIkdFQ29pbE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4MiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODIpJyx2cjpcIkxPXCIsbmFtZTpcIlN5c3RlbUNvbmZpZ3VyYXRpb25JbmZvcm1hdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODMpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDgzKScsdnI6XCJEU1wiLG5hbWU6XCJBc3NldFJGYWN0b3JzXCIsdm06XCIxLTJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4NCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODQpJyx2cjpcIkxPXCIsbmFtZTpcIkFkZGl0aW9uYWxBc3NldERhdGFcIix2bTpcIjUtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDg1KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4NSknLHZyOlwiVVRcIixuYW1lOlwiRGVidWdEYXRhVGV4dEZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDg2KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4NiknLHZyOlwiT0JcIixuYW1lOlwiRGVidWdEYXRhQmluYXJ5Rm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODcpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDg3KScsdnI6XCJVVFwiLG5hbWU6XCJTY2FubmVyU29mdHdhcmVWZXJzaW9uTG9uZ0Zvcm1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4OCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODgpJyx2cjpcIlVJXCIsbmFtZTpcIlBVUkVBY3F1aXNpdGlvbkNhbGlicmF0aW9uU2VyaWVzVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsODkpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDg5KScsdnI6XCJMT1wiLG5hbWU6XCJHb3Zlcm5pbmdCb2R5ZEJkdEFuZFNBUkRlZmluaXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4YSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOGEpJyx2cjpcIkNTXCIsbmFtZTpcIlByaXZhdGVJblBsYW5lUGhhc2VFbmNvZGluZ0RpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDhiKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4YiknLHZyOlwiT0JcIixuYW1lOlwiRk1SSUJpbmFyeURhdGFCbG9ja1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDhjKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4YyknLHZyOlwiRFNcIixuYW1lOlwiVm94ZWxMb2NhdGlvblwiLHZtOlwiNlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDhkKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4ZCknLHZyOlwiRFNcIixuYW1lOlwiU0FUQmFuZExvY2F0aW9uc1wiLHZtOlwiNy03blwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDhlKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4ZSknLHZyOlwiRFNcIixuYW1lOlwiU3BlY3Ryb1ByZXNjYW5WYWx1ZXNcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw4ZiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOGYpJyx2cjpcIkRTXCIsbmFtZTpcIlNwZWN0cm9QYXJhbWV0ZXJzXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTApJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDkwKScsdnI6XCJMT1wiLG5hbWU6XCJTQVJEZWZpbml0aW9uXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5MSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTEpJyx2cjpcIkRTXCIsbmFtZTpcIlNBUlZhbHVlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5MiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTIpJyx2cjpcIkxPXCIsbmFtZTpcIkltYWdlRXJyb3JUZXh0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTMpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDkzKScsdnI6XCJEU1wiLG5hbWU6XCJTcGVjdHJvUXVhbnRpdGF0aW9uVmFsdWVzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5NCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTQpJyx2cjpcIkRTXCIsbmFtZTpcIlNwZWN0cm9SYXRpb1ZhbHVlc1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTUpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDk1KScsdnI6XCJMT1wiLG5hbWU6XCJQcmVzY2FuUmV1c2VTdHJpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5NiknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTYpJyx2cjpcIkNTXCIsbmFtZTpcIkNvbnRlbnRRdWFsaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTcpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDk3KScsdnI6XCJMT1wiLG5hbWU6XCJJbWFnZUZpbHRlcmluZ1BhcmFtZXRlcnNcIix2bTpcIjlcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5OCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOTgpJyx2cjpcIlVJXCIsbmFtZTpcIkFTU0VUQWNxdWlzaXRpb25DYWxpYnJhdGlvblNlcmllc1VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDk5KSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5OSknLHZyOlwiTE9cIixuYW1lOlwiRXh0ZW5kZWRPcHRpb25zXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5YSknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOWEpJyx2cjpcIklTXCIsbmFtZTpcIlJ4U3RhY2tJZGVudGlmaWNhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDliKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5YiknLHZyOlwiRFNcIixuYW1lOlwiTlBXRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOWMpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDljKScsdnI6XCJPQlwiLG5hbWU6XCJSZXNlYXJjaFRhZzFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5ZCknOnt0YWc6JygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOWQpJyx2cjpcIk9CXCIsbmFtZTpcIlJlc2VhcmNoVGFnMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDllKSc6e3RhZzonKDAwNDMsXCJHRU1TX1BBUk1fMDFcIiw5ZSknLHZyOlwiT0JcIixuYW1lOlwiUmVzZWFyY2hUYWczXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VNU19QQVJNXzAxXCIsOWYpJzp7dGFnOicoMDA0MyxcIkdFTVNfUEFSTV8wMVwiLDlmKScsdnI6XCJPQlwiLG5hbWU6XCJSZXNlYXJjaFRhZzRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJHRU1TX1BBVElfMDFcIiwxMCknOnt0YWc6JygwMDExLFwiR0VNU19QQVRJXzAxXCIsMTApJyx2cjpcIlNTXCIsbmFtZTpcIlBhdGllbnRTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwwMyknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMDMpJyx2cjpcIlNTXCIsbmFtZTpcIlNlcmllc0Zyb21XaGljaFByZXNjcmliZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwwNSknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMDUpJyx2cjpcIlNIXCIsbmFtZTpcIkdlbmVzaXNWZXJzaW9uTm93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMDcpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDA3KScsdnI6XCJVTFwiLG5hbWU6XCJTZXJpZXNSZWNvcmRDaGVja3N1bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDE1KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwxNSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDE2KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwxNiknLHZyOlwiU1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDE4KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwxOCknLHZyOlwiU0hcIixuYW1lOlwiR2VuZXNpc1ZlcnNpb25Ob3dcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwxOSknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMTkpJyx2cjpcIlVMXCIsbmFtZTpcIkFjcVJlY29uUmVjb3JkQ2hlY2tzdW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwyMCknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIlRhYmxlU3RhcnRMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDM1KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwzNSknLHZyOlwiU1NcIixuYW1lOlwiU2VyaWVzRnJvbVdoaWNoUHJlc2NyaWJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDM2KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiwzNiknLHZyOlwiU1NcIixuYW1lOlwiSW1hZ2VGcm9tV2hpY2hQcmVzY3JpYmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsMzcpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDM3KScsdnI6XCJTU1wiLG5hbWU6XCJTY3JlZW5Gb3JtYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw0YSknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNGEpJyx2cjpcIkxPXCIsbmFtZTpcIkFuYXRvbWljYWxSZWZlcmVuY2VGb3JTY291dFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDRlKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw0ZSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDRmKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw0ZiknLHZyOlwiU1NcIixuYW1lOlwiTG9jYXRpb25zSW5BY3F1aXNpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDUwKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1MCknLHZyOlwiU1NcIixuYW1lOlwiR3JhcGhpY2FsbHlQcmVzY3JpYmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTEpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDUxKScsdnI6XCJEU1wiLG5hbWU6XCJSb3RhdGlvbkZyb21Tb3VyY2VYUm90XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTIpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDUyKScsdnI6XCJEU1wiLG5hbWU6XCJSb3RhdGlvbkZyb21Tb3VyY2VZUm90XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTMpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDUzKScsdnI6XCJEU1wiLG5hbWU6XCJSb3RhdGlvbkZyb21Tb3VyY2VaUm90XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTQpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDU0KScsdnI6XCJTSFwiLG5hbWU6XCJJbWFnZVBvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTUpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDU1KScsdnI6XCJTSFwiLG5hbWU6XCJJbWFnZU9yaWVudGF0aW9uXCIsdm06XCI2XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTYpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDU2KScsdnI6XCJTTFwiLG5hbWU6XCJJbnRlZ2VyU2xvcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDU3KSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1NyknLHZyOlwiU0xcIixuYW1lOlwiSW50ZWdlclNsb3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1OCknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTgpJyx2cjpcIlNMXCIsbmFtZTpcIkludGVnZXJTbG9wXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNTkpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDU5KScsdnI6XCJTTFwiLG5hbWU6XCJJbnRlZ2VyU2xvcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDVhKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1YSknLHZyOlwiU0xcIixuYW1lOlwiSW50ZWdlclNsb3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1YiknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNWIpJyx2cjpcIkRTXCIsbmFtZTpcIkZsb2F0U2xvcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDVjKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1YyknLHZyOlwiRFNcIixuYW1lOlwiRmxvYXRTbG9wXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNWQpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDVkKScsdnI6XCJEU1wiLG5hbWU6XCJGbG9hdFNsb3BcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1ZSknOnt0YWc6JygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNWUpJyx2cjpcIkRTXCIsbmFtZTpcIkZsb2F0U2xvcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDVmKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw1ZiknLHZyOlwiRFNcIixuYW1lOlwiRmxvYXRTbG9wXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNzApJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDcwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsNzEpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDcxKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsODEpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDgxKScsdnI6XCJEU1wiLG5hbWU6XCJBdXRvV2luZG93TGV2ZWxBbHBoYVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDgyKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw4MiknLHZyOlwiRFNcIixuYW1lOlwiQXV0b1dpbmRvd0xldmVsQmV0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDgzKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw4MyknLHZyOlwiRFNcIixuYW1lOlwiQXV0b1dpbmRvd0xldmVsV2luZG93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsODQpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDg0KScsdnI6XCJEU1wiLG5hbWU6XCJBdXRvV2luZG93TGV2ZWxMZXZlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDkwKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw5MCknLHZyOlwiU1NcIixuYW1lOlwiVHViZUZvY2FsU3BvdFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsOTEpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDkxKScsdnI6XCJTU1wiLG5hbWU6XCJCaW9wc3lQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDkyKSc6e3RhZzonKDAwMjEsXCJHRU1TX1JFTEFfMDFcIiw5MiknLHZyOlwiRkxcIixuYW1lOlwiQmlvcHN5VExvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiR0VNU19SRUxBXzAxXCIsOTMpJzp7dGFnOicoMDAyMSxcIkdFTVNfUkVMQV8wMVwiLDkzKScsdnI6XCJGTFwiLG5hbWU6XCJCaW9wc3lSZWZMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDA0KSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwwNCknLHZyOlwiQ1NcIixuYW1lOlwiQUVTXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMDYpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDA2KScsdnI6XCJEU1wiLG5hbWU6XCJBbmd1bGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMDkpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDA5KScsdnI6XCJEU1wiLG5hbWU6XCJSZWFsTWFnbmlmaWNhdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDBiKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwwYiknLHZyOlwiQ1NcIixuYW1lOlwiU2Vub2dyYXBoVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDBjKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwwYyknLHZyOlwiRFNcIixuYW1lOlwiSW50ZWdyYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMGQpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDBkKScsdnI6XCJEU1wiLG5hbWU6XCJST0lPcmlnaW5YWVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDExKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxMSknLHZyOlwiRFNcIixuYW1lOlwiUmVjZXB0b3JTaXplQ21YWVwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDEyKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxMiknLHZyOlwiSVNcIixuYW1lOlwiUmVjZXB0b3JTaXplUGl4ZWxzWFlcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxMyknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMTMpJyx2cjpcIlNUXCIsbmFtZTpcIlNjcmVlblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDE0KSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxNCknLHZyOlwiRFNcIixuYW1lOlwiUGl4ZWxQaXRjaE1pY3JvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxNSknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMTUpJyx2cjpcIklTXCIsbmFtZTpcIlBpeGVsRGVwdGhCaXRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMTYpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDE2KScsdnI6XCJJU1wiLG5hbWU6XCJCaW5uaW5nRmFjdG9yWFlcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxQiknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMUIpJyx2cjpcIkNTXCIsbmFtZTpcIkNsaW5pY2FsVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDFEKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxRCknLHZyOlwiRFNcIixuYW1lOlwiTWVhbk9mUmF3R3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDFFKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxRSknLHZyOlwiRFNcIixuYW1lOlwiTWVhbk9mT2Zmc2V0R3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDFGKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwxRiknLHZyOlwiRFNcIixuYW1lOlwiTWVhbk9mQ29ycmVjdGVkR3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDIwKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyMCknLHZyOlwiRFNcIixuYW1lOlwiTWVhbk9mUmVnaW9uR3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDIxKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyMSknLHZyOlwiRFNcIixuYW1lOlwiTWVhbk9mTG9nUmVnaW9uR3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDIyKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyMiknLHZyOlwiRFNcIixuYW1lOlwiU3RhbmRhcmREZXZpYXRpb25PZlJhd0dyYXlMZXZlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyMyknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMjMpJyx2cjpcIkRTXCIsbmFtZTpcIlN0YW5kYXJkRGV2aWF0aW9uT2ZDb3JyZWN0ZWRHcmF5TGV2ZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMjQpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDI0KScsdnI6XCJEU1wiLG5hbWU6XCJTdGFuZGFyZERldmlhdGlvbk9mUmVnaW9uR3JheUxldmVsc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDI1KSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyNSknLHZyOlwiRFNcIixuYW1lOlwiU3RhbmRhcmREZXZpYXRpb25PZkxvZ1JlZ2lvbkdyYXlMZXZlbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyNiknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMjYpJyx2cjpcIk9CXCIsbmFtZTpcIk1BT0J1ZmZlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDI3KSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyNyknLHZyOlwiSVNcIixuYW1lOlwiU2V0TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMjgpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDI4KScsdnI6XCJDU1wiLG5hbWU6XCJXaW5kb3dpbmdUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMjkpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDI5KScsdnI6XCJEU1wiLG5hbWU6XCJXaW5kb3dpbmdQYXJhbWV0ZXJzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyYSknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMmEpJyx2cjpcIklTXCIsbmFtZTpcIkNyb3NzaGFpckN1cnNvclhDb29yZGluYXRlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDJiKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwyYiknLHZyOlwiSVNcIixuYW1lOlwiQ3Jvc3NoYWlyQ3Vyc29yWUNvb3JkaW5hdGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsMzkpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDM5KScsdnI6XCJVU1wiLG5hbWU6XCJWaWduZXR0ZVJvd3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwzYSknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsM2EpJyx2cjpcIlVTXCIsbmFtZTpcIlZpZ25ldHRlQ29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDNiKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwzYiknLHZyOlwiVVNcIixuYW1lOlwiVmlnbmV0dGVCaXRzQWxsb2NhdGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsM2MpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDNjKScsdnI6XCJVU1wiLG5hbWU6XCJWaWduZXR0ZUJpdHNTdG9yZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwzZCknOnt0YWc6JygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsM2QpJyx2cjpcIlVTXCIsbmFtZTpcIlZpZ25ldHRlSGlnaEJpdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDNlKSc6e3RhZzonKDAwNDUsXCJHRU1TX1NFTk9fMDJcIiwzZSknLHZyOlwiVVNcIixuYW1lOlwiVmlnbmV0dGVQaXhlbFJlcHJlc2VudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQ1LFwiR0VNU19TRU5PXzAyXCIsM2YpJzp7dGFnOicoMDA0NSxcIkdFTVNfU0VOT18wMlwiLDNmKScsdnI6XCJPQlwiLG5hbWU6XCJWaWduZXR0ZVBpeGVsRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDA2KSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwwNiknLHZyOlwiU1NcIixuYW1lOlwiTGFzdFB1bHNlU2VxdWVuY2VVc2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiR0VNU19TRVJTXzAxXCIsMDcpJzp7dGFnOicoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDA3KScsdnI6XCJTTFwiLG5hbWU6XCJJbWFnZXNJblNlcmllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDEwKSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxMCknLHZyOlwiU0xcIixuYW1lOlwiTGFuZG1hcmtDb3VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiR0VNU19TRVJTXzAxXCIsMTEpJzp7dGFnOicoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDExKScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZkFjcXVpc2l0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDE0KSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxNCknLHZyOlwiU0xcIixuYW1lOlwiSW5kaWNhdGVzTnVtYmVyT2ZVcGRhdGVzVG9IZWFkZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxNyknOnt0YWc6JygwMDI1LFwiR0VNU19TRVJTXzAxXCIsMTcpJyx2cjpcIlNMXCIsbmFtZTpcIlNlcmllc0NvbXBsZXRlRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDE4KSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxOCknLHZyOlwiU0xcIixuYW1lOlwiTnVtYmVyT2ZJbWFnZXNBcmNoaXZlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDE5KSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxOSknLHZyOlwiU0xcIixuYW1lOlwiTGFzdEltYWdlTnVtYmVyVXNlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIkdFTVNfU0VSU18wMVwiLDFhKSc6e3RhZzonKDAwMjUsXCJHRU1TX1NFUlNfMDFcIiwxYSknLHZyOlwiU0hcIixuYW1lOlwiUHJpbWFyeVJlY2VpdmVyU3VpdGVBbmRIb3N0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19TVERZXzAxXCIsMDEpJzp7dGFnOicoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDAxKScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZlNlcmllc0luU3R1ZHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJHRU1TX1NURFlfMDFcIiwwMiknOnt0YWc6JygwMDIzLFwiR0VNU19TVERZXzAxXCIsMDIpJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mVW5hcmNoaXZlZFNlcmllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDEwKSc6e3RhZzonKDAwMjMsXCJHRU1TX1NURFlfMDFcIiwxMCknLHZyOlwiU1NcIixuYW1lOlwiUmVmZXJlbmNlSW1hZ2VGaWVsZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDUwKSc6e3RhZzonKDAwMjMsXCJHRU1TX1NURFlfMDFcIiw1MCknLHZyOlwiU1NcIixuYW1lOlwiU3VtbWFyeUltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19TVERZXzAxXCIsNzApJzp7dGFnOicoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDcwKScsdnI6XCJGRFwiLG5hbWU6XCJTdGFydFRpbWVTZWNzSW5GaXJzdEF4aWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiR0VNU19TVERZXzAxXCIsNzQpJzp7dGFnOicoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDc0KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZlVwZGF0ZXNUb0hlYWRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIkdFTVNfU1REWV8wMVwiLDdkKSc6e3RhZzonKDAwMjMsXCJHRU1TX1NURFlfMDFcIiw3ZCknLHZyOlwiU1NcIixuYW1lOlwiSW5kaWNhdGVzSWZTdHVkeUhhc0NvbXBsZXRlSW5mb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMyxcIkdFTVNfWU1IRF8wMVwiLDA1KSc6e3RhZzonKDAwMzMsXCJHRU1TX1lNSERfMDFcIiwwNSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMyxcIkdFTVNfWU1IRF8wMVwiLDA2KSc6e3RhZzonKDAwMzMsXCJHRU1TX1lNSERfMDFcIiwwNiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsMzkpJzp7dGFnOicoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsMzkpJyx2cjpcIlNTXCIsbmFtZTpcIkF4aWFsVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsOGYpJzp7dGFnOicoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsOGYpJyx2cjpcIlNTXCIsbmFtZTpcIlN3YXBQaGFzZUZyZXF1ZW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsOWMpJzp7dGFnOicoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsOWMpJyx2cjpcIlNTXCIsbmFtZTpcIlB1bHNlU2VxdWVuY2VOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIiw5ZiknOnt0YWc6JygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIiw5ZiknLHZyOlwiU1NcIixuYW1lOlwiQ29pbFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGE0KSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGE0KScsdnI6XCJTU1wiLG5hbWU6XCJTQVRGYXRXYXRlckJvbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGMwKSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGMwKScsdnI6XCJTU1wiLG5hbWU6XCJCaXRtYXBPZlNBVFNlbGVjdGlvbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGMxKSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGMxKScsdnI6XCJTU1wiLG5hbWU6XCJTdXJmYWNlQ29pbEludGVuc2l0eUNvcnJlY3Rpb25GbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIixjYiknOnt0YWc6JygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIixjYiknLHZyOlwiU1NcIixuYW1lOlwiUGhhc2VDb250cmFzdEZsb3dBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIixjYyknOnt0YWc6JygwMDE5LFwiR0VfR0VORVNJU19SRVYzLjBcIixjYyknLHZyOlwiU1NcIixuYW1lOlwiUGhhc2VDb250cmFzdFZlbG9jaXR5RW5jb2RpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGQ1KSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGQ1KScsdnI6XCJTU1wiLG5hbWU6XCJGcmFjdGlvbmFsRWNob1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsZDgpJzp7dGFnOicoMDAxOSxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsZDgpJyx2cjpcIlNTXCIsbmFtZTpcIlZhcmlhYmxlRWNob0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGQ5KSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGQ5KScsdnI6XCJEU1wiLG5hbWU6XCJDb25jYXRlbmF0ZWRTYXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGYyKSc6e3RhZzonKDAwMTksXCJHRV9HRU5FU0lTX1JFVjMuMFwiLGYyKScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZlBoYXNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MyxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsMWUpJzp7dGFnOicoMDA0MyxcIkdFX0dFTkVTSVNfUkVWMy4wXCIsMWUpJyx2cjpcIkRTXCIsbmFtZTpcIkRlbHRhU3RhcnRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQzLFwiR0VfR0VORVNJU19SRVYzLjBcIiwyNyknOnt0YWc6JygwMDQzLFwiR0VfR0VORVNJU19SRVYzLjBcIiwyNyknLHZyOlwiU0hcIixuYW1lOlwiU2NhblBpdGNoUmF0aW9cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDEpJzp7dGFnOicoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwMSknLHZyOlwiRkRcIixuYW1lOlwiSW1hZ2VDb21wcmVzc2lvbkZyYWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDAyKSc6e3RhZzonKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDIpJyx2cjpcIkZEXCIsbmFtZTpcIkltYWdlUXVhbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwMyknOnt0YWc6JygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDAzKScsdnI6XCJGRFwiLG5hbWU6XCJJbWFnZUJ5dGVzVHJhbnNmZXJyZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMTApJzp7dGFnOicoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwxMCknLHZyOlwiU0hcIixuYW1lOlwiSjJjUGFyYW1ldGVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwxMSknOnt0YWc6JygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDExKScsdnI6XCJVU1wiLG5hbWU6XCJKMmNQaXhlbFJlcHJlc2VudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDEyKSc6e3RhZzonKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMTIpJyx2cjpcIlVTXCIsbmFtZTpcIkoyY0JpdHNBbGxvY2F0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMTMpJzp7dGFnOicoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwxMyknLHZyOlwiVVNcIixuYW1lOlwiSjJjUGl4ZWxTaGlmdFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDE0KSc6e3RhZzonKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMTQpJyx2cjpcIlVTXCIsbmFtZTpcIkoyY1BsYW5hckNvbmZpZ3VyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMTUpJzp7dGFnOicoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwxNSknLHZyOlwiRFNcIixuYW1lOlwiSjJjUmVzY2FsZUludGVyY2VwdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwyMCknOnt0YWc6JygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDIwKScsdnI6XCJMT1wiLG5hbWU6XCJQaXhlbERhdGFNRDVTdW1QZXJGcmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwyMSknOnt0YWc6JygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDIxKScsdnI6XCJVU1wiLG5hbWU6XCJIaXN0b2dyYW1QZXJjZW50aWxlTGFiZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDIyKSc6e3RhZzonKDAwMjksXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMjIpJyx2cjpcIkZEXCIsbmFtZTpcIkhpc3RvZ3JhbVBlcmNlbnRpbGVWYWx1ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDEpJzp7dGFnOicoM2YwMSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwMSknLHZyOlwiTE9cIixuYW1lOlwiSW5zdGl0dXRpb25Db2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygzZjAxLFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDAyKSc6e3RhZzonKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDIpJyx2cjpcIkxPXCIsbmFtZTpcIlJvdXRlZFRyYW5zZmVyQUVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDMpJzp7dGFnOicoM2YwMSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwMyknLHZyOlwiTE9cIixuYW1lOlwiU291cmNlQUVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDQpJzp7dGFnOicoM2YwMSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwNCknLHZyOlwiU0hcIixuYW1lOlwiRGVmZXJyZWRWYWxpZGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygzZjAxLFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDA1KSc6e3RhZzonKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDUpJyx2cjpcIkxPXCIsbmFtZTpcIlNlcmllc093bmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygzZjAxLFwiSU5URUxFUkFEIE1FRElDQUwgU1lTVEVNU1wiLDA2KSc6e3RhZzonKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDYpJyx2cjpcIkxPXCIsbmFtZTpcIk9yZGVyR3JvdXBOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDcpJzp7dGFnOicoM2YwMSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwNyknLHZyOlwiU0hcIixuYW1lOlwiU3RyaXBwZWRQaXhlbERhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDNmMDEsXCJJTlRFTEVSQUQgTUVESUNBTCBTWVNURU1TXCIsMDgpJzp7dGFnOicoM2YwMSxcIklOVEVMRVJBRCBNRURJQ0FMIFNZU1RFTVNcIiwwOCknLHZyOlwiU0hcIixuYW1lOlwiUGVuZGluZ01vdmVSZXF1ZXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiSU5URUdSSVMgMS4wXCIsMjApJzp7dGFnOicoMDA0MSxcIklOVEVHUklTIDEuMFwiLDIwKScsdnI6XCJGTFwiLG5hbWU6XCJBY2N1bXVsYXRlZEZsdW9yb3Njb3B5RG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIklOVEVHUklTIDEuMFwiLDMwKSc6e3RhZzonKDAwNDEsXCJJTlRFR1JJUyAxLjBcIiwzMCknLHZyOlwiRkxcIixuYW1lOlwiQWNjdW11bGF0ZWRFeHBvc3VyZURvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJJTlRFR1JJUyAxLjBcIiw0MCknOnt0YWc6JygwMDQxLFwiSU5URUdSSVMgMS4wXCIsNDApJyx2cjpcIkZMXCIsbmFtZTpcIlRvdGFsRG9zZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIklOVEVHUklTIDEuMFwiLDQxKSc6e3RhZzonKDAwNDEsXCJJTlRFR1JJUyAxLjBcIiw0MSknLHZyOlwiRkxcIixuYW1lOlwiVG90YWxOdW1iZXJPZkZyYW1lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIklOVEVHUklTIDEuMFwiLDUwKSc6e3RhZzonKDAwNDEsXCJJTlRFR1JJUyAxLjBcIiw1MCknLHZyOlwiU1FcIixuYW1lOlwiRXhwb3N1cmVJbmZvcm1hdGlvblNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiSU5URUdSSVMgMS4wXCIsMDgpJzp7dGFnOicoMDAwOSxcIklOVEVHUklTIDEuMFwiLDA4KScsdnI6XCJDU1wiLG5hbWU6XCJFeHBvc3VyZUNoYW5uZWxcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIklOVEVHUklTIDEuMFwiLDMyKSc6e3RhZzonKDAwMDksXCJJTlRFR1JJUyAxLjBcIiwzMiknLHZyOlwiVE1cIixuYW1lOlwiRXhwb3N1cmVTdGFydFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJJTlRFR1JJUyAxLjBcIiwwMCknOnt0YWc6JygwMDE5LFwiSU5URUdSSVMgMS4wXCIsMDApJyx2cjpcIkxPXCIsbmFtZTpcIkFQUk5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJJTlRFR1JJUyAxLjBcIiw0MCknOnt0YWc6JygwMDE5LFwiSU5URUdSSVMgMS4wXCIsNDApJyx2cjpcIkRTXCIsbmFtZTpcIkZyYW1lUmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIklOVEVHUklTIDEuMFwiLDEyKSc6e3RhZzonKDAwMjEsXCJJTlRFR1JJUyAxLjBcIiwxMiknLHZyOlwiSVNcIixuYW1lOlwiRXhwb3N1cmVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJTlRFR1JJUyAxLjBcIiwwOCknOnt0YWc6JygwMDI5LFwiSU5URUdSSVMgMS4wXCIsMDgpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mRXhwb3N1cmVSZXN1bHRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiSVNHIHNoYWRvd1wiLDcwKSc6e3RhZzonKDAwMjksXCJJU0cgc2hhZG93XCIsNzApJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJJU0cgc2hhZG93XCIsODApJzp7dGFnOicoMDAyOSxcIklTRyBzaGFkb3dcIiw4MCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIklTRyBzaGFkb3dcIiw5MCknOnt0YWc6JygwMDI5LFwiSVNHIHNoYWRvd1wiLDkwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiSVNJXCIsMDEpJzp7dGFnOicoMDAwOSxcIklTSVwiLDAxKScsdnI6XCJVTlwiLG5hbWU6XCJTSUVORVRHZW5lcmFsUHVycG9zZUlNR0VGXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiTUVSR0UgVEVDSE5PTE9HSUVTLCBJTkMuXCIsMDApJzp7dGFnOicoMDAwOSxcIk1FUkdFIFRFQ0hOT0xPR0lFUywgSU5DLlwiLDAwKScsdnI6XCJPQlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAxMCknOnt0YWc6JygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAxMCknLHZyOlwiT0JcIixuYW1lOlwiT3JpZ2luYWxNZWFzdXJpbmdEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAxMiknOnt0YWc6JygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAxMiknLHZyOlwiVUxcIixuYW1lOlwiT3JpZ2luYWxNZWFzdXJpbmdEYXRhTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAyMCknOnt0YWc6JygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAyMCknLHZyOlwiT0JcIixuYW1lOlwiT3JpZ2luYWxNZWFzdXJpbmdSYXdEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAyMiknOnt0YWc6JygwMDI5LFwiT0NVTFVTIE9wdGlrZ2VyYWV0ZSBHbWJIXCIsMTAyMiknLHZyOlwiVUxcIixuYW1lOlwiT3JpZ2luYWxNZWFzdXJpbmdSYXdEYXRhTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiwwMCknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiwwMCknLHZyOlwiTFRcIixuYW1lOlwiUGFweXJ1c0NvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMCknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMCknLHZyOlwiU1FcIixuYW1lOlwiUG9pbnRlclNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMSknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMSknLHZyOlwiVUxcIixuYW1lOlwiSW1hZ2VQb2ludGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMiknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxMiknLHZyOlwiVUxcIixuYW1lOlwiUGl4ZWxPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDEzKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDEzKScsdnI6XCJTUVwiLG5hbWU6XCJJbWFnZUlkZW50aWZpZXJTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVMgMy4wXCIsMTQpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVMgMy4wXCIsMTQpJyx2cjpcIlNRXCIsbmFtZTpcIkV4dGVybmFsRmlsZVJlZmVyZW5jZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxNSknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiwxNSknLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZJbWFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDIxKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDIxKScsdnI6XCJVSVwiLG5hbWU6XCJSZWZlcmVuY2VkU09QQ2xhc3NVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDIyKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDIyKScsdnI6XCJVSVwiLG5hbWU6XCJSZWZlcmVuY2VkU09QSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDMxKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDMxKScsdnI6XCJMVFwiLG5hbWU6XCJSZWZlcmVuY2VkRmlsZU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDMyKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDMyKScsdnI6XCJMVFwiLG5hbWU6XCJSZWZlcmVuY2VkRmlsZVBhdGhcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVMgMy4wXCIsNDEpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVMgMy4wXCIsNDEpJyx2cjpcIlVJXCIsbmFtZTpcIlJlZmVyZW5jZWRJbWFnZVNPUENsYXNzVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVUyAzLjBcIiw0MiknOnt0YWc6JygwMDQxLFwiUEFQWVJVUyAzLjBcIiw0MiknLHZyOlwiVUlcIixuYW1lOlwiUmVmZXJlbmNlZEltYWdlU09QSW5zdGFuY2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDUwKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTIDMuMFwiLDUwKScsdnI6XCJTUVwiLG5hbWU6XCJJbWFnZVNlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsMDApJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDAwKScsdnI6XCJJU1wiLG5hbWU6XCJPdmVybGF5SURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiwwMSknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsMDEpJyx2cjpcIkxUXCIsbmFtZTpcIkxpbmtlZE92ZXJsYXlzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiwxMCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsMTApJyx2cjpcIlVTXCIsbmFtZTpcIk92ZXJsYXlSb3dzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsMTEpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDExKScsdnI6XCJVU1wiLG5hbWU6XCJPdmVybGF5Q29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDQwKSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw0MCknLHZyOlwiTE9cIixuYW1lOlwiT3ZlcmxheVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw1MCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsNTApJyx2cjpcIlVTXCIsbmFtZTpcIk92ZXJsYXlPcmlnaW5cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDYwKSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw2MCknLHZyOlwiTE9cIixuYW1lOlwiRWRpdGFibGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw3MCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsNzApJyx2cjpcIkxPXCIsbmFtZTpcIk92ZXJsYXlGb250XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsNzIpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDcyKScsdnI6XCJMT1wiLG5hbWU6XCJPdmVybGF5U3R5bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw3NCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsNzQpJyx2cjpcIlVTXCIsbmFtZTpcIk92ZXJsYXlGb250U2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDc2KSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw3NiknLHZyOlwiTE9cIixuYW1lOlwiT3ZlcmxheUNvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsNzgpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDc4KScsdnI6XCJVU1wiLG5hbWU6XCJTaGFkb3dTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsODApJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDgwKScsdnI6XCJMT1wiLG5hbWU6XCJGaWxsUGF0dGVyblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLDgyKSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIiw4MiknLHZyOlwiVVNcIixuYW1lOlwiT3ZlcmxheVBlblNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIixhMCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYTApJyx2cjpcIkxPXCIsbmFtZTpcIkxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYTIpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLGEyKScsdnI6XCJMVFwiLG5hbWU6XCJQb3N0SXRUZXh0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYTQpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLGE0KScsdnI6XCJVU1wiLG5hbWU6XCJBbmNob3JQb2ludFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLGIwKSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIixiMCknLHZyOlwiTE9cIixuYW1lOlwiUk9JVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLGIyKSc6e3RhZzonKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIixiMiknLHZyOlwiTFRcIixuYW1lOlwiQXR0YWNoZWRBbm5vdGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYmEpJzp7dGFnOicoNjAwMS1vLTYwZmYsXCJQQVBZUlVTIDMuMFwiLGJhKScsdnI6XCJVU1wiLG5hbWU6XCJDb250b3VyUG9pbnRzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIixiYyknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYmMpJyx2cjpcIlVTXCIsbmFtZTpcIk1hc2tEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMDEtby02MGZmLFwiUEFQWVJVUyAzLjBcIixjMCknOnt0YWc6Jyg2MDAxLW8tNjBmZixcIlBBUFlSVVMgMy4wXCIsYzApJyx2cjpcIlNRXCIsbmFtZTpcIlVJTk92ZXJsYXlTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlBBUFlSVVNcIiwwMCknOnt0YWc6JygwMDA5LFwiUEFQWVJVU1wiLDAwKScsdnI6XCJMVFwiLG5hbWU6XCJPcmlnaW5hbEZpbGVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiUEFQWVJVU1wiLDEwKSc6e3RhZzonKDAwMDksXCJQQVBZUlVTXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIk9yaWdpbmFsRmlsZUxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiUEFQWVJVU1wiLDE4KSc6e3RhZzonKDAwMDksXCJQQVBZUlVTXCIsMTgpJyx2cjpcIkxUXCIsbmFtZTpcIkRhdGFTZXRJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVU1wiLDAwKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTXCIsMDApJyx2cjpcIkxUXCIsbmFtZTpcIlBhcHlydXNDb21tZW50c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVU1wiLDEwKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTXCIsMTApJyx2cjpcIlVTXCIsbmFtZTpcIkZvbGRlclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsMTEpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIiwxMSknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudEZvbGRlckRhdGFTZXRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIiwyMCknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLDIwKScsdnI6XCJMVFwiLG5hbWU6XCJGb2xkZXJOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVU1wiLDMwKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTXCIsMzApJyx2cjpcIkRBXCIsbmFtZTpcIkNyZWF0aW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIiwzMiknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLDMyKScsdnI6XCJUTVwiLG5hbWU6XCJDcmVhdGlvblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsMzQpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIiwzNCknLHZyOlwiREFcIixuYW1lOlwiTW9kaWZpZWREYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVU1wiLDM2KSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTXCIsMzYpJyx2cjpcIlRNXCIsbmFtZTpcIk1vZGlmaWVkVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIiw0MCknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLDQwKScsdnI6XCJMVFwiLG5hbWU6XCJPd25lck5hbWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIiw1MCknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLDUwKScsdnI6XCJMVFwiLG5hbWU6XCJGb2xkZXJTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsNjApJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIiw2MCknLHZyOlwiVUxcIixuYW1lOlwiTnVtYmVyT2ZJbWFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsNjIpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIiw2MiknLHZyOlwiVUxcIixuYW1lOlwiTnVtYmVyT2ZPdGhlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIixhMCknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLGEwKScsdnI6XCJMVFwiLG5hbWU6XCJFeHRlcm5hbEZvbGRlckVsZW1lbnREU0lEXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsYTEpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIixhMSknLHZyOlwiVVNcIixuYW1lOlwiRXh0ZXJuYWxGb2xkZXJFbGVtZW50RGF0YVNldFR5cGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIixhMiknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLGEyKScsdnI6XCJMVFwiLG5hbWU6XCJFeHRlcm5hbEZvbGRlckVsZW1lbnRGaWxlTG9jYXRpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIixhMyknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLGEzKScsdnI6XCJVTFwiLG5hbWU6XCJFeHRlcm5hbEZvbGRlckVsZW1lbnRMZW5ndGhcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIixiMCknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLGIwKScsdnI6XCJMVFwiLG5hbWU6XCJJbnRlcm5hbEZvbGRlckVsZW1lbnREU0lEXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJQQVBZUlVTXCIsYjEpJzp7dGFnOicoMDA0MSxcIlBBUFlSVVNcIixiMSknLHZyOlwiVVNcIixuYW1lOlwiSW50ZXJuYWxGb2xkZXJFbGVtZW50RGF0YVNldFR5cGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA0MSxcIlBBUFlSVVNcIixiMiknOnt0YWc6JygwMDQxLFwiUEFQWVJVU1wiLGIyKScsdnI6XCJVTFwiLG5hbWU6XCJJbnRlcm5hbE9mZnNldFRvRGF0YVNldFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiUEFQWVJVU1wiLGIzKSc6e3RhZzonKDAwNDEsXCJQQVBZUlVTXCIsYjMpJyx2cjpcIlVMXCIsbmFtZTpcIkludGVybmFsT2Zmc2V0VG9JbWFnZVwiLHZtOlwiMS1uXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwMSknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDAxKScsdnI6XCJGTFwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDAyKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMDIpJyx2cjpcIklTXCIsbmFtZTpcIkNoZW1pY2FsU2hpZnROdW1iZXJNUlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwMyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDAzKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25CRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDA0KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMDQpJyx2cjpcIkNTXCIsbmFtZTpcIkRpZmZ1c2lvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwNiknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDA2KScsdnI6XCJDU1wiLG5hbWU6XCJJbWFnZUVuaGFuY2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDA3KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMDcpJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlVHlwZUVERVNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMDgpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwOCknLHZyOlwiSVNcIixuYW1lOlwiUGhhc2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMDkpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwOSknLHZyOlwiRkxcIixuYW1lOlwiSW1hZ2VQcmVwdWxzZURlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDBhKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMGEpJyx2cjpcIklTXCIsbmFtZTpcIlNsaWNlTnVtYmVyTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMGIpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwYiknLHZyOlwiQ1NcIixuYW1lOlwiU2xpY2VPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwYyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDBjKScsdnI6XCJDU1wiLG5hbWU6XCJBcnJoeXRobWlhUmVqZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDBlKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMGUpJyx2cjpcIkNTXCIsbmFtZTpcIkNhcmRpYWNDeWNsZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMGYpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwwZiknLHZyOlwiU1NcIixuYW1lOlwiQ2FyZGlhY0dhdGVXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxMCknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDEwKScsdnI6XCJDU1wiLG5hbWU6XCJDYXJkaWFjU3luY1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxMSknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDExKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25FY2hvVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxMiknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDEyKScsdnI6XCJDU1wiLG5hbWU6XCJEeW5hbWljU2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDEzKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMTMpJyx2cjpcIlNMXCIsbmFtZTpcIkVQSUZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxNCknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDE0KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZkVjaG9lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxNSknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDE1KScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZkxvY2F0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxNiknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDE2KScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZlBDRGlyZWN0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxNyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDE3KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZlBoYXNlc01SXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDE4KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMTgpJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mU2xpY2VzTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMTkpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxOSknLHZyOlwiQ1NcIixuYW1lOlwiUGFydGlhbE1hdHJpeFNjYW5uZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMWEpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxYSknLHZyOlwiRkxcIixuYW1lOlwiUENWZWxvY2l0eVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDFiKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMWIpJyx2cjpcIkZMXCIsbmFtZTpcIlByZXB1bHNlRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMWMpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxYyknLHZyOlwiQ1NcIixuYW1lOlwiUHJlcHVsc2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDFkKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMWQpJyx2cjpcIklTXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uTnVtYmVyTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMWYpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwxZiknLHZyOlwiQ1NcIixuYW1lOlwiUmVzcGlyYXRpb25TeW5jXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDIwKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlNjYW5uaW5nVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDIxKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjEpJyx2cjpcIkNTXCIsbmFtZTpcIlNQSVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjIpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwyMiknLHZyOlwiRkxcIixuYW1lOlwiV2F0ZXJGYXRTaGlmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwyMyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDIzKScsdnI6XCJEU1wiLG5hbWU6XCJGbGlwQW5nbGVQaGlsaXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDI0KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjQpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc0lzSW50ZXJhY3RpdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjUpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwyNSknLHZyOlwiU0hcIixuYW1lOlwiRWNob1RpbWVEaXNwbGF5TVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMjYpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwyNiknLHZyOlwiQ1NcIixuYW1lOlwiUHJlc2VudGF0aW9uU3RhdGVTdWJ0cmFjdGlvbkFjdGl2ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwyZCknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDJkKScsdnI6XCJTU1wiLG5hbWU6XCJTdGFja051bWJlck9mU2xpY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDMyKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMzIpJyx2cjpcIkZMXCIsbmFtZTpcIlN0YWNrUmFkaWFsQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMzMpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwzMyknLHZyOlwiQ1NcIixuYW1lOlwiU3RhY2tSYWRpYWxBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDM1KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMzUpJyx2cjpcIlNTXCIsbmFtZTpcIlN0YWNrU2xpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsMzYpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiwzNiknLHZyOlwiQ1NcIixuYW1lOlwiU3RhY2tUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDNmKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsM2YpJyx2cjpcIkNTXCIsbmFtZTpcIlpvb21Nb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDU4KSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsNTgpJyx2cjpcIlVMXCIsbmFtZTpcIkNvbnRyYXN0VHJhbnNmZXJUYXN0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw1ZiknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDVmKScsdnI6XCJTUVwiLG5hbWU6XCJTdGFja1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDYwKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsNjApJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mU3RhY2tzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDYxKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsNjEpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc1RyYW5zbWl0dGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDYyKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsNjIpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc0NvbW1pdHRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw2MyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDYzKScsdnI6XCJDU1wiLG5hbWU6XCJFeGFtaW5hdGlvblNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw2NyknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLDY3KScsdnI6XCJDU1wiLG5hbWU6XCJMaW5lYXJQcmVzZW50YXRpb25HTFRyYWZvU2hhcGVTdWJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsNzcpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw3NyknLHZyOlwiQ1NcIixuYW1lOlwiR0xUcmFmb1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsN2IpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw3YiknLHZyOlwiSVNcIixuYW1lOlwiQWNxdWlzaXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsODEpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw4MSknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZEeW5hbWljU2NhbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsOWYpJzp7dGFnOicoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIiw5ZiknLHZyOlwiVVNcIixuYW1lOlwiUGl4ZWxQcm9jZXNzaW5nS2VybmVsU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIixhMSknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLGExKScsdnI6XCJDU1wiLG5hbWU6XCJJc1Jhd0ltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLGYxKSc6e3RhZzonKDIwMDEsXCJQaGlsaXBzIEltYWdpbmcgREQgMDAxXCIsZjEpJyx2cjpcIkZMXCIsbmFtZTpcIlByb3NwZWN0aXZlTW90aW9uQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBoaWxpcHMgSW1hZ2luZyBERCAwMDFcIixmMiknOnt0YWc6JygyMDAxLFwiUGhpbGlwcyBJbWFnaW5nIEREIDAwMVwiLGYyKScsdnI6XCJGTFwiLG5hbWU6XCJSZXRyb3NwZWN0aXZlTW90aW9uQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwMSknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDAxKScsdnI6XCJGTFwiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDAyKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMDIpJyx2cjpcIklTXCIsbmFtZTpcIkNoZW1pY2FsU2hpZnROdW1iZXJNUlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwMyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDAzKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25CRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDA0KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMDQpJyx2cjpcIkNTXCIsbmFtZTpcIkRpZmZ1c2lvbkRpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwNiknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDA2KScsdnI6XCJDU1wiLG5hbWU6XCJJbWFnZUVuaGFuY2VkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDA3KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMDcpJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlVHlwZUVERVNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMDgpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwOCknLHZyOlwiSVNcIixuYW1lOlwiUGhhc2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMDkpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwOSknLHZyOlwiRkxcIixuYW1lOlwiSW1hZ2VQcmVwdWxzZURlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDBhKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMGEpJyx2cjpcIklTXCIsbmFtZTpcIlNsaWNlTnVtYmVyTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMGIpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwYiknLHZyOlwiQ1NcIixuYW1lOlwiU2xpY2VPcmllbnRhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwYyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDBjKScsdnI6XCJDU1wiLG5hbWU6XCJBcnJoeXRobWlhUmVqZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDBlKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMGUpJyx2cjpcIkNTXCIsbmFtZTpcIkNhcmRpYWNDeWNsZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMGYpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwwZiknLHZyOlwiU1NcIixuYW1lOlwiQ2FyZGlhY0dhdGVXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxMCknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDEwKScsdnI6XCJDU1wiLG5hbWU6XCJDYXJkaWFjU3luY1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxMSknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDExKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25FY2hvVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxMiknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDEyKScsdnI6XCJDU1wiLG5hbWU6XCJEeW5hbWljU2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDEzKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMTMpJyx2cjpcIlNMXCIsbmFtZTpcIkVQSUZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxNCknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDE0KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZkVjaG9lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxNSknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDE1KScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZkxvY2F0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxNiknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDE2KScsdnI6XCJTU1wiLG5hbWU6XCJOdW1iZXJPZlBDRGlyZWN0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxNyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDE3KScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZlBoYXNlc01SXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDE4KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMTgpJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mU2xpY2VzTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMTkpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxOSknLHZyOlwiQ1NcIixuYW1lOlwiUGFydGlhbE1hdHJpeFNjYW5uZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMWEpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxYSknLHZyOlwiRkxcIixuYW1lOlwiUENWZWxvY2l0eVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDFiKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMWIpJyx2cjpcIkZMXCIsbmFtZTpcIlByZXB1bHNlRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMWMpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxYyknLHZyOlwiQ1NcIixuYW1lOlwiUHJlcHVsc2VUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDFkKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMWQpJyx2cjpcIklTXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uTnVtYmVyTVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMWYpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwxZiknLHZyOlwiQ1NcIixuYW1lOlwiUmVzcGlyYXRpb25TeW5jXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDIwKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlNjYW5uaW5nVGVjaG5pcXVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDIxKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjEpJyx2cjpcIkNTXCIsbmFtZTpcIlNQSVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjIpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwyMiknLHZyOlwiRkxcIixuYW1lOlwiV2F0ZXJGYXRTaGlmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwyMyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDIzKScsdnI6XCJEU1wiLG5hbWU6XCJGbGlwQW5nbGVQaGlsaXBzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDI0KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjQpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc0lzSW50ZXJhY3RpdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjUpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwyNSknLHZyOlwiU0hcIixuYW1lOlwiRWNob1RpbWVEaXNwbGF5TVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMjYpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwyNiknLHZyOlwiQ1NcIixuYW1lOlwiUHJlc2VudGF0aW9uU3RhdGVTdWJ0cmFjdGlvbkFjdGl2ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwyZCknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDJkKScsdnI6XCJTU1wiLG5hbWU6XCJTdGFja051bWJlck9mU2xpY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDMyKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMzIpJyx2cjpcIkZMXCIsbmFtZTpcIlN0YWNrUmFkaWFsQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMzMpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwzMyknLHZyOlwiQ1NcIixuYW1lOlwiU3RhY2tSYWRpYWxBeGlzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDM1KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMzUpJyx2cjpcIlNTXCIsbmFtZTpcIlN0YWNrU2xpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsMzYpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiwzNiknLHZyOlwiQ1NcIixuYW1lOlwiU3RhY2tUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDNmKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsM2YpJyx2cjpcIkNTXCIsbmFtZTpcIlpvb21Nb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDU4KSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsNTgpJyx2cjpcIlVMXCIsbmFtZTpcIkNvbnRyYXN0VHJhbnNmZXJUYXN0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw1ZiknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDVmKScsdnI6XCJTUVwiLG5hbWU6XCJTdGFja1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDYwKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsNjApJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mU3RhY2tzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDYxKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsNjEpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc1RyYW5zbWl0dGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDYyKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsNjIpJyx2cjpcIkNTXCIsbmFtZTpcIlNlcmllc0NvbW1pdHRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw2MyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDYzKScsdnI6XCJDU1wiLG5hbWU6XCJFeGFtaW5hdGlvblNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw2NyknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLDY3KScsdnI6XCJDU1wiLG5hbWU6XCJMaW5lYXJQcmVzZW50YXRpb25HTFRyYWZvU2hhcGVTdWJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsNzcpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw3NyknLHZyOlwiQ1NcIixuYW1lOlwiR0xUcmFmb1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsN2IpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw3YiknLHZyOlwiSVNcIixuYW1lOlwiQWNxdWlzaXRpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsODEpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw4MSknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZEeW5hbWljU2NhbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsOWYpJzp7dGFnOicoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIiw5ZiknLHZyOlwiVVNcIixuYW1lOlwiUGl4ZWxQcm9jZXNzaW5nS2VybmVsU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIixhMSknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLGExKScsdnI6XCJDU1wiLG5hbWU6XCJJc1Jhd0ltYWdlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLGYxKSc6e3RhZzonKDIwMDEsXCJQSElMSVBTIElNQUdJTkcgREQgMDAxXCIsZjEpJyx2cjpcIkZMXCIsbmFtZTpcIlByb3NwZWN0aXZlTW90aW9uQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwMSxcIlBISUxJUFMgSU1BR0lORyBERCAwMDFcIixmMiknOnt0YWc6JygyMDAxLFwiUEhJTElQUyBJTUFHSU5HIEREIDAwMVwiLGYyKScsdnI6XCJGTFwiLG5hbWU6XCJSZXRyb3NwZWN0aXZlTW90aW9uQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBoaWxpcHMgTVIgSW1hZ2luZyBERCAwMDFcIiwwNSknOnt0YWc6JygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLDA1KScsdnI6XCJDU1wiLG5hbWU6XCJTeW5lcmd5UmVjb25zdHJ1Y3Rpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLDFlKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsMWUpJyx2cjpcIlNIXCIsbmFtZTpcIk1JUFByb3RvY29sXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLDFmKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsMWYpJyx2cjpcIlNIXCIsbmFtZTpcIk1QUlByb3RvY29sXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLDIwKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsMjApJyx2cjpcIlNMXCIsbmFtZTpcIk51bWJlck9mQ2hlbWljYWxTaGlmdHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsMmQpJzp7dGFnOicoMjAwNSxcIlBoaWxpcHMgTVIgSW1hZ2luZyBERCAwMDFcIiwyZCknLHZyOlwiU1NcIixuYW1lOlwiTnVtYmVyT2ZTdGFja1NsaWNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBoaWxpcHMgTVIgSW1hZ2luZyBERCAwMDFcIiw4MyknOnt0YWc6JygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLDgzKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLGExKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsYTEpJyx2cjpcIkNTXCIsbmFtZTpcIlN5bmNyYVNjYW5UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLGIwKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsYjApJyx2cjpcIkZMXCIsbmFtZTpcIkRpZmZ1c2lvbkRpcmVjdGlvblJMXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLGIxKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsYjEpJyx2cjpcIkZMXCIsbmFtZTpcIkRpZmZ1c2lvbkRpcmVjdGlvbkFQXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwMVwiLGIyKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDAxXCIsYjIpJyx2cjpcIkZMXCIsbmFtZTpcIkRpZmZ1c2lvbkRpcmVjdGlvbkZIXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUGhpbGlwcyBNUiBJbWFnaW5nIEREIDAwNVwiLDAyKSc6e3RhZzonKDIwMDUsXCJQaGlsaXBzIE1SIEltYWdpbmcgREQgMDA1XCIsMDIpJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDUsXCJQSElMSVBTIE1SIElNQUdJTkcgREQgMDAxXCIsMDUpJzp7dGFnOicoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIiwwNSknLHZyOlwiQ1NcIixuYW1lOlwiU3luZXJneVJlY29uc3RydWN0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIiwxZSknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLDFlKScsdnI6XCJTSFwiLG5hbWU6XCJNSVBQcm90b2NvbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIiwxZiknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLDFmKScsdnI6XCJTSFwiLG5hbWU6XCJNUFJQcm90b2NvbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIiwyMCknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLDIwKScsdnI6XCJTTFwiLG5hbWU6XCJOdW1iZXJPZkNoZW1pY2FsU2hpZnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLDJkKSc6e3RhZzonKDIwMDUsXCJQSElMSVBTIE1SIElNQUdJTkcgREQgMDAxXCIsMmQpJyx2cjpcIlNTXCIsbmFtZTpcIk51bWJlck9mU3RhY2tTbGljZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDIwMDUsXCJQSElMSVBTIE1SIElNQUdJTkcgREQgMDAxXCIsODMpJzp7dGFnOicoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIiw4MyknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIixhMSknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLGExKScsdnI6XCJDU1wiLG5hbWU6XCJTeW5jcmFTY2FuVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIixiMCknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLGIwKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25EaXJlY3Rpb25STFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIixiMSknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLGIxKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25EaXJlY3Rpb25BUFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMjAwNSxcIlBISUxJUFMgTVIgSU1BR0lORyBERCAwMDFcIixiMiknOnt0YWc6JygyMDA1LFwiUEhJTElQUyBNUiBJTUFHSU5HIEREIDAwMVwiLGIyKScsdnI6XCJGTFwiLG5hbWU6XCJEaWZmdXNpb25EaXJlY3Rpb25GSFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgUjUuNS9QQVJUXCIsMTAwMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBSNS41L1BBUlRcIiwxMDAwKScsdnI6XCJEU1wiLG5hbWU6XCJGaWVsZE9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgUjUuNi9QQVJUXCIsMTAwMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBSNS42L1BBUlRcIiwxMDAwKScsdnI6XCJEU1wiLG5hbWU6XCJGaWVsZE9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDAyKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDAyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwMyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwMyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDA1KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDA1KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwNiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwNiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDcpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMDcpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDA4KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDA4KScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwOSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwwOSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTApJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTApJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDEyKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDEyKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwxMyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwxMyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDE1KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDE1KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDE2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDE2KScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwxNyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwxNyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTgpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMTgpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDIwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDIwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyMSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjIpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjIpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDIzKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDIzKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyNCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyNCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjUpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDI2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDI2KScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyNyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwyNyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjgpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsMjgpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDI5KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDI5KScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDMxKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDMxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwzMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiwzMiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQyKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQyKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw0MyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw0MyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQ2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQ2KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw0NyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw0NyknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDgpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNDgpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQ5KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDQ5KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw1MCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw1MCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNjApJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNjApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDYxKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDYxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3MCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3MCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzEpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzIpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDczKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDczKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3NCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3NCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzYpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDc3KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDc3KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3OCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUiBTUEVDVFJPOzFcIiw3OCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzkpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIgU1BFQ1RSTzsxXCIsNzkpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDgwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SIFNQRUNUUk87MVwiLDgwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiUEhJTElQUyBNUlwiLDEwKSc6e3RhZzonKDAwMDksXCJQSElMSVBTIE1SXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIlNQSVJlbGVhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJQSElMSVBTIE1SXCIsMTIpJzp7dGFnOicoMDAwOSxcIlBISUxJUFMgTVJcIiwxMiknLHZyOlwiTE9cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLDA5KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIiwwOSknLHZyOlwiRFNcIixuYW1lOlwiTWFpbk1hZ25ldGljRmllbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIiwwZSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsMGUpJyx2cjpcIklTXCIsbmFtZTpcIkZsb3dDb21wZW5zYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixiMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsYjEpJyx2cjpcIklTXCIsbmFtZTpcIk1pbmltdW1SUkludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsYjIpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGIyKScsdnI6XCJJU1wiLG5hbWU6XCJNYXhpbXVtUlJJbnRlcnZhbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGIzKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixiMyknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZSZWplY3Rpb25zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsYjQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGI0KScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlJSSW50ZXJ2YWxzXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixiNSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsYjUpJyx2cjpcIklTXCIsbmFtZTpcIkFycmh5dGhtaWFSZWplY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixjMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsYzApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGM2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixjNiknLHZyOlwiSVNcIixuYW1lOlwiQ3ljbGVkTXVsdGlwbGVTbGljZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGNlKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixjZSknLHZyOlwiSVNcIixuYW1lOlwiUkVTVFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGQ1KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixkNSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGQ2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixkNiknLHZyOlwiSVNcIixuYW1lOlwiRm91cmllckludGVycG9sYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixkOSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZDkpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGUwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixlMCknLHZyOlwiSVNcIixuYW1lOlwiUHJlcHVsc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixlMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZTEpJyx2cjpcIkRTXCIsbmFtZTpcIlByZXB1bHNlRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixlMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZTIpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixlMyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZTMpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixmMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZjApJyx2cjpcIkxUXCIsbmFtZTpcIldTUHJvdG9jb2xTdHJpbmcxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZjEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGYxKScsdnI6XCJMVFwiLG5hbWU6XCJXU1Byb3RvY29sU3RyaW5nMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvTEFTVFwiLGYyKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixmMiknLHZyOlwiTFRcIixuYW1lOlwiV1NQcm90b2NvbFN0cmluZzNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL0xBU1RcIixmMyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9MQVNUXCIsZjMpJyx2cjpcIkxUXCIsbmFtZTpcIldTUHJvdG9jb2xTdHJpbmc0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9MQVNUXCIsMDApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvTEFTVFwiLDAwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9MQVNUXCIsMTApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvTEFTVFwiLDEwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9MQVNUXCIsMjApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvTEFTVFwiLDIwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9MQVNUXCIsMjEpJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvTEFTVFwiLDIxKScsdnI6XCJEU1wiLG5hbWU6XCJTbGljZUdhcFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlBISUxJUFMgTVIvTEFTVFwiLDIyKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL0xBU1RcIiwyMiknLHZyOlwiRFNcIixuYW1lOlwiU3RhY2tSYWRpYWxBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIlBISUxJUFMgTVIvTEFTVFwiLDAwKSc6e3RhZzonKDAwMjcsXCJQSElMSVBTIE1SL0xBU1RcIiwwMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIlBISUxJUFMgTVIvTEFTVFwiLDExKSc6e3RhZzonKDAwMjcsXCJQSElMSVBTIE1SL0xBU1RcIiwxMSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiUEhJTElQUyBNUi9MQVNUXCIsMTIpJzp7dGFnOicoMDAyNyxcIlBISUxJUFMgTVIvTEFTVFwiLDEyKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJQSElMSVBTIE1SL0xBU1RcIiwxMyknOnt0YWc6JygwMDI3LFwiUEhJTElQUyBNUi9MQVNUXCIsMTMpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIlBISUxJUFMgTVIvTEFTVFwiLDE0KSc6e3RhZzonKDAwMjcsXCJQSElMSVBTIE1SL0xBU1RcIiwxNCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiUEhJTElQUyBNUi9MQVNUXCIsMTUpJzp7dGFnOicoMDAyNyxcIlBISUxJUFMgTVIvTEFTVFwiLDE1KScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJQSElMSVBTIE1SL0xBU1RcIiwxNiknOnt0YWc6JygwMDI3LFwiUEhJTElQUyBNUi9MQVNUXCIsMTYpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiwxMCknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9MQVNUXCIsMTApJyx2cjpcIkRTXCIsbmFtZTpcIkZQTWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiUEhJTElQUyBNUi9MQVNUXCIsMjApJzp7dGFnOicoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDIwKScsdnI6XCJEU1wiLG5hbWU6XCJGUE1heFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDMwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiwzMCknLHZyOlwiRFNcIixuYW1lOlwiU2NhbGVkTWluaW11bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDQwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw0MCknLHZyOlwiRFNcIixuYW1lOlwiU2NhbGVkTWF4aW11bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDUwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw1MCknLHZyOlwiRFNcIixuYW1lOlwiV2luZG93TWluaW11bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDYwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw2MCknLHZyOlwiRFNcIixuYW1lOlwiV2luZG93TWF4aW11bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDYxKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw2MSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDcwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw3MCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDcxKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw3MSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDcyKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw3MiknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDgwKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw4MCknLHZyOlwiSVNcIixuYW1lOlwiVmlld0NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDgxKSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw4MSknLHZyOlwiSVNcIixuYW1lOlwiVmlld1NpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL0xBU1RcIiw4MiknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9MQVNUXCIsODIpJyx2cjpcIklTXCIsbmFtZTpcIlZpZXdab29tXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiUEhJTElQUyBNUi9MQVNUXCIsODMpJzp7dGFnOicoMDAyOSxcIlBISUxJUFMgTVIvTEFTVFwiLDgzKScsdnI6XCJJU1wiLG5hbWU6XCJWaWV3VHJhbnNmb3JtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDAxLFwiUEhJTElQUyBNUi9MQVNUXCIsMDApJzp7dGFnOicoNjAwMSxcIlBISUxJUFMgTVIvTEFTVFwiLDAwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwMCknLHZyOlwiRFNcIixuYW1lOlwiRmllbGRPZlZpZXdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA1KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA1KScsdnI6XCJEU1wiLG5hbWU6XCJDQ0FuZ3VsYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA2KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA2KScsdnI6XCJEU1wiLG5hbWU6XCJBUEFuZ3VsYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA3KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA3KScsdnI6XCJEU1wiLG5hbWU6XCJMUkFuZ3VsYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA4KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA4KScsdnI6XCJJU1wiLG5hbWU6XCJQYXRpZW50UG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA5KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDA5KScsdnI6XCJJU1wiLG5hbWU6XCJQYXRpZW50T3JpZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDBhKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDBhKScsdnI6XCJJU1wiLG5hbWU6XCJTbGljZU9yaWVudGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwYiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwYiknLHZyOlwiRFNcIixuYW1lOlwiTFJPZmZjZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDBjKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDBjKScsdnI6XCJEU1wiLG5hbWU6XCJDQ09mZmNlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMGQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMGQpJyx2cjpcIkRTXCIsbmFtZTpcIkFQT2ZmY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwZSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwZSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMGYpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMGYpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU2xpY2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAxMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAxMCknLHZyOlwiRFNcIixuYW1lOlwiU2xpY2VGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDExKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDExKScsdnI6XCJEU1wiLG5hbWU6XCJFY2hvVGltZXNcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMTUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMTUpJyx2cjpcIklTXCIsbmFtZTpcIkR5bmFtaWNTdHVkeVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMTgpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMTgpJyx2cjpcIkRTXCIsbmFtZTpcIkhlYXJ0YmVhdEludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAxOSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAxOSknLHZyOlwiRFNcIixuYW1lOlwiUmVwZXRpdGlvblRpbWVGRkVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDFhKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDFhKScsdnI6XCJEU1wiLG5hbWU6XCJGRkVGbGlwQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDFiKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDFiKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlNjYW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAyMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAyMSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAyMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTAyMiknLHZyOlwiRFNcIixuYW1lOlwiRHluYW1pY1NjYW5UaW1lQmVnaW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDI0KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDI0KScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA2NCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA2NCknLHZyOlwiRFNcIixuYW1lOlwiUmVwZXRpdGlvblRpbWVTRVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNjUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNjUpJyx2cjpcIkRTXCIsbmFtZTpcIlJlcGV0aXRpb25UaW1lSVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDY5KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDY5KScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlBoYXNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmEpJyx2cjpcIklTXCIsbmFtZTpcIkNhcmRpYWNGcmVxdWVuY3lcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDZiKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDZiKScsdnI6XCJEU1wiLG5hbWU6XCJJbnZlcnNpb25EZWxheVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmMpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmMpJyx2cjpcIkRTXCIsbmFtZTpcIkdhdGVEZWxheVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmQpJyx2cjpcIkRTXCIsbmFtZTpcIkdhdGVXaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNmUpJyx2cjpcIkRTXCIsbmFtZTpcIlRyaWdnZXJEZWxheVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDgwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMDgwKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkNoZW1pY2FsU2hpZnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA4MSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA4MSknLHZyOlwiRFNcIixuYW1lOlwiQ2hlbWljYWxTaGlmdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwODQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwODQpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUm93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwODUpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwODUpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU2FtcGxlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwOTQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwOTQpJyx2cjpcIkxPXCIsbmFtZTpcIk1hZ25ldGl6YXRpb25UcmFuc2ZlckNvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA5NSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA5NSknLHZyOlwiTE9cIixuYW1lOlwiU3BlY3RyYWxQcmVzYXR1cmF0aW9uV2l0aEludmVyc2lvblJlY292ZXJ5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA5NiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTA5NiknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwOTcpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwOTcpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGEwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGEwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBhMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBhMSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwYTMpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwYTMpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGE0KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGE0KScsdnI6XCJDU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBjOCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBjOCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwYzkpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwYzkpJyx2cjpcIklTXCIsbmFtZTpcIkZvbGRvdmVyRGlyZWN0aW9uVHJhbnN2ZXJzZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwY2EpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwY2EpJyx2cjpcIklTXCIsbmFtZTpcIkZvbGRvdmVyRGlyZWN0aW9uU2FnaXR0YWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNiKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNiKScsdnI6XCJJU1wiLG5hbWU6XCJGb2xkb3ZlckRpcmVjdGlvbkNvcm9uYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNjKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNjKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBjZCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBjZCknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwY2UpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwY2UpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNmKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGNmKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkVjaG9lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDApJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDApJyx2cjpcIklTXCIsbmFtZTpcIlNjYW5SZXNvbHV0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkMiknLHZyOlwiTE9cIixuYW1lOlwiV2F0ZXJGYXRTaGlmdFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDQpJyx2cjpcIklTXCIsbmFtZTpcIkFydGlmYWN0UmVkdWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkNSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkNSknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDYpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDYpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGQ3KSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGQ3KScsdnI6XCJEU1wiLG5hbWU6XCJTY2FuUGVyY2VudGFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDgpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZDgpJyx2cjpcIklTXCIsbmFtZTpcIkhhbGZzY2FuXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkOSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkOSknLHZyOlwiSVNcIixuYW1lOlwiRVBJRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkYSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBkYSknLHZyOlwiSVNcIixuYW1lOlwiVHVyYm9GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGRiKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMGRiKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBlMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTBlMCknLHZyOlwiSVNcIixuYW1lOlwiUGVyY2VudGFnZU9mU2NhbkNvbXBsZXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZTEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwZTEpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMTAwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMTAwKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlN0YWNrc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMDEpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMDEpJyx2cjpcIklTXCIsbmFtZTpcIlN0YWNrVHlwZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTEwMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTEwMiknLHZyOlwiSVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTEwYiknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTEwYiknLHZyOlwiRFNcIixuYW1lOlwiTFJPZmZjZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMTBjKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMTBjKScsdnI6XCJEU1wiLG5hbWU6XCJDQ09mZmNlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMGQpJzp7dGFnOicoMDAxOSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMGQpJyx2cjpcIkRTXCIsbmFtZTpcIkFQT2ZmY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTE0NSknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTE0NSknLHZyOlwiSVNcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25SZXNvbHV0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTFmYyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTFmYyknLHZyOlwiSVNcIixuYW1lOlwiUmVzb25hbmNlRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTJjMCknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTJjMCknLHZyOlwiRFNcIixuYW1lOlwiVHJpZ2dlckRlbGF5VGltZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMmUwKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMmUwKScsdnI6XCJJU1wiLG5hbWU6XCJQcmVwdWxzZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMmUxKSc6e3RhZzonKDAwMTksXCJQSElMSVBTIE1SL1BBUlRcIiwxMmUxKScsdnI6XCJEU1wiLG5hbWU6XCJQcmVwdWxzZURlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTJlMyknOnt0YWc6JygwMDE5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTJlMyknLHZyOlwiRFNcIixuYW1lOlwiUGhhc2VDb250cmFzdFZlbG9jaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwMCknOnt0YWc6JygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTAwMCknLHZyOlwiSVNcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDEwKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDEwKScsdnI6XCJJU1wiLG5hbWU6XCJJbWFnZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDIwKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDIwKScsdnI6XCJJU1wiLG5hbWU6XCJTbGljZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMzApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwMzApJyx2cjpcIklTXCIsbmFtZTpcIkVjaG9OdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDMxKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDMxKScsdnI6XCJEU1wiLG5hbWU6XCJQYXRpZW50UmVmZXJlbmNlSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDM1KSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDM1KScsdnI6XCJJU1wiLG5hbWU6XCJDaGVtaWNhbFNoaWZ0TnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTA0MCknOnt0YWc6JygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTA0MCknLHZyOlwiSVNcIixuYW1lOlwiUGhhc2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDUwKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDUwKScsdnI6XCJJU1wiLG5hbWU6XCJEeW5hbWljU2Nhbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNjApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDEwNjApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUm93c0luT2JqZWN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTA2MSknOnt0YWc6JygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTA2MSknLHZyOlwiSVNcIixuYW1lOlwiUm93TnVtYmVyXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDYyKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMDYyKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMTAwKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTIE1SL1BBUlRcIiwxMTAwKScsdnI6XCJEQVwiLG5hbWU6XCJTY2FuRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMTApJzp7dGFnOicoMDAyMSxcIlBISUxJUFMgTVIvUEFSVFwiLDExMTApJyx2cjpcIlRNXCIsbmFtZTpcIlNjYW5UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTIyMSknOnt0YWc6JygwMDIxLFwiUEhJTElQUyBNUi9QQVJUXCIsMTIyMSknLHZyOlwiSVNcIixuYW1lOlwiU2xpY2VHYXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwwMCknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMDApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwwNCknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMDQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwxMCknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwxMSknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMTEpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwyMCknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwzMSknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMzEpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIiwzMiknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsMzIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIixjMyknOnt0YWc6JygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsYzMpJyx2cjpcIklTXCIsbmFtZTpcIlNjYW5SZXNvbHV0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiUEhJTElQUyBNUi9QQVJUXCIsYzQpJzp7dGFnOicoMDAyOSxcIlBISUxJUFMgTVIvUEFSVFwiLGM0KScsdnI6XCJJU1wiLG5hbWU6XCJGaWVsZE9mVmlld1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlBISUxJUFMgTVIvUEFSVFwiLGQ1KSc6e3RhZzonKDAwMjksXCJQSElMSVBTIE1SL1BBUlRcIixkNSknLHZyOlwiTFRcIixuYW1lOlwiU2xpY2VUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTLU1SLTFcIiwxMSknOnt0YWc6JygwMDE5LFwiUEhJTElQUy1NUi0xXCIsMTEpJyx2cjpcIklTXCIsbmFtZTpcIkNoZW1pY2FsU2hpZnROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJQSElMSVBTLU1SLTFcIiwxMiknOnt0YWc6JygwMDE5LFwiUEhJTElQUy1NUi0xXCIsMTIpJyx2cjpcIklTXCIsbmFtZTpcIlBoYXNlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiUEhJTElQUy1NUi0xXCIsMDEpJzp7dGFnOicoMDAyMSxcIlBISUxJUFMtTVItMVwiLDAxKScsdnI6XCJJU1wiLG5hbWU6XCJSZWNvbnN0cnVjdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlBISUxJUFMtTVItMVwiLDAyKSc6e3RhZzonKDAwMjEsXCJQSElMSVBTLU1SLTFcIiwwMiknLHZyOlwiSVNcIixuYW1lOlwiU2xpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDcwMDEsXCJQaWNrZXIgTk0gUHJpdmF0ZSBHcm91cFwiLDAxKSc6e3RhZzonKDcwMDEsXCJQaWNrZXIgTk0gUHJpdmF0ZSBHcm91cFwiLDAxKScsdnI6XCJVSVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3MDAxLFwiUGlja2VyIE5NIFByaXZhdGUgR3JvdXBcIiwwMiknOnt0YWc6Jyg3MDAxLFwiUGlja2VyIE5NIFByaXZhdGUgR3JvdXBcIiwwMiknLHZyOlwiT0JcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIlBhcmFtZXRlckZpbGVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIEFDUVVcIiwxMSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIEFDUVVcIiwxMSknLHZyOlwiTE9cIixuYW1lOlwiU2VxdWVuY2VGaWxlTmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTIpJyx2cjpcIkxUXCIsbmFtZTpcIlNlcXVlbmNlRmlsZU93bmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIEFDUVVcIiwxMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIEFDUVVcIiwxMyknLHZyOlwiTFRcIixuYW1lOlwiU2VxdWVuY2VEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBBQ1FVXCIsMTQpJyx2cjpcIkxUXCIsbmFtZTpcIkVQSUZpbGVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDAwKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMDApJyx2cjpcIkRTXCIsbmFtZTpcIk51bWJlck9mTWVhc3VyZW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEwKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIlN0b3JhZ2VNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEyKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTIpJyx2cjpcIlVMXCIsbmFtZTpcIkV2YWx1YXRpb25NYXNrSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjYpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwyNiknLHZyOlwiREFcIixuYW1lOlwiTGFzdE1vdmVEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDI3KSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjcpJyx2cjpcIlRNXCIsbmFtZTpcIkxhc3RNb3ZlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwwYSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDBhKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEwKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTApJyx2cjpcIkRBXCIsbmFtZTpcIlJlZ2lzdHJhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTEpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMSknLHZyOlwiVE1cIixuYW1lOlwiUmVnaXN0cmF0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwyMiknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIyKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIzKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjMpJyx2cjpcIkRTXCIsbmFtZTpcIlVzZWRQYXRpZW50V2VpZ2h0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDQwKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNDApJyx2cjpcIklTXCIsbmFtZTpcIk9yZ2FuQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwwMCknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDAwKScsdnI6XCJMVFwiLG5hbWU6XCJNb2RpZnlpbmdQaHlzaWNpYW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTApJzp7dGFnOicoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMCknLHZyOlwiREFcIixuYW1lOlwiTW9kaWZpY2F0aW9uRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMiknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEyKScsdnI6XCJUTVwiLG5hbWU6XCJNb2RpZmljYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIwKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnROYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIyKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjIpJyx2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRJZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzMCknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDMwKScsdnI6XCJEQVwiLG5hbWU6XCJQYXRpZW50QmlydGhkYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDMxKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMzEpJyx2cjpcIkRTXCIsbmFtZTpcIlBhdGllbnRXZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMzIpJzp7dGFnOicoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzMiknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudHNNYWlkZW5OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDMzKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMzMpJyx2cjpcIkxUXCIsbmFtZTpcIlJlZmVycmluZ1BoeXNpY2lhblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzNCknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDM0KScsdnI6XCJMVFwiLG5hbWU6XCJBZG1pdHRpbmdEaWFnbm9zaXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMzUpJzp7dGFnOicoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzNSknLHZyOlwiTE9cIixuYW1lOlwiUGF0aWVudFNleFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw0MCknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDQwKScsdnI6XCJMT1wiLG5hbWU6XCJQcm9jZWR1cmVEZXNjcmlwdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw0MiknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDQyKScsdnI6XCJMT1wiLG5hbWU6XCJSZXN0RGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDQ0KSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNDQpJyx2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw0NiknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDQ2KScsdnI6XCJMVFwiLG5hbWU6XCJWaWV3RGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUwKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTEpJzp7dGFnOicoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1MSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1MiknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUyKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUzKSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTMpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTQpJzp7dGFnOicoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1NCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMyxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1NSknOnt0YWc6JygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDU1KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDEzLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDU2KSc6e3RhZzonKDAwMTMsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTYpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMCknLHZyOlwiRFNcIixuYW1lOlwiTmV0RnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjApJyx2cjpcIkxUXCIsbmFtZTpcIk1lYXN1cmVtZW50TW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDMwKScsdnI6XCJMVFwiLG5hbWU6XCJDYWxjdWxhdGlvbk1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1MCknLHZyOlwiSVNcIixuYW1lOlwiTm9pc2VMZXZlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw2MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDYwKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkRhdGFCeXRlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwyMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIwKScsdnI6XCJEU1wiLG5hbWU6XCJGb1ZcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwyMiknLHZyOlwiRFNcIixuYW1lOlwiSW1hZ2VNYWduaWZpY2F0aW9uRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDI0KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjQpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlU2Nyb2xsT2Zmc2V0XCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDI2KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjYpJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlUGl4ZWxPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMzApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzMCknLHZyOlwiTFRcIixuYW1lOlwiVmlld0RpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwzMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDMyKScsdnI6XCJDU1wiLG5hbWU6XCJQYXRpZW50UmVzdERpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw2MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDYwKScsdnI6XCJEU1wiLG5hbWU6XCJJbWFnZVBvc2l0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDYxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNjEpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlTm9ybWFsXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDYzKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNjMpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNjUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw2NSknLHZyOlwiVVNcIixuYW1lOlwiSW1hZ2VQb3NpdGlvbmluZ0hpc3RvcnlNYXNrXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDZhKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNmEpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlUm93XCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDZiKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNmIpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlQ29sdW1uXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDcwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNzApJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRPcmllbnRhdGlvblNldDFcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNzEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw3MSknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudE9yaWVudGF0aW9uU2V0MlwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw4MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDgwKScsdnI6XCJMVFwiLG5hbWU6XCJTdHVkeU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsODIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw4MiknLHZyOlwiTFRcIixuYW1lOlwiU3R1ZHlUeXBlXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIldpbmRvd1N0eWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDExKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMTMpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMyknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwyMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIwKScsdnI6XCJMVFwiLG5hbWU6XCJQaXhlbFF1YWxpdHlDb2RlXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDIyKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMjIpJyx2cjpcIklTXCIsbmFtZTpcIlBpeGVsUXVhbGl0eVZhbHVlXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIkFyY2hpdmVDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUxKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNTEpJyx2cjpcIkxUXCIsbmFtZTpcIkV4cG9zdXJlQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1MiknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUyKScsdnI6XCJMVFwiLG5hbWU6XCJTb3J0Q29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiw1MyknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDUzKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDYwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsNjApJyx2cjpcIkxUXCIsbmFtZTpcIlNwbGFzaFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA1MSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMCknOnt0YWc6JygwMDUxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJJbWFnZVRleHRcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwwMCknOnt0YWc6Jyg2MDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDAwKScsdnI6XCJMVFwiLG5hbWU6XCJJbWFnZUdyYXBoaWNzRm9ybWF0Q29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNjAyMSxcIlNJRU1FTlMgQ00gVkEwICBDTVNcIiwxMCknOnt0YWc6Jyg2MDIxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJJbWFnZUdyYXBoaWNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmUxLFwiU0lFTUVOUyBDTSBWQTAgIENNU1wiLDAwKSc6e3RhZzonKDdmZTEsXCJTSUVNRU5TIENNIFZBMCAgQ01TXCIsMDApJyx2cjpcIk9CXCIsbmFtZTpcIkJpbmFyeURhdGFcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwxMCknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIExBQlwiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJHZW5lcmF0b3JJZGVudGlmaWNhdGlvbkxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIExBQlwiLDExKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgTEFCXCIsMTEpJyx2cjpcIkxUXCIsbmFtZTpcIkdhbnRyeUlkZW50aWZpY2F0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgTEFCXCIsMTIpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwxMiknLHZyOlwiTFRcIixuYW1lOlwiWC1SYXlUdWJlSWRlbnRpZmljYXRpb25MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwxMyknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIExBQlwiLDEzKScsdnI6XCJMVFwiLG5hbWU6XCJEZXRlY3RvcklkZW50aWZpY2F0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgTEFCXCIsMTQpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwxNCknLHZyOlwiTFRcIixuYW1lOlwiREFTSWRlbnRpZmljYXRpb25MYWJlbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwxNSknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIExBQlwiLDE1KScsdnI6XCJMVFwiLG5hbWU6XCJTTUlJZGVudGlmaWNhdGlvbkxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDTSBWQTAgIExBQlwiLDE2KSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgTEFCXCIsMTYpJyx2cjpcIkxUXCIsbmFtZTpcIkNQVUlkZW50aWZpY2F0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENNIFZBMCAgTEFCXCIsMjApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ00gVkEwICBMQUJcIiwyMCknLHZyOlwiTFRcIixuYW1lOlwiSGVhZGVyVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ1NBIEhFQURFUlwiLDA4KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENTQSBIRUFERVJcIiwwOCknLHZyOlwiQ1NcIixuYW1lOlwiQ1NBSW1hZ2VIZWFkZXJUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDU0EgSEVBREVSXCIsMDkpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgQ1NBIEhFQURFUlwiLDA5KScsdnI6XCJMT1wiLG5hbWU6XCJDU0FJbWFnZUhlYWRlclZlcnNpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIENTQSBIRUFERVJcIiwxMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBDU0EgSEVBREVSXCIsMTApJyx2cjpcIk9CXCIsbmFtZTpcIkNTQUltYWdlSGVhZGVySW5mb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ1NBIEhFQURFUlwiLDE4KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENTQSBIRUFERVJcIiwxOCknLHZyOlwiQ1NcIixuYW1lOlwiQ1NBU2VyaWVzSGVhZGVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ1NBIEhFQURFUlwiLDE5KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENTQSBIRUFERVJcIiwxOSknLHZyOlwiTE9cIixuYW1lOlwiQ1NBU2VyaWVzSGVhZGVyVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ1NBIEhFQURFUlwiLDIwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENTQSBIRUFERVJcIiwyMCknLHZyOlwiT0JcIixuYW1lOlwiQ1NBU2VyaWVzSGVhZGVySW5mb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgQ1NBIE5PTi1JTUFHRVwiLDA4KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIENTQSBOT04tSU1BR0VcIiwwOCknLHZyOlwiQ1NcIixuYW1lOlwiQ1NBRGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIENTQSBOT04tSU1BR0VcIiwwOSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBDU0EgTk9OLUlNQUdFXCIsMDkpJyx2cjpcIkxPXCIsbmFtZTpcIkNTQURhdGFWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBDU0EgTk9OLUlNQUdFXCIsMTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgQ1NBIE5PTi1JTUFHRVwiLDEwKScsdnI6XCJPQlwiLG5hbWU6XCJDU0FEYXRhSW5mb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN0ZFMSxcIlNJRU1FTlMgQ1NBIE5PTi1JTUFHRVwiLDEwKSc6e3RhZzonKDdGRTEsXCJTSUVNRU5TIENTQSBOT04tSU1BR0VcIiwxMCknLHZyOlwiT0JcIixuYW1lOlwiQ1NBRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMTApJyx2cjpcIkRTXCIsbmFtZTpcIkRpc3RhbmNlU291cmNlVG9Tb3VyY2VTaWRlQ29sbGltYXRvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMTEpJyx2cjpcIkRTXCIsbmFtZTpcIkRpc3RhbmNlU291cmNlVG9EZXRlY3RvclNpZGVDb2xsaW1hdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiwyMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiwyMCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZQb3NzaWJsZUNoYW5uZWxzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiwyMSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiwyMSknLHZyOlwiSVNcIixuYW1lOlwiTWVhbkNoYW5uZWxOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDIyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDIyKScsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvclNwYWNpbmdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDIzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDIzKScsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvckNlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMjQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsMjQpJyx2cjpcIkRTXCIsbmFtZTpcIlJlYWRpbmdJbnRlZ3JhdGlvblRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDUwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDUwKScsdnI6XCJEU1wiLG5hbWU6XCJEZXRlY3RvckFsaWdubWVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNTIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDU0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDU0KScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2MCknLHZyOlwiRFNcIixuYW1lOlwiRm9jdXNBbGlnbm1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDY1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDY1KScsdnI6XCJVTFwiLG5hbWU6XCJGb2NhbFNwb3REZWZsZWN0aW9uQW1wbGl0dWRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2NiknLHZyOlwiVUxcIixuYW1lOlwiRm9jYWxTcG90RGVmbGVjdGlvblBoYXNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2NyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw2NyknLHZyOlwiVUxcIixuYW1lOlwiRm9jYWxTcG90RGVmbGVjdGlvbk9mZnNldFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNzApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNzApJyx2cjpcIkRTXCIsbmFtZTpcIldhdGVyU2NhbGluZ0ZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNzEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsNzEpJyx2cjpcIkRTXCIsbmFtZTpcIkludGVycG9sYXRpb25GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDgwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDgwKScsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50UmVnaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw4MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw4MiknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudFBoYXNlT2ZMaWZlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5MCknLHZyOlwiRFNcIixuYW1lOlwiT3N0ZW9PZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDkyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDkyKScsdnI6XCJEU1wiLG5hbWU6XCJPc3Rlb1JlZ3Jlc3Npb25MaW5lU2xvcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDkzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLDkzKScsdnI6XCJEU1wiLG5hbWU6XCJPc3Rlb1JlZ3Jlc3Npb25MaW5lSW50ZXJjZXB0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5NCknLHZyOlwiRFNcIixuYW1lOlwiT3N0ZW9TdGFuZGFyZGl6YXRpb25Db2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIiw5NiknLHZyOlwiSVNcIixuYW1lOlwiT3N0ZW9QaGFudG9tTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBMyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBNCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQTUpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE2KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE3KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE3KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE5KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEE5KScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBQSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBQSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQUIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQUIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEFDKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEFDKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBRCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixBRCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQUUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQUUpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEFGKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEFGKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixCMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixCMCknLHZyOlwiRFNcIixuYW1lOlwiRmVlZFBlclJvdGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixCRCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixCRCknLHZyOlwiSVNcIixuYW1lOlwiUHVsbW9UcmlnZ2VyTGV2ZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEJFKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEJFKScsdnI6XCJEU1wiLG5hbWU6XCJFeHBpcmF0b3JpY1Jlc2VydmVWb2x1bWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEJGKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgQ09BRFwiLEJGKScsdnI6XCJEU1wiLG5hbWU6XCJWaXRhbENhcGFjaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMCknLHZyOlwiRFNcIixuYW1lOlwiUHVsbW9XYXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQzEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBDT0FEXCIsQzEpJyx2cjpcIkRTXCIsbmFtZTpcIlB1bG1vQWlyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMiknLHZyOlwiREFcIixuYW1lOlwiUHVsbW9EYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIENPQURcIixDMyknLHZyOlwiVE1cIixuYW1lOlwiUHVsbW9UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDEwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMTApJyx2cjpcIkRTXCIsbmFtZTpcIlNvdXJjZVNpZGVDb2xsaW1hdG9yQXBlcnR1cmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwxMSknLHZyOlwiRFNcIixuYW1lOlwiRGV0ZWN0b3JTaWRlQ29sbGltYXRvckFwZXJ0dXJlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDIwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIkV4cG9zdXJlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwyMSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDIxKScsdnI6XCJEU1wiLG5hbWU6XCJFeHBvc3VyZUN1cnJlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMjUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwyNSknLHZyOlwiRFNcIixuYW1lOlwiS1ZQR2VuZXJhdG9yUG93ZXJDdXJyZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDI2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMjYpJyx2cjpcIkRTXCIsbmFtZTpcIkdlbmVyYXRvclZvbHRhZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0MCknLHZyOlwiVUxcIixuYW1lOlwiTWFzdGVyQ29udHJvbE1hc2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0MiknLHZyOlwiVVNcIixuYW1lOlwiUHJvY2Vzc2luZ01hc2tcIix2bTpcIjVcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0NCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDQ1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw2MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDYyKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlZpcnR1ZWxsQ2hhbm5lbHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNzApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3MCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZSZWFkaW5nc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3MSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDcxKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNzQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3NCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZQcm9qZWN0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3NSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDc1KScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkJ5dGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDgwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsODApJyx2cjpcIkxUXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uQWxnb3JpdGhtU2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDgxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsODEpJyx2cjpcIkxUXCIsbmFtZTpcIlJlY29uc3RydWN0aW9uQWxnb3JpdGhtSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsODIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw4MiknLHZyOlwiTFRcIixuYW1lOlwiUmVnZW5lcmF0aW9uU29mdHdhcmVWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDg4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsODgpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMTApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwxMCknLHZyOlwiSVNcIixuYW1lOlwiUm90YXRpb25BbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwxMSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDExKScsdnI6XCJJU1wiLG5hbWU6XCJTdGFydEFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDIwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMjApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwzMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDMwKScsdnI6XCJJU1wiLG5hbWU6XCJUb3BvZ3JhbVR1YmVQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwzMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDMyKScsdnI6XCJEU1wiLG5hbWU6XCJMZW5ndGhPZlRvcG9ncmFtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDM0KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsMzQpJyx2cjpcIkRTXCIsbmFtZTpcIlRvcG9ncmFtQ29ycmVjdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiwzNiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDM2KScsdnI6XCJEU1wiLG5hbWU6XCJNYXhpbXVtVGFibGVQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDQwKScsdnI6XCJJU1wiLG5hbWU6XCJUYWJsZU1vdmVEaXJlY3Rpb25Db2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDQ1KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDUpJyx2cjpcIklTXCIsbmFtZTpcIlZPSVN0YXJ0Um93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDQ2KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDYpJyx2cjpcIklTXCIsbmFtZTpcIlZPSVN0b3BSb3dcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDcpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0NyknLHZyOlwiSVNcIixuYW1lOlwiVk9JU3RhcnRDb2x1bW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNDgpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0OCknLHZyOlwiSVNcIixuYW1lOlwiVk9JU3RvcENvbHVtblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw0OSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDQ5KScsdnI6XCJJU1wiLG5hbWU6XCJWT0lTdGFydFNsaWNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDRhKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNGEpJyx2cjpcIklTXCIsbmFtZTpcIlZPSVN0b3BTbGljZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw1MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDUwKScsdnI6XCJJU1wiLG5hbWU6XCJWZWN0b3JTdGFydFJvd1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw1MSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDUxKScsdnI6XCJJU1wiLG5hbWU6XCJWZWN0b3JSb3dTdGVwXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDUyKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNTIpJyx2cjpcIklTXCIsbmFtZTpcIlZlY3RvclN0YXJ0Q29sdW1uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDUzKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNTMpJyx2cjpcIklTXCIsbmFtZTpcIlZlY3RvckNvbHVtblN0ZXBcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNjApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw2MCknLHZyOlwiSVNcIixuYW1lOlwiUmFuZ2VUeXBlQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw2MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDYyKScsdnI6XCJJU1wiLG5hbWU6XCJSZWZlcmVuY2VUeXBlQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDcwKScsdnI6XCJEU1wiLG5hbWU6XCJPYmplY3RPcmllbnRhdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDcyKScsdnI6XCJEU1wiLG5hbWU6XCJMaWdodE9yaWVudGF0aW9uXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDc1KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsNzUpJyx2cjpcIkRTXCIsbmFtZTpcIkxpZ2h0QnJpZ2h0bmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3NiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDc2KScsdnI6XCJEU1wiLG5hbWU6XCJMaWdodENvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDdhKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsN2EpJyx2cjpcIklTXCIsbmFtZTpcIk92ZXJsYXlUaHJlc2hvbGRcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsN2IpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3YiknLHZyOlwiSVNcIixuYW1lOlwiU3VyZmFjZVRocmVzaG9sZFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIiw3YyknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLDdjKScsdnI6XCJJU1wiLG5hbWU6XCJHcmV5U2NhbGVUaHJlc2hvbGRcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsYTApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIixhMCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBHRU5cIixhMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLGEyKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIEdFTlwiLGE3KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgR0VOXCIsYTcpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsMTApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiwxMCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiwzMCknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDMwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDMxKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsMzEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsMzIpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiwzMiknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiwzNCknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDM0KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDQwKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsNDApJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsNDIpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiw0MiknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBJREVcIiw1MCknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDUwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIElERVwiLDUxKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgSURFXCIsNTEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIENUIFZBMCAgT1JJXCIsMjApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBPUklcIiwyMCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgQ1QgVkEwICBPUklcIiwzMCknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBDVCBWQTAgIE9SSVwiLDMwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg2MDIxLFwiU0lFTUVOUyBDVCBWQTAgIE9TVFwiLDAwKSc6e3RhZzonKDYwMjEsXCJTSUVNRU5TIENUIFZBMCAgT1NUXCIsMDApJyx2cjpcIkxUXCIsbmFtZTpcIk9zdGVvQ29udG91ckNvbW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDYwMjEsXCJTSUVNRU5TIENUIFZBMCAgT1NUXCIsMTApJzp7dGFnOicoNjAyMSxcIlNJRU1FTlMgQ1QgVkEwICBPU1RcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiT3N0ZW9Db250b3VyQnVmZmVyXCIsdm06XCIyNTZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsMTApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBSQVdcIiwxMCknLHZyOlwiVUxcIixuYW1lOlwiQ3JlYXRpb25NYXNrXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDIwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsMjApJyx2cjpcIlVMXCIsbmFtZTpcIkV2YWx1YXRpb25NYXNrXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDMwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsMzApJyx2cjpcIlVTXCIsbmFtZTpcIkV4dGVuZGVkUHJvY2Vzc2luZ01hc2tcIix2bTpcIjdcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsNDApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBSQVdcIiw0MCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDQxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsNDEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBSQVdcIiw0MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDQyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsNDMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBSQVdcIiw0MyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDQ0KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIENUIFZBMCAgUkFXXCIsNDQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgQ1QgVkEwICBSQVdcIiw1MCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBDVCBWQTAgIFJBV1wiLDUwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBESUNPTVwiLDEwKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIERJQ09NXCIsMTApJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIERJQ09NXCIsMTIpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgRElDT01cIiwxMiknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIk1lYXN1cmVtZW50TW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTEpJyx2cjpcIkxUXCIsbmFtZTpcIkltYWdlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMTUpJyx2cjpcIkxUXCIsbmFtZTpcIlNvZnR3YXJlVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjApJyx2cjpcIkxUXCIsbmFtZTpcIk1QTUNvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDIxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDIxKScsdnI6XCJMVFwiLG5hbWU6XCJMYXRpdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjIpJyx2cjpcIkxUXCIsbmFtZTpcIlNlbnNpdGl2aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyMyknLHZyOlwiTFRcIixuYW1lOlwiRURSXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyNCknLHZyOlwiTFRcIixuYW1lOlwiTEZpeFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsMjUpJyx2cjpcIkxUXCIsbmFtZTpcIlNGaXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDI2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDI2KScsdnI6XCJMVFwiLG5hbWU6XCJQcmVzZXRNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyNyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyNyknLHZyOlwiTFRcIixuYW1lOlwiUmVnaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwyOCknLHZyOlwiTFRcIixuYW1lOlwiU3VicmVnaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwzMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwzMCknLHZyOlwiTFRcIixuYW1lOlwiT3JpZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDMxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDMxKScsdnI6XCJMVFwiLG5hbWU6XCJNYXJrT25GaWxtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwzMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiwzMiknLHZyOlwiTFRcIixuYW1lOlwiUm90YXRpb25PbkRSQ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNDApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNDApJyx2cjpcIkxUXCIsbmFtZTpcIlJlYWRlclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDQxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDQxKScsdnI6XCJMVFwiLG5hbWU6XCJTdWJNb2RhbGl0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNDIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNDIpJyx2cjpcIkxUXCIsbmFtZTpcIlJlYWRlclNlcmlhbE51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIkNhc3NldHRlU2NhbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDUxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDUxKScsdnI6XCJMVFwiLG5hbWU6XCJDYXNzZXR0ZU1hdHJpeFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNTIpJyx2cjpcIkxUXCIsbmFtZTpcIkNhc3NldHRlU3VibWF0cml4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw1MyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw1MyknLHZyOlwiTFRcIixuYW1lOlwiQmFyY29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjApJyx2cjpcIkxUXCIsbmFtZTpcIkNvbnRyYXN0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjEpJyx2cjpcIkxUXCIsbmFtZTpcIlJvdGF0aW9uQW1vdW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2MiknLHZyOlwiTFRcIixuYW1lOlwiUm90YXRpb25DZW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDYzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDYzKScsdnI6XCJMVFwiLG5hbWU6XCJEZW5zaXR5U2hpZnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDY0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDY0KScsdnI6XCJVU1wiLG5hbWU6XCJGcmVxdWVuY3lSYW5rXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2NSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2NSknLHZyOlwiTFRcIixuYW1lOlwiRnJlcXVlbmN5RW5oYW5jZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDY2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDY2KScsdnI6XCJMVFwiLG5hbWU6XCJGcmVxdWVuY3lUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2NyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2NyknLHZyOlwiTFRcIixuYW1lOlwiS2VybmVsTGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw2OCknLHZyOlwiVUxcIixuYW1lOlwiS2VybmVsTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjkpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNjkpJyx2cjpcIlVMXCIsbmFtZTpcIkNvbnZvbHV0aW9uTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzApJyx2cjpcIkxUXCIsbmFtZTpcIlBMQVNvdXJjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzEpJyx2cjpcIkxUXCIsbmFtZTpcIlBMQURlc3RpbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw3NSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIiw3NSknLHZyOlwiTFRcIixuYW1lOlwiVUlET3JpZ2luYWxJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsNzYpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDgwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDgwKScsdnI6XCJMVFwiLG5hbWU6XCJSZWFkZXJIZWFkZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDkwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIERMUi4wMVwiLDkwKScsdnI6XCJMVFwiLG5hbWU6XCJQTEFPZlNlY29uZGFyeURlc3RpbmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIixhMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBETFIuMDFcIixhMCknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsYTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgRExSLjAxXCIsYTEpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDEwKSc6e3RhZzonKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDEwKScsdnI6XCJVU1wiLG5hbWU6XCJOdW1iZXJPZkhhcmRjb3BpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDIwKSc6e3RhZzonKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDIwKScsdnI6XCJMVFwiLG5hbWU6XCJGaWxtRm9ybWF0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDQxLFwiU0lFTUVOUyBETFIuMDFcIiwzMCknOnt0YWc6JygwMDQxLFwiU0lFTUVOUyBETFIuMDFcIiwzMCknLHZyOlwiTFRcIixuYW1lOlwiRmlsbVNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDMxKSc6e3RhZzonKDAwNDEsXCJTSUVNRU5TIERMUi4wMVwiLDMxKScsdnI6XCJMVFwiLG5hbWU6XCJGdWxsRmlsbUZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMDgpJzp7dGFnOicoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMDgpJyx2cjpcIlVTXCIsbmFtZTpcIklTSUNvbW1hbmRGaWVsZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMTEpJzp7dGFnOicoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMTEpJyx2cjpcIlVTXCIsbmFtZTpcIkF0dGFjaElEQXBwbGljYXRpb25Db2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDAzLFwiU0lFTUVOUyBJU0lcIiwxMiknOnt0YWc6JygwMDAzLFwiU0lFTUVOUyBJU0lcIiwxMiknLHZyOlwiVUxcIixuYW1lOlwiQXR0YWNoSURNZXNzYWdlQ291bnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDMsXCJTSUVNRU5TIElTSVwiLDEzKSc6e3RhZzonKDAwMDMsXCJTSUVNRU5TIElTSVwiLDEzKScsdnI6XCJEQVwiLG5hbWU6XCJBdHRhY2hJRERhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDMsXCJTSUVNRU5TIElTSVwiLDE0KSc6e3RhZzonKDAwMDMsXCJTSUVNRU5TIElTSVwiLDE0KScsdnI6XCJUTVwiLG5hbWU6XCJBdHRhY2hJRFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDMsXCJTSUVNRU5TIElTSVwiLDIwKSc6e3RhZzonKDAwMDMsXCJTSUVNRU5TIElTSVwiLDIwKScsdnI6XCJVU1wiLG5hbWU6XCJNZXNzYWdlVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMzApJzp7dGFnOicoMDAwMyxcIlNJRU1FTlMgSVNJXCIsMzApJyx2cjpcIkRBXCIsbmFtZTpcIk1heFdhaXRpbmdEYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDAzLFwiU0lFTUVOUyBJU0lcIiwzMSknOnt0YWc6JygwMDAzLFwiU0lFTUVOUyBJU0lcIiwzMSknLHZyOlwiVE1cIixuYW1lOlwiTWF4V2FpdGluZ1RpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIElTSVwiLDAxKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIElTSVwiLDAxKScsdnI6XCJVTlwiLG5hbWU6XCJSSVNQYXRpZW50SW5mb0lNR0VGXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBJU0lcIiwwMyknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBJU0lcIiwwMyknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudFVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMDQpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMDQpJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMGEpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMGEpJyx2cjpcIkxUXCIsbmFtZTpcIkNhc2VJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMjIpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMjIpJyx2cjpcIkxUXCIsbmFtZTpcIlJlcXVlc3RJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMjMpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsMjMpJyx2cjpcIkxUXCIsbmFtZTpcIkV4YW1pbmF0aW9uVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBJU0lcIixhMSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBJU0lcIixhMSknLHZyOlwiREFcIixuYW1lOlwiUGF0aWVudFJlZ2lzdHJhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIElTSVwiLGEyKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIElTSVwiLGEyKScsdnI6XCJUTVwiLG5hbWU6XCJQYXRpZW50UmVnaXN0cmF0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsYjApJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsYjApJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRMYXN0TmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsYjIpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsYjIpJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRGaXJzdE5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIElTSVwiLGI0KSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIElTSVwiLGI0KScsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50SG9zcGl0YWxTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIElTSVwiLGJjKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIElTSVwiLGJjKScsdnI6XCJUTVwiLG5hbWU6XCJDdXJyZW50TG9jYXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBJU0lcIixjMCknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBJU0lcIixjMCknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudEluc3VyYW5jZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsZDApJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsZDApJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRCaWxsaW5nVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgSVNJXCIsZDIpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgSVNJXCIsZDIpJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRCaWxsaW5nQWRkcmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMTIpJzp7dGFnOicoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMTIpJyx2cjpcIkxUXCIsbmFtZTpcIkV4YW1pbmF0aW9uUmVhc29uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDMxLFwiU0lFTUVOUyBJU0lcIiwzMCknOnt0YWc6JygwMDMxLFwiU0lFTUVOUyBJU0lcIiwzMCknLHZyOlwiREFcIixuYW1lOlwiUmVxdWVzdGVkRGF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMzIpJzp7dGFnOicoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMzIpJyx2cjpcIlRNXCIsbmFtZTpcIldvcmtsaXN0UmVxdWVzdFN0YXJ0VGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMzMpJzp7dGFnOicoMDAzMSxcIlNJRU1FTlMgSVNJXCIsMzMpJyx2cjpcIlRNXCIsbmFtZTpcIldvcmtsaXN0UmVxdWVzdEVuZFRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzEsXCJTSUVNRU5TIElTSVwiLDRhKSc6e3RhZzonKDAwMzEsXCJTSUVNRU5TIElTSVwiLDRhKScsdnI6XCJUTVwiLG5hbWU6XCJSZXF1ZXN0ZWRUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDMxLFwiU0lFTUVOUyBJU0lcIiw4MCknOnt0YWc6JygwMDMxLFwiU0lFTUVOUyBJU0lcIiw4MCknLHZyOlwiTFRcIixuYW1lOlwiUmVxdWVzdGVkTG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwNTUsXCJTSUVNRU5TIElTSVwiLDQ2KSc6e3RhZzonKDAwNTUsXCJTSUVNRU5TIElTSVwiLDQ2KScsdnI6XCJMVFwiLG5hbWU6XCJDdXJyZW50V2FyZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDE5MyxcIlNJRU1FTlMgSVNJXCIsMDIpJzp7dGFnOicoMDE5MyxcIlNJRU1FTlMgSVNJXCIsMDIpJyx2cjpcIkRTXCIsbmFtZTpcIlJJU0tleVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDMwNyxcIlNJRU1FTlMgSVNJXCIsMDEpJzp7dGFnOicoMDMwNyxcIlNJRU1FTlMgSVNJXCIsMDEpJyx2cjpcIlVOXCIsbmFtZTpcIlJJU1dvcmtsaXN0SU1HRUZcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAzMDksXCJTSUVNRU5TIElTSVwiLDAxKSc6e3RhZzonKDAzMDksXCJTSUVNRU5TIElTSVwiLDAxKScsdnI6XCJVTlwiLG5hbWU6XCJSSVNSZXBvcnRJTUdFRlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNDAwOSxcIlNJRU1FTlMgSVNJXCIsMDEpJzp7dGFnOicoNDAwOSxcIlNJRU1FTlMgSVNJXCIsMDEpJyx2cjpcIkxUXCIsbmFtZTpcIlJlcG9ydElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg0MDA5LFwiU0lFTUVOUyBJU0lcIiwyMCknOnt0YWc6Jyg0MDA5LFwiU0lFTUVOUyBJU0lcIiwyMCknLHZyOlwiTFRcIixuYW1lOlwiUmVwb3J0U3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg0MDA5LFwiU0lFTUVOUyBJU0lcIiwzMCknOnt0YWc6Jyg0MDA5LFwiU0lFTUVOUyBJU0lcIiwzMCknLHZyOlwiREFcIixuYW1lOlwiUmVwb3J0Q3JlYXRpb25EYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg0MDA5LFwiU0lFTUVOUyBJU0lcIiw3MCknOnt0YWc6Jyg0MDA5LFwiU0lFTUVOUyBJU0lcIiw3MCknLHZyOlwiTFRcIixuYW1lOlwiUmVwb3J0QXBwcm92aW5nUGh5c2ljaWFuXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg0MDA5LFwiU0lFTUVOUyBJU0lcIixlMCknOnt0YWc6Jyg0MDA5LFwiU0lFTUVOUyBJU0lcIixlMCknLHZyOlwiTFRcIixuYW1lOlwiUmVwb3J0VGV4dFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNDAwOSxcIlNJRU1FTlMgSVNJXCIsZTEpJzp7dGFnOicoNDAwOSxcIlNJRU1FTlMgSVNJXCIsZTEpJyx2cjpcIkxUXCIsbmFtZTpcIlJlcG9ydEF1dGhvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNDAwOSxcIlNJRU1FTlMgSVNJXCIsZTMpJzp7dGFnOicoNDAwOSxcIlNJRU1FTlMgSVNJXCIsZTMpJyx2cjpcIkxUXCIsbmFtZTpcIlJlcG9ydGluZ1JhZGlvbG9naXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLDA0KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsMDQpJyx2cjpcIkxUXCIsbmFtZTpcIlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsMTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiUm93c09mU3VibWF0cml4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLDExKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsMTEpJyx2cjpcIlVTXCIsbmFtZTpcIkNvbHVtbnNPZlN1Ym1hdHJpeFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIiwyMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLDIwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLDIxKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsMjEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsNTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIiw1MCknLHZyOlwiVVNcIixuYW1lOlwiT3JpZ2luT2ZTdWJtYXRyaXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsOTkpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIiw5OSknLHZyOlwiTFRcIixuYW1lOlwiU2h1dHRlclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsYTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIixhMCknLHZyOlwiVVNcIixuYW1lOlwiUm93c09mUmVjdGFuZ3VsYXJTaHV0dGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLGExKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBESVNQTEFZXCIsYTEpJyx2cjpcIlVTXCIsbmFtZTpcIkNvbHVtbnNPZlJlY3Rhbmd1bGFyU2h1dHRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIixhMiknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLGEyKScsdnI6XCJVU1wiLG5hbWU6XCJPcmlnaW5PZlJlY3Rhbmd1bGFyU2h1dHRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIixiMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLGIwKScsdnI6XCJVU1wiLG5hbWU6XCJSYWRpdXNPZkNpcmN1bGFyU2h1dHRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIixiMiknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLGIyKScsdnI6XCJVU1wiLG5hbWU6XCJPcmlnaW5PZkNpcmN1bGFyU2h1dHRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIERJU1BMQVlcIixjMSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgRElTUExBWVwiLGMxKScsdnI6XCJVU1wiLG5hbWU6XCJDb250b3VyT2ZJcnJlZ3VsYXJTaHV0dGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwxMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiTGlzdE9mR3JvdXBOdW1iZXJzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwxNSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwxNSknLHZyOlwiTFRcIixuYW1lOlwiTGlzdE9mU2hhZG93T3duZXJDb2Rlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIEhHXCIsMjApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIEhHXCIsMjApJyx2cjpcIlVTXCIsbmFtZTpcIkxpc3RPZkVsZW1lbnROdW1iZXJzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwzMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiwzMCknLHZyOlwiVVNcIixuYW1lOlwiTGlzdE9mVG90YWxEaXNwbGF5TGVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw0MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw0MCknLHZyOlwiTFRcIixuYW1lOlwiTGlzdE9mRGlzcGxheVByZWZpeFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEIEhHXCIsNTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEIEhHXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIkxpc3RPZkRpc3BsYXlQb3N0Zml4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw2MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw2MCknLHZyOlwiVVNcIixuYW1lOlwiTGlzdE9mVGV4dFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw3MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgSEdcIiw3MCknLHZyOlwiTFRcIixuYW1lOlwiTGlzdE9mVGV4dENvbmNhdGVuYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDEwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDEwKScsdnI6XCJVU1wiLG5hbWU6XCJMaXN0T2ZHcm91cE51bWJlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDE1KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDE1KScsdnI6XCJMVFwiLG5hbWU6XCJMaXN0T2ZTaGFkb3dPd25lckNvZGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgTUdcIiwyMCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgTUdcIiwyMCknLHZyOlwiVVNcIixuYW1lOlwiTGlzdE9mRWxlbWVudE51bWJlcnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDMwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDMwKScsdnI6XCJVU1wiLG5hbWU6XCJMaXN0T2ZUb3RhbERpc3BsYXlMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDQwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDQwKScsdnI6XCJMVFwiLG5hbWU6XCJMaXN0T2ZEaXNwbGF5UHJlZml4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRUQgTUdcIiw1MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRUQgTUdcIiw1MCknLHZyOlwiTFRcIixuYW1lOlwiTGlzdE9mRGlzcGxheVBvc3RmaXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDYwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDYwKScsdnI6XCJVU1wiLG5hbWU6XCJMaXN0T2ZUZXh0UG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDcwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRCBNR1wiLDcwKScsdnI6XCJMVFwiLG5hbWU6XCJMaXN0T2ZUZXh0Q29uY2F0ZW5hdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgTUVEXCIsMTApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgTUVEXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIlJlY29nbml0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgTUVEXCIsMzApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgTUVEXCIsMzApJyx2cjpcIlVMXCIsbmFtZTpcIkJ5dGVPZmZzZXRPZk9yaWdpbmFsSGVhZGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBNRURcIiwzMSknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBNRURcIiwzMSknLHZyOlwiVUxcIixuYW1lOlwiTGVuZ3RoT2ZPcmlnaW5hbEhlYWRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgTUVEXCIsNDApJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgTUVEXCIsNDApJyx2cjpcIlVMXCIsbmFtZTpcIkJ5dGVPZmZzZXRPZlBpeGVsbWF0cml4XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBNRURcIiw0MSknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBNRURcIiw0MSknLHZyOlwiVUxcIixuYW1lOlwiTGVuZ3RoT2ZQaXhlbG1hdHJpeEluQnl0ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVNRU5TIE1FRFwiLDUwKSc6e3RhZzonKDAwMDksXCJTSUVNRU5TIE1FRFwiLDUwKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTUVOUyBNRURcIiw1MSknOnt0YWc6JygwMDA5LFwiU0lFTUVOUyBNRURcIiw1MSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgTUVEXCIsZjUpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgTUVEXCIsZjUpJyx2cjpcIkxUXCIsbmFtZTpcIlBETUVGSURQbGFjZWhvbGRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNJRU1FTlMgTUVEXCIsZjYpJzp7dGFnOicoMDAwOSxcIlNJRU1FTlMgTUVEXCIsZjYpJyx2cjpcIkxUXCIsbmFtZTpcIlBETURhdGFPYmplY3RUeXBlRXh0ZW5zaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNRURcIiwxMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNRURcIiwxMCknLHZyOlwiRFNcIixuYW1lOlwiWm9vbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMTEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMTEpJyx2cjpcIkRTXCIsbmFtZTpcIlRhcmdldFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMTIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMTIpJyx2cjpcIklTXCIsbmFtZTpcIlR1YmVBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMjApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTUVEXCIsMjApJyx2cjpcIlVTXCIsbmFtZTpcIlJPSU1hc2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDcwMDEsXCJTSUVNRU5TIE1FRFwiLDEwKSc6e3RhZzonKDcwMDEsXCJTSUVNRU5TIE1FRFwiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJEdW1teVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNzAwMyxcIlNJRU1FTlMgTUVEXCIsMTApJzp7dGFnOicoNzAwMyxcIlNJRU1FTlMgTUVEXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIkhlYWRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoNzAwNSxcIlNJRU1FTlMgTUVEXCIsMTApJzp7dGFnOicoNzAwNSxcIlNJRU1FTlMgTUVEXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIkR1bW15XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMDgpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDA4KScsdnI6XCJDU1wiLG5hbWU6XCJNZWRDb21IZWFkZXJUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMDkpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDA5KScsdnI6XCJMT1wiLG5hbWU6XCJNZWRDb21IZWFkZXJWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDEwKScsdnI6XCJPQlwiLG5hbWU6XCJNZWRDb21IZWFkZXJJbmZvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMjApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDIwKScsdnI6XCJPQlwiLG5hbWU6XCJNZWRDb21IaXN0b3J5SW5mb3JtYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiwzMSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMzEpJyx2cjpcIkxPXCIsbmFtZTpcIlBNVEZJbmZvcm1hdGlvbjFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiwzMiknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMzIpJyx2cjpcIlVMXCIsbmFtZTpcIlBNVEZJbmZvcm1hdGlvbjJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiwzMyknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMzMpJyx2cjpcIlVMXCIsbmFtZTpcIlBNVEZJbmZvcm1hdGlvbjNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiwzNCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMzQpJyx2cjpcIkNTXCIsbmFtZTpcIlBNVEZJbmZvcm1hdGlvbjRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiwzNSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsMzUpJyx2cjpcIlVMXCIsbmFtZTpcIlBNVEZJbmZvcm1hdGlvbjVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw0MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNDApJyx2cjpcIlNRXCIsbmFtZTpcIkFwcGxpY2F0aW9uSGVhZGVyU2VxdWVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw0MSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNDEpJyx2cjpcIkNTXCIsbmFtZTpcIkFwcGxpY2F0aW9uSGVhZGVyVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDQyKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw0MiknLHZyOlwiTE9cIixuYW1lOlwiQXBwbGljYXRpb25IZWFkZXJJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDQzKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw0MyknLHZyOlwiTE9cIixuYW1lOlwiQXBwbGljYXRpb25IZWFkZXJWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNDQpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDQ0KScsdnI6XCJPQlwiLG5hbWU6XCJBcHBsaWNhdGlvbkhlYWRlckluZm9cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw1MCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNTApJyx2cjpcIkxPXCIsbmFtZTpcIldvcmtmbG93Q29udHJvbEZsYWdzXCIsdm06XCI4XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNTEpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDUxKScsdnI6XCJDU1wiLG5hbWU6XCJBcmNoaXZlTWFuYWdlbWVudEZsYWdLZWVwT25saW5lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNTIpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDUyKScsdnI6XCJDU1wiLG5hbWU6XCJBcmNoaXZlTWFuYWdlbWVudEZsYWdEb05vdEFyY2hpdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw1MyknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNTMpJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlTG9jYXRpb25TdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw1NCknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNTQpJyx2cjpcIkRTXCIsbmFtZTpcIkVzdGltYXRlZFJldHJpZXZlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDU1KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw1NSknLHZyOlwiRFNcIixuYW1lOlwiRGF0YVNpemVPZlJldHJpZXZlZEltYWdlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDcwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3MCknLHZyOlwiU1FcIixuYW1lOlwiU2llbWVuc0xpbmtTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDcxKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3MSknLHZyOlwiQVRcIixuYW1lOlwiUmVmZXJlbmNlZFRhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDcyKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3MiknLHZyOlwiQ1NcIixuYW1lOlwiUmVmZXJlbmNlZFRhZ1R5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3MyknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNzMpJyx2cjpcIlVMXCIsbmFtZTpcIlJlZmVyZW5jZWRWYWx1ZUxlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDc0KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3NCknLHZyOlwiQ1NcIixuYW1lOlwiUmVmZXJlbmNlZE9iamVjdERldmljZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3NSknOnt0YWc6JygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSXCIsNzUpJyx2cjpcIk9CXCIsbmFtZTpcIlJlZmVyZW5jZWRPYmplY3REZXZpY2VMb2NhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIEhFQURFUlwiLDc2KSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVJcIiw3NiknLHZyOlwiT0JcIixuYW1lOlwiUmVmZXJlbmNlZE9iamVjdERldmljZUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gSEVBREVSMlwiLDYwKSc6e3RhZzonKDAwMjksXCJTSUVNRU5TIE1FRENPTSBIRUFERVIyXCIsNjApJyx2cjpcIkxPXCIsbmFtZTpcIlNlcmllc1dvcmtmbG93U3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gT09HXCIsMDgpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIE9PR1wiLDA4KScsdnI6XCJDU1wiLG5hbWU6XCJNRURDT01PT0dUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gT09HXCIsMDkpJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIE9PR1wiLDA5KScsdnI6XCJMT1wiLG5hbWU6XCJNRURDT01PT0dWZXJzaW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU0lFTUVOUyBNRURDT00gT09HXCIsMTApJzp7dGFnOicoMDAyOSxcIlNJRU1FTlMgTUVEQ09NIE9PR1wiLDEwKScsdnI6XCJPQlwiLG5hbWU6XCJNRURDT01PT0dJbmZvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwxMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwxMiknLHZyOlwiRFNcIixuYW1lOlwiTWFnbmV0aWNGaWVsZFN0cmVuZ3RoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwxNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwxNCknLHZyOlwiRFNcIixuYW1lOlwiQURDVm9sdGFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsMTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsMTYpJyx2cjpcIkRTXCIsbmFtZTpcIkFEQ09mZnNldFwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsMjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIlRyYW5zbWl0dGVyQW1wbGl0dWRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwyMSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwyMSknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZUcmFuc21pdHRlckFtcGxpdHVkZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDIyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDIyKScsdnI6XCJEU1wiLG5hbWU6XCJUcmFuc21pdHRlckF0dGVudWF0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDI0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDI0KScsdnI6XCJEU1wiLG5hbWU6XCJUcmFuc21pdHRlckNhbGlicmF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwyNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiwyNiknLHZyOlwiRFNcIixuYW1lOlwiVHJhbnNtaXR0ZXJSZWZlcmVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDUwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDUwKScsdnI6XCJEU1wiLG5hbWU6XCJSZWNlaXZlclRvdGFsR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTEpJyx2cjpcIkRTXCIsbmFtZTpcIlJlY2VpdmVyQW1wbGlmaWVyR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTIpJyx2cjpcIkRTXCIsbmFtZTpcIlJlY2VpdmVyUHJlYW1wbGlmaWVyR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTQpJyx2cjpcIkRTXCIsbmFtZTpcIlJlY2VpdmVyQ2FibGVBdHRlbnVhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTUpJyx2cjpcIkRTXCIsbmFtZTpcIlJlY2VpdmVyUmVmZXJlbmNlR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNTYpJyx2cjpcIkRTXCIsbmFtZTpcIlJlY2VpdmVyRmlsdGVyRnJlcXVlbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw2MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw2MCknLHZyOlwiRFNcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25TY2FsZUZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNjIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNjIpJyx2cjpcIkRTXCIsbmFtZTpcIlJlZmVyZW5jZVNjYWxlRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw3MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw3MCknLHZyOlwiRFNcIixuYW1lOlwiUGhhc2VHcmFkaWVudEFtcGxpdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNzEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNzEpJyx2cjpcIkRTXCIsbmFtZTpcIlJlYWRvdXRHcmFkaWVudEFtcGxpdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNzIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsNzIpJyx2cjpcIkRTXCIsbmFtZTpcIlNlbGVjdGlvbkdyYWRpZW50QW1wbGl0dWRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw4MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw4MCknLHZyOlwiRFNcIixuYW1lOlwiR3JhZGllbnREZWxheVRpbWVcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDgyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDgyKScsdnI6XCJEU1wiLG5hbWU6XCJUb3RhbEdyYWRpZW50RGVsYXlUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw5MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIiw5MCknLHZyOlwiTFRcIixuYW1lOlwiU2Vuc2l0aXZpdHlDb3JyZWN0aW9uTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDkxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDkxKScsdnI6XCJEU1wiLG5hbWU6XCJTYXR1cmF0aW9uUGhhc2VFbmNvZGluZ1ZlY3RvckNvcm9uYWxDb21wb25lbnRcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDkyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLDkyKScsdnI6XCJEU1wiLG5hbWU6XCJTYXR1cmF0aW9uUmVhZG91dFZlY3RvckNvcm9uYWxDb21wb25lbnRcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGEwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGEwKScsdnI6XCJVU1wiLG5hbWU6XCJSRldhdGNoZG9nTWFza1wiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsYTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsYTEpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSVJlY29uc3RydWN0aW9uU2xvcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGEyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGEyKScsdnI6XCJEU1wiLG5hbWU6XCJSRlBvd2VyRXJyb3JJbmRpY2F0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGE1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGE1KScsdnI6XCJEU1wiLG5hbWU6XCJTcGVjaWZpY0Fic29ycHRpb25SYXRlV2hvbGVCb2R5XCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixhNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixhNiknLHZyOlwiRFNcIixuYW1lOlwiU3BlY2lmaWNFbmVyZ3lEb3NlXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixiMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixiMCknLHZyOlwiVUxcIixuYW1lOlwiQWRqdXN0bWVudFN0YXR1c01hc2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGMxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGMxKScsdnI6XCJEU1wiLG5hbWU6XCJFUElDYXBhY2l0eVwiLHZtOlwiNlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsYzIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsYzIpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSUluZHVjdGFuY2VcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGMzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGMzKScsdnI6XCJJU1wiLG5hbWU6XCJFUElTd2l0Y2hDb25maWd1cmF0aW9uQ29kZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixjNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIENPQURcIixjNCknLHZyOlwiSVNcIixuYW1lOlwiRVBJU3dpdGNoSGFyZHdhcmVDb2RlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGM1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGM1KScsdnI6XCJEU1wiLG5hbWU6XCJFUElTd2l0Y2hEZWxheVRpbWVcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDEpJyx2cjpcIkRTXCIsbmFtZTpcIkZsb3dTZW5zaXRpdml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDIpJyx2cjpcIkxUXCIsbmFtZTpcIkNhbGN1bGF0aW9uU3VibW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDMpJyx2cjpcIkRTXCIsbmFtZTpcIkZpZWxkT2ZWaWV3UmF0aW9cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ0KScsdnI6XCJJU1wiLG5hbWU6XCJCYXNlUmF3TWF0cml4U2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDUpJyx2cjpcIklTXCIsbmFtZTpcIjJET3ZlcnNhbXBsaW5nTGluZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ2KScsdnI6XCJJU1wiLG5hbWU6XCIzRFBoYXNlT3ZlcnNhbXBsaW5nUGFydGl0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDcpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBDT0FEXCIsZDcpJyx2cjpcIklTXCIsbmFtZTpcIkVjaG9MaW5lUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ4KScsdnI6XCJJU1wiLG5hbWU6XCJFY2hvQ29sdW1uUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ5KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGQ5KScsdnI6XCJJU1wiLG5hbWU6XCJMaW5lc1BlclNlZ21lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGRhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgQ09BRFwiLGRhKScsdnI6XCJMVFwiLG5hbWU6XCJQaGFzZUNvZGluZ0RpcmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwxMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDEwKScsdnI6XCJEU1wiLG5hbWU6XCJUb3RhbE1lYXN1cmVtZW50VGltZU5vbWluYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMTEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwxMSknLHZyOlwiRFNcIixuYW1lOlwiVG90YWxNZWFzdXJlbWVudFRpbWVDdXJyZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDEyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMTIpJyx2cjpcIkRTXCIsbmFtZTpcIlN0YXJ0RGVsYXlUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDEzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMTMpJyx2cjpcIkRTXCIsbmFtZTpcIkR3ZWxsVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwxNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDE0KScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZlBoYXNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwxNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDE2KScsdnI6XCJVTFwiLG5hbWU6XCJTZXF1ZW5jZUNvbnRyb2xNYXNrXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDE4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMTgpJyx2cjpcIlVMXCIsbmFtZTpcIk1lYXN1cmVtZW50U3RhdHVzTWFza1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwyMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDIwKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZkZvdXJpZXJMaW5lc05vbWluYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwyMSknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZGb3VyaWVyTGluZXNDdXJyZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDI2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjYpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mRm91cmllckxpbmVzQWZ0ZXJaZXJvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDI4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjgpJyx2cjpcIklTXCIsbmFtZTpcIkZpcnN0TWVhc3VyZWRGb3VyaWVyTGluZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwzMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDMwKScsdnI6XCJJU1wiLG5hbWU6XCJBY3F1aXNpdGlvbkNvbHVtbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMzEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwzMSknLHZyOlwiSVNcIixuYW1lOlwiUmVjb25zdHJ1Y3Rpb25Db2x1bW5zXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDApJyx2cjpcIklTXCIsbmFtZTpcIkFycmF5Q29pbEVsZW1lbnROdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0MSknLHZyOlwiVUxcIixuYW1lOlwiQXJyYXlDb2lsRWxlbWVudFNlbGVjdE1hc2tcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0MiknLHZyOlwiVUxcIixuYW1lOlwiQXJyYXlDb2lsRWxlbWVudERhdGFNYXNrXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDMpJyx2cjpcIklTXCIsbmFtZTpcIkFycmF5Q29pbEVsZW1lbnRUb0FEQ0Nvbm5lY3RcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQ0KScsdnI6XCJEU1wiLG5hbWU6XCJBcnJheUNvaWxFbGVtZW50Tm9pc2VMZXZlbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQ1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDUpJyx2cjpcIklTXCIsbmFtZTpcIkFycmF5Q29pbEFEQ1BhaXJOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0NiknLHZyOlwiVUxcIixuYW1lOlwiQXJyYXlDb2lsQ29tYmluYXRpb25NYXNrXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDUwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNTApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mQXZlcmFnZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw2MCknLHZyOlwiRFNcIixuYW1lOlwiRmxpcEFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDcwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNzApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mUHJlc2NhbnNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4MSknLHZyOlwiTFRcIixuYW1lOlwiRmlsdGVyVHlwZUZvclJhd0RhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4MiknLHZyOlwiRFNcIixuYW1lOlwiRmlsdGVyUGFyYW1ldGVyRm9yUmF3RGF0YVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDgzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODMpJyx2cjpcIkxUXCIsbmFtZTpcIkZpbHRlclR5cGVGb3JJbWFnZURhdGFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4NCknLHZyOlwiRFNcIixuYW1lOlwiRmlsdGVyUGFyYW1ldGVyRm9ySW1hZ2VEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4NSknLHZyOlwiTFRcIixuYW1lOlwiRmlsdGVyVHlwZUZvclBoYXNlQ29ycmVjdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDg2KScsdnI6XCJEU1wiLG5hbWU6XCJGaWx0ZXJQYXJhbWV0ZXJGb3JQaGFzZUNvcnJlY3Rpb25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4NyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDg3KScsdnI6XCJMVFwiLG5hbWU6XCJOb3JtYWxpemF0aW9uRmlsdGVyVHlwZUZvckltYWdlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw4OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDg4KScsdnI6XCJEU1wiLG5hbWU6XCJOb3JtYWxpemF0aW9uRmlsdGVyUGFyYW1ldGVyRm9ySW1hZ2VEYXRhXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5MCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTYXR1cmF0aW9uUmVnaW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5MSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDkxKScsdnI6XCJEU1wiLG5hbWU6XCJTYXR1cmF0aW9uUGhhc2VFbmNvZGluZ1ZlY3RvclNhZ2l0dGFsQ29tcG9uZW50XCIsdm06XCI2XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDkyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTIpJyx2cjpcIkRTXCIsbmFtZTpcIlNhdHVyYXRpb25SZWFkb3V0VmVjdG9yU2FnaXR0YWxDb21wb25lbnRcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5MyknLHZyOlwiRFNcIixuYW1lOlwiRVBJU3RpbXVsYXRpb25Nb25pdG9yTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk0KScsdnI6XCJEU1wiLG5hbWU6XCJJbWFnZVJvdGF0aW9uQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NiknLHZyOlwiVUxcIixuYW1lOlwiQ29pbElETWFza1wiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk3KScsdnI6XCJVTFwiLG5hbWU6XCJDb2lsQ2xhc3NNYXNrXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTgpJyx2cjpcIkRTXCIsbmFtZTpcIkNvaWxQb3NpdGlvblwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIixhMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLGEwKScsdnI6XCJEU1wiLG5hbWU6XCJFUElSZWNvbnN0cnVjdGlvblBoYXNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLGExKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsYTEpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSVJlY29uc3RydWN0aW9uU2xvcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwyMCknLHZyOlwiSVNcIixuYW1lOlwiUGhhc2VDb3JyZWN0aW9uUm93c1NlcXVlbmNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDIxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjEpJyx2cjpcIklTXCIsbmFtZTpcIlBoYXNlQ29ycmVjdGlvbkNvbHVtbnNTZXF1ZW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwyMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDIyKScsdnI6XCJJU1wiLG5hbWU6XCJQaGFzZUNvcnJlY3Rpb25Sb3dzUmVjb25zdHJ1Y3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMjQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwyNCknLHZyOlwiSVNcIixuYW1lOlwiUGhhc2VDb3JyZWN0aW9uQ29sdW1uc1JlY29uc3RydWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDMwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMzApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mM0RSYXdQYXJ0aXRpb25zTm9taW5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwzMSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDMxKScsdnI6XCJJU1wiLG5hbWU6XCJOdW1iZXJPZjNEUmF3UGFydGl0aW9uc0N1cnJlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMzQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwzNCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2YzREltYWdlUGFydGl0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiwzNiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDM2KScsdnI6XCJJU1wiLG5hbWU6XCJBY3R1YWwzREltYWdlUGFydGl0aW9uTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDM5KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsMzkpJyx2cjpcIkRTXCIsbmFtZTpcIlNsYWJUaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0MCknLHZyOlwiSVNcIixuYW1lOlwiTnVtYmVyT2ZTbGljZXNOb21pbmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDEpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU2xpY2VzQ3VycmVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQyKScsdnI6XCJJU1wiLG5hbWU6XCJDdXJyZW50U2xpY2VOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0MyknLHZyOlwiSVNcIixuYW1lOlwiQ3VycmVudEdyb3VwTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQ0KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDQpJyx2cjpcIkRTXCIsbmFtZTpcIkN1cnJlbnRTbGljZURpc3RhbmNlRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQ1KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDUpJyx2cjpcIklTXCIsbmFtZTpcIk1JUFN0YXJ0Um93XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDQ2KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDYpJyx2cjpcIklTXCIsbmFtZTpcIk1JUFN0b3BSb3dcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDcpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0NyknLHZyOlwiSVNcIixuYW1lOlwiTUlQU3RhcnRDb2x1bW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDgpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0OCknLHZyOlwiSVNcIixuYW1lOlwiTUlQU3RhcnRDb2x1bW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNDkpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0OSknLHZyOlwiSVNcIixuYW1lOlwiTUlQU3RhcnRTbGljZSBOYW1lPVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw0YSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDRhKScsdnI6XCJJU1wiLG5hbWU6XCJNSVBTdGFydFNsaWNlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDRmKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNGYpJyx2cjpcIkxUXCIsbmFtZTpcIk9yZGVyb2ZTbGljZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNTApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1MCknLHZyOlwiVVNcIixuYW1lOlwiU2lnbmFsTWFza1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDUyKScsdnI6XCJEU1wiLG5hbWU6XCJEZWxheUFmdGVyVHJpZ2dlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1MyknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDUzKScsdnI6XCJJU1wiLG5hbWU6XCJSUkludGVydmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDU0KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNTQpJyx2cjpcIkRTXCIsbmFtZTpcIk51bWJlck9mVHJpZ2dlclB1bHNlc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1NiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDU2KScsdnI6XCJEU1wiLG5hbWU6XCJSZXBldGl0aW9uVGltZUVmZmVjdGl2ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1NyknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDU3KScsdnI6XCJMVFwiLG5hbWU6XCJHYXRlUGhhc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNTgpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1OCknLHZyOlwiRFNcIixuYW1lOlwiR2F0ZVRocmVzaG9sZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw1OSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDU5KScsdnI6XCJEU1wiLG5hbWU6XCJHYXRlZFJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDYwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNjApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mSW50ZXJwb2xhdGVkSW1hZ2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDcwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNzApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mRWNob2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDcyKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNzIpJyx2cjpcIkRTXCIsbmFtZTpcIlNlY29uZEVjaG9UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDczKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsNzMpJyx2cjpcIkRTXCIsbmFtZTpcIlNlY29uZFJlcGV0aXRpb25UaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDgwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsODApJyx2cjpcIklTXCIsbmFtZTpcIkNhcmRpYWNDb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDkxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTEpJyx2cjpcIkRTXCIsbmFtZTpcIlNhdHVyYXRpb25QaGFzZUVuY29kaW5nVmVjdG9yVHJhbnN2ZXJzZUNvbXBvbmVudFwiLHZtOlwiNlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5MiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDkyKScsdnI6XCJEU1wiLG5hbWU6XCJTYXR1cmF0aW9uUmVhZG91dFZlY3RvclRyYW5zdmVyc2VDb21wb25lbnRcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgR0VOXCIsOTMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5MyknLHZyOlwiRFNcIixuYW1lOlwiRVBJQ2hhbmdlVmFsdWVPZk1hZ25pdHVkZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk0KScsdnI6XCJEU1wiLG5hbWU6XCJFUElDaGFuZ2VWYWx1ZU9mWENvbXBvbmVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk1KScsdnI6XCJEU1wiLG5hbWU6XCJFUElDaGFuZ2VWYWx1ZU9mWUNvbXBvbmVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBHRU5cIiw5NiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIEdFTlwiLDk2KScsdnI6XCJEU1wiLG5hbWU6XCJFUElDaGFuZ2VWYWx1ZU9mWkNvbXBvbmVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDAwKScsdnI6XCJMVFwiLG5hbWU6XCJTZXF1ZW5jZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwMSknLHZyOlwiSVNcIixuYW1lOlwiVmVjdG9yU2l6ZU9yaWdpbmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDAyKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDIpJyx2cjpcIklTXCIsbmFtZTpcIlZlY3RvclNpemVFeHRlbmRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwMyknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDAzKScsdnI6XCJEU1wiLG5hbWU6XCJBY3F1aXJlZFNwZWN0cmFsUmFuZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwNCknLHZyOlwiRFNcIixuYW1lOlwiVk9JUG9zaXRpb25cIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwNSknLHZyOlwiRFNcIixuYW1lOlwiVk9JU2l6ZVwiLHZtOlwiM1wiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwNiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDA2KScsdnI6XCJJU1wiLG5hbWU6XCJDU0lNYXRyaXhTaXplT3JpZ2luYWxcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDcpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwNyknLHZyOlwiSVNcIixuYW1lOlwiQ1NJTWF0cml4U2l6ZUV4dGVuZGVkXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDA4KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDgpJyx2cjpcIkRTXCIsbmFtZTpcIlNwYXRpYWxHcmlkU2hpZnRcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMDkpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwwOSknLHZyOlwiRFNcIixuYW1lOlwiU2lnbmFsTGltaXRzTWluaW11bVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDEwKScsdnI6XCJEU1wiLG5hbWU6XCJTaWduYWxMaW1pdHNNYXhpbXVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDExKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTEpJyx2cjpcIkRTXCIsbmFtZTpcIlNwZWNJbmZvTWFza1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDEyKScsdnI6XCJEU1wiLG5hbWU6XCJFUElUaW1lUmF0ZU9mQ2hhbmdlT2ZNYWduaXR1ZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxMyknLHZyOlwiRFNcIixuYW1lOlwiRVBJVGltZVJhdGVPZkNoYW5nZU9mWENvbXBvbmVudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxNCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDE0KScsdnI6XCJEU1wiLG5hbWU6XCJFUElUaW1lUmF0ZU9mQ2hhbmdlT2ZZQ29tcG9uZW50XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDE1KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTUpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSVRpbWVSYXRlT2ZDaGFuZ2VPZlpDb21wb25lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTYpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxNiknLHZyOlwiRFNcIixuYW1lOlwiRVBJVGltZVJhdGVPZkNoYW5nZUxlZ2FsTGltaXQxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDE3KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTcpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSU9wZXJhdGlvbk1vZGVGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDE4KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTgpJyx2cjpcIkRTXCIsbmFtZTpcIkVQSUZpZWxkQ2FsY3VsYXRpb25TYWZldHlGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMTkpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwxOSknLHZyOlwiRFNcIixuYW1lOlwiRVBJTGVnYWxMaW1pdDFPZkNoYW5nZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDIwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMjApJyx2cjpcIkRTXCIsbmFtZTpcIkVQSUxlZ2FsTGltaXQyT2ZDaGFuZ2VWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwyMSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDIxKScsdnI6XCJEU1wiLG5hbWU6XCJFUElSaXNlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiwzMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDMwKScsdnI6XCJEU1wiLG5hbWU6XCJBcnJheUNvaWxBRENPZmZzZXRcIix2bTpcIjE2XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDMxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsMzEpJyx2cjpcIkRTXCIsbmFtZTpcIkFycmF5Q29pbFByZWFtcGxpZmllckdhaW5cIix2bTpcIjE2XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDUwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIlNhdHVyYXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDUxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTEpJyx2cjpcIkRTXCIsbmFtZTpcIlNhdHVyYXRpb25Ob3JtYWxWZWN0b3JcIix2bTpcIjNcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiw1MiknLHZyOlwiRFNcIixuYW1lOlwiU2F0dXJhdGlvblBvc2l0aW9uVmVjdG9yXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDUzKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTMpJyx2cjpcIkRTXCIsbmFtZTpcIlNhdHVyYXRpb25UaGlja25lc3NcIix2bTpcIjZcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgTVIgVkEwICBSQVdcIiw1NCknLHZyOlwiRFNcIixuYW1lOlwiU2F0dXJhdGlvbldpZHRoXCIsdm06XCI2XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBNUiBWQTAgIFJBV1wiLDU1KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIE1SIFZBMCAgUkFXXCIsNTUpJyx2cjpcIkRTXCIsbmFtZTpcIlNhdHVyYXRpb25EaXN0YW5jZVwiLHZtOlwiNlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZlMyxcIlNJRU1FTlMgTlVNQVJJUyBJSVwiLDAwKSc6e3RhZzonKDdmZTMsXCJTSUVNRU5TIE5VTUFSSVMgSUlcIiwwMCknLHZyOlwiTFRcIixuYW1lOlwiSW1hZ2VHcmFwaGljc0Zvcm1hdENvZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZTMsXCJTSUVNRU5TIE5VTUFSSVMgSUlcIiwxMCknOnt0YWc6Jyg3ZmUzLFwiU0lFTUVOUyBOVU1BUklTIElJXCIsMTApJyx2cjpcIk9CXCIsbmFtZTpcIkltYWdlR3JhcGhpY3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZTMsXCJTSUVNRU5TIE5VTUFSSVMgSUlcIiwyMCknOnt0YWc6Jyg3ZmUzLFwiU0lFTUVOUyBOVU1BUklTIElJXCIsMjApJyx2cjpcIk9CXCIsbmFtZTpcIkltYWdlR3JhcGhpY3NEdW1teVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjApJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjApJyx2cjpcIlNMXCIsbmFtZTpcIkZsdW9yb1RpbWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBHRU5cIiwyNSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSQSBHRU5cIiwyNSknLHZyOlwiU0xcIixuYW1lOlwiUHRvcERvc2VBcmVhUHJvZHVjdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjYpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjYpJyx2cjpcIlNMXCIsbmFtZTpcIlB0b3BUb3RhbFNraW5Eb3NlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBHRU5cIiwzMCknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSQSBHRU5cIiwzMCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMzUpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgR0VOXCIsMzUpJyx2cjpcIkxPXCIsbmFtZTpcIlBhdGllbnRJbml0aWFsUHVja0NvdW50ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJBIEdFTlwiLDQwKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJBIEdFTlwiLDQwKScsdnI6XCJTU1wiLG5hbWU6XCJTUElEYXRhT2JqZWN0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIkFjcXVpcmVkUGxhbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDFmKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDFmKScsdnI6XCJTU1wiLG5hbWU6XCJEZWZhdWx0VGFibGVJc29DZW50ZXJIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDIwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDIwKScsdnI6XCJTTFwiLG5hbWU6XCJTY2VuZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDIyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDIyKScsdnI6XCJTTFwiLG5hbWU6XCJSZWZQaG90b2ZpbGVGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyNCknLHZyOlwiTE9cIixuYW1lOlwiU2NlbmVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyNiknLHZyOlwiU1NcIixuYW1lOlwiQWNxdWlzaXRpb25JbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMjgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMjgpJyx2cjpcIlNTXCIsbmFtZTpcIk1peGVkUHVsc2VNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwyYSknLHZyOlwiU1NcIixuYW1lOlwiTm9PZlBvc2l0aW9uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMmMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMmMpJyx2cjpcIlNTXCIsbmFtZTpcIk5vT2ZQaGFzZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDJlKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDJlKScsdnI6XCJTU1wiLG5hbWU6XCJGcmFtZVJhdGVGb3JQb3NpdGlvbnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzApJyx2cjpcIlNTXCIsbmFtZTpcIk5vT2ZGcmFtZXNGb3JQb3NpdGlvbnNcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzIpJyx2cjpcIlNTXCIsbmFtZTpcIlN0ZXBwaW5nRGlyZWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwzNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwzNCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsMzYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDM4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDM4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwzYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiwzYSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsM2MpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsM2MpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDNlKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDNlKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw0MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw0MCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNDIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNDIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDQ0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDQ0KScsdnI6XCJTU1wiLG5hbWU6XCJJbWFnZVRyYW5zZmVyRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDQ2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDQ2KScsdnI6XCJTTFwiLG5hbWU6XCJJbnZlcnNGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw0OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw0OCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNGEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNGEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDRjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDRjKScsdnI6XCJTU1wiLG5hbWU6XCJCbGFua2luZ0NpcmNsZURpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1MCknLHZyOlwiU0xcIixuYW1lOlwiU3RhbmREYXRhVmFsaWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDUyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDUyKScsdnI6XCJTU1wiLG5hbWU6XCJUYWJsZVRpbHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDU0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDU0KScsdnI6XCJTU1wiLG5hbWU6XCJUYWJsZUF4aXNSb3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNTYpJyx2cjpcIlNTXCIsbmFtZTpcIlRhYmxlTG9uZ2l0dWRhbFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1OCknLHZyOlwiU1NcIixuYW1lOlwiVGFibGVTaWRlT2Zmc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1YSknLHZyOlwiU1NcIixuYW1lOlwiVGFibGVJc29DZW50ZXJIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDVjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDVjKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw1ZSknLHZyOlwiU0xcIixuYW1lOlwiQ29sbGltYXRpb25EYXRhVmFsaWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDYwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDYwKScsdnI6XCJTTFwiLG5hbWU6XCJQZXJpU2VxdWVuY2VOb1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNjIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNjIpJyx2cjpcIlNMXCIsbmFtZTpcIlBlcmlUb3RhbFNjZW5lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNjQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNjQpJyx2cjpcIlNMXCIsbmFtZTpcIlBlcmlPdmVybGFwVG9wXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw2NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIiw2NiknLHZyOlwiU0xcIixuYW1lOlwiUGVyaU92ZXJsYXBCb3R0b21cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDY4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDY4KScsdnI6XCJTTFwiLG5hbWU6XCJSYXdJbWFnZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNmEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNmEpJyx2cjpcIlNMXCIsbmFtZTpcIlhSYXlEYXRhVmFsaWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDcwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDcwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDcyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDcyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDc0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDc0KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDc2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLDc2KScsdnI6XCJTTFwiLG5hbWU6XCJGaWxsaW5nQXZlcmFnZUZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNzgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsNzgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2EpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2EpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2MpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2MpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2UpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsN2UpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsODgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOGUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOTgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWMpJyx2cjpcIlNMXCIsbmFtZTpcIkludGVuc2lmaWVyTGV2ZWxDYWxpYnJhdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsOWUpJyx2cjpcIlNMXCIsbmFtZTpcIk5hdGl2ZVJldmlld0ZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGEyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGEyKScsdnI6XCJTTFwiLG5hbWU6XCJTY2VuZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTQpJyx2cjpcIlNTXCIsbmFtZTpcIkFjcXVpc2l0aW9uTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTUpJyx2cjpcIlNTXCIsbmFtZTpcIkFjcXVpc2l0b25GcmFtZVJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGE2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGE2KScsdnI6XCJTTFwiLG5hbWU6XCJFQ0dGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixhNyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixhNyknLHZyOlwiU0xcIixuYW1lOlwiQWRkaXRpb25hbFNjZW5lRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTgpJyx2cjpcIlNMXCIsbmFtZTpcIkZpbGVDb3B5RmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTkpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgR0VOXCIsYTkpJyx2cjpcIlNMXCIsbmFtZTpcIlBobGVib3Zpc2lvbkZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFhKScsdnI6XCJTTFwiLG5hbWU6XCJDbzJGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixhYiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixhYiknLHZyOlwiU1NcIixuYW1lOlwiTWF4U3BlZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFjKScsdnI6XCJTU1wiLG5hbWU6XCJTdGVwV2lkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFkKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIEdFTlwiLGFkKScsdnI6XCJTTFwiLG5hbWU6XCJEaWdpdGFsQWNxdWlzaXRpb25ab29tXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixmZiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBHRU5cIixmZiknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsMTUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsMTUpJyx2cjpcIlNTXCIsbmFtZTpcIkltYWdlc0luU3R1ZHlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDIwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDIwKScsdnI6XCJTU1wiLG5hbWU6XCJTY2VuZXNJblN0dWR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBSQSBHRU5cIiwyNSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBSQSBHRU5cIiwyNSknLHZyOlwiU1NcIixuYW1lOlwiSW1hZ2VzSW5QaG90b2ZpbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDI3KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDI3KScsdnI6XCJTU1wiLG5hbWU6XCJQbGFuZUJJbWFnZXNFeGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjgpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsMjgpJyx2cjpcIlNTXCIsbmFtZTpcIk5vT2YyTUJDaHVua3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDMwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFJBIEdFTlwiLDMwKScsdnI6XCJTU1wiLG5hbWU6XCJJbWFnZXNJbkFsbFNjZW5lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsNDApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgUkEgR0VOXCIsNDApJyx2cjpcIlNTXCIsbmFtZTpcIkFyY2hpdmVTV0ludGVybmFsVmVyc2lvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDI4KSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwyOCknLHZyOlwiU0xcIixuYW1lOlwiRmx1b3JvVGltZXJBXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMjkpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDI5KScsdnI6XCJTTFwiLG5hbWU6XCJGbHVvcm9Ta2luRG9zZUFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwyYSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmEpJyx2cjpcIlNMXCIsbmFtZTpcIlRvdGFsU2tpbkRvc2VBXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmIpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDJiKScsdnI6XCJTTFwiLG5hbWU6XCJGbHVvcm9Eb3NlQXJlYVByb2R1Y3RBXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmMpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDJjKScsdnI6XCJTTFwiLG5hbWU6XCJUb3RhbERvc2VBcmVhUHJvZHVjdEFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxNSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMTUpJyx2cjpcIkxUXCIsbmFtZTpcIk9mZmxpbmVVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMTgpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMTkpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDE5KScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDFhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxYSknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxYiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMWIpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMWMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDFjKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDFkKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxZCknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwxZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMWUpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMWYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDFmKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDIwKScsdnI6XCJTU1wiLG5hbWU6XCJTeXN0ZW1DYWxpYkZhY3RvclBsYW5lQVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDIyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwyMiknLHZyOlwiU1NcIixuYW1lOlwiWFJheVBhcmFtZXRlclNldE5vXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMjQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDI0KScsdnI6XCJTU1wiLG5hbWU6XCJYUmF5U3lzdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMjYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDI2KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMjgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDI4KScsdnI6XCJTU1wiLG5hbWU6XCJBY3F1aXJlZERpc3BsYXlNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDJhKScsdnI6XCJTU1wiLG5hbWU6XCJBY3F1aXNpdGlvbkRlbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDJjKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMmUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDJlKScsdnI6XCJTU1wiLG5hbWU6XCJNYXhGcmFtZXNMaW1pdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDMwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwzMCknLHZyOlwiVVNcIixuYW1lOlwiTWF4aW11bUZyYW1lU2l6ZU5JVVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDMyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwzMiknLHZyOlwiU1NcIixuYW1lOlwiU3VidHJhY3RlZEZpbHRlclR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwzNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMzQpJyx2cjpcIlNTXCIsbmFtZTpcIkZpbHRlckZhY3Rvck5hdGl2ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDM2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiwzNiknLHZyOlwiU1NcIixuYW1lOlwiQW5hdG9taWNCYWNrZ3JvdW5kRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsMzgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDM4KScsdnI6XCJTU1wiLG5hbWU6XCJXaW5kb3dVcHBlckxpbWl0TmF0aXZlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsM2EpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDNhKScsdnI6XCJTU1wiLG5hbWU6XCJXaW5kb3dMb3dlckxpbWl0TmF0aXZlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsM2MpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDNjKScsdnI6XCJTU1wiLG5hbWU6XCJXaW5kb3dCcmlnaHRuZXNzUGhhc2UxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsM2UpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDNlKScsdnI6XCJTU1wiLG5hbWU6XCJXaW5kb3dCcmlnaHRuZXNzUGhhc2UyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNDApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDQwKScsdnI6XCJTU1wiLG5hbWU6XCJXaW5kb3dDb250cmFzdFBoYXNlMVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDQyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0MiknLHZyOlwiU1NcIixuYW1lOlwiV2luZG93Q29udHJhc3RQaGFzZTJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNDQpJyx2cjpcIlNTXCIsbmFtZTpcIkZpbHRlckZhY3RvclN1YlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDQ2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0NiknLHZyOlwiU1NcIixuYW1lOlwiUGVha09wYWNpZmllZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDQ4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0OCknLHZyOlwiU0xcIixuYW1lOlwiTWFza0ZyYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNGEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDRhKScsdnI6XCJTTFwiLG5hbWU6XCJCSUhGcmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDRjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0YyknLHZyOlwiU1NcIixuYW1lOlwiQ2VudEJlYW1Bbmd1bGF0aW9uQ2F1ZENyYW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw0ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNGUpJyx2cjpcIlNTXCIsbmFtZTpcIkNlbnRCZWFtQW5ndWxhdGlvbkxSQW50ZXJpb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw1MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNTApJyx2cjpcIlNTXCIsbmFtZTpcIkxvbmdpdHVkaW5hbFBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDUyKScsdnI6XCJTU1wiLG5hbWU6XCJTaWRlT2Zmc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDU0KScsdnI6XCJTU1wiLG5hbWU6XCJJc29DZW50ZXJIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw1NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNTYpJyx2cjpcIlNTXCIsbmFtZTpcIkltYWdlVHdpc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw1OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNTgpJyx2cjpcIlNTXCIsbmFtZTpcIlNvdXJjZUltYWdlRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw1YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNWEpJyx2cjpcIlNTXCIsbmFtZTpcIk1lY2hhbmljYWxNYWduaWZpY2F0aW9uRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNWMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDVjKScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbkZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw1ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNWUpJyx2cjpcIlNMXCIsbmFtZTpcIkNhbGlicmF0aW9uQW5nbGVDcmFuQ2F1ZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDYwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw2MCknLHZyOlwiU0xcIixuYW1lOlwiQ2FsaWJyYXRpb25BbmdsZVJBT0xBT1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDYyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw2MiknLHZyOlwiU0xcIixuYW1lOlwiQ2FsaWJyYXRpb25UYWJsZVRvRmxvb3JEaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNjQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDY0KScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbklzb2NlbnRlclRvRmxvb3JEaXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNjYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDY2KScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbklzb2NlbnRlclRvU291cmNlRGlzdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDY4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw2OCknLHZyOlwiU0xcIixuYW1lOlwiQ2FsaWJyYXRpb25Tb3VyY2VUb0lJXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNmEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDZhKScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbklJWm9vbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDZjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw2YyknLHZyOlwiU0xcIixuYW1lOlwiQ2FsaWJyYXRpb25JSUZpZWxkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNmUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDZlKScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbkZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDcwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3MCknLHZyOlwiU0xcIixuYW1lOlwiQ2FsaWJyYXRpb25PYmplY3RUb0ltYWdlRGlzdGFuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNzIpJyx2cjpcIlNMXCIsbmFtZTpcIkNhbGlicmF0aW9uU3lzdGVtRmFjdG9yXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNzQpJyx2cjpcIlNMXCIsbmFtZTpcIkNhbGlicmF0aW9uU3lzdGVtQ29ycmVjdGlvblwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNzYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDc2KScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvblN5c3RlbUlJRm9ybWF0c1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsNzgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDc4KScsdnI6XCJTTFwiLG5hbWU6XCJDYWxpYnJhdGlvbkdhbnRyeURhdGFWYWxpZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDdhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3YSknLHZyOlwiU1NcIixuYW1lOlwiQ29sbGltYXRvclNxdWFyZUJyZWFkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3YyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsN2MpJyx2cjpcIlNTXCIsbmFtZTpcIkNvbGxpbWF0b3JTcXVhcmVIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw3ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsN2UpJyx2cjpcIlNTXCIsbmFtZTpcIkNvbGxpbWF0b3JTcXVhcmVEaWFtZXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDgwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw4MCknLHZyOlwiU1NcIixuYW1lOlwiQ29sbGltYXRlckZpbmdlclR1cm5BbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDgyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw4MiknLHZyOlwiU1NcIixuYW1lOlwiQ29sbGltYXRlckZpbmdlclBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsODQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDg0KScsdnI6XCJTU1wiLG5hbWU6XCJDb2xsaW1hdGVyRGlhcGhyYWdtVHVybkFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsODYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDg2KScsdnI6XCJTU1wiLG5hbWU6XCJDb2xsaW1hdGVyRGlhcGhyYWdtUG9zaXRpb24xXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsODgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDg4KScsdnI6XCJTU1wiLG5hbWU6XCJDb2xsaW1hdGVyRGlhcGhyYWdtUG9zaXRpb24yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOGEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDhhKScsdnI6XCJTU1wiLG5hbWU6XCJDb2xsaW1hdGVyRGlhcGhyYWdtTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDhjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw4YyknLHZyOlwiU1NcIixuYW1lOlwiQ29sbGltYXRlckJlYW1MaW1pdEJyZWFkdGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw4ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOGUpJyx2cjpcIlNTXCIsbmFtZTpcIkNvbGxpbWF0ZXJCZWFtTGltaXRIZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOTApJyx2cjpcIlNTXCIsbmFtZTpcIkNvbGxpbWF0ZXJCZWFtTGltaXREaWFtZXRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDkyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5MiknLHZyOlwiU1NcIixuYW1lOlwiWC1SYXlDb250cm9sTU9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDk0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5NCknLHZyOlwiU1NcIixuYW1lOlwiWC1SYXlTeXN0ZW1cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOTYpJyx2cjpcIlNTXCIsbmFtZTpcIkZvY2FsU3BvdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDk4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5OCknLHZyOlwiU1NcIixuYW1lOlwiRXhwb3N1cmVDb250cm9sXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOWEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDlhKScsdnI6XCJTTFwiLG5hbWU6XCJYUmF5Vm9sdGFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLDljKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5YyknLHZyOlwiU0xcIixuYW1lOlwiWFJheUN1cnJlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIiw5ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsOWUpJyx2cjpcIlNMXCIsbmFtZTpcIlhSYXlDdXJyZW50VGltZVByb2R1Y3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYTApJyx2cjpcIlNMXCIsbmFtZTpcIlhSYXlQdWxzZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYTIpJyx2cjpcIlNMXCIsbmFtZTpcIlhSYXlTY2VuZVRpbWVGbHVvcm9DbG9ja1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGE0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhNCknLHZyOlwiU1NcIixuYW1lOlwiTWF4aW11bVB1bHNlUmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGE2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhNiknLHZyOlwiU1NcIixuYW1lOlwiUHVsc2VzUGVyU2NlbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYTgpJyx2cjpcIlNMXCIsbmFtZTpcIkRvc2VBcmVhUHJvZHVjdE9mU2NlbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYWEpJyx2cjpcIlNTXCIsbmFtZTpcIkRvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixhYyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYWMpJyx2cjpcIlNTXCIsbmFtZTpcIkRvc2VSYXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYWUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGFlKScsdnI6XCJTTFwiLG5hbWU6XCJJSVRvQ292ZXJEaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGIwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiMCknLHZyOlwiU1NcIixuYW1lOlwiTGFzdEZyYW1lUGhhc2UxXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGIxKScsdnI6XCJTU1wiLG5hbWU6XCJGcmFtZVJhdGVQaGFzZTFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjIpJyx2cjpcIlNTXCIsbmFtZTpcIkxhc3RGcmFtZVBoYXNlMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGIzKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiMyknLHZyOlwiU1NcIixuYW1lOlwiRnJhbWVSYXRlUGhhc2UyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGI0KScsdnI6XCJTU1wiLG5hbWU6XCJMYXN0RnJhbWVQaGFzZTNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiNSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjUpJyx2cjpcIlNTXCIsbmFtZTpcIkZyYW1lUmF0ZVBoYXNlM1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGI2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiNiknLHZyOlwiU1NcIixuYW1lOlwiTGFzdEZyYW1lUGhhc2U0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjcpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGI3KScsdnI6XCJTU1wiLG5hbWU6XCJGcmFtZVJhdGVQaGFzZTRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYjgpJyx2cjpcIlNTXCIsbmFtZTpcIkdhbW1hT2ZOYXRpdmVJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGI5KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiOSknLHZyOlwiU1NcIixuYW1lOlwiR2FtbWFPZlRWU3lzdGVtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYmIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGJiKScsdnI6XCJTTFwiLG5hbWU6XCJQaXhlbHNoaWZ0WFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGJjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiYyknLHZyOlwiU0xcIixuYW1lOlwiUGl4ZWxzaGlmdFlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiZCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYmQpJyx2cjpcIlNMXCIsbmFtZTpcIk1hc2tBdmVyYWdlRmFjdG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYmUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGJlKScsdnI6XCJTTFwiLG5hbWU6XCJCbGFua2luZ0NpcmNsZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixiZiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYmYpJyx2cjpcIlNMXCIsbmFtZTpcIkNpcmNsZVJvd1N0YXJ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGMwKScsdnI6XCJTTFwiLG5hbWU6XCJDaXJjbGVSb3dFbmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjMSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzEpJyx2cjpcIlNMXCIsbmFtZTpcIkNpcmNsZUNvbHVtblN0YXJ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGMyKScsdnI6XCJTTFwiLG5hbWU6XCJDaXJjbGVDb2x1bW5FbmRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzMpJyx2cjpcIlNMXCIsbmFtZTpcIkNpcmNsZURpYW1ldGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM0KScsdnI6XCJTTFwiLG5hbWU6XCJSZWN0YW5ndWxhckNvbGxpbWF0ZXJGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM1KScsdnI6XCJTTFwiLG5hbWU6XCJSZWN0YW5nbGVSb3dTdGFydFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjNiknLHZyOlwiU0xcIixuYW1lOlwiUmVjdGFuZ2xlUm93RW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzcpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM3KScsdnI6XCJTTFwiLG5hbWU6XCJSZWN0YW5nbGVDb2x1bW5TdGFydFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM4KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjOCknLHZyOlwiU0xcIixuYW1lOlwiUmVjdGFuZ2xlQ29sdW1uRW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsYzkpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGM5KScsdnI6XCJTTFwiLG5hbWU6XCJSZWN0YW5nbGVBbmd1bGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsY2EpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGNhKScsdnI6XCJTTFwiLG5hbWU6XCJJcmlzQ29sbGltYXRvckZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjYiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsY2IpJyx2cjpcIlNMXCIsbmFtZTpcIklyaXNSb3dTdGFydFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGNjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjYyknLHZyOlwiU0xcIixuYW1lOlwiSXJpc1Jvd0VuZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGNkKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixjZCknLHZyOlwiU0xcIixuYW1lOlwiSXJpc0NvbHVtblN0YXJ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsY2UpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGNlKScsdnI6XCJTTFwiLG5hbWU6XCJJcmlzQ29sdW1uRW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsY2YpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGNmKScsdnI6XCJTTFwiLG5hbWU6XCJJcmlzQW5ndWxhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGQxKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkMSknLHZyOlwiU1NcIixuYW1lOlwiTnVtYmVyT2ZGcmFtZXNQbGFuZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGQyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkMiknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkMyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDMpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGQ0KScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGQ1KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkNSknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDYpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkNyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDcpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDgpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZDkpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGQ5KScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGRhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkYSknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkYiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZGIpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZGMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGRjKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGRkKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixkZCknLHZyOlwiU0xcIixuYW1lOlwiQW5hdG9taWNCYWNrZ3JvdW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZGUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGRlKScsdnI6XCJTTFwiLG5hbWU6XCJBdXRvV2luZG93QmFzZVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBBXCIsZGYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGRmKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQVwiLGUwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEFcIixlMCknLHZyOlwiU0xcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyOCknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjgpJyx2cjpcIlNMXCIsbmFtZTpcIkZsdW9yb1RpbWVyQlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDI5KSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyOSknLHZyOlwiU0xcIixuYW1lOlwiRmx1b3JvU2tpbkRvc2VCXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMmEpJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDJhKScsdnI6XCJTTFwiLG5hbWU6XCJUb3RhbFNraW5Eb3NlQlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDJiKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyYiknLHZyOlwiU0xcIixuYW1lOlwiRmx1b3JvRG9zZUFyZWFQcm9kdWN0QlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDJjKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyYyknLHZyOlwiU0xcIixuYW1lOlwiVG90YWxEb3NlQXJlYVByb2R1Y3RCXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMTgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDE4KScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDE5KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwxOSknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwxYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMWEpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMWIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDFiKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDFjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwxYyknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwxZCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMWQpJyx2cjpcIlNTXCIsbmFtZTpcIkludGVybmFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMWUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDFlKScsdnI6XCJTU1wiLG5hbWU6XCJJbnRlcm5hbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDFmKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwxZiknLHZyOlwiU1NcIixuYW1lOlwiSW50ZXJuYWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjApJyx2cjpcIlNMXCIsbmFtZTpcIlN5c3RlbUNhbGliRmFjdG9yUGxhbmVCXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMjgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMmEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyYyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMmMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwyZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMmUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMzApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMzIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzNCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMzQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMzYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzOCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsMzgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsM2EpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzYyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsM2MpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiwzZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsM2UpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNDApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNDIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNDQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNDYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNDgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNGEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDRjKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw0YyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNGUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDRlKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNTApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNTQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNTYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNTgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNWEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1YyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNWMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDVlKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw1ZSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNjApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDYwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw2MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNjIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDY0KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw2NCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNjYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDY2KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw2OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNjgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDZhKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw2YSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNmMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDZjKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw2ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNmUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDcwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw3MCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNzIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDcyKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNzQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDc0KScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNzYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDc2KScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsNzgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDc4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw3YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsN2EpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw3YyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsN2MpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw3ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsN2UpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsODApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsODIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsODQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsODYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsODgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOGEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4YyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOGMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw4ZSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOGUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5MCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOTApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5MiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5NCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOTQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5NiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOTYpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5OCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOTgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5YSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOWEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDljKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIiw5YyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsOWUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLDllKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIixhMCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYTApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLGEyKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIixhMiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLGE0KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYTYpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLGE2KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYTgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgUkEgUExBTkUgQlwiLGE4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIixhYSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYWEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFJBIFBMQU5FIEJcIixhYyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBSQSBQTEFORSBCXCIsYWMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDEwKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50VUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSSVNcIiwxMSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSSVNcIiwxMSknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudElEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSSVNcIiwyMCknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSSVNcIiwyMCknLHZyOlwiREFcIixuYW1lOlwiUGF0aWVudFJlZ2lzdHJhdGlvbkRhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDIxKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDIxKScsdnI6XCJUTVwiLG5hbWU6XCJQYXRpZW50UmVnaXN0cmF0aW9uVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNJRU1FTlMgUklTXCIsMzApJzp7dGFnOicoMDAxMSxcIlNJRU1FTlMgUklTXCIsMzApJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRuYW1lUklTXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSSVNcIiwzMSknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSSVNcIiwzMSknLHZyOlwiTFRcIixuYW1lOlwiUGF0aWVudHByZW5hbWVSSVNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDQwKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDQwKScsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50SG9zcGl0YWxTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDQxKSc6e3RhZzonKDAwMTEsXCJTSUVNRU5TIFJJU1wiLDQxKScsdnI6XCJMVFwiLG5hbWU6XCJNZWRpY2FsQWxlcnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU0lFTUVOUyBSSVNcIiw0MiknOnt0YWc6JygwMDExLFwiU0lFTUVOUyBSSVNcIiw0MiknLHZyOlwiTFRcIixuYW1lOlwiQ29udHJhc3RBbGxlcmdpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMzEsXCJTSUVNRU5TIFJJU1wiLDEwKSc6e3RhZzonKDAwMzEsXCJTSUVNRU5TIFJJU1wiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJSZXF1ZXN0VUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDMxLFwiU0lFTUVOUyBSSVNcIiw0NSknOnt0YWc6JygwMDMxLFwiU0lFTUVOUyBSSVNcIiw0NSknLHZyOlwiTFRcIixuYW1lOlwiUmVxdWVzdGluZ1BoeXNpY2lhblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMSxcIlNJRU1FTlMgUklTXCIsNTApJzp7dGFnOicoMDAzMSxcIlNJRU1FTlMgUklTXCIsNTApJyx2cjpcIkxUXCIsbmFtZTpcIlJlcXVlc3RlZFBoeXNpY2lhblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAzMyxcIlNJRU1FTlMgUklTXCIsMTApJzp7dGFnOicoMDAzMyxcIlNJRU1FTlMgUklTXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIlBhdGllbnRTdHVkeVVJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDApJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDApJyx2cjpcIlVTXCIsbmFtZTpcIkFjcXVpc2l0aW9uVHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDEpJyx2cjpcIlVTXCIsbmFtZTpcIkFjcXVpc2l0aW9uTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDIpJyx2cjpcIlVTXCIsbmFtZTpcIkZvb3Rzd2l0Y2hJbmRleFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDMpJyx2cjpcIlVTXCIsbmFtZTpcIkFjcXVpc2l0aW9uUm9vbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDQpJyx2cjpcIlNMXCIsbmFtZTpcIkN1cnJlbnRUaW1lUHJvZHVjdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDUpJyx2cjpcIlNMXCIsbmFtZTpcIkRvc2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDA2KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDA2KScsdnI6XCJTTFwiLG5hbWU6XCJTa2luRG9zZVBlcmNlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDA3KSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDA3KScsdnI6XCJTTFwiLG5hbWU6XCJTa2luRG9zZUFjY3VtdWxhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDgpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMDgpJyx2cjpcIlNMXCIsbmFtZTpcIlNraW5Eb3NlUmF0ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEEpJyx2cjpcIlVMXCIsbmFtZTpcIkNvcHBlckZpbHRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEIpJyx2cjpcIlVTXCIsbmFtZTpcIk1lYXN1cmluZ0ZpZWxkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwwQyknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwwQyknLHZyOlwiU1NcIixuYW1lOlwiUG9zdEJsYW5raW5nQ2lyY2xlXCIsdm06XCIzXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwwRCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwwRCknLHZyOlwiU1NcIixuYW1lOlwiRHluYUFuZ2xlc1wiLHZtOlwiMi0yblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMEUpJyx2cjpcIlNTXCIsbmFtZTpcIlRvdGFsU3RlcHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDBGKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDBGKScsdnI6XCJTTFwiLG5hbWU6XCJEeW5hWFJheUluZm9cIix2bTpcIjMtM25cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDEwKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDEwKScsdnI6XCJVU1wiLG5hbWU6XCJNb2RhbGl0eUxVVElucHV0R2FtbWFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDExKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDExKScsdnI6XCJVU1wiLG5hbWU6XCJNb2RhbGl0eUxVVE91dHB1dEdhbW1hXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxMiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxMiknLHZyOlwiT0JcIixuYW1lOlwiU0hfU1RQQVJcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTMpJyx2cjpcIlVTXCIsbmFtZTpcIkFjcXVpc2l0aW9uWm9vbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTQpJyx2cjpcIlNTXCIsbmFtZTpcIkR5bmFBbmd1bGF0aW9uU3RlcFdpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxNSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxNSknLHZyOlwiVVNcIixuYW1lOlwiSGFybW9uaXphdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTYpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTYpJyx2cjpcIlVTXCIsbmFtZTpcIkRSU2luZ2xlRmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTcpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMTcpJyx2cjpcIlNMXCIsbmFtZTpcIlNvdXJjZVRvSXNvY2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxOCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxOCknLHZyOlwiVVNcIixuYW1lOlwiUHJlc3N1cmVEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxOSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwxOSknLHZyOlwiU0xcIixuYW1lOlwiRUNHSW5kZXhBcnJheVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUEpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUEpJyx2cjpcIlVTXCIsbmFtZTpcIkZERmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUIpJyx2cjpcIk9CXCIsbmFtZTpcIlNIX1pPT01cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDFDKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDFDKScsdnI6XCJPQlwiLG5hbWU6XCJTSF9DT0xQQVJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDFEKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDFEKScsdnI6XCJVU1wiLG5hbWU6XCJLX0ZhY3RvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUUpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUUpJyx2cjpcIlVTXCIsbmFtZTpcIkVWRVwiLHZtOlwiOFwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUYpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMUYpJyx2cjpcIlNMXCIsbmFtZTpcIlRvdGFsU2NlbmVUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyMCknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyMCknLHZyOlwiVVNcIixuYW1lOlwiUmVzdG9yZUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDIxKSc6e3RhZzonKDAwMjEsXCJTSUVNRU5TIFNNUy1BWCAgQUNRIDEuMFwiLDIxKScsdnI6XCJVU1wiLG5hbWU6XCJTdGFuZE1vdmVtZW50RmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjIpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjIpJyx2cjpcIlVTXCIsbmFtZTpcIkZEUm93c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjMpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjMpJyx2cjpcIlVTXCIsbmFtZTpcIkZEQ29sdW1uc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjQpJzp7dGFnOicoMDAyMSxcIlNJRU1FTlMgU01TLUFYICBBQ1EgMS4wXCIsMjQpJyx2cjpcIlVTXCIsbmFtZTpcIlRhYmxlTW92ZW1lbnRGbGFnXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyNSknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyNSknLHZyOlwiTE9cIixuYW1lOlwiT3JpZ2luYWxPcmdhblByb2dyYW1OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyNiknOnt0YWc6JygwMDIxLFwiU0lFTUVOUyBTTVMtQVggIEFDUSAxLjBcIiwyNiknLHZyOlwiRFNcIixuYW1lOlwiQ3Jpc3B5WFBJRmlsdGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDApJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDAwKScsdnI6XCJVU1wiLG5hbWU6XCJWaWV3TmF0aXZlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDEpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDAxKScsdnI6XCJVU1wiLG5hbWU6XCJPcmlnaW5hbFNlcmllc051bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDAyKSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwMiknLHZyOlwiVVNcIixuYW1lOlwiT3JpZ2luYWxJbWFnZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDAzKSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwMyknLHZyOlwiVVNcIixuYW1lOlwiV2luQ2VudGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDQpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDA0KScsdnI6XCJVU1wiLG5hbWU6XCJXaW5XaWR0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDA1KSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwNSknLHZyOlwiVVNcIixuYW1lOlwiV2luQnJpZ2h0bmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDA2KSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwNiknLHZyOlwiVVNcIixuYW1lOlwiV2luQ29udHJhc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwNyknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDcpJyx2cjpcIlVTXCIsbmFtZTpcIk9yaWdpbmFsRnJhbWVOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwOCknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDgpJyx2cjpcIlVTXCIsbmFtZTpcIk9yaWdpbmFsTWFza0ZyYW1lTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMDkpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDA5KScsdnI6XCJVU1wiLG5hbWU6XCJPcGFjXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEEpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDBBKScsdnI6XCJVU1wiLG5hbWU6XCJPcmlnaW5hbE51bWJlck9mRnJhbWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEIpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDBCKScsdnI6XCJEU1wiLG5hbWU6XCJPcmlnaW5hbFNjZW5lRHVyYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwQyknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEMpJyx2cjpcIkxPXCIsbmFtZTpcIklkZW50aWZpZXJMT0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEQpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDBEKScsdnI6XCJTU1wiLG5hbWU6XCJPcmlnaW5hbFNjZW5lVkZSSW5mb1wiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEUpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDBFKScsdnI6XCJTU1wiLG5hbWU6XCJPcmlnaW5hbEZyYW1lRUNHUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwwRiknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMEYpJyx2cjpcIlNTXCIsbmFtZTpcIk9yaWdpbmFsRUNHMXN0RnJhbWVPZmZzZXRfcmV0aXJlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDEwKSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwxMCknLHZyOlwiU1NcIixuYW1lOlwiWm9vbUZsYWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwxMSknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMTEpJyx2cjpcIlVTXCIsbmFtZTpcIkZsZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwxMiknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMTIpJyx2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mTWFza0ZyYW1lc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDEzKSc6e3RhZzonKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwxMyknLHZyOlwiVVNcIixuYW1lOlwiTnVtYmVyT2ZGaWxsRnJhbWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMTQpJzp7dGFnOicoMDAyNSxcIlNJRU1FTlMgU01TLUFYICBPUklHSU5BTCBJTUFHRSBJTkZPIDEuMFwiLDE0KScsdnI6XCJVU1wiLG5hbWU6XCJTZXJpZXNOdW1iZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTSUVNRU5TIFNNUy1BWCAgT1JJR0lOQUwgSU1BR0UgSU5GTyAxLjBcIiwxNSknOnt0YWc6JygwMDI1LFwiU0lFTUVOUyBTTVMtQVggIE9SSUdJTkFMIElNQUdFIElORk8gMS4wXCIsMTUpJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDAwKSc6e3RhZzonKDAwMjMsXCJTSUVNRU5TIFNNUy1BWCAgUVVBTlQgMS4wXCIsMDApJyx2cjpcIkRTXCIsbmFtZTpcIkhvcml6b250YWxDYWxpYnJhdGlvblBpeGVsU2l6ZVwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwMSknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDAxKScsdnI6XCJEU1wiLG5hbWU6XCJWZXJ0aWNhbENhbGlicmF0aW9uUGl4ZWxTaXplXCIsdm06XCIyXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDAyKSc6e3RhZzonKDAwMjMsXCJTSUVNRU5TIFNNUy1BWCAgUVVBTlQgMS4wXCIsMDIpJyx2cjpcIkxPXCIsbmFtZTpcIkNhbGlicmF0aW9uT2JqZWN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDAzKSc6e3RhZzonKDAwMjMsXCJTSUVNRU5TIFNNUy1BWCAgUVVBTlQgMS4wXCIsMDMpJyx2cjpcIkRTXCIsbmFtZTpcIkNhbGlicmF0aW9uT2JqZWN0U2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwNCknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDA0KScsdnI6XCJMT1wiLG5hbWU6XCJDYWxpYnJhdGlvbk1ldGhvZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwNSknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDA1KScsdnI6XCJTVFwiLG5hbWU6XCJGaWxlbmFtZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwNiknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDA2KScsdnI6XCJJU1wiLG5hbWU6XCJGcmFtZU51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwNyknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDA3KScsdnI6XCJJU1wiLG5hbWU6XCJDYWxpYnJhdGlvbkZhY3Rvck11bHRpcGxpY2l0eVwiLHZtOlwiMlwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNJRU1FTlMgU01TLUFYICBRVUFOVCAxLjBcIiwwOCknOnt0YWc6JygwMDIzLFwiU0lFTUVOUyBTTVMtQVggIFFVQU5UIDEuMFwiLDA4KScsdnI6XCJJU1wiLG5hbWU6XCJDYWxpYnJhdGlvblRPRFZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDApJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDAwKScsdnI6XCJVU1wiLG5hbWU6XCJSZXZpZXdNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDEpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDAxKScsdnI6XCJVU1wiLG5hbWU6XCJBbmF0b21pY2FsQmFja2dyb3VuZFBlcmNlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwMiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDIpJyx2cjpcIlVTXCIsbmFtZTpcIk51bWJlck9mUGhhc2VzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDAzKScsdnI6XCJVU1wiLG5hbWU6XCJBcHBseUFuYXRvbWljYWxCYWNrZ3JvdW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDA0KScsdnI6XCJTU1wiLG5hbWU6XCJQaXhlbFNoaWZ0QXJyYXlcIix2bTpcIjQtNG5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwNSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDUpJyx2cjpcIlVTXCIsbmFtZTpcIkJyaWdodG5lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwNiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDYpJyx2cjpcIlVTXCIsbmFtZTpcIkNvbnRyYXN0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDcpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDA3KScsdnI6XCJVU1wiLG5hbWU6XCJFbmFibGVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMDgpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDA4KScsdnI6XCJVU1wiLG5hbWU6XCJOYXRpdmVFZGdlRW5oYW5jZW1lbnRQZXJjZW50R2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDA5KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwOSknLHZyOlwiU1NcIixuYW1lOlwiTmF0aXZlRWRnZUVuaGFuY2VtZW50TFVUSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwQSknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMEEpJyx2cjpcIlNTXCIsbmFtZTpcIk5hdGl2ZUVkZ2VFbmhhbmNlbWVudEtlcm5lbFNpemVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwQiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMEIpJyx2cjpcIlVTXCIsbmFtZTpcIlN1YnRyRWRnZUVuaGFuY2VtZW50UGVyY2VudEdhaW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwQyknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMEMpJyx2cjpcIlNTXCIsbmFtZTpcIlN1YnRyRWRnZUVuaGFuY2VtZW50TFVUSW5kZXhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwRCknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMEQpJyx2cjpcIlNTXCIsbmFtZTpcIlN1YnRyRWRnZUVuaGFuY2VtZW50S2VybmVsU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDBFKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwRSknLHZyOlwiVVNcIixuYW1lOlwiRmFkZVBlcmNlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwwRiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMEYpJyx2cjpcIlVTXCIsbmFtZTpcIkZsaXBwZWRCZWZvcmVMYXRlcmFsaXR5QXBwbGllZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDEwKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiQXBwbHlGYWRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMTIpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDEyKScsdnI6XCJVU1wiLG5hbWU6XCJab29tXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMTMpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDEzKScsdnI6XCJTU1wiLG5hbWU6XCJQYW5YXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMTQpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDE0KScsdnI6XCJTU1wiLG5hbWU6XCJQYW5ZXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMTUpJzp7dGFnOicoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDE1KScsdnI6XCJTU1wiLG5hbWU6XCJOYXRpdmVFZGdlRW5oYW5jZW1lbnRBZHZQZXJjR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDE2KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxNiknLHZyOlwiU1NcIixuYW1lOlwiU3VidHJFZGdlRW5oYW5jZW1lbnRBZHZQZXJjR2FpblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDE3KSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxNyknLHZyOlwiVVNcIixuYW1lOlwiSW52ZXJ0RmxhZ1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDFBKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxQSknLHZyOlwiT0JcIixuYW1lOlwiUXVhbnQxS092ZXJsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxQiknOnt0YWc6JygwMDE5LFwiU0lFTUVOUyBTTVMtQVggIFZJRVcgMS4wXCIsMUIpJyx2cjpcIlVTXCIsbmFtZTpcIk9yaWdpbmFsUmVzb2x1dGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDFDKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxQyknLHZyOlwiRFNcIixuYW1lOlwiQXV0b1dpbmRvd0NlbnRlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNJRU1FTlMgU01TLUFYICBWSUVXIDEuMFwiLDFEKSc6e3RhZzonKDAwMTksXCJTSUVNRU5TIFNNUy1BWCAgVklFVyAxLjBcIiwxRCknLHZyOlwiRFNcIixuYW1lOlwiQXV0b1dpbmRvd1dpZHRoXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTkVUXCIsMDEpJzp7dGFnOicoMDAwOSxcIlNJRU5FVFwiLDAxKScsdnI6XCJVU1wiLG5hbWU6XCJTSUVORVRDb21tYW5kRmllbGRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTSUVORVRcIiwxNCknOnt0YWc6JygwMDA5LFwiU0lFTkVUXCIsMTQpJyx2cjpcIkxUXCIsbmFtZTpcIlJlY2VpdmVyUExBXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTkVUXCIsMTYpJzp7dGFnOicoMDAwOSxcIlNJRU5FVFwiLDE2KScsdnI6XCJVU1wiLG5hbWU6XCJUcmFuc2ZlclByaW9yaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU0lFTkVUXCIsMjkpJzp7dGFnOicoMDAwOSxcIlNJRU5FVFwiLDI5KScsdnI6XCJMVFwiLG5hbWU6XCJBY3R1YWxVc2VyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDk1LFwiU0lFTkVUXCIsMDEpJzp7dGFnOicoMDA5NSxcIlNJRU5FVFwiLDAxKScsdnI6XCJMVFwiLG5hbWU6XCJFeGFtaW5hdGlvbkZvbGRlcklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDk1LFwiU0lFTkVUXCIsMDQpJzp7dGFnOicoMDA5NSxcIlNJRU5FVFwiLDA0KScsdnI6XCJVTFwiLG5hbWU6XCJGb2xkZXJSZXBvcnRlZFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA5NSxcIlNJRU5FVFwiLDA1KSc6e3RhZzonKDAwOTUsXCJTSUVORVRcIiwwNSknLHZyOlwiTFRcIixuYW1lOlwiRm9sZGVyUmVwb3J0aW5nUmFkaW9sb2dpc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwOTUsXCJTSUVORVRcIiwwNyknOnt0YWc6JygwMDk1LFwiU0lFTkVUXCIsMDcpJyx2cjpcIkxUXCIsbmFtZTpcIlNJRU5FVElTQVBMQVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDA5OSxcIlNJRU5FVFwiLDAyKSc6e3RhZzonKDAwOTksXCJTSUVORVRcIiwwMiknLHZyOlwiVUxcIixuYW1lOlwiRGF0YU9iamVjdEF0dHJpYnV0ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEkgUkVMRUFTRSAxXCIsMTApJzp7dGFnOicoMDAwOSxcIlNQSSBSRUxFQVNFIDFcIiwxMCknLHZyOlwiTFRcIixuYW1lOlwiQ29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEkgUkVMRUFTRSAxXCIsMTUpJzp7dGFnOicoMDAwOSxcIlNQSSBSRUxFQVNFIDFcIiwxNSknLHZyOlwiTE9cIixuYW1lOlwiU1BJSW1hZ2VVSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEkgUkVMRUFTRSAxXCIsNDApJzp7dGFnOicoMDAwOSxcIlNQSSBSRUxFQVNFIDFcIiw0MCknLHZyOlwiVVNcIixuYW1lOlwiRGF0YU9iamVjdFR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEkgUkVMRUFTRSAxXCIsNDEpJzp7dGFnOicoMDAwOSxcIlNQSSBSRUxFQVNFIDFcIiw0MSknLHZyOlwiTE9cIixuYW1lOlwiRGF0YU9iamVjdFN1YnR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTUEkgUkVMRUFTRSAxXCIsMTApJzp7dGFnOicoMDAxMSxcIlNQSSBSRUxFQVNFIDFcIiwxMCknLHZyOlwiTE9cIixuYW1lOlwiT3JnYW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTUEkgUkVMRUFTRSAxXCIsMTUpJzp7dGFnOicoMDAxMSxcIlNQSSBSRUxFQVNFIDFcIiwxNSknLHZyOlwiTE9cIixuYW1lOlwiQWxsZXJneUluZGljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTUEkgUkVMRUFTRSAxXCIsMjApJzp7dGFnOicoMDAxMSxcIlNQSSBSRUxFQVNFIDFcIiwyMCknLHZyOlwiTE9cIixuYW1lOlwiUHJlZ25hbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJIFJFTEVBU0UgMVwiLDYwKSc6e3RhZzonKDAwMjksXCJTUEkgUkVMRUFTRSAxXCIsNjApJyx2cjpcIkxUXCIsbmFtZTpcIkNvbXByZXNzaW9uQWxnb3JpdGhtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJIFJlbGVhc2UgMVwiLDEwKSc6e3RhZzonKDAwMDksXCJTUEkgUmVsZWFzZSAxXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIkNvbW1lbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJIFJlbGVhc2UgMVwiLDE1KSc6e3RhZzonKDAwMDksXCJTUEkgUmVsZWFzZSAxXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIlNQSUltYWdlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJIFJlbGVhc2UgMVwiLDQwKSc6e3RhZzonKDAwMDksXCJTUEkgUmVsZWFzZSAxXCIsNDApJyx2cjpcIlVTXCIsbmFtZTpcIkRhdGFPYmplY3RUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJIFJlbGVhc2UgMVwiLDQxKSc6e3RhZzonKDAwMDksXCJTUEkgUmVsZWFzZSAxXCIsNDEpJyx2cjpcIkxPXCIsbmFtZTpcIkRhdGFPYmplY3RTdWJ0eXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU1BJIFJlbGVhc2UgMVwiLDEwKSc6e3RhZzonKDAwMTEsXCJTUEkgUmVsZWFzZSAxXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIk9yZ2FuXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU1BJIFJlbGVhc2UgMVwiLDE1KSc6e3RhZzonKDAwMTEsXCJTUEkgUmVsZWFzZSAxXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIkFsbGVyZ3lJbmRpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU1BJIFJlbGVhc2UgMVwiLDIwKSc6e3RhZzonKDAwMTEsXCJTUEkgUmVsZWFzZSAxXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlByZWduYW5jeVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSSBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDI5LFwiU1BJIFJlbGVhc2UgMVwiLDYwKScsdnI6XCJMVFwiLG5hbWU6XCJDb21wcmVzc2lvbkFsZ29yaXRobVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSVwiLDEwKSc6e3RhZzonKDAwMDksXCJTUElcIiwxMCknLHZyOlwiTE9cIixuYW1lOlwiQ29tbWVudHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUElcIiwxNSknOnt0YWc6JygwMDA5LFwiU1BJXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIlNQSUltYWdlVUlEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJXCIsNDApJzp7dGFnOicoMDAwOSxcIlNQSVwiLDQwKScsdnI6XCJVU1wiLG5hbWU6XCJEYXRhT2JqZWN0VHlwZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSVwiLDQxKSc6e3RhZzonKDAwMDksXCJTUElcIiw0MSknLHZyOlwiTFRcIixuYW1lOlwiRGF0YU9iamVjdFN1YnR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTUElcIiwxMCknOnt0YWc6JygwMDExLFwiU1BJXCIsMTApJyx2cjpcIkxUXCIsbmFtZTpcIk9yZ2FuXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU1BJXCIsMTUpJzp7dGFnOicoMDAxMSxcIlNQSVwiLDE1KScsdnI6XCJMVFwiLG5hbWU6XCJBbGxlcmd5SW5kaWNhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNQSVwiLDIwKSc6e3RhZzonKDAwMTEsXCJTUElcIiwyMCknLHZyOlwiTFRcIixuYW1lOlwiUHJlZ25hbmN5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJXCIsNjApJzp7dGFnOicoMDAyOSxcIlNQSVwiLDYwKScsdnI6XCJMVFwiLG5hbWU6XCJDb21wcmVzc2lvbkFsZ29yaXRobVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDAwKSc6e3RhZzonKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwwMCknLHZyOlwiTFRcIixuYW1lOlwiRGF0YU9iamVjdFJlY29nbml0aW9uQ29kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDA0KSc6e3RhZzonKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwwNCknLHZyOlwiTE9cIixuYW1lOlwiSW1hZ2VEYXRhQ29uc2lzdGVuY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwwOCknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMDgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwxMiknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMTIpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwxNSknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMTUpJyx2cjpcIkxPXCIsbmFtZTpcIlVuaXF1ZUlkZW50aWZpZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwxNiknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMTYpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwxOCknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMTgpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwyMSknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMjEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwzMSknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzEpJyx2cjpcIkxUXCIsbmFtZTpcIlBBQ1NVbmlxdWVJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzQpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDM0KScsdnI6XCJMVFwiLG5hbWU6XCJDbHVzdGVyVW5pcXVlSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDM4KSc6e3RhZzonKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwzOCknLHZyOlwiTFRcIixuYW1lOlwiU3lzdGVtVW5pcXVlSWRlbnRpZmllclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDM5KSc6e3RhZzonKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiwzOSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDUxKSc6e3RhZzonKDAwMDksXCJTUEktUCBSZWxlYXNlIDFcIiw1MSknLHZyOlwiTFRcIixuYW1lOlwiU3R1ZHlVbmlxdWVJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjEpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDYxKScsdnI6XCJMVFwiLG5hbWU6XCJTZXJpZXNVbmlxdWVJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsOTEpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDkxKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsZjIpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGYyKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsZjMpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGYzKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsZjQpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGY0KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsZjUpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGY1KScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxXCIsZjcpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGY3KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiU1BJLVAgUmVsZWFzZSAxXCIsMTApJzp7dGFnOicoMDAxMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJQYXRpZW50RW50cnlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDIxKSc6e3RhZzonKDAwMTEsXCJTUEktUCBSZWxlYXNlIDFcIiwyMSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDIyKSc6e3RhZzonKDAwMTEsXCJTUEktUCBSZWxlYXNlIDFcIiwyMiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMxKSc6e3RhZzonKDAwMTEsXCJTUEktUCBSZWxlYXNlIDFcIiwzMSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMyKSc6e3RhZzonKDAwMTEsXCJTUEktUCBSZWxlYXNlIDFcIiwzMiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDAwKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwwMCknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDAxKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwwMSknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDAyKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwwMiknLHZyOlwiVU5cIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDEwKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwxMCknLHZyOlwiVVNcIixuYW1lOlwiTWFpbnNGcmVxdWVuY3lcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwyNSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMjUpJyx2cjpcIkxUXCIsbmFtZTpcIk9yaWdpbmFsUGl4ZWxEYXRhUXVhbGl0eVwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzApJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMwKScsdnI6XCJVU1wiLG5hbWU6XCJFQ0dUcmlnZ2VyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzEpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMxKScsdnI6XCJVTlwiLG5hbWU6XCJFQ0cxT2Zmc2V0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzIpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMyKScsdnI6XCJVTlwiLG5hbWU6XCJFQ0cyT2Zmc2V0MVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDMzKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiwzMyknLHZyOlwiVU5cIixuYW1lOlwiRUNHMk9mZnNldDJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw1MCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNTApJyx2cjpcIlVTXCIsbmFtZTpcIlZpZGVvU2Nhbk1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw1MSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNTEpJyx2cjpcIlVTXCIsbmFtZTpcIlZpZGVvTGluZVJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjApJyx2cjpcIlVTXCIsbmFtZTpcIlhyYXlUZWNobmlxdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw2MSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjEpJyx2cjpcIkRTXCIsbmFtZTpcIkltYWdlSWRlbnRpZmllckZyb21hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDYyKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw2MiknLHZyOlwiVVNcIixuYW1lOlwiSXJpc0RpYXBocmFnbVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDYzKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw2MyknLHZyOlwiQ1NcIixuYW1lOlwiRmlsdGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjQpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDY0KScsdnI6XCJDU1wiLG5hbWU6XCJDaW5lUGFyYWxsZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw2NSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjUpJyx2cjpcIkNTXCIsbmFtZTpcIkNpbmVNYXN0ZXJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw3MCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNzApJyx2cjpcIlVTXCIsbmFtZTpcIkV4cG9zdXJlQ2hhbm5lbFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDcxKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw3MSknLHZyOlwiVU5cIixuYW1lOlwiRXhwb3N1cmVDaGFubmVsRmlyc3RJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDcyKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw3MiknLHZyOlwiVVNcIixuYW1lOlwiUHJvY2Vzc2luZ0NoYW5uZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw4MCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsODApJyx2cjpcIkRTXCIsbmFtZTpcIkFjcXVpc2l0aW9uRGVsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIiw4MSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsODEpJyx2cjpcIlVOXCIsbmFtZTpcIlJlbGF0aXZlSW1hZ2VUaW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsOTApJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDkwKScsdnI6XCJDU1wiLG5hbWU6XCJWaWRlb1doaXRlQ29tcHJlc3Npb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIixhMCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsYTApJyx2cjpcIlVTXCIsbmFtZTpcIkFuZ3VsYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDFcIixhMSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxXCIsYTEpJyx2cjpcIlVTXCIsbmFtZTpcIlJvdGF0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1BJLVAgUmVsZWFzZSAxXCIsMTIpJzp7dGFnOicoMDAyMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDEyKScsdnI6XCJMVFwiLG5hbWU6XCJTZXJpZXNVbmlxdWVJZGVudGlmaWVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1BJLVAgUmVsZWFzZSAxXCIsMTQpJzp7dGFnOicoMDAyMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDE0KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMDApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDAwKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCI0XCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMjApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDIwKScsdnI6XCJEU1wiLG5hbWU6XCJQaXhlbEFzcGVjdFJhdGlvXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMjUpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDI1KScsdnI6XCJMT1wiLG5hbWU6XCJQcm9jZXNzZWRQaXhlbERhdGFRdWFsaXR5XCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiwzMCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzApJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiwzOCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsMzgpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjApJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw2MSknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw2NyknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNjcpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw3MCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNzApJyx2cjpcIkxUXCIsbmFtZTpcIldpbmRvd0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNzEpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDcxKScsdnI6XCJDU1wiLG5hbWU6XCJWaWRlb0ludmVydFN1YnRyYWN0ZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw3MiknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNzIpJyx2cjpcIkNTXCIsbmFtZTpcIlZpZGVvSW52ZXJ0Tm9uc3VidHJhY3RlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDc3KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw3NyknLHZyOlwiQ1NcIixuYW1lOlwiV2luZG93U2VsZWN0U3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsNzgpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDc4KScsdnI6XCJMVFwiLG5hbWU6XCJFQ0dEaXNwbGF5UHJpbnRpbmdJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDc5KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw3OSknLHZyOlwiQ1NcIixuYW1lOlwiRUNHRGlzcGxheVByaW50aW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsN2UpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDdlKScsdnI6XCJDU1wiLG5hbWU6XCJFQ0dEaXNwbGF5UHJpbnRpbmdFbmFibGVTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw3ZiknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsN2YpJyx2cjpcIkNTXCIsbmFtZTpcIkVDR0Rpc3BsYXlQcmludGluZ1NlbGVjdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDgwKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw4MCknLHZyOlwiTFRcIixuYW1lOlwiUGh5c2lvbG9naWNhbERpc3BsYXlJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDgxKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw4MSknLHZyOlwiVVNcIixuYW1lOlwiUHJlZmVycmVkUGh5c2lvbG9naWNhbENoYW5uZWxEaXNwbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsOGUpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDhlKScsdnI6XCJDU1wiLG5hbWU6XCJQaHlzaW9sb2dpY2FsRGlzcGxheUVuYWJsZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLDhmKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIiw4ZiknLHZyOlwiQ1NcIixuYW1lOlwiUGh5c2lvbG9naWNhbERpc3BsYXlTZWxlY3RTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIixjMCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsYzApJyx2cjpcIkxUXCIsbmFtZTpcIkZ1bmN0aW9uYWxTaHV0dGVySURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIixjMSknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsYzEpJyx2cjpcIlVTXCIsbmFtZTpcIkZpZWxkT2ZTaHV0dGVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxXCIsYzUpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGM1KScsdnI6XCJMVFwiLG5hbWU6XCJGaWVsZE9mU2h1dHRlclJlY3RhbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGNlKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIixjZSknLHZyOlwiQ1NcIixuYW1lOlwiU2h1dHRlckVuYWJsZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMVwiLGNmKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDFcIixjZiknLHZyOlwiQ1NcIixuYW1lOlwiU2h1dHRlclNlbGVjdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN0ZFMSxcIlNQSS1QIFJlbGVhc2UgMVwiLDEwKSc6e3RhZzonKDdGRTEsXCJTUEktUCBSZWxlYXNlIDFcIiwxMCknLHZyOlwib3hcIixuYW1lOlwiUGl4ZWxEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIixjMCknOnt0YWc6JygwMDA5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIixjMCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsYzEpJzp7dGFnOicoMDAwOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsYzEpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDAwKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDAwKScsdnI6XCJVTlwiLG5hbWU6XCJQaHlzaW9sb2dpY2FsRGF0YVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDAxKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDAxKScsdnI6XCJVTlwiLG5hbWU6XCJQaHlzaW9sb2dpY2FsRGF0YUNoYW5uZWxBbmRLaW5kXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwMiknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwMiknLHZyOlwiVVNcIixuYW1lOlwiU2FtcGxlQml0c0FsbG9jYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDMpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDMpJyx2cjpcIlVTXCIsbmFtZTpcIlNhbXBsZUJpdHNTdG9yZWRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA0KSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA0KScsdnI6XCJVU1wiLG5hbWU6XCJTYW1wbGVIaWdoQml0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwNSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwNSknLHZyOlwiVVNcIixuYW1lOlwiU2FtcGxlUmVwcmVzZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA2KSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA2KScsdnI6XCJVTlwiLG5hbWU6XCJTbWFsbGVzdFNhbXBsZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwNyknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwNyknLHZyOlwiVU5cIixuYW1lOlwiTGFyZ2VzdFNhbXBsZVZhbHVlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwOCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwOCknLHZyOlwiVU5cIixuYW1lOlwiTnVtYmVyT2ZTYW1wbGVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwOSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwOSknLHZyOlwiVU5cIixuYW1lOlwiU2FtcGxlRGF0YVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMGEpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMGEpJyx2cjpcIlVOXCIsbmFtZTpcIlNhbXBsZVJhdGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDEwKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDEwKScsdnI6XCJVTlwiLG5hbWU6XCJQaHlzaW9sb2dpY2FsRGF0YVR5cGUyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxMSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxMSknLHZyOlwiVU5cIixuYW1lOlwiUGh5c2lvbG9naWNhbERhdGFDaGFubmVsQW5kS2luZDJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDEyKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDEyKScsdnI6XCJVU1wiLG5hbWU6XCJTYW1wbGVCaXRzQWxsb2NhdGVkMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMTMpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMTMpJyx2cjpcIlVTXCIsbmFtZTpcIlNhbXBsZUJpdHNTdG9yZWQyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxNCknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxNCknLHZyOlwiVVNcIixuYW1lOlwiU2FtcGxlSGlnaEJpdDJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE1KSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE1KScsdnI6XCJVU1wiLG5hbWU6XCJTYW1wbGVSZXByZXNlbnRhdGlvbjJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE2KSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE2KScsdnI6XCJVTlwiLG5hbWU6XCJTbWFsbGVzdFNhbXBsZVZhbHVlMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMTcpJzp7dGFnOicoMDAxOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMTcpJyx2cjpcIlVOXCIsbmFtZTpcIkxhcmdlc3RTYW1wbGVWYWx1ZTJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE4KSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDE4KScsdnI6XCJVTlwiLG5hbWU6XCJOdW1iZXJPZlNhbXBsZXMyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxOSknOnt0YWc6JygwMDE5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwxOSknLHZyOlwiVU5cIixuYW1lOlwiU2FtcGxlRGF0YTJcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDFhKSc6e3RhZzonKDAwMTksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDFhKScsdnI6XCJVTlwiLG5hbWU6XCJTYW1wbGVSYXRlMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDApJyx2cjpcIkxUXCIsbmFtZTpcIlpvb21JRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDEpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDEpJyx2cjpcIkRTXCIsbmFtZTpcIlpvb21SZWN0YW5nbGVcIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDMpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsMDMpJyx2cjpcIkRTXCIsbmFtZTpcIlpvb21GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA0KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDA0KScsdnI6XCJVU1wiLG5hbWU6XCJab29tRnVuY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDBlKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDBlKScsdnI6XCJDU1wiLG5hbWU6XCJab29tRW5hYmxlU3RhdHVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwZiknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiwwZiknLHZyOlwiQ1NcIixuYW1lOlwiWm9vbVNlbGVjdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNDApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNDApJyx2cjpcIkxUXCIsbmFtZTpcIk1hZ25pZnlpbmdHbGFzc0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiw0MSknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzFcIiw0MSknLHZyOlwiRFNcIixuYW1lOlwiTWFnbmlmeWluZ0dsYXNzUmVjdGFuZ2xlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDQzKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDQzKScsdnI6XCJEU1wiLG5hbWU6XCJNYWduaWZ5aW5nR2xhc3NGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDQ0KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7MVwiLDQ0KScsdnI6XCJVU1wiLG5hbWU6XCJNYWduaWZ5aW5nR2xhc3NGdW5jdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNGUpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNGUpJyx2cjpcIkNTXCIsbmFtZTpcIk1hZ25pZnlpbmdHbGFzc0VuYWJsZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNGYpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsxXCIsNGYpJyx2cjpcIkNTXCIsbmFtZTpcIk1hZ25pZnlpbmdHbGFzc1NlbGVjdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMDApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMDApJyx2cjpcIkxUXCIsbmFtZTpcIlN1YnRyYWN0aW9uTWFza0lEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzJcIiwwNCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzJcIiwwNCknLHZyOlwiVU5cIixuYW1lOlwiTWFza2luZ0Z1bmN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzJcIiwwYyknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzJcIiwwYyknLHZyOlwiVU5cIixuYW1lOlwiUHJvcHJpZXRhcnlNYXNraW5nUGFyYW1ldGVyc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMWUpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMWUpJyx2cjpcIkNTXCIsbmFtZTpcIlN1YnRyYWN0aW9uTWFza0VuYWJsZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMWYpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTsyXCIsMWYpJyx2cjpcIkNTXCIsbmFtZTpcIlN1YnRyYWN0aW9uTWFza1NlbGVjdFN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMDApJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMDApJyx2cjpcIkxUXCIsbmFtZTpcIkltYWdlRW5oYW5jZW1lbnRJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMDEpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMDEpJyx2cjpcIkxUXCIsbmFtZTpcIkltYWdlRW5oYW5jZW1lbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDAyKSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDAyKScsdnI6XCJMVFwiLG5hbWU6XCJDb252b2x1dGlvbklEXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwMyknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwMyknLHZyOlwiTFRcIixuYW1lOlwiQ29udm9sdXRpb25UeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwNCknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwNCknLHZyOlwiTFRcIixuYW1lOlwiQ29udm9sdXRpb25LZXJuZWxTaXplSURcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDA1KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDA1KScsdnI6XCJVU1wiLG5hbWU6XCJDb252b2x1dGlvbktlcm5lbFNpemVcIix2bTpcIjJcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDA2KSc6e3RhZzonKDAwMjksXCJTUEktUCBSZWxlYXNlIDE7M1wiLDA2KScsdnI6XCJVU1wiLG5hbWU6XCJDb252b2x1dGlvbktlcm5lbFwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwYyknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwwYyknLHZyOlwiRFNcIixuYW1lOlwiRW5oYW5jZW1lbnRHYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwxZSknOnt0YWc6JygwMDI5LFwiU1BJLVAgUmVsZWFzZSAxOzNcIiwxZSknLHZyOlwiQ1NcIixuYW1lOlwiSW1hZ2VFbmhhbmNlbWVudEVuYWJsZVN0YXR1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMWYpJzp7dGFnOicoMDAyOSxcIlNQSS1QIFJlbGVhc2UgMTszXCIsMWYpJyx2cjpcIkNTXCIsbmFtZTpcIkltYWdlRW5oYW5jZW1lbnRTZWxlY3RTdGF0dXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTEsXCJTUEktUCBSZWxlYXNlIDI7MVwiLDE4KSc6e3RhZzonKDAwMTEsXCJTUEktUCBSZWxlYXNlIDI7MVwiLDE4KScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU1BJLVAgUmVsZWFzZSAyOzFcIiwwZCknOnt0YWc6JygwMDIzLFwiU1BJLVAgUmVsZWFzZSAyOzFcIiwwZCknLHZyOlwiVUlcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNQSS1QIFJlbGVhc2UgMjsxXCIsMGUpJzp7dGFnOicoMDAyMyxcIlNQSS1QIFJlbGVhc2UgMjsxXCIsMGUpJyx2cjpcIlVJXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwwMCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMDApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwxMCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwyMCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw0MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNDApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw1MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw3MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNzApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw3NSknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNzUpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw4MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsODApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw5MCknOnt0YWc6JygwMDA5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsOTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwwOCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMDgpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwwOSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMDkpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwwYSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMGEpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwxMCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwyMCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMjApJyx2cjpcIlRNXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw1MCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2MSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2MyknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjMpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2NCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2NSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjUpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw3MCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNzApJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw4MCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsODApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw4MSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsODEpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw5MCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsOTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMiknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMyknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixiMCknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixiMSknOnt0YWc6JygwMDE5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYjEpJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwyMCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw0MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNDApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw1MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw2MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNjApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw3MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsNzApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw4MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsODApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw5MCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsOTApJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTApJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMSknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTEpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMiknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhMyknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTMpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixhNCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYTQpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixiMCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYjApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixjMCknOnt0YWc6JygwMDIxLFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsYzApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwxMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzApJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMSknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzEpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMiknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzIpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiwzMyknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsMzMpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw4MCknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsODApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIiw5MCknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsOTApJyx2cjpcIkxPXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixkMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsZDApJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1HVi1DVCBSZWxlYXNlIDFcIixkMSknOnt0YWc6JygwMDI5LFwiU1BJLVAtR1YtQ1QgUmVsZWFzZSAxXCIsZDEpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1QQ1IgUmVsZWFzZSAyXCIsMzApJzp7dGFnOicoMDAxOSxcIlNQSS1QLVBDUiBSZWxlYXNlIDJcIiwzMCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNQSS1QLVByaXZhdGUtQ1dTIFJlbGVhc2UgMVwiLDAwKSc6e3RhZzonKDAwMjEsXCJTUEktUC1Qcml2YXRlLUNXUyBSZWxlYXNlIDFcIiwwMCknLHZyOlwiTFRcIixuYW1lOlwiV2luZG93T2ZJbWFnZXNJRFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNQSS1QLVByaXZhdGUtQ1dTIFJlbGVhc2UgMVwiLDAxKSc6e3RhZzonKDAwMjEsXCJTUEktUC1Qcml2YXRlLUNXUyBSZWxlYXNlIDFcIiwwMSknLHZyOlwiQ1NcIixuYW1lOlwiV2luZG93T2ZJbWFnZXNUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1BJLVAtUHJpdmF0ZS1DV1MgUmVsZWFzZSAxXCIsMDIpJzp7dGFnOicoMDAyMSxcIlNQSS1QLVByaXZhdGUtQ1dTIFJlbGVhc2UgMVwiLDAyKScsdnI6XCJJU1wiLG5hbWU6XCJXaW5kb3dPZkltYWdlc1Njb3BlXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxMCknOnt0YWc6JygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTApJyx2cjpcIlVOXCIsbmFtZTpcIkVDR1RpbWVNYXBEYXRhQml0c0FsbG9jYXRlZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QLVByaXZhdGUtRENJIFJlbGVhc2UgMVwiLDExKSc6e3RhZzonKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxMSknLHZyOlwiVU5cIixuYW1lOlwiRUNHVGltZU1hcERhdGFCaXRzU3RvcmVkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTIpJzp7dGFnOicoMDAxOSxcIlNQSS1QLVByaXZhdGUtRENJIFJlbGVhc2UgMVwiLDEyKScsdnI6XCJVTlwiLG5hbWU6XCJFQ0dUaW1lTWFwRGF0YUhpZ2hCaXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxMyknOnt0YWc6JygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTMpJyx2cjpcIlVOXCIsbmFtZTpcIkVDR1RpbWVNYXBEYXRhUmVwcmVzZW50YXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxNCknOnt0YWc6JygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTQpJyx2cjpcIlVOXCIsbmFtZTpcIkVDR1RpbWVNYXBEYXRhU21hbGxlc3REYXRhVmFsdWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxNSknOnt0YWc6JygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTUpJyx2cjpcIlVOXCIsbmFtZTpcIkVDR1RpbWVNYXBEYXRhTGFyZ2VzdERhdGFWYWx1ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QLVByaXZhdGUtRENJIFJlbGVhc2UgMVwiLDE2KSc6e3RhZzonKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxNiknLHZyOlwiVU5cIixuYW1lOlwiRUNHVGltZU1hcERhdGFOdW1iZXJPZkRhdGFWYWx1ZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1Qcml2YXRlLURDSSBSZWxlYXNlIDFcIiwxNyknOnt0YWc6JygwMDE5LFwiU1BJLVAtUHJpdmF0ZS1EQ0kgUmVsZWFzZSAxXCIsMTcpJyx2cjpcIlVOXCIsbmFtZTpcIkVDR1RpbWVNYXBEYXRhXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1BJLVAtUHJpdmF0ZV9DRFMgUmVsZWFzZSAxXCIsNDApJzp7dGFnOicoMDAyMSxcIlNQSS1QLVByaXZhdGVfQ0RTIFJlbGVhc2UgMVwiLDQwKScsdnI6XCJJU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9DRFMgUmVsZWFzZSAxXCIsMDApJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfQ0RTIFJlbGVhc2UgMVwiLDAwKScsdnI6XCJVTlwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMzApJzp7dGFnOicoMDAxOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDMwKScsdnI6XCJEU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMzEpJzp7dGFnOicoMDAxOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDMxKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMDgpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDA4KScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMGYpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDBmKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMTApJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDEwKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMWIpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDFiKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMWMpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDFjKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsMjEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDIxKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNDMpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDQzKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNDQpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDQ0KScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNEMpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDRDKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNjcpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDY3KScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNjgpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDY4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNkEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDZBKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxXCIsNkIpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMVwiLDZCKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzFcIiwwMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzFcIiwwMCknLHZyOlwiU0xcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsxXCIsMDUpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsxXCIsMDUpJyx2cjpcIkZMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MVwiLDA2KSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MVwiLDA2KScsdnI6XCJGTFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzFcIiwyMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzFcIiwyMCknLHZyOlwiRkxcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsxXCIsMjEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsxXCIsMjEpJyx2cjpcIkZMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MVwiLENEKSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MVwiLENEKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzJcIiwwMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzJcIiwwMCknLHZyOlwiRkRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsyXCIsMDEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsyXCIsMDEpJyx2cjpcIkZEXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MlwiLDAyKSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MlwiLDAyKScsdnI6XCJGRFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzJcIiwwMyknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzJcIiwwMyknLHZyOlwiU0xcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsyXCIsMDQpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTsyXCIsMDQpJyx2cjpcIlNMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MlwiLDA1KSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7MlwiLDA1KScsdnI6XCJTTFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzNcIixDMCknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzNcIixDMCknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTszXCIsQzEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTszXCIsQzEpJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7M1wiLEMyKSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7M1wiLEMyKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzNcIixDMyknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzNcIixDMyknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTszXCIsQzQpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTszXCIsQzQpJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7M1wiLEM1KSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7M1wiLEM1KScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzRcIiwwMiknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzRcIiwwMiknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTs0XCIsOUEpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTs0XCIsOUEpJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7NFwiLEUwKSc6e3RhZzonKDAwMjksXCJTUEktUC1Qcml2YXRlX0lDUyBSZWxlYXNlIDE7NFwiLEUwKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzVcIiw1MCknOnt0YWc6JygwMDI5LFwiU1BJLVAtUHJpdmF0ZV9JQ1MgUmVsZWFzZSAxOzVcIiw1MCknLHZyOlwiQ1NcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTs1XCIsNTUpJzp7dGFnOicoMDAyOSxcIlNQSS1QLVByaXZhdGVfSUNTIFJlbGVhc2UgMTs1XCIsNTUpJyx2cjpcIkNTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1YU0ItRENJIFJlbGVhc2UgMVwiLDEwKSc6e3RhZzonKDAwMTksXCJTUEktUC1YU0ItRENJIFJlbGVhc2UgMVwiLDEwKScsdnI6XCJMVFwiLG5hbWU6XCJWaWRlb0JlYW1Cb29zdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNQSS1QLVhTQi1EQ0kgUmVsZWFzZSAxXCIsMTEpJzp7dGFnOicoMDAxOSxcIlNQSS1QLVhTQi1EQ0kgUmVsZWFzZSAxXCIsMTEpJyx2cjpcIlVTXCIsbmFtZTpcIkNoYW5uZWxHZW5lcmF0aW5nVmlkZW9TeW5jXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAtWFNCLURDSSBSZWxlYXNlIDFcIiwxMiknOnt0YWc6JygwMDE5LFwiU1BJLVAtWFNCLURDSSBSZWxlYXNlIDFcIiwxMiknLHZyOlwiVVNcIixuYW1lOlwiVmlkZW9HYWluXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1BJLVAtWFNCLURDSSBSZWxlYXNlIDFcIiwxMyknOnt0YWc6JygwMDE5LFwiU1BJLVAtWFNCLURDSSBSZWxlYXNlIDFcIiwxMyknLHZyOlwiVVNcIixuYW1lOlwiVmlkZW9PZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTUEktUC1YU0ItRENJIFJlbGVhc2UgMVwiLDIwKSc6e3RhZzonKDAwMTksXCJTUEktUC1YU0ItRENJIFJlbGVhc2UgMVwiLDIwKScsdnI6XCJEU1wiLG5hbWU6XCJSVEREYXRhQ29tcHJlc3Npb25GYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwxMSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTEpJyx2cjpcIklTXCIsbmFtZTpcIkFubm90YXRpb25OYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDEyKScsdnI6XCJMVFwiLG5hbWU6XCJBbm5vdGF0aW9uRm9udFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDEzKSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwxMyknLHZyOlwiTFRcIixuYW1lOlwiQW5ub3RhdGlvblRleHRGb3JlZ3JvdW5kQ29sb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwxNCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTQpJyx2cjpcIkxUXCIsbmFtZTpcIkFubm90YXRpb25UZXh0QmFja2dyb3VuZENvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTUpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDE1KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uVGV4dEJhY2tpbmdNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTYpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDE2KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uVGV4dEp1c3RpZmljYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwxNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTcpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25UZXh0TG9jYXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwxOCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTgpJyx2cjpcIkxUXCIsbmFtZTpcIkFubm90YXRpb25UZXh0U3RyaW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMTkpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDE5KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uVGV4dEF0dGFjaE1vZGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyMCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjApJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25UZXh0Q3Vyc29yTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDIxKSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyMSknLHZyOlwiVUxcIixuYW1lOlwiQW5ub3RhdGlvblRleHRTaGFkb3dPZmZzZXRYXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDIyKScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uVGV4dFNoYWRvd09mZnNldFlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjMpJyx2cjpcIkxUXCIsbmFtZTpcIkFubm90YXRpb25MaW5lQ29sb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyNCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjQpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25MaW5lVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjUpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDI1KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uTGluZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyNiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjYpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25MaW5lU3R5bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjcpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25MaW5lRGFzaExlbmd0aFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDI4KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwyOCknLHZyOlwiVUxcIixuYW1lOlwiQW5ub3RhdGlvbkxpbmVBdHRhY2hNb2RlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMjkpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDI5KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uTGluZVBvaW50Q291bnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzMCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzApJyx2cjpcIkZEXCIsbmFtZTpcIkFubm90YXRpb25MaW5lUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzEpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDMxKScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uTGluZUNvbnRyb2xTaXplXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDMyKScsdnI6XCJMVFwiLG5hbWU6XCJBbm5vdGF0aW9uTWFya2VyQ29sb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzMpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25NYXJrZXJUeXBlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzQpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDM0KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uTWFya2VyU2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDM1KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzNSknLHZyOlwiRkRcIixuYW1lOlwiQW5ub3RhdGlvbk1hcmtlckxvY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzYpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDM2KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uTWFya2VyQXR0YWNoTW9kZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDM3KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzNyknLHZyOlwiTFRcIixuYW1lOlwiQW5ub3RhdGlvbkdlb21Db2xvclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDM4KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzOCknLHZyOlwiVUxcIixuYW1lOlwiQW5ub3RhdGlvbkdlb21UaGlja25lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiwzOSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsMzkpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25HZW9tTGluZVN0eWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDApJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDQwKScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uR2VvbURhc2hMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiw0MSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDEpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25HZW9tRmlsbFBhdHRlcm5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiw0MiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDIpJyx2cjpcIlVMXCIsbmFtZTpcIkFubm90YXRpb25JbnRlcmFjdGl2aXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDMpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDQzKScsdnI6XCJGRFwiLG5hbWU6XCJBbm5vdGF0aW9uQXJyb3dMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEFubm90IFYxLjBcIiw0NCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDQpJyx2cjpcIkZEXCIsbmFtZTpcIkFubm90YXRpb25BcnJvd0FuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBBbm5vdCBWMS4wXCIsNDUpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgQW5ub3QgVjEuMFwiLDQ1KScsdnI6XCJVTFwiLG5hbWU6XCJBbm5vdGF0aW9uRG9udFNhdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIEdyYXBoaWNzIEV4cG9ydCBWMS4wXCIsMDApJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgR3JhcGhpY3MgRXhwb3J0IFYxLjBcIiwwMCknLHZyOlwiVUlcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMTEpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMTEpJyx2cjpcIklTXCIsbmFtZTpcIkxpbmVOYW1lXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxMiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxMiknLHZyOlwiTFRcIixuYW1lOlwiTGluZU5hbWVGb250XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxMyknLHZyOlwiVUxcIixuYW1lOlwiTGluZU5hbWVEaXNwbGF5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNCknLHZyOlwiTFRcIixuYW1lOlwiTGluZU5vcm1hbENvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNSknLHZyOlwiVUxcIixuYW1lOlwiTGluZVR5cGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDE2KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDE2KScsdnI6XCJVTFwiLG5hbWU6XCJMaW5lVGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxNyknLHZyOlwiVUxcIixuYW1lOlwiTGluZVN0eWxlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxOCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwxOCknLHZyOlwiVUxcIixuYW1lOlwiTGluZURhc2hMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDE5KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDE5KScsdnI6XCJVTFwiLG5hbWU6XCJMaW5lSW50ZXJhY3Rpdml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjApJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjApJyx2cjpcIkxUXCIsbmFtZTpcIkxpbmVNZWFzdXJlbWVudENvbG9yXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyMSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyMSknLHZyOlwiTFRcIixuYW1lOlwiTGluZU1lYXN1cmVtZW50Rm9udFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjIpJyx2cjpcIlVMXCIsbmFtZTpcIkxpbmVNZWFzdXJlbWVudERhc2hMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDIzKSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDIzKScsdnI6XCJVTFwiLG5hbWU6XCJMaW5lUG9pbnRTcGFjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjQpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjQpJyx2cjpcIkZEXCIsbmFtZTpcIkxpbmVQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDI1KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIExpbmUgVjEuMFwiLDI1KScsdnI6XCJVTFwiLG5hbWU6XCJMaW5lQ29udHJvbFBvaW50U2l6ZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjYpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjYpJyx2cjpcIlVMXCIsbmFtZTpcIkxpbmVDb250cm9sUG9pbnRTcGFjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjcpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgTGluZSBWMS4wXCIsMjcpJyx2cjpcIkZEXCIsbmFtZTpcIkxpbmVDb250cm9sUG9pbnRzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyOCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyOCknLHZyOlwiTFRcIixuYW1lOlwiTGluZUxhYmVsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyOSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBMaW5lIFYxLjBcIiwyOSknLHZyOlwiVUxcIixuYW1lOlwiTGluZURvbnRTYXZlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDExKSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTEpJyx2cjpcIklTXCIsbmFtZTpcIlJPSU5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxMiknLHZyOlwiTFRcIixuYW1lOlwiUk9JTmFtZUZvbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTMpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxMyknLHZyOlwiTFRcIixuYW1lOlwiUk9JTm9ybWFsQ29sb3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTQpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxNCknLHZyOlwiVUxcIixuYW1lOlwiUk9JRmlsbFBhdHRlcm5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTUpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxNSknLHZyOlwiVUxcIixuYW1lOlwiUk9JQnBTZWdcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTYpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxNiknLHZyOlwiVU5cIixuYW1lOlwiUk9JQnBTZWdQYWlyc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDE3KScsdnI6XCJVTFwiLG5hbWU6XCJST0lTZWVkU3BhY2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTgpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxOCknLHZyOlwiVU5cIixuYW1lOlwiUk9JU2VlZHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMTkpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwxOSknLHZyOlwiVUxcIixuYW1lOlwiUk9JTGluZVRoaWNrbmVzc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyMCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDIwKScsdnI6XCJVTFwiLG5hbWU6XCJST0lMaW5lU3R5bGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjEpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyMSknLHZyOlwiVUxcIixuYW1lOlwiUk9JTGluZURhc2hMZW5ndGhcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjIpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyMiknLHZyOlwiVUxcIixuYW1lOlwiUk9JSW50ZXJhY3Rpdml0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDIzKScsdnI6XCJVTFwiLG5hbWU6XCJST0lOYW1lUG9zaXRpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjQpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyNCknLHZyOlwiVUxcIixuYW1lOlwiUk9JTmFtZURpc3BsYXlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjUpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyNSknLHZyOlwiTFRcIixuYW1lOlwiUk9JTGFiZWxcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjYpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyNiknLHZyOlwiVUxcIixuYW1lOlwiUk9JU2hhcGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjcpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyNyknLHZyOlwiRkRcIixuYW1lOlwiUk9JU2hhcGVUaWx0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDI4KSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjgpJyx2cjpcIlVMXCIsbmFtZTpcIlJPSVNoYXBlUG9pbnRzQ291bnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMjkpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwyOSknLHZyOlwiVUxcIixuYW1lOlwiUk9JU2hhcGVQb2ludHNTcGFjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwzMCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDMwKScsdnI6XCJGRFwiLG5hbWU6XCJST0lTaGFwZVBvaW50c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwzMSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDMxKScsdnI6XCJVTFwiLG5hbWU6XCJST0lTaGFwZUNvbnRyb2xQb2ludHNDb3VudFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwzMiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDMyKScsdnI6XCJVTFwiLG5hbWU6XCJST0lTaGFwZUNvbnRyb2xQb2ludHNTcGFjZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwzMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBST0kgVjEuMFwiLDMzKScsdnI6XCJGRFwiLG5hbWU6XCJST0lTaGFwZUNvbnRyb2xQb2ludHNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFJPSSBWMS4wXCIsMzQpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgUk9JIFYxLjBcIiwzNCknLHZyOlwiVUxcIixuYW1lOlwiUk9JRG9udFNhdmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFNlcXVlbmNlIElkcyBWMS4wXCIsNDEpJzp7dGFnOicoMDAyOSxcIlNpbGhvdWV0dGUgU2VxdWVuY2UgSWRzIFYxLjBcIiw0MSknLHZyOlwiU1FcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyOSxcIlNpbGhvdWV0dGUgU2VxdWVuY2UgSWRzIFYxLjBcIiw0MiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBTZXF1ZW5jZSBJZHMgVjEuMFwiLDQyKScsdnI6XCJTUVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI5LFwiU2lsaG91ZXR0ZSBTZXF1ZW5jZSBJZHMgVjEuMFwiLDQzKSc6e3RhZzonKDAwMjksXCJTaWxob3VldHRlIFNlcXVlbmNlIElkcyBWMS4wXCIsNDMpJyx2cjpcIlNRXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMTMpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxNCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMTQpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMTcpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxOCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMTgpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxOSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMTkpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxYSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMWEpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxYiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMWIpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxYyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMWMpJyx2cjpcIlVMXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxZCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMWQpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwxZSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMWUpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyMSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyMiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyMyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyNCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyNSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyNyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjcpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyOCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjgpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwyOSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMjkpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiwzMCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsMzApJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1MiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1MyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTMpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1NCknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTQpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1NSknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTUpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1NiknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTYpJyx2cjpcIkxUXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjksXCJTaWxob3VldHRlIFYxLjBcIiw1NyknOnt0YWc6JygwMDI5LFwiU2lsaG91ZXR0ZSBWMS4wXCIsNTcpJyx2cjpcIlVOXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAxMzUsXCJTT05PV0FORCBBU1wiLDEwKSc6e3RhZzonKDAxMzUsXCJTT05PV0FORCBBU1wiLDEwKScsdnI6XCJMT1wiLG5hbWU6XCJVbHRyYXNvdW5kU2Nhbm5lck5hbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAxMzUsXCJTT05PV0FORCBBU1wiLDExKSc6e3RhZzonKDAxMzUsXCJTT05PV0FORCBBU1wiLDExKScsdnI6XCJMT1wiLG5hbWU6XCJUcmFuc2R1Y2VyU2VyaWFsXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMTM1LFwiU09OT1dBTkQgQVNcIiwxMiknOnt0YWc6JygwMTM1LFwiU09OT1dBTkQgQVNcIiwxMiknLHZyOlwiTE9cIixuYW1lOlwiUHJvYmVBcHBsaWNhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxNyxcIlNWSVNJT05cIiwwMCknOnt0YWc6JygwMDE3LFwiU1ZJU0lPTlwiLDAwKScsdnI6XCJMT1wiLG5hbWU6XCJFeHRlbmRlZEJvZHlQYXJ0XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE3LFwiU1ZJU0lPTlwiLDEwKSc6e3RhZzonKDAwMTcsXCJTVklTSU9OXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIkV4dGVuZGVkVmlld1Bvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE3LFwiU1ZJU0lPTlwiLEYwKSc6e3RhZzonKDAwMTcsXCJTVklTSU9OXCIsRjApJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlc1NPUENsYXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDAwKSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsMDApJyx2cjpcIklTXCIsbmFtZTpcIkFFQ0ZpZWxkXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDAxKSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsMDEpJyx2cjpcIklTXCIsbmFtZTpcIkFFQ0ZpbG1TY3JlZW5cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsMDIpJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiwwMiknLHZyOlwiSVNcIixuYW1lOlwiQUVDRGVuc2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiwxMCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDEwKScsdnI6XCJJU1wiLG5hbWU6XCJQYXRpZW50VGhpY2tuZXNzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDE4KSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsMTgpJyx2cjpcIklTXCIsbmFtZTpcIkJlYW1EaXN0YW5jZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiwyMCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDIwKScsdnI6XCJJU1wiLG5hbWU6XCJXb3Jrc3RhdGlvbk51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiwyOCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDI4KScsdnI6XCJJU1wiLG5hbWU6XCJUdWJlTnVtYmVyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDMwKSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsMzApJyx2cjpcIklTXCIsbmFtZTpcIkJ1Y2t5R3JpZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiwzNCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDM0KScsdnI6XCJJU1wiLG5hbWU6XCJGb2N1c1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiwzOCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDM4KScsdnI6XCJJU1wiLG5hbWU6XCJDaGlsZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw0MCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDQwKScsdnI6XCJJU1wiLG5hbWU6XCJDb2xsaW1hdG9yRGlzdGFuY2VYXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDQxKSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsNDEpJyx2cjpcIklTXCIsbmFtZTpcIkNvbGxpbWF0b3JEaXN0YW5jZVlcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsNTApJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiw1MCknLHZyOlwiSVNcIixuYW1lOlwiQ2VudHJhbEJlYW1IZWlnaHRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsNjApJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiw2MCknLHZyOlwiSVNcIixuYW1lOlwiQnVja3lBbmdsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw2OCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDY4KScsdnI6XCJJU1wiLG5hbWU6XCJDQXJtQW5nbGVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsNjkpJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiw2OSknLHZyOlwiSVNcIixuYW1lOlwiQ29sbGltYXRvckFuZ2xlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDcwKSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsNzApJyx2cjpcIklTXCIsbmFtZTpcIkZpbHRlck51bWJlclwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw3NCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDc0KScsdnI6XCJMT1wiLG5hbWU6XCJGaWx0ZXJNYXRlcmlhbDFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsNzUpJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiw3NSknLHZyOlwiTE9cIixuYW1lOlwiRmlsdGVyTWF0ZXJpYWwyXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiU1ZJU0lPTlwiLDc4KSc6e3RhZzonKDAwMTksXCJTVklTSU9OXCIsNzgpJyx2cjpcIkRTXCIsbmFtZTpcIkZpbHRlclRoaWNrbmVzczFcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsNzkpJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIiw3OSknLHZyOlwiRFNcIixuYW1lOlwiRmlsdGVyVGhpY2tuZXNzMlwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw4MCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDgwKScsdnI6XCJJU1wiLG5hbWU6XCJCdWNreUZvcm1hdFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw4MSknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDgxKScsdnI6XCJJU1wiLG5hbWU6XCJPYmplY3RQb3NpdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIiw5MCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLDkwKScsdnI6XCJMT1wiLG5hbWU6XCJEZXNrQ29tbWFuZFwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIixBMCknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLEEwKScsdnI6XCJEU1wiLG5hbWU6XCJFeHRlbmRlZEV4cG9zdXJlVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlNWSVNJT05cIixBMSknOnt0YWc6JygwMDE5LFwiU1ZJU0lPTlwiLEExKScsdnI6XCJEU1wiLG5hbWU6XCJBY3R1YWxFeHBvc3VyZVRpbWVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJTVklTSU9OXCIsQTgpJzp7dGFnOicoMDAxOSxcIlNWSVNJT05cIixBOCknLHZyOlwiRFNcIixuYW1lOlwiRXh0ZW5kZWRYUmF5VHViZUN1cnJlbnRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsMDApJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiwwMCknLHZyOlwiRFNcIixuYW1lOlwiTm9pc2VSZWR1Y3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsMDEpJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiwwMSknLHZyOlwiRFNcIixuYW1lOlwiQ29udHJhc3RBbXBsaWZpY2F0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1ZJU0lPTlwiLDAyKSc6e3RhZzonKDAwMjEsXCJTVklTSU9OXCIsMDIpJyx2cjpcIkRTXCIsbmFtZTpcIkVkZ2VDb250cmFzdEJvb3N0aW5nXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1ZJU0lPTlwiLDAzKSc6e3RhZzonKDAwMjEsXCJTVklTSU9OXCIsMDMpJyx2cjpcIkRTXCIsbmFtZTpcIkxhdGl0dWRlUmVkdWN0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1ZJU0lPTlwiLDEwKSc6e3RhZzonKDAwMjEsXCJTVklTSU9OXCIsMTApJyx2cjpcIkxPXCIsbmFtZTpcIkZpbmRSYW5nZUFsZ29yaXRobVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNWSVNJT05cIiwxMSknOnt0YWc6JygwMDIxLFwiU1ZJU0lPTlwiLDExKScsdnI6XCJEU1wiLG5hbWU6XCJUaHJlc2hvbGRDQWxnb3JpdGhtXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1ZJU0lPTlwiLDIwKSc6e3RhZzonKDAwMjEsXCJTVklTSU9OXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlNlbnNvbWV0cmljQ3VydmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsMzApJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiwzMCknLHZyOlwiRFNcIixuYW1lOlwiTG93ZXJXaW5kb3dPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsMzEpJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiwzMSknLHZyOlwiRFNcIixuYW1lOlwiVXBwZXJXaW5kb3dPZmZzZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsNDApJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiw0MCknLHZyOlwiRFNcIixuYW1lOlwiTWluUHJpbnRhYmxlRGVuc2l0eVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlNWSVNJT05cIiw0MSknOnt0YWc6JygwMDIxLFwiU1ZJU0lPTlwiLDQxKScsdnI6XCJEU1wiLG5hbWU6XCJNYXhQcmludGFibGVEZW5zaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiU1ZJU0lPTlwiLDkwKSc6e3RhZzonKDAwMjEsXCJTVklTSU9OXCIsOTApJyx2cjpcIkRTXCIsbmFtZTpcIkJyaWdodG5lc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsOTEpJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiw5MSknLHZyOlwiRFNcIixuYW1lOlwiQ29udHJhc3RcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJTVklTSU9OXCIsOTIpJzp7dGFnOicoMDAyMSxcIlNWSVNJT05cIiw5MiknLHZyOlwiRFNcIixuYW1lOlwiU2hhcGVGYWN0b3JcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjMsXCJTVklTSU9OXCIsMDApJzp7dGFnOicoMDAyMyxcIlNWSVNJT05cIiwwMCknLHZyOlwiTE9cIixuYW1lOlwiSW1hZ2VMYXRlcmFsaXR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU1ZJU0lPTlwiLDAxKSc6e3RhZzonKDAwMjMsXCJTVklTSU9OXCIsMDEpJyx2cjpcIklTXCIsbmFtZTpcIkxldHRlclBvc2l0aW9uXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU1ZJU0lPTlwiLDAyKSc6e3RhZzonKDAwMjMsXCJTVklTSU9OXCIsMDIpJyx2cjpcIklTXCIsbmFtZTpcIkJ1cm5lZEluQW5ub3RhdGlvblwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMyxcIlNWSVNJT05cIiwwMyknOnt0YWc6JygwMDIzLFwiU1ZJU0lPTlwiLDAzKScsdnI6XCJMT1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIzLFwiU1ZJU0lPTlwiLEYwKSc6e3RhZzonKDAwMjMsXCJTVklTSU9OXCIsRjApJyx2cjpcIklTXCIsbmFtZTpcIkltYWdlU09QQ2xhc3NcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTVklTSU9OXCIsMDApJzp7dGFnOicoMDAyNSxcIlNWSVNJT05cIiwwMCknLHZyOlwiSVNcIixuYW1lOlwiT3JpZ2luYWxJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNWSVNJT05cIiwwMSknOnt0YWc6JygwMDI1LFwiU1ZJU0lPTlwiLDAxKScsdnI6XCJJU1wiLG5hbWU6XCJOb3RQcm9jZXNzZWRJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNWSVNJT05cIiwwMiknOnt0YWc6JygwMDI1LFwiU1ZJU0lPTlwiLDAyKScsdnI6XCJJU1wiLG5hbWU6XCJDdXRPdXRJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNWSVNJT05cIiwwMyknOnt0YWc6JygwMDI1LFwiU1ZJU0lPTlwiLDAzKScsdnI6XCJJU1wiLG5hbWU6XCJEdXBsaWNhdGVkSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTVklTSU9OXCIsMDQpJzp7dGFnOicoMDAyNSxcIlNWSVNJT05cIiwwNCknLHZyOlwiSVNcIixuYW1lOlwiU3RvcmVkSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTVklTSU9OXCIsMDUpJzp7dGFnOicoMDAyNSxcIlNWSVNJT05cIiwwNSknLHZyOlwiSVNcIixuYW1lOlwiUmV0cmlldmVkSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTVklTSU9OXCIsMDYpJzp7dGFnOicoMDAyNSxcIlNWSVNJT05cIiwwNiknLHZyOlwiSVNcIixuYW1lOlwiUmVtb3RlSW1hZ2VcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjUsXCJTVklTSU9OXCIsMDcpJzp7dGFnOicoMDAyNSxcIlNWSVNJT05cIiwwNyknLHZyOlwiSVNcIixuYW1lOlwiTWVkaWFTdG9yZWRJbWFnZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNWSVNJT05cIiwwOCknOnt0YWc6JygwMDI1LFwiU1ZJU0lPTlwiLDA4KScsdnI6XCJJU1wiLG5hbWU6XCJJbWFnZVN0YXRlXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI1LFwiU1ZJU0lPTlwiLDIwKSc6e3RhZzonKDAwMjUsXCJTVklTSU9OXCIsMjApJyx2cjpcIkxPXCIsbmFtZTpcIlNvdXJjZUltYWdlRmlsZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNSxcIlNWSVNJT05cIiwyMSknOnt0YWc6JygwMDI1LFwiU1ZJU0lPTlwiLDIxKScsdnI6XCJVSVwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiU1ZJU0lPTlwiLDAwKSc6e3RhZzonKDAwMjcsXCJTVklTSU9OXCIsMDApJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiU1ZJU0lPTlwiLDAxKSc6e3RhZzonKDAwMjcsXCJTVklTSU9OXCIsMDEpJyx2cjpcIklTXCIsbmFtZTpcIk51bWJlck9mU3R1ZGllc1wiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyNyxcIlNWSVNJT05cIiwxMCknOnt0YWc6JygwMDI3LFwiU1ZJU0lPTlwiLDEwKScsdnI6XCJEVFwiLG5hbWU6XCJPbGRlc3RTZXJpZXNcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjcsXCJTVklTSU9OXCIsMTEpJzp7dGFnOicoMDAyNyxcIlNWSVNJT05cIiwxMSknLHZyOlwiRFRcIixuYW1lOlwiTmV3ZXN0U2VyaWVzXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiU1ZJU0lPTlwiLDEyKSc6e3RhZzonKDAwMjcsXCJTVklTSU9OXCIsMTIpJyx2cjpcIkRUXCIsbmFtZTpcIk9sZGVzdFN0dWR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDI3LFwiU1ZJU0lPTlwiLDEzKSc6e3RhZzonKDAwMjcsXCJTVklTSU9OXCIsMTMpJyx2cjpcIkRUXCIsbmFtZTpcIk5ld2VzdFN0dWR5XCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiVE9TSElCQV9NRUNfMS4wXCIsMDEpJzp7dGFnOicoMDAwOSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAxKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDA5LFwiVE9TSElCQV9NRUNfMS4wXCIsMDIpJzp7dGFnOicoMDAwOSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMDksXCJUT1NISUJBX01FQ18xLjBcIiwwMyknOnt0YWc6JygwMDA5LFwiVE9TSElCQV9NRUNfMS4wXCIsMDMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAwOSxcIlRPU0hJQkFfTUVDXzEuMFwiLDA0KSc6e3RhZzonKDAwMDksXCJUT1NISUJBX01FQ18xLjBcIiwwNCknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiVE9TSElCQV9NRUNfMS4wXCIsMDEpJzp7dGFnOicoMDAxMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAxKScsdnI6XCJMVFwiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDExLFwiVE9TSElCQV9NRUNfMS4wXCIsMDIpJzp7dGFnOicoMDAxMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ18xLjBcIiwwMSknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfMS4wXCIsMDEpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAyKSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ18xLjBcIiwwMiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDIxLFwiVE9TSElCQV9NRUNfMS4wXCIsMDEpJzp7dGFnOicoMDAyMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMjEsXCJUT1NISUJBX01FQ18xLjBcIiwwMiknOnt0YWc6JygwMDIxLFwiVE9TSElCQV9NRUNfMS4wXCIsMDIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAyMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAzKSc6e3RhZzonKDAwMjEsXCJUT1NISUJBX01FQ18xLjBcIiwwMyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmYxLFwiVE9TSElCQV9NRUNfMS4wXCIsMDEpJzp7dGFnOicoN2ZmMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAxKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ18xLjBcIiwwMiknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfMS4wXCIsMDIpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZmMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDAzKSc6e3RhZzonKDdmZjEsXCJUT1NISUJBX01FQ18xLjBcIiwwMyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmYxLFwiVE9TSElCQV9NRUNfMS4wXCIsMTApJzp7dGFnOicoN2ZmMSxcIlRPU0hJQkFfTUVDXzEuMFwiLDEwKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwMSknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDEpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwMiknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDIpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwMyknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA0KSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNCknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA1KSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA2KSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDcpJzp7dGFnOicoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA3KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwOCknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDgpJyx2cjpcIkxUXCIsbmFtZTpcIk9yaWVudGF0aW9uSGVhZEZlZXRcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwOSknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDkpJyx2cjpcIkxUXCIsbmFtZTpcIlZpZXdEaXJlY3Rpb25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwYSknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMGEpJyx2cjpcIkxUXCIsbmFtZTpcIk9yaWVudGF0aW9uU3VwaW5lUHJvbmVcIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwYiknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMGIpJyx2cjpcIkRTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwYyknOnt0YWc6JygwMDE5LFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMGMpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDBkKSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwZCknLHZyOlwiVE1cIixuYW1lOlwiVGltZVwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoMDAxOSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDBlKSc6e3RhZzonKDAwMTksXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwZSknLHZyOlwiRFNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDAxKSc6e3RhZzonKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwMSknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDIpJzp7dGFnOicoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDAyKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwMyknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDMpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNCknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDQpJyx2cjpcIklTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjFcIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNSknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDUpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA3KSc6e3RhZzonKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwNyknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDgpJzp7dGFnOicoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDA4KScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwOSknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMDkpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDBhKSc6e3RhZzonKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwYSknLHZyOlwiTFRcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMVwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9LCcoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDBiKSc6e3RhZzonKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwYiknLHZyOlwiVVNcIixuYW1lOlwiVW5rbm93blwiLHZtOlwiMS1uXCIsdmVyc2lvbjpcIlByaXZhdGVUYWdcIn0sJyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMGMpJzp7dGFnOicoN2ZmMSxcIlRPU0hJQkFfTUVDX0NUXzEuMFwiLDBjKScsdnI6XCJVU1wiLG5hbWU6XCJVbmtub3duXCIsdm06XCIxLW5cIix2ZXJzaW9uOlwiUHJpdmF0ZVRhZ1wifSwnKDdmZjEsXCJUT1NISUJBX01FQ19DVF8xLjBcIiwwZCknOnt0YWc6Jyg3ZmYxLFwiVE9TSElCQV9NRUNfQ1RfMS4wXCIsMGQpJyx2cjpcIlVTXCIsbmFtZTpcIlVua25vd25cIix2bTpcIjEtblwiLHZlcnNpb246XCJQcml2YXRlVGFnXCJ9fTtcblxudmFyIERpY29tTWV0YURpY3Rpb25hcnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaWNvbU1ldGFEaWN0aW9uYXJ5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaWNvbU1ldGFEaWN0aW9uYXJ5KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaWNvbU1ldGFEaWN0aW9uYXJ5LCBudWxsLCBbe1xuICAgIGtleTogXCJwdW5jdHVhdGVUYWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVuY3R1YXRlVGFnKHJhd1RhZykge1xuICAgICAgaWYgKHJhd1RhZy5pbmRleE9mKFwiLFwiKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHJhd1RhZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJhd1RhZy5sZW5ndGggPT09IDggJiYgcmF3VGFnID09PSByYXdUYWcubWF0Y2goL1swLTlhLWZBLUZdKi8pWzBdKSB7XG4gICAgICAgIHZhciB0YWcgPSByYXdUYWcudG9VcHBlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIFwiKFwiICsgdGFnLnN1YnN0cmluZygwLCA0KSArIFwiLFwiICsgdGFnLnN1YnN0cmluZyg0LCA4KSArIFwiKVwiO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnB1bmN0dWF0ZVRhZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnB1bmN0dWF0ZVRhZyh0YWcpIHtcbiAgICAgIGlmICh0YWcuaW5kZXhPZihcIixcIikgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0YWc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YWcuc3Vic3RyaW5nKDEsIDEwKS5yZXBsYWNlKFwiLFwiLCBcIlwiKTtcbiAgICB9IC8vIGZpeGVzIHNvbWUgY29tbW9uIGVycm9ycyBpbiBWUnNcbiAgICAvLyBUT0RPOiBpZiB0aGlzIGdldHMgbG9uZ2VyIGl0IGNvdWxkIGdvIGluIFZhbHVlUmVwcmVzZW50YXRpb24uanNcbiAgICAvLyBvciBpbiBhIGRlZGljYXRlZCBjbGFzc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYW5EYXRhc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFuRGF0YXNldChkYXRhc2V0KSB7XG4gICAgICB2YXIgY2xlYW5lZERhdGFzZXQgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGRhdGFzZXQpLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICB2YXIgZGF0YSA9IGRhdGFzZXRbdGFnXTtcblxuICAgICAgICBpZiAoZGF0YS52ciA9PSBcIlNRXCIpIHtcbiAgICAgICAgICB2YXIgY2xlYW5lZFZhbHVlcyA9IFtdO1xuICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEuVmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICBjbGVhbmVkVmFsdWVzLnB1c2goRGljb21NZXRhRGljdGlvbmFyeS5jbGVhbkRhdGFzZXQoZGF0YS5WYWx1ZVtpbmRleF0pKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkYXRhLlZhbHVlID0gY2xlYW5lZFZhbHVlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZW1vdmUgbnVsbCBjaGFyYWN0ZXJzIGZyb20gc3RyaW5nc1xuICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEuVmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZGF0YUl0ZW0gPSBkYXRhLlZhbHVlW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGRhdGFJdGVtLmNvbnN0cnVjdG9yLm5hbWUgPT0gXCJTdHJpbmdcIikge1xuICAgICAgICAgICAgICBkYXRhLlZhbHVlW2luZGV4XSA9IGRhdGFJdGVtLnJlcGxhY2UoL1xcMC8sIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYW5lZERhdGFzZXRbdGFnXSA9IGRhdGE7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbGVhbmVkRGF0YXNldDtcbiAgICB9IC8vIHVubGlrZSBuYXR1cmFsaXplRGF0YXNldCwgdGhpcyBvbmx5XG4gICAgLy8gY2hhbmdlcyB0aGUgbmFtZXMgb2YgdGhlIG1lbWJlciB2YXJpYWJsZXNcbiAgICAvLyBidXQgbGVhdmVzIHRoZSB2YWx1ZXMgaW50YWN0XG5cbiAgfSwge1xuICAgIGtleTogXCJuYW1pZnlEYXRhc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5hbWlmeURhdGFzZXQoZGF0YXNldCkge1xuICAgICAgdmFyIG5hbWVkRGF0YXNldCA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoZGF0YXNldCkuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIHZhciBkYXRhID0gZGF0YXNldFt0YWddO1xuXG4gICAgICAgIGlmIChkYXRhLnZyID09IFwiU1FcIikge1xuICAgICAgICAgIHZhciBuYW1lZFZhbHVlcyA9IFtdO1xuICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEuVmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICBuYW1lZFZhbHVlcy5wdXNoKERpY29tTWV0YURpY3Rpb25hcnkubmFtaWZ5RGF0YXNldChkYXRhLlZhbHVlW2luZGV4XSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGEuVmFsdWUgPSBuYW1lZFZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwdW5jdHVhdGVkVGFnID0gRGljb21NZXRhRGljdGlvbmFyeS5wdW5jdHVhdGVUYWcodGFnKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gRGljb21NZXRhRGljdGlvbmFyeS5kaWN0aW9uYXJ5W3B1bmN0dWF0ZWRUYWddO1xuICAgICAgICB2YXIgbmFtZSA9IHRhZztcblxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICBuYW1lID0gZW50cnkubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWVkRGF0YXNldFtuYW1lXSA9IGRhdGE7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuYW1lZERhdGFzZXQ7XG4gICAgfSAvLyBjb252ZXJ0cyBmcm9tIERJQ09NIEpTT04gTW9kZWwgZGF0YXNldFxuICAgIC8vIHRvIGEgbmF0dXJhbCBkYXRhc2V0XG4gICAgLy8gLSBzZXF1ZW5jZXMgYmVjb21lIGxpc3RzXG4gICAgLy8gLSBzaW5nbGUgZWxlbWVudCBsaXN0cyBhcmUgcmVwbGFjZWQgYnkgdGhlaXIgZmlyc3QgZWxlbWVudFxuICAgIC8vIC0gb2JqZWN0IG1lbWJlciBuYW1lcyBhcmUgZGljdGlvbmFyeSwgbm90IGdyb3VwL2VsZW1lbnQgdGFnXG5cbiAgfSwge1xuICAgIGtleTogXCJuYXR1cmFsaXplRGF0YXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXR1cmFsaXplRGF0YXNldChkYXRhc2V0KSB7XG4gICAgICB2YXIgbmF0dXJhbERhdGFzZXQgPSB7XG4gICAgICAgIF92ck1hcDoge31cbiAgICAgIH07XG4gICAgICBPYmplY3Qua2V5cyhkYXRhc2V0KS5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBkYXRhc2V0W3RhZ107XG5cbiAgICAgICAgaWYgKGRhdGEudnIgPT0gXCJTUVwiKSB7XG4gICAgICAgICAgLy8gY29udmVydCBzZXF1ZW5jZSB0byBsaXN0IG9mIHZhbHVlc1xuICAgICAgICAgIHZhciBuYXR1cmFsVmFsdWVzID0gW107XG4gICAgICAgICAgT2JqZWN0LmtleXMoZGF0YS5WYWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIG5hdHVyYWxWYWx1ZXMucHVzaChEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hdHVyYWxpemVEYXRhc2V0KGRhdGEuVmFsdWVbaW5kZXhdKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGF0YS5WYWx1ZSA9IG5hdHVyYWxWYWx1ZXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHVuY3R1YXRlZFRhZyA9IERpY29tTWV0YURpY3Rpb25hcnkucHVuY3R1YXRlVGFnKHRhZyk7XG4gICAgICAgIHZhciBlbnRyeSA9IERpY29tTWV0YURpY3Rpb25hcnkuZGljdGlvbmFyeVtwdW5jdHVhdGVkVGFnXTtcbiAgICAgICAgdmFyIG5hdHVyYWxOYW1lID0gdGFnO1xuXG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIG5hdHVyYWxOYW1lID0gZW50cnkubmFtZTtcblxuICAgICAgICAgIGlmIChlbnRyeS52ciA9PSBcIm94XCIpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIHZyIGlzIGRhdGEtZGVwZW5kZW50LCBrZWVwIHRyYWNrIG9mIHRoZSBvcmlnaW5hbCB0eXBlXG4gICAgICAgICAgICBuYXR1cmFsRGF0YXNldC5fdnJNYXBbbmF0dXJhbE5hbWVdID0gZGF0YS52cjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuYXR1cmFsRGF0YXNldFtuYXR1cmFsTmFtZV0gPSBkYXRhLlZhbHVlO1xuXG4gICAgICAgIGlmIChuYXR1cmFsRGF0YXNldFtuYXR1cmFsTmFtZV0ubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAvLyBvbmx5IG9uZSB2YWx1ZSBpcyBub3QgYSBsaXN0XG4gICAgICAgICAgbmF0dXJhbERhdGFzZXRbbmF0dXJhbE5hbWVdID0gbmF0dXJhbERhdGFzZXRbbmF0dXJhbE5hbWVdWzBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuYXR1cmFsRGF0YXNldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVuYXR1cmFsaXplVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVuYXR1cmFsaXplVmFsdWUobmF0dXJhbFZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBuYXR1cmFsVmFsdWU7XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRoZXJlSXNVbmRlZmluZWRWYWx1ZXMgPSBuYXR1cmFsVmFsdWUuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGVyZUlzVW5kZWZpbmVkVmFsdWVzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlcmUgYXJlIHVuZGVmaW5lZCB2YWx1ZXMgYXQgdGhlIGFycmF5IG5hdHVyYWxWYWx1ZSBpbiBEaWNvbU1ldGFEaWN0aW9uYXJ5LmRlbmF0dXJhbGl6ZVZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuY29uc3RydWN0b3IubmFtZSA9PSBcIk51bWJlclwiID8gU3RyaW5nKGVudHJ5KSA6IGVudHJ5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlbmF0dXJhbGl6ZURhdGFzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVuYXR1cmFsaXplRGF0YXNldChkYXRhc2V0KSB7XG4gICAgICB2YXIgdW5uYXR1cmFsRGF0YXNldCA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoZGF0YXNldCkuZm9yRWFjaChmdW5jdGlvbiAobmF0dXJhbE5hbWUpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQncyBhIHNlcXVlbmNlXG4gICAgICAgIHZhciBuYW1lID0gbmF0dXJhbE5hbWU7XG4gICAgICAgIHZhciBlbnRyeSA9IERpY29tTWV0YURpY3Rpb25hcnkubmFtZU1hcFtuYW1lXTtcblxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YXNldFtuYXR1cmFsTmFtZV07XG5cbiAgICAgICAgICBpZiAoZGF0YVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBpdCB3YXMgZGVsZXRlZCBmcm9tIHRoZSBvYmplY3QgYnV0IGlzIGluIGtleXNcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IC8vIHByb2Nlc3MgdGhpcyBvbmUgZW50cnlcblxuXG4gICAgICAgICAgdmFyIGRhdGFJdGVtID0ge1xuICAgICAgICAgICAgdnI6IGVudHJ5LnZyLFxuICAgICAgICAgICAgVmFsdWU6IGRhdGFzZXRbbmF0dXJhbE5hbWVdXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChlbnRyeS52ciA9PSBcIm94XCIpIHtcbiAgICAgICAgICAgIGlmIChkYXRhc2V0Ll92ck1hcCAmJiBkYXRhc2V0Ll92ck1hcFtuYXR1cmFsTmFtZV0pIHtcbiAgICAgICAgICAgICAgZGF0YUl0ZW0udnIgPSBkYXRhc2V0Ll92ck1hcFtuYXR1cmFsTmFtZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsaWIuZXJyb3IoXCJObyB2YWx1ZSByZXByZXNlbnRhdGlvbiBnaXZlbiBmb3JcIiwgbmF0dXJhbE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFJdGVtLlZhbHVlID0gRGljb21NZXRhRGljdGlvbmFyeS5kZW5hdHVyYWxpemVWYWx1ZShkYXRhSXRlbS5WYWx1ZSk7XG5cbiAgICAgICAgICBpZiAoZW50cnkudnIgPT0gXCJTUVwiKSB7XG4gICAgICAgICAgICB2YXIgdW5uYXR1cmFsVmFsdWVzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFJdGVtLlZhbHVlLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcbiAgICAgICAgICAgICAgdmFyIG5lc3RlZERhdGFzZXQgPSBkYXRhSXRlbS5WYWx1ZVtkYXRhc2V0SW5kZXhdO1xuICAgICAgICAgICAgICB1bm5hdHVyYWxWYWx1ZXMucHVzaChEaWNvbU1ldGFEaWN0aW9uYXJ5LmRlbmF0dXJhbGl6ZURhdGFzZXQobmVzdGVkRGF0YXNldCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhSXRlbS5WYWx1ZSA9IHVubmF0dXJhbFZhbHVlcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdnIgPSBWYWx1ZVJlcHJlc2VudGF0aW9uLmNyZWF0ZUJ5VHlwZVN0cmluZyhkYXRhSXRlbS52cik7XG5cbiAgICAgICAgICBpZiAoIXZyLmlzQmluYXJ5KCkgJiYgdnIubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBkYXRhSXRlbS5WYWx1ZSA9IGRhdGFJdGVtLlZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IHZyLm1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxpYi53YXJuKFwiVHJ1bmNhdGluZyB2YWx1ZSBcIi5jb25jYXQodmFsdWUsIFwiIG9mIFwiKS5jb25jYXQobmF0dXJhbE5hbWUsIFwiIGJlY2F1c2UgaXQgaXMgbG9uZ2VyIHRoYW4gXCIpLmNvbmNhdCh2ci5tYXhMZW5ndGgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoMCwgdnIubWF4TGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0YWcgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LnVucHVuY3R1YXRlVGFnKGVudHJ5LnRhZyk7XG4gICAgICAgICAgdW5uYXR1cmFsRGF0YXNldFt0YWddID0gZGF0YUl0ZW07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHZhbGlkTWV0YU5hbWVzID0gW1wiX3ZyTWFwXCIsIFwiX21ldGFcIl07XG5cbiAgICAgICAgICBpZiAodmFsaWRNZXRhTmFtZXMuaW5kZXhPZihuYW1lKSA9PSAtMSkge1xuICAgICAgICAgICAgbGliLndhcm4oXCJVbmtub3duIG5hbWUgaW4gZGF0YXNldFwiLCBuYW1lLCBcIjpcIiwgZGF0YXNldFtuYW1lXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1bm5hdHVyYWxEYXRhc2V0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1aWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdWlkKCkge1xuICAgICAgdmFyIHVpZCA9IFwiMi4yNS5cIiArIE1hdGguZmxvb3IoMSArIE1hdGgucmFuZG9tKCkgKiA5KTtcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IDM4OyBpbmRleCsrKSB7XG4gICAgICAgIHVpZCA9IHVpZCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVpZDtcbiAgICB9IC8vIGRhdGUgYW5kIHRpbWUgaW4gVVRDXG5cbiAgfSwge1xuICAgIGtleTogXCJkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGUoKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIHJldHVybiBub3cudG9JU09TdHJpbmcoKS5yZXBsYWNlKC8tL2csIFwiXCIpLnNsaWNlKDAsIDgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWUoKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIHJldHVybiBub3cudG9JU09TdHJpbmcoKS5yZXBsYWNlKC86L2csIFwiXCIpLnNsaWNlKDExLCAxNyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRhdGVUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGVUaW1lKCkge1xuICAgICAgLy8gXCIyMDE3LTA3LTA3VDE2OjA5OjE4LjA3OVpcIiAtPiBcIjIwMTcwNzA3MTYwOTE4LjA3OVwiXG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIHJldHVybiBub3cudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOlxcLVRaXS9nLCBcIlwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dlbmVyYXRlTmFtZU1hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGVOYW1lTWFwKCkge1xuICAgICAgRGljb21NZXRhRGljdGlvbmFyeS5uYW1lTWFwID0ge307XG4gICAgICBPYmplY3Qua2V5cyhEaWNvbU1ldGFEaWN0aW9uYXJ5LmRpY3Rpb25hcnkpLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICB2YXIgZGljdCA9IERpY29tTWV0YURpY3Rpb25hcnkuZGljdGlvbmFyeVt0YWddO1xuXG4gICAgICAgIGlmIChkaWN0LnZlcnNpb24gIT0gXCJQcml2YXRlVGFnXCIpIHtcbiAgICAgICAgICBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hbWVNYXBbZGljdC5uYW1lXSA9IGRpY3Q7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2VuZXJhdGVVSURNYXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dlbmVyYXRlVUlETWFwKCkge1xuICAgICAgRGljb21NZXRhRGljdGlvbmFyeS5zb3BDbGFzc1VJRHNCeU5hbWUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKERpY29tTWV0YURpY3Rpb25hcnkuc29wQ2xhc3NOYW1lc0J5VUlEKS5mb3JFYWNoKGZ1bmN0aW9uICh1aWQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzTmFtZXNCeVVJRFt1aWRdO1xuICAgICAgICBEaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzVUlEc0J5TmFtZVtuYW1lXSA9IHVpZDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaWNvbU1ldGFEaWN0aW9uYXJ5O1xufSgpOyAvLyBTdWJzZXQgb2YgdGhvc2UgbGlzdGVkIGF0OlxuLy8gaHR0cDovL2RpY29tLm5lbWEub3JnL21lZGljYWwvZGljb20vY3VycmVudC9vdXRwdXQvaHRtbC9wYXJ0MDQuaHRtbCNzZWN0X0IuNVxuXG5cbkRpY29tTWV0YURpY3Rpb25hcnkuc29wQ2xhc3NOYW1lc0J5VUlEID0ge1xuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjJcIjogXCJDVEltYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMi4xXCI6IFwiRW5oYW5jZWRDVEltYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMi4yXCI6IFwiTGVnYWN5Q29udmVydGVkRW5oYW5jZWRDVEltYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMy4xXCI6IFwiVVNNdWx0aWZyYW1lSW1hZ2VcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS40XCI6IFwiTVJJbWFnZVwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjQuMVwiOiBcIkVuaGFuY2VkTVJJbWFnZVwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjQuMlwiOiBcIk1SU3BlY3Ryb3Njb3B5XCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuNC4zXCI6IFwiRW5oYW5jZWRNUkNvbG9ySW1hZ2VcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS40LjRcIjogXCJMZWdhY3lDb252ZXJ0ZWRFbmhhbmNlZE1SSW1hZ2VcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS42LjFcIjogXCJVU0ltYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuNi4yXCI6IFwiRW5oYW5jZWRVU1ZvbHVtZVwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjdcIjogXCJTZWNvbmRhcnlDYXB0dXJlSW1hZ2VcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS4zMFwiOiBcIlBhcmFtZXRyaWNNYXBTdG9yYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuNjZcIjogXCJSYXdEYXRhXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuNjYuMVwiOiBcIlNwYXRpYWxSZWdpc3RyYXRpb25cIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS42Ni4yXCI6IFwiU3BhdGlhbEZpZHVjaWFsc1wiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjY2LjNcIjogXCJEZWZvcm1hYmxlU3BhdGlhbFJlZ2lzdHJhdGlvblwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjY2LjRcIjogXCJTZWdtZW50YXRpb25cIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS42N1wiOiBcIlJlYWxXb3JsZFZhbHVlTWFwcGluZ1wiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjg4LjExXCI6IFwiQmFzaWNUZXh0U1JcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS44OC4yMlwiOiBcIkVuaGFuY2VkU1JcIixcbiAgXCIxLjIuODQwLjEwMDA4LjUuMS40LjEuMS44OC4zM1wiOiBcIkNvbXByZWhlbnNpdmVTUlwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjEyOFwiOiBcIlBFVEltYWdlXCIsXG4gIFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMTMwXCI6IFwiRW5oYW5jZWRQRVRJbWFnZVwiLFxuICBcIjEuMi44NDAuMTAwMDguNS4xLjQuMS4xLjEyOC4xXCI6IFwiTGVnYWN5Q29udmVydGVkRW5oYW5jZWRQRVRJbWFnZVwiXG59O1xuRGljb21NZXRhRGljdGlvbmFyeS5kaWN0aW9uYXJ5ID0gZGljdGlvbmFyeTtcblxuRGljb21NZXRhRGljdGlvbmFyeS5fZ2VuZXJhdGVOYW1lTWFwKCk7XG5cbkRpY29tTWV0YURpY3Rpb25hcnkuX2dlbmVyYXRlVUlETWFwKCk7XG5cbnZhciBJTVBMSUNJVF9MSVRUTEVfRU5ESUFOJDEgPSBcIjEuMi44NDAuMTAwMDguMS4yXCI7XG52YXIgRVhQTElDSVRfTElUVExFX0VORElBTiQxID0gXCIxLjIuODQwLjEwMDA4LjEuMi4xXCI7XG52YXIgRVhQTElDSVRfQklHX0VORElBTiA9IFwiMS4yLjg0MC4xMDAwOC4xLjIuMlwiO1xudmFyIHNpbmdsZVZScyQxID0gW1wiU1FcIiwgXCJPRlwiLCBcIk9XXCIsIFwiT0JcIiwgXCJVTlwiLCBcIkxUXCJdO1xudmFyIGVuY2Fwc3VsYXRlZFN5bnRheGVzID0gW1wiMS4yLjg0MC4xMDAwOC4xLjIuNC41MFwiLCBcIjEuMi44NDAuMTAwMDguMS4yLjQuNTFcIiwgXCIxLjIuODQwLjEwMDA4LjEuMi40LjU3XCIsIFwiMS4yLjg0MC4xMDAwOC4xLjIuNC43MFwiLCBcIjEuMi44NDAuMTAwMDguMS4yLjQuODBcIiwgXCIxLjIuODQwLjEwMDA4LjEuMi40LjgxXCIsIFwiMS4yLjg0MC4xMDAwOC4xLjIuNC45MFwiLCBcIjEuMi44NDAuMTAwMDguMS4yLjQuOTFcIiwgXCIxLjIuODQwLjEwMDA4LjEuMi40LjkyXCIsIFwiMS4yLjg0MC4xMDAwOC4xLjIuNC45M1wiLCBcIjEuMi44NDAuMTAwMDguMS4yLjQuOTRcIiwgXCIxLjIuODQwLjEwMDA4LjEuMi40Ljk1XCIsIFwiMS4yLjg0MC4xMDAwOC4xLjIuNVwiLCBcIjEuMi44NDAuMTAwMDguMS4yLjYuMVwiLCBcIjEuMi44NDAuMTAwMDguMS4yLjQuMTAwXCIsIFwiMS4yLjg0MC4xMDAwOC4xLjIuNC4xMDJcIiwgXCIxLjIuODQwLjEwMDA4LjEuMi40LjEwM1wiXTtcblxudmFyIERpY29tTWVzc2FnZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpY29tTWVzc2FnZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGljb21NZXNzYWdlKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaWNvbU1lc3NhZ2UsIG51bGwsIFt7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChidWZmZXJTdHJlYW0sIHN5bnRheCwgaWdub3JlRXJyb3JzKSB7XG4gICAgICB2YXIgZGljdCA9IHt9O1xuXG4gICAgICB0cnkge1xuICAgICAgICB3aGlsZSAoIWJ1ZmZlclN0cmVhbS5lbmQoKSkge1xuICAgICAgICAgIHZhciByZWFkSW5mbyA9IERpY29tTWVzc2FnZS5yZWFkVGFnKGJ1ZmZlclN0cmVhbSwgc3ludGF4KTtcbiAgICAgICAgICBkaWN0W3JlYWRJbmZvLnRhZy50b0NsZWFuU3RyaW5nKCldID0ge1xuICAgICAgICAgICAgdnI6IHJlYWRJbmZvLnZyLnR5cGUsXG4gICAgICAgICAgICBWYWx1ZTogcmVhZEluZm8udmFsdWVzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaWN0O1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChpZ25vcmVFcnJvcnMpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJXQVJOOlwiLCBlcnIpO1xuICAgICAgICAgIHJldHVybiBkaWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfbm9ybWFsaXplU3ludGF4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3JtYWxpemVTeW50YXgoc3ludGF4KSB7XG4gICAgICBpZiAoc3ludGF4ID09IElNUExJQ0lUX0xJVFRMRV9FTkRJQU4kMSB8fCBzeW50YXggPT0gRVhQTElDSVRfTElUVExFX0VORElBTiQxIHx8IHN5bnRheCA9PSBFWFBMSUNJVF9CSUdfRU5ESUFOKSB7XG4gICAgICAgIHJldHVybiBzeW50YXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gRVhQTElDSVRfTElUVExFX0VORElBTiQxO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0VuY2Fwc3VsYXRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VuY2Fwc3VsYXRlZChzeW50YXgpIHtcbiAgICAgIHJldHVybiBlbmNhcHN1bGF0ZWRTeW50YXhlcy5pbmRleE9mKHN5bnRheCkgIT0gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRGaWxlKGJ1ZmZlcikge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgICAgaWdub3JlRXJyb3JzOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHZhciBpZ25vcmVFcnJvcnMgPSBvcHRpb25zLmlnbm9yZUVycm9ycztcbiAgICAgIHZhciBzdHJlYW0gPSBuZXcgUmVhZEJ1ZmZlclN0cmVhbShidWZmZXIpLFxuICAgICAgICAgIHVzZVN5bnRheCA9IEVYUExJQ0lUX0xJVFRMRV9FTkRJQU4kMTtcbiAgICAgIHN0cmVhbS5yZXNldCgpO1xuICAgICAgc3RyZWFtLmluY3JlbWVudCgxMjgpO1xuXG4gICAgICBpZiAoc3RyZWFtLnJlYWRTdHJpbmcoNCkgIT09IFwiRElDTVwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYSBkaWNvbSBmaWxlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWwgPSBEaWNvbU1lc3NhZ2UucmVhZFRhZyhzdHJlYW0sIHVzZVN5bnRheCksXG4gICAgICAgICAgbWV0YUxlbmd0aCA9IGVsLnZhbHVlc1swXTsgLy9yZWFkIGhlYWRlciBidWZmZXJcblxuICAgICAgdmFyIG1ldGFTdHJlYW0gPSBzdHJlYW0ubW9yZShtZXRhTGVuZ3RoKTtcbiAgICAgIHZhciBtZXRhSGVhZGVyID0gRGljb21NZXNzYWdlLnJlYWQobWV0YVN0cmVhbSwgdXNlU3ludGF4LCBpZ25vcmVFcnJvcnMpOyAvL2dldCB0aGUgc3ludGF4XG5cbiAgICAgIHZhciBtYWluU3ludGF4ID0gbWV0YUhlYWRlcltcIjAwMDIwMDEwXCJdLlZhbHVlWzBdO1xuICAgICAgbWFpblN5bnRheCA9IERpY29tTWVzc2FnZS5fbm9ybWFsaXplU3ludGF4KG1haW5TeW50YXgpO1xuICAgICAgdmFyIG9iamVjdHMgPSBEaWNvbU1lc3NhZ2UucmVhZChzdHJlYW0sIG1haW5TeW50YXgsIGlnbm9yZUVycm9ycyk7XG4gICAgICB2YXIgZGljb21EaWN0ID0gbmV3IERpY29tRGljdChtZXRhSGVhZGVyKTtcbiAgICAgIGRpY29tRGljdC5kaWN0ID0gb2JqZWN0cztcbiAgICAgIHJldHVybiBkaWNvbURpY3Q7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndyaXRlVGFnT2JqZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlVGFnT2JqZWN0KHN0cmVhbSwgdGFnU3RyaW5nLCB2ciwgdmFsdWVzLCBzeW50YXgpIHtcbiAgICAgIHZhciB0YWcgPSBUYWcuZnJvbVN0cmluZyh0YWdTdHJpbmcpO1xuICAgICAgdGFnLndyaXRlKHN0cmVhbSwgdnIsIHZhbHVlcywgc3ludGF4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGUoanNvbk9iamVjdHMsIHVzZVN0cmVhbSwgc3ludGF4KSB7XG4gICAgICB2YXIgd3JpdHRlbiA9IDA7XG4gICAgICB2YXIgc29ydGVkVGFncyA9IE9iamVjdC5rZXlzKGpzb25PYmplY3RzKS5zb3J0KCk7XG4gICAgICBzb3J0ZWRUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ1N0cmluZykge1xuICAgICAgICB2YXIgdGFnID0gVGFnLmZyb21TdHJpbmcodGFnU3RyaW5nKSxcbiAgICAgICAgICAgIHRhZ09iamVjdCA9IGpzb25PYmplY3RzW3RhZ1N0cmluZ10sXG4gICAgICAgICAgICB2clR5cGUgPSB0YWdPYmplY3QudnIsXG4gICAgICAgICAgICB2YWx1ZXMgPSB0YWdPYmplY3QuVmFsdWU7XG4gICAgICAgIHdyaXR0ZW4gKz0gdGFnLndyaXRlKHVzZVN0cmVhbSwgdnJUeXBlLCB2YWx1ZXMsIHN5bnRheCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB3cml0dGVuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkVGFnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRUYWcoc3RyZWFtLCBzeW50YXgpIHtcbiAgICAgIHZhciBpbXBsaWNpdCA9IHN5bnRheCA9PSBJTVBMSUNJVF9MSVRUTEVfRU5ESUFOJDEgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgaXNMaXR0bGVFbmRpYW4gPSBzeW50YXggPT0gSU1QTElDSVRfTElUVExFX0VORElBTiQxIHx8IHN5bnRheCA9PSBFWFBMSUNJVF9MSVRUTEVfRU5ESUFOJDEgPyB0cnVlIDogZmFsc2U7XG4gICAgICB2YXIgb2xkRW5kaWFuID0gc3RyZWFtLmlzTGl0dGxlRW5kaWFuO1xuICAgICAgc3RyZWFtLnNldEVuZGlhbihpc0xpdHRsZUVuZGlhbik7XG4gICAgICB2YXIgZ3JvdXAgPSBzdHJlYW0ucmVhZFVpbnQxNigpLFxuICAgICAgICAgIGVsZW1lbnQgPSBzdHJlYW0ucmVhZFVpbnQxNigpLFxuICAgICAgICAgIHRhZyA9IHRhZ0Zyb21OdW1iZXJzKGdyb3VwLCBlbGVtZW50KTtcbiAgICAgIHZhciBsZW5ndGggPSBudWxsLFxuICAgICAgICAgIHZyID0gbnVsbCxcbiAgICAgICAgICB2clR5cGU7XG5cbiAgICAgIGlmIChpbXBsaWNpdCkge1xuICAgICAgICBsZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQzMigpO1xuICAgICAgICB2YXIgZWxlbWVudERhdGEgPSBEaWNvbU1lc3NhZ2UubG9va3VwVGFnKHRhZyk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnREYXRhKSB7XG4gICAgICAgICAgdnJUeXBlID0gZWxlbWVudERhdGEudnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy91bmtub3duIHRhZ1xuICAgICAgICAgIGlmIChsZW5ndGggPT0gMHhmZmZmZmZmZikge1xuICAgICAgICAgICAgdnJUeXBlID0gXCJTUVwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnLmlzUGl4ZWxEYXRhVGFnKCkpIHtcbiAgICAgICAgICAgIHZyVHlwZSA9IFwiT1dcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZyVHlwZSA9PSBcInhzXCIpIHtcbiAgICAgICAgICAgIHZyVHlwZSA9IFwiVVNcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdnJUeXBlID0gXCJVTlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZyID0gVmFsdWVSZXByZXNlbnRhdGlvbi5jcmVhdGVCeVR5cGVTdHJpbmcodnJUeXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZyVHlwZSA9IHN0cmVhbS5yZWFkU3RyaW5nKDIpO1xuICAgICAgICB2ciA9IFZhbHVlUmVwcmVzZW50YXRpb24uY3JlYXRlQnlUeXBlU3RyaW5nKHZyVHlwZSk7XG5cbiAgICAgICAgaWYgKHZyLmlzRXhwbGljaXQoKSkge1xuICAgICAgICAgIHN0cmVhbS5pbmNyZW1lbnQoMik7XG4gICAgICAgICAgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50MzIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgaWYgKHZyLmlzQmluYXJ5KCkgJiYgbGVuZ3RoID4gdnIubWF4TGVuZ3RoICYmICF2ci5ub011bHRpcGxlKSB7XG4gICAgICAgIHZhciB0aW1lcyA9IGxlbmd0aCAvIHZyLm1heExlbmd0aCxcbiAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChpKysgPCB0aW1lcykge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKHZyLnJlYWQoc3RyZWFtLCB2ci5tYXhMZW5ndGgsIHN5bnRheCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsID0gdnIucmVhZChzdHJlYW0sIGxlbmd0aCwgc3ludGF4KTtcblxuICAgICAgICBpZiAoIXZyLmlzQmluYXJ5KCkgJiYgc2luZ2xlVlJzJDEuaW5kZXhPZih2ci50eXBlKSA9PSAtMSkge1xuICAgICAgICAgIHZhbHVlcyA9IHZhbC5zcGxpdChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4NWMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh2ci50eXBlID09IFwiU1FcIikge1xuICAgICAgICAgIHZhbHVlcyA9IHZhbDtcbiAgICAgICAgfSBlbHNlIGlmICh2ci50eXBlID09IFwiT1dcIiB8fCB2ci50eXBlID09IFwiT0JcIikge1xuICAgICAgICAgIHZhbHVlcyA9IHZhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmVhbS5zZXRFbmRpYW4ob2xkRW5kaWFuKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhZzogdGFnLFxuICAgICAgICB2cjogdnIsXG4gICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb29rdXBUYWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9va3VwVGFnKHRhZykge1xuICAgICAgcmV0dXJuIERpY29tTWV0YURpY3Rpb25hcnkuZGljdGlvbmFyeVt0YWcudG9TdHJpbmcoKV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERpY29tTWVzc2FnZTtcbn0oKTtcblxudmFyIEVYUExJQ0lUX0xJVFRMRV9FTkRJQU4kMiA9IFwiMS4yLjg0MC4xMDAwOC4xLjIuMVwiO1xuXG52YXIgRGljb21EaWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGljb21EaWN0KG1ldGEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGljb21EaWN0KTtcblxuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gICAgdGhpcy5kaWN0ID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGljb21EaWN0LCBbe1xuICAgIGtleTogXCJ1cHNlcnRUYWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBzZXJ0VGFnKHRhZywgdnIsIHZhbHVlcykge1xuICAgICAgaWYgKHRoaXMuZGljdFt0YWddKSB7XG4gICAgICAgIHRoaXMuZGljdFt0YWddLlZhbHVlID0gdmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaWN0W3RhZ10gPSB7XG4gICAgICAgICAgdnI6IHZyLFxuICAgICAgICAgIFZhbHVlOiB2YWx1ZXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid3JpdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGUoKSB7XG4gICAgICB2YXIgbWV0YVN5bnRheCA9IEVYUExJQ0lUX0xJVFRMRV9FTkRJQU4kMjtcbiAgICAgIHZhciBmaWxlU3RyZWFtID0gbmV3IFdyaXRlQnVmZmVyU3RyZWFtKDQwOTYsIHRydWUpO1xuICAgICAgZmlsZVN0cmVhbS53cml0ZUhleChcIjAwXCIucmVwZWF0KDEyOCkpO1xuICAgICAgZmlsZVN0cmVhbS53cml0ZVN0cmluZyhcIkRJQ01cIik7XG4gICAgICB2YXIgbWV0YVN0cmVhbSA9IG5ldyBXcml0ZUJ1ZmZlclN0cmVhbSgxMDI0KTtcblxuICAgICAgaWYgKCF0aGlzLm1ldGFbXCIwMDAyMDAxMFwiXSkge1xuICAgICAgICB0aGlzLm1ldGFbXCIwMDAyMDAxMFwiXSA9IHtcbiAgICAgICAgICB2cjogXCJVSVwiLFxuICAgICAgICAgIFZhbHVlOiBbRVhQTElDSVRfTElUVExFX0VORElBTiQyXVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBEaWNvbU1lc3NhZ2Uud3JpdGUodGhpcy5tZXRhLCBtZXRhU3RyZWFtLCBtZXRhU3ludGF4KTtcbiAgICAgIERpY29tTWVzc2FnZS53cml0ZVRhZ09iamVjdChmaWxlU3RyZWFtLCBcIjAwMDIwMDAwXCIsIFwiVUxcIiwgbWV0YVN0cmVhbS5zaXplLCBtZXRhU3ludGF4KTtcbiAgICAgIGZpbGVTdHJlYW0uY29uY2F0KG1ldGFTdHJlYW0pO1xuICAgICAgdmFyIHVzZVN5bnRheCA9IHRoaXMubWV0YVtcIjAwMDIwMDEwXCJdLlZhbHVlWzBdO1xuICAgICAgRGljb21NZXNzYWdlLndyaXRlKHRoaXMuZGljdCwgZmlsZVN0cmVhbSwgdXNlU3ludGF4KTtcbiAgICAgIHJldHVybiBmaWxlU3RyZWFtLmdldEJ1ZmZlcigpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaWNvbURpY3Q7XG59KCk7XG5cbnZhciBESUNPTVdFQiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qXG4gIEphdmFTY3JpcHQgRElDT013ZWIgUkVTVCBBUEkgZm9yIGJyb3dzZXIgdXNlLlxuICAgRGVzaWduOlxuICAqIG1hcCByZXN0IGFwaSB0byBoaWdoLWxldmVsIGNvZGUgd2l0aCBtb2Rlcm4gY29udmVudGlvbnNcbiAgKiogRVM2OiBjbGFzc2VzLCBhcnJvdyBmdW5jdGlvbnMsIGxldC4uLlxuICAqKiBwcm9taXNlc1xuICAqKiBqc29uIGNvbnZlcnRlZCB0byBvYmplY3RzXG4gIGV4YW1wbGVzOiBzZWUgdGVzdHMoKSBtZXRob2QgYmVsb3cuXG4gICovXG4gIGZ1bmN0aW9uIERJQ09NV0VCKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBESUNPTVdFQik7XG5cbiAgICB0aGlzLnJvb3RVUkwgPSBvcHRpb25zLnJvb3RVUkw7XG4gICAgdGhpcy5wcm9ncmVzc0NhbGxiYWNrID0gb3B0aW9ucy5wcm9ncmVzc0NhbGxiYWNrO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERJQ09NV0VCLCBbe1xuICAgIGtleTogXCJyZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3QoZW5kcG9pbnQpIHtcbiAgICAgIHZhciBwYXJhbWV0ZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzcG9uc2VUeXBlID0gRElDT01XRUIucmVzcG9uc2VUeXBlKGVuZHBvaW50KTtcbiAgICAgIHZhciBzZXJ2aWNlID0gRElDT01XRUIuZW5kcG9pbnRTZXJ2aWNlKGVuZHBvaW50KTtcbiAgICAgIHZhciB1cmwgPSB0aGlzLnJvb3RVUkwgKyBcIi9cIiArIHNlcnZpY2UgKyBlbmRwb2ludDtcbiAgICAgIHZhciBmaXJzdFBhcmFtZXRlciA9IHRydWU7XG4gICAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbWV0ZXIpIHtcbiAgICAgICAgaWYgKGZpcnN0UGFyYW1ldGVyKSB7XG4gICAgICAgICAgdXJsICs9IFwiP1wiO1xuICAgICAgICAgIGZpcnN0UGFyYW1ldGVyID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsICs9IFwiJlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsICs9IHBhcmFtZXRlciArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtZXRlcnNbcGFyYW1ldGVyXSk7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gcHJvbWlzZUhhbmRsZXIocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCB1cmwpO1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcblxuICAgICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3NDYWxsYmFjaztcblxuICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBsaWIuZXJyb3IocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXF1ZXN0LnNlbmQocGF5bG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UocHJvbWlzZUhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF0aWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aWVudHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGF0aWVudHNcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0dWRpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3R1ZGllcyhwYXRpZW50SUQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCJzdHVkaWVzXCIsIHtcbiAgICAgICAgUGF0aWVudElEOiBwYXRpZW50SURcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VyaWVzKHN0dWR5SW5zdGFuY2VVSUQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCJzZXJpZXNcIiwge1xuICAgICAgICBTdHVkeUluc3RhbmNlVUlEOiBzdHVkeUluc3RhbmNlVUlEXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zdGFuY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbmNlcyhzdHVkeUluc3RhbmNlVUlELCBzZXJpZXNJbnN0YW5jZVVJRCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcImluc3RhbmNlc1wiLCB7XG4gICAgICAgIFN0dWR5SW5zdGFuY2VVSUQ6IHN0dWR5SW5zdGFuY2VVSUQsXG4gICAgICAgIFNlcmllc0luc3RhbmNlVUlEOiBzZXJpZXNJbnN0YW5jZVVJRFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluc3RhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbmNlKHN0dWR5SW5zdGFuY2VVSUQsIHNlcmllc0luc3RhbmNlVUlELCBzb3BJbnN0YW5jZVVJRCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIndhZG9cIiwge1xuICAgICAgICByZXF1ZXN0VHlwZTogXCJXQURPXCIsXG4gICAgICAgIHN0dWR5VUlEOiBzdHVkeUluc3RhbmNlVUlELFxuICAgICAgICBzZXJpZXNVSUQ6IHNlcmllc0luc3RhbmNlVUlELFxuICAgICAgICBvYmplY3RVSUQ6IHNvcEluc3RhbmNlVUlELFxuICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9kaWNvbVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGVzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGVzdHMoKSB7XG4gICAgICB2YXIgdGVzdGluZ1NlcnZlclVSTCA9IFwiaHR0cDovL3F1YW50b21lLm9yZzo0MjQyL2RjbTRjaGVlLWFyYy9hZXRzL0RDTTRDSEVFXCI7XG4gICAgICB2YXIgdGVzdE9wdGlvbnMgPSB7XG4gICAgICAgIHJvb3RVUkw6IHRlc3RpbmdTZXJ2ZXJVUkxcbiAgICAgIH07XG4gICAgICBuZXcgRElDT01XRUIodGVzdE9wdGlvbnMpLnBhdGllbnRzKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VzKSB7XG4gICAgICAgIHJlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXRpZW50KSB7XG4gICAgICAgICAgbGliLmxvZyhwYXRpZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJyZXNwb25zZVR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzcG9uc2VUeXBlKGVuZHBvaW50KSB7XG4gICAgICB2YXIgdHlwZXMgPSB7XG4gICAgICAgIHdhZG86IFwiYXJyYXlidWZmZXJcIlxuICAgICAgfTtcbiAgICAgIHJldHVybiB0eXBlc1tlbmRwb2ludF0gPyB0eXBlc1tlbmRwb2ludF0gOiBcImpzb25cIjtcbiAgICB9IC8vIHdoaWNoIFVSTCBzZXJ2aWNlIHRvIHVzZSBmb3IgZWFjaCBvZiB0aGUgaGlnaCBsZXZlbCBzZXJ2aWNlc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZW5kcG9pbnRTZXJ2aWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuZHBvaW50U2VydmljZShlbmRwb2ludCkge1xuICAgICAgdmFyIHNlcnZpY2VzID0ge1xuICAgICAgICB3YWRvOiBcIlwiXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNlcnZpY2VzKS5pbmRleE9mKGVuZHBvaW50KSAhPSAtMSA/IHNlcnZpY2VzW2VuZHBvaW50XSA6IFwicnMvXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJhbmRvbUVudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJhbmRvbUVudHJ5KGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERJQ09NV0VCO1xufSgpO1xuXG4vL1xuLy8gSGFuZGxlIERJQ09NIGFuZCBDSUVMQUIgY29sb3JzXG4vLyBiYXNlZCBvbjpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsb25rZW4vZGNtdGsvYmxvYi8zYzY4ZjBlODgyZTIyZTZkOWUyYTQyZjgzNjMzMmMwY2EyMWIzZTdmL2RjbWlvZC9saWJzcmMvY2llbGFidXRpbC5jY1xuLy9cbi8vIFJHQiBoZXJlIHJlZmVycyB0byBzUkdCIDAtMSBwZXIgY29tcG9uZW50LlxuLy8gZGljb21sYWIgaXMgQ0lFTEFCIHZhbHVlcyBhcyBkZWZpbmVkIGluIHRoZSBkaWNvbSBzdGFuZGFyZFxuLy8gWFlaIGlzIENJRVhZWiBjb252ZW50aW9uXG4vL1xuLy8gVE9ETzogbmVlZHMgYSB0ZXN0IHN1aXRlXG4vLyBUT0RPOiBvbmx5IGRpY29tbGFiMlJHQiB0ZXN0ZWQgb24gcmVhbCBkYXRhXG4vL1xuLy9cbnZhciBDb2xvcnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2xvcnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9ycyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sb3JzLCBudWxsLCBbe1xuICAgIGtleTogXCJkNjVXaGl0ZVBvaW50WFlaXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGQ2NVdoaXRlUG9pbnRYWVooKSB7XG4gICAgICAvLyB3aGl0ZSBwb2ludHMgb2YgRDY1IGxpZ2h0IHBvaW50IChDSUVMQUIgc3RhbmRhcmQgd2hpdGUgcG9pbnQpXG4gICAgICByZXR1cm4gWzAuOTUwNDU2LCAxLjAsIDEuMDg4NzU0XTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGljb21sYWIyUkdCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpY29tbGFiMlJHQihkaWNvbWxhYikge1xuICAgICAgcmV0dXJuIENvbG9ycy5sYWIyUkdCKENvbG9ycy5kaWNvbWxhYjJMQUIoZGljb21sYWIpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmdiMkRJQ09NTEFCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJnYjJESUNPTUxBQihyZ2IpIHtcbiAgICAgIHJldHVybiBDb2xvcnMubGFiMkRJQ09NTEFCKENvbG9ycy5yZ2IyTEFCKHJnYikpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaWNvbWxhYjJMQUJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGljb21sYWIyTEFCKGRpY29tbGFiKSB7XG4gICAgICByZXR1cm4gW2RpY29tbGFiWzBdICogMTAwLjAgLyA2NTUzNS4wLCAvLyByZXN1bHRzIGluIDAgPD0gTCA8PSAxMDBcbiAgICAgIGRpY29tbGFiWzFdICogMjU1LjAgLyA2NTUzNS4wIC0gMTI4LCAvLyByZXN1bHRzIGluIC0xMjggPD0gYSA8PSAxMjdcbiAgICAgIGRpY29tbGFiWzJdICogMjU1LjAgLyA2NTUzNS4wIC0gMTI4IC8vIHJlc3VsdHMgaW4gLTEyOCA8PSBiIDw9IDEyN1xuICAgICAgXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGFiMkRJQ09NTEFCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxhYjJESUNPTUxBQihsYWIpIHtcbiAgICAgIHJldHVybiBbbGFiWzBdICogNjU1MzUuMCAvIDEwMC4wLCAvLyByZXN1bHRzIGluIDAgPD0gTCA8PSA2NTUzNVxuICAgICAgKGxhYlsxXSArIDEyOCkgKiA2NTUzNS4wIC8gMjU1LjAsIC8vIHJlc3VsdHMgaW4gMCA8PSBhIDw9IDY1NTM1XG4gICAgICAobGFiWzJdICsgMTI4KSAqIDY1NTM1LjAgLyAyNTUuMCAvLyByZXN1bHRzIGluIDAgPD0gYiA8PSA2NTUzNVxuICAgICAgXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmdiMkxBQlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZ2IyTEFCKHJnYikge1xuICAgICAgcmV0dXJuIENvbG9ycy54eXoyTEFCKENvbG9ycy5yZ2IyWFlaKHJnYikpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnYW1tYUNvcnJlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2FtbWFDb3JyZWN0aW9uKG4pIHtcbiAgICAgIGlmIChuIDw9IDAuMDAzMTMwNjY4NDQyNTAwNTg4Mykge1xuICAgICAgICByZXR1cm4gMTIuOTIgKiBuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDEuMDU1ICogTWF0aC5wb3cobiwgMC40MTY2NjY2NjY2NjY2NjY2NjcpIC0gMC4wNTU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImludkdhbW1hQ29ycmVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnZHYW1tYUNvcnJlY3Rpb24obikge1xuICAgICAgaWYgKG4gPD0gMC4wNDA0NDgyMzYyNzcxMDc2KSB7XG4gICAgICAgIHJldHVybiBuIC8gMTIuOTI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coKG4gKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmdiMlhZWlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZ2IyWFlaKHJnYikge1xuICAgICAgdmFyIFIgPSBDb2xvcnMuaW52R2FtbWFDb3JyZWN0aW9uKHJnYlswXSk7XG4gICAgICB2YXIgRyA9IENvbG9ycy5pbnZHYW1tYUNvcnJlY3Rpb24ocmdiWzFdKTtcbiAgICAgIHZhciBCID0gQ29sb3JzLmludkdhbW1hQ29ycmVjdGlvbihyZ2JbMl0pO1xuICAgICAgcmV0dXJuIFswLjQxMjM5NTU4ODk2NzQxNDIxNjEgKiBSICsgMC4zNTc1ODM0MzA3NjM3MTQ4MTcxICogRyArIDAuMTgwNDkyNjQ3MzgxNzAxNTczNSAqIEIsIDAuMjEyNTg2MjMwNzg1NTk1NTUxNiAqIFIgKyAwLjcxNTE3MDMwMzcwMzQxMDg0OTkgKiBHICsgMC4wNzIyMDA0OTg2NDMzMzYyMjY4NSAqIEIsIDAuMDE5Mjk3MjE1NDkxNzQ2OTQ0ODQgKiBSICsgMC4xMTkxODM4NjQ1ODA4NDg1MzE4ICogRyArIDAuOTUwNDk3MTI1MTMxNTc5NzY2ICogQl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInh5ejJMQUJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24geHl6MkxBQih4eXopIHtcbiAgICAgIHZhciB3aGl0ZVBvaW50ID0gQ29sb3JzLmQ2NVdoaXRlUG9pbnRYWVooKTtcbiAgICAgIHZhciBYID0geHl6WzBdIC8gd2hpdGVQb2ludFswXTtcbiAgICAgIHZhciBZID0geHl6WzFdIC8gd2hpdGVQb2ludFsxXTtcbiAgICAgIHZhciBaID0geHl6WzJdIC8gd2hpdGVQb2ludFsyXTtcbiAgICAgIFggPSBDb2xvcnMubGFiZihYKTtcbiAgICAgIFkgPSBDb2xvcnMubGFiZihZKTtcbiAgICAgIFogPSBDb2xvcnMubGFiZihaKTtcbiAgICAgIHJldHVybiBbMTE2ICogWSAtIDE2LCA1MDAgKiAoWCAtIFkpLCAyMDAgKiAoWSAtIFopXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGFiMlJHQlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsYWIyUkdCKGxhYikge1xuICAgICAgcmV0dXJuIENvbG9ycy54eXoyUkdCKENvbG9ycy5sYWIyWFlaKGxhYikpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsYWIyWFlaXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxhYjJYWVoobGFiKSB7XG4gICAgICB2YXIgTCA9IChsYWJbMF0gKyAxNikgLyAxMTY7XG4gICAgICB2YXIgYSA9IEwgKyBsYWJbMV0gLyA1MDA7XG4gICAgICB2YXIgYiA9IEwgLSBsYWJbMl0gLyAyMDA7XG4gICAgICB2YXIgd2hpdGVQb2ludCA9IENvbG9ycy5kNjVXaGl0ZVBvaW50WFlaKCk7XG4gICAgICByZXR1cm4gW3doaXRlUG9pbnRbMF0gKiBDb2xvcnMubGFiZkludihhKSwgd2hpdGVQb2ludFsxXSAqIENvbG9ycy5sYWJmSW52KEwpLCB3aGl0ZVBvaW50WzJdICogQ29sb3JzLmxhYmZJbnYoYildO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ4eXoyUkdCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHh5ejJSR0IoeHl6KSB7XG4gICAgICB2YXIgUjEgPSAzLjI0MDYgKiB4eXpbMF0gLSAxLjUzNzIgKiB4eXpbMV0gLSAwLjQ5ODYgKiB4eXpbMl07XG4gICAgICB2YXIgRzEgPSAtMC45Njg5ICogeHl6WzBdICsgMS44NzU4ICogeHl6WzFdICsgMC4wNDE1ICogeHl6WzJdO1xuICAgICAgdmFyIEIxID0gMC4wNTU3ICogeHl6WzBdIC0gMC4yMDQgKiB4eXpbMV0gKyAxLjA1NyAqIHh5elsyXTtcbiAgICAgIC8qIEZvcmNlIG5vbm5lZ2F0aXZlIHZhbHVlcyBzbyB0aGF0IGdhbW1hIGNvcnJlY3Rpb24gaXMgd2VsbC1kZWZpbmVkLiAqL1xuXG4gICAgICB2YXIgbWluaW11bUNvbXBvbmVudCA9IE1hdGgubWluKFIxLCBHMSk7XG4gICAgICBtaW5pbXVtQ29tcG9uZW50ID0gTWF0aC5taW4obWluaW11bUNvbXBvbmVudCwgQjEpO1xuXG4gICAgICBpZiAobWluaW11bUNvbXBvbmVudCA8IDApIHtcbiAgICAgICAgUjEgLT0gbWluaW11bUNvbXBvbmVudDtcbiAgICAgICAgRzEgLT0gbWluaW11bUNvbXBvbmVudDtcbiAgICAgICAgQjEgLT0gbWluaW11bUNvbXBvbmVudDtcbiAgICAgIH1cbiAgICAgIC8qIFRyYW5zZm9ybSBmcm9tIFJHQiB0byBSJ0cnQicgKi9cblxuXG4gICAgICByZXR1cm4gW0NvbG9ycy5nYW1tYUNvcnJlY3Rpb24oUjEpLCBDb2xvcnMuZ2FtbWFDb3JyZWN0aW9uKEcxKSwgQ29sb3JzLmdhbW1hQ29ycmVjdGlvbihCMSldO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsYWJmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxhYmYobikge1xuICAgICAgaWYgKG4gPj0gOC44NTY0NTE2NzkwMzU2MzA4MmUtMykge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3cobiwgMC4zMzMzMzMzMzMzMzMzMzMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDg0MS4wIC8gMTA4LjAgKiBuICsgNC4wIC8gMjkuMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGFiZkludlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsYWJmSW52KG4pIHtcbiAgICAgIGlmIChuID49IDAuMjA2ODk2NTUxNzI0MTM3OTMxKSB7XG4gICAgICAgIHJldHVybiBuICogbiAqIG47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTA4LjAgLyA4NDEuMCAqIChuIC0gNC4wIC8gMjkuMCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbG9ycztcbn0oKTtcblxudmFyIGdsb2JhbCQxID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOlxuICAgICAgICAgICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDpcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSk7XG5cbnZhciBsb29rdXAgPSBbXTtcbnZhciByZXZMb29rdXAgPSBbXTtcbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXk7XG52YXIgaW5pdGVkID0gZmFsc2U7XG5mdW5jdGlvbiBpbml0ICgpIHtcbiAgaW5pdGVkID0gdHJ1ZTtcbiAgdmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbG9va3VwW2ldID0gY29kZVtpXTtcbiAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICByZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjI7XG4gIHJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2Mztcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICBpZiAoIWluaXRlZCkge1xuICAgIGluaXQoKTtcbiAgfVxuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFycjtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGg7XG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHBsYWNlSG9sZGVycyA9IGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDA7XG5cbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpO1xuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuO1xuXG4gIHZhciBMID0gMDtcblxuICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGO1xuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkY7XG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGO1xuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpO1xuICAgIGFycltMKytdID0gdG1wICYgMHhGRjtcbiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMik7XG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRjtcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkY7XG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcDtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSk7XG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpO1xuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgaWYgKCFpbml0ZWQpIHtcbiAgICBpbml0KCk7XG4gIH1cbiAgdmFyIHRtcDtcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aDtcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzOyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MzsgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSk7XG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV07XG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl07XG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl07XG4gICAgb3V0cHV0ICs9ICc9PSc7XG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSk7XG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdO1xuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdO1xuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdO1xuICAgIG91dHB1dCArPSAnPSc7XG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dCk7XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIHJlYWQgKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG07XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSAtNztcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMDtcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxO1xuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXTtcblxuICBpICs9IGQ7XG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIHMgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBlTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBlID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5mdW5jdGlvbiB3cml0ZSAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApO1xuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpO1xuICB2YXIgZCA9IGlzTEUgPyAxIDogLTE7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwO1xuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn1cblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBJTlNQRUNUX01BWF9CWVRFUyA9IDUwO1xuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbCQxLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbCQxLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0cnVlO1xuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aCk7XG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyOyAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgcmV0dXJuIGFyclxufTtcblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59O1xuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZTtcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKTtcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufTtcblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKTtcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMCk7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn07XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59O1xuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnO1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDA7XG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKTtcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKTtcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCk7XG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwO1xuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTU7XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGg7IC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSk7XG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5O1xuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwO1xuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKTtcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pO1xuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5CdWZmZXIuaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbmZ1bmN0aW9uIGludGVybmFsSXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihhKSB8fCAhaW50ZXJuYWxJc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aDtcbiAgdmFyIHkgPSBiLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXTtcbiAgICAgIHkgPSBiW2ldO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59O1xuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufTtcblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaTtcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKTtcbiAgdmFyIHBvcyA9IDA7XG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV07XG4gICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKTtcbiAgICBwb3MgKz0gYnVmLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59O1xuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChpbnRlcm5hbElzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTtcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCc7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlO1xuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXTtcbiAgYltuXSA9IGJbbV07XG4gIGJbbV0gPSBpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKTtcbiAgfVxuICByZXR1cm4gdGhpc1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMyk7XG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpO1xuICB9XG4gIHJldHVybiB0aGlzXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KTtcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNik7XG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpO1xuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KTtcbiAgfVxuICByZXR1cm4gdGhpc1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMDtcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnO1xuICB2YXIgbWF4ID0gSU5TUEVDVF9NQVhfQllURVM7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnO1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDA7XG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMDtcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMDtcbiAgZW5kID4+Pj0gMDtcbiAgdGhpc1N0YXJ0ID4+Pj0gMDtcbiAgdGhpc0VuZCA+Pj49IDA7XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnQ7XG4gIHZhciB5ID0gZW5kIC0gc3RhcnQ7XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KTtcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZCk7XG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXTtcbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59O1xuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXQ7XG4gICAgYnl0ZU9mZnNldCA9IDA7XG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZjtcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDA7XG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0OyAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXQ7XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMTtcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwO1xuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpO1xuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKGludGVybmFsSXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGOyAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyO1xuICAgICAgYXJyTGVuZ3RoIC89IDI7XG4gICAgICB2YWxMZW5ndGggLz0gMjtcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkJCQxIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xO1xuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQkJDEoYXJyLCBpKSA9PT0gcmVhZCQkMSh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpO1xuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXg7XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGg7XG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkJCQxKGFyciwgaSArIGopICE9PSByZWFkJCQxKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn07XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMDtcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpO1xuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWQ7XG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSQkMSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCc7XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgb2Zmc2V0ID0gMDtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldDtcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBvZmZzZXQgPSAwO1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwO1xuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aDtcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0O1xuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmc7XG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCc7XG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7XG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBmcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKTtcbiAgdmFyIHJlcyA9IFtdO1xuXG4gIHZhciBpID0gc3RhcnQ7XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXTtcbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbDtcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDE7XG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50O1xuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTtcbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpO1xuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTtcbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdO1xuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpO1xuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV07XG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXTtcbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXTtcbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpO1xuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRDtcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7XG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkY7XG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KTtcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2U7XG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDA7XG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGg7XG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJyc7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnO1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMDtcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlbjtcblxuICB2YXIgb3V0ID0gJyc7XG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gIHN0YXJ0ID0gfn5zdGFydDtcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuO1xuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMDtcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuO1xuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuO1xuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwO1xuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlbjtcbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQ7XG5cbiAgdmFyIG5ld0J1ZjtcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKTtcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydDtcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn07XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XTtcbiAgdmFyIG11bCA9IDE7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bDtcbiAgfVxuXG4gIHJldHVybiB2YWxcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7XG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdO1xuICB2YXIgbXVsID0gMTtcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bDtcbiAgfVxuXG4gIHJldHVybiB2YWxcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpO1xuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTtcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdO1xuICB2YXIgbXVsID0gMTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsO1xuICB9XG4gIG11bCAqPSAweDgwO1xuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpO1xuXG4gIHJldHVybiB2YWxcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoO1xuICB2YXIgbXVsID0gMTtcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXTtcbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bDtcbiAgfVxuICBtdWwgKj0gMHg4MDtcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKTtcblxuICByZXR1cm4gdmFsXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCk7XG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7XG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KTtcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpO1xuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOCk7XG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG4gIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG4gIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCk7XG4gIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTtcbiAgcmV0dXJuIHJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59O1xuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMTtcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCk7XG4gIH1cblxuICB2YXIgbXVsID0gMTtcbiAgdmFyIGkgPSAwO1xuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkY7XG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMDtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDE7XG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApO1xuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMTtcbiAgdmFyIG11bCA9IDE7XG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkY7XG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRjtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMCk7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSk7XG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICByZXR1cm4gb2Zmc2V0ICsgMVxufTtcblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogODtcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKTtcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7XG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn07XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDE7XG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmO1xuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKTtcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KTtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNik7XG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCk7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpO1xuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbXVsID0gMTtcbiAgdmFyIHN1YiA9IDA7XG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRjtcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMTtcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRjtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSk7XG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdCk7XG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxO1xuICB2YXIgbXVsID0gMTtcbiAgdmFyIHN1YiA9IDA7XG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkY7XG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxO1xuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApO1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpO1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDE7XG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICByZXR1cm4gb2Zmc2V0ICsgMVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufTtcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpO1xuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KTtcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNik7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpO1xuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKTtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxO1xuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KTtcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNik7XG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCk7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufTtcblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpO1xuICB9XG4gIHdyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNCk7XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59O1xuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KTtcbiAgfVxuICB3cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpO1xuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufTtcblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDA7XG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGg7XG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGg7XG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMDtcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0O1xuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQ7XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIHZhciBpO1xuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbGVuXG59O1xuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnQ7XG4gICAgICBzdGFydCA9IDA7XG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZDtcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1O1xuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwO1xuXG4gIGlmICghdmFsKSB2YWwgPSAwO1xuXG4gIHZhciBpO1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBpbnRlcm5hbElzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSk7XG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn07XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nO1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpO1xuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSc7XG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHk7XG4gIHZhciBjb2RlUG9pbnQ7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGw7XG4gIHZhciBieXRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCk7XG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpO1xuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludCk7XG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRik7XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvO1xuICB2YXIgYnl0ZUFycmF5ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGkgPSBjID4+IDg7XG4gICAgbG8gPSBjICUgMjU2O1xuICAgIGJ5dGVBcnJheS5wdXNoKGxvKTtcbiAgICBieXRlQXJyYXkucHVzaChoaSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiB0b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV07XG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG4vLyB0aGUgZm9sbG93aW5nIGlzIGZyb20gaXMtYnVmZmVyLCBhbHNvIGJ5IEZlcm9zcyBBYm91a2hhZGlqZWggYW5kIHdpdGggc2FtZSBsaXNlbmNlXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5mdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmICghIW9iai5faXNCdWZmZXIgfHwgaXNGYXN0QnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikpXG59XG5cbmZ1bmN0aW9uIGlzRmFzdEJ1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzRmFzdEJ1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cbmZ1bmN0aW9uIGRhdGFzZXRUb0RpY3QoZGF0YXNldCkge1xuICB2YXIgZmlsZU1ldGFJbmZvcm1hdGlvblZlcnNpb25BcnJheSA9IG5ldyBVaW50OEFycmF5KDIpO1xuICBmaWxlTWV0YUluZm9ybWF0aW9uVmVyc2lvbkFycmF5WzFdID0gMTtcbiAgdmFyIFRyYW5zZmVyU3ludGF4VUlEID0gZGF0YXNldC5fbWV0YS5UcmFuc2ZlclN5bnRheFVJRCAmJiBkYXRhc2V0Ll9tZXRhLlRyYW5zZmVyU3ludGF4VUlELlZhbHVlICYmIGRhdGFzZXQuX21ldGEuVHJhbnNmZXJTeW50YXhVSUQuVmFsdWVbMF0gPyBkYXRhc2V0Ll9tZXRhLlRyYW5zZmVyU3ludGF4VUlELlZhbHVlWzBdIDogXCIxLjIuODQwLjEwMDA4LjEuMi4xXCI7XG4gIGRhdGFzZXQuX21ldGEgPSB7XG4gICAgTWVkaWFTdG9yYWdlU09QQ2xhc3NVSUQ6IGRhdGFzZXQuU09QQ2xhc3NVSUQsXG4gICAgTWVkaWFTdG9yYWdlU09QSW5zdGFuY2VVSUQ6IGRhdGFzZXQuU09QSW5zdGFuY2VVSUQsXG4gICAgSW1wbGVtZW50YXRpb25WZXJzaW9uTmFtZTogXCJkY21qcy0wLjBcIixcbiAgICBUcmFuc2ZlclN5bnRheFVJRDogVHJhbnNmZXJTeW50YXhVSUQsXG4gICAgSW1wbGVtZW50YXRpb25DbGFzc1VJRDogXCIyLjI1LjgwMzAyODEzMTM3Nzg2Mzk4NTU0NzQyMDUwOTI2NzM0NjMwOTIxNjAzMzY2NjQ4MjI1MjEyMTQ1NDA0XCIsXG4gICAgRmlsZU1ldGFJbmZvcm1hdGlvblZlcnNpb246IGZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uQXJyYXkuYnVmZmVyXG4gIH07XG4gIHZhciBkZW5hdHVyYWxpemVkID0gRGljb21NZXRhRGljdGlvbmFyeS5kZW5hdHVyYWxpemVEYXRhc2V0KGRhdGFzZXQuX21ldGEpO1xuICB2YXIgZGljb21EaWN0ID0gbmV3IERpY29tRGljdChkZW5hdHVyYWxpemVkKTtcbiAgZGljb21EaWN0LmRpY3QgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LmRlbmF0dXJhbGl6ZURhdGFzZXQoZGF0YXNldCk7XG4gIHJldHVybiBkaWNvbURpY3Q7XG59XG5cbmZ1bmN0aW9uIGRhdGFzZXRUb0J1ZmZlcihkYXRhc2V0KSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShkYXRhc2V0VG9EaWN0KGRhdGFzZXQpLndyaXRlKCkpO1xufVxuXG5mdW5jdGlvbiBkYXRhc2V0VG9CbG9iKGRhdGFzZXQpIHtcbiAgdmFyIGJ1ZmZlciA9IGRhdGFzZXRUb0J1ZmZlcihkYXRhc2V0KTtcbiAgcmV0dXJuIG5ldyBCbG9iKFtidWZmZXJdLCB7XG4gICAgdHlwZTogXCJhcHBsaWNhdGlvbi9kaWNvbVwiXG4gIH0pO1xufVxuXG52YXIgRGVyaXZlZERhdGFzZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEZXJpdmVkRGF0YXNldChkYXRhc2V0cykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXJpdmVkRGF0YXNldCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKTtcbiAgICB2YXIgbyA9IHRoaXMub3B0aW9ucztcbiAgICBvLk1hbnVmYWN0dXJlciA9IG9wdGlvbnMuTWFudWZhY3R1cmVyIHx8IFwiVW5zcGVjaWZpZWRcIjtcbiAgICBvLk1hbnVmYWN0dXJlck1vZGVsTmFtZSA9IG9wdGlvbnMuTWFudWZhY3R1cmVyTW9kZWxOYW1lIHx8IFwiVW5zcGVjaWZpZWRcIjtcbiAgICBvLlNlcmllc0Rlc2NyaXB0aW9uID0gb3B0aW9ucy5TZXJpZXNEZXNjcmlwdGlvbiB8fCBcIlJlc2VhcmNoIERlcml2ZWQgc2VyaWVzXCI7XG4gICAgby5TZXJpZXNOdW1iZXIgPSBvcHRpb25zLlNlcmllc051bWJlciB8fCBcIjk5XCI7XG4gICAgby5Tb2Z0d2FyZVZlcnNpb25zID0gb3B0aW9ucy5Tb2Z0d2FyZVZlcnNpb25zIHx8IFwiMFwiO1xuICAgIG8uRGV2aWNlU2VyaWFsTnVtYmVyID0gb3B0aW9ucy5EZXZpY2VTZXJpYWxOdW1iZXIgfHwgXCIxXCI7XG4gICAgdmFyIGRhdGUgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LmRhdGUoKTtcbiAgICB2YXIgdGltZSA9IERpY29tTWV0YURpY3Rpb25hcnkudGltZSgpO1xuICAgIG8uU2VyaWVzRGF0ZSA9IG9wdGlvbnMuU2VyaWVzRGF0ZSB8fCBkYXRlO1xuICAgIG8uU2VyaWVzVGltZSA9IG9wdGlvbnMuU2VyaWVzVGltZSB8fCB0aW1lO1xuICAgIG8uQ29udGVudERhdGUgPSBvcHRpb25zLkNvbnRlbnREYXRlIHx8IGRhdGU7XG4gICAgby5Db250ZW50VGltZSA9IG9wdGlvbnMuQ29udGVudFRpbWUgfHwgdGltZTtcbiAgICBvLlNPUEluc3RhbmNlVUlEID0gb3B0aW9ucy5TT1BJbnN0YW5jZVVJRCB8fCBEaWNvbU1ldGFEaWN0aW9uYXJ5LnVpZCgpO1xuICAgIG8uU2VyaWVzSW5zdGFuY2VVSUQgPSBvcHRpb25zLlNlcmllc0luc3RhbmNlVUlEIHx8IERpY29tTWV0YURpY3Rpb25hcnkudWlkKCk7XG4gICAgby5DbGluaWNhbFRyaWFsVGltZVBvaW50SUQgPSBvcHRpb25zLkNsaW5pY2FsVHJpYWxUaW1lUG9pbnRJRCB8fCBcIlwiO1xuICAgIG8uQ2xpbmljYWxUcmlhbENvb3JkaW5hdGluZ0NlbnRlck5hbWUgPSBvcHRpb25zLkNsaW5pY2FsVHJpYWxDb29yZGluYXRpbmdDZW50ZXJOYW1lIHx8IFwiXCI7XG4gICAgby5DbGluaWNhbFRyaWFsU2VyaWVzSUQgPSBvcHRpb25zLkNsaW5pY2FsVHJpYWxTZXJpZXNJRCB8fCBcIlwiO1xuICAgIG8uSW1hZ2VDb21tZW50cyA9IG9wdGlvbnMuSW1hZ2VDb21tZW50cyB8fCBcIk5PVCBGT1IgQ0xJTklDQUwgVVNFXCI7XG4gICAgby5Db250ZW50UXVhbGlmaWNhdGlvbiA9IFwiUkVTRUFSQ0hcIjtcbiAgICB0aGlzLnJlZmVyZW5jZWREYXRhc2V0cyA9IGRhdGFzZXRzOyAvLyBsaXN0IG9mIG9uZSBvciBtb3JlIGRpY29tLWxpa2Ugb2JqZWN0IGluc3RhbmNlc1xuXG4gICAgdGhpcy5yZWZlcmVuY2VkRGF0YXNldCA9IHRoaXMucmVmZXJlbmNlZERhdGFzZXRzWzBdO1xuICAgIHRoaXMuZGF0YXNldCA9IHtcbiAgICAgIF92ck1hcDogdGhpcy5yZWZlcmVuY2VkRGF0YXNldC5fdnJNYXAsXG4gICAgICBfbWV0YTogdGhpcy5yZWZlcmVuY2VkRGF0YXNldC5fbWV0YVxuICAgIH07XG4gICAgdGhpcy5kZXJpdmUoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEZXJpdmVkRGF0YXNldCwgW3tcbiAgICBrZXk6IFwiYXNzaWduVG9EYXRhc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2lnblRvRGF0YXNldChkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRhdGFzZXRba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhc3NpZ25Gcm9tUmVmZXJlbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2lnbkZyb21SZWZlcmVuY2UodGFncykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZGF0YXNldFt0YWddID0gX3RoaXMyLnJlZmVyZW5jZWREYXRhc2V0W3RhZ10gfHwgXCJcIjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhc3NpZ25Gcm9tT3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NpZ25Gcm9tT3B0aW9ucyh0YWdzKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5kYXRhc2V0W3RhZ10gPSBfdGhpczMub3B0aW9uc1t0YWddIHx8IFwiXCI7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVyaXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcml2ZSgpIHtcbiAgICAgIC8vIGNvbW1vbiBmb3IgYWxsIGluc3RhbmNlcyBpbiBzdHVkeVxuICAgICAgdGhpcy5hc3NpZ25Gcm9tUmVmZXJlbmNlKFtcIkFjY2Vzc2lvbk51bWJlclwiLCBcIlJlZmVycmluZ1BoeXNpY2lhbk5hbWVcIiwgXCJTdHVkeURhdGVcIiwgXCJTdHVkeUlEXCIsIFwiU3R1ZHlUaW1lXCIsIFwiUGF0aWVudE5hbWVcIiwgXCJQYXRpZW50SURcIiwgXCJQYXRpZW50QmlydGhEYXRlXCIsIFwiUGF0aWVudFNleFwiLCBcIlBhdGllbnRBZ2VcIiwgXCJTdHVkeUluc3RhbmNlVUlEXCIsIFwiU3R1ZHlJRFwiXSk7XG4gICAgICB0aGlzLmFzc2lnbkZyb21PcHRpb25zKFtcIk1hbnVmYWN0dXJlclwiLCBcIlNvZnR3YXJlVmVyc2lvbnNcIiwgXCJEZXZpY2VTZXJpYWxOdW1iZXJcIiwgXCJNYW51ZmFjdHVyZXJNb2RlbE5hbWVcIiwgXCJTZXJpZXNEZXNjcmlwdGlvblwiLCBcIlNlcmllc051bWJlclwiLCBcIkltYWdlQ29tbWVudHNcIiwgXCJTZXJpZXNEYXRlXCIsIFwiU2VyaWVzVGltZVwiLCBcIkNvbnRlbnREYXRlXCIsIFwiQ29udGVudFRpbWVcIiwgXCJDb250ZW50UXVhbGlmaWNhdGlvblwiLCBcIlNPUEluc3RhbmNlVUlEXCIsIFwiU2VyaWVzSW5zdGFuY2VVSURcIl0pO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImNvcHlEYXRhc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHlEYXRhc2V0KGRhdGFzZXQpIHtcbiAgICAgIC8vIGNvcGllcyBldmVyeXRoaW5nIGJ1dCB0aGUgYnVmZmVyc1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YXNldCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEZXJpdmVkRGF0YXNldDtcbn0oKTtcblxudmFyIERlcml2ZWRQaXhlbHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9EZXJpdmVkRGF0YXNldCkge1xuICBfaW5oZXJpdHMoRGVyaXZlZFBpeGVscywgX0Rlcml2ZWREYXRhc2V0KTtcblxuICBmdW5jdGlvbiBEZXJpdmVkUGl4ZWxzKGRhdGFzZXRzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlcml2ZWRQaXhlbHMpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZFBpeGVscykuY2FsbCh0aGlzLCBkYXRhc2V0cywgb3B0aW9ucykpO1xuICAgIHZhciBvID0gX3RoaXMub3B0aW9ucztcbiAgICBvLkNvbnRlbnRMYWJlbCA9IG9wdGlvbnMuQ29udGVudExhYmVsIHx8IFwiXCI7XG4gICAgby5Db250ZW50RGVzY3JpcHRpb24gPSBvcHRpb25zLkNvbnRlbnREZXNjcmlwdGlvbiB8fCBcIlwiO1xuICAgIG8uQ29udGVudENyZWF0b3JOYW1lID0gb3B0aW9ucy5Db250ZW50Q3JlYXRvck5hbWUgfHwgXCJcIjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH0gLy8gdGhpcyBhc3N1bWVzIGEgbm9ybWFsaXplZCBtdWx0aWZyYW1lIGlucHV0IGFuZCB3aWxsIGNyZWF0ZVxuICAvLyBhIG11bHRpZnJhbWUgZGVyaXZlZCBpbWFnZVxuXG5cbiAgX2NyZWF0ZUNsYXNzKERlcml2ZWRQaXhlbHMsIFt7XG4gICAga2V5OiBcImRlcml2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJpdmUoKSB7XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihEZXJpdmVkUGl4ZWxzLnByb3RvdHlwZSksIFwiZGVyaXZlXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuYXNzaWduVG9EYXRhc2V0KHtcbiAgICAgICAgSW1hZ2VUeXBlOiBbXCJERVJJVkVEXCIsIFwiUFJJTUFSWVwiXSxcbiAgICAgICAgTG9zc3lJbWFnZUNvbXByZXNzaW9uOiBcIjAwXCIsXG4gICAgICAgIEluc3RhbmNlTnVtYmVyOiBcIjFcIlxuICAgICAgfSk7XG4gICAgICB0aGlzLmFzc2lnbkZyb21SZWZlcmVuY2UoW1wiU09QQ2xhc3NVSURcIiwgXCJNb2RhbGl0eVwiLCBcIkZyYW1lT2ZSZWZlcmVuY2VVSURcIiwgXCJQb3NpdGlvblJlZmVyZW5jZUluZGljYXRvclwiLCBcIk51bWJlck9mRnJhbWVzXCIsIFwiUm93c1wiLCBcIkNvbHVtbnNcIiwgXCJTYW1wbGVzUGVyUGl4ZWxcIiwgXCJQaG90b21ldHJpY0ludGVycHJldGF0aW9uXCIsIFwiQml0c1N0b3JlZFwiLCBcIkhpZ2hCaXRcIl0pO1xuICAgICAgdGhpcy5hc3NpZ25Gcm9tT3B0aW9ucyhbXCJDb250ZW50TGFiZWxcIiwgXCJDb250ZW50RGVzY3JpcHRpb25cIiwgXCJDb250ZW50Q3JlYXRvck5hbWVcIl0pOyAvL1xuICAgICAgLy8gVE9ETzogbW9yZSBjYXJlZnVsbHkgY29weSBvbmx5IFBpeGVsTWVhc3VyZXMgYW5kIHJlbGF0ZWRcbiAgICAgIC8vIFRPRE86IGFkZCBkZXJpdmF0aW9uIHJlZmVyZW5jZXNcbiAgICAgIC8vXG5cbiAgICAgIGlmICh0aGlzLnJlZmVyZW5jZWREYXRhc2V0LlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlID0gRGVyaXZlZERhdGFzZXQuY29weURhdGFzZXQodGhpcy5yZWZlcmVuY2VkRGF0YXNldC5TaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZWZlcmVuY2VkRGF0YXNldC5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmRhdGFzZXQuUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UgPSBEZXJpdmVkRGF0YXNldC5jb3B5RGF0YXNldCh0aGlzLnJlZmVyZW5jZWREYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlKTtcbiAgICAgIH0gLy8gbWFrZSBhbiBhcnJheSBvZiB6ZXJvcyBmb3IgdGhlIHBpeGVsc1xuXG5cbiAgICAgIHRoaXMuZGF0YXNldC5QaXhlbERhdGEgPSBuZXcgQXJyYXlCdWZmZXIodGhpcy5yZWZlcmVuY2VkRGF0YXNldC5QaXhlbERhdGEuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERlcml2ZWRQaXhlbHM7XG59KERlcml2ZWREYXRhc2V0KTtcblxudmFyIERlcml2ZWRJbWFnZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Rlcml2ZWRQaXhlbHMpIHtcbiAgX2luaGVyaXRzKERlcml2ZWRJbWFnZSwgX0Rlcml2ZWRQaXhlbHMpO1xuXG4gIGZ1bmN0aW9uIERlcml2ZWRJbWFnZShkYXRhc2V0cykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXJpdmVkSW1hZ2UpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEZXJpdmVkSW1hZ2UpLmNhbGwodGhpcywgZGF0YXNldHMsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEZXJpdmVkSW1hZ2UsIFt7XG4gICAga2V5OiBcImRlcml2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJpdmUoKSB7XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihEZXJpdmVkSW1hZ2UucHJvdG90eXBlKSwgXCJkZXJpdmVcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5hc3NpZ25Gcm9tUmVmZXJlbmNlKFtcIldpbmRvd0NlbnRlclwiLCBcIldpbmRvd1dpZHRoXCIsIFwiQml0c0FsbG9jYXRlZFwiLCBcIlBpeGVsUmVwcmVzZW50YXRpb25cIiwgXCJCb2R5UGFydEV4YW1pbmVkXCIsIFwiTGF0ZXJhbGl0eVwiLCBcIlBhdGllbnRQb3NpdGlvblwiLCBcIlJlc2NhbGVTbG9wZVwiLCBcIlJlc2NhbGVJbnRlcmNlcHRcIiwgXCJQaXhlbFByZXNlbnRhdGlvblwiLCBcIlZvbHVtZXRyaWNQcm9wZXJ0aWVzXCIsIFwiVm9sdW1lQmFzZWRDYWxjdWxhdGlvblRlY2huaXF1ZVwiLCBcIlByZXNlbnRhdGlvbkxVVFNoYXBlXCJdKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGVyaXZlZEltYWdlO1xufShEZXJpdmVkUGl4ZWxzKTtcblxudmFyIE5vcm1hbGl6ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb3JtYWxpemVyKGRhdGFzZXRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vcm1hbGl6ZXIpO1xuXG4gICAgdGhpcy5kYXRhc2V0cyA9IGRhdGFzZXRzOyAvLyBvbmUgb3IgbW9yZSBkaWNvbS1saWtlIG9iamVjdCBpbnN0YW5jZXNcblxuICAgIHRoaXMuZGF0YXNldCA9IHVuZGVmaW5lZDsgLy8gYSBub3JtYWxpemVkIG11bHRpZnJhbWUgZGljb20gb2JqZWN0IGluc3RhbmNlXG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm9ybWFsaXplciwgW3tcbiAgICBrZXk6IFwibm9ybWFsaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgICAgIHJldHVybiBcIk5vIG5vcm1hbGl6YXRpb24gZGVmaW5lZFwiO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImNvbnNpc3RlbnRTT1BDbGFzc1VJRHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc2lzdGVudFNPUENsYXNzVUlEcyhkYXRhc2V0cykge1xuICAgICAgLy8gcmV0dXJuIHNvcENsYXNzVUlEIGlmIGFsbCBleGlzdCBhbmQgbWF0Y2gsIG90aGVyd2lzZSB1bmRlZmluZWRcbiAgICAgIHZhciBzb3BDbGFzc1VJRDtcbiAgICAgIGRhdGFzZXRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFzZXQpIHtcbiAgICAgICAgaWYgKCFkYXRhc2V0LlNPUENsYXNzVUlEKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc29wQ2xhc3NVSUQpIHtcbiAgICAgICAgICBzb3BDbGFzc1VJRCA9IGRhdGFzZXQuU09QQ2xhc3NVSUQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YXNldC5TT1BDbGFzc1VJRCAhPT0gc29wQ2xhc3NVSUQpIHtcbiAgICAgICAgICBsaWIuZXJyb3IoXCJpbmNvbnNpc3RlbnQgc29wQ2xhc3NVSURzOiBcIiwgZGF0YXNldC5TT1BDbGFzc1VJRCwgc29wQ2xhc3NVSUQpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcENsYXNzVUlEO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJub3JtYWxpemVyRm9yU09QQ2xhc3NVSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplckZvclNPUENsYXNzVUlEKHNvcENsYXNzVUlEKSB7XG4gICAgICBzb3BDbGFzc1VJRCA9IHNvcENsYXNzVUlELnJlcGxhY2UoL1teMC05Ll0vZywgXCJcIik7IC8vIFRPRE86IGNsZWFuIGFsbCBWUnMgYXMgcGFydCBvZiBub3JtYWxpemluZ1xuXG4gICAgICB2YXIgdG9VSUQgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzVUlEc0J5TmFtZTtcbiAgICAgIHZhciBzb3BDbGFzc1VJRE1hcCA9IHt9O1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuQ1RJbWFnZV0gPSBDVEltYWdlTm9ybWFsaXplcjtcbiAgICAgIHNvcENsYXNzVUlETWFwW3RvVUlELlBhcmFtZXRyaWNNYXBTdG9yYWdlXSA9IFBNSW1hZ2VOb3JtYWxpemVyO1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuTVJJbWFnZV0gPSBNUkltYWdlTm9ybWFsaXplcjtcbiAgICAgIHNvcENsYXNzVUlETWFwW3RvVUlELkVuaGFuY2VkQ1RJbWFnZV0gPSBFbmhhbmNlZENUSW1hZ2VOb3JtYWxpemVyO1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuTGVnYWN5Q29udmVydGVkRW5oYW5jZWRDVEltYWdlXSA9IEVuaGFuY2VkQ1RJbWFnZU5vcm1hbGl6ZXI7XG4gICAgICBzb3BDbGFzc1VJRE1hcFt0b1VJRC5FbmhhbmNlZE1SSW1hZ2VdID0gRW5oYW5jZWRNUkltYWdlTm9ybWFsaXplcjtcbiAgICAgIHNvcENsYXNzVUlETWFwW3RvVUlELkxlZ2FjeUNvbnZlcnRlZEVuaGFuY2VkTVJJbWFnZV0gPSBFbmhhbmNlZE1SSW1hZ2VOb3JtYWxpemVyO1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuRW5oYW5jZWRVU1ZvbHVtZV0gPSBFbmhhbmNlZFVTVm9sdW1lTm9ybWFsaXplcjtcbiAgICAgIHNvcENsYXNzVUlETWFwW3RvVUlELlBFVEltYWdlXSA9IFBFVEltYWdlTm9ybWFsaXplcjtcbiAgICAgIHNvcENsYXNzVUlETWFwW3RvVUlELkVuaGFuY2VkUEVUSW1hZ2VdID0gUEVUSW1hZ2VOb3JtYWxpemVyO1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuTGVnYWN5Q29udmVydGVkRW5oYW5jZWRQRVRJbWFnZV0gPSBQRVRJbWFnZU5vcm1hbGl6ZXI7XG4gICAgICBzb3BDbGFzc1VJRE1hcFt0b1VJRC5TZWdtZW50YXRpb25dID0gU0VHSW1hZ2VOb3JtYWxpemVyO1xuICAgICAgc29wQ2xhc3NVSURNYXBbdG9VSUQuRGVmb3JtYWJsZVNwYXRpYWxSZWdpc3RyYXRpb25dID0gRFNSTm9ybWFsaXplcjtcbiAgICAgIHJldHVybiBzb3BDbGFzc1VJRE1hcFtzb3BDbGFzc1VJRF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzTXVsdGlmcmFtZVNPUENsYXNzVUlEXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTXVsdGlmcmFtZVNPUENsYXNzVUlEKHNvcENsYXNzVUlEKSB7XG4gICAgICB2YXIgdG9VSUQgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzVUlEc0J5TmFtZTtcbiAgICAgIHZhciBtdWx0aWZyYW1lU09QQ2xhc3NlcyA9IFt0b1VJRC5FbmhhbmNlZE1SSW1hZ2UsIHRvVUlELkxlZ2FjeUNvbnZlcnRlZEVuaGFuY2VkTVJJbWFnZSwgdG9VSUQuRW5oYW5jZWRDVEltYWdlLCB0b1VJRC5MZWdhY3lDb252ZXJ0ZWRFbmhhbmNlZENUSW1hZ2UsIHRvVUlELkVuaGFuY2VkVVNWb2x1bWUsIHRvVUlELkVuaGFuY2VkUEVUSW1hZ2UsIHRvVUlELkxlZ2FjeUNvbnZlcnRlZEVuaGFuY2VkUEVUSW1hZ2UsIHRvVUlELlNlZ21lbnRhdGlvbiwgdG9VSUQuUGFyYW1ldHJpY01hcFN0b3JhZ2VdO1xuICAgICAgcmV0dXJuIG11bHRpZnJhbWVTT1BDbGFzc2VzLmluZGV4T2Yoc29wQ2xhc3NVSUQpICE9PSAtMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNNdWx0aWZyYW1lRGF0YXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc011bHRpZnJhbWVEYXRhc2V0KCkge1xuICAgICAgdmFyIGRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLmRhdGFzZXQ7XG4gICAgICB2YXIgc29wQ2xhc3NVSUQgPSBkcy5TT1BDbGFzc1VJRC5yZXBsYWNlKC9bXjAtOS5dL2csIFwiXCIpOyAvLyBUT0RPOiBjbGVhbiBhbGwgVlJzIGFzIHBhcnQgb2Ygbm9ybWFsaXppbmdcblxuICAgICAgcmV0dXJuIE5vcm1hbGl6ZXIuaXNNdWx0aWZyYW1lU09QQ2xhc3NVSUQoc29wQ2xhc3NVSUQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJub3JtYWxpemVUb0RhdGFzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplVG9EYXRhc2V0KGRhdGFzZXRzKSB7XG4gICAgICB2YXIgc29wQ2xhc3NVSUQgPSBOb3JtYWxpemVyLmNvbnNpc3RlbnRTT1BDbGFzc1VJRHMoZGF0YXNldHMpO1xuICAgICAgdmFyIG5vcm1hbGl6ZXJDbGFzcyA9IE5vcm1hbGl6ZXIubm9ybWFsaXplckZvclNPUENsYXNzVUlEKHNvcENsYXNzVUlEKTtcblxuICAgICAgaWYgKCFub3JtYWxpemVyQ2xhc3MpIHtcbiAgICAgICAgbGliLmVycm9yKFwibm8gbm9ybWFsaXplckNsYXNzIGZvciBcIiwgc29wQ2xhc3NVSUQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9ybWFsaXplciA9IG5ldyBub3JtYWxpemVyQ2xhc3MoZGF0YXNldHMpO1xuICAgICAgbm9ybWFsaXplci5ub3JtYWxpemUoKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVyLmRhdGFzZXQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vcm1hbGl6ZXI7XG59KCk7XG5cbnZhciBJbWFnZU5vcm1hbGl6ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Ob3JtYWxpemVyKSB7XG4gIF9pbmhlcml0cyhJbWFnZU5vcm1hbGl6ZXIsIF9Ob3JtYWxpemVyKTtcblxuICBmdW5jdGlvbiBJbWFnZU5vcm1hbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlTm9ybWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEltYWdlTm9ybWFsaXplcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW1hZ2VOb3JtYWxpemVyLCBbe1xuICAgIGtleTogXCJub3JtYWxpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgICAgdGhpcy5jb252ZXJ0VG9NdWx0aWZyYW1lKCk7XG4gICAgICB0aGlzLm5vcm1hbGl6ZU11bHRpZnJhbWUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29udmVydFRvTXVsdGlmcmFtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9NdWx0aWZyYW1lKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YXNldHMubGVuZ3RoID09PSAxICYmIE5vcm1hbGl6ZXIuaXNNdWx0aWZyYW1lRGF0YXNldCh0aGlzLmRhdGFzZXRzWzBdKSkge1xuICAgICAgICAvLyBhbHJlYWR5IGEgbXVsdGlmcmFtZSwgc28ganVzdCB1c2UgaXRcbiAgICAgICAgdGhpcy5kYXRhc2V0ID0gdGhpcy5kYXRhc2V0c1swXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlcml2YXRpb24gPSBuZXcgRGVyaXZlZEltYWdlKHRoaXMuZGF0YXNldHMpO1xuICAgICAgdGhpcy5kYXRhc2V0ID0gdGhpcy5kZXJpdmF0aW9uLmRhdGFzZXQ7XG4gICAgICB2YXIgZHMgPSB0aGlzLmRhdGFzZXQ7IC8vIGNyZWF0ZSBhIG5ldyBtdWx0aWZyYW1lIGZyb20gdGhlIHNvdXJjZSBkYXRhc2V0c1xuICAgICAgLy8gZmlsbCBpbiBvbmx5IHRob3NlIGVsZW1lbnRzIHJlcXVpcmVkIHRvIG1ha2UgYSB2YWxpZCBpbWFnZVxuICAgICAgLy8gZm9yIHZvbHVtZXRyaWMgcHJvY2Vzc2luZ1xuXG4gICAgICB2YXIgcmVmZXJlbmNlRGF0YXNldCA9IHRoaXMuZGF0YXNldHNbMF07XG4gICAgICBkcy5OdW1iZXJPZkZyYW1lcyA9IHRoaXMuZGF0YXNldHMubGVuZ3RoOyAvLyBUT0RPOiBkZXZlbG9wIHNldHMgb2YgZWxlbWVudHMgdG8gY29weSBvdmVyIGluIGxvb3BzXG5cbiAgICAgIGRzLlNPUENsYXNzVUlEID0gcmVmZXJlbmNlRGF0YXNldC5TT1BDbGFzc1VJRDtcbiAgICAgIGRzLlJvd3MgPSByZWZlcmVuY2VEYXRhc2V0LlJvd3M7XG4gICAgICBkcy5Db2x1bW5zID0gcmVmZXJlbmNlRGF0YXNldC5Db2x1bW5zO1xuICAgICAgZHMuQml0c0FsbG9jYXRlZCA9IHJlZmVyZW5jZURhdGFzZXQuQml0c0FsbG9jYXRlZDtcbiAgICAgIGRzLlBpeGVsUmVwcmVzZW50YXRpb24gPSByZWZlcmVuY2VEYXRhc2V0LlBpeGVsUmVwcmVzZW50YXRpb247XG4gICAgICBkcy5SZXNjYWxlU2xvcGUgPSByZWZlcmVuY2VEYXRhc2V0LlJlc2NhbGVTbG9wZSB8fCBcIjFcIjtcbiAgICAgIGRzLlJlc2NhbGVJbnRlcmNlcHQgPSByZWZlcmVuY2VEYXRhc2V0LlJlc2NhbGVJbnRlcmNlcHQgfHwgXCIwXCI7IC8vZHMuQnVybmVkSW5Bbm5vdGF0aW9uID0gcmVmZXJlbmNlRGF0YXNldC5CdXJuZWRJbkFubm90YXRpb24gfHwgXCJZRVNcIjtcbiAgICAgIC8vIHNvcnRcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waWVwZXIvU2xpY2VyMy9ibG9iL21hc3Rlci9CYXNlL0dVSS9UY2wvTG9hZFZvbHVtZS50Y2xcbiAgICAgIC8vIFRPRE86IGFkZCBzcGFjaW5nIGNoZWNrczpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TbGljZXIvU2xpY2VyL2Jsb2IvbWFzdGVyL01vZHVsZXMvU2NyaXB0ZWQvRElDT01QbHVnaW5zL0RJQ09NU2NhbGFyVm9sdW1lUGx1Z2luLnB5I0wyMjgtTDI1MFxuICAgICAgLy8gVE9ETzogcHV0IHRoaXMgaW5mb3JtYXRpb24gaW50byB0aGUgU2hhcmVkIGFuZCBQZXJGcmFtZSBmdW5jdGlvbmFsIGdyb3Vwc1xuICAgICAgLy8gVE9ETzogc29ydGluZyBvZiBmcmFtZXMgY291bGQgaGFwcGVuIGluIG5vcm1hbGl6ZU11bHRpZnJhbWUgaW5zdGVhZCwgc2luY2Ugb3RoZXJcbiAgICAgIC8vIG11bHRpZnJhbWUgY29udmVydGVycyBtYXkgbm90IHNvcnQgdGhlIGltYWdlc1xuICAgICAgLy8gVE9ETzogc29ydGluZyBjYW4gYmUgc2VlbiBhcyBwYXJ0IG9mIGdlbmVyYXRpb24gb2YgdGhlIERpbWVuc2lvbiBNdWx0aWZyYW1lIERpbWVuc2lvbiBNb2R1bGVcbiAgICAgIC8vIGFuZCBzaG91bGQgcmVhbGx5IGJlIGRvbmUgaW4gYW4gYWNxdWlzaXRpb24tc3BlY2lmaWMgd2F5IChlLmcuIGZvciBEQ0UpXG5cbiAgICAgIHZhciByZWZlcmVuY2VQb3NpdGlvbiA9IHJlZmVyZW5jZURhdGFzZXQuSW1hZ2VQb3NpdGlvblBhdGllbnQ7XG4gICAgICB2YXIgcm93VmVjdG9yID0gcmVmZXJlbmNlRGF0YXNldC5JbWFnZU9yaWVudGF0aW9uUGF0aWVudC5zbGljZSgwLCAzKTtcbiAgICAgIHZhciBjb2x1bW5WZWN0b3IgPSByZWZlcmVuY2VEYXRhc2V0LkltYWdlT3JpZW50YXRpb25QYXRpZW50LnNsaWNlKDMsIDYpO1xuICAgICAgdmFyIHNjYW5BeGlzID0gSW1hZ2VOb3JtYWxpemVyLnZlYzNDcm9zc1Byb2R1Y3Qocm93VmVjdG9yLCBjb2x1bW5WZWN0b3IpO1xuICAgICAgdmFyIGRpc3RhbmNlRGF0YXNldFBhaXJzID0gW107XG4gICAgICB0aGlzLmRhdGFzZXRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFzZXQpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZGF0YXNldC5JbWFnZVBvc2l0aW9uUGF0aWVudC5zbGljZSgpO1xuICAgICAgICB2YXIgcG9zaXRpb25WZWN0b3IgPSBJbWFnZU5vcm1hbGl6ZXIudmVjM1N1YnRyYWN0KHBvc2l0aW9uLCByZWZlcmVuY2VQb3NpdGlvbik7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IEltYWdlTm9ybWFsaXplci52ZWMzRG90KHBvc2l0aW9uVmVjdG9yLCBzY2FuQXhpcyk7XG4gICAgICAgIGRpc3RhbmNlRGF0YXNldFBhaXJzLnB1c2goW2Rpc3RhbmNlLCBkYXRhc2V0XSk7XG4gICAgICB9KTtcbiAgICAgIGRpc3RhbmNlRGF0YXNldFBhaXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGJbMF0gLSBhWzBdO1xuICAgICAgfSk7IC8vIGFzc2lnbiBhcnJheSBidWZmZXJzXG5cbiAgICAgIGlmIChkcy5CaXRzQWxsb2NhdGVkICE9PSAxNikge1xuICAgICAgICBsaWIuZXJyb3IoXCJPbmx5IHdvcmtzIHdpdGggMTYgYml0IGRhdGEsIG5vdCBcIiArIFN0cmluZyh0aGlzLmRhdGFzZXQuQml0c0FsbG9jYXRlZCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmZXJlbmNlRGF0YXNldC5fdnJNYXAgJiYgIXJlZmVyZW5jZURhdGFzZXQuX3ZyTWFwLlBpeGVsRGF0YSkge1xuICAgICAgICBsaWIud2FybihcIk5vIHZyIG1hcCBnaXZlbiBmb3IgcGl4ZWwgZGF0YSwgdXNpbmcgT1dcIik7XG4gICAgICAgIGRzLl92ck1hcCA9IHtcbiAgICAgICAgICBQaXhlbERhdGE6IFwiT1dcIlxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHMuX3ZyTWFwID0ge1xuICAgICAgICAgIFBpeGVsRGF0YTogcmVmZXJlbmNlRGF0YXNldC5fdnJNYXAuUGl4ZWxEYXRhXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBmcmFtZVNpemUgPSByZWZlcmVuY2VEYXRhc2V0LlBpeGVsRGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgZHMuUGl4ZWxEYXRhID0gbmV3IEFycmF5QnVmZmVyKGRzLk51bWJlck9mRnJhbWVzICogZnJhbWVTaXplKTtcbiAgICAgIHZhciBmcmFtZSA9IDA7XG4gICAgICBkaXN0YW5jZURhdGFzZXRQYWlycy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBkYXRhc2V0ID0gcGFpclsxXTtcbiAgICAgICAgdmFyIHBpeGVscyA9IG5ldyBVaW50MTZBcnJheShkYXRhc2V0LlBpeGVsRGF0YSk7XG4gICAgICAgIHZhciBmcmFtZVZpZXcgPSBuZXcgVWludDE2QXJyYXkoZHMuUGl4ZWxEYXRhLCBmcmFtZSAqIGZyYW1lU2l6ZSwgZnJhbWVTaXplIC8gMik7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmcmFtZVZpZXcuc2V0KHBpeGVscyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHtcbiAgICAgICAgICAgIGxpYi5lcnJvcihcIkVycm9yIGluc2VydGluZyBwaXhlbHMgaW4gUGl4ZWxEYXRhXCIpO1xuICAgICAgICAgICAgbGliLmVycm9yKFwiZnJhbWVTaXplXCIsIGZyYW1lU2l6ZSk7XG4gICAgICAgICAgICBsaWIuZXJyb3IoXCJOdW1iZXJPZkZyYW1lc1wiLCBkcy5OdW1iZXJPZkZyYW1lcyk7XG4gICAgICAgICAgICBsaWIuZXJyb3IoXCJwYWlyXCIsIHBhaXIpO1xuICAgICAgICAgICAgbGliLmVycm9yKFwiZGF0YXNldCBQaXhlbERhdGEgc2l6ZVwiLCBkYXRhc2V0LlBpeGVsRGF0YS5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lKys7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRzLk51bWJlck9mRnJhbWVzIDwgMikge1xuICAgICAgICAvLyBUT0RPXG4gICAgICAgIGxpYi5lcnJvcihcIkNhbm5vdCBwb3B1bGF0ZSBzaGFyZWQgZ3JvdXBzIHVuaXF1ZWx5IHdpdGhvdXQgbXVsdGlwbGUgZnJhbWVzXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2Rpc3RhbmNlRGF0YXNldFBhaXJzID0gX3NsaWNlZFRvQXJyYXkoZGlzdGFuY2VEYXRhc2V0UGFpcnNbMF0sIDIpLFxuICAgICAgICAgIGRpc3RhbmNlMCA9IF9kaXN0YW5jZURhdGFzZXRQYWlyc1swXSxcbiAgICAgICAgICBkYXRhc2V0MCA9IF9kaXN0YW5jZURhdGFzZXRQYWlyc1sxXTtcblxuICAgICAgdmFyIGRpc3RhbmNlMSA9IGRpc3RhbmNlRGF0YXNldFBhaXJzWzFdWzBdOyAvL1xuICAgICAgLy8gbWFrZSB0aGUgZnVuY3Rpb25hbCBncm91cHNcbiAgICAgIC8vXG4gICAgICAvLyBzaGFyZWRcblxuICAgICAgdmFyIFNwYWNpbmdCZXR3ZWVuU2xpY2VzID0gTWF0aC5hYnMoZGlzdGFuY2UxIC0gZGlzdGFuY2UwKTtcbiAgICAgIGRzLlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZSA9IHtcbiAgICAgICAgUGxhbmVPcmllbnRhdGlvblNlcXVlbmNlOiB7XG4gICAgICAgICAgSW1hZ2VPcmllbnRhdGlvblBhdGllbnQ6IGRhdGFzZXQwLkltYWdlT3JpZW50YXRpb25QYXRpZW50XG4gICAgICAgIH0sXG4gICAgICAgIFBpeGVsTWVhc3VyZXNTZXF1ZW5jZToge1xuICAgICAgICAgIFBpeGVsU3BhY2luZzogZGF0YXNldDAuUGl4ZWxTcGFjaW5nLFxuICAgICAgICAgIFNwYWNpbmdCZXR3ZWVuU2xpY2VzOiBTcGFjaW5nQmV0d2VlblNsaWNlcyxcbiAgICAgICAgICBTbGljZVRoaWNrbmVzczogU3BhY2luZ0JldHdlZW5TbGljZXNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGRzLlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZSA9IHtcbiAgICAgICAgU2VyaWVzSW5zdGFuY2VVSUQ6IGRhdGFzZXQwLlNlcmllc0luc3RhbmNlVUlELFxuICAgICAgICBSZWZlcmVuY2VkSW5zdGFuY2VTZXF1ZW5jZTogW11cbiAgICAgIH07IC8vIHBlci1mcmFtZVxuXG4gICAgICBkcy5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZSA9IFtdOyAvLyBjb3B5IG92ZXIgZWFjaCBkYXRhc2V0cyB3aW5kb3cvbGV2ZWwgaW50byB0aGUgcGVyLWZyYW1lIGdyb3Vwc1xuICAgICAgLy8gYW5kIHNldCB0aGUgcmVmZXJlbmNlZCBzZXJpZXMgdWlkXG5cbiAgICAgIHRoaXMuZGF0YXNldHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGRzLlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLnB1c2goe1xuICAgICAgICAgIFBsYW5lUG9zaXRpb25TZXF1ZW5jZToge1xuICAgICAgICAgICAgSW1hZ2VQb3NpdGlvblBhdGllbnQ6IGRpc3RhbmNlRGF0YXNldFBhaXJzW2RhdGFzZXRJbmRleF1bMV0uSW1hZ2VQb3NpdGlvblBhdGllbnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIEZyYW1lVk9JTFVUU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIFdpbmRvd0NlbnRlcjogZGF0YXNldC5XaW5kb3dDZW50ZXIsXG4gICAgICAgICAgICBXaW5kb3dXaWR0aDogZGF0YXNldC5XaW5kb3dXaWR0aFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRzLlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZS5SZWZlcmVuY2VkSW5zdGFuY2VTZXF1ZW5jZS5wdXNoKHtcbiAgICAgICAgICBSZWZlcmVuY2VkU09QQ2xhc3NVSUQ6IGRhdGFzZXQuU09QQ2xhc3NVSUQsXG4gICAgICAgICAgUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEOiBkYXRhc2V0LlNPUEluc3RhbmNlVUlEXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgZGltZW5zaW9uVUlEID0gRGljb21NZXRhRGljdGlvbmFyeS51aWQoKTtcbiAgICAgIHRoaXMuZGF0YXNldC5EaW1lbnNpb25Pcmdhbml6YXRpb25TZXF1ZW5jZSA9IHtcbiAgICAgICAgRGltZW5zaW9uT3JnYW5pemF0aW9uVUlEOiBkaW1lbnNpb25VSURcbiAgICAgIH07XG4gICAgICB0aGlzLmRhdGFzZXQuRGltZW5zaW9uSW5kZXhTZXF1ZW5jZSA9IFt7XG4gICAgICAgIERpbWVuc2lvbk9yZ2FuaXphdGlvblVJRDogZGltZW5zaW9uVUlELFxuICAgICAgICBEaW1lbnNpb25JbmRleFBvaW50ZXI6IDIwOTcyMDIsXG4gICAgICAgIEZ1bmN0aW9uYWxHcm91cFBvaW50ZXI6IDIxMzQyOTEsXG4gICAgICAgIC8vIFBsYW5lUG9zaXRpb25TZXF1ZW5jZVxuICAgICAgICBEaW1lbnNpb25EZXNjcmlwdGlvbkxhYmVsOiBcIkltYWdlUG9zaXRpb25QYXRpZW50XCJcbiAgICAgIH1dO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJub3JtYWxpemVNdWx0aWZyYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZU11bHRpZnJhbWUoKSB7XG4gICAgICB2YXIgZHMgPSB0aGlzLmRhdGFzZXQ7XG5cbiAgICAgIGlmICghZHMuTnVtYmVyT2ZGcmFtZXMpIHtcbiAgICAgICAgbGliLmVycm9yKFwiTWlzc2luZyBudW1iZXIgb3IgZnJhbWVzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKE51bWJlcihkcy5OdW1iZXJPZkZyYW1lcykgPT09IDEpIHtcbiAgICAgICAgbGliLmVycm9yKFwiU2luZ2xlIGZyYW1lIGluc3RhbmNlIG9mIG11bHRpZnJhbWUgY2xhc3Mgbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRzLlBpeGVsUmVwcmVzZW50YXRpb24pIHtcbiAgICAgICAgLy8gUmVxdWlyZWQgdGFnOiBndWVzcyBzaWduZWRcbiAgICAgICAgZHMuUGl4ZWxSZXByZXNlbnRhdGlvbiA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICghZHMuU3R1ZHlJRCB8fCBkcy5TdHVkeUlEID09PSBcIlwiKSB7XG4gICAgICAgIC8vIFJlcXVpcmVkIHRhZzogZmlsbCBpbiBpZiBuZWVkZWRcbiAgICAgICAgZHMuU3R1ZHlJRCA9IFwiTm8gU3R1ZHkgSURcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbGlkTGF0ZXJhbGl0aWVzID0gW1wiUlwiLCBcIkxcIl07XG5cbiAgICAgIGlmICh2YWxpZExhdGVyYWxpdGllcy5pbmRleE9mKGRzLkxhdGVyYWxpdHkpID09PSAtMSkge1xuICAgICAgICBkZWxldGUgZHMuTGF0ZXJhbGl0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkcy5QcmVzZW50YXRpb25MVVRTaGFwZSkge1xuICAgICAgICBkcy5QcmVzZW50YXRpb25MVVRTaGFwZSA9IFwiSURFTlRJVFlcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkcy5TaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UpIHtcbiAgICAgICAgbGliLmVycm9yKFwiQ2FuIG9ubHkgcHJvY2VzcyBtdWx0aWZyYW1lIGRhdGEgd2l0aCBTaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2VcIik7XG4gICAgICB9IC8vIFRPRE86IHNwZWNpYWwgY2FzZSFcblxuXG4gICAgICBpZiAoZHMuQm9keVBhcnRFeGFtaW5lZCA9PT0gXCJQUk9TVEFURVwiKSB7XG4gICAgICAgIGRzLlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5GcmFtZUFuYXRvbXlTZXF1ZW5jZSA9IHtcbiAgICAgICAgICBBbmF0b21pY1JlZ2lvblNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwiVC05MjAwQlwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJTUlRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlByb3N0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIEZyYW1lTGF0ZXJhbGl0eTogXCJVXCJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc2NhbGVJbnRlcmNlcHQgPSBkcy5SZXNjYWxlSW50ZXJjZXB0IHx8IDA7XG4gICAgICB2YXIgcmVzY2FsZVNsb3BlID0gZHMuUmVzY2FsZVNsb3BlIHx8IDE7XG4gICAgICBkcy5TaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UuUGl4ZWxWYWx1ZVRyYW5zZm9ybWF0aW9uU2VxdWVuY2UgPSB7XG4gICAgICAgIFJlc2NhbGVJbnRlcmNlcHQ6IHJlc2NhbGVJbnRlcmNlcHQsXG4gICAgICAgIFJlc2NhbGVTbG9wZTogcmVzY2FsZVNsb3BlLFxuICAgICAgICBSZXNjYWxlVHlwZTogXCJVU1wiXG4gICAgICB9O1xuICAgICAgdmFyIGZyYW1lTnVtYmVyID0gMTtcbiAgICAgIHRoaXMuZGF0YXNldHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YXNldCkge1xuICAgICAgICBkcy5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZVtmcmFtZU51bWJlciAtIDFdLkZyYW1lQ29udGVudFNlcXVlbmNlID0ge1xuICAgICAgICAgIEZyYW1lQWNxdWlzaXRpb25EdXJhdGlvbjogMCxcbiAgICAgICAgICBTdGFja0lEOiAxLFxuICAgICAgICAgIEluU3RhY2tQb3NpdGlvbk51bWJlcjogZnJhbWVOdW1iZXIsXG4gICAgICAgICAgRGltZW5zaW9uSW5kZXhWYWx1ZXM6IGZyYW1lTnVtYmVyXG4gICAgICAgIH07XG4gICAgICAgIHZhciBmcmFtZVRpbWUgPSBkYXRhc2V0LkFjcXVpc2l0aW9uRGF0ZSArIGRhdGFzZXQuQWNxdWlzaXRpb25UaW1lO1xuXG4gICAgICAgIGlmICghaXNOYU4oZnJhbWVUaW1lKSkge1xuICAgICAgICAgIHZhciBmcmFtZUNvbnRlbnRTZXF1ZW5jZSA9IGRzLlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlW2ZyYW1lTnVtYmVyIC0gMV0uRnJhbWVDb250ZW50U2VxdWVuY2U7XG4gICAgICAgICAgZnJhbWVDb250ZW50U2VxdWVuY2UuRnJhbWVBY3F1aXNpdGlvbkRhdGVUaW1lID0gZnJhbWVUaW1lO1xuICAgICAgICAgIGZyYW1lQ29udGVudFNlcXVlbmNlLkZyYW1lUmVmZXJlbmNlRGF0ZVRpbWUgPSBmcmFtZVRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZU51bWJlcisrO1xuICAgICAgfSk7IC8vXG4gICAgICAvLyBUT0RPOiBjb252ZXJ0IHRoaXMgdG8gc2hhcmVkIGZ1bmN0aW9uYWwgZ3JvdXAgbm90IHRvcCBsZXZlbCBlbGVtZW50XG4gICAgICAvL1xuXG4gICAgICBpZiAoZHMuV2luZG93Q2VudGVyICYmIGRzLldpbmRvd1dpZHRoKSB7XG4gICAgICAgIC8vIGlmIHRoZXkgZXhpc3QgYXMgc2luZ2xlIHZhbHVlcywgbWFrZSB0aGVtIGxpc3RzIGZvciBjb25zaXN0ZW5jeVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZHMuV2luZG93Q2VudGVyKSkge1xuICAgICAgICAgIGRzLldpbmRvd0NlbnRlciA9IFtkcy5XaW5kb3dDZW50ZXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRzLldpbmRvd1dpZHRoKSkge1xuICAgICAgICAgIGRzLldpbmRvd1dpZHRoID0gW2RzLldpbmRvd1dpZHRoXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRzLldpbmRvd0NlbnRlciB8fCAhZHMuV2luZG93V2lkdGgpIHtcbiAgICAgICAgLy8gaWYgdGhleSBkb24ndCBleGlzdCwgbWFrZSB0aGVtIGVtcHR5IGxpc3RzIGFuZCB0cnkgdG8gaW5pdGlhbGl6ZSB0aGVtXG4gICAgICAgIGRzLldpbmRvd0NlbnRlciA9IFtdOyAvLyBib3RoIG11c3QgZXhpc3QgYW5kIGJlIHRoZSBzYW1lIGxlbmd0aFxuXG4gICAgICAgIGRzLldpbmRvd1dpZHRoID0gW107IC8vIHByb3ZpZGUgYSB2b2x1bWUtbGV2ZWwgd2luZG93L2xldmVsIGd1ZXNzIChtZWFuIG9mIHBlci1mcmFtZSlcblxuICAgICAgICBpZiAoZHMuUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UpIHtcbiAgICAgICAgICB2YXIgd2N3dyA9IHtcbiAgICAgICAgICAgIGNlbnRlcjogMCxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICB9O1xuICAgICAgICAgIGRzLlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLmZvckVhY2goZnVuY3Rpb24gKGZ1bmN0aW9uYWxHcm91cCkge1xuICAgICAgICAgICAgaWYgKGZ1bmN0aW9uYWxHcm91cC5GcmFtZVZPSUxVVCkge1xuICAgICAgICAgICAgICB2YXIgd2MgPSBmdW5jdGlvbmFsR3JvdXAuRnJhbWVWT0lMVVRTZXF1ZW5jZS5XaW5kb3dDZW50ZXI7XG4gICAgICAgICAgICAgIHZhciB3dyA9IGZ1bmN0aW9uYWxHcm91cC5GcmFtZVZPSUxVVFNlcXVlbmNlLldpbmRvd1dpZHRoO1xuXG4gICAgICAgICAgICAgIGlmIChmdW5jdGlvbmFsR3JvdXAuRnJhbWVWT0lMVVRTZXF1ZW5jZSAmJiB3YyAmJiB3dykge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHdjKSkge1xuICAgICAgICAgICAgICAgICAgd2MgPSB3Y1swXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh3dykpIHtcbiAgICAgICAgICAgICAgICAgIHd3ID0gd3dbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2N3dy5jZW50ZXIgKz0gTnVtYmVyKHdjKTtcbiAgICAgICAgICAgICAgICB3Y3d3LndpZHRoICs9IE51bWJlcih3dyk7XG4gICAgICAgICAgICAgICAgd2N3dy5jb3VudCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAod2N3dy5jb3VudCA+IDApIHtcbiAgICAgICAgICAgIGRzLldpbmRvd0NlbnRlci5wdXNoKFN0cmluZyh3Y3d3LmNlbnRlciAvIHdjd3cuY291bnQpKTtcbiAgICAgICAgICAgIGRzLldpbmRvd1dpZHRoLnB1c2goU3RyaW5nKHdjd3cud2lkdGggLyB3Y3d3LmNvdW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIGxhc3QgZ2FzcCwgcGljayBhbiBhcmJpdHJhcnkgZGVmYXVsdFxuXG5cbiAgICAgIGlmIChkcy5XaW5kb3dDZW50ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRzLldpbmRvd0NlbnRlciA9IFszMDBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHMuV2luZG93V2lkdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRzLldpbmRvd1dpZHRoID0gWzUwMF07XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwidmVjM0Nyb3NzUHJvZHVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZWMzQ3Jvc3NQcm9kdWN0KGEsIGIpIHtcbiAgICAgIHZhciBheCA9IGFbMF0sXG4gICAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgICBieCA9IGJbMF0sXG4gICAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICAgIGJ6ID0gYlsyXTtcbiAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICAgICAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gICAgICBvdXRbMl0gPSBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZlYzNTdWJ0cmFjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZWMzU3VidHJhY3QoYSwgYikge1xuICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gICAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmVjM0RvdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZWMzRG90KGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEltYWdlTm9ybWFsaXplcjtcbn0oTm9ybWFsaXplcik7XG5cbnZhciBNUkltYWdlTm9ybWFsaXplciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0ltYWdlTm9ybWFsaXplcikge1xuICBfaW5oZXJpdHMoTVJJbWFnZU5vcm1hbGl6ZXIsIF9JbWFnZU5vcm1hbGl6ZXIpO1xuXG4gIGZ1bmN0aW9uIE1SSW1hZ2VOb3JtYWxpemVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNUkltYWdlTm9ybWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1SSW1hZ2VOb3JtYWxpemVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNUkltYWdlTm9ybWFsaXplciwgW3tcbiAgICBrZXk6IFwibm9ybWFsaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1SSW1hZ2VOb3JtYWxpemVyLnByb3RvdHlwZSksIFwibm9ybWFsaXplXCIsIHRoaXMpLmNhbGwodGhpcyk7IC8vIFRPRE86IG1ha2Ugc3BlY2lhbGl6YXRpb24gZm9yIExlZ2FjeUNvbnZlcnRlZCB2cyBub3JtYWwgRW5oYW5jZU1SSW1hZ2VcbiAgICAgIC8vbGV0IHRvVUlEID0gRGljb21NZXRhRGljdGlvbmFyeS5zb3BDbGFzc1VJRHNCeU5hbWU7XG5cblxuICAgICAgdGhpcy5kYXRhc2V0LlNPUENsYXNzVUlEID0gXCJMZWdhY3lDb252ZXJ0ZWRFbmhhbmNlZE1SSW1hZ2VcIjsgLy90aGlzLmRhdGFzZXQuU09QQ2xhc3NVSUQgPSB0b1VJRC5FbmhhbmNlZE1SSW1hZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5vcm1hbGl6ZU11bHRpZnJhbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplTXVsdGlmcmFtZSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1SSW1hZ2VOb3JtYWxpemVyLnByb3RvdHlwZSksIFwibm9ybWFsaXplTXVsdGlmcmFtZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB2YXIgZHMgPSB0aGlzLmRhdGFzZXQ7XG5cbiAgICAgIGlmICghZHMuSW1hZ2VUeXBlIHx8ICFkcy5JbWFnZVR5cGUuY29uc3RydWN0b3IgfHwgZHMuSW1hZ2VUeXBlLmNvbnN0cnVjdG9yLm5hbWUgIT0gXCJBcnJheVwiIHx8IGRzLkltYWdlVHlwZS5sZW5ndGggIT0gNCkge1xuICAgICAgICBkcy5JbWFnZVR5cGUgPSBbXCJPUklHSU5BTFwiLCBcIlBSSU1BUllcIiwgXCJPVEhFUlwiLCBcIk5PTkVcIl07XG4gICAgICB9XG5cbiAgICAgIGRzLlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5NUkltYWdlRnJhbWVUeXBlID0ge1xuICAgICAgICBGcmFtZVR5cGU6IGRzLkltYWdlVHlwZSxcbiAgICAgICAgUGl4ZWxQcmVzZW50YXRpb246IFwiTU9OT0NIUk9NRVwiLFxuICAgICAgICBWb2x1bWV0cmljUHJvcGVydGllczogXCJWT0xVTUVcIixcbiAgICAgICAgVm9sdW1lQmFzZWRDYWxjdWxhdGlvblRlY2huaXF1ZTogXCJOT05FXCIsXG4gICAgICAgIENvbXBsZXhJbWFnZUNvbXBvbmVudDogXCJNQUdOSVRVREVcIixcbiAgICAgICAgQWNxdWlzaXRpb25Db250cmFzdDogXCJVTktOT1dOXCJcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1SSW1hZ2VOb3JtYWxpemVyO1xufShJbWFnZU5vcm1hbGl6ZXIpO1xuXG52YXIgRW5oYW5jZWRDVEltYWdlTm9ybWFsaXplciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0ltYWdlTm9ybWFsaXplcjIpIHtcbiAgX2luaGVyaXRzKEVuaGFuY2VkQ1RJbWFnZU5vcm1hbGl6ZXIsIF9JbWFnZU5vcm1hbGl6ZXIyKTtcblxuICBmdW5jdGlvbiBFbmhhbmNlZENUSW1hZ2VOb3JtYWxpemVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbmhhbmNlZENUSW1hZ2VOb3JtYWxpemVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRW5oYW5jZWRDVEltYWdlTm9ybWFsaXplcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRW5oYW5jZWRDVEltYWdlTm9ybWFsaXplciwgW3tcbiAgICBrZXk6IFwibm9ybWFsaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKEVuaGFuY2VkQ1RJbWFnZU5vcm1hbGl6ZXIucHJvdG90eXBlKSwgXCJub3JtYWxpemVcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW5oYW5jZWRDVEltYWdlTm9ybWFsaXplcjtcbn0oSW1hZ2VOb3JtYWxpemVyKTtcblxudmFyIEVuaGFuY2VkTVJJbWFnZU5vcm1hbGl6ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9JbWFnZU5vcm1hbGl6ZXIzKSB7XG4gIF9pbmhlcml0cyhFbmhhbmNlZE1SSW1hZ2VOb3JtYWxpemVyLCBfSW1hZ2VOb3JtYWxpemVyMyk7XG5cbiAgZnVuY3Rpb24gRW5oYW5jZWRNUkltYWdlTm9ybWFsaXplcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW5oYW5jZWRNUkltYWdlTm9ybWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEVuaGFuY2VkTVJJbWFnZU5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVuaGFuY2VkTVJJbWFnZU5vcm1hbGl6ZXIsIFt7XG4gICAga2V5OiBcIm5vcm1hbGl6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihFbmhhbmNlZE1SSW1hZ2VOb3JtYWxpemVyLnByb3RvdHlwZSksIFwibm9ybWFsaXplXCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVuaGFuY2VkTVJJbWFnZU5vcm1hbGl6ZXI7XG59KEltYWdlTm9ybWFsaXplcik7XG5cbnZhciBFbmhhbmNlZFVTVm9sdW1lTm9ybWFsaXplciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0ltYWdlTm9ybWFsaXplcjQpIHtcbiAgX2luaGVyaXRzKEVuaGFuY2VkVVNWb2x1bWVOb3JtYWxpemVyLCBfSW1hZ2VOb3JtYWxpemVyNCk7XG5cbiAgZnVuY3Rpb24gRW5oYW5jZWRVU1ZvbHVtZU5vcm1hbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVuaGFuY2VkVVNWb2x1bWVOb3JtYWxpemVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRW5oYW5jZWRVU1ZvbHVtZU5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVuaGFuY2VkVVNWb2x1bWVOb3JtYWxpemVyLCBbe1xuICAgIGtleTogXCJub3JtYWxpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoRW5oYW5jZWRVU1ZvbHVtZU5vcm1hbGl6ZXIucHJvdG90eXBlKSwgXCJub3JtYWxpemVcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW5oYW5jZWRVU1ZvbHVtZU5vcm1hbGl6ZXI7XG59KEltYWdlTm9ybWFsaXplcik7XG5cbnZhciBDVEltYWdlTm9ybWFsaXplciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0ltYWdlTm9ybWFsaXplcjUpIHtcbiAgX2luaGVyaXRzKENUSW1hZ2VOb3JtYWxpemVyLCBfSW1hZ2VOb3JtYWxpemVyNSk7XG5cbiAgZnVuY3Rpb24gQ1RJbWFnZU5vcm1hbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENUSW1hZ2VOb3JtYWxpemVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ1RJbWFnZU5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENUSW1hZ2VOb3JtYWxpemVyLCBbe1xuICAgIGtleTogXCJub3JtYWxpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoQ1RJbWFnZU5vcm1hbGl6ZXIucHJvdG90eXBlKSwgXCJub3JtYWxpemVcIiwgdGhpcykuY2FsbCh0aGlzKTsgLy8gVE9ETzogcHJvdmlkZSBvcHRpb24gYXQgZXhwb3J0IHRvIHN3YXAgaW4gTGVnYWN5Q29udmVydGVkIFVJRFxuXG5cbiAgICAgIHZhciB0b1VJRCA9IERpY29tTWV0YURpY3Rpb25hcnkuc29wQ2xhc3NVSURzQnlOYW1lOyAvL3RoaXMuZGF0YXNldC5TT1BDbGFzc1VJRCA9IFwiTGVnYWN5Q29udmVydGVkRW5oYW5jZWRDVEltYWdlXCI7XG5cbiAgICAgIHRoaXMuZGF0YXNldC5TT1BDbGFzc1VJRCA9IHRvVUlELkVuaGFuY2VkQ1RJbWFnZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ1RJbWFnZU5vcm1hbGl6ZXI7XG59KEltYWdlTm9ybWFsaXplcik7XG5cbnZhciBQRVRJbWFnZU5vcm1hbGl6ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9JbWFnZU5vcm1hbGl6ZXI2KSB7XG4gIF9pbmhlcml0cyhQRVRJbWFnZU5vcm1hbGl6ZXIsIF9JbWFnZU5vcm1hbGl6ZXI2KTtcblxuICBmdW5jdGlvbiBQRVRJbWFnZU5vcm1hbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBFVEltYWdlTm9ybWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFBFVEltYWdlTm9ybWFsaXplcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUEVUSW1hZ2VOb3JtYWxpemVyLCBbe1xuICAgIGtleTogXCJub3JtYWxpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoUEVUSW1hZ2VOb3JtYWxpemVyLnByb3RvdHlwZSksIFwibm9ybWFsaXplXCIsIHRoaXMpLmNhbGwodGhpcyk7IC8vIFRPRE86IHByb3ZpZGUgb3B0aW9uIGF0IGV4cG9ydCB0byBzd2FwIGluIExlZ2FjeUNvbnZlcnRlZCBVSURcblxuXG4gICAgICB2YXIgdG9VSUQgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzVUlEc0J5TmFtZTsgLy90aGlzLmRhdGFzZXQuU09QQ2xhc3NVSUQgPSBcIkxlZ2FjeUNvbnZlcnRlZEVuaGFuY2VkUEVUSW1hZ2VcIjtcblxuICAgICAgdGhpcy5kYXRhc2V0LlNPUENsYXNzVUlEID0gdG9VSUQuRW5oYW5jZWRQRVRJbWFnZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUEVUSW1hZ2VOb3JtYWxpemVyO1xufShJbWFnZU5vcm1hbGl6ZXIpO1xuXG52YXIgU0VHSW1hZ2VOb3JtYWxpemVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfSW1hZ2VOb3JtYWxpemVyNykge1xuICBfaW5oZXJpdHMoU0VHSW1hZ2VOb3JtYWxpemVyLCBfSW1hZ2VOb3JtYWxpemVyNyk7XG5cbiAgZnVuY3Rpb24gU0VHSW1hZ2VOb3JtYWxpemVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTRUdJbWFnZU5vcm1hbGl6ZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTRUdJbWFnZU5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNFR0ltYWdlTm9ybWFsaXplciwgW3tcbiAgICBrZXk6IFwibm9ybWFsaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFNFR0ltYWdlTm9ybWFsaXplci5wcm90b3R5cGUpLCBcIm5vcm1hbGl6ZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTRUdJbWFnZU5vcm1hbGl6ZXI7XG59KEltYWdlTm9ybWFsaXplcik7XG5cbnZhciBQTUltYWdlTm9ybWFsaXplciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0ltYWdlTm9ybWFsaXplcjgpIHtcbiAgX2luaGVyaXRzKFBNSW1hZ2VOb3JtYWxpemVyLCBfSW1hZ2VOb3JtYWxpemVyOCk7XG5cbiAgZnVuY3Rpb24gUE1JbWFnZU5vcm1hbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBNSW1hZ2VOb3JtYWxpemVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUE1JbWFnZU5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBNSW1hZ2VOb3JtYWxpemVyLCBbe1xuICAgIGtleTogXCJub3JtYWxpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoUE1JbWFnZU5vcm1hbGl6ZXIucHJvdG90eXBlKSwgXCJub3JtYWxpemVcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgdmFyIGRzID0gdGhpcy5kYXRhc2V0c1swXTtcblxuICAgICAgaWYgKGRzLkJpdHNBbGxvY2F0ZWQgIT09IDMyKSB7XG4gICAgICAgIGxpYi5lcnJvcihcIk9ubHkgd29ya3Mgd2l0aCAzMiBiaXQgZGF0YSwgbm90IFwiICsgU3RyaW5nKGRzLkJpdHNBbGxvY2F0ZWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUE1JbWFnZU5vcm1hbGl6ZXI7XG59KEltYWdlTm9ybWFsaXplcik7XG5cbnZhciBEU1JOb3JtYWxpemVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTm9ybWFsaXplcjIpIHtcbiAgX2luaGVyaXRzKERTUk5vcm1hbGl6ZXIsIF9Ob3JtYWxpemVyMik7XG5cbiAgZnVuY3Rpb24gRFNSTm9ybWFsaXplcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRFNSTm9ybWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKERTUk5vcm1hbGl6ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERTUk5vcm1hbGl6ZXIsIFt7XG4gICAga2V5OiBcIm5vcm1hbGl6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gICAgICB0aGlzLmRhdGFzZXQgPSB0aGlzLmRhdGFzZXRzWzBdOyAvLyBvbmx5IG9uZSBkYXRhc2V0IHBlciBzZXJpZXMgYW5kIGZvciBub3cgd2UgYXNzdW1lIGl0IGlzIG5vcm1hbGl6ZWRcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRFNSTm9ybWFsaXplcjtcbn0oTm9ybWFsaXplcik7XG5cbnZhciBTZWdtZW50YXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9EZXJpdmVkUGl4ZWxzKSB7XG4gIF9pbmhlcml0cyhTZWdtZW50YXRpb24sIF9EZXJpdmVkUGl4ZWxzKTtcblxuICBmdW5jdGlvbiBTZWdtZW50YXRpb24oZGF0YXNldHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW5jbHVkZVNsaWNlU3BhY2luZzogdHJ1ZVxuICAgIH07XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VnbWVudGF0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2VnbWVudGF0aW9uKS5jYWxsKHRoaXMsIGRhdGFzZXRzLCBvcHRpb25zKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VnbWVudGF0aW9uLCBbe1xuICAgIGtleTogXCJkZXJpdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVyaXZlKCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoU2VnbWVudGF0aW9uLnByb3RvdHlwZSksIFwiZGVyaXZlXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuYXNzaWduVG9EYXRhc2V0KHtcbiAgICAgICAgU09QQ2xhc3NVSUQ6IERpY29tTWV0YURpY3Rpb25hcnkuc29wQ2xhc3NVSURzQnlOYW1lLlNlZ21lbnRhdGlvbixcbiAgICAgICAgTW9kYWxpdHk6IFwiU0VHXCIsXG4gICAgICAgIFNhbXBsZXNQZXJQaXhlbDogXCIxXCIsXG4gICAgICAgIFBob3RvbWV0cmljSW50ZXJwcmV0YXRpb246IFwiTU9OT0NIUk9NRTJcIixcbiAgICAgICAgQml0c0FsbG9jYXRlZDogXCIxXCIsXG4gICAgICAgIEJpdHNTdG9yZWQ6IFwiMVwiLFxuICAgICAgICBIaWdoQml0OiBcIjBcIixcbiAgICAgICAgUGl4ZWxSZXByZXNlbnRhdGlvbjogXCIwXCIsXG4gICAgICAgIExvc3N5SW1hZ2VDb21wcmVzc2lvbjogXCIwMFwiLFxuICAgICAgICBTZWdtZW50YXRpb25UeXBlOiBcIkJJTkFSWVwiLFxuICAgICAgICBDb250ZW50TGFiZWw6IFwiU0VHTUVOVEFUSU9OXCJcbiAgICAgIH0pO1xuICAgICAgdmFyIGRpbWVuc2lvblVJRCA9IERpY29tTWV0YURpY3Rpb25hcnkudWlkKCk7XG4gICAgICB0aGlzLmRhdGFzZXQuRGltZW5zaW9uT3JnYW5pemF0aW9uU2VxdWVuY2UgPSB7XG4gICAgICAgIERpbWVuc2lvbk9yZ2FuaXphdGlvblVJRDogZGltZW5zaW9uVUlEXG4gICAgICB9O1xuICAgICAgdGhpcy5kYXRhc2V0LkRpbWVuc2lvbkluZGV4U2VxdWVuY2UgPSBbe1xuICAgICAgICBEaW1lbnNpb25Pcmdhbml6YXRpb25VSUQ6IGRpbWVuc2lvblVJRCxcbiAgICAgICAgRGltZW5zaW9uSW5kZXhQb2ludGVyOiA2NDIyNTM5LFxuICAgICAgICBGdW5jdGlvbmFsR3JvdXBQb2ludGVyOiA2NDIyNTM4LFxuICAgICAgICAvLyBTZWdtZW50SWRlbnRpZmljYXRpb25TZXF1ZW5jZVxuICAgICAgICBEaW1lbnNpb25EZXNjcmlwdGlvbkxhYmVsOiBcIlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyXCJcbiAgICAgIH0sIHtcbiAgICAgICAgRGltZW5zaW9uT3JnYW5pemF0aW9uVUlEOiBkaW1lbnNpb25VSUQsXG4gICAgICAgIERpbWVuc2lvbkluZGV4UG9pbnRlcjogMjA5NzIwMixcbiAgICAgICAgRnVuY3Rpb25hbEdyb3VwUG9pbnRlcjogMjEzNDI5MSxcbiAgICAgICAgLy8gUGxhbmVQb3NpdGlvblNlcXVlbmNlXG4gICAgICAgIERpbWVuc2lvbkRlc2NyaXB0aW9uTGFiZWw6IFwiSW1hZ2VQb3NpdGlvblBhdGllbnRcIlxuICAgICAgfV07XG4gICAgICB0aGlzLmRhdGFzZXQuU2VnbWVudFNlcXVlbmNlID0gW107IC8vIFRPRE86IGNoZWNrIGxvZ2ljIGhlcmUuXG4gICAgICAvLyBJZiB0aGUgcmVmZXJlbmNlZCBkYXRhc2V0IGl0c2VsZiByZWZlcmVuY2VzIGEgc2VyaWVzLCB0aGVuIGNvcHkuXG4gICAgICAvLyBPdGhlcndpc2UsIHJlZmVyZW5jZSB0aGUgZGF0YXNldCBpdHNlbGYuXG4gICAgICAvLyBUaGlzIHNob3VsZCBhbGxvdyBTbGljZXIgYW5kIG90aGVycyB0byBnZXQgdGhlIGNvcnJlY3Qgb3JpZ2luYWxcbiAgICAgIC8vIGltYWdlcyB3aGVuIGxvYWRpbmcgTGVnYWN5IENvbnZlcnRlZCBJbWFnZXMsIGJ1dCBpdCdzIGEgd29ya2Fyb3VuZFxuICAgICAgLy8gdGhhdCByZWFsbHkgZG9lc24ndCBiZWxvbmcgaGVyZS5cblxuICAgICAgaWYgKHRoaXMucmVmZXJlbmNlZERhdGFzZXQuUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZGF0YXNldC5SZWZlcmVuY2VkU2VyaWVzU2VxdWVuY2UgPSBEZXJpdmVkRGF0YXNldC5jb3B5RGF0YXNldCh0aGlzLnJlZmVyZW5jZWREYXRhc2V0LlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgUmVmZXJlbmNlZEluc3RhbmNlU2VxdWVuY2UgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVmZXJlbmNlZERhdGFzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgUmVmZXJlbmNlZEluc3RhbmNlU2VxdWVuY2UucHVzaCh7XG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QQ2xhc3NVSUQ6IHRoaXMucmVmZXJlbmNlZERhdGFzZXRzW2ldLlNPUENsYXNzVUlELFxuICAgICAgICAgICAgUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEOiB0aGlzLnJlZmVyZW5jZWREYXRhc2V0c1tpXS5TT1BJbnN0YW5jZVVJRFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhc2V0LlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZSA9IHtcbiAgICAgICAgICBTZXJpZXNJbnN0YW5jZVVJRDogdGhpcy5yZWZlcmVuY2VkRGF0YXNldC5TZXJpZXNJbnN0YW5jZVVJRCxcbiAgICAgICAgICBTdHVkeUluc3RhbmNlVUlEOiB0aGlzLnJlZmVyZW5jZWREYXRhc2V0LlN0dWR5SW5zdGFuY2VVSUQsXG4gICAgICAgICAgUmVmZXJlbmNlZEluc3RhbmNlU2VxdWVuY2U6IFJlZmVyZW5jZWRJbnN0YW5jZVNlcXVlbmNlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmluY2x1ZGVTbGljZVNwYWNpbmcpIHtcbiAgICAgICAgLy8gcGVyIGRjaW9kdmZ5IHRoaXMgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCwgYnV0IGRjbXFpL1NsaWNlciByZXF1aXJlcyBpdFxuICAgICAgICBkZWxldGUgdGhpcy5kYXRhc2V0LlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5QaXhlbE1lYXN1cmVzU2VxdWVuY2UuU3BhY2luZ0JldHdlZW5TbGljZXM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBpeGVsVmFsdWVUcmFuc2Zvcm1hdGlvblNlcXVlbmNlKSB7XG4gICAgICAgIC8vIElmIGRlcml2ZWQgZnJvbSBhIENULCB0aGlzIHNob3VsZG4ndCBiZSBsZWZ0IGluIHRoZSBTRUcuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBpeGVsVmFsdWVUcmFuc2Zvcm1hdGlvblNlcXVlbmNlO1xuICAgICAgfSAvLyBUaGUgcGl4ZWxEYXRhIGFycmF5IG5lZWRzIHRvIGJlIGRlZmluZWQgb25jZSB5b3Uga25vdyBob3cgbWFueSBmcmFtZXMgeW91J2xsIGhhdmUuXG5cblxuICAgICAgdGhpcy5kYXRhc2V0LlBpeGVsRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZGF0YXNldC5OdW1iZXJPZkZyYW1lcyA9IDA7XG4gICAgICB0aGlzLmRhdGFzZXQuUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogc2V0TnVtYmVyT2ZGcmFtZXMgLSBTZXRzIHRoZSBudW1iZXIgb2YgZnJhbWVzIG9mIHRoZSBzZWdtZW50YXRpb24gb2JqZWN0XG4gICAgICogYW5kIGFsbG9jYXRlcyAobm9uLWJpdHBhY2tlZCkgbWVtb3J5IGZvciB0aGUgUGl4ZWxEYXRhIGZvciBjb25zdHVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3R5cGV9IE51bWJlck9mRnJhbWVzIFRoZSBudW1iZXIgb2Ygc2VnbWVudGF0aW9uIGZyYW1lcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldE51bWJlck9mRnJhbWVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE51bWJlck9mRnJhbWVzKE51bWJlck9mRnJhbWVzKSB7XG4gICAgICB2YXIgZGF0YXNldCA9IHRoaXMuZGF0YXNldDtcbiAgICAgIGRhdGFzZXQuTnVtYmVyT2ZGcmFtZXMgPSBOdW1iZXJPZkZyYW1lcztcbiAgICAgIGRhdGFzZXQuUGl4ZWxEYXRhID0gbmV3IEFycmF5QnVmZmVyKGRhdGFzZXQuUm93cyAqIGRhdGFzZXQuQ29sdW1ucyAqIE51bWJlck9mRnJhbWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYml0UGFja1BpeGVsRGF0YSAtIEJpdHBhY2tzIHRoZSBwaXhlbGRhdGEsIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgYWxsXG4gICAgICogc2VnbWVudHMgYXJlIGFkZGRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt0eXBlfSAgZGVzY3JpcHRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImJpdFBhY2tQaXhlbERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYml0UGFja1BpeGVsRGF0YSgpIHtcbiAgICAgIGlmICh0aGlzLmlzQml0cGFja2VkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoaXMuYml0UGFja1BpeGVsRGF0YSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCwgaXQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uY2UsIHdoZW4gYWxsIGZyYW1lcyBoYXZlIGJlZW4gYWRkZWQuIEV4aXRpbmcuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YXNldCA9IHRoaXMuZGF0YXNldDtcbiAgICAgIHZhciB1bnBhY2tlZFBpeGVsRGF0YSA9IGRhdGFzZXQuUGl4ZWxEYXRhO1xuICAgICAgdmFyIHVJbnQ4Vmlld1VucGFja2VkUGl4ZWxEYXRhID0gbmV3IFVpbnQ4QXJyYXkodW5wYWNrZWRQaXhlbERhdGEpO1xuICAgICAgdmFyIGJpdFBhY2tlZFBpeGVsRGF0YSA9IEJpdEFycmF5LnBhY2sodUludDhWaWV3VW5wYWNrZWRQaXhlbERhdGEpO1xuICAgICAgZGF0YXNldC5QaXhlbERhdGEgPSBiaXRQYWNrZWRQaXhlbERhdGEuYnVmZmVyO1xuICAgICAgdGhpcy5pc0JpdHBhY2tlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGFkZFNlZ21lbnRGcm9tTGFiZWxtYXAgLSBBZGRzIGEgc2VnbWVudCB0byB0aGUgZGF0YXNldCxcbiAgICAgKiB3aGVyZSB0aGUgbGFiZWxtYXBzIGFyZSBhIHNldCBvZiAyRCBsYWJlbG1hcHMsIGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgYmluYXJ5IG1hcHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHt0eXBlfSBTZWdtZW50ICAgVGhlIHNlZ21lbnQgbWV0YWRhdGEuXG4gICAgICogQHBhcmFtICB7VWludDhBcnJheVtdfSBsYWJlbG1hcHMgbGFiZWxtYXAgYXJyYXlzIGZvciBlYWNoIGluZGV4IG9mIHJlZmVyZW5jZWRGcmFtZU51bWJlcnMuXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSAgc2VnbWVudEluZGV4SW5MYWJlbG1hcCBUaGUgc2VnbWVudCBpbmRleCB0byBleHRyYWN0IGZyb20gdGhlIGxhYmVsbWFwXG4gICAgICogICAgKG1pZ2h0IGJlIGRpZmZlcmVudCB0byB0aGUgc2VnbWVudCBtZXRhZGF0YSBkZXBlbmRpbmcgb24gaW1wbGVtZW50YXRpb24pLlxuICAgICAqIEBwYXJhbSAge251bWJlcltdfSByZWZlcmVuY2VkRnJhbWVOdW1iZXJzICBUaGUgZnJhbWVzIHRoYXQgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRhdGlvbiByZWZlcmVuY2VzLlxuICAgICAqXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRTZWdtZW50RnJvbUxhYmVsbWFwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNlZ21lbnRGcm9tTGFiZWxtYXAoU2VnbWVudCwgbGFiZWxtYXBzLCBzZWdtZW50SW5kZXhJbkxhYmVsbWFwLCByZWZlcmVuY2VkRnJhbWVOdW1iZXJzKSB7XG4gICAgICBpZiAodGhpcy5kYXRhc2V0Lk51bWJlck9mRnJhbWVzID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3Qgc2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgZnJhbWVzIHZpYSBzZXROdW1iZXJPZkZyYW1lcygpIGJlZm9yZSBhZGRpbmcgc2VnbWVudHMgdG8gdGhlIHNlZ21lbnRhdGlvbi5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZFNlZ21lbnRQaXhlbERhdGFGcm9tTGFiZWxtYXBzKGxhYmVsbWFwcywgc2VnbWVudEluZGV4SW5MYWJlbG1hcCk7XG5cbiAgICAgIHZhciBSZWZlcmVuY2VkU2VnbWVudE51bWJlciA9IHRoaXMuX2FkZFNlZ21lbnRNZXRhZGF0YShTZWdtZW50KTtcblxuICAgICAgdGhpcy5fYWRkUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzKFJlZmVyZW5jZWRTZWdtZW50TnVtYmVyLCByZWZlcmVuY2VkRnJhbWVOdW1iZXJzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2FkZFNlZ21lbnRQaXhlbERhdGFGcm9tTGFiZWxtYXBzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRTZWdtZW50UGl4ZWxEYXRhRnJvbUxhYmVsbWFwcyhsYWJlbG1hcHMsIHNlZ21lbnRJbmRleCkge1xuICAgICAgdmFyIGRhdGFzZXQgPSB0aGlzLmRhdGFzZXQ7XG4gICAgICB2YXIgZXhpc3RpbmdGcmFtZXMgPSBkYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLmxlbmd0aDtcbiAgICAgIHZhciBzbGljZUxlbmd0aCA9IGRhdGFzZXQuUm93cyAqIGRhdGFzZXQuQ29sdW1ucztcbiAgICAgIHZhciBieXRlT2Zmc2V0ID0gZXhpc3RpbmdGcmFtZXMgKiBzbGljZUxlbmd0aDtcbiAgICAgIHZhciBwaXhlbERhdGFVSW50OFZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhc2V0LlBpeGVsRGF0YSwgYnl0ZU9mZnNldCwgbGFiZWxtYXBzLmxlbmd0aCAqIHNsaWNlTGVuZ3RoKTtcblxuICAgICAgdmFyIG9jY3VwaWVkVmFsdWUgPSB0aGlzLl9nZXRPY2N1cGllZFZhbHVlKCk7XG5cbiAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbGFiZWxtYXBzLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgIHZhciBsYWJlbG1hcCA9IGxhYmVsbWFwc1tsXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhYmVsbWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGxhYmVsbWFwW2ldID09PSBzZWdtZW50SW5kZXgpIHtcbiAgICAgICAgICAgIHBpeGVsRGF0YVVJbnQ4Vmlld1tsICogc2xpY2VMZW5ndGggKyBpXSA9IG9jY3VwaWVkVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRPY2N1cGllZFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRPY2N1cGllZFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YXNldC5TZWdtZW50YXRpb25UeXBlID09PSBcIkZSQUNUSU9OQUxcIikge1xuICAgICAgICByZXR1cm4gMjU1O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYWRkU2VnbWVudCAtIEFkZHMgYSBzZWdtZW50IHRvIHRoZSBkYXRhc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7dHlwZX0gU2VnbWVudCAgIFRoZSBzZWdtZW50IG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IHBpeGVsRGF0YSBUaGUgcGl4ZWxEYXRhIGFycmF5IGNvbnRhaW5pbmcgYWxsIGZyYW1lc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2VnbWVudGF0aW9uLlxuICAgICAqIEBwYXJhbSAge051bWJlcltdfSByZWZlcmVuY2VkRnJhbWVOdW1iZXJzICBUaGUgZnJhbWVzIHRoYXQgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRhdGlvbiByZWZlcmVuY2VzLlxuICAgICAqXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRTZWdtZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNlZ21lbnQoU2VnbWVudCwgcGl4ZWxEYXRhLCByZWZlcmVuY2VkRnJhbWVOdW1iZXJzKSB7XG4gICAgICBpZiAodGhpcy5kYXRhc2V0Lk51bWJlck9mRnJhbWVzID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3Qgc2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgZnJhbWVzIHZpYSBzZXROdW1iZXJPZkZyYW1lcygpIGJlZm9yZSBhZGRpbmcgc2VnbWVudHMgdG8gdGhlIHNlZ21lbnRhdGlvbi5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZFNlZ21lbnRQaXhlbERhdGEocGl4ZWxEYXRhKTtcblxuICAgICAgdmFyIFJlZmVyZW5jZWRTZWdtZW50TnVtYmVyID0gdGhpcy5fYWRkU2VnbWVudE1ldGFkYXRhKFNlZ21lbnQpO1xuXG4gICAgICB0aGlzLl9hZGRQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMoUmVmZXJlbmNlZFNlZ21lbnROdW1iZXIsIHJlZmVyZW5jZWRGcmFtZU51bWJlcnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYWRkU2VnbWVudFBpeGVsRGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkU2VnbWVudFBpeGVsRGF0YShwaXhlbERhdGEpIHtcbiAgICAgIHZhciBkYXRhc2V0ID0gdGhpcy5kYXRhc2V0O1xuICAgICAgdmFyIGV4aXN0aW5nRnJhbWVzID0gZGF0YXNldC5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5sZW5ndGg7XG4gICAgICB2YXIgc2xpY2VMZW5ndGggPSBkYXRhc2V0LlJvd3MgKiBkYXRhc2V0LkNvbHVtbnM7XG4gICAgICB2YXIgYnl0ZU9mZnNldCA9IGV4aXN0aW5nRnJhbWVzICogc2xpY2VMZW5ndGg7XG4gICAgICB2YXIgcGl4ZWxEYXRhVUludDhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YXNldC5QaXhlbERhdGEsIGJ5dGVPZmZzZXQsIHBpeGVsRGF0YS5sZW5ndGgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBpeGVsRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBwaXhlbERhdGFVSW50OFZpZXdbaV0gPSBwaXhlbERhdGFbaV07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hZGRQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZFBlckZyYW1lRnVuY3Rpb25hbEdyb3VwcyhSZWZlcmVuY2VkU2VnbWVudE51bWJlciwgcmVmZXJlbmNlZEZyYW1lTnVtYmVycykge1xuICAgICAgdmFyIFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlID0gdGhpcy5kYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlO1xuICAgICAgdmFyIFJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZSA9IHRoaXMucmVmZXJlbmNlZERhdGFzZXQuUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZmVyZW5jZWRGcmFtZU51bWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZyYW1lTnVtYmVyID0gcmVmZXJlbmNlZEZyYW1lTnVtYmVyc1tpXTtcbiAgICAgICAgdmFyIHBlckZyYW1lRnVuY3Rpb25hbEdyb3VwcyA9IHt9O1xuICAgICAgICBwZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuUGxhbmVQb3NpdGlvblNlcXVlbmNlID0gRGVyaXZlZERhdGFzZXQuY29weURhdGFzZXQodGhpcy5yZWZlcmVuY2VkRGF0YXNldC5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZVtmcmFtZU51bWJlciAtIDFdLlBsYW5lUG9zaXRpb25TZXF1ZW5jZSk7IC8vIElmIHRoZSBQbGFuZU9yaWVudGF0aW9uU2VxdWVuY2UgaXMgbm90IGluIHRoZSBTaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UsXG4gICAgICAgIC8vIGV4dHJhY3QgaXQgZnJvbSB0aGUgUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UuXG5cbiAgICAgICAgaWYgKCF0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBsYW5lT3JpZW50YXRpb25TZXF1ZW5jZSkge1xuICAgICAgICAgIHBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwcy5QbGFuZU9yaWVudGF0aW9uU2VxdWVuY2UgPSBEZXJpdmVkRGF0YXNldC5jb3B5RGF0YXNldCh0aGlzLnJlZmVyZW5jZWREYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlW2ZyYW1lTnVtYmVyIC0gMV0uUGxhbmVPcmllbnRhdGlvblNlcXVlbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwcy5GcmFtZUNvbnRlbnRTZXF1ZW5jZSA9IHtcbiAgICAgICAgICBEaW1lbnNpb25JbmRleFZhbHVlczogW1JlZmVyZW5jZWRTZWdtZW50TnVtYmVyLCBmcmFtZU51bWJlcl1cbiAgICAgICAgfTtcbiAgICAgICAgcGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzLlNlZ21lbnRJZGVudGlmaWNhdGlvblNlcXVlbmNlID0ge1xuICAgICAgICAgIFJlZmVyZW5jZWRTZWdtZW50TnVtYmVyOiBSZWZlcmVuY2VkU2VnbWVudE51bWJlclxuICAgICAgICB9O1xuICAgICAgICB2YXIgUmVmZXJlbmNlZFNPUENsYXNzVUlEID0gdm9pZCAwO1xuICAgICAgICB2YXIgUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID0gdm9pZCAwO1xuICAgICAgICB2YXIgUmVmZXJlbmNlZEZyYW1lTnVtYmVyID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChSZWZlcmVuY2VkU2VyaWVzU2VxdWVuY2UpIHtcbiAgICAgICAgICB2YXIgcmVmZXJlbmNlZEluc3RhbmNlU2VxdWVuY2VJID0gUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlLlJlZmVyZW5jZWRJbnN0YW5jZVNlcXVlbmNlW2ZyYW1lTnVtYmVyIC0gMV07XG4gICAgICAgICAgUmVmZXJlbmNlZFNPUENsYXNzVUlEID0gcmVmZXJlbmNlZEluc3RhbmNlU2VxdWVuY2VJLlJlZmVyZW5jZWRTT1BDbGFzc1VJRDtcbiAgICAgICAgICBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQgPSByZWZlcmVuY2VkSW5zdGFuY2VTZXF1ZW5jZUkuUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEO1xuXG4gICAgICAgICAgaWYgKE5vcm1hbGl6ZXIuaXNNdWx0aWZyYW1lU09QQ2xhc3NVSUQoUmVmZXJlbmNlZFNPUENsYXNzVUlEKSkge1xuICAgICAgICAgICAgUmVmZXJlbmNlZEZyYW1lTnVtYmVyID0gZnJhbWVOdW1iZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlZmVyZW5jZWRTT1BDbGFzc1VJRCA9IHRoaXMucmVmZXJlbmNlZERhdGFzZXQuU09QQ2xhc3NVSUQ7XG4gICAgICAgICAgUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID0gdGhpcy5yZWZlcmVuY2VkRGF0YXNldC5TT1BJbnN0YW5jZVVJRDtcbiAgICAgICAgICBSZWZlcmVuY2VkRnJhbWVOdW1iZXIgPSBmcmFtZU51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChSZWZlcmVuY2VkRnJhbWVOdW1iZXIpIHtcbiAgICAgICAgICBwZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuRGVyaXZhdGlvbkltYWdlU2VxdWVuY2UgPSB7XG4gICAgICAgICAgICBTb3VyY2VJbWFnZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BDbGFzc1VJRDogUmVmZXJlbmNlZFNPUENsYXNzVUlELFxuICAgICAgICAgICAgICBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQ6IFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgICAgICAgICAgUmVmZXJlbmNlZEZyYW1lTnVtYmVyOiBSZWZlcmVuY2VkRnJhbWVOdW1iZXIsXG4gICAgICAgICAgICAgIFB1cnBvc2VPZlJlZmVyZW5jZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjEzMjJcIixcbiAgICAgICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlNvdXJjZSBpbWFnZSBmb3IgaW1hZ2UgcHJvY2Vzc2luZyBvcGVyYXRpb25cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRGVyaXZhdGlvbkNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgICBDb2RlVmFsdWU6IFwiMTEzMDc2XCIsXG4gICAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlNlZ21lbnRhdGlvblwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuRGVyaXZhdGlvbkltYWdlU2VxdWVuY2UgPSB7XG4gICAgICAgICAgICBTb3VyY2VJbWFnZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BDbGFzc1VJRDogUmVmZXJlbmNlZFNPUENsYXNzVUlELFxuICAgICAgICAgICAgICBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQ6IFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgICAgICAgICAgUHVycG9zZU9mUmVmZXJlbmNlQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgICAgQ29kZVZhbHVlOiBcIjEyMTMyMlwiLFxuICAgICAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU291cmNlIGltYWdlIGZvciBpbWFnZSBwcm9jZXNzaW5nIG9wZXJhdGlvblwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBEZXJpdmF0aW9uQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTMwNzZcIixcbiAgICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU2VnbWVudGF0aW9uXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UucHVzaChwZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYWRkU2VnbWVudE1ldGFkYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRTZWdtZW50TWV0YWRhdGEoU2VnbWVudCkge1xuICAgICAgaWYgKCFTZWdtZW50LlNlZ21lbnRMYWJlbCB8fCAhU2VnbWVudC5TZWdtZW50ZWRQcm9wZXJ0eUNhdGVnb3J5Q29kZVNlcXVlbmNlIHx8ICFTZWdtZW50LlNlZ21lbnRlZFByb3BlcnR5VHlwZUNvZGVTZXF1ZW5jZSB8fCAhU2VnbWVudC5TZWdtZW50QWxnb3JpdGhtVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWdtZW50IGRvZXMgbm90IGNvbnRhaW4gYWxsIHRoZSByZXF1aXJlZCBmaWVsZHMuXCIpO1xuICAgICAgfSAvLyBDYXBpdGFsaXNlIHRoZSBTZWdtZW50QWxnb3JpdGhtVHlwZSBpZiBpdCBoYXBwZW5zIHRvIGJlIGdpdmVuIGluXG4gICAgICAvLyBMb3dlci9taXhlZCBjYXNlLlxuXG5cbiAgICAgIFNlZ21lbnQuU2VnbWVudEFsZ29yaXRobVR5cGUgPSBTZWdtZW50LlNlZ21lbnRBbGdvcml0aG1UeXBlLnRvVXBwZXJDYXNlKCk7IC8vIENoZWNrIFNlZ21lbnRBbGdvcml0aG1UeXBlIGFuZCBTZWdtZW50QWxnb3JpdGhtTmFtZSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgIHN3aXRjaCAoU2VnbWVudC5TZWdtZW50QWxnb3JpdGhtVHlwZSkge1xuICAgICAgICBjYXNlIFwiQVVUT01BVElDXCI6XG4gICAgICAgIGNhc2UgXCJTRU1JQVVUT01BVElDXCI6XG4gICAgICAgICAgaWYgKCFTZWdtZW50LlNlZ21lbnRBbGdvcml0aG1OYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJZiB0aGUgU2VnbWVudEFsZ29yaXRobVR5cGUgaXMgU0VNSUFVVE9NQVRJQyBvciBBVVRPTUFUSUMsXFxuICAgICAgICAgIFNlZ21lbnRBbGdvcml0aG1OYW1lIG11c3QgYmUgcHJvdmlkZWRcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1BTlVBTFwiOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VnbWVudEFsZ29yaXRobVR5cGUgXCIuY29uY2F0KFNlZ21lbnQuU2VnbWVudEFsZ29yaXRobVR5cGUsIFwiIGludmFsaWQuXCIpKTtcbiAgICAgIH0gLy8gRGVlcCBjb3B5LCBzbyB3ZSBkb24ndCBjaGFuZ2UgdGhlIHNlZ21lbnQgaW5kZXggc3RvcmVkIGluIGNvcm5lcnN0b25lVG9vbHMuXG5cblxuICAgICAgdmFyIFNlZ21lbnRTZXF1ZW5jZSA9IHRoaXMuZGF0YXNldC5TZWdtZW50U2VxdWVuY2U7XG4gICAgICB2YXIgU2VnbWVudEFsZ29yaXRobVR5cGUgPSBTZWdtZW50LlNlZ21lbnRBbGdvcml0aG1UeXBlO1xuICAgICAgdmFyIHJlTnVtYmVyZWRTZWdtZW50Q29weSA9IHtcbiAgICAgICAgU2VnbWVudGVkUHJvcGVydHlDYXRlZ29yeUNvZGVTZXF1ZW5jZTogU2VnbWVudC5TZWdtZW50ZWRQcm9wZXJ0eUNhdGVnb3J5Q29kZVNlcXVlbmNlLFxuICAgICAgICBTZWdtZW50TnVtYmVyOiAoU2VnbWVudFNlcXVlbmNlLmxlbmd0aCArIDEpLnRvU3RyaW5nKCksXG4gICAgICAgIFNlZ21lbnRMYWJlbDogU2VnbWVudC5TZWdtZW50TGFiZWwsXG4gICAgICAgIFNlZ21lbnRBbGdvcml0aG1UeXBlOiBTZWdtZW50QWxnb3JpdGhtVHlwZSxcbiAgICAgICAgUmVjb21tZW5kZWREaXNwbGF5Q0lFTGFiVmFsdWU6IFNlZ21lbnQuUmVjb21tZW5kZWREaXNwbGF5Q0lFTGFiVmFsdWUsXG4gICAgICAgIFNlZ21lbnRlZFByb3BlcnR5VHlwZUNvZGVTZXF1ZW5jZTogU2VnbWVudC5TZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2VcbiAgICAgIH07XG5cbiAgICAgIGlmIChTZWdtZW50QWxnb3JpdGhtVHlwZSA9PT0gXCJBVVRPTUFUSUNcIiB8fCBTZWdtZW50QWxnb3JpdGhtVHlwZSA9PT0gXCJTRU1JQVVUT01BVElDXCIpIHtcbiAgICAgICAgcmVOdW1iZXJlZFNlZ21lbnRDb3B5LlNlZ21lbnRBbGdvcml0aG1OYW1lID0gU2VnbWVudC5TZWdtZW50QWxnb3JpdGhtTmFtZTtcbiAgICAgIH1cblxuICAgICAgU2VnbWVudFNlcXVlbmNlLnB1c2gocmVOdW1iZXJlZFNlZ21lbnRDb3B5KTtcbiAgICAgIHJldHVybiByZU51bWJlcmVkU2VnbWVudENvcHkuU2VnbWVudE51bWJlcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VnbWVudGF0aW9uO1xufShEZXJpdmVkUGl4ZWxzKTtcblxudmFyIFBhcmFtZXRyaWNNYXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9EZXJpdmVkRGF0YXNldCkge1xuICBfaW5oZXJpdHMoUGFyYW1ldHJpY01hcCwgX0Rlcml2ZWREYXRhc2V0KTtcblxuICBmdW5jdGlvbiBQYXJhbWV0cmljTWFwKGRhdGFzZXRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhcmFtZXRyaWNNYXApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQYXJhbWV0cmljTWFwKS5jYWxsKHRoaXMsIGRhdGFzZXRzLCBvcHRpb25zKSk7XG4gIH0gLy8gdGhpcyBhc3N1bWVzIGEgbm9ybWFsaXplZCBtdWx0aWZyYW1lIGlucHV0IGFuZCB3aWxsIGNyZWF0ZVxuICAvLyBhIG11bHRpZnJhbWUgZGVyaXZlZCBpbWFnZVxuXG5cbiAgX2NyZWF0ZUNsYXNzKFBhcmFtZXRyaWNNYXAsIFt7XG4gICAga2V5OiBcImRlcml2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJpdmUoKSB7XG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihQYXJhbWV0cmljTWFwLnByb3RvdHlwZSksIFwiZGVyaXZlXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuYXNzaWduVG9EYXRhc2V0KHsvLyBUT0RPOiA/Pz9cbiAgICAgIH0pO1xuICAgICAgdGhpcy5hc3NpZ25Gcm9tUmVmZXJlbmNlKFtdKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFyYW1ldHJpY01hcDtcbn0oRGVyaXZlZERhdGFzZXQpO1xuXG52YXIgU3RydWN0dXJlZFJlcG9ydCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Rlcml2ZWREYXRhc2V0KSB7XG4gIF9pbmhlcml0cyhTdHJ1Y3R1cmVkUmVwb3J0LCBfRGVyaXZlZERhdGFzZXQpO1xuXG4gIGZ1bmN0aW9uIFN0cnVjdHVyZWRSZXBvcnQoZGF0YXNldHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RydWN0dXJlZFJlcG9ydCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFN0cnVjdHVyZWRSZXBvcnQpLmNhbGwodGhpcywgZGF0YXNldHMsIG9wdGlvbnMpKTtcbiAgfSAvLyB0aGlzIGFzc3VtZXMgYSBub3JtYWxpemVkIG11bHRpZnJhbWUgaW5wdXQgYW5kIHdpbGwgY3JlYXRlXG4gIC8vIGEgbXVsdGlmcmFtZSBkZXJpdmVkIGltYWdlXG5cblxuICBfY3JlYXRlQ2xhc3MoU3RydWN0dXJlZFJlcG9ydCwgW3tcbiAgICBrZXk6IFwiZGVyaXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcml2ZSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFN0cnVjdHVyZWRSZXBvcnQucHJvdG90eXBlKSwgXCJkZXJpdmVcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5hc3NpZ25Ub0RhdGFzZXQoe1xuICAgICAgICBTT1BDbGFzc1VJRDogRGljb21NZXRhRGljdGlvbmFyeS5zb3BDbGFzc1VJRHNCeU5hbWUuRW5oYW5jZWRTUixcbiAgICAgICAgTW9kYWxpdHk6IFwiU1JcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIkNPTlRBSU5FUlwiXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYXNzaWduRnJvbVJlZmVyZW5jZShbXSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0cnVjdHVyZWRSZXBvcnQ7XG59KERlcml2ZWREYXRhc2V0KTtcblxudmFyIFRJRDE1MDBNZWFzdXJlbWVudFJlcG9ydCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRJRDE1MDBNZWFzdXJlbWVudFJlcG9ydChUSUQxNTAxTWVhc3VyZW1lbnRHcm91cHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVElEMTUwME1lYXN1cmVtZW50UmVwb3J0KTtcblxuICAgIHRoaXMuVElEMTUwMU1lYXN1cmVtZW50R3JvdXBzID0gVElEMTUwMU1lYXN1cmVtZW50R3JvdXBzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRJRDE1MDBNZWFzdXJlbWVudFJlcG9ydCwgW3tcbiAgICBrZXk6IFwidmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKGRlcml2YXRpb25Tb3VyY2VEYXRhc2V0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAvLyBBZGQgdGhlIE1lYXN1cmVtZW50IEdyb3VwcyB0byB0aGUgTWVhc3VyZW1lbnQgUmVwb3J0XG4gICAgICB2YXIgQ29udGVudFNlcXVlbmNlID0gW107XG4gICAgICB0aGlzLlRJRDE1MDFNZWFzdXJlbWVudEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBDb250ZW50U2VxdWVuY2UgPSBDb250ZW50U2VxdWVuY2UuY29uY2F0KGNoaWxkLmNvbnRlbnRJdGVtKCkpO1xuICAgICAgfSk7IC8vIEZvciBlYWNoIG1lYXN1cmVtZW50IHRoYXQgaXMgcmVmZXJlbmNlZCwgYWRkIGEgbGluayB0byB0aGVcbiAgICAgIC8vIEltYWdlIExpYnJhcnkgR3JvdXAgYW5kIHRoZSBDdXJyZW50IFJlcXVlc3RlZCBQcm9jZWR1cmUgRXZpZGVuY2VcbiAgICAgIC8vIHdpdGggdGhlIHByb3BlciBSZWZlcmVuY2VkU09QU2VxdWVuY2VcblxuICAgICAgdmFyIEltYWdlTGlicmFyeUNvbnRlbnRTZXF1ZW5jZSA9IFtdO1xuICAgICAgdmFyIEN1cnJlbnRSZXF1ZXN0ZWRQcm9jZWR1cmVFdmlkZW5jZVNlcXVlbmNlID0gW107XG4gICAgICB0aGlzLlRJRDE1MDFNZWFzdXJlbWVudEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChtZWFzdXJlbWVudEdyb3VwKSB7XG4gICAgICAgIG1lYXN1cmVtZW50R3JvdXAuVElEMzAwTWVhc3VyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG1lYXN1cmVtZW50KSB7XG4gICAgICAgICAgSW1hZ2VMaWJyYXJ5Q29udGVudFNlcXVlbmNlLnB1c2goe1xuICAgICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IG1lYXN1cmVtZW50LlJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIEN1cnJlbnRSZXF1ZXN0ZWRQcm9jZWR1cmVFdmlkZW5jZVNlcXVlbmNlLnB1c2goe1xuICAgICAgICAgICAgU3R1ZHlJbnN0YW5jZVVJRDogZGVyaXZhdGlvblNvdXJjZURhdGFzZXQuU3R1ZHlJbnN0YW5jZVVJRCxcbiAgICAgICAgICAgIFJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZToge1xuICAgICAgICAgICAgICBTZXJpZXNJbnN0YW5jZVVJRDogZGVyaXZhdGlvblNvdXJjZURhdGFzZXQuU2VyaWVzSW5zdGFuY2VVSUQsXG4gICAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTogbWVhc3VyZW1lbnQuUmVmZXJlbmNlZFNPUFNlcXVlbmNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjYwMDBcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkltYWdpbmcgTWVhc3VyZW1lbnQgUmVwb3J0XCJcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGludWl0eU9mQ29udGVudDogXCJTRVBBUkFURVwiLFxuICAgICAgICBQZXJmb3JtZWRQcm9jZWR1cmVDb2RlU2VxdWVuY2U6IFtdLFxuICAgICAgICBDb21wbGV0aW9uRmxhZzogXCJDT01QTEVURVwiLFxuICAgICAgICBWZXJpZmljYXRpb25GbGFnOiBcIlVOVkVSSUZJRURcIixcbiAgICAgICAgUmVmZXJlbmNlZFBlcmZvcm1lZFByb2NlZHVyZVN0ZXBTZXF1ZW5jZTogW10sXG4gICAgICAgIEluc3RhbmNlTnVtYmVyOiAxLFxuICAgICAgICBDdXJyZW50UmVxdWVzdGVkUHJvY2VkdXJlRXZpZGVuY2VTZXF1ZW5jZTogQ3VycmVudFJlcXVlc3RlZFByb2NlZHVyZUV2aWRlbmNlU2VxdWVuY2UsXG4gICAgICAgIENvZGluZ1NjaGVtZUlkZW50aWZpY2F0aW9uU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIjk5ZGNtanNcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVOYW1lOiBcIkNvZGVzIHVzZWQgZm9yIGRjbWpzXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIwXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lUmVzcG9uc2libGVPcmdhbml6YXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL2RjbWpzLW9yZy9kY21qc1wiXG4gICAgICAgIH0sXG4gICAgICAgIENvbnRlbnRUZW1wbGF0ZVNlcXVlbmNlOiB7XG4gICAgICAgICAgTWFwcGluZ1Jlc291cmNlOiBcIkRDTVJcIixcbiAgICAgICAgICBUZW1wbGF0ZUlkZW50aWZpZXI6IFwiMTUwMFwiXG4gICAgICAgIH0sXG4gICAgICAgIENvbnRlbnRTZXF1ZW5jZTogW3tcbiAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBDT05DRVBUIE1PRFwiLFxuICAgICAgICAgIFZhbHVlVHlwZTogXCJDT0RFXCIsXG4gICAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjEwNDlcIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgICBDb2RlTWVhbmluZzogXCJMYW5ndWFnZSBvZiBDb250ZW50IEl0ZW0gYW5kIERlc2NlbmRhbnRzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIENvbmNlcHRDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCJlbmdcIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiUkZDNTY0NlwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiRW5nbGlzaFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBDb250ZW50U2VxdWVuY2U6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiSEFTIENPTkNFUFQgTU9EXCIsXG4gICAgICAgICAgICBWYWx1ZVR5cGU6IFwiQ09ERVwiLFxuICAgICAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgICAgQ29kZVZhbHVlOiBcIjEyMTA0NlwiLFxuICAgICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgICAgICBDb2RlTWVhbmluZzogXCJDb3VudHJ5IG9mIExhbmd1YWdlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBDb25jZXB0Q29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgIENvZGVWYWx1ZTogXCJVU1wiLFxuICAgICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIklTTzMxNjZfMVwiLFxuICAgICAgICAgICAgICBDb2RlTWVhbmluZzogXCJVbml0ZWQgU3RhdGVzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICAgIFZhbHVlVHlwZTogXCJQTkFNRVwiLFxuICAgICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwiMTIxMDA4XCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiUGVyc29uIE9ic2VydmVyIE5hbWVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgUGVyc29uTmFtZTogb3B0aW9ucy5QZXJzb25OYW1lIHx8IFwidW5rbm93bl51bmtub3duXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiSEFTIENPTkNFUFQgTU9EXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiBcIkNPREVcIixcbiAgICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIjEyMTA1OFwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlByb2NlZHVyZSByZXBvcnRlZFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBDb25jZXB0Q29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwiMVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCI5OWRjbWpzXCIsXG4gICAgICAgICAgICBDb2RlTWVhbmluZzogXCJVbmtub3duIHByb2NlZHVyZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICAgIFZhbHVlVHlwZTogXCJDT05UQUlORVJcIixcbiAgICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIjExMTAyOFwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkltYWdlIExpYnJhcnlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgQ29udGludWl0eU9mQ29udGVudDogXCJTRVBBUkFURVwiLFxuICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZToge1xuICAgICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIkNPTlRBSU5FUlwiLFxuICAgICAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgICAgQ29kZVZhbHVlOiBcIjEyNjIwMFwiLFxuICAgICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgICAgICBDb2RlTWVhbmluZzogXCJJbWFnZSBMaWJyYXJ5IEdyb3VwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBDb250aW51aXR5T2ZDb250ZW50OiBcIlNFUEFSQVRFXCIsXG4gICAgICAgICAgICBDb250ZW50U2VxdWVuY2U6IEltYWdlTGlicmFyeUNvbnRlbnRTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgICBWYWx1ZVR5cGU6IFwiQ09OVEFJTkVSXCIsXG4gICAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjYwMTBcIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgICBDb2RlTWVhbmluZzogXCJJbWFnaW5nIE1lYXN1cmVtZW50c1wiIC8vIFRPRE86IHdvdWxkIGJlIG5pY2UgdG8gYWJzdHJhY3QgdGhlIGNvZGUgc2VxdWVuY2VzIChpbiBhIGRpY3Rpb25hcnk/IGEgc2VydmljZT8pXG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIENvbnRpbnVpdHlPZkNvbnRlbnQ6IFwiU0VQQVJBVEVcIixcbiAgICAgICAgICBDb250ZW50U2VxdWVuY2U6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgICAgIFZhbHVlVHlwZTogXCJDT05UQUlORVJcIixcbiAgICAgICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjUwMDdcIixcbiAgICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiTWVhc3VyZW1lbnQgR3JvdXBcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIENvbnRpbnVpdHlPZkNvbnRlbnQ6IFwiU0VQQVJBVEVcIixcbiAgICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZTogQ29udGVudFNlcXVlbmNlXG4gICAgICAgICAgfVxuICAgICAgICB9XVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVElEMTUwME1lYXN1cmVtZW50UmVwb3J0O1xufSgpO1xuXG52YXIgVElEMTUwMU1lYXN1cmVtZW50R3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUSUQxNTAxTWVhc3VyZW1lbnRHcm91cChUSUQzMDBNZWFzdXJlbWVudHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVElEMTUwMU1lYXN1cmVtZW50R3JvdXApO1xuXG4gICAgdGhpcy5USUQzMDBNZWFzdXJlbWVudHMgPSBUSUQzMDBNZWFzdXJlbWVudHM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVElEMTUwMU1lYXN1cmVtZW50R3JvdXAsIFt7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKCkge1xuICAgICAgdmFyIFRJRDMwME1lYXN1cmVtZW50cyA9IHRoaXMuVElEMzAwTWVhc3VyZW1lbnRzOyAvLyBUT0RPOiBJcyB0aGVyZSBub3RoaW5nIGVsc2UgaW4gdGhpcyBncm91cD9cblxuICAgICAgdmFyIGNvbnRlbnRJdGVtID0gW107XG4gICAgICB2YXIgbWVhc3VyZW1lbnRzID0gW107XG4gICAgICBUSUQzMDBNZWFzdXJlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoVElEMzAwTWVhc3VyZW1lbnQpIHtcbiAgICAgICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzLmNvbmNhdChUSUQzMDBNZWFzdXJlbWVudC5jb250ZW50SXRlbSgpKTtcbiAgICAgIH0pO1xuICAgICAgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbS5jb25jYXQobWVhc3VyZW1lbnRzKTtcbiAgICAgIHJldHVybiBjb250ZW50SXRlbTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVElEMTUwMU1lYXN1cmVtZW50R3JvdXA7XG59KCk7XG5cbnZhciB0b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh4KSB7XG4gIHJldHVybiB4LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXJyYXlcIiA/IHggOiBbeF07XG59O1xuXG52YXIgY29kZU1lYW5pbmdFcXVhbHMgPSBmdW5jdGlvbiBjb2RlTWVhbmluZ0VxdWFscyhjb2RlTWVhbmluZ05hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50SXRlbSkge1xuICAgIHJldHVybiBjb250ZW50SXRlbS5Db25jZXB0TmFtZUNvZGVTZXF1ZW5jZS5Db2RlTWVhbmluZyA9PT0gY29kZU1lYW5pbmdOYW1lO1xuICB9O1xufTtcblxudmFyIGdyYXBoaWNUeXBlRXF1YWxzID0gZnVuY3Rpb24gZ3JhcGhpY1R5cGVFcXVhbHMoZ3JhcGhpY1R5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50SXRlbSkge1xuICAgIHJldHVybiBjb250ZW50SXRlbS5Db250ZW50U2VxdWVuY2UgIT09IHVuZGVmaW5lZCAmJiBjb250ZW50SXRlbS5Db250ZW50U2VxdWVuY2UuR3JhcGhpY1R5cGUgPT09IGdyYXBoaWNUeXBlO1xuICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0VElEMzAwQ29udGVudEl0ZW0odG9vbCwgdG9vbFR5cGUsIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSwgdG9vbENsYXNzKSB7XG4gIHZhciBhcmdzID0gdG9vbENsYXNzLmdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHRvb2wpO1xuICBhcmdzLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTtcbiAgdmFyIFRJRDMwME1lYXN1cmVtZW50ID0gbmV3IHRvb2xDbGFzcy5USUQzMDBSZXByZXNlbnRhdGlvbihhcmdzKTtcbiAgcmV0dXJuIFRJRDMwME1lYXN1cmVtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRNZWFzdXJlbWVudEdyb3VwKHRvb2xUeXBlLCB0b29sRGF0YSwgUmVmZXJlbmNlZFNPUFNlcXVlbmNlKSB7XG4gIHZhciB0b29sVHlwZURhdGEgPSB0b29sRGF0YVt0b29sVHlwZV07XG4gIHZhciB0b29sQ2xhc3MgPSBNZWFzdXJlbWVudFJlcG9ydC5DT1JORVJTVE9ORV9UT09MX0NMQVNTRVNfQllfVE9PTF9UWVBFW3Rvb2xUeXBlXTtcblxuICBpZiAoIXRvb2xUeXBlRGF0YSB8fCAhdG9vbFR5cGVEYXRhLmRhdGEgfHwgIXRvb2xUeXBlRGF0YS5kYXRhLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBMb29wIHRocm91Z2ggdGhlIGFycmF5IG9mIHRvb2wgaW5zdGFuY2VzXG4gIC8vIGZvciB0aGlzIHRvb2xcblxuXG4gIHZhciBNZWFzdXJlbWVudHMgPSB0b29sVHlwZURhdGEuZGF0YS5tYXAoZnVuY3Rpb24gKHRvb2wpIHtcbiAgICByZXR1cm4gZ2V0VElEMzAwQ29udGVudEl0ZW0odG9vbCwgdG9vbFR5cGUsIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSwgdG9vbENsYXNzKTtcbiAgfSk7XG4gIHJldHVybiBuZXcgVElEMTUwMU1lYXN1cmVtZW50R3JvdXAoTWVhc3VyZW1lbnRzKTtcbn1cblxudmFyIE1lYXN1cmVtZW50UmVwb3J0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWVhc3VyZW1lbnRSZXBvcnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lYXN1cmVtZW50UmVwb3J0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZWFzdXJlbWVudFJlcG9ydCwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZ2VuZXJhdGVSZXBvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVSZXBvcnQodG9vbFN0YXRlLCBtZXRhZGF0YVByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICAvLyBUb29sU3RhdGUgZm9yIGFycmF5IG9mIGltYWdlSURzIHRvIGEgUmVwb3J0XG4gICAgICAvLyBBc3N1bWUgQ29ybmVyc3RvbmUgbWV0YWRhdGEgcHJvdmlkZXIgaGFzIGFjY2VzcyB0byBTdHVkeSAvIFNlcmllcyAvIFNvcCBJbnN0YW5jZSBVSURcbiAgICAgIHZhciBhbGxNZWFzdXJlbWVudEdyb3VwcyA9IFtdO1xuICAgICAgdmFyIGZpcnN0SW1hZ2VJZCA9IE9iamVjdC5rZXlzKHRvb2xTdGF0ZSlbMF07XG5cbiAgICAgIGlmICghZmlyc3RJbWFnZUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1lYXN1cmVtZW50cyBwcm92aWRlZC5cIik7XG4gICAgICB9XG4gICAgICAvKiBQYXRpZW50IElEXG4gICAgICBXYXJuaW5nIC0gTWlzc2luZyBhdHRyaWJ1dGUgb3IgdmFsdWUgdGhhdCB3b3VsZCBiZSBuZWVkZWQgdG8gYnVpbGQgRElDT01ESVIgLSBQYXRpZW50IElEXG4gICAgICBXYXJuaW5nIC0gTWlzc2luZyBhdHRyaWJ1dGUgb3IgdmFsdWUgdGhhdCB3b3VsZCBiZSBuZWVkZWQgdG8gYnVpbGQgRElDT01ESVIgLSBTdHVkeSBEYXRlXG4gICAgICBXYXJuaW5nIC0gTWlzc2luZyBhdHRyaWJ1dGUgb3IgdmFsdWUgdGhhdCB3b3VsZCBiZSBuZWVkZWQgdG8gYnVpbGQgRElDT01ESVIgLSBTdHVkeSBUaW1lXG4gICAgICBXYXJuaW5nIC0gTWlzc2luZyBhdHRyaWJ1dGUgb3IgdmFsdWUgdGhhdCB3b3VsZCBiZSBuZWVkZWQgdG8gYnVpbGQgRElDT01ESVIgLSBTdHVkeSBJRCAqL1xuXG5cbiAgICAgIHZhciBnZW5lcmFsU2VyaWVzTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJnZW5lcmFsU2VyaWVzTW9kdWxlXCIsIGZpcnN0SW1hZ2VJZCk7IC8vY29uc3Qgc29wQ29tbW9uTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoJ3NvcENvbW1vbk1vZHVsZScsIGZpcnN0SW1hZ2VJZCk7XG5cbiAgICAgIHZhciBzdHVkeUluc3RhbmNlVUlEID0gZ2VuZXJhbFNlcmllc01vZHVsZS5zdHVkeUluc3RhbmNlVUlELFxuICAgICAgICAgIHNlcmllc0luc3RhbmNlVUlEID0gZ2VuZXJhbFNlcmllc01vZHVsZS5zZXJpZXNJbnN0YW5jZVVJRDsgLy8gTG9vcCB0aHJvdWdoIGVhY2ggaW1hZ2UgaW4gdGhlIHRvb2xEYXRhXG5cbiAgICAgIE9iamVjdC5rZXlzKHRvb2xTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoaW1hZ2VJZCkge1xuICAgICAgICB2YXIgc29wQ29tbW9uTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJzb3BDb21tb25Nb2R1bGVcIiwgaW1hZ2VJZCk7XG4gICAgICAgIHZhciBmcmFtZU51bWJlciA9IG1ldGFkYXRhUHJvdmlkZXIuZ2V0KFwiZnJhbWVOdW1iZXJcIiwgaW1hZ2VJZCk7XG4gICAgICAgIHZhciB0b29sRGF0YSA9IHRvb2xTdGF0ZVtpbWFnZUlkXTtcbiAgICAgICAgdmFyIHRvb2xUeXBlcyA9IE9iamVjdC5rZXlzKHRvb2xEYXRhKTtcbiAgICAgICAgdmFyIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IHtcbiAgICAgICAgICBSZWZlcmVuY2VkU09QQ2xhc3NVSUQ6IHNvcENvbW1vbk1vZHVsZS5zb3BDbGFzc1VJRCxcbiAgICAgICAgICBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQ6IHNvcENvbW1vbk1vZHVsZS5zb3BJbnN0YW5jZVVJRFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChOb3JtYWxpemVyLmlzTXVsdGlmcmFtZVNPUENsYXNzVUlEKHNvcENvbW1vbk1vZHVsZS5zb3BDbGFzc1VJRCkpIHtcbiAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2UuUmVmZXJlbmNlZEZyYW1lTnVtYmVyID0gZnJhbWVOdW1iZXI7XG4gICAgICAgIH0gLy8gTG9vcCB0aHJvdWdoIGVhY2ggdG9vbCB0eXBlIGZvciB0aGUgaW1hZ2VcblxuXG4gICAgICAgIHZhciBtZWFzdXJlbWVudEdyb3VwcyA9IFtdO1xuICAgICAgICB0b29sVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodG9vbFR5cGUpIHtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSBnZXRNZWFzdXJlbWVudEdyb3VwKHRvb2xUeXBlLCB0b29sRGF0YSwgUmVmZXJlbmNlZFNPUFNlcXVlbmNlKTtcblxuICAgICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgbWVhc3VyZW1lbnRHcm91cHMucHVzaChncm91cCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYWxsTWVhc3VyZW1lbnRHcm91cHMgPSBhbGxNZWFzdXJlbWVudEdyb3Vwcy5jb25jYXQobWVhc3VyZW1lbnRHcm91cHMpO1xuICAgICAgfSk7XG4gICAgICB2YXIgTWVhc3VyZW1lbnRSZXBvcnQgPSBuZXcgVElEMTUwME1lYXN1cmVtZW50UmVwb3J0KGFsbE1lYXN1cmVtZW50R3JvdXBzLCBvcHRpb25zKTsgLy8gVE9ETzogd2hhdCBpcyB0aGUgY29ycmVjdCBtZXRhaGVhZGVyXG4gICAgICAvLyBodHRwOi8vZGljb20ubmVtYS5vcmcvbWVkaWNhbC9EaWNvbS9jdXJyZW50L291dHB1dC9jaHRtbC9wYXJ0MTAvY2hhcHRlcl83Lmh0bWxcbiAgICAgIC8vIFRPRE86IG1vdmUgbWV0YSBjcmVhdGlvbiB0byBoYXBwZW4gaW4gZGVyaXZhdGlvbnMuanNcblxuICAgICAgdmFyIGZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uQXJyYXkgPSBuZXcgVWludDhBcnJheSgyKTtcbiAgICAgIGZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uQXJyYXlbMV0gPSAxO1xuICAgICAgdmFyIGRlcml2YXRpb25Tb3VyY2VEYXRhc2V0ID0ge1xuICAgICAgICBTdHVkeUluc3RhbmNlVUlEOiBzdHVkeUluc3RhbmNlVUlELFxuICAgICAgICBTZXJpZXNJbnN0YW5jZVVJRDogc2VyaWVzSW5zdGFuY2VVSUQgLy9TT1BJbnN0YW5jZVVJRDogc29wSW5zdGFuY2VVSUQsIC8vIFRPRE86IE5lY2Vzc2FyeT9cbiAgICAgICAgLy9TT1BDbGFzc1VJRDogc29wQ2xhc3NVSUQsXG5cbiAgICAgIH07XG4gICAgICB2YXIgX21ldGEgPSB7XG4gICAgICAgIEZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uOiB7XG4gICAgICAgICAgVmFsdWU6IFtmaWxlTWV0YUluZm9ybWF0aW9uVmVyc2lvbkFycmF5LmJ1ZmZlcl0sXG4gICAgICAgICAgdnI6IFwiT0JcIlxuICAgICAgICB9LFxuICAgICAgICAvL01lZGlhU3RvcmFnZVNPUENsYXNzVUlEXG4gICAgICAgIC8vTWVkaWFTdG9yYWdlU09QSW5zdGFuY2VVSUQ6IHNvcENvbW1vbk1vZHVsZS5zb3BJbnN0YW5jZVVJRCxcbiAgICAgICAgVHJhbnNmZXJTeW50YXhVSUQ6IHtcbiAgICAgICAgICBWYWx1ZTogW1wiMS4yLjg0MC4xMDAwOC4xLjIuMVwiXSxcbiAgICAgICAgICB2cjogXCJVSVwiXG4gICAgICAgIH0sXG4gICAgICAgIEltcGxlbWVudGF0aW9uQ2xhc3NVSUQ6IHtcbiAgICAgICAgICBWYWx1ZTogW0RpY29tTWV0YURpY3Rpb25hcnkudWlkKCldLFxuICAgICAgICAgIC8vIFRPRE86IGNvdWxkIGJlIGdpdCBoYXNoIG9yIG90aGVyIHZhbGlkIGlkXG4gICAgICAgICAgdnI6IFwiVUlcIlxuICAgICAgICB9LFxuICAgICAgICBJbXBsZW1lbnRhdGlvblZlcnNpb25OYW1lOiB7XG4gICAgICAgICAgVmFsdWU6IFtcImRjbWpzXCJdLFxuICAgICAgICAgIHZyOiBcIlNIXCJcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBfdnJNYXAgPSB7XG4gICAgICAgIFBpeGVsRGF0YTogXCJPV1wiXG4gICAgICB9O1xuICAgICAgZGVyaXZhdGlvblNvdXJjZURhdGFzZXQuX21ldGEgPSBfbWV0YTtcbiAgICAgIGRlcml2YXRpb25Tb3VyY2VEYXRhc2V0Ll92ck1hcCA9IF92ck1hcDtcbiAgICAgIHZhciByZXBvcnQgPSBuZXcgU3RydWN0dXJlZFJlcG9ydChbZGVyaXZhdGlvblNvdXJjZURhdGFzZXRdKTtcbiAgICAgIHZhciBjb250ZW50SXRlbSA9IE1lYXN1cmVtZW50UmVwb3J0LmNvbnRlbnRJdGVtKGRlcml2YXRpb25Tb3VyY2VEYXRhc2V0KTsgLy8gTWVyZ2UgdGhlIGRlcml2ZWQgZGF0YXNldCB3aXRoIHRoZSBjb250ZW50IGZyb20gdGhlIE1lYXN1cmVtZW50IFJlcG9ydFxuXG4gICAgICByZXBvcnQuZGF0YXNldCA9IE9iamVjdC5hc3NpZ24ocmVwb3J0LmRhdGFzZXQsIGNvbnRlbnRJdGVtKTtcbiAgICAgIHJlcG9ydC5kYXRhc2V0Ll9tZXRhID0gX21ldGE7XG4gICAgICByZXR1cm4gcmVwb3J0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZW5lcmF0ZVRvb2xTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVRvb2xTdGF0ZShkYXRhc2V0KSB7XG4gICAgICAvLyBGb3Igbm93LCBiYWlsIG91dCBpZiB0aGUgZGF0YXNldCBpcyBub3QgYSBUSUQxNTAwIFNSIHdpdGggbGVuZ3RoIG1lYXN1cmVtZW50c1xuICAgICAgaWYgKGRhdGFzZXQuQ29udGVudFRlbXBsYXRlU2VxdWVuY2UuVGVtcGxhdGVJZGVudGlmaWVyICE9PSBcIjE1MDBcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHBhY2thZ2UgY2FuIGN1cnJlbnRseSBvbmx5IGludGVycHJldCBESUNPTSBTUiBUSUQgMTUwMFwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFJFUE9SVCA9IFwiSW1hZ2luZyBNZWFzdXJlbWVudHNcIjtcbiAgICAgIHZhciBHUk9VUCA9IFwiTWVhc3VyZW1lbnQgR3JvdXBcIjsgLy8gSWRlbnRpZnkgdGhlIEltYWdpbmcgTWVhc3VyZW1lbnRzXG5cbiAgICAgIHZhciBpbWFnaW5nTWVhc3VyZW1lbnRDb250ZW50ID0gdG9BcnJheShkYXRhc2V0LkNvbnRlbnRTZXF1ZW5jZSkuZmluZChjb2RlTWVhbmluZ0VxdWFscyhSRVBPUlQpKTsgLy8gUmV0cmlldmUgdGhlIE1lYXN1cmVtZW50cyB0aGVtc2VsdmVzXG5cbiAgICAgIHZhciBtZWFzdXJlbWVudEdyb3VwQ29udGVudCA9IHRvQXJyYXkoaW1hZ2luZ01lYXN1cmVtZW50Q29udGVudC5Db250ZW50U2VxdWVuY2UpLmZpbmQoY29kZU1lYW5pbmdFcXVhbHMoR1JPVVApKTsgLy8gRm9yIGVhY2ggb2YgdGhlIHN1cHBvcnRlZCBtZWFzdXJlbWVudCB0eXBlcywgY29tcHV0ZSB0aGUgbWVhc3VyZW1lbnQgZGF0YVxuXG4gICAgICB2YXIgbWVhc3VyZW1lbnREYXRhID0ge307XG4gICAgICBPYmplY3Qua2V5cyhNZWFzdXJlbWVudFJlcG9ydC5DT1JORVJTVE9ORV9UT09MX0NMQVNTRVNfQllfVVRJTElUWV9UWVBFKS5mb3JFYWNoKGZ1bmN0aW9uIChtZWFzdXJlbWVudFR5cGUpIHtcbiAgICAgICAgLy8gRmlsdGVyIHRvIGZpbmQgc3VwcG9ydGVkIG1lYXN1cmVtZW50IHR5cGVzIGluIHRoZSBTdHJ1Y3R1cmVkIFJlcG9ydFxuICAgICAgICB2YXIgbWVhc3VyZW1lbnRHcm91cHMgPSB0b0FycmF5KG1lYXN1cmVtZW50R3JvdXBDb250ZW50LkNvbnRlbnRTZXF1ZW5jZSk7XG4gICAgICAgIHZhciBtZWFzdXJlbWVudENvbnRlbnQgPSBtZWFzdXJlbWVudEdyb3Vwcy5maWx0ZXIoY29kZU1lYW5pbmdFcXVhbHMobWVhc3VyZW1lbnRUeXBlKSk7XG5cbiAgICAgICAgaWYgKCFtZWFzdXJlbWVudENvbnRlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9vbENsYXNzID0gTWVhc3VyZW1lbnRSZXBvcnQuQ09STkVSU1RPTkVfVE9PTF9DTEFTU0VTX0JZX1VUSUxJVFlfVFlQRVttZWFzdXJlbWVudFR5cGVdO1xuICAgICAgICB2YXIgdG9vbFR5cGUgPSB0b29sQ2xhc3MudG9vbFR5cGU7XG5cbiAgICAgICAgaWYgKCF0b29sQ2xhc3MuZ2V0TWVhc3VyZW1lbnREYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ybmVyc3RvbmUgVG9vbCBBZGFwdGVycyBtdXN0IGRlZmluZSBhIGdldE1lYXN1cmVtZW50RGF0YSBzdGF0aWMgbWV0aG9kLlwiKTtcbiAgICAgICAgfSAvLyBSZXRyaWV2ZSBMZW5ndGggTWVhc3VyZW1lbnQgRGF0YVxuXG5cbiAgICAgICAgbWVhc3VyZW1lbnREYXRhW3Rvb2xUeXBlXSA9IHRvb2xDbGFzcy5nZXRNZWFzdXJlbWVudERhdGEobWVhc3VyZW1lbnRDb250ZW50KTtcbiAgICAgIH0pOyAvLyBUT0RPOiBGaW5kIGEgd2F5IHRvIGRlZmluZSAnaG93JyB0byBnZXQgYW4gaW1hZ2VJZCA/XG4gICAgICAvLyBOZWVkIHRvIHByb3ZpZGUgc29tZXRoaW5nIHRvIGdlbmVyYXRlIGltYWdlSWQgZnJvbSBTdHVkeSAvIFNlcmllcyAvIFNvcCBJbnN0YW5jZSBVSURcbiAgICAgIC8vIGNvbWJpbmUgLyByZW9yZ2FuaXplIGFsbCB0aGUgdG9vbERhdGEgaW50byB0aGUgZXhwZWN0ZWQgdG9vbFN0YXRlIGZvcm1hdCBmb3IgQ29ybmVyc3RvbmUgVG9vbHNcblxuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50RGF0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJUb29sXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVG9vbCh0b29sQ2xhc3MpIHtcbiAgICAgIE1lYXN1cmVtZW50UmVwb3J0LkNPUk5FUlNUT05FX1RPT0xfQ0xBU1NFU19CWV9VVElMSVRZX1RZUEVbdG9vbENsYXNzLnV0aWxpdHlUb29sVHlwZV0gPSB0b29sQ2xhc3M7XG4gICAgICBNZWFzdXJlbWVudFJlcG9ydC5DT1JORVJTVE9ORV9UT09MX0NMQVNTRVNfQllfVE9PTF9UWVBFW3Rvb2xDbGFzcy50b29sVHlwZV0gPSB0b29sQ2xhc3M7XG4gICAgICBNZWFzdXJlbWVudFJlcG9ydC5NRUFTVVJFTUVOVF9CWV9UT09MVFlQRVt0b29sQ2xhc3MudG9vbFR5cGVdID0gdG9vbENsYXNzLnV0aWxpdHlUb29sVHlwZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVhc3VyZW1lbnRSZXBvcnQ7XG59KCk7XG5NZWFzdXJlbWVudFJlcG9ydC5NRUFTVVJFTUVOVF9CWV9UT09MVFlQRSA9IHt9O1xuTWVhc3VyZW1lbnRSZXBvcnQuQ09STkVSU1RPTkVfVE9PTF9DTEFTU0VTX0JZX1VUSUxJVFlfVFlQRSA9IHt9O1xuTWVhc3VyZW1lbnRSZXBvcnQuQ09STkVSU1RPTkVfVE9PTF9DTEFTU0VTX0JZX1RPT0xfVFlQRSA9IHt9O1xuXG52YXIgVElEMzAwTWVhc3VyZW1lbnQgPSBmdW5jdGlvbiBUSUQzMDBNZWFzdXJlbWVudCgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRJRDMwME1lYXN1cmVtZW50KTtcbn07XG5cbnZhciBMZW5ndGggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9USUQzMDBNZWFzdXJlbWVudCkge1xuICBfaW5oZXJpdHMoTGVuZ3RoLCBfVElEMzAwTWVhc3VyZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIExlbmd0aChfcmVmKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIHBvaW50MSA9IF9yZWYucG9pbnQxLFxuICAgICAgICBwb2ludDIgPSBfcmVmLnBvaW50MixcbiAgICAgICAgZGlzdGFuY2UgPSBfcmVmLmRpc3RhbmNlLFxuICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBfcmVmLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMZW5ndGgpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTGVuZ3RoKS5jYWxsKHRoaXMpKTtcbiAgICBfdGhpcy5wb2ludDEgPSBwb2ludDE7XG4gICAgX3RoaXMucG9pbnQyID0gcG9pbnQyO1xuICAgIF90aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgX3RoaXMuUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gUmVmZXJlbmNlZFNPUFNlcXVlbmNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMZW5ndGgsIFt7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKCkge1xuICAgICAgdmFyIHBvaW50MSA9IHRoaXMucG9pbnQxLFxuICAgICAgICAgIHBvaW50MiA9IHRoaXMucG9pbnQyLFxuICAgICAgICAgIGRpc3RhbmNlID0gdGhpcy5kaXN0YW5jZSxcbiAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2UgPSB0aGlzLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZTtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVEVYVFwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwMzlcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBUZXh0VmFsdWU6IFwid2ViIGFubm90YXRpb25cIlxuICAgICAgfSwge1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVUlEUkVGXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIjExMjA0MFwiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiVHJhY2tpbmcgVW5pcXVlIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBVSUQ6IERpY29tTWV0YURpY3Rpb25hcnkudWlkKClcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiQ09ERVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjEwNzFcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkZpbmRpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBDb25jZXB0Q29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIlNBTVBMRUZJTkRJTkdcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIjk5ZGNtanNcIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJTYW1wbGUgRmluZGluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiTlVNXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIkctRDdGRVwiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiU1JUXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiTGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgTWVhc3VyZWRWYWx1ZVNlcXVlbmNlOiB7XG4gICAgICAgICAgTWVhc3VyZW1lbnRVbml0c0NvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIm1tXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlVDVU1cIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZVZlcnNpb246IFwiMS40XCIsXG4gICAgICAgICAgICBDb2RlTWVhbmluZzogXCJtaWxsaW1ldGVyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIE51bWVyaWNWYWx1ZTogZGlzdGFuY2VcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiBcIlNDT09SRFwiLFxuICAgICAgICAgIEdyYXBoaWNUeXBlOiBcIlBPTFlMSU5FXCIsXG4gICAgICAgICAgR3JhcGhpY0RhdGE6IFtwb2ludDEueCwgcG9pbnQxLnksIHBvaW50Mi54LCBwb2ludDIueV0sXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIlNFTEVDVEVEIEZST01cIixcbiAgICAgICAgICAgIFZhbHVlVHlwZTogXCJJTUFHRVwiLFxuICAgICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlOiBSZWZlcmVuY2VkU09QU2VxdWVuY2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMZW5ndGg7XG59KFRJRDMwME1lYXN1cmVtZW50KTtcblxudmFyIExlbmd0aCQxID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGVuZ3RoJCQxKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMZW5ndGgkJDEpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExlbmd0aCQkMSwgbnVsbCwgW3tcbiAgICBrZXk6IFwibWVhc3VyZW1lbnRDb250ZW50VG9MZW5ndGhTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZWFzdXJlbWVudENvbnRlbnRUb0xlbmd0aFN0YXRlKGdyb3VwSXRlbUNvbnRlbnQpIHtcbiAgICAgIHZhciBsZW5ndGhDb250ZW50ID0gZ3JvdXBJdGVtQ29udGVudC5Db250ZW50U2VxdWVuY2U7XG4gICAgICB2YXIgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gbGVuZ3RoQ29udGVudC5Db250ZW50U2VxdWVuY2UuUmVmZXJlbmNlZFNPUFNlcXVlbmNlO1xuICAgICAgdmFyIFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCA9IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZS5SZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQsXG4gICAgICAgICAgUmVmZXJlbmNlZEZyYW1lTnVtYmVyID0gUmVmZXJlbmNlZFNPUFNlcXVlbmNlLlJlZmVyZW5jZWRGcmFtZU51bWJlcjtcbiAgICAgIHZhciBsZW5ndGhTdGF0ZSA9IHtcbiAgICAgICAgc29wSW5zdGFuY2VVaWQ6IFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgICAgZnJhbWVJbmRleDogUmVmZXJlbmNlZEZyYW1lTnVtYmVyIHx8IDAsXG4gICAgICAgIGxlbmd0aDogZ3JvdXBJdGVtQ29udGVudC5NZWFzdXJlZFZhbHVlU2VxdWVuY2UuTnVtZXJpY1ZhbHVlLFxuICAgICAgICB0b29sVHlwZTogTGVuZ3RoJCQxLnRvb2xUeXBlXG4gICAgICB9O1xuICAgICAgbGVuZ3RoU3RhdGUuaGFuZGxlcyA9IHtcbiAgICAgICAgc3RhcnQ6IHt9LFxuICAgICAgICBlbmQ6IHt9XG4gICAgICB9O1xuXG4gICAgICB2YXIgX2xlbmd0aENvbnRlbnQkR3JhcGhpID0gX3NsaWNlZFRvQXJyYXkobGVuZ3RoQ29udGVudC5HcmFwaGljRGF0YSwgNCk7XG5cbiAgICAgIGxlbmd0aFN0YXRlLmhhbmRsZXMuc3RhcnQueCA9IF9sZW5ndGhDb250ZW50JEdyYXBoaVswXTtcbiAgICAgIGxlbmd0aFN0YXRlLmhhbmRsZXMuc3RhcnQueSA9IF9sZW5ndGhDb250ZW50JEdyYXBoaVsxXTtcbiAgICAgIGxlbmd0aFN0YXRlLmhhbmRsZXMuZW5kLnggPSBfbGVuZ3RoQ29udGVudCRHcmFwaGlbMl07XG4gICAgICBsZW5ndGhTdGF0ZS5oYW5kbGVzLmVuZC55ID0gX2xlbmd0aENvbnRlbnQkR3JhcGhpWzNdO1xuICAgICAgLy8gVE9ETzogU2F2ZSB0ZXh0Ym94IHBvc2l0aW9uIGluIEdyYXBoaWNEYXRhXG4gICAgICBsZW5ndGhTdGF0ZS5oYW5kbGVzLnRleHRCb3ggPSB7XG4gICAgICAgIGhhc01vdmVkOiBmYWxzZSxcbiAgICAgICAgbW92ZXNJbmRlcGVuZGVudGx5OiBmYWxzZSxcbiAgICAgICAgZHJhd25JbmRlcGVuZGVudGx5OiB0cnVlLFxuICAgICAgICBhbGxvd2VkT3V0c2lkZUltYWdlOiB0cnVlLFxuICAgICAgICBoYXNCb3VuZGluZ0JveDogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBsZW5ndGhTdGF0ZTtcbiAgICB9IC8vIFRPRE86IHRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIGFsbCBDb3JuZXJzdG9uZSBUb29sIEFkYXB0ZXJzLCBzaW5jZSBpdCBpcyBjYWxsZWQgYnkgTWVhc3VyZW1lbnRSZXBvcnQuXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRNZWFzdXJlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCkge1xuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50Q29udGVudC5tYXAoTGVuZ3RoJCQxLm1lYXN1cmVtZW50Q29udGVudFRvTGVuZ3RoU3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUSUQzMDBSZXByZXNlbnRhdGlvbkFyZ3VtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUSUQzMDBSZXByZXNlbnRhdGlvbkFyZ3VtZW50cyh0b29sKSB7XG4gICAgICB2YXIgcG9pbnQxID0gdG9vbC5oYW5kbGVzLnN0YXJ0O1xuICAgICAgdmFyIHBvaW50MiA9IHRvb2wuaGFuZGxlcy5lbmQ7XG4gICAgICB2YXIgZGlzdGFuY2UgPSB0b29sLmxlbmd0aDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50MTogcG9pbnQxLFxuICAgICAgICBwb2ludDI6IHBvaW50MixcbiAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMZW5ndGgkJDE7XG59KCk7XG5cbkxlbmd0aCQxLnRvb2xUeXBlID0gXCJMZW5ndGhcIjtcbkxlbmd0aCQxLnV0aWxpdHlUb29sVHlwZSA9IFwiTGVuZ3RoXCI7XG5MZW5ndGgkMS5USUQzMDBSZXByZXNlbnRhdGlvbiA9IExlbmd0aDtcbk1lYXN1cmVtZW50UmVwb3J0LnJlZ2lzdGVyVG9vbChMZW5ndGgkMSk7XG5cbi8qKlxuICogRXhwYW5kIGFuIGFycmF5IG9mIHBvaW50cyBzdG9yZWQgYXMgb2JqZWN0cyBpbnRvXG4gKiBhIGZsYXR0ZW5lZCBhcnJheSBvZiBwb2ludHNcbiAqXG4gKiBAcGFyYW0gcG9pbnRzIFt7eDogMCwgeTogMX0sIHt4OiAxLCB5OiAyfV0gb3IgW3t4OiAwLCB5OiAxLCB6OiAwfSwge3g6IDEsIHk6IDIsIHo6IDB9XVxuICogQHJldHVybiB7QXJyYXl9IFtwb2ludDF4LCBwb2ludDF5LCBwb2ludDJ4LCBwb2ludDJ5XSBvciBbcG9pbnQxeCwgcG9pbnQxeSwgcG9pbnQxeiwgcG9pbnQyeCwgcG9pbnQyeSwgcG9pbnQyel1cbiAqL1xuXG5mdW5jdGlvbiBleHBhbmRQb2ludHMocG9pbnRzKSB7XG4gIHZhciBhbGxQb2ludHMgPSBbXTtcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgYWxsUG9pbnRzLnB1c2gocG9pbnRbMF0pO1xuICAgIGFsbFBvaW50cy5wdXNoKHBvaW50WzFdKTtcblxuICAgIGlmIChwb2ludFsyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbGxQb2ludHMucHVzaChwb2ludFsyXSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFsbFBvaW50cztcbn1cblxudmFyIFBvbHlsaW5lID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVElEMzAwTWVhc3VyZW1lbnQpIHtcbiAgX2luaGVyaXRzKFBvbHlsaW5lLCBfVElEMzAwTWVhc3VyZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvbHlsaW5lKF9yZWYpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgcG9pbnRzID0gX3JlZi5wb2ludHMsXG4gICAgICAgIGxlbmd0aHMgPSBfcmVmLmxlbmd0aHMsXG4gICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IF9yZWYuUmVmZXJlbmNlZFNPUFNlcXVlbmNlLFxuICAgICAgICBfcmVmJHVzZTNEU3BhdGlhbENvb3IgPSBfcmVmLnVzZTNEU3BhdGlhbENvb3JkaW5hdGVzLFxuICAgICAgICB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA9IF9yZWYkdXNlM0RTcGF0aWFsQ29vciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHVzZTNEU3BhdGlhbENvb3I7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9seWxpbmUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9seWxpbmUpLmNhbGwodGhpcykpO1xuICAgIF90aGlzLnBvaW50cyA9IHBvaW50cztcbiAgICBfdGhpcy5sZW5ndGhzID0gbGVuZ3RocztcbiAgICBfdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBSZWZlcmVuY2VkU09QU2VxdWVuY2U7XG4gICAgX3RoaXMudXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPSB1c2UzRFNwYXRpYWxDb29yZGluYXRlcztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9seWxpbmUsIFt7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKCkge1xuICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzLFxuICAgICAgICAgIGxlbmd0aHMgPSB0aGlzLmxlbmd0aHMsXG4gICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2UsXG4gICAgICAgICAgX3RoaXMkdXNlM0RTcGF0aWFsQ29vID0gdGhpcy51c2UzRFNwYXRpYWxDb29yZGluYXRlcyxcbiAgICAgICAgICB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA9IF90aGlzJHVzZTNEU3BhdGlhbENvbyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfdGhpcyR1c2UzRFNwYXRpYWxDb287IC8vIENvbWJpbmUgYWxsIGxlbmd0aHMgdG8gc2F2ZSB0aGUgcGVyaW1ldGVyXG4gICAgICAvLyBAVG9ETyBUaGUgcGVybWl0ZXIgaGFzIHRvIGJlIGltcGxlbWVudGVkXG4gICAgICAvLyBjb25zdCByZWR1Y2VyID0gKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUpID0+IGFjY3VtdWxhdG9yICsgY3VycmVudFZhbHVlO1xuICAgICAgLy8gY29uc3QgcGVyaW1ldGVyID0gbGVuZ3Rocy5yZWR1Y2UocmVkdWNlcik7XG5cbiAgICAgIHZhciBwZXJpbWV0ZXIgPSB7fTtcbiAgICAgIHZhciBHcmFwaGljRGF0YSA9IGV4cGFuZFBvaW50cyhwb2ludHMpOyAvLyBUT0RPOiBBZGQgTWVhbiBhbmQgU1REZXYgdmFsdWUgb2YgKG1vZGFsaXR5PykgcGl4ZWxzXG5cbiAgICAgIHJldHVybiBbe1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVEVYVFwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwMzlcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBUZXh0VmFsdWU6IFwid2ViIGFubm90YXRpb25cIlxuICAgICAgfSwge1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVUlEUkVGXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIjExMjA0MFwiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiVHJhY2tpbmcgVW5pcXVlIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBVSUQ6IERpY29tTWV0YURpY3Rpb25hcnkudWlkKClcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiQ09ERVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjEwNzFcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkZpbmRpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBDb25jZXB0Q29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIlNBTVBMRUZJTkRJTkdcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIjk5ZGNtanNcIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJTYW1wbGUgRmluZGluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiTlVNXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIkctQTE5N1wiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiU1JUXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiUGVyaW1ldGVyXCIgLy8gVE9ETzogTG9vayB0aGlzIHVwIGZyb20gYSBDb2RlIE1lYW5pbmcgZGljdGlvbmFyeVxuXG4gICAgICAgIH0sXG4gICAgICAgIE1lYXN1cmVkVmFsdWVTZXF1ZW5jZToge1xuICAgICAgICAgIE1lYXN1cmVtZW50VW5pdHNDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCJtbVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJVQ1VNXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVWZXJzaW9uOiBcIjEuNFwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwibWlsbGltZXRlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBOdW1lcmljVmFsdWU6IHBlcmltZXRlclxuICAgICAgICB9LFxuICAgICAgICBDb250ZW50U2VxdWVuY2U6IHtcbiAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIklORkVSUkVEIEZST01cIixcbiAgICAgICAgICBWYWx1ZVR5cGU6IHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID8gXCJTQ09PUkQzRFwiIDogXCJTQ09PUkRcIixcbiAgICAgICAgICBHcmFwaGljVHlwZTogXCJQT0xZTElORVwiLFxuICAgICAgICAgIEdyYXBoaWNEYXRhOiBHcmFwaGljRGF0YSxcbiAgICAgICAgICBDb250ZW50U2VxdWVuY2U6IHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID8gdW5kZWZpbmVkIDoge1xuICAgICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJTRUxFQ1RFRCBGUk9NXCIsXG4gICAgICAgICAgICBWYWx1ZVR5cGU6IFwiSU1BR0VcIixcbiAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTogUmVmZXJlbmNlZFNPUFNlcXVlbmNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgZmVlbHMgd2VpcmQgdG8gcmVwZWF0IHRoZSBHcmFwaGljRGF0YVxuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkNPTlRBSU5TXCIsXG4gICAgICAgIFZhbHVlVHlwZTogXCJOVU1cIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiRy1BMTY2XCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJTUlRcIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJBcmVhXCIgLy8gVE9ETzogTG9vayB0aGlzIHVwIGZyb20gYSBDb2RlIE1lYW5pbmcgZGljdGlvbmFyeVxuXG4gICAgICAgIH0sXG4gICAgICAgIE1lYXN1cmVkVmFsdWVTZXF1ZW5jZToge1xuICAgICAgICAgIE1lYXN1cmVtZW50VW5pdHNDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCJtbTJcIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiVUNVTVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIxLjRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlNxdWFyZU1pbGxpTWV0ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgTnVtZXJpY1ZhbHVlOiBwZXJpbWV0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IFwiU0NPT1JEM0RcIiA6IFwiU0NPT1JEXCIsXG4gICAgICAgICAgR3JhcGhpY1R5cGU6IFwiUE9MWUxJTkVcIixcbiAgICAgICAgICBHcmFwaGljRGF0YTogR3JhcGhpY0RhdGEsXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiU0VMRUNURUQgRlJPTVwiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvbHlsaW5lO1xufShUSUQzMDBNZWFzdXJlbWVudCk7XG5cbnZhciBGcmVlaGFuZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZyZWVoYW5kKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGcmVlaGFuZCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRnJlZWhhbmQsIG51bGwsIFt7XG4gICAga2V5OiBcIm1lYXN1cmVtZW50Q29udGVudFRvTGVuZ3RoU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVhc3VyZW1lbnRDb250ZW50VG9MZW5ndGhTdGF0ZShncm91cEl0ZW1Db250ZW50KSB7XG4gICAgICB2YXIgY29udGVudCA9IGdyb3VwSXRlbUNvbnRlbnQuQ29udGVudFNlcXVlbmNlO1xuICAgICAgdmFyIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IGNvbnRlbnQuQ29udGVudFNlcXVlbmNlLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZTtcbiAgICAgIHZhciBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQgPSBSZWZlcmVuY2VkU09QU2VxdWVuY2UuUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlELFxuICAgICAgICAgIFJlZmVyZW5jZWRGcmFtZU51bWJlciA9IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZS5SZWZlcmVuY2VkRnJhbWVOdW1iZXI7XG4gICAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIHNvcEluc3RhbmNlVWlkOiBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQsXG4gICAgICAgIGZyYW1lSW5kZXg6IFJlZmVyZW5jZWRGcmFtZU51bWJlciB8fCAwLFxuICAgICAgICB0b29sVHlwZTogRnJlZWhhbmQudG9vbFR5cGVcbiAgICAgIH07IC8vIFRPRE86IFRvIGJlIGltcGxlbWVudGVkIVxuICAgICAgLy8gTmVlZHMgdG8gYWRkIHBvaW50cywgbGVuZ3Roc1xuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSAvLyBUT0RPOiB0aGlzIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGZvciBhbGwgQ29ybmVyc3RvbmUgVG9vbCBBZGFwdGVycywgc2luY2UgaXQgaXMgY2FsbGVkIGJ5IE1lYXN1cmVtZW50UmVwb3J0LlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TWVhc3VyZW1lbnREYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1lYXN1cmVtZW50RGF0YShtZWFzdXJlbWVudENvbnRlbnQpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlbWVudENvbnRlbnQubWFwKEZyZWVoYW5kLm1lYXN1cmVtZW50Q29udGVudFRvTGVuZ3RoU3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUSUQzMDBSZXByZXNlbnRhdGlvbkFyZ3VtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUSUQzMDBSZXByZXNlbnRhdGlvbkFyZ3VtZW50cygpXG4gICAgLyp0b29sKi9cbiAgICB7XG4gICAgICAvLyBUTyBCRSBJTVBMRU1FTlRFRFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLypwb2ludHMsIGxlbmd0aHMqL1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRnJlZWhhbmQ7XG59KCk7XG5cbkZyZWVoYW5kLnRvb2xUeXBlID0gJ0ZyZWVoYW5kJztcbkZyZWVoYW5kLnV0aWxpdHlUb29sVHlwZSA9ICdQb2x5bGluZSc7XG5GcmVlaGFuZC5USUQzMDBSZXByZXNlbnRhdGlvbiA9IFBvbHlsaW5lO1xuTWVhc3VyZW1lbnRSZXBvcnQucmVnaXN0ZXJUb29sKEZyZWVoYW5kKTtcblxudmFyIEJpZGlyZWN0aW9uYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9USUQzMDBNZWFzdXJlbWVudCkge1xuICBfaW5oZXJpdHMoQmlkaXJlY3Rpb25hbCwgX1RJRDMwME1lYXN1cmVtZW50KTtcblxuICBmdW5jdGlvbiBCaWRpcmVjdGlvbmFsKF9yZWYpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgbG9uZ0F4aXMgPSBfcmVmLmxvbmdBeGlzLFxuICAgICAgICBzaG9ydEF4aXMgPSBfcmVmLnNob3J0QXhpcyxcbiAgICAgICAgbG9uZ0F4aXNMZW5ndGggPSBfcmVmLmxvbmdBeGlzTGVuZ3RoLFxuICAgICAgICBzaG9ydEF4aXNMZW5ndGggPSBfcmVmLnNob3J0QXhpc0xlbmd0aCxcbiAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gX3JlZi5SZWZlcmVuY2VkU09QU2VxdWVuY2U7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmlkaXJlY3Rpb25hbCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihCaWRpcmVjdGlvbmFsKS5jYWxsKHRoaXMpKTtcbiAgICBfdGhpcy5sb25nQXhpcyA9IGxvbmdBeGlzO1xuICAgIF90aGlzLnNob3J0QXhpcyA9IHNob3J0QXhpcztcbiAgICBfdGhpcy5sb25nQXhpc0xlbmd0aCA9IGxvbmdBeGlzTGVuZ3RoO1xuICAgIF90aGlzLnNob3J0QXhpc0xlbmd0aCA9IHNob3J0QXhpc0xlbmd0aDtcbiAgICBfdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBSZWZlcmVuY2VkU09QU2VxdWVuY2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJpZGlyZWN0aW9uYWwsIFt7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKCkge1xuICAgICAgdmFyIGxvbmdBeGlzID0gdGhpcy5sb25nQXhpcyxcbiAgICAgICAgICBzaG9ydEF4aXMgPSB0aGlzLnNob3J0QXhpcyxcbiAgICAgICAgICBsb25nQXhpc0xlbmd0aCA9IHRoaXMubG9uZ0F4aXNMZW5ndGgsXG4gICAgICAgICAgc2hvcnRBeGlzTGVuZ3RoID0gdGhpcy5zaG9ydEF4aXNMZW5ndGgsXG4gICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2U7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlRFWFRcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTEyMDM5XCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJUcmFja2luZyBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVGV4dFZhbHVlOiBcIndlYiBhbm5vdGF0aW9uXCJcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlVJRFJFRlwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwNDBcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIFVuaXF1ZSBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVUlEOiBEaWNvbU1ldGFEaWN0aW9uYXJ5LnVpZCgpXG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIkNPREVcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTIxMDcxXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJGaW5kaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgQ29uY2VwdENvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJTQU1QTEVGSU5ESU5HXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCI5OWRjbWpzXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU2FtcGxlIEZpbmRpbmdcIlxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIk5VTVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJHLUExODVcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlNSVFwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkxvbmcgQXhpc1wiXG4gICAgICAgIH0sXG4gICAgICAgIE1lYXN1cmVkVmFsdWVTZXF1ZW5jZToge1xuICAgICAgICAgIE1lYXN1cmVtZW50VW5pdHNDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCJtbVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJVQ1VNXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVWZXJzaW9uOiBcIjEuNFwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwibWlsbGltZXRlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBOdW1lcmljVmFsdWU6IGxvbmdBeGlzTGVuZ3RoXG4gICAgICAgIH0sXG4gICAgICAgIENvbnRlbnRTZXF1ZW5jZToge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiSU5GRVJSRUQgRlJPTVwiLFxuICAgICAgICAgIFZhbHVlVHlwZTogXCJTQ09PUkRcIixcbiAgICAgICAgICBHcmFwaGljVHlwZTogXCJQT0xZTElORVwiLFxuICAgICAgICAgIEdyYXBoaWNEYXRhOiBbbG9uZ0F4aXMucG9pbnQxLngsIGxvbmdBeGlzLnBvaW50MS55LCBsb25nQXhpcy5wb2ludDIueCwgbG9uZ0F4aXMucG9pbnQyLnldLFxuICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZToge1xuICAgICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJTRUxFQ1RFRCBGUk9NXCIsXG4gICAgICAgICAgICBWYWx1ZVR5cGU6IFwiSU1BR0VcIixcbiAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTogUmVmZXJlbmNlZFNPUFNlcXVlbmNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIk5VTVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJHLUExODZcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlNSVFwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlNob3J0IEF4aXNcIlxuICAgICAgICB9LFxuICAgICAgICBNZWFzdXJlZFZhbHVlU2VxdWVuY2U6IHtcbiAgICAgICAgICBNZWFzdXJlbWVudFVuaXRzQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwibW1cIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiVUNVTVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIxLjRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIm1pbGxpbWV0ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgTnVtZXJpY1ZhbHVlOiBzaG9ydEF4aXNMZW5ndGhcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiBcIlNDT09SRFwiLFxuICAgICAgICAgIEdyYXBoaWNUeXBlOiBcIlBPTFlMSU5FXCIsXG4gICAgICAgICAgR3JhcGhpY0RhdGE6IFtzaG9ydEF4aXMucG9pbnQxLngsIHNob3J0QXhpcy5wb2ludDEueSwgc2hvcnRBeGlzLnBvaW50Mi54LCBzaG9ydEF4aXMucG9pbnQyLnldLFxuICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZToge1xuICAgICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJTRUxFQ1RFRCBGUk9NXCIsXG4gICAgICAgICAgICBWYWx1ZVR5cGU6IFwiSU1BR0VcIixcbiAgICAgICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTogUmVmZXJlbmNlZFNPUFNlcXVlbmNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmlkaXJlY3Rpb25hbDtcbn0oVElEMzAwTWVhc3VyZW1lbnQpO1xuXG52YXIgQmlkaXJlY3Rpb25hbCQxID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmlkaXJlY3Rpb25hbCQkMSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmlkaXJlY3Rpb25hbCQkMSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmlkaXJlY3Rpb25hbCQkMSwgbnVsbCwgW3tcbiAgICBrZXk6IFwibWVhc3VyZW1lbnRDb250ZW50VG9MZW5ndGhTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZWFzdXJlbWVudENvbnRlbnRUb0xlbmd0aFN0YXRlKGdyb3VwSXRlbUNvbnRlbnQpIHtcbiAgICAgIHZhciBjb250ZW50ID0gZ3JvdXBJdGVtQ29udGVudC5Db250ZW50U2VxdWVuY2U7XG4gICAgICB2YXIgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gY29udGVudC5Db250ZW50U2VxdWVuY2UuUmVmZXJlbmNlZFNPUFNlcXVlbmNlO1xuICAgICAgdmFyIFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCA9IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZS5SZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQsXG4gICAgICAgICAgUmVmZXJlbmNlZEZyYW1lTnVtYmVyID0gUmVmZXJlbmNlZFNPUFNlcXVlbmNlLlJlZmVyZW5jZWRGcmFtZU51bWJlcjtcbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgc29wSW5zdGFuY2VVaWQ6IFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgICAgZnJhbWVJbmRleDogUmVmZXJlbmNlZEZyYW1lTnVtYmVyIHx8IDAsXG4gICAgICAgIHRvb2xUeXBlOiBCaWRpcmVjdGlvbmFsJCQxLnRvb2xUeXBlXG4gICAgICB9OyAvLyBUT0RPOiBUbyBiZSBpbXBsZW1lbnRlZCFcbiAgICAgIC8vIE5lZWRzIHRvIGFkZCBsb25nQXhpcywgc2hvcnRBeGlzLCBsb25nQXhpc0xlbmd0aCwgc2hvcnRBeGlzTGVuZ3RoXG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9IC8vIFRPRE86IHRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIGFsbCBDb3JuZXJzdG9uZSBUb29sIEFkYXB0ZXJzLCBzaW5jZSBpdCBpcyBjYWxsZWQgYnkgTWVhc3VyZW1lbnRSZXBvcnQuXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRNZWFzdXJlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCkge1xuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50Q29udGVudC5tYXAoQmlkaXJlY3Rpb25hbCQkMS5tZWFzdXJlbWVudENvbnRlbnRUb0xlbmd0aFN0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VElEMzAwUmVwcmVzZW50YXRpb25Bcmd1bWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VElEMzAwUmVwcmVzZW50YXRpb25Bcmd1bWVudHModG9vbCkge1xuICAgICAgdmFyIF90b29sJGhhbmRsZXMgPSB0b29sLmhhbmRsZXMsXG4gICAgICAgICAgc3RhcnQgPSBfdG9vbCRoYW5kbGVzLnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IF90b29sJGhhbmRsZXMuZW5kLFxuICAgICAgICAgIHBlcnBlbmRpY3VsYXJTdGFydCA9IF90b29sJGhhbmRsZXMucGVycGVuZGljdWxhclN0YXJ0LFxuICAgICAgICAgIHBlcnBlbmRpY3VsYXJFbmQgPSBfdG9vbCRoYW5kbGVzLnBlcnBlbmRpY3VsYXJFbmQ7XG4gICAgICB2YXIgc2hvcnRlc3REaWFtZXRlciA9IHRvb2wuc2hvcnRlc3REaWFtZXRlcixcbiAgICAgICAgICBsb25nZXN0RGlhbWV0ZXIgPSB0b29sLmxvbmdlc3REaWFtZXRlcjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvbmdBeGlzOiB7XG4gICAgICAgICAgcG9pbnQxOiBzdGFydCxcbiAgICAgICAgICBwb2ludDI6IGVuZFxuICAgICAgICB9LFxuICAgICAgICBzaG9ydEF4aXM6IHtcbiAgICAgICAgICBwb2ludDE6IHBlcnBlbmRpY3VsYXJTdGFydCxcbiAgICAgICAgICBwb2ludDI6IHBlcnBlbmRpY3VsYXJFbmRcbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0F4aXNMZW5ndGg6IGxvbmdlc3REaWFtZXRlcixcbiAgICAgICAgc2hvcnRBeGlzTGVuZ3RoOiBzaG9ydGVzdERpYW1ldGVyXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCaWRpcmVjdGlvbmFsJCQxO1xufSgpO1xuXG5CaWRpcmVjdGlvbmFsJDEudG9vbFR5cGUgPSBcIkJpZGlyZWN0aW9uYWxcIjtcbkJpZGlyZWN0aW9uYWwkMS51dGlsaXR5VG9vbFR5cGUgPSBcIkJpZGlyZWN0aW9uYWxcIjtcbkJpZGlyZWN0aW9uYWwkMS5USUQzMDBSZXByZXNlbnRhdGlvbiA9IEJpZGlyZWN0aW9uYWw7XG5NZWFzdXJlbWVudFJlcG9ydC5yZWdpc3RlclRvb2woQmlkaXJlY3Rpb25hbCQxKTtcblxuZnVuY3Rpb24gaW90YShuKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobik7XG4gIGZvcih2YXIgaT0wOyBpPG47ICsraSkge1xuICAgIHJlc3VsdFtpXSA9IGk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG52YXIgaW90YV8xID0gaW90YTtcblxuLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG52YXIgaXNCdWZmZXJfMSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlciQxKG9iaikgfHwgaXNTbG93QnVmZmVyJDEob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59O1xuXG5mdW5jdGlvbiBpc0J1ZmZlciQxIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciQxIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlciQxKG9iai5zbGljZSgwLCAwKSlcbn1cblxudmFyIGhhc1R5cGVkQXJyYXlzICA9ICgodHlwZW9mIEZsb2F0NjRBcnJheSkgIT09IFwidW5kZWZpbmVkXCIpO1xuXG5mdW5jdGlvbiBjb21wYXJlMXN0KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdXG59XG5cbmZ1bmN0aW9uIG9yZGVyKCkge1xuICB2YXIgc3RyaWRlID0gdGhpcy5zdHJpZGU7XG4gIHZhciB0ZXJtcyA9IG5ldyBBcnJheShzdHJpZGUubGVuZ3RoKTtcbiAgdmFyIGk7XG4gIGZvcihpPTA7IGk8dGVybXMubGVuZ3RoOyArK2kpIHtcbiAgICB0ZXJtc1tpXSA9IFtNYXRoLmFicyhzdHJpZGVbaV0pLCBpXTtcbiAgfVxuICB0ZXJtcy5zb3J0KGNvbXBhcmUxc3QpO1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHRlcm1zLmxlbmd0aCk7XG4gIGZvcihpPTA7IGk8cmVzdWx0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gdGVybXNbaV1bMV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBjb21waWxlQ29uc3RydWN0b3IoZHR5cGUsIGRpbWVuc2lvbikge1xuICB2YXIgY2xhc3NOYW1lID0gW1wiVmlld1wiLCBkaW1lbnNpb24sIFwiZFwiLCBkdHlwZV0uam9pbihcIlwiKTtcbiAgaWYoZGltZW5zaW9uIDwgMCkge1xuICAgIGNsYXNzTmFtZSA9IFwiVmlld19OaWxcIiArIGR0eXBlO1xuICB9XG4gIHZhciB1c2VHZXR0ZXJzID0gKGR0eXBlID09PSBcImdlbmVyaWNcIik7XG5cbiAgaWYoZGltZW5zaW9uID09PSAtMSkge1xuICAgIC8vU3BlY2lhbCBjYXNlIGZvciB0cml2aWFsIGFycmF5c1xuICAgIHZhciBjb2RlID1cbiAgICAgIFwiZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiKGEpe3RoaXMuZGF0YT1hO307XFxcbnZhciBwcm90bz1cIitjbGFzc05hbWUrXCIucHJvdG90eXBlO1xcXG5wcm90by5kdHlwZT0nXCIrZHR5cGUrXCInO1xcXG5wcm90by5pbmRleD1mdW5jdGlvbigpe3JldHVybiAtMX07XFxcbnByb3RvLnNpemU9MDtcXFxucHJvdG8uZGltZW5zaW9uPS0xO1xcXG5wcm90by5zaGFwZT1wcm90by5zdHJpZGU9cHJvdG8ub3JkZXI9W107XFxcbnByb3RvLmxvPXByb3RvLmhpPXByb3RvLnRyYW5zcG9zZT1wcm90by5zdGVwPVxcXG5mdW5jdGlvbigpe3JldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKHRoaXMuZGF0YSk7fTtcXFxucHJvdG8uZ2V0PXByb3RvLnNldD1mdW5jdGlvbigpe307XFxcbnByb3RvLnBpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH07XFxcbnJldHVybiBmdW5jdGlvbiBjb25zdHJ1Y3RfXCIrY2xhc3NOYW1lK1wiKGEpe3JldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKGEpO31cIjtcbiAgICB2YXIgcHJvY2VkdXJlID0gbmV3IEZ1bmN0aW9uKGNvZGUpO1xuICAgIHJldHVybiBwcm9jZWR1cmUoKVxuICB9IGVsc2UgaWYoZGltZW5zaW9uID09PSAwKSB7XG4gICAgLy9TcGVjaWFsIGNhc2UgZm9yIDBkIGFycmF5c1xuICAgIHZhciBjb2RlID1cbiAgICAgIFwiZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiKGEsZCkge1xcXG50aGlzLmRhdGEgPSBhO1xcXG50aGlzLm9mZnNldCA9IGRcXFxufTtcXFxudmFyIHByb3RvPVwiK2NsYXNzTmFtZStcIi5wcm90b3R5cGU7XFxcbnByb3RvLmR0eXBlPSdcIitkdHlwZStcIic7XFxcbnByb3RvLmluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub2Zmc2V0fTtcXFxucHJvdG8uZGltZW5zaW9uPTA7XFxcbnByb3RvLnNpemU9MTtcXFxucHJvdG8uc2hhcGU9XFxcbnByb3RvLnN0cmlkZT1cXFxucHJvdG8ub3JkZXI9W107XFxcbnByb3RvLmxvPVxcXG5wcm90by5oaT1cXFxucHJvdG8udHJhbnNwb3NlPVxcXG5wcm90by5zdGVwPWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9jb3B5KCkge1xcXG5yZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIih0aGlzLmRhdGEsdGhpcy5vZmZzZXQpXFxcbn07XFxcbnByb3RvLnBpY2s9ZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiX3BpY2soKXtcXFxucmV0dXJuIFRyaXZpYWxBcnJheSh0aGlzLmRhdGEpO1xcXG59O1xcXG5wcm90by52YWx1ZU9mPXByb3RvLmdldD1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfZ2V0KCl7XFxcbnJldHVybiBcIisodXNlR2V0dGVycyA/IFwidGhpcy5kYXRhLmdldCh0aGlzLm9mZnNldClcIiA6IFwidGhpcy5kYXRhW3RoaXMub2Zmc2V0XVwiKStcblwifTtcXFxucHJvdG8uc2V0PWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9zZXQodil7XFxcbnJldHVybiBcIisodXNlR2V0dGVycyA/IFwidGhpcy5kYXRhLnNldCh0aGlzLm9mZnNldCx2KVwiIDogXCJ0aGlzLmRhdGFbdGhpcy5vZmZzZXRdPXZcIikrXCJcXFxufTtcXFxucmV0dXJuIGZ1bmN0aW9uIGNvbnN0cnVjdF9cIitjbGFzc05hbWUrXCIoYSxiLGMsZCl7cmV0dXJuIG5ldyBcIitjbGFzc05hbWUrXCIoYSxkKX1cIjtcbiAgICB2YXIgcHJvY2VkdXJlID0gbmV3IEZ1bmN0aW9uKFwiVHJpdmlhbEFycmF5XCIsIGNvZGUpO1xuICAgIHJldHVybiBwcm9jZWR1cmUoQ0FDSEVEX0NPTlNUUlVDVE9SU1tkdHlwZV1bMF0pXG4gIH1cblxuICB2YXIgY29kZSA9IFtcIid1c2Ugc3RyaWN0J1wiXTtcblxuICAvL0NyZWF0ZSBjb25zdHJ1Y3RvciBmb3Igdmlld1xuICB2YXIgaW5kaWNlcyA9IGlvdGFfMShkaW1lbnNpb24pO1xuICB2YXIgYXJncyA9IGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIFwiaVwiK2kgfSk7XG4gIHZhciBpbmRleF9zdHIgPSBcInRoaXMub2Zmc2V0K1wiICsgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gXCJ0aGlzLnN0cmlkZVtcIiArIGkgKyBcIl0qaVwiICsgaVxuICAgICAgfSkuam9pbihcIitcIik7XG4gIHZhciBzaGFwZUFyZyA9IGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImJcIitpXG4gICAgfSkuam9pbihcIixcIik7XG4gIHZhciBzdHJpZGVBcmcgPSBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJjXCIraVxuICAgIH0pLmpvaW4oXCIsXCIpO1xuICBjb2RlLnB1c2goXG4gICAgXCJmdW5jdGlvbiBcIitjbGFzc05hbWUrXCIoYSxcIiArIHNoYXBlQXJnICsgXCIsXCIgKyBzdHJpZGVBcmcgKyBcIixkKXt0aGlzLmRhdGE9YVwiLFxuICAgICAgXCJ0aGlzLnNoYXBlPVtcIiArIHNoYXBlQXJnICsgXCJdXCIsXG4gICAgICBcInRoaXMuc3RyaWRlPVtcIiArIHN0cmlkZUFyZyArIFwiXVwiLFxuICAgICAgXCJ0aGlzLm9mZnNldD1kfDB9XCIsXG4gICAgXCJ2YXIgcHJvdG89XCIrY2xhc3NOYW1lK1wiLnByb3RvdHlwZVwiLFxuICAgIFwicHJvdG8uZHR5cGU9J1wiK2R0eXBlK1wiJ1wiLFxuICAgIFwicHJvdG8uZGltZW5zaW9uPVwiK2RpbWVuc2lvbik7XG5cbiAgLy92aWV3LnNpemU6XG4gIGNvZGUucHVzaChcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywnc2l6ZScse2dldDpmdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfc2l6ZSgpe1xcXG5yZXR1cm4gXCIraW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gXCJ0aGlzLnNoYXBlW1wiK2krXCJdXCIgfSkuam9pbihcIipcIiksXG5cIn19KVwiKTtcblxuICAvL3ZpZXcub3JkZXI6XG4gIGlmKGRpbWVuc2lvbiA9PT0gMSkge1xuICAgIGNvZGUucHVzaChcInByb3RvLm9yZGVyPVswXVwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb2RlLnB1c2goXCJPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sJ29yZGVyJyx7Z2V0OlwiKTtcbiAgICBpZihkaW1lbnNpb24gPCA0KSB7XG4gICAgICBjb2RlLnB1c2goXCJmdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfb3JkZXIoKXtcIik7XG4gICAgICBpZihkaW1lbnNpb24gPT09IDIpIHtcbiAgICAgICAgY29kZS5wdXNoKFwicmV0dXJuIChNYXRoLmFicyh0aGlzLnN0cmlkZVswXSk+TWF0aC5hYnModGhpcy5zdHJpZGVbMV0pKT9bMSwwXTpbMCwxXX19KVwiKTtcbiAgICAgIH0gZWxzZSBpZihkaW1lbnNpb24gPT09IDMpIHtcbiAgICAgICAgY29kZS5wdXNoKFxuXCJ2YXIgczA9TWF0aC5hYnModGhpcy5zdHJpZGVbMF0pLHMxPU1hdGguYWJzKHRoaXMuc3RyaWRlWzFdKSxzMj1NYXRoLmFicyh0aGlzLnN0cmlkZVsyXSk7XFxcbmlmKHMwPnMxKXtcXFxuaWYoczE+czIpe1xcXG5yZXR1cm4gWzIsMSwwXTtcXFxufWVsc2UgaWYoczA+czIpe1xcXG5yZXR1cm4gWzEsMiwwXTtcXFxufWVsc2V7XFxcbnJldHVybiBbMSwwLDJdO1xcXG59XFxcbn1lbHNlIGlmKHMwPnMyKXtcXFxucmV0dXJuIFsyLDAsMV07XFxcbn1lbHNlIGlmKHMyPnMxKXtcXFxucmV0dXJuIFswLDEsMl07XFxcbn1lbHNle1xcXG5yZXR1cm4gWzAsMiwxXTtcXFxufX19KVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29kZS5wdXNoKFwiT1JERVJ9KVwiKTtcbiAgICB9XG4gIH1cblxuICAvL3ZpZXcuc2V0KGkwLCAuLi4sIHYpOlxuICBjb2RlLnB1c2goXG5cInByb3RvLnNldD1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfc2V0KFwiK2FyZ3Muam9pbihcIixcIikrXCIsdil7XCIpO1xuICBpZih1c2VHZXR0ZXJzKSB7XG4gICAgY29kZS5wdXNoKFwicmV0dXJuIHRoaXMuZGF0YS5zZXQoXCIraW5kZXhfc3RyK1wiLHYpfVwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb2RlLnB1c2goXCJyZXR1cm4gdGhpcy5kYXRhW1wiK2luZGV4X3N0citcIl09dn1cIik7XG4gIH1cblxuICAvL3ZpZXcuZ2V0KGkwLCAuLi4pOlxuICBjb2RlLnB1c2goXCJwcm90by5nZXQ9ZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiX2dldChcIithcmdzLmpvaW4oXCIsXCIpK1wiKXtcIik7XG4gIGlmKHVzZUdldHRlcnMpIHtcbiAgICBjb2RlLnB1c2goXCJyZXR1cm4gdGhpcy5kYXRhLmdldChcIitpbmRleF9zdHIrXCIpfVwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb2RlLnB1c2goXCJyZXR1cm4gdGhpcy5kYXRhW1wiK2luZGV4X3N0citcIl19XCIpO1xuICB9XG5cbiAgLy92aWV3LmluZGV4OlxuICBjb2RlLnB1c2goXG4gICAgXCJwcm90by5pbmRleD1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfaW5kZXgoXCIsIGFyZ3Muam9pbigpLCBcIil7cmV0dXJuIFwiK2luZGV4X3N0citcIn1cIik7XG5cbiAgLy92aWV3LmhpKCk6XG4gIGNvZGUucHVzaChcInByb3RvLmhpPWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9oaShcIithcmdzLmpvaW4oXCIsXCIpK1wiKXtyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIih0aGlzLmRhdGEsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFtcIih0eXBlb2YgaVwiLGksXCIhPT0nbnVtYmVyJ3x8aVwiLGksXCI8MCk/dGhpcy5zaGFwZVtcIiwgaSwgXCJdOmlcIiwgaSxcInwwXCJdLmpvaW4oXCJcIilcbiAgICB9KS5qb2luKFwiLFwiKStcIixcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJ0aGlzLnN0cmlkZVtcIitpICsgXCJdXCJcbiAgICB9KS5qb2luKFwiLFwiKStcIix0aGlzLm9mZnNldCl9XCIpO1xuXG4gIC8vdmlldy5sbygpOlxuICB2YXIgYV92YXJzID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gXCJhXCIraStcIj10aGlzLnNoYXBlW1wiK2krXCJdXCIgfSk7XG4gIHZhciBjX3ZhcnMgPSBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBcImNcIitpK1wiPXRoaXMuc3RyaWRlW1wiK2krXCJdXCIgfSk7XG4gIGNvZGUucHVzaChcInByb3RvLmxvPWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9sbyhcIithcmdzLmpvaW4oXCIsXCIpK1wiKXt2YXIgYj10aGlzLm9mZnNldCxkPTAsXCIrYV92YXJzLmpvaW4oXCIsXCIpK1wiLFwiK2NfdmFycy5qb2luKFwiLFwiKSk7XG4gIGZvcih2YXIgaT0wOyBpPGRpbWVuc2lvbjsgKytpKSB7XG4gICAgY29kZS5wdXNoKFxuXCJpZih0eXBlb2YgaVwiK2krXCI9PT0nbnVtYmVyJyYmaVwiK2krXCI+PTApe1xcXG5kPWlcIitpK1wifDA7XFxcbmIrPWNcIitpK1wiKmQ7XFxcbmFcIitpK1wiLT1kfVwiKTtcbiAgfVxuICBjb2RlLnB1c2goXCJyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIih0aGlzLmRhdGEsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwiYVwiK2lcbiAgICB9KS5qb2luKFwiLFwiKStcIixcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJjXCIraVxuICAgIH0pLmpvaW4oXCIsXCIpK1wiLGIpfVwiKTtcblxuICAvL3ZpZXcuc3RlcCgpOlxuICBjb2RlLnB1c2goXCJwcm90by5zdGVwPWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9zdGVwKFwiK2FyZ3Muam9pbihcIixcIikrXCIpe3ZhciBcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJhXCIraStcIj10aGlzLnNoYXBlW1wiK2krXCJdXCJcbiAgICB9KS5qb2luKFwiLFwiKStcIixcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJiXCIraStcIj10aGlzLnN0cmlkZVtcIitpK1wiXVwiXG4gICAgfSkuam9pbihcIixcIikrXCIsYz10aGlzLm9mZnNldCxkPTAsY2VpbD1NYXRoLmNlaWxcIik7XG4gIGZvcih2YXIgaT0wOyBpPGRpbWVuc2lvbjsgKytpKSB7XG4gICAgY29kZS5wdXNoKFxuXCJpZih0eXBlb2YgaVwiK2krXCI9PT0nbnVtYmVyJyl7XFxcbmQ9aVwiK2krXCJ8MDtcXFxuaWYoZDwwKXtcXFxuYys9YlwiK2krXCIqKGFcIitpK1wiLTEpO1xcXG5hXCIraStcIj1jZWlsKC1hXCIraStcIi9kKVxcXG59ZWxzZXtcXFxuYVwiK2krXCI9Y2VpbChhXCIraStcIi9kKVxcXG59XFxcbmJcIitpK1wiKj1kXFxcbn1cIik7XG4gIH1cbiAgY29kZS5wdXNoKFwicmV0dXJuIG5ldyBcIitjbGFzc05hbWUrXCIodGhpcy5kYXRhLFwiK1xuICAgIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImFcIiArIGlcbiAgICB9KS5qb2luKFwiLFwiKStcIixcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJiXCIgKyBpXG4gICAgfSkuam9pbihcIixcIikrXCIsYyl9XCIpO1xuXG4gIC8vdmlldy50cmFuc3Bvc2UoKTpcbiAgdmFyIHRTaGFwZSA9IG5ldyBBcnJheShkaW1lbnNpb24pO1xuICB2YXIgdFN0cmlkZSA9IG5ldyBBcnJheShkaW1lbnNpb24pO1xuICBmb3IodmFyIGk9MDsgaTxkaW1lbnNpb247ICsraSkge1xuICAgIHRTaGFwZVtpXSA9IFwiYVtpXCIraStcIl1cIjtcbiAgICB0U3RyaWRlW2ldID0gXCJiW2lcIitpK1wiXVwiO1xuICB9XG4gIGNvZGUucHVzaChcInByb3RvLnRyYW5zcG9zZT1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfdHJhbnNwb3NlKFwiK2FyZ3MrXCIpe1wiK1xuICAgIGFyZ3MubWFwKGZ1bmN0aW9uKG4saWR4KSB7IHJldHVybiBuICsgXCI9KFwiICsgbiArIFwiPT09dW5kZWZpbmVkP1wiICsgaWR4ICsgXCI6XCIgKyBuICsgXCJ8MClcIn0pLmpvaW4oXCI7XCIpLFxuICAgIFwidmFyIGE9dGhpcy5zaGFwZSxiPXRoaXMuc3RyaWRlO3JldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKHRoaXMuZGF0YSxcIit0U2hhcGUuam9pbihcIixcIikrXCIsXCIrdFN0cmlkZS5qb2luKFwiLFwiKStcIix0aGlzLm9mZnNldCl9XCIpO1xuXG4gIC8vdmlldy5waWNrKCk6XG4gIGNvZGUucHVzaChcInByb3RvLnBpY2s9ZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiX3BpY2soXCIrYXJncytcIil7dmFyIGE9W10sYj1bXSxjPXRoaXMub2Zmc2V0XCIpO1xuICBmb3IodmFyIGk9MDsgaTxkaW1lbnNpb247ICsraSkge1xuICAgIGNvZGUucHVzaChcImlmKHR5cGVvZiBpXCIraStcIj09PSdudW1iZXInJiZpXCIraStcIj49MCl7Yz0oYyt0aGlzLnN0cmlkZVtcIitpK1wiXSppXCIraStcIil8MH1lbHNle2EucHVzaCh0aGlzLnNoYXBlW1wiK2krXCJdKTtiLnB1c2godGhpcy5zdHJpZGVbXCIraStcIl0pfVwiKTtcbiAgfVxuICBjb2RlLnB1c2goXCJ2YXIgY3Rvcj1DVE9SX0xJU1RbYS5sZW5ndGgrMV07cmV0dXJuIGN0b3IodGhpcy5kYXRhLGEsYixjKX1cIik7XG5cbiAgLy9BZGQgcmV0dXJuIHN0YXRlbWVudFxuICBjb2RlLnB1c2goXCJyZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0X1wiK2NsYXNzTmFtZStcIihkYXRhLHNoYXBlLHN0cmlkZSxvZmZzZXQpe3JldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKGRhdGEsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwic2hhcGVbXCIraStcIl1cIlxuICAgIH0pLmpvaW4oXCIsXCIpK1wiLFwiK1xuICAgIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcInN0cmlkZVtcIitpK1wiXVwiXG4gICAgfSkuam9pbihcIixcIikrXCIsb2Zmc2V0KX1cIik7XG5cbiAgLy9Db21waWxlIHByb2NlZHVyZVxuICB2YXIgcHJvY2VkdXJlID0gbmV3IEZ1bmN0aW9uKFwiQ1RPUl9MSVNUXCIsIFwiT1JERVJcIiwgY29kZS5qb2luKFwiXFxuXCIpKTtcbiAgcmV0dXJuIHByb2NlZHVyZShDQUNIRURfQ09OU1RSVUNUT1JTW2R0eXBlXSwgb3JkZXIpXG59XG5cbmZ1bmN0aW9uIGFycmF5RFR5cGUoZGF0YSkge1xuICBpZihpc0J1ZmZlcl8xKGRhdGEpKSB7XG4gICAgcmV0dXJuIFwiYnVmZmVyXCJcbiAgfVxuICBpZihoYXNUeXBlZEFycmF5cykge1xuICAgIHN3aXRjaChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSkpIHtcbiAgICAgIGNhc2UgXCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIjpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQ2NFwiXG4gICAgICBjYXNlIFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcImZsb2F0MzJcIlxuICAgICAgY2FzZSBcIltvYmplY3QgSW50OEFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJpbnQ4XCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IEludDE2QXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcImludDE2XCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IEludDMyQXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcImludDMyXCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcInVpbnQ4XCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJ1aW50MTZcIlxuICAgICAgY2FzZSBcIltvYmplY3QgVWludDMyQXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcInVpbnQzMlwiXG4gICAgICBjYXNlIFwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIjpcbiAgICAgICAgcmV0dXJuIFwidWludDhfY2xhbXBlZFwiXG4gICAgfVxuICB9XG4gIGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gXCJhcnJheVwiXG4gIH1cbiAgcmV0dXJuIFwiZ2VuZXJpY1wiXG59XG5cbnZhciBDQUNIRURfQ09OU1RSVUNUT1JTID0ge1xuICBcImZsb2F0MzJcIjpbXSxcbiAgXCJmbG9hdDY0XCI6W10sXG4gIFwiaW50OFwiOltdLFxuICBcImludDE2XCI6W10sXG4gIFwiaW50MzJcIjpbXSxcbiAgXCJ1aW50OFwiOltdLFxuICBcInVpbnQxNlwiOltdLFxuICBcInVpbnQzMlwiOltdLFxuICBcImFycmF5XCI6W10sXG4gIFwidWludDhfY2xhbXBlZFwiOltdLFxuICBcImJ1ZmZlclwiOltdLFxuICBcImdlbmVyaWNcIjpbXVxufVxuXG47XG5mdW5jdGlvbiB3cmFwcGVkTkRBcnJheUN0b3IoZGF0YSwgc2hhcGUsIHN0cmlkZSwgb2Zmc2V0KSB7XG4gIGlmKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdG9yID0gQ0FDSEVEX0NPTlNUUlVDVE9SUy5hcnJheVswXTtcbiAgICByZXR1cm4gY3RvcihbXSlcbiAgfSBlbHNlIGlmKHR5cGVvZiBkYXRhID09PSBcIm51bWJlclwiKSB7XG4gICAgZGF0YSA9IFtkYXRhXTtcbiAgfVxuICBpZihzaGFwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2hhcGUgPSBbIGRhdGEubGVuZ3RoIF07XG4gIH1cbiAgdmFyIGQgPSBzaGFwZS5sZW5ndGg7XG4gIGlmKHN0cmlkZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaWRlID0gbmV3IEFycmF5KGQpO1xuICAgIGZvcih2YXIgaT1kLTEsIHN6PTE7IGk+PTA7IC0taSkge1xuICAgICAgc3RyaWRlW2ldID0gc3o7XG4gICAgICBzeiAqPSBzaGFwZVtpXTtcbiAgICB9XG4gIH1cbiAgaWYob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBvZmZzZXQgPSAwO1xuICAgIGZvcih2YXIgaT0wOyBpPGQ7ICsraSkge1xuICAgICAgaWYoc3RyaWRlW2ldIDwgMCkge1xuICAgICAgICBvZmZzZXQgLT0gKHNoYXBlW2ldLTEpKnN0cmlkZVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGR0eXBlID0gYXJyYXlEVHlwZShkYXRhKTtcbiAgdmFyIGN0b3JfbGlzdCA9IENBQ0hFRF9DT05TVFJVQ1RPUlNbZHR5cGVdO1xuICB3aGlsZShjdG9yX2xpc3QubGVuZ3RoIDw9IGQrMSkge1xuICAgIGN0b3JfbGlzdC5wdXNoKGNvbXBpbGVDb25zdHJ1Y3RvcihkdHlwZSwgY3Rvcl9saXN0Lmxlbmd0aC0xKSk7XG4gIH1cbiAgdmFyIGN0b3IgPSBjdG9yX2xpc3RbZCsxXTtcbiAgcmV0dXJuIGN0b3IoZGF0YSwgc2hhcGUsIHN0cmlkZSwgb2Zmc2V0KVxufVxuXG52YXIgbmRhcnJheSA9IHdyYXBwZWROREFycmF5Q3RvcjtcblxuLyoqXG4gKiBjcm9zc1Byb2R1Y3QzRCAtIFJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgYSBhbmQgYi5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJbM119IGEgVmVjdG9yIGEuXG4gKiBAcGFyYW0gIHtOdW1iZXJbM119IGIgVmVjdG9yIGIuXG4gKiBAcmV0dXJuIHtOdW1iZXJbM119ICAgVGhlIGNyb3NzIHByb2R1Y3QuXG4gKi9cbmZ1bmN0aW9uIGNyb3NzUHJvZHVjdDNEIChhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbnZhciBmbGlwSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgPSB7XG4gIC8qKlxuICAgKiBoOiBGbGlwcyBJbWFnZU9yaWVudGF0aW9uUGF0aWVudCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXG4gICAqIEBwYXJhbSB7TnVtYmVyWzZdfSBpb3AgLSBJbWFnZU9yaWVudGF0aW9uUGF0aWVudFxuICAgKiBAcmV0dXJucyB7TnVtYmVyWzZdfSBUaGUgdHJhbnNmb3JtZWQgSW1hZ2VPcmllbnRhdGlvblBhdGllbnRcbiAgICovXG4gIGg6IGZ1bmN0aW9uIGgoaW9wKSB7XG4gICAgcmV0dXJuIFtpb3BbMF0sIGlvcFsxXSwgaW9wWzJdLCAtaW9wWzNdLCAtaW9wWzRdLCAtaW9wWzVdXTtcbiAgfSxcblxuICAvKipcbiAgICogdjogRmxpcHMgSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgaW4gdGhlIHZlcnRpY2FsIGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHtOdW1iZXJbNl19IGlvcCAtIEltYWdlT3JpZW50YXRpb25QYXRpZW50XG4gICAqIEByZXR1cm5zIHtOdW1iZXJbNl19IFRoZSB0cmFuc2Zvcm1lZCBJbWFnZU9yaWVudGF0aW9uUGF0aWVudFxuICAgKi9cbiAgdjogZnVuY3Rpb24gdihpb3ApIHtcbiAgICByZXR1cm4gWy1pb3BbMF0sIC1pb3BbMV0sIC1pb3BbMl0sIGlvcFszXSwgaW9wWzRdLCBpb3BbNV1dO1xuICB9LFxuXG4gIC8qKlxuICAgKiBodjogRmxpcHMgSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgaW4gdGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGRpcmVjdGlvbnMuXG4gICAqIEBwYXJhbSB7TnVtYmVyWzZdfSBpb3AgLSBJbWFnZU9yaWVudGF0aW9uUGF0aWVudFxuICAgKiBAcmV0dXJucyB7TnVtYmVyWzZdfSBUaGUgdHJhbnNmb3JtZWQgSW1hZ2VPcmllbnRhdGlvblBhdGllbnRcbiAgICovXG4gIGh2OiBmdW5jdGlvbiBodihpb3ApIHtcbiAgICByZXR1cm4gWy1pb3BbMF0sIC1pb3BbMV0sIC1pb3BbMl0sIC1pb3BbM10sIC1pb3BbNF0sIC1pb3BbNV1dO1xuICB9XG59O1xuXG4vKipcbiAqIHJvdGF0ZVZlY3RvckFyb3VuZFVuaXRWZWN0b3IgLSBSb3RhdGVzIHZlY3RvciB2IGFyb3VuZCB1bml0IHZlY3RvciBrIHVzaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUm9kcmlndWVzJyByb3RhdGlvbiBmb3JtdWxhLlxuICpcbiAqIEBwYXJhbSAge051bWJlclszXX0gdiAgICAgVGhlIHZlY3RvciB0byByb3RhdGUuXG4gKiBAcGFyYW0gIHtOdW1iZXJbM119IGsgICAgIFRoZSB1bml0IHZlY3RvciBvZiB0aGUgYXhpcyBvZiByb3RhdGlvbi5cbiAqIEBwYXJhbSAge051bWJlcn0gdGhldGEgICAgVGhlIHJvdGF0aW9uIG1hZ25pdHVkZSBpbiByYWRpYW5zLlxuICogQHJldHVybiB7TnVtYmVyWzNdfSAgICAgICBUaGUgcm90YXRlZCB2IHZlY3Rvci5cbiAqL1xuXG5mdW5jdGlvbiByb3RhdGVWZWN0b3JBcm91bmRVbml0VmVjdG9yICh2LCBrLCB0aGV0YSkge1xuICB2YXIgY29zVGhldGEgPSBNYXRoLmNvcyh0aGV0YSk7XG4gIHZhciBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcbiAgdmFyIG9uZU1pbnVzQ29zVGhldGEgPSAxLjAgLSBjb3NUaGV0YTtcbiAgdmFyIGtkb3R2ID0ga1swXSAqIHZbMF0gKyBrWzFdICogdlsxXSArIGtbMl0gKiB2WzJdO1xuICB2YXIgdlJvdCA9IFtdO1xuICB2YXIga3h2ID0gY3Jvc3NQcm9kdWN0M0Qoaywgdik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMjsgaSsrKSB7XG4gICAgdlJvdFtpXSA9IHZbaV0gKiBjb3NUaGV0YSArIGt4dltpXSAqIHNpblRoZXRhICsga1tpXSAqIGtkb3R2ICogb25lTWludXNDb3NUaGV0YTtcbiAgfVxuXG4gIHJldHVybiB2Um90O1xufVxuXG4vKipcbiAqIHJvdGF0ZURpcmVjdGlvbkNvc2luZXNJblBsYW5lIC0gcm90YXRlcyB0aGUgcm93IGFuZCBjb2x1bW4gY29zaW5lcyBhcm91bmRcbiAqIHRoZWlyIG5vcm1hbCBieSBhbmdsZSB0aGV0YS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJbNl19IGlvcCAgIFRoZSByb3cgKDAuLjIpIGFuIGNvbHVtbiAoMy4uNSkgZGlyZWN0aW9uIGNvc2luZXMuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHRoZXRhIFRoZSByb3RhdGlvbiBtYWduaXR1ZGUgaW4gcmFkaWFucy5cbiAqIEByZXR1cm4ge051bWJlcls2XX0gICAgICAgVGhlIHJvdGF0ZSByb3cgKDAuLjIpIGFuZCBjb2x1bW4gKDMuLjUpIGRpcmVjdGlvbiBjb3NpbmVzLlxuICovXG5cbmZ1bmN0aW9uIHJvdGF0ZURpcmVjdGlvbkNvc2luZXNJblBsYW5lIChpb3AsIHRoZXRhKSB7XG4gIHZhciByID0gW2lvcFswXSwgaW9wWzFdLCBpb3BbMl1dO1xuICB2YXIgYyA9IFtpb3BbM10sIGlvcFs0XSwgaW9wWzVdXTtcbiAgdmFyIHJ4YyA9IGNyb3NzUHJvZHVjdDNEKHIsIGMpO1xuICB2YXIgclJvdCA9IHJvdGF0ZVZlY3RvckFyb3VuZFVuaXRWZWN0b3IociwgcnhjLCB0aGV0YSk7XG4gIHZhciBjUm90ID0gY3Jvc3NQcm9kdWN0M0QocnhjLCByUm90KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgIGNSb3RbaV0gKj0gLTEuMDtcbiAgfVxuXG4gIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHJSb3QpLCBfdG9Db25zdW1hYmxlQXJyYXkoY1JvdCkpO1xufVxuXG52YXIgZmxpcE1hdHJpeDJEID0ge1xuICBoOiBoLFxuICB2OiB2XG59O1xuLyoqXG4gKiBmbGlwTWF0cml4MkQuaCAtIEZsaXBzIGEgMkQgbWF0cml4IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtOZGFycnl9IG1hdHJpeCBUaGUgbWF0cml4IHRvIGZsaXAuXG4gKiBAcmV0dXJuIHtOZGFycnl9ICAgVGhlIGZsaXBwZWQgbWF0cml4LlxuICovXG5cbmZ1bmN0aW9uIGgobWF0cml4KSB7XG4gIHZhciBfbWF0cml4JHNoYXBlID0gX3NsaWNlZFRvQXJyYXkobWF0cml4LnNoYXBlLCAyKSxcbiAgICAgIHJvd3MgPSBfbWF0cml4JHNoYXBlWzBdLFxuICAgICAgY29scyA9IF9tYXRyaXgkc2hhcGVbMV07XG5cbiAgdmFyIHJlc3VsdCA9IG5kYXJyYXkobmV3IFVpbnQ4QXJyYXkocm93cyAqIGNvbHMpLCBbcm93cywgY29sc10pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgIHJlc3VsdC5zZXQoaSwgaiwgbWF0cml4LmdldChpLCBjb2xzIC0gMSAtIGopKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBmbGlwTWF0cml4MkQuaCAtIEZsaXBzIGEgMkQgbWF0cml4IGluIHRoZSB2ZXJ0aWNhbCBkaXJlY3Rpb24uXG4gKlxuICogQHBhcmFtICB7TmRhcnJ5fSBtYXRyaXggVGhlIG1hdHJpeCB0byBmbGlwLlxuICogQHJldHVybiB7TmRhcnJ5fSAgIFRoZSBmbGlwcGVkIG1hdHJpeC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHYobWF0cml4KSB7XG4gIHZhciBfbWF0cml4JHNoYXBlMiA9IF9zbGljZWRUb0FycmF5KG1hdHJpeC5zaGFwZSwgMiksXG4gICAgICByb3dzID0gX21hdHJpeCRzaGFwZTJbMF0sXG4gICAgICBjb2xzID0gX21hdHJpeCRzaGFwZTJbMV07XG5cbiAgdmFyIHJlc3VsdCA9IG5kYXJyYXkobmV3IFVpbnQ4QXJyYXkocm93cyAqIGNvbHMpLCBbcm93cywgY29sc10pO1xuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgY29sczsgaisrKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIHJlc3VsdC5zZXQoaSwgaiwgbWF0cml4LmdldChyb3dzIC0gMSAtIGksIGopKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIGFub255bW91cyBmdW5jdGlvbiAtIFJvdGF0ZXMgYSBtYXRyaXggYnkgOTAgZGVncmVlcy5cbiAqXG4gKiBAcGFyYW0gIHtOZGFycmF5fSBtYXRyaXggVGhlIG1hdHJpeCB0byByb3RhdGUuXG4gKiBAcmV0dXJuIHtOZGFycnl9ICAgICAgICBUaGUgcm90YXRlZCBtYXRyaXguXG4gKi9cblxuZnVuY3Rpb24gcm90YXRlTWF0cml4OTAyRCAobWF0cml4KSB7XG4gIHZhciBfbWF0cml4JHNoYXBlID0gX3NsaWNlZFRvQXJyYXkobWF0cml4LnNoYXBlLCAyKSxcbiAgICAgIHJvd3MgPSBfbWF0cml4JHNoYXBlWzBdLFxuICAgICAgY29scyA9IF9tYXRyaXgkc2hhcGVbMV07IC8vZGVidWdQcmludE1hdHJpeChtYXRyaXgpO1xuXG5cbiAgdmFyIHJlc3VsdCA9IG5kYXJyYXkobmV3IFVpbnQ4QXJyYXkocm93cyAqIGNvbHMpLCBbY29scywgcm93c10pO1xuICB2YXIgcmVzdWx0Q29sc01pbnVzMSA9IHJlc3VsdC5zaGFwZVsxXSAtIDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvbHM7IGorKykge1xuICAgICAgcmVzdWx0LnNldChqLCByZXN1bHRDb2xzTWludXMxIC0gaSwgbWF0cml4LmdldChpLCBqKSk7XG4gICAgfVxuICB9IC8vZGVidWdQcmludE1hdHJpeChyZXN1bHQpO1xuXG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFNlZ21lbnRhdGlvbiQxID0ge1xuICBnZW5lcmF0ZVNlZ21lbnRhdGlvbjogZ2VuZXJhdGVTZWdtZW50YXRpb24sXG4gIGdlbmVyYXRlVG9vbFN0YXRlOiBnZW5lcmF0ZVRvb2xTdGF0ZVxufTtcbi8qKlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJydXNoRGF0YVxuICogQHByb3BlcnR5IHtPYmplY3R9IHRvb2xTdGF0ZSAtIFRoZSBjb3JuZXJzdG9uZVRvb2xzIGdsb2JhbCB0b29sU3RhdGUuXG4gKiBAcHJvcGVydHkge09iamVjdFtdfSBzZWdtZW50cyAtIFRoZSBjb3JuZXJzdG9uZVRvb2xzIHNlZ21lbnQgbWV0YWRhdGEgdGhhdCBjb3JyZXNwb25kcyB0byB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzSW5zdGFuY2VVaWQuXG4gKi9cblxuLyoqXG4gKiBnZW5lcmF0ZVNlZ21lbnRhdGlvbiAtIEdlbmVyYXRlcyBjb3JuZXJzdG9uZVRvb2xzIGJydXNoIGRhdGEsIGdpdmVuIGEgc3RhY2sgb2ZcbiAqIGltYWdlSWRzLCBpbWFnZXMgYW5kIHRoZSBjb3JuZXJzdG9uZVRvb2xzIGJydXNoRGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gaW1hZ2VzICAgIEFuIGFycmF5IG9mIHRoZSBjb3JuZXJzdG9uZSBpbWFnZSBvYmplY3RzLlxuICogQHBhcmFtICB7QnJ1c2hEYXRhfSBicnVzaERhdGEgYW5kIG9iamVjdCBjb250YWluaW5nIHRoZSBicnVzaERhdGEuXG4gKiBAcmV0dXJucyB7dHlwZX0gICAgICAgICAgIGRlc2NyaXB0aW9uXG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdGVTZWdtZW50YXRpb24oaW1hZ2VzLCBicnVzaERhdGEpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICBpbmNsdWRlU2xpY2VTcGFjaW5nOiB0cnVlXG4gIH07XG4gIHZhciB0b29sU3RhdGUgPSBicnVzaERhdGEudG9vbFN0YXRlLFxuICAgICAgc2VnbWVudHMgPSBicnVzaERhdGEuc2VnbWVudHM7IC8vIENhbGN1bGF0ZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZGF0YSBjdWJlLlxuXG4gIHZhciBpbWFnZTAgPSBpbWFnZXNbMF07XG4gIHZhciBkaW1zID0ge1xuICAgIHg6IGltYWdlMC5jb2x1bW5zLFxuICAgIHk6IGltYWdlMC5yb3dzLFxuICAgIHo6IGltYWdlcy5sZW5ndGhcbiAgfTtcbiAgZGltcy54eSA9IGRpbXMueCAqIGRpbXMueTtcblxuICB2YXIgbnVtU2VnbWVudHMgPSBfZ2V0U2VnQ291bnQoc2VnLCBzZWdtZW50cyk7XG5cbiAgaWYgKCFudW1TZWdtZW50cykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNlZ21lbnRzIHRvIGV4cG9ydCFcIik7XG4gIH1cblxuICB2YXIgaXNNdWx0aWZyYW1lID0gaW1hZ2UwLmltYWdlSWQuaW5jbHVkZXMoXCI/ZnJhbWVcIik7XG5cbiAgdmFyIHNlZyA9IF9jcmVhdGVTZWdGcm9tSW1hZ2VzKGltYWdlcywgaXNNdWx0aWZyYW1lLCBvcHRpb25zKTtcblxuICB2YXIgX2dldE51bWJlck9mRnJhbWVzUGVyID0gX2dldE51bWJlck9mRnJhbWVzUGVyU2VnbWVudCh0b29sU3RhdGUsIGltYWdlcywgc2VnbWVudHMpLFxuICAgICAgcmVmZXJlbmNlZEZyYW1lc1BlclNlZ21lbnQgPSBfZ2V0TnVtYmVyT2ZGcmFtZXNQZXIucmVmZXJlbmNlZEZyYW1lc1BlclNlZ21lbnQsXG4gICAgICBzZWdtZW50SW5kaWNpZXMgPSBfZ2V0TnVtYmVyT2ZGcmFtZXNQZXIuc2VnbWVudEluZGljaWVzO1xuXG4gIHZhciBOdW1iZXJPZkZyYW1lcyA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWZlcmVuY2VkRnJhbWVzUGVyU2VnbWVudC5sZW5ndGg7IGkrKykge1xuICAgIE51bWJlck9mRnJhbWVzICs9IHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50W2ldLmxlbmd0aDtcbiAgfVxuXG4gIHNlZy5zZXROdW1iZXJPZkZyYW1lcyhOdW1iZXJPZkZyYW1lcyk7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNlZ21lbnRJbmRpY2llcy5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgc2VnbWVudEluZGV4ID0gc2VnbWVudEluZGljaWVzW19pXTtcbiAgICB2YXIgcmVmZXJlbmNlZEZyYW1lSW5kaWNpZXMgPSByZWZlcmVuY2VkRnJhbWVzUGVyU2VnbWVudFtfaV07IC8vIEZyYW1lIG51bWJlcnMgc3RhcnQgZnJvbSAxLlxuXG4gICAgdmFyIHJlZmVyZW5jZWRGcmFtZU51bWJlcnMgPSByZWZlcmVuY2VkRnJhbWVJbmRpY2llcy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50ICsgMTtcbiAgICB9KTtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW3NlZ21lbnRJbmRleF07XG4gICAgc2VnLmFkZFNlZ21lbnQoc2VnbWVudCwgX2V4dHJhY3RDb3JuZXJzdG9uZVRvb2xzUGl4ZWxEYXRhKHNlZ21lbnRJbmRleCwgcmVmZXJlbmNlZEZyYW1lSW5kaWNpZXMsIHRvb2xTdGF0ZSwgaW1hZ2VzLCBkaW1zKSwgcmVmZXJlbmNlZEZyYW1lTnVtYmVycyk7XG4gIH1cblxuICBzZWcuYml0UGFja1BpeGVsRGF0YSgpO1xuICB2YXIgc2VnQmxvYiA9IGRhdGFzZXRUb0Jsb2Ioc2VnLmRhdGFzZXQpO1xuICByZXR1cm4gc2VnQmxvYjtcbn1cblxuZnVuY3Rpb24gX2V4dHJhY3RDb3JuZXJzdG9uZVRvb2xzUGl4ZWxEYXRhKHNlZ21lbnRJbmRleCwgcmVmZXJlbmNlZEZyYW1lcywgdG9vbFN0YXRlLCBpbWFnZXMsIGRpbXMpIHtcbiAgdmFyIHBpeGVsRGF0YSA9IG5ldyBVaW50OEFycmF5KGRpbXMueHkgKiByZWZlcmVuY2VkRnJhbWVzLmxlbmd0aCk7XG4gIHZhciBwaXhlbERhdGFJbmRleCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWZlcmVuY2VkRnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZyYW1lID0gcmVmZXJlbmNlZEZyYW1lc1tpXTtcbiAgICB2YXIgaW1hZ2VJZCA9IGltYWdlc1tmcmFtZV0uaW1hZ2VJZDtcbiAgICB2YXIgaW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlID0gdG9vbFN0YXRlW2ltYWdlSWRdO1xuICAgIHZhciBicnVzaFBpeGVsRGF0YSA9IGltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZS5icnVzaC5kYXRhW3NlZ21lbnRJbmRleF0ucGl4ZWxEYXRhO1xuXG4gICAgZm9yICh2YXIgcCA9IDA7IHAgPCBicnVzaFBpeGVsRGF0YS5sZW5ndGg7IHArKykge1xuICAgICAgcGl4ZWxEYXRhW3BpeGVsRGF0YUluZGV4XSA9IGJydXNoUGl4ZWxEYXRhW3BdO1xuICAgICAgcGl4ZWxEYXRhSW5kZXgrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGl4ZWxEYXRhO1xufVxuXG5mdW5jdGlvbiBfZ2V0TnVtYmVyT2ZGcmFtZXNQZXJTZWdtZW50KHRvb2xTdGF0ZSwgaW1hZ2VzLCBzZWdtZW50cykge1xuICB2YXIgc2VnbWVudEluZGljaWVzID0gW107XG4gIHZhciByZWZlcmVuY2VkRnJhbWVzUGVyU2VnbWVudCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc2VnbWVudHNbaV0pIHtcbiAgICAgIHNlZ21lbnRJbmRpY2llcy5wdXNoKGkpO1xuICAgICAgcmVmZXJlbmNlZEZyYW1lc1BlclNlZ21lbnQucHVzaChbXSk7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgeiA9IDA7IHogPCBpbWFnZXMubGVuZ3RoOyB6KyspIHtcbiAgICB2YXIgaW1hZ2VJZCA9IGltYWdlc1t6XS5pbWFnZUlkO1xuICAgIHZhciBpbWFnZUlkU3BlY2lmaWNUb29sU3RhdGUgPSB0b29sU3RhdGVbaW1hZ2VJZF07XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzZWdtZW50SW5kaWNpZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIHNlZ0lkeCA9IHNlZ21lbnRJbmRpY2llc1tfaTJdO1xuXG4gICAgICBpZiAoaW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlICYmIGltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZS5icnVzaCAmJiBpbWFnZUlkU3BlY2lmaWNUb29sU3RhdGUuYnJ1c2guZGF0YSAmJiBpbWFnZUlkU3BlY2lmaWNUb29sU3RhdGUuYnJ1c2guZGF0YVtzZWdJZHhdICYmIGltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZS5icnVzaC5kYXRhW3NlZ0lkeF0ucGl4ZWxEYXRhKSB7XG4gICAgICAgIHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50W19pMl0ucHVzaCh6KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50OiByZWZlcmVuY2VkRnJhbWVzUGVyU2VnbWVudCxcbiAgICBzZWdtZW50SW5kaWNpZXM6IHNlZ21lbnRJbmRpY2llc1xuICB9O1xufVxuXG5mdW5jdGlvbiBfZ2V0U2VnQ291bnQoc2VnLCBzZWdtZW50cykge1xuICB2YXIgbnVtU2VnbWVudHMgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc2VnbWVudHNbaV0pIHtcbiAgICAgIG51bVNlZ21lbnRzKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bVNlZ21lbnRzO1xufVxuLyoqXG4gKiBfY3JlYXRlU2VnRnJvbUltYWdlcyAtIGRlc2NyaXB0aW9uXG4gKlxuICogQHBhcmFtICB7T2JqZWN0W119IGltYWdlcyAgICBBbiBhcnJheSBvZiB0aGUgY29ybmVyc3RvbmUgaW1hZ2Ugb2JqZWN0cy5cbiAqIEBwYXJhbSAge0Jvb2xlYW59IGlzTXVsdGlmcmFtZSBXaGV0aGVyIHRoZSBpbWFnZXMgYXJlIG11bHRpZnJhbWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgICAgICAgICAgICAgVGhlIFNlZyBkZXJpdmVkIGRhdGFTZXQuXG4gKi9cblxuXG5mdW5jdGlvbiBfY3JlYXRlU2VnRnJvbUltYWdlcyhpbWFnZXMsIGlzTXVsdGlmcmFtZSwgb3B0aW9ucykge1xuICB2YXIgZGF0YXNldHMgPSBbXTtcblxuICBpZiAoaXNNdWx0aWZyYW1lKSB7XG4gICAgdmFyIGltYWdlID0gaW1hZ2VzWzBdO1xuICAgIHZhciBhcnJheUJ1ZmZlciA9IGltYWdlLmRhdGEuYnl0ZUFycmF5LmJ1ZmZlcjtcbiAgICB2YXIgZGljb21EYXRhID0gRGljb21NZXNzYWdlLnJlYWRGaWxlKGFycmF5QnVmZmVyKTtcbiAgICB2YXIgZGF0YXNldCA9IERpY29tTWV0YURpY3Rpb25hcnkubmF0dXJhbGl6ZURhdGFzZXQoZGljb21EYXRhLmRpY3QpO1xuICAgIGRhdGFzZXQuX21ldGEgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hbWlmeURhdGFzZXQoZGljb21EYXRhLm1ldGEpO1xuICAgIGRhdGFzZXRzLnB1c2goZGF0YXNldCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBfaW1hZ2UgPSBpbWFnZXNbaV07XG4gICAgICB2YXIgX2FycmF5QnVmZmVyID0gX2ltYWdlLmRhdGEuYnl0ZUFycmF5LmJ1ZmZlcjtcblxuICAgICAgdmFyIF9kaWNvbURhdGEgPSBEaWNvbU1lc3NhZ2UucmVhZEZpbGUoX2FycmF5QnVmZmVyKTtcblxuICAgICAgdmFyIF9kYXRhc2V0ID0gRGljb21NZXRhRGljdGlvbmFyeS5uYXR1cmFsaXplRGF0YXNldChfZGljb21EYXRhLmRpY3QpO1xuXG4gICAgICBfZGF0YXNldC5fbWV0YSA9IERpY29tTWV0YURpY3Rpb25hcnkubmFtaWZ5RGF0YXNldChfZGljb21EYXRhLm1ldGEpO1xuICAgICAgZGF0YXNldHMucHVzaChfZGF0YXNldCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG11bHRpZnJhbWUgPSBOb3JtYWxpemVyLm5vcm1hbGl6ZVRvRGF0YXNldChkYXRhc2V0cyk7XG4gIHJldHVybiBuZXcgU2VnbWVudGF0aW9uKFttdWx0aWZyYW1lXSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIGdlbmVyYXRlVG9vbFN0YXRlIC0gR2l2ZW4gYSBzZXQgb2YgY29ybnJzdG9uZVRvb2xzIGltYWdlSWRzIGFuZCBhIFNlZ21lbnRhdGlvbiBidWZmZXIsXG4gKiBkZXJpdmUgY29ybmVyc3RvbmVUb29scyB0b29sU3RhdGUgYW5kIGJydXNoIG1ldGFkYXRhLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ1tdfSBpbWFnZUlkcyAgICBBbiBhcnJheSBvZiB0aGUgaW1hZ2VJZHMuXG4gKiBAcGFyYW0gIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIFNFRyBhcnJheUJ1ZmZlci5cbiAqIEBwYXJhbSB7Kn0gbWV0YWRhdGFQcm92aWRlclxuICogQHJldHVybnMge09iamVjdH0gIFRoZSB0b29sU3RhdGUgYW5kIGFuIG9iamVjdCBmcm9tIHdoaWNoIHRoZVxuICogICAgICAgICAgICAgICAgICAgIHNlZ21lbnQgbWV0YWRhdGEgY2FuIGJlIGRlcml2ZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRvb2xTdGF0ZShpbWFnZUlkcywgYXJyYXlCdWZmZXIsIG1ldGFkYXRhUHJvdmlkZXIpIHtcbiAgdmFyIGRpY29tRGF0YSA9IERpY29tTWVzc2FnZS5yZWFkRmlsZShhcnJheUJ1ZmZlcik7XG4gIHZhciBkYXRhc2V0ID0gRGljb21NZXRhRGljdGlvbmFyeS5uYXR1cmFsaXplRGF0YXNldChkaWNvbURhdGEuZGljdCk7XG4gIGRhdGFzZXQuX21ldGEgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hbWlmeURhdGFzZXQoZGljb21EYXRhLm1ldGEpO1xuICB2YXIgbXVsdGlmcmFtZSA9IE5vcm1hbGl6ZXIubm9ybWFsaXplVG9EYXRhc2V0KFtkYXRhc2V0XSk7XG4gIHZhciBpbWFnZVBsYW5lTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJpbWFnZVBsYW5lTW9kdWxlXCIsIGltYWdlSWRzWzBdKTtcblxuICBpZiAoIWltYWdlUGxhbmVNb2R1bGUpIHtcbiAgICBjb25zb2xlLndhcm4oXCJJbnN1ZmZpY2llbnQgbWV0YWRhdGEsIGltYWdlUGxhbmVNb2R1bGUgbWlzc2luZy5cIik7XG4gIH1cblxuICB2YXIgSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgPSBBcnJheS5pc0FycmF5KGltYWdlUGxhbmVNb2R1bGUucm93Q29zaW5lcykgPyBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGltYWdlUGxhbmVNb2R1bGUucm93Q29zaW5lcyksIF90b0NvbnN1bWFibGVBcnJheShpbWFnZVBsYW5lTW9kdWxlLmNvbHVtbkNvc2luZXMpKSA6IFtpbWFnZVBsYW5lTW9kdWxlLnJvd0Nvc2luZXMueCwgaW1hZ2VQbGFuZU1vZHVsZS5yb3dDb3NpbmVzLnksIGltYWdlUGxhbmVNb2R1bGUucm93Q29zaW5lcy56LCBpbWFnZVBsYW5lTW9kdWxlLmNvbHVtbkNvc2luZXMueCwgaW1hZ2VQbGFuZU1vZHVsZS5jb2x1bW5Db3NpbmVzLnksIGltYWdlUGxhbmVNb2R1bGUuY29sdW1uQ29zaW5lcy56XTsgLy8gR2V0IElPUCBmcm9tIHJlZiBzZXJpZXMsIGNvbXB1dGUgc3VwcG9ydGVkIG9yaWVudGF0aW9uczpcblxuICB2YXIgdmFsaWRPcmllbnRhdGlvbnMgPSBnZXRWYWxpZE9yaWVudGF0aW9ucyhJbWFnZU9yaWVudGF0aW9uUGF0aWVudCk7XG4gIHZhciBTaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UgPSBtdWx0aWZyYW1lLlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZTtcbiAgdmFyIHNoYXJlZEltYWdlT3JpZW50YXRpb25QYXRpZW50ID0gU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBsYW5lT3JpZW50YXRpb25TZXF1ZW5jZSA/IFNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5QbGFuZU9yaWVudGF0aW9uU2VxdWVuY2UuSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgOiB1bmRlZmluZWQ7XG4gIHZhciBzbGljZUxlbmd0aCA9IG11bHRpZnJhbWUuQ29sdW1ucyAqIG11bHRpZnJhbWUuUm93cztcbiAgdmFyIHNlZ01ldGFkYXRhID0gZ2V0U2VnbWVudE1ldGFkYXRhKG11bHRpZnJhbWUpO1xuICB2YXIgcGl4ZWxEYXRhID0gdW5wYWNrUGl4ZWxEYXRhKG11bHRpZnJhbWUpO1xuICB2YXIgUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UgPSBtdWx0aWZyYW1lLlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlO1xuICB2YXIgdG9vbFN0YXRlID0ge307XG4gIHZhciBpblBsYW5lID0gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFBlckZyYW1lRnVuY3Rpb25hbEdyb3VwcyA9IFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlW2ldO1xuICAgIHZhciBJbWFnZU9yaWVudGF0aW9uUGF0aWVudEkgPSBzaGFyZWRJbWFnZU9yaWVudGF0aW9uUGF0aWVudCB8fCBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuUGxhbmVPcmllbnRhdGlvblNlcXVlbmNlLkltYWdlT3JpZW50YXRpb25QYXRpZW50O1xuICAgIHZhciBwaXhlbERhdGFJMkQgPSBuZGFycmF5KG5ldyBVaW50OEFycmF5KHBpeGVsRGF0YS5idWZmZXIsIGkgKiBzbGljZUxlbmd0aCwgc2xpY2VMZW5ndGgpLCBbbXVsdGlmcmFtZS5Sb3dzLCBtdWx0aWZyYW1lLkNvbHVtbnNdKTtcbiAgICB2YXIgYWxpZ25lZFBpeGVsRGF0YUkgPSBhbGlnblBpeGVsRGF0YVdpdGhTb3VyY2VEYXRhKHBpeGVsRGF0YUkyRCwgSW1hZ2VPcmllbnRhdGlvblBhdGllbnRJLCB2YWxpZE9yaWVudGF0aW9ucyk7XG5cbiAgICBpZiAoIWFsaWduZWRQaXhlbERhdGFJKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJUaGlzIHNlZ21lbnRhdGlvbiBvYmplY3QgaXMgbm90IGluLXBsYW5lIHdpdGggdGhlIHNvdXJjZSBkYXRhLiBCYWlsaW5nIG91dCBvZiBJTy4gSXQnZCBiZSBiZXR0ZXIgdG8gcmVuZGVyIHRoaXMgd2l0aCB2dGtqcy4gXCIpO1xuICAgICAgaW5QbGFuZSA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnRJbmRleCA9IFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwcy5TZWdtZW50SWRlbnRpZmljYXRpb25TZXF1ZW5jZS5SZWZlcmVuY2VkU2VnbWVudE51bWJlciAtIDE7XG4gICAgdmFyIFNvdXJjZUltYWdlU2VxdWVuY2UgPSB2b2lkIDA7XG5cbiAgICBpZiAoU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLkRlcml2YXRpb25JbWFnZVNlcXVlbmNlICYmIFNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5EZXJpdmF0aW9uSW1hZ2VTZXF1ZW5jZS5Tb3VyY2VJbWFnZVNlcXVlbmNlKSB7XG4gICAgICBTb3VyY2VJbWFnZVNlcXVlbmNlID0gU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLkRlcml2YXRpb25JbWFnZVNlcXVlbmNlLlNvdXJjZUltYWdlU2VxdWVuY2VbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIFNvdXJjZUltYWdlU2VxdWVuY2UgPSBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuRGVyaXZhdGlvbkltYWdlU2VxdWVuY2UuU291cmNlSW1hZ2VTZXF1ZW5jZTtcbiAgICB9XG5cbiAgICB2YXIgaW1hZ2VJZCA9IGdldEltYWdlSWRPZlNvdXJjZUltYWdlKFNvdXJjZUltYWdlU2VxdWVuY2UsIGltYWdlSWRzLCBtZXRhZGF0YVByb3ZpZGVyKTtcbiAgICBhZGRJbWFnZUlkU3BlY2lmaWNCcnVzaFRvb2xTdGF0ZSh0b29sU3RhdGUsIGltYWdlSWQsIHNlZ21lbnRJbmRleCwgYWxpZ25lZFBpeGVsRGF0YUkpO1xuICB9XG5cbiAgaWYgKCFpblBsYW5lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b29sU3RhdGU6IHRvb2xTdGF0ZSxcbiAgICBzZWdNZXRhZGF0YTogc2VnTWV0YWRhdGFcbiAgfTtcbn1cbi8qKlxuICogdW5wYWNrUGl4ZWxEYXRhIC0gVW5wYWNrcyBiaXRwYWNrZWQgcGl4ZWxEYXRhIGlmIHRoZSBTZWdtZW50YXRpb24gaXMgQklOQVJZLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gbXVsdGlmcmFtZSBUaGUgbXVsdGlmcmFtZSBkYXRhc2V0LlxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICBUaGUgdW5wYWNrZWQgcGl4ZWxEYXRhLlxuICovXG5cblxuZnVuY3Rpb24gdW5wYWNrUGl4ZWxEYXRhKG11bHRpZnJhbWUpIHtcbiAgdmFyIHNlZ1R5cGUgPSBtdWx0aWZyYW1lLlNlZ21lbnRhdGlvblR5cGU7XG5cbiAgaWYgKHNlZ1R5cGUgPT09IFwiQklOQVJZXCIpIHtcbiAgICByZXR1cm4gQml0QXJyYXkudW5wYWNrKG11bHRpZnJhbWUuUGl4ZWxEYXRhKTtcbiAgfVxuXG4gIHZhciBwaXhlbERhdGEgPSBuZXcgVWludDhBcnJheShtdWx0aWZyYW1lLlBpeGVsRGF0YSk7XG4gIHZhciBtYXggPSBtdWx0aWZyYW1lLk1heGltdW1GcmFjdGlvbmFsVmFsdWU7XG4gIHZhciBvbmx5TWF4QW5kWmVybyA9IHBpeGVsRGF0YS5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgIT09IDAgJiYgZWxlbWVudCAhPT0gbWF4O1xuICB9KSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmICghb25seU1heEFuZFplcm8pIHtcbiAgICBsaWIud2FybihcIlRoaXMgaXMgYSBmcmFjdGlvbmFsIHNlZ21lbnRhdGlvbiwgd2hpY2ggaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpYi53YXJuKFwiVGhpcyBzZWdtZW50YXRpb24gb2JqZWN0IGlzIGFjdHVhbGx5IGJpbmFyeS4uLiBwcm9jZXNzaW5nIGFzIHN1Y2guXCIpO1xuICByZXR1cm4gcGl4ZWxEYXRhO1xufVxuLyoqXG4gKiBhZGRJbWFnZUlkU3BlY2lmaWNCcnVzaFRvb2xTdGF0ZSAtIEFkZHMgYnJ1c2ggcGl4ZWwgZGF0YSB0byBjb3JuZXJzdG9uZVRvb2xzXG4gKiBmb3JtYXR0ZWQgdG9vbFN0YXRlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHRvb2xTdGF0ZSAgICBUaGUgdG9vbFN0YXRlIG9iamVjdCB0byBtb2RpZnlcbiAqIEBwYXJhbSAge1N0cmluZ30gaW1hZ2VJZCAgICAgIFRoZSBpbWFnZUlkIG9mIHRoZSB0b29sU3RhdGUgdG8gYWRkIHRoZSBkYXRhLlxuICogQHBhcmFtICB7TnVtYmVyfSBzZWdtZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBzZWdtZW50IGRhdGEgYmVpbmcgYWRkZWQuXG4gKiBAcGFyYW0gIHtOZGFycmF5fSBwaXhlbERhdGEyRCAgVGhlIHBpeGVsRGF0YSBpbiBOZGFycnkgMkQgZm9ybWF0LlxuICovXG5cblxuZnVuY3Rpb24gYWRkSW1hZ2VJZFNwZWNpZmljQnJ1c2hUb29sU3RhdGUodG9vbFN0YXRlLCBpbWFnZUlkLCBzZWdtZW50SW5kZXgsIHBpeGVsRGF0YTJEKSB7XG4gIGlmICghdG9vbFN0YXRlW2ltYWdlSWRdKSB7XG4gICAgdG9vbFN0YXRlW2ltYWdlSWRdID0ge307XG4gICAgdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoID0ge307XG4gICAgdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoLmRhdGEgPSBbXTtcbiAgfSBlbHNlIGlmICghdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoKSB7XG4gICAgdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoID0ge307XG4gICAgdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoLmRhdGEgPSBbXTtcbiAgfSBlbHNlIGlmICghdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoLmRhdGEpIHtcbiAgICB0b29sU3RhdGVbaW1hZ2VJZF0uYnJ1c2guZGF0YSA9IFtdO1xuICB9XG5cbiAgdG9vbFN0YXRlW2ltYWdlSWRdLmJydXNoLmRhdGFbc2VnbWVudEluZGV4XSA9IHt9O1xuICB2YXIgYnJ1c2hEYXRhSSA9IHRvb2xTdGF0ZVtpbWFnZUlkXS5icnVzaC5kYXRhW3NlZ21lbnRJbmRleF07XG4gIGJydXNoRGF0YUkucGl4ZWxEYXRhID0gbmV3IFVpbnQ4QXJyYXkocGl4ZWxEYXRhMkQuZGF0YS5sZW5ndGgpO1xuICB2YXIgY1Rvb2xzUGl4ZWxEYXRhID0gYnJ1c2hEYXRhSS5waXhlbERhdGE7XG5cbiAgdmFyIF9waXhlbERhdGEyRCRzaGFwZSA9IF9zbGljZWRUb0FycmF5KHBpeGVsRGF0YTJELnNoYXBlLCAyKSxcbiAgICAgIHJvd3MgPSBfcGl4ZWxEYXRhMkQkc2hhcGVbMF0sXG4gICAgICBjb2xzID0gX3BpeGVsRGF0YTJEJHNoYXBlWzFdO1xuXG4gIGZvciAodmFyIHAgPSAwOyBwIDwgY1Rvb2xzUGl4ZWxEYXRhLmxlbmd0aDsgcCsrKSB7XG4gICAgaWYgKHBpeGVsRGF0YTJELmRhdGFbcF0pIHtcbiAgICAgIGNUb29sc1BpeGVsRGF0YVtwXSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNUb29sc1BpeGVsRGF0YVtwXSA9IDA7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIGdldEltYWdlSWRPZlNvdXJjZUltYWdlIC0gUmV0dXJucyB0aGUgQ29ybmVyc3RvbmUgaW1hZ2VJZCBvZiB0aGUgc291cmNlIGltYWdlLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gU291cmNlSW1hZ2VTZXF1ZW5jZSBTZXF1ZW5jZSBkZXNjcmliaW5nIHRoZSBzb3VyY2UgaW1hZ2UuXG4gKiBAcGFyYW0gIHtTdHJpbmdbXX0gaW1hZ2VJZHMgICAgICAgICAgQSBsaXN0IG9mIGltYWdlSWRzLlxuICogQHBhcmFtICB7T2JqZWN0fSBtZXRhZGF0YVByb3ZpZGVyICAgIEEgQ29ybmVyc3RvbmUgbWV0YWRhdGFQcm92aWRlciB0byBxdWVyeVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhIGZyb20gaW1hZ2VJZHMuXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgVGhlIGNvcnJlc3BvbmRpbmcgaW1hZ2VJZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEltYWdlSWRPZlNvdXJjZUltYWdlKFNvdXJjZUltYWdlU2VxdWVuY2UsIGltYWdlSWRzLCBtZXRhZGF0YVByb3ZpZGVyKSB7XG4gIHZhciBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQgPSBTb3VyY2VJbWFnZVNlcXVlbmNlLlJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgIFJlZmVyZW5jZWRGcmFtZU51bWJlciA9IFNvdXJjZUltYWdlU2VxdWVuY2UuUmVmZXJlbmNlZEZyYW1lTnVtYmVyO1xuICByZXR1cm4gUmVmZXJlbmNlZEZyYW1lTnVtYmVyID8gZ2V0SW1hZ2VJZE9mUmVmZXJlbmNlZEZyYW1lKFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCwgUmVmZXJlbmNlZEZyYW1lTnVtYmVyLCBpbWFnZUlkcywgbWV0YWRhdGFQcm92aWRlcikgOiBnZXRJbWFnZUlkT2ZSZWZlcmVuY2VkU2luZ2xlRnJhbWVkU09QSW5zdGFuY2UoUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlELCBpbWFnZUlkcywgbWV0YWRhdGFQcm92aWRlcik7XG59XG4vKipcbiAqIGdldEltYWdlSWRPZlJlZmVyZW5jZWRTaW5nbGVGcmFtZWRTT1BJbnN0YW5jZSAtIFJldHVybnMgdGhlIGltYWdlSWRcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZCBzb3BJbnN0YW5jZVVpZCBmb3Igc2luZ2xlLWZyYW1lIGltYWdlcy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHNvcEluc3RhbmNlVWlkICAgVGhlIHNvcEluc3RhbmNlVWlkIG9mIHRoZSBkZXNpcmVkIGltYWdlLlxuICogQHBhcmFtICB7U3RyaW5nW119IGltYWdlSWRzICAgICAgICAgVGhlIGxpc3Qgb2YgaW1hZ2VJZHMuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG1ldGFkYXRhUHJvdmlkZXIgVGhlIG1ldGFkYXRhUHJvdmlkZXIgdG8gb2J0YWluIHNvcEluc3RhbmNlVWlkc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBjb3JuZXJzdG9uZSBpbWFnZUlkcy5cbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAgICAgICAgICBUaGUgaW1hZ2VJZCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBzb3BJbnN0YW5jZVVpZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEltYWdlSWRPZlJlZmVyZW5jZWRTaW5nbGVGcmFtZWRTT1BJbnN0YW5jZShzb3BJbnN0YW5jZVVpZCwgaW1hZ2VJZHMsIG1ldGFkYXRhUHJvdmlkZXIpIHtcbiAgcmV0dXJuIGltYWdlSWRzLmZpbmQoZnVuY3Rpb24gKGltYWdlSWQpIHtcbiAgICB2YXIgc29wQ29tbW9uTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJzb3BDb21tb25Nb2R1bGVcIiwgaW1hZ2VJZCk7XG5cbiAgICBpZiAoIXNvcENvbW1vbk1vZHVsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzb3BDb21tb25Nb2R1bGUuc29wSW5zdGFuY2VVSUQgPT09IHNvcEluc3RhbmNlVWlkO1xuICB9KTtcbn1cbi8qKlxuICogZ2V0SW1hZ2VJZE9mUmVmZXJlbmNlZEZyYW1lIC0gUmV0dXJucyB0aGUgaW1hZ2VJZCBjb3JyZXNwb25kaW5nIHRvIHRoZVxuICogc3BlY2lmaWVkIHNvcEluc3RhbmNlVWlkIGFuZCBmcmFtZU51bWJlciBmb3IgbXVsdGktZnJhbWUgaW1hZ2VzLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc29wSW5zdGFuY2VVaWQgICBUaGUgc29wSW5zdGFuY2VVaWQgb2YgdGhlIGRlc2lyZWQgaW1hZ2UuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGZyYW1lTnVtYmVyICAgICAgVGhlIGZyYW1lIG51bWJlci5cbiAqIEBwYXJhbSAge1N0cmluZ30gaW1hZ2VJZHMgICAgICAgICBUaGUgbGlzdCBvZiBpbWFnZUlkcy5cbiAqIEBwYXJhbSAge09iamVjdH0gbWV0YWRhdGFQcm92aWRlciBUaGUgbWV0YWRhdGFQcm92aWRlciB0byBvYnRhaW4gc29wSW5zdGFuY2VVaWRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY29ybmVyc3RvbmUgaW1hZ2VJZHMuXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgVGhlIGltYWdlSWQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgc29wSW5zdGFuY2VVaWQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbWFnZUlkT2ZSZWZlcmVuY2VkRnJhbWUoc29wSW5zdGFuY2VVaWQsIGZyYW1lTnVtYmVyLCBpbWFnZUlkcywgbWV0YWRhdGFQcm92aWRlcikge1xuICB2YXIgaW1hZ2VJZCA9IGltYWdlSWRzLmZpbmQoZnVuY3Rpb24gKGltYWdlSWQpIHtcbiAgICB2YXIgc29wQ29tbW9uTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJzb3BDb21tb25Nb2R1bGVcIiwgaW1hZ2VJZCk7XG5cbiAgICBpZiAoIXNvcENvbW1vbk1vZHVsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpbWFnZUlkRnJhbWVOdW1iZXIgPSBOdW1iZXIoaW1hZ2VJZC5zcGxpdChcImZyYW1lPVwiKVsxXSk7XG4gICAgcmV0dXJuICgvL2ZyYW1lTnVtYmVyIGlzIHplcm8gaW5kZXhlZCBmb3IgY29ybmVyc3RvbmVXQURPSW1hZ2VMb2FkZXIgaW1hZ2UgSWRzLlxuICAgICAgc29wQ29tbW9uTW9kdWxlLnNvcEluc3RhbmNlVUlEID09PSBzb3BJbnN0YW5jZVVpZCAmJiBpbWFnZUlkRnJhbWVOdW1iZXIgPT09IGZyYW1lTnVtYmVyIC0gMVxuICAgICk7XG4gIH0pO1xuICByZXR1cm4gaW1hZ2VJZDtcbn1cbi8qKlxuICogZ2V0VmFsaWRPcmllbnRhdGlvbnMgLSByZXR1cm5zIGFuIGFycmF5IG9mIHZhbGlkIG9yaWVudGF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJbNl19IGlvcCBUaGUgcm93ICgwLi4yKSBhbiBjb2x1bW4gKDMuLjUpIGRpcmVjdGlvbiBjb3NpbmVzLlxuICogQHJldHVybiB7TnVtYmVyWzhdWzZdfSBBbiBhcnJheSBvZiB2YWxpZCBvcmllbnRhdGlvbnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRWYWxpZE9yaWVudGF0aW9ucyhpb3ApIHtcbiAgdmFyIG9yaWVudGF0aW9ucyA9IFtdOyAvLyBbMCwgIDEsICAyXTogMCwgICAwaGYsICAgMHZmXG4gIC8vIFszLCAgNCwgIDVdOiA5MCwgIDkwaGYsICA5MHZmXG4gIC8vIFs2LCA3XTogICAgICAxODAsIDI3MFxuXG4gIG9yaWVudGF0aW9uc1swXSA9IGlvcDtcbiAgb3JpZW50YXRpb25zWzFdID0gZmxpcEltYWdlT3JpZW50YXRpb25QYXRpZW50LmgoaW9wKTtcbiAgb3JpZW50YXRpb25zWzJdID0gZmxpcEltYWdlT3JpZW50YXRpb25QYXRpZW50LnYoaW9wKTtcbiAgdmFyIGlvcDkwID0gcm90YXRlRGlyZWN0aW9uQ29zaW5lc0luUGxhbmUoaW9wLCBNYXRoLlBJIC8gMik7XG4gIG9yaWVudGF0aW9uc1szXSA9IGlvcDkwO1xuICBvcmllbnRhdGlvbnNbNF0gPSBmbGlwSW1hZ2VPcmllbnRhdGlvblBhdGllbnQuaChpb3A5MCk7XG4gIG9yaWVudGF0aW9uc1s1XSA9IGZsaXBJbWFnZU9yaWVudGF0aW9uUGF0aWVudC52KGlvcDkwKTtcbiAgb3JpZW50YXRpb25zWzZdID0gcm90YXRlRGlyZWN0aW9uQ29zaW5lc0luUGxhbmUoaW9wLCBNYXRoLlBJKTtcbiAgb3JpZW50YXRpb25zWzddID0gcm90YXRlRGlyZWN0aW9uQ29zaW5lc0luUGxhbmUoaW9wLCAxLjUgKiBNYXRoLlBJKTtcbiAgcmV0dXJuIG9yaWVudGF0aW9ucztcbn1cbi8qKlxuICogYWxpZ25QaXhlbERhdGFXaXRoU291cmNlRGF0YSAtXG4gKlxuICogQHBhcmFtIHtOZGFycmF5fSBwaXhlbERhdGEyRCBUaGUgZGF0YSB0byBhbGlnbi5cbiAqIEBwYXJhbSAge051bWJlcls2XX0gaW9wIFRoZSBvcmllbnRhdGlvbiBvZiB0aGUgaW1hZ2Ugc2xpY2UuXG4gKiBAcGFyYW0gIHtOdW1iZXJbOF1bNl19IG9yaWVudGF0aW9ucyAgIEFuIGFycmF5IG9mIHZhbGlkIGltYWdlT3JpZW50YXRpb25QYXRpZW50IHZhbHVlcy5cbiAqIEByZXR1cm4ge05kYXJyYXl9ICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhbGlnbmVkIHBpeGVsRGF0YS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFsaWduUGl4ZWxEYXRhV2l0aFNvdXJjZURhdGEocGl4ZWxEYXRhMkQsIGlvcCwgb3JpZW50YXRpb25zKSB7XG4gIGlmIChjb21wYXJlSU9QKGlvcCwgb3JpZW50YXRpb25zWzBdKSkge1xuICAgIC8vU2FtZSBvcmllbnRhdGlvbi5cbiAgICByZXR1cm4gcGl4ZWxEYXRhMkQ7XG4gIH0gZWxzZSBpZiAoY29tcGFyZUlPUChpb3AsIG9yaWVudGF0aW9uc1sxXSkpIHtcbiAgICAvL0ZsaXBwZWQgdmVydGljYWxseS5cbiAgICByZXR1cm4gZmxpcE1hdHJpeDJELnYocGl4ZWxEYXRhMkQpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AoaW9wLCBvcmllbnRhdGlvbnNbMl0pKSB7XG4gICAgLy9GbGlwcGVkIGhvcml6b250YWxseS5cbiAgICByZXR1cm4gZmxpcE1hdHJpeDJELmgocGl4ZWxEYXRhMkQpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AoaW9wLCBvcmllbnRhdGlvbnNbM10pKSB7XG4gICAgLy9Sb3RhdGVkIDkwIGRlZ3JlZXMuXG4gICAgcmV0dXJuIHJvdGF0ZU1hdHJpeDkwMkQocGl4ZWxEYXRhMkQpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AoaW9wLCBvcmllbnRhdGlvbnNbNF0pKSB7XG4gICAgLy9Sb3RhdGVkIDkwIGRlZ3JlZXMgYW5kIGZsaXBlZCBob3Jpem9udGFsbHkuXG4gICAgcmV0dXJuIGZsaXBNYXRyaXgyRC5oKHJvdGF0ZU1hdHJpeDkwMkQocGl4ZWxEYXRhMkQpKTtcbiAgfSBlbHNlIGlmIChjb21wYXJlSU9QKGlvcCwgb3JpZW50YXRpb25zWzVdKSkge1xuICAgIC8vUm90YXRlZCA5MCBkZWdyZWVzIGFuZCBmbGlwZWQgdmVydGljYWxseS5cbiAgICByZXR1cm4gZmxpcE1hdHJpeDJELnYocm90YXRlTWF0cml4OTAyRChwaXhlbERhdGEyRCkpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AoaW9wLCBvcmllbnRhdGlvbnNbNl0pKSB7XG4gICAgLy9Sb3RhdGVkIDE4MCBkZWdyZWVzLiAvLyBUT0RPIC0+IERvIHRoaXMgbW9yZSBlZmZlY2llbnRseSwgdGhlcmUgaXMgYSAxOjEgbWFwcGluZyBsaWtlIDkwIGRlZ3JlZSByb3RhdGlvbi5cbiAgICByZXR1cm4gcm90YXRlTWF0cml4OTAyRChyb3RhdGVNYXRyaXg5MDJEKHBpeGVsRGF0YTJEKSk7XG4gIH0gZWxzZSBpZiAoY29tcGFyZUlPUChpb3AsIG9yaWVudGF0aW9uc1s3XSkpIHtcbiAgICAvL1JvdGF0ZWQgMjcwIGRlZ3JlZXMuICAvLyBUT0RPIC0+IERvIHRoaXMgbW9yZSBlZmZlY2llbnRseSwgdGhlcmUgaXMgYSAxOjEgbWFwcGluZyBsaWtlIDkwIGRlZ3JlZSByb3RhdGlvbi5cbiAgICByZXR1cm4gcm90YXRlTWF0cml4OTAyRChyb3RhdGVNYXRyaXg5MDJEKHJvdGF0ZU1hdHJpeDkwMkQocGl4ZWxEYXRhMkQpKSk7XG4gIH1cbn1cblxudmFyIGR4ID0gMWUtNTtcbi8qKlxuICogY29tcGFyZUlPUCAtIFJldHVybnMgdHJ1ZSBpZiBpb3AxIGFuZCBpb3AyIGFyZSBlcXVhbFxuICogd2l0aGluIGEgdG9sbGVyYW5jZSwgZHguXG4gKlxuICogQHBhcmFtICB7TnVtYmVyWzZdfSBpb3AxIEFuIEltYWdlT3JpZW50YXRpb25QYXRpZW50IGFycmF5LlxuICogQHBhcmFtICB7TnVtYmVyWzZdfSBpb3AyIEFuIEltYWdlT3JpZW50YXRpb25QYXRpZW50IGFycmF5LlxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICBUcnVlIGlmIGlvcDEgYW5kIGlvcDIgYXJlIGVxdWFsLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVJT1AoaW9wMSwgaW9wMikge1xuICByZXR1cm4gTWF0aC5hYnMoaW9wMVswXSAtIGlvcDJbMF0pIDwgZHggJiYgTWF0aC5hYnMoaW9wMVsxXSAtIGlvcDJbMV0pIDwgZHggJiYgTWF0aC5hYnMoaW9wMVsyXSAtIGlvcDJbMl0pIDwgZHggJiYgTWF0aC5hYnMoaW9wMVszXSAtIGlvcDJbM10pIDwgZHggJiYgTWF0aC5hYnMoaW9wMVs0XSAtIGlvcDJbNF0pIDwgZHggJiYgTWF0aC5hYnMoaW9wMVs1XSAtIGlvcDJbNV0pIDwgZHg7XG59XG5cbmZ1bmN0aW9uIGdldFNlZ21lbnRNZXRhZGF0YShtdWx0aWZyYW1lKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHZhciBzZWdtZW50U2VxdWVuY2UgPSBtdWx0aWZyYW1lLlNlZ21lbnRTZXF1ZW5jZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzZWdtZW50U2VxdWVuY2UpKSB7XG4gICAgZm9yICh2YXIgc2VnSWR4ID0gMDsgc2VnSWR4IDwgc2VnbWVudFNlcXVlbmNlLmxlbmd0aDsgc2VnSWR4KyspIHtcbiAgICAgIGRhdGEucHVzaChzZWdtZW50U2VxdWVuY2Vbc2VnSWR4XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIE9ubHkgb25lIHNlZ21lbnQsIHdpbGwgYmUgc3RvcmVkIGFzIGFuIG9iamVjdC5cbiAgICBkYXRhLnB1c2goc2VnbWVudFNlcXVlbmNlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2VyaWVzSW5zdGFuY2VVaWQ6IG11bHRpZnJhbWUuUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlLlNlcmllc0luc3RhbmNlVUlELFxuICAgIGRhdGE6IGRhdGFcbiAgfTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgbm9uLWJpdHBhY2tlZCBmcmFtZSB3aGljaCBoYXMgb25lIHNhbXBsZSBwZXIgcGl4ZWwuXG4gKlxuICogQHBhcmFtIHsqfSBidWZmZXJcbiAqIEBwYXJhbSB7Kn0gbnVtYmVyT2ZGcmFtZXNcbiAqIEBwYXJhbSB7Kn0gcm93c1xuICogQHBhcmFtIHsqfSBjb2xzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlKGJ1ZmZlciwgbnVtYmVyT2ZGcmFtZXMsIHJvd3MsIGNvbHMpIHtcbiAgdmFyIGZyYW1lTGVuZ3RoID0gcm93cyAqIGNvbHM7XG4gIHZhciBoZWFkZXIgPSBjcmVhdGVIZWFkZXIoKTtcbiAgdmFyIGVuY29kZWRGcmFtZXMgPSBbXTtcblxuICBmb3IgKHZhciBmcmFtZSA9IDA7IGZyYW1lIDwgbnVtYmVyT2ZGcmFtZXM7IGZyYW1lKyspIHtcbiAgICB2YXIgZnJhbWVPZmZzZXQgPSBmcmFtZUxlbmd0aCAqIGZyYW1lO1xuICAgIGVuY29kZWRGcmFtZXMucHVzaChlbmNvZGVGcmFtZShidWZmZXIsIGZyYW1lT2Zmc2V0LCByb3dzLCBjb2xzLCBoZWFkZXIpKTtcbiAgfVxuXG4gIHJldHVybiBlbmNvZGVkRnJhbWVzO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVGcmFtZShidWZmZXIsIGZyYW1lT2Zmc2V0LCByb3dzLCBjb2xzLCBoZWFkZXIpIHtcbiAgLy8gQWRkIGhlYWRlciB0byBmcmFtZTpcbiAgdmFyIHJsZUFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgciA9IDA7IHIgPCByb3dzOyByKyspIHtcbiAgICB2YXIgcm93T2Zmc2V0ID0gciAqIGNvbHM7XG4gICAgdmFyIHVpbnQ4Um93ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBmcmFtZU9mZnNldCArIHJvd09mZnNldCwgY29scyk7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCB1aW50OFJvdy5sZW5ndGgpIHtcbiAgICAgIHZhciBsaXRlcmFsUnVuTGVuZ3RoID0gZ2V0TGl0ZXJhbFJ1bkxlbmd0aCh1aW50OFJvdywgaSk7XG5cbiAgICAgIGlmIChsaXRlcmFsUnVuTGVuZ3RoKSB7XG4gICAgICAgIC8vIFN0YXRlIGhvdyBtYW55IGluIGxpdHRlcmFsIHJ1blxuICAgICAgICBybGVBcnJheS5wdXNoKGxpdGVyYWxSdW5MZW5ndGggLSAxKTsgLy8gQXBwZW5kIGxpdHRlcmFsIHJ1bi5cblxuICAgICAgICB2YXIgbGl0ZXJhbFJ1biA9IHVpbnQ4Um93LnNsaWNlKGksIGkgKyBsaXRlcmFsUnVuTGVuZ3RoKTtcbiAgICAgICAgcmxlQXJyYXkgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHJsZUFycmF5KSwgX3RvQ29uc3VtYWJsZUFycmF5KGxpdGVyYWxSdW4pKTtcbiAgICAgICAgaSArPSBsaXRlcmFsUnVuTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA+PSB1aW50OFJvdy5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IC8vIE5leHQgbXVzdCBiZSBhIHJlcGxpY2F0ZSBydW4uXG5cblxuICAgICAgdmFyIHJlcGxpY2F0ZVJ1bkxlbmd0aCA9IGdldFJlcGxpY2F0ZVJ1bkxlbmd0aCh1aW50OFJvdywgaSk7XG5cbiAgICAgIGlmIChyZXBsaWNhdGVSdW5MZW5ndGgpIHtcbiAgICAgICAgLy8gU3RhdGUgaG93IG1hbnkgaW4gcmVwbGljYXRlIHJ1blxuICAgICAgICBybGVBcnJheS5wdXNoKDI1NyAtIHJlcGxpY2F0ZVJ1bkxlbmd0aCk7XG4gICAgICAgIHJsZUFycmF5LnB1c2godWludDhSb3dbaV0pO1xuICAgICAgICBpICs9IHJlcGxpY2F0ZVJ1bkxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaGVhZGVyTGVuZ3RoID0gNjQ7XG4gIHZhciBib2R5TGVuZ3RoID0gcmxlQXJyYXkubGVuZ3RoICUgMiA9PT0gMCA/IHJsZUFycmF5Lmxlbmd0aCA6IHJsZUFycmF5Lmxlbmd0aCArIDE7XG4gIHZhciBlbmNvZGVkRnJhbWVCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoaGVhZGVyTGVuZ3RoICsgYm9keUxlbmd0aCk7IC8vIENvcHkgaGVhZGVyIGludG8gZW5jb2RlZEZyYW1lQnVmZmVyLlxuXG4gIHZhciBoZWFkZXJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KGVuY29kZWRGcmFtZUJ1ZmZlciwgMCwgMTYpO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBoZWFkZXJWaWV3Lmxlbmd0aDsgX2krKykge1xuICAgIGhlYWRlclZpZXdbX2ldID0gaGVhZGVyW19pXTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGhlYWRlclZpZXcubGVuZ3RoOyBfaTIrKykge1xuICAgIHJsZUFycmF5LnB1c2goaGVhZGVyVmlld1tfaTJdKTtcbiAgfSAvLyBDb3B5IHJsZSBkYXRhIGludG8gZW5jb2RlZEZyYW1lQnVmZmVyLlxuXG5cbiAgdmFyIGJvZHlWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZEZyYW1lQnVmZmVyLCA2NCk7XG5cbiAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcmxlQXJyYXkubGVuZ3RoOyBfaTMrKykge1xuICAgIGJvZHlWaWV3W19pM10gPSBybGVBcnJheVtfaTNdO1xuICB9XG5cbiAgcmV0dXJuIGVuY29kZWRGcmFtZUJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGVhZGVyKCkge1xuICB2YXIgaGVhZGVyVWludDMyID0gbmV3IFVpbnQzMkFycmF5KDE2KTtcbiAgaGVhZGVyVWludDMyWzBdID0gMTsgLy8gMSBTZWdtZW50LlxuXG4gIGhlYWRlclVpbnQzMlsxXSA9IDY0OyAvLyBEYXRhIG9mZnNldCBpcyA2NCBieXRlcy5cbiAgLy8gUmV0dXJuIGJ5dGUtYXJyYXkgdmVyc2lvbiBvZiBoZWFkZXI6XG5cbiAgcmV0dXJuIGhlYWRlclVpbnQzMjtcbn1cblxuZnVuY3Rpb24gZ2V0TGl0ZXJhbFJ1bkxlbmd0aCh1aW50OFJvdywgaSkge1xuICBmb3IgKHZhciBsID0gMDsgbCA8IHVpbnQ4Um93Lmxlbmd0aCAtIGk7IGwrKykge1xuICAgIGlmICh1aW50OFJvd1tpICsgbF0gPT09IHVpbnQ4Um93W2kgKyBsICsgMV0gJiYgdWludDhSb3dbaSArIGwgKyAxXSA9PT0gdWludDhSb3dbaSArIGwgKyAyXSkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfVxuXG4gICAgaWYgKGwgPT09IDEyOCkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVpbnQ4Um93Lmxlbmd0aCAtIGk7XG59XG5cbmZ1bmN0aW9uIGdldFJlcGxpY2F0ZVJ1bkxlbmd0aCh1aW50OFJvdywgaSkge1xuICB2YXIgZmlyc3QgPSB1aW50OFJvd1tpXTtcblxuICBmb3IgKHZhciBsID0gMTsgbCA8IHVpbnQ4Um93Lmxlbmd0aCAtIGk7IGwrKykge1xuICAgIGlmICh1aW50OFJvd1tpICsgbF0gIT09IGZpcnN0KSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG5cbiAgICBpZiAobCA9PT0gMTI4KSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdWludDhSb3cubGVuZ3RoIC0gaTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHJsZUVuY29kZWRGcmFtZXMsIHJvd3MsIGNvbHMpIHtcbiAgdmFyIHBpeGVsRGF0YSA9IG5ldyBVaW50OEFycmF5KHJvd3MgKiBjb2xzICogcmxlRW5jb2RlZEZyYW1lcy5sZW5ndGgpO1xuICB2YXIgYnVmZmVyID0gcGl4ZWxEYXRhLmJ1ZmZlcjtcbiAgdmFyIGZyYW1lTGVuZ3RoID0gcm93cyAqIGNvbHM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBybGVFbmNvZGVkRnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJsZUVuY29kZWRGcmFtZSA9IHJsZUVuY29kZWRGcmFtZXNbaV07XG4gICAgdmFyIHVpbnQ4RnJhbWVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBpICogZnJhbWVMZW5ndGgsIGZyYW1lTGVuZ3RoKTtcbiAgICBkZWNvZGVGcmFtZShybGVFbmNvZGVkRnJhbWUsIHVpbnQ4RnJhbWVWaWV3KTtcbiAgfVxuXG4gIHJldHVybiBwaXhlbERhdGE7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUZyYW1lKHJsZUVuY29kZWRGcmFtZSwgcGl4ZWxEYXRhKSB7XG4gIC8vIENoZWNrIEhFQURFUjpcbiAgdmFyIGhlYWRlciA9IG5ldyBVaW50MzJBcnJheShybGVFbmNvZGVkRnJhbWUsIDAsIDE2KTtcblxuICBpZiAoaGVhZGVyWzBdICE9PSAxKSB7XG4gICAgbGliLmVycm9yKFwicmxlU2luZ2xlU2FtcGxlUGVyUGl4ZWwgb25seSBzdXBwb3J0cyBmcmFnbWVudHMgd2l0aCBzaW5nbGUgQnl0ZSBTZWdtZW50cyAoZm9yIHJsZSBlbmNvZGVkIHNlZ21lbnRhdGlvbiBkYXRhKSBhdCB0aGUgY3VycmVudCB0aW1lLiBUaGlzIHJsZUVuY29kZWRGcmFtZSBoYXMgXCIuY29uY2F0KGhlYWRlclswXSwgXCIgQnl0ZSBTZWdtZW50cy5cIikpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChoZWFkZXJbMV0gIT09IDY0KSB7XG4gICAgbGliLmVycm9yKFwiRGF0YSBvZmZzZXQgb2YgQnl0ZSBTZWdtZW50IDEgc2hvdWxkIGJlIDY0IGJ5dGVzLCB0aGlzIHJsZSBmcmFnbWVudCBpcyBlbmNvZGVkIGluY29ycmVjdGx5LlwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdUludDhGcmFtZSA9IG5ldyBVaW50OEFycmF5KHJsZUVuY29kZWRGcmFtZSwgNjQpO1xuICB2YXIgcGl4ZWxEYXRhSW5kZXggPSAwO1xuICB2YXIgaSA9IDA7XG5cbiAgd2hpbGUgKHBpeGVsRGF0YUluZGV4IDwgcGl4ZWxEYXRhLmxlbmd0aCkge1xuICAgIHZhciBieXRlVmFsdWUgPSB1SW50OEZyYW1lW2ldO1xuXG4gICAgaWYgKGJ5dGVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoYnl0ZVZhbHVlIDw9IDEyNykge1xuICAgICAgLy8gVE9ETyAtPiBJbnRlcnByZXQgdGhlIG5leHQgTisxIGJ5dGVzIGxpdGVyYWxseS5cbiAgICAgIHZhciBOID0gYnl0ZVZhbHVlICsgMTtcbiAgICAgIHZhciBuZXh0ID0gaSArIDE7IC8vIFJlYWQgdGhlIG5leHQgTiBieXRlcyBsaXRlcmFsbHkuXG5cbiAgICAgIGZvciAodmFyIHAgPSBuZXh0OyBwIDwgbmV4dCArIE47IHArKykge1xuICAgICAgICBwaXhlbERhdGFbcGl4ZWxEYXRhSW5kZXhdID0gdUludDhGcmFtZVtwXTtcbiAgICAgICAgcGl4ZWxEYXRhSW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaSArPSBOICsgMTtcbiAgICB9XG5cbiAgICBpZiAoYnl0ZVZhbHVlID49IDEyOSkge1xuICAgICAgdmFyIF9OID0gMjU3IC0gYnl0ZVZhbHVlO1xuXG4gICAgICB2YXIgX25leHQgPSBpICsgMTsgLy8gUmVwZWF0IHRoZSBuZXh0IGJ5dGUgTiB0aW1lcy5cblxuXG4gICAgICBmb3IgKHZhciBfcCA9IDA7IF9wIDwgX047IF9wKyspIHtcbiAgICAgICAgcGl4ZWxEYXRhW3BpeGVsRGF0YUluZGV4XSA9IHVJbnQ4RnJhbWVbX25leHRdO1xuICAgICAgICBwaXhlbERhdGFJbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpICs9IDI7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHVJbnQ4RnJhbWUubGVuZ3RoKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxudmFyIFNlZ21lbnRhdGlvbiQyID0ge1xuICBnZW5lcmF0ZVNlZ21lbnRhdGlvbjogZ2VuZXJhdGVTZWdtZW50YXRpb24kMSxcbiAgZ2VuZXJhdGVUb29sU3RhdGU6IGdlbmVyYXRlVG9vbFN0YXRlJDEsXG4gIGZpbGxTZWdtZW50YXRpb246IGZpbGxTZWdtZW50YXRpb25cbn07XG4vKipcbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCcnVzaERhdGFcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB0b29sU3RhdGUgLSBUaGUgY29ybmVyc3RvbmVUb29scyBnbG9iYWwgdG9vbFN0YXRlLlxuICogQHByb3BlcnR5IHtPYmplY3RbXX0gc2VnbWVudHMgLSBUaGUgY29ybmVyc3RvbmVUb29scyBzZWdtZW50IG1ldGFkYXRhIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc0luc3RhbmNlVWlkLlxuICovXG5cbnZhciBnZW5lcmF0ZVNlZ21lbnRhdGlvbkRlZmF1bHRPcHRpb25zID0ge1xuICBpbmNsdWRlU2xpY2VTcGFjaW5nOiB0cnVlLFxuICBybGVFbmNvZGU6IHRydWVcbn07XG4vKipcbiAqIGdlbmVyYXRlU2VnbWVudGF0aW9uIC0gR2VuZXJhdGVzIGNvcm5lcnN0b25lVG9vbHMgYnJ1c2ggZGF0YSwgZ2l2ZW4gYSBzdGFjayBvZlxuICogaW1hZ2VJZHMsIGltYWdlcyBhbmQgdGhlIGNvcm5lcnN0b25lVG9vbHMgYnJ1c2hEYXRhLlxuICpcbiAqIEBwYXJhbSAge29iamVjdFtdfSBpbWFnZXMgQW4gYXJyYXkgb2YgY29ybmVyc3RvbmUgaW1hZ2VzIHRoYXQgY29udGFpbiB0aGUgc291cmNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgdW5kZXIgYGltYWdlLmRhdGEuYnl0ZUFycmF5LmJ1ZmZlcmAuXG4gKiBAcGFyYW0gIHtPYmplY3R8T2JqZWN0W119IGlucHV0TGFiZWxtYXBzM0QgVGhlIGNvcm5lcnN0b25lIGBMYWJlbG1hcDNEYCBvYmplY3QsIG9yIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHVzZXJPcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgc2VnbWVudGF0aW9uIGRlcml2YXRpb24gYW5kIGBmaWxsU2VnbWVudGF0aW9uYC5cbiAqIEByZXR1cm5zIHtCbG9ifVxuICovXG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudGF0aW9uJDEoaW1hZ2VzLCBpbnB1dExhYmVsbWFwczNEKSB7XG4gIHZhciB1c2VyT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBpc011bHRpZnJhbWUgPSBpbWFnZXNbMF0uaW1hZ2VJZC5pbmNsdWRlcyhcIj9mcmFtZVwiKTtcblxuICB2YXIgc2VnbWVudGF0aW9uID0gX2NyZWF0ZVNlZ0Zyb21JbWFnZXMkMShpbWFnZXMsIGlzTXVsdGlmcmFtZSwgdXNlck9wdGlvbnMpO1xuXG4gIHJldHVybiBmaWxsU2VnbWVudGF0aW9uKHNlZ21lbnRhdGlvbiwgaW5wdXRMYWJlbG1hcHMzRCwgdXNlck9wdGlvbnMpO1xufVxuLyoqXG4gKiBmaWxsU2VnbWVudGF0aW9uIC0gRmlsbHMgYSBkZXJpdmVkIHNlZ21lbnRhdGlvbiBkYXRhc2V0IHdpdGggY29ybmVyc3RvbmVUb29scyBgTGFiZWxNYXAzRGAgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gc2VnbWVudGF0aW9uIEFuIGVtcHR5IHNlZ21lbnRhdGlvbiBkZXJpdmVkIGRhdGFzZXQuXG4gKiBAcGFyYW0gIHtPYmplY3R8T2JqZWN0W119IGlucHV0TGFiZWxtYXBzM0QgVGhlIGNvcm5lcnN0b25lIGBMYWJlbG1hcDNEYCBvYmplY3QsIG9yIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHVzZXJPcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRvIG92ZXJyaWRlIGRlZmF1bHQgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCbG9ifSAgICAgICAgICAgZGVzY3JpcHRpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbGxTZWdtZW50YXRpb24oc2VnbWVudGF0aW9uLCBpbnB1dExhYmVsbWFwczNEKSB7XG4gIHZhciB1c2VyT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZ2VuZXJhdGVTZWdtZW50YXRpb25EZWZhdWx0T3B0aW9ucywgdXNlck9wdGlvbnMpOyAvLyBVc2UgYW5vdGhlciB2YXJpYWJsZSBzbyB3ZSBkb24ndCByZWRlZmluZSBsYWJlbG1hcHMzRC5cblxuICB2YXIgbGFiZWxtYXBzM0QgPSBBcnJheS5pc0FycmF5KGlucHV0TGFiZWxtYXBzM0QpID8gaW5wdXRMYWJlbG1hcHMzRCA6IFtpbnB1dExhYmVsbWFwczNEXTtcbiAgdmFyIG51bWJlck9mRnJhbWVzID0gMDtcbiAgdmFyIHJlZmVyZW5jZWRGcmFtZXNQZXJMYWJlbG1hcCA9IFtdO1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGxhYmVsbWFwSW5kZXgpIHtcbiAgICB2YXIgbGFiZWxtYXAzRCA9IGxhYmVsbWFwczNEW2xhYmVsbWFwSW5kZXhdO1xuICAgIHZhciBsYWJlbG1hcHMyRCA9IGxhYmVsbWFwM0QubGFiZWxtYXBzMkQsXG4gICAgICAgIG1ldGFkYXRhID0gbGFiZWxtYXAzRC5tZXRhZGF0YTtcbiAgICB2YXIgcmVmZXJlbmNlZEZyYW1lc1BlclNlZ21lbnQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChtZXRhZGF0YVtpXSkge1xuICAgICAgICByZWZlcmVuY2VkRnJhbWVzUGVyU2VnbWVudFtpXSA9IFtdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoX2kpIHtcbiAgICAgIHZhciBsYWJlbG1hcDJEID0gbGFiZWxtYXBzMkRbX2ldO1xuXG4gICAgICBpZiAobGFiZWxtYXBzMkRbX2ldKSB7XG4gICAgICAgIHZhciBzZWdtZW50c09uTGFiZWxtYXAgPSBsYWJlbG1hcDJELnNlZ21lbnRzT25MYWJlbG1hcDtcbiAgICAgICAgc2VnbWVudHNPbkxhYmVsbWFwLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnRJbmRleCkge1xuICAgICAgICAgIGlmIChzZWdtZW50SW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50W3NlZ21lbnRJbmRleF0ucHVzaChfaSk7XG4gICAgICAgICAgICBudW1iZXJPZkZyYW1lcysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYWJlbG1hcHMyRC5sZW5ndGg7IF9pKyspIHtcbiAgICAgIF9sb29wMihfaSk7XG4gICAgfVxuXG4gICAgcmVmZXJlbmNlZEZyYW1lc1BlckxhYmVsbWFwW2xhYmVsbWFwSW5kZXhdID0gcmVmZXJlbmNlZEZyYW1lc1BlclNlZ21lbnQ7XG4gIH07XG5cbiAgZm9yICh2YXIgbGFiZWxtYXBJbmRleCA9IDA7IGxhYmVsbWFwSW5kZXggPCBsYWJlbG1hcHMzRC5sZW5ndGg7IGxhYmVsbWFwSW5kZXgrKykge1xuICAgIF9sb29wKGxhYmVsbWFwSW5kZXgpO1xuICB9XG5cbiAgc2VnbWVudGF0aW9uLnNldE51bWJlck9mRnJhbWVzKG51bWJlck9mRnJhbWVzKTtcblxuICBmb3IgKHZhciBsYWJlbG1hcEluZGV4ID0gMDsgbGFiZWxtYXBJbmRleCA8IGxhYmVsbWFwczNELmxlbmd0aDsgbGFiZWxtYXBJbmRleCsrKSB7XG4gICAgdmFyIHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50ID0gcmVmZXJlbmNlZEZyYW1lc1BlckxhYmVsbWFwW2xhYmVsbWFwSW5kZXhdO1xuICAgIHZhciBsYWJlbG1hcDNEID0gbGFiZWxtYXBzM0RbbGFiZWxtYXBJbmRleF07XG4gICAgdmFyIG1ldGFkYXRhID0gbGFiZWxtYXAzRC5tZXRhZGF0YTtcblxuICAgIGZvciAodmFyIHNlZ21lbnRJbmRleCA9IDE7IHNlZ21lbnRJbmRleCA8IHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50Lmxlbmd0aDsgc2VnbWVudEluZGV4KyspIHtcbiAgICAgIHZhciByZWZlcmVuY2VkRnJhbWVJbmRpY2llcyA9IHJlZmVyZW5jZWRGcmFtZXNQZXJTZWdtZW50W3NlZ21lbnRJbmRleF07XG5cbiAgICAgIGlmIChyZWZlcmVuY2VkRnJhbWVJbmRpY2llcykge1xuICAgICAgICAvLyBGcmFtZSBudW1iZXJzIHN0YXJ0IGZyb20gMS5cbiAgICAgICAgdmFyIHJlZmVyZW5jZWRGcmFtZU51bWJlcnMgPSByZWZlcmVuY2VkRnJhbWVJbmRpY2llcy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudCArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2VnbWVudE1ldGFkYXRhID0gbWV0YWRhdGFbc2VnbWVudEluZGV4XTtcblxuICAgICAgICB2YXIgbGFiZWxtYXBzID0gX2dldExhYmVsbWFwc0Zyb21SZWZlcm5lY2VkRnJhbWVJbmRpY2llcyhsYWJlbG1hcDNELCByZWZlcmVuY2VkRnJhbWVJbmRpY2llcyk7XG5cbiAgICAgICAgc2VnbWVudGF0aW9uLmFkZFNlZ21lbnRGcm9tTGFiZWxtYXAoc2VnbWVudE1ldGFkYXRhLCBsYWJlbG1hcHMsIHNlZ21lbnRJbmRleCwgcmVmZXJlbmNlZEZyYW1lTnVtYmVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucmxlRW5jb2RlKSB7XG4gICAgdmFyIHJsZUVuY29kZWRGcmFtZXMgPSBlbmNvZGUoc2VnbWVudGF0aW9uLmRhdGFzZXQuUGl4ZWxEYXRhLCBudW1iZXJPZkZyYW1lcywgc2VnbWVudGF0aW9uLmRhdGFzZXQuUm93cywgc2VnbWVudGF0aW9uLmRhdGFzZXQuQ29sdW1ucyk7IC8vIE11c3QgdXNlIGZyYWN0aW9uYWwgbm93IHRvIFJMRSBlbmNvZGUsIGFzIHRoZSBESUNPTSBzdGFuZGFyZCBvbmx5IGFsbG93cyBCaXRTdG9yZWQgJiYgQml0c0FsbG9jYXRlZFxuICAgIC8vIHRvIGJlIDEgZm9yIEJJTkFSWS4gVGhpcyBpcyBub3QgaWRlYWwgYW5kIHRoZXJlIHNob3VsZCBiZSBhIGJldHRlciBmb3JtYXQgZm9yIGNvbXByZXNzaW9uIGluIHRoaXMgbWFubmVyXG4gICAgLy8gYWRkZWQgdG8gdGhlIHN0YW5kYXJkLlxuXG4gICAgc2VnbWVudGF0aW9uLmFzc2lnblRvRGF0YXNldCh7XG4gICAgICBCaXRzQWxsb2NhdGVkOiBcIjhcIixcbiAgICAgIEJpdHNTdG9yZWQ6IFwiOFwiLFxuICAgICAgSGlnaEJpdDogXCI3XCIsXG4gICAgICBTZWdtZW50YXRpb25UeXBlOiBcIkZSQUNUSU9OQUxcIixcbiAgICAgIFNlZ21lbnRhdGlvbkZyYWN0aW9uYWxUeXBlOiBcIlBST0JBQklMSVRZXCIsXG4gICAgICBNYXhpbXVtRnJhY3Rpb25hbFZhbHVlOiBcIjI1NVwiXG4gICAgfSk7XG4gICAgc2VnbWVudGF0aW9uLmRhdGFzZXQuX21ldGEuVHJhbnNmZXJTeW50YXhVSUQgPSB7XG4gICAgICBWYWx1ZTogW1wiMS4yLjg0MC4xMDAwOC4xLjIuNVwiXSxcbiAgICAgIHZyOiBcIlVJXCJcbiAgICB9O1xuICAgIHNlZ21lbnRhdGlvbi5kYXRhc2V0Ll92ck1hcC5QaXhlbERhdGEgPSBcIk9CXCI7XG4gICAgc2VnbWVudGF0aW9uLmRhdGFzZXQuUGl4ZWxEYXRhID0gcmxlRW5jb2RlZEZyYW1lcztcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBubyBybGVFbmNvZGluZywgYXQgbGVhc3QgYml0cGFjayB0aGUgZGF0YS5cbiAgICBzZWdtZW50YXRpb24uYml0UGFja1BpeGVsRGF0YSgpO1xuICB9XG5cbiAgdmFyIHNlZ0Jsb2IgPSBkYXRhc2V0VG9CbG9iKHNlZ21lbnRhdGlvbi5kYXRhc2V0KTtcbiAgcmV0dXJuIHNlZ0Jsb2I7XG59XG5cbmZ1bmN0aW9uIF9nZXRMYWJlbG1hcHNGcm9tUmVmZXJuZWNlZEZyYW1lSW5kaWNpZXMobGFiZWxtYXAzRCwgcmVmZXJlbmNlZEZyYW1lSW5kaWNpZXMpIHtcbiAgdmFyIGxhYmVsbWFwczJEID0gbGFiZWxtYXAzRC5sYWJlbG1hcHMyRDtcbiAgdmFyIGxhYmVsbWFwcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVmZXJlbmNlZEZyYW1lSW5kaWNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnJhbWUgPSByZWZlcmVuY2VkRnJhbWVJbmRpY2llc1tpXTtcbiAgICBsYWJlbG1hcHMucHVzaChsYWJlbG1hcHMyRFtmcmFtZV0ucGl4ZWxEYXRhKTtcbiAgfVxuXG4gIHJldHVybiBsYWJlbG1hcHM7XG59XG4vKipcbiAqIF9jcmVhdGVTZWdGcm9tSW1hZ2VzIC0gZGVzY3JpcHRpb25cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gaW1hZ2VzICAgIEFuIGFycmF5IG9mIHRoZSBjb3JuZXJzdG9uZSBpbWFnZSBvYmplY3RzLlxuICogQHBhcmFtICB7Qm9vbGVhbn0gaXNNdWx0aWZyYW1lIFdoZXRoZXIgdGhlIGltYWdlcyBhcmUgbXVsdGlmcmFtZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgICAgICAgICBUaGUgU2VnIGRlcml2ZWQgZGF0YVNldC5cbiAqL1xuXG5cbmZ1bmN0aW9uIF9jcmVhdGVTZWdGcm9tSW1hZ2VzJDEoaW1hZ2VzLCBpc011bHRpZnJhbWUsIG9wdGlvbnMpIHtcbiAgdmFyIGRhdGFzZXRzID0gW107XG5cbiAgaWYgKGlzTXVsdGlmcmFtZSkge1xuICAgIHZhciBpbWFnZSA9IGltYWdlc1swXTtcbiAgICB2YXIgYXJyYXlCdWZmZXIgPSBpbWFnZS5kYXRhLmJ5dGVBcnJheS5idWZmZXI7XG4gICAgdmFyIGRpY29tRGF0YSA9IERpY29tTWVzc2FnZS5yZWFkRmlsZShhcnJheUJ1ZmZlcik7XG4gICAgdmFyIGRhdGFzZXQgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hdHVyYWxpemVEYXRhc2V0KGRpY29tRGF0YS5kaWN0KTtcbiAgICBkYXRhc2V0Ll9tZXRhID0gRGljb21NZXRhRGljdGlvbmFyeS5uYW1pZnlEYXRhc2V0KGRpY29tRGF0YS5tZXRhKTtcbiAgICBkYXRhc2V0cy5wdXNoKGRhdGFzZXQpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgX2ltYWdlID0gaW1hZ2VzW2ldO1xuICAgICAgdmFyIF9hcnJheUJ1ZmZlciA9IF9pbWFnZS5kYXRhLmJ5dGVBcnJheS5idWZmZXI7XG5cbiAgICAgIHZhciBfZGljb21EYXRhID0gRGljb21NZXNzYWdlLnJlYWRGaWxlKF9hcnJheUJ1ZmZlcik7XG5cbiAgICAgIHZhciBfZGF0YXNldCA9IERpY29tTWV0YURpY3Rpb25hcnkubmF0dXJhbGl6ZURhdGFzZXQoX2RpY29tRGF0YS5kaWN0KTtcblxuICAgICAgX2RhdGFzZXQuX21ldGEgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hbWlmeURhdGFzZXQoX2RpY29tRGF0YS5tZXRhKTtcbiAgICAgIGRhdGFzZXRzLnB1c2goX2RhdGFzZXQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtdWx0aWZyYW1lID0gTm9ybWFsaXplci5ub3JtYWxpemVUb0RhdGFzZXQoZGF0YXNldHMpO1xuICByZXR1cm4gbmV3IFNlZ21lbnRhdGlvbihbbXVsdGlmcmFtZV0sIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBnZW5lcmF0ZVRvb2xTdGF0ZSAtIEdpdmVuIGEgc2V0IG9mIGNvcm5yc3RvbmVUb29scyBpbWFnZUlkcyBhbmQgYSBTZWdtZW50YXRpb24gYnVmZmVyLFxuICogZGVyaXZlIGNvcm5lcnN0b25lVG9vbHMgdG9vbFN0YXRlIGFuZCBicnVzaCBtZXRhZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmdbXX0gaW1hZ2VJZHMgICAgQW4gYXJyYXkgb2YgdGhlIGltYWdlSWRzLlxuICogQHBhcmFtICB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBTRUcgYXJyYXlCdWZmZXIuXG4gKiBAcGFyYW0geyp9IG1ldGFkYXRhUHJvdmlkZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9ICBUaGUgdG9vbFN0YXRlIGFuZCBhbiBvYmplY3QgZnJvbSB3aGljaCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICBzZWdtZW50IG1ldGFkYXRhIGNhbiBiZSBkZXJpdmVkLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVUb29sU3RhdGUkMShpbWFnZUlkcywgYXJyYXlCdWZmZXIsIG1ldGFkYXRhUHJvdmlkZXIpIHtcbiAgdmFyIGRpY29tRGF0YSA9IERpY29tTWVzc2FnZS5yZWFkRmlsZShhcnJheUJ1ZmZlcik7XG4gIHZhciBkYXRhc2V0ID0gRGljb21NZXRhRGljdGlvbmFyeS5uYXR1cmFsaXplRGF0YXNldChkaWNvbURhdGEuZGljdCk7XG4gIGRhdGFzZXQuX21ldGEgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5Lm5hbWlmeURhdGFzZXQoZGljb21EYXRhLm1ldGEpO1xuICB2YXIgbXVsdGlmcmFtZSA9IE5vcm1hbGl6ZXIubm9ybWFsaXplVG9EYXRhc2V0KFtkYXRhc2V0XSk7XG4gIHZhciBpbWFnZVBsYW5lTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJpbWFnZVBsYW5lTW9kdWxlXCIsIGltYWdlSWRzWzBdKTtcbiAgY29uc29sZS53YXJuKFwiTm90ZSB0aGUgY29ybmVyc3RvbmVUb29scyA0LjAgY3VycmVudGx5IGFzc3VtZXMgdGhlIGxhYmVsbWFwcyBhcmUgbm9uLW92ZXJsYXBwaW5nLiBPdmVybGFwcGluZyBzZWdtZW50cyB3aWxsIGFsbG9jYXRlIGluY29ycmVjdGx5LiBGZWVsIGZyZWUgdG8gc3VibWl0IGEgUFIgdG8gaW1wcm92ZSB0aGlzIGJlaGF2aW91ciFcIik7XG5cbiAgaWYgKCFpbWFnZVBsYW5lTW9kdWxlKSB7XG4gICAgY29uc29sZS53YXJuKFwiSW5zdWZmaWNpZW50IG1ldGFkYXRhLCBpbWFnZVBsYW5lTW9kdWxlIG1pc3NpbmcuXCIpO1xuICB9XG5cbiAgdmFyIEltYWdlT3JpZW50YXRpb25QYXRpZW50ID0gQXJyYXkuaXNBcnJheShpbWFnZVBsYW5lTW9kdWxlLnJvd0Nvc2luZXMpID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpbWFnZVBsYW5lTW9kdWxlLnJvd0Nvc2luZXMpLCBfdG9Db25zdW1hYmxlQXJyYXkoaW1hZ2VQbGFuZU1vZHVsZS5jb2x1bW5Db3NpbmVzKSkgOiBbaW1hZ2VQbGFuZU1vZHVsZS5yb3dDb3NpbmVzLngsIGltYWdlUGxhbmVNb2R1bGUucm93Q29zaW5lcy55LCBpbWFnZVBsYW5lTW9kdWxlLnJvd0Nvc2luZXMueiwgaW1hZ2VQbGFuZU1vZHVsZS5jb2x1bW5Db3NpbmVzLngsIGltYWdlUGxhbmVNb2R1bGUuY29sdW1uQ29zaW5lcy55LCBpbWFnZVBsYW5lTW9kdWxlLmNvbHVtbkNvc2luZXMuel07IC8vIEdldCBJT1AgZnJvbSByZWYgc2VyaWVzLCBjb21wdXRlIHN1cHBvcnRlZCBvcmllbnRhdGlvbnM6XG5cbiAgdmFyIHZhbGlkT3JpZW50YXRpb25zID0gZ2V0VmFsaWRPcmllbnRhdGlvbnMkMShJbWFnZU9yaWVudGF0aW9uUGF0aWVudCk7XG4gIHZhciBTaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UgPSBtdWx0aWZyYW1lLlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZTtcbiAgdmFyIHNoYXJlZEltYWdlT3JpZW50YXRpb25QYXRpZW50ID0gU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBsYW5lT3JpZW50YXRpb25TZXF1ZW5jZSA/IFNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5QbGFuZU9yaWVudGF0aW9uU2VxdWVuY2UuSW1hZ2VPcmllbnRhdGlvblBhdGllbnQgOiB1bmRlZmluZWQ7XG4gIHZhciBzbGljZUxlbmd0aCA9IG11bHRpZnJhbWUuQ29sdW1ucyAqIG11bHRpZnJhbWUuUm93cztcbiAgdmFyIHNlZ01ldGFkYXRhID0gZ2V0U2VnbWVudE1ldGFkYXRhJDEobXVsdGlmcmFtZSk7XG4gIHZhciBUcmFuc2ZlclN5bnRheFVJRCA9IG11bHRpZnJhbWUuX21ldGEuVHJhbnNmZXJTeW50YXhVSUQuVmFsdWVbMF07XG4gIHZhciBwaXhlbERhdGE7XG5cbiAgaWYgKFRyYW5zZmVyU3ludGF4VUlEID09PSBcIjEuMi44NDAuMTAwMDguMS4yLjVcIikge1xuICAgIHZhciBybGVFbmNvZGVkRnJhbWVzID0gQXJyYXkuaXNBcnJheShtdWx0aWZyYW1lLlBpeGVsRGF0YSkgPyBtdWx0aWZyYW1lLlBpeGVsRGF0YSA6IFttdWx0aWZyYW1lLlBpeGVsRGF0YV07XG4gICAgcGl4ZWxEYXRhID0gZGVjb2RlKHJsZUVuY29kZWRGcmFtZXMsIG11bHRpZnJhbWUuUm93cywgbXVsdGlmcmFtZS5Db2x1bW5zKTtcblxuICAgIGlmIChtdWx0aWZyYW1lLkJpdHNTdG9yZWQgPT09IDEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk5vIGltcGxlbWVudGF0aW9uIGZvciBybGUgKyBiaXRiYWNraW5nLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGl4ZWxEYXRhID0gdW5wYWNrUGl4ZWxEYXRhJDEobXVsdGlmcmFtZSk7XG4gIH1cblxuICB2YXIgYXJyYXlCdWZmZXJMZW5ndGggPSBzbGljZUxlbmd0aCAqIGltYWdlSWRzLmxlbmd0aCAqIDI7IC8vIDIgYnl0ZXMgcGVyIGxhYmVsIHZveGVsIGluIGNzdDQuXG5cbiAgdmFyIGxhYmVsbWFwQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGFycmF5QnVmZmVyTGVuZ3RoKTtcbiAgdmFyIFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlID0gbXVsdGlmcmFtZS5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZTtcbiAgdmFyIHNlZ21lbnRzT25GcmFtZSA9IFtdO1xuICB2YXIgaW5QbGFuZSA9IHRydWU7XG5cbiAgdmFyIF9sb29wNCA9IGZ1bmN0aW9uIF9sb29wNChpKSB7XG4gICAgdmFyIFBlckZyYW1lRnVuY3Rpb25hbEdyb3VwcyA9IFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlW2ldO1xuICAgIHZhciBJbWFnZU9yaWVudGF0aW9uUGF0aWVudEkgPSBzaGFyZWRJbWFnZU9yaWVudGF0aW9uUGF0aWVudCB8fCBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuUGxhbmVPcmllbnRhdGlvblNlcXVlbmNlLkltYWdlT3JpZW50YXRpb25QYXRpZW50O1xuICAgIHZhciBwaXhlbERhdGFJMkQgPSBuZGFycmF5KG5ldyBVaW50OEFycmF5KHBpeGVsRGF0YS5idWZmZXIsIGkgKiBzbGljZUxlbmd0aCwgc2xpY2VMZW5ndGgpLCBbbXVsdGlmcmFtZS5Sb3dzLCBtdWx0aWZyYW1lLkNvbHVtbnNdKTtcbiAgICB2YXIgYWxpZ25lZFBpeGVsRGF0YUkgPSBhbGlnblBpeGVsRGF0YVdpdGhTb3VyY2VEYXRhJDEocGl4ZWxEYXRhSTJELCBJbWFnZU9yaWVudGF0aW9uUGF0aWVudEksIHZhbGlkT3JpZW50YXRpb25zKTtcblxuICAgIGlmICghYWxpZ25lZFBpeGVsRGF0YUkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlRoaXMgc2VnbWVudGF0aW9uIG9iamVjdCBpcyBub3QgaW4tcGxhbmUgd2l0aCB0aGUgc291cmNlIGRhdGEuIEJhaWxpbmcgb3V0IG9mIElPLiBJdCdkIGJlIGJldHRlciB0byByZW5kZXIgdGhpcyB3aXRoIHZ0a2pzLiBcIik7XG4gICAgICBpblBsYW5lID0gZmFsc2U7XG4gICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50SW5kZXggPSBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuU2VnbWVudElkZW50aWZpY2F0aW9uU2VxdWVuY2UuUmVmZXJlbmNlZFNlZ21lbnROdW1iZXI7XG4gICAgdmFyIFNvdXJjZUltYWdlU2VxdWVuY2UgPSB2b2lkIDA7XG5cbiAgICBpZiAoU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLkRlcml2YXRpb25JbWFnZVNlcXVlbmNlICYmIFNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5EZXJpdmF0aW9uSW1hZ2VTZXF1ZW5jZS5Tb3VyY2VJbWFnZVNlcXVlbmNlKSB7XG4gICAgICBTb3VyY2VJbWFnZVNlcXVlbmNlID0gU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLkRlcml2YXRpb25JbWFnZVNlcXVlbmNlLlNvdXJjZUltYWdlU2VxdWVuY2VbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIFNvdXJjZUltYWdlU2VxdWVuY2UgPSBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMuRGVyaXZhdGlvbkltYWdlU2VxdWVuY2UuU291cmNlSW1hZ2VTZXF1ZW5jZTtcbiAgICB9XG5cbiAgICB2YXIgaW1hZ2VJZCA9IGdldEltYWdlSWRPZlNvdXJjZUltYWdlJDEoU291cmNlSW1hZ2VTZXF1ZW5jZSwgaW1hZ2VJZHMsIG1ldGFkYXRhUHJvdmlkZXIpO1xuXG4gICAgaWYgKCFpbWFnZUlkKSB7XG4gICAgICAvLyBJbWFnZSBub3QgcHJlc2VudCBpbiBzdGFjaywgY2FuJ3QgaW1wb3J0IHRoaXMgZnJhbWUuXG4gICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgIH1cblxuICAgIHZhciBpbWFnZUlkSW5kZXggPSBpbWFnZUlkcy5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50ID09PSBpbWFnZUlkO1xuICAgIH0pO1xuICAgIHZhciBieXRlT2Zmc2V0ID0gc2xpY2VMZW5ndGggKiAyICogaW1hZ2VJZEluZGV4OyAvLyAyIGJ5dGVzL3BpeGVsXG5cbiAgICB2YXIgbGFiZWxtYXAyRFZpZXcgPSBuZXcgVWludDE2QXJyYXkobGFiZWxtYXBCdWZmZXIsIGJ5dGVPZmZzZXQsIHNsaWNlTGVuZ3RoKTtcbiAgICB2YXIgZGF0YSA9IGFsaWduZWRQaXhlbERhdGFJLmRhdGE7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFsaWduZWRQaXhlbERhdGFJLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChkYXRhW2pdKSB7XG4gICAgICAgIGxhYmVsbWFwMkRWaWV3W2pdID0gc2VnbWVudEluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2VnbWVudHNPbkZyYW1lW2ltYWdlSWRJbmRleF0pIHtcbiAgICAgIHNlZ21lbnRzT25GcmFtZVtpbWFnZUlkSW5kZXhdID0gW107XG4gICAgfVxuXG4gICAgc2VnbWVudHNPbkZyYW1lW2ltYWdlSWRJbmRleF0ucHVzaChzZWdtZW50SW5kZXgpO1xuICB9O1xuXG4gIF9sb29wMzogZm9yICh2YXIgaSA9IDA7IGkgPCBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfcmV0ID0gX2xvb3A0KGkpO1xuXG4gICAgc3dpdGNoIChfcmV0KSB7XG4gICAgICBjYXNlIFwiYnJlYWtcIjpcbiAgICAgICAgYnJlYWsgX2xvb3AzO1xuXG4gICAgICBjYXNlIFwiY29udGludWVcIjpcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpblBsYW5lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsYWJlbG1hcEJ1ZmZlcjogbGFiZWxtYXBCdWZmZXIsXG4gICAgc2VnTWV0YWRhdGE6IHNlZ01ldGFkYXRhLFxuICAgIHNlZ21lbnRzT25GcmFtZTogc2VnbWVudHNPbkZyYW1lXG4gIH07XG59XG4vKipcbiAqIHVucGFja1BpeGVsRGF0YSAtIFVucGFja3MgYml0cGFja2VkIHBpeGVsRGF0YSBpZiB0aGUgU2VnbWVudGF0aW9uIGlzIEJJTkFSWS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG11bHRpZnJhbWUgVGhlIG11bHRpZnJhbWUgZGF0YXNldC5cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgICAgVGhlIHVucGFja2VkIHBpeGVsRGF0YS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVucGFja1BpeGVsRGF0YSQxKG11bHRpZnJhbWUpIHtcbiAgdmFyIHNlZ1R5cGUgPSBtdWx0aWZyYW1lLlNlZ21lbnRhdGlvblR5cGU7XG5cbiAgaWYgKHNlZ1R5cGUgPT09IFwiQklOQVJZXCIpIHtcbiAgICByZXR1cm4gQml0QXJyYXkudW5wYWNrKG11bHRpZnJhbWUuUGl4ZWxEYXRhKTtcbiAgfVxuXG4gIHZhciBwaXhlbERhdGEgPSBuZXcgVWludDhBcnJheShtdWx0aWZyYW1lLlBpeGVsRGF0YSk7XG4gIHZhciBtYXggPSBtdWx0aWZyYW1lLk1heGltdW1GcmFjdGlvbmFsVmFsdWU7XG4gIHZhciBvbmx5TWF4QW5kWmVybyA9IHBpeGVsRGF0YS5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgIT09IDAgJiYgZWxlbWVudCAhPT0gbWF4O1xuICB9KSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmICghb25seU1heEFuZFplcm8pIHtcbiAgICBsaWIud2FybihcIlRoaXMgaXMgYSBmcmFjdGlvbmFsIHNlZ21lbnRhdGlvbiwgd2hpY2ggaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpYi53YXJuKFwiVGhpcyBzZWdtZW50YXRpb24gb2JqZWN0IGlzIGFjdHVhbGx5IGJpbmFyeS4uLiBwcm9jZXNzaW5nIGFzIHN1Y2guXCIpO1xuICByZXR1cm4gcGl4ZWxEYXRhO1xufVxuLyoqXG4gKiBnZXRJbWFnZUlkT2ZTb3VyY2VJbWFnZSAtIFJldHVybnMgdGhlIENvcm5lcnN0b25lIGltYWdlSWQgb2YgdGhlIHNvdXJjZSBpbWFnZS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IFNvdXJjZUltYWdlU2VxdWVuY2UgU2VxdWVuY2UgZGVzY3JpYmluZyB0aGUgc291cmNlIGltYWdlLlxuICogQHBhcmFtICB7U3RyaW5nW119IGltYWdlSWRzICAgICAgICAgIEEgbGlzdCBvZiBpbWFnZUlkcy5cbiAqIEBwYXJhbSAge09iamVjdH0gbWV0YWRhdGFQcm92aWRlciAgICBBIENvcm5lcnN0b25lIG1ldGFkYXRhUHJvdmlkZXIgdG8gcXVlcnlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YSBmcm9tIGltYWdlSWRzLlxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgIFRoZSBjb3JyZXNwb25kaW5nIGltYWdlSWQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbWFnZUlkT2ZTb3VyY2VJbWFnZSQxKFNvdXJjZUltYWdlU2VxdWVuY2UsIGltYWdlSWRzLCBtZXRhZGF0YVByb3ZpZGVyKSB7XG4gIHZhciBSZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQgPSBTb3VyY2VJbWFnZVNlcXVlbmNlLlJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgIFJlZmVyZW5jZWRGcmFtZU51bWJlciA9IFNvdXJjZUltYWdlU2VxdWVuY2UuUmVmZXJlbmNlZEZyYW1lTnVtYmVyO1xuICByZXR1cm4gUmVmZXJlbmNlZEZyYW1lTnVtYmVyID8gZ2V0SW1hZ2VJZE9mUmVmZXJlbmNlZEZyYW1lJDEoUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlELCBSZWZlcmVuY2VkRnJhbWVOdW1iZXIsIGltYWdlSWRzLCBtZXRhZGF0YVByb3ZpZGVyKSA6IGdldEltYWdlSWRPZlJlZmVyZW5jZWRTaW5nbGVGcmFtZWRTT1BJbnN0YW5jZSQxKFJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCwgaW1hZ2VJZHMsIG1ldGFkYXRhUHJvdmlkZXIpO1xufVxuLyoqXG4gKiBnZXRJbWFnZUlkT2ZSZWZlcmVuY2VkU2luZ2xlRnJhbWVkU09QSW5zdGFuY2UgLSBSZXR1cm5zIHRoZSBpbWFnZUlkXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBzcGVjaWZpZWQgc29wSW5zdGFuY2VVaWQgZm9yIHNpbmdsZS1mcmFtZSBpbWFnZXMuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzb3BJbnN0YW5jZVVpZCAgIFRoZSBzb3BJbnN0YW5jZVVpZCBvZiB0aGUgZGVzaXJlZCBpbWFnZS5cbiAqIEBwYXJhbSAge1N0cmluZ1tdfSBpbWFnZUlkcyAgICAgICAgIFRoZSBsaXN0IG9mIGltYWdlSWRzLlxuICogQHBhcmFtICB7T2JqZWN0fSBtZXRhZGF0YVByb3ZpZGVyIFRoZSBtZXRhZGF0YVByb3ZpZGVyIHRvIG9idGFpbiBzb3BJbnN0YW5jZVVpZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY29ybmVyc3RvbmUgaW1hZ2VJZHMuXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgVGhlIGltYWdlSWQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgc29wSW5zdGFuY2VVaWQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbWFnZUlkT2ZSZWZlcmVuY2VkU2luZ2xlRnJhbWVkU09QSW5zdGFuY2UkMShzb3BJbnN0YW5jZVVpZCwgaW1hZ2VJZHMsIG1ldGFkYXRhUHJvdmlkZXIpIHtcbiAgcmV0dXJuIGltYWdlSWRzLmZpbmQoZnVuY3Rpb24gKGltYWdlSWQpIHtcbiAgICB2YXIgc29wQ29tbW9uTW9kdWxlID0gbWV0YWRhdGFQcm92aWRlci5nZXQoXCJzb3BDb21tb25Nb2R1bGVcIiwgaW1hZ2VJZCk7XG5cbiAgICBpZiAoIXNvcENvbW1vbk1vZHVsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzb3BDb21tb25Nb2R1bGUuc29wSW5zdGFuY2VVSUQgPT09IHNvcEluc3RhbmNlVWlkO1xuICB9KTtcbn1cbi8qKlxuICogZ2V0SW1hZ2VJZE9mUmVmZXJlbmNlZEZyYW1lIC0gUmV0dXJucyB0aGUgaW1hZ2VJZCBjb3JyZXNwb25kaW5nIHRvIHRoZVxuICogc3BlY2lmaWVkIHNvcEluc3RhbmNlVWlkIGFuZCBmcmFtZU51bWJlciBmb3IgbXVsdGktZnJhbWUgaW1hZ2VzLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc29wSW5zdGFuY2VVaWQgICBUaGUgc29wSW5zdGFuY2VVaWQgb2YgdGhlIGRlc2lyZWQgaW1hZ2UuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGZyYW1lTnVtYmVyICAgICAgVGhlIGZyYW1lIG51bWJlci5cbiAqIEBwYXJhbSAge1N0cmluZ30gaW1hZ2VJZHMgICAgICAgICBUaGUgbGlzdCBvZiBpbWFnZUlkcy5cbiAqIEBwYXJhbSAge09iamVjdH0gbWV0YWRhdGFQcm92aWRlciBUaGUgbWV0YWRhdGFQcm92aWRlciB0byBvYnRhaW4gc29wSW5zdGFuY2VVaWRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY29ybmVyc3RvbmUgaW1hZ2VJZHMuXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgVGhlIGltYWdlSWQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgc29wSW5zdGFuY2VVaWQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbWFnZUlkT2ZSZWZlcmVuY2VkRnJhbWUkMShzb3BJbnN0YW5jZVVpZCwgZnJhbWVOdW1iZXIsIGltYWdlSWRzLCBtZXRhZGF0YVByb3ZpZGVyKSB7XG4gIHZhciBpbWFnZUlkID0gaW1hZ2VJZHMuZmluZChmdW5jdGlvbiAoaW1hZ2VJZCkge1xuICAgIHZhciBzb3BDb21tb25Nb2R1bGUgPSBtZXRhZGF0YVByb3ZpZGVyLmdldChcInNvcENvbW1vbk1vZHVsZVwiLCBpbWFnZUlkKTtcblxuICAgIGlmICghc29wQ29tbW9uTW9kdWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGltYWdlSWRGcmFtZU51bWJlciA9IE51bWJlcihpbWFnZUlkLnNwbGl0KFwiZnJhbWU9XCIpWzFdKTtcbiAgICByZXR1cm4gKC8vZnJhbWVOdW1iZXIgaXMgemVybyBpbmRleGVkIGZvciBjb3JuZXJzdG9uZVdBRE9JbWFnZUxvYWRlciBpbWFnZSBJZHMuXG4gICAgICBzb3BDb21tb25Nb2R1bGUuc29wSW5zdGFuY2VVSUQgPT09IHNvcEluc3RhbmNlVWlkICYmIGltYWdlSWRGcmFtZU51bWJlciA9PT0gZnJhbWVOdW1iZXIgLSAxXG4gICAgKTtcbiAgfSk7XG4gIHJldHVybiBpbWFnZUlkO1xufVxuLyoqXG4gKiBnZXRWYWxpZE9yaWVudGF0aW9ucyAtIHJldHVybnMgYW4gYXJyYXkgb2YgdmFsaWQgb3JpZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSAge051bWJlcls2XX0gaW9wIFRoZSByb3cgKDAuLjIpIGFuIGNvbHVtbiAoMy4uNSkgZGlyZWN0aW9uIGNvc2luZXMuXG4gKiBAcmV0dXJuIHtOdW1iZXJbOF1bNl19IEFuIGFycmF5IG9mIHZhbGlkIG9yaWVudGF0aW9ucy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZhbGlkT3JpZW50YXRpb25zJDEoaW9wKSB7XG4gIHZhciBvcmllbnRhdGlvbnMgPSBbXTsgLy8gWzAsICAxLCAgMl06IDAsICAgMGhmLCAgIDB2ZlxuICAvLyBbMywgIDQsICA1XTogOTAsICA5MGhmLCAgOTB2ZlxuICAvLyBbNiwgN106ICAgICAgMTgwLCAyNzBcblxuICBvcmllbnRhdGlvbnNbMF0gPSBpb3A7XG4gIG9yaWVudGF0aW9uc1sxXSA9IGZsaXBJbWFnZU9yaWVudGF0aW9uUGF0aWVudC5oKGlvcCk7XG4gIG9yaWVudGF0aW9uc1syXSA9IGZsaXBJbWFnZU9yaWVudGF0aW9uUGF0aWVudC52KGlvcCk7XG4gIHZhciBpb3A5MCA9IHJvdGF0ZURpcmVjdGlvbkNvc2luZXNJblBsYW5lKGlvcCwgTWF0aC5QSSAvIDIpO1xuICBvcmllbnRhdGlvbnNbM10gPSBpb3A5MDtcbiAgb3JpZW50YXRpb25zWzRdID0gZmxpcEltYWdlT3JpZW50YXRpb25QYXRpZW50LmgoaW9wOTApO1xuICBvcmllbnRhdGlvbnNbNV0gPSBmbGlwSW1hZ2VPcmllbnRhdGlvblBhdGllbnQudihpb3A5MCk7XG4gIG9yaWVudGF0aW9uc1s2XSA9IHJvdGF0ZURpcmVjdGlvbkNvc2luZXNJblBsYW5lKGlvcCwgTWF0aC5QSSk7XG4gIG9yaWVudGF0aW9uc1s3XSA9IHJvdGF0ZURpcmVjdGlvbkNvc2luZXNJblBsYW5lKGlvcCwgMS41ICogTWF0aC5QSSk7XG4gIHJldHVybiBvcmllbnRhdGlvbnM7XG59XG4vKipcbiAqIGFsaWduUGl4ZWxEYXRhV2l0aFNvdXJjZURhdGEgLVxuICpcbiAqIEBwYXJhbSB7TmRhcnJheX0gcGl4ZWxEYXRhMkQgVGhlIGRhdGEgdG8gYWxpZ24uXG4gKiBAcGFyYW0gIHtOdW1iZXJbNl19IGlvcCBUaGUgb3JpZW50YXRpb24gb2YgdGhlIGltYWdlIHNsaWNlLlxuICogQHBhcmFtICB7TnVtYmVyWzhdWzZdfSBvcmllbnRhdGlvbnMgICBBbiBhcnJheSBvZiB2YWxpZCBpbWFnZU9yaWVudGF0aW9uUGF0aWVudCB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtOZGFycmF5fSAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYWxpZ25lZCBwaXhlbERhdGEuXG4gKi9cblxuXG5mdW5jdGlvbiBhbGlnblBpeGVsRGF0YVdpdGhTb3VyY2VEYXRhJDEocGl4ZWxEYXRhMkQsIGlvcCwgb3JpZW50YXRpb25zKSB7XG4gIGlmIChjb21wYXJlSU9QJDEoaW9wLCBvcmllbnRhdGlvbnNbMF0pKSB7XG4gICAgLy9TYW1lIG9yaWVudGF0aW9uLlxuICAgIHJldHVybiBwaXhlbERhdGEyRDtcbiAgfSBlbHNlIGlmIChjb21wYXJlSU9QJDEoaW9wLCBvcmllbnRhdGlvbnNbMV0pKSB7XG4gICAgLy9GbGlwcGVkIHZlcnRpY2FsbHkuXG4gICAgcmV0dXJuIGZsaXBNYXRyaXgyRC52KHBpeGVsRGF0YTJEKTtcbiAgfSBlbHNlIGlmIChjb21wYXJlSU9QJDEoaW9wLCBvcmllbnRhdGlvbnNbMl0pKSB7XG4gICAgLy9GbGlwcGVkIGhvcml6b250YWxseS5cbiAgICByZXR1cm4gZmxpcE1hdHJpeDJELmgocGl4ZWxEYXRhMkQpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AkMShpb3AsIG9yaWVudGF0aW9uc1szXSkpIHtcbiAgICAvL1JvdGF0ZWQgOTAgZGVncmVlcy5cbiAgICByZXR1cm4gcm90YXRlTWF0cml4OTAyRChwaXhlbERhdGEyRCk7XG4gIH0gZWxzZSBpZiAoY29tcGFyZUlPUCQxKGlvcCwgb3JpZW50YXRpb25zWzRdKSkge1xuICAgIC8vUm90YXRlZCA5MCBkZWdyZWVzIGFuZCBmbGlwZWQgaG9yaXpvbnRhbGx5LlxuICAgIHJldHVybiBmbGlwTWF0cml4MkQuaChyb3RhdGVNYXRyaXg5MDJEKHBpeGVsRGF0YTJEKSk7XG4gIH0gZWxzZSBpZiAoY29tcGFyZUlPUCQxKGlvcCwgb3JpZW50YXRpb25zWzVdKSkge1xuICAgIC8vUm90YXRlZCA5MCBkZWdyZWVzIGFuZCBmbGlwZWQgdmVydGljYWxseS5cbiAgICByZXR1cm4gZmxpcE1hdHJpeDJELnYocm90YXRlTWF0cml4OTAyRChwaXhlbERhdGEyRCkpO1xuICB9IGVsc2UgaWYgKGNvbXBhcmVJT1AkMShpb3AsIG9yaWVudGF0aW9uc1s2XSkpIHtcbiAgICAvL1JvdGF0ZWQgMTgwIGRlZ3JlZXMuIC8vIFRPRE8gLT4gRG8gdGhpcyBtb3JlIGVmZmVjaWVudGx5LCB0aGVyZSBpcyBhIDE6MSBtYXBwaW5nIGxpa2UgOTAgZGVncmVlIHJvdGF0aW9uLlxuICAgIHJldHVybiByb3RhdGVNYXRyaXg5MDJEKHJvdGF0ZU1hdHJpeDkwMkQocGl4ZWxEYXRhMkQpKTtcbiAgfSBlbHNlIGlmIChjb21wYXJlSU9QJDEoaW9wLCBvcmllbnRhdGlvbnNbN10pKSB7XG4gICAgLy9Sb3RhdGVkIDI3MCBkZWdyZWVzLiAgLy8gVE9ETyAtPiBEbyB0aGlzIG1vcmUgZWZmZWNpZW50bHksIHRoZXJlIGlzIGEgMToxIG1hcHBpbmcgbGlrZSA5MCBkZWdyZWUgcm90YXRpb24uXG4gICAgcmV0dXJuIHJvdGF0ZU1hdHJpeDkwMkQocm90YXRlTWF0cml4OTAyRChyb3RhdGVNYXRyaXg5MDJEKHBpeGVsRGF0YTJEKSkpO1xuICB9XG59XG5cbnZhciBkeCQxID0gMWUtNTtcbi8qKlxuICogY29tcGFyZUlPUCAtIFJldHVybnMgdHJ1ZSBpZiBpb3AxIGFuZCBpb3AyIGFyZSBlcXVhbFxuICogd2l0aGluIGEgdG9sbGVyYW5jZSwgZHguXG4gKlxuICogQHBhcmFtICB7TnVtYmVyWzZdfSBpb3AxIEFuIEltYWdlT3JpZW50YXRpb25QYXRpZW50IGFycmF5LlxuICogQHBhcmFtICB7TnVtYmVyWzZdfSBpb3AyIEFuIEltYWdlT3JpZW50YXRpb25QYXRpZW50IGFycmF5LlxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICBUcnVlIGlmIGlvcDEgYW5kIGlvcDIgYXJlIGVxdWFsLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVJT1AkMShpb3AxLCBpb3AyKSB7XG4gIHJldHVybiBNYXRoLmFicyhpb3AxWzBdIC0gaW9wMlswXSkgPCBkeCQxICYmIE1hdGguYWJzKGlvcDFbMV0gLSBpb3AyWzFdKSA8IGR4JDEgJiYgTWF0aC5hYnMoaW9wMVsyXSAtIGlvcDJbMl0pIDwgZHgkMSAmJiBNYXRoLmFicyhpb3AxWzNdIC0gaW9wMlszXSkgPCBkeCQxICYmIE1hdGguYWJzKGlvcDFbNF0gLSBpb3AyWzRdKSA8IGR4JDEgJiYgTWF0aC5hYnMoaW9wMVs1XSAtIGlvcDJbNV0pIDwgZHgkMTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VnbWVudE1ldGFkYXRhJDEobXVsdGlmcmFtZSkge1xuICB2YXIgc2VnbWVudFNlcXVlbmNlID0gbXVsdGlmcmFtZS5TZWdtZW50U2VxdWVuY2U7XG4gIHZhciBkYXRhID0gW107XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VnbWVudFNlcXVlbmNlKSkge1xuICAgIGRhdGEgPSBbdW5kZWZpbmVkXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNlZ21lbnRTZXF1ZW5jZSkpO1xuICB9IGVsc2Uge1xuICAgIC8vIE9ubHkgb25lIHNlZ21lbnQsIHdpbGwgYmUgc3RvcmVkIGFzIGFuIG9iamVjdC5cbiAgICBkYXRhID0gW3VuZGVmaW5lZCwgc2VnbWVudFNlcXVlbmNlXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2VyaWVzSW5zdGFuY2VVaWQ6IG11bHRpZnJhbWUuUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlLlNlcmllc0luc3RhbmNlVUlELFxuICAgIGRhdGE6IGRhdGFcbiAgfTtcbn1cblxudmFyIFNlZ21lbnRhdGlvbiQzID0ge1xuICBnZW5lcmF0ZVNlZ21lbnRhdGlvbjogZ2VuZXJhdGVTZWdtZW50YXRpb24kMixcbiAgZ2VuZXJhdGVUb29sU3RhdGU6IGdlbmVyYXRlVG9vbFN0YXRlJDIsXG4gIGZpbGxTZWdtZW50YXRpb246IGZpbGxTZWdtZW50YXRpb24kMVxufTtcbi8qKlxuICogZ2VuZXJhdGVTZWdtZW50YXRpb24gLSBHZW5lcmF0ZXMgYSBESUNPTSBTZWdtZW50YXRpb24gb2JqZWN0IGdpdmVuIGNvcm5lcnN0b25lVG9vbHMgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gaW1hZ2VzICAgIEFuIGFycmF5IG9mIHRoZSBjb3JuZXJzdG9uZSBpbWFnZSBvYmplY3RzLlxuICogQHBhcmFtICB7T2JqZWN0fE9iamVjdFtdfSBsYWJlbG1hcHMzRG9yQnJ1c2hEYXRhIEZvciA0Llg6IFRoZSBjb3JuZXJzdG9uZSBgTGFiZWxtYXAzRGAgb2JqZWN0LCBvciBhbiBhcnJheSBvZiBvYmplY3RzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvciAzLlg6IHRoZSBCcnVzaERhdGEuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGNvcm5lcnN0b25lVG9vbHNWZXJzaW9uIFRoZSBjb3JuZXJzdG9uZVRvb2xzIG1ham9yIHZlcnNpb24gdG8gbWFwIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudGF0aW9uJDIoaW1hZ2VzLCBsYWJlbG1hcHMzRG9yQnJ1c2hEYXRhKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgaW5jbHVkZVNsaWNlU3BhY2luZzogdHJ1ZVxuICB9O1xuICB2YXIgY29ybmVyc3RvbmVUb29sc1ZlcnNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDQ7XG5cbiAgaWYgKGNvcm5lcnN0b25lVG9vbHNWZXJzaW9uID09PSA0KSB7XG4gICAgcmV0dXJuIFNlZ21lbnRhdGlvbiQyLmdlbmVyYXRlU2VnbWVudGF0aW9uKGltYWdlcywgbGFiZWxtYXBzM0RvckJydXNoRGF0YSwgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAoY29ybmVyc3RvbmVUb29sc1ZlcnNpb24gPT09IDMpIHtcbiAgICByZXR1cm4gU2VnbWVudGF0aW9uJDEuZ2VuZXJhdGVTZWdtZW50YXRpb24oaW1hZ2VzLCBsYWJlbG1hcHMzRG9yQnJ1c2hEYXRhLCBvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnNvbGUud2FybihcIk5vIGdlbmVyYXRlU2VnbWVudGF0aW9uIGFkYXBhdGVyIGZvciBjb3JuZXJzdG9uZSB2ZXJzaW9uIFwiLmNvbmNhdChjb3JuZXJzdG9uZVRvb2xzVmVyc2lvbiwgXCIsIGV4aXRpbmcuXCIpKTtcbn1cbi8qKlxuICogZ2VuZXJhdGVUb29sU3RhdGUgLSBHaXZlbiBhIHNldCBvZiBjb3JucnN0b25lVG9vbHMgaW1hZ2VJZHMgYW5kIGEgU2VnbWVudGF0aW9uIGJ1ZmZlcixcbiAqIGRlcml2ZSBjb3JuZXJzdG9uZVRvb2xzIHRvb2xTdGF0ZSBhbmQgYnJ1c2ggbWV0YWRhdGEuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nW119IGltYWdlSWRzICAgIEFuIGFycmF5IG9mIHRoZSBpbWFnZUlkcy5cbiAqIEBwYXJhbSAge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgU0VHIGFycmF5QnVmZmVyLlxuICogQHBhcmFtIHsqfSBtZXRhZGF0YVByb3ZpZGVyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgVGhlIHRvb2xTdGF0ZSBhbmQgYW4gb2JqZWN0IGZyb20gd2hpY2ggdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgc2VnbWVudCBtZXRhZGF0YSBjYW4gYmUgZGVyaXZlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlVG9vbFN0YXRlJDIoaW1hZ2VJZHMsIGFycmF5QnVmZmVyLCBtZXRhZGF0YVByb3ZpZGVyKSB7XG4gIHZhciBjb3JuZXJzdG9uZVRvb2xzVmVyc2lvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNDtcblxuICBpZiAoY29ybmVyc3RvbmVUb29sc1ZlcnNpb24gPT09IDQpIHtcbiAgICByZXR1cm4gU2VnbWVudGF0aW9uJDIuZ2VuZXJhdGVUb29sU3RhdGUoaW1hZ2VJZHMsIGFycmF5QnVmZmVyLCBtZXRhZGF0YVByb3ZpZGVyKTtcbiAgfVxuXG4gIGlmIChjb3JuZXJzdG9uZVRvb2xzVmVyc2lvbiA9PT0gMykge1xuICAgIHJldHVybiBTZWdtZW50YXRpb24kMS5nZW5lcmF0ZVRvb2xTdGF0ZShpbWFnZUlkcywgYXJyYXlCdWZmZXIsIG1ldGFkYXRhUHJvdmlkZXIpO1xuICB9XG5cbiAgY29uc29sZS53YXJuKFwiTm8gZ2VuZXJhdGVUb29sU3RhdGUgYWRhcGF0ZXIgZm9yIGNvcm5lcnN0b25lIHZlcnNpb24gXCIuY29uY2F0KGNvcm5lcnN0b25lVG9vbHNWZXJzaW9uLCBcIiwgZXhpdGluZy5cIikpO1xufVxuLyoqXG4gKiBmaWxsU2VnbWVudGF0aW9uIC0gRmlsbHMgYSBkZXJpdmVkIHNlZ21lbnRhdGlvbiBkYXRhc2V0IHdpdGggY29ybmVyc3RvbmVUb29scyBgTGFiZWxNYXAzRGAgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gc2VnbWVudGF0aW9uIEFuIGVtcHR5IHNlZ21lbnRhdGlvbiBkZXJpdmVkIGRhdGFzZXQuXG4gKiBAcGFyYW0gIHtPYmplY3R8T2JqZWN0W119IGlucHV0TGFiZWxtYXBzM0QgVGhlIGNvcm5lcnN0b25lIGBMYWJlbG1hcDNEYCBvYmplY3QsIG9yIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHVzZXJPcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRvIG92ZXJyaWRlIGRlZmF1bHQgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCbG9ifSAgICAgICAgICAgZGVzY3JpcHRpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbGxTZWdtZW50YXRpb24kMShzZWdtZW50YXRpb24sIGlucHV0TGFiZWxtYXBzM0QpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICBpbmNsdWRlU2xpY2VTcGFjaW5nOiB0cnVlXG4gIH07XG4gIHZhciBjb3JuZXJzdG9uZVRvb2xzVmVyc2lvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNDtcblxuICBpZiAoY29ybmVyc3RvbmVUb29sc1ZlcnNpb24gPT09IDQpIHtcbiAgICByZXR1cm4gU2VnbWVudGF0aW9uJDIuZmlsbFNlZ21lbnRhdGlvbihzZWdtZW50YXRpb24sIGlucHV0TGFiZWxtYXBzM0QsIG9wdGlvbnMpO1xuICB9XG5cbiAgY29uc29sZS53YXJuKFwiTm8gZ2VuZXJhdGVTZWdtZW50YXRpb24gYWRhcGF0ZXIgZm9yIGNvcm5lcnN0b25lIHZlcnNpb24gXCIuY29uY2F0KGNvcm5lcnN0b25lVG9vbHNWZXJzaW9uLCBcIiwgZXhpdGluZy5cIikpO1xufVxuXG52YXIgQ29ybmVyc3RvbmUgPSB7XG4gIExlbmd0aDogTGVuZ3RoJDEsXG4gIEZyZWVoYW5kOiBGcmVlaGFuZCxcbiAgQmlkaXJlY3Rpb25hbDogQmlkaXJlY3Rpb25hbCQxLFxuICBNZWFzdXJlbWVudFJlcG9ydDogTWVhc3VyZW1lbnRSZXBvcnQsXG4gIFNlZ21lbnRhdGlvbjogU2VnbWVudGF0aW9uJDNcbn07XG5cbi8vIFNob3VsZCB3ZSBtb3ZlIGl0IHRvIENvbG9ycy5qc1xuXG5mdW5jdGlvbiBkaWNvbWxhYjJSR0JBKGNpZWxhYikge1xuICB2YXIgcmdiYSA9IENvbG9ycy5kaWNvbWxhYjJSR0IoY2llbGFiKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh4ICogMjU1KTtcbiAgfSk7XG4gIHJnYmEucHVzaCgyNTUpO1xuICByZXR1cm4gcmdiYTtcbn0gLy8gVE9ETzogQ29waWVkIHRoZXNlIGZ1bmN0aW9ucyBpbiBmcm9tIFZUSyBNYXRoIHNvIHdlIGRvbid0IG5lZWQgYSBkZXBlbmRlbmN5LlxuLy8gSSBndWVzcyB3ZSBzaG91bGQgcHV0IHRoZW0gc29tZXdoZXJlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vS2l0d2FyZS92dGstanMvYmxvYi9tYXN0ZXIvU291cmNlcy9Db21tb24vQ29yZS9NYXRoL2luZGV4LmpzXG5cblxuZnVuY3Rpb24gY3Jvc3MoeCwgeSwgb3V0KSB7XG4gIHZhciBaeCA9IHhbMV0gKiB5WzJdIC0geFsyXSAqIHlbMV07XG4gIHZhciBaeSA9IHhbMl0gKiB5WzBdIC0geFswXSAqIHlbMl07XG4gIHZhciBaeiA9IHhbMF0gKiB5WzFdIC0geFsxXSAqIHlbMF07XG4gIG91dFswXSA9IFp4O1xuICBvdXRbMV0gPSBaeTtcbiAgb3V0WzJdID0gWno7XG59XG5cbmZ1bmN0aW9uIG5vcm0oeCkge1xuICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMztcblxuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gTWF0aC5hYnMoeCk7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHhbMF0gKiB4WzBdICsgeFsxXSAqIHhbMV0pO1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIE1hdGguc3FydCh4WzBdICogeFswXSArIHhbMV0gKiB4WzFdICsgeFsyXSAqIHhbMl0pO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHN1bSA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzdW0gKz0geFtpXSAqIHhbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHN1bSk7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKHgpIHtcbiAgdmFyIGRlbiA9IG5vcm0oeCk7XG5cbiAgaWYgKGRlbiAhPT0gMC4wKSB7XG4gICAgeFswXSAvPSBkZW47XG4gICAgeFsxXSAvPSBkZW47XG4gICAgeFsyXSAvPSBkZW47XG4gIH1cblxuICByZXR1cm4gZGVuO1xufVxuXG5mdW5jdGlvbiBzdWJ0cmFjdChhLCBiLCBvdXQpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbn0gLy8gVE9ETzogVGhpcyBpcyBhIHVzZWZ1bCB1dGlsaXR5IG9uIGl0cyBvd24uIFdlIHNob3VsZCBtb3ZlIGl0IHNvbWV3aGVyZT9cbi8vIGRjbWpzLmFkYXB0ZXJzLnZ0ay5NdWx0aWZyYW1lPyBkY21qcy51dGlscz9cblxuXG5mdW5jdGlvbiBnZW9tZXRyeUZyb21GdW5jdGlvbmFsR3JvdXBzKGRhdGFzZXQsIFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwcykge1xuICB2YXIgZ2VvbWV0cnkgPSB7fTtcbiAgdmFyIHBpeGVsTWVhc3VyZXMgPSBkYXRhc2V0LlNoYXJlZEZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZS5QaXhlbE1lYXN1cmVzU2VxdWVuY2U7XG4gIHZhciBwbGFuZU9yaWVudGF0aW9uID0gZGF0YXNldC5TaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UuUGxhbmVPcmllbnRhdGlvblNlcXVlbmNlOyAvLyBGaW5kIHRoZSBvcmlnaW4gb2YgdGhlIHZvbHVtZSBmcm9tIHRoZSBQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMnIEltYWdlUG9zaXRpb25QYXRpZW50IHZhbHVlc1xuICAvL1xuICAvLyBUT0RPOiBhc3N1bWVzIHNvcnRlZCBmcmFtZXMuIFRoaXMgc2hvdWxkIHJlYWQgdGhlIEltYWdlUG9zaXRpb25QYXRpZW50IGZyb20gZWFjaCBmcmFtZSBhbmRcbiAgLy8gc29ydCB0aGVtIHRvIG9idGFpbiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9zaXRpb24gYWxvbmcgdGhlIGFjcXVpc2l0aW9uIGF4aXMuXG5cbiAgdmFyIGZpcnN0RnVuY3Rpb25hbEdyb3VwID0gUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzWzBdO1xuICB2YXIgbGFzdEZ1bmN0aW9uYWxHcm91cCA9IFBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1tQZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHMubGVuZ3RoIC0gMV07XG4gIHZhciBmaXJzdFBvc2l0aW9uID0gZmlyc3RGdW5jdGlvbmFsR3JvdXAuUGxhbmVQb3NpdGlvblNlcXVlbmNlLkltYWdlUG9zaXRpb25QYXRpZW50Lm1hcChOdW1iZXIpO1xuICB2YXIgbGFzdFBvc2l0aW9uID0gbGFzdEZ1bmN0aW9uYWxHcm91cC5QbGFuZVBvc2l0aW9uU2VxdWVuY2UuSW1hZ2VQb3NpdGlvblBhdGllbnQubWFwKE51bWJlcik7XG4gIGdlb21ldHJ5Lm9yaWdpbiA9IGZpcnN0UG9zaXRpb247IC8vIE5COiBESUNPTSBQaXhlbFNwYWNpbmcgaXMgZGVmaW5lZCBhcyBSb3cgdGhlbiBDb2x1bW4sXG4gIC8vIHVubGlrZSBJbWFnZU9yaWVudGF0aW9uUGF0aWVudFxuXG4gIGdlb21ldHJ5LnNwYWNpbmcgPSBbcGl4ZWxNZWFzdXJlcy5QaXhlbFNwYWNpbmdbMV0sIHBpeGVsTWVhc3VyZXMuUGl4ZWxTcGFjaW5nWzBdLCBwaXhlbE1lYXN1cmVzLlNwYWNpbmdCZXR3ZWVuU2xpY2VzXS5tYXAoTnVtYmVyKTtcbiAgZ2VvbWV0cnkuZGltZW5zaW9ucyA9IFtkYXRhc2V0LkNvbHVtbnMsIGRhdGFzZXQuUm93cywgUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzLmxlbmd0aF0ubWFwKE51bWJlcik7XG4gIHZhciBvcmllbnRhdGlvbiA9IHBsYW5lT3JpZW50YXRpb24uSW1hZ2VPcmllbnRhdGlvblBhdGllbnQubWFwKE51bWJlcik7XG4gIHZhciBjb2x1bW5TdGVwVG9QYXRpZW50ID0gb3JpZW50YXRpb24uc2xpY2UoMCwgMyk7XG4gIHZhciByb3dTdGVwVG9QYXRpZW50ID0gb3JpZW50YXRpb24uc2xpY2UoMywgNik7XG4gIGdlb21ldHJ5LnBsYW5lTm9ybWFsID0gW107XG4gIGNyb3NzKGNvbHVtblN0ZXBUb1BhdGllbnQsIHJvd1N0ZXBUb1BhdGllbnQsIGdlb21ldHJ5LnBsYW5lTm9ybWFsKTtcbiAgZ2VvbWV0cnkuc2xpY2VTdGVwID0gW107XG4gIHN1YnRyYWN0KGxhc3RQb3NpdGlvbiwgZmlyc3RQb3NpdGlvbiwgZ2VvbWV0cnkuc2xpY2VTdGVwKTtcbiAgbm9ybWFsaXplKGdlb21ldHJ5LnNsaWNlU3RlcCk7XG4gIGdlb21ldHJ5LmRpcmVjdGlvbiA9IGNvbHVtblN0ZXBUb1BhdGllbnQuY29uY2F0KHJvd1N0ZXBUb1BhdGllbnQpLmNvbmNhdChnZW9tZXRyeS5zbGljZVN0ZXApO1xuICByZXR1cm4gZ2VvbWV0cnk7XG59XG5cbnZhciBTZWdtZW50YXRpb24kNCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlZ21lbnRhdGlvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VnbWVudGF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogUHJvZHVjZXMgYW4gYXJyYXkgb2YgU2VnbWVudHMgZnJvbSBhbiBpbnB1dCBESUNPTSBTZWdtZW50YXRpb24gZGF0YXNldFxuICAgKlxuICAgKiBTZWdtZW50cyBhcmUgcmV0dXJuZWQgd2l0aCBHZW9tZXRyeSB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGVcbiAgICogVlRLIEltYWdlIERhdGEgb2JqZWN0cy5cbiAgICpcbiAgICogQGV4YW1wbGUgRXhhbXBsZSB1c2FnZSB0byBjcmVhdGUgVlRLIFZvbHVtZSBhY3RvcnMgZnJvbSBlYWNoIHNlZ21lbnQ6XG4gICAqXG4gICAqIGNvbnN0IGFjdG9ycyA9IFtdO1xuICAgKiBjb25zdCBzZWdtZW50cyA9IGdlbmVyYXRlVG9vbFN0YXRlKGRhdGFzZXQpO1xuICAgKiBzZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgKiAgIC8vIG5vdyBtYWtlIGFjdG9ycyB1c2luZyB0aGUgc2VnbWVudCBpbmZvcm1hdGlvblxuICAgKiAgIGNvbnN0IHNjYWxhckFycmF5ID0gdnRrLkNvbW1vbi5Db3JlLnZ0a0RhdGFBcnJheS5uZXdJbnN0YW5jZSh7XG4gICAqICAgICAgICBuYW1lOiBcIlNjYWxhcnNcIixcbiAgICogICAgICAgIG51bWJlck9mQ29tcG9uZW50czogMSxcbiAgICogICAgICAgIHZhbHVlczogc2VnbWVudC5waXhlbERhdGEsXG4gICAqICAgIH0pO1xuICAgKlxuICAgKiAgICBjb25zdCBpbWFnZURhdGEgPSB2dGsuQ29tbW9uLkRhdGFNb2RlbC52dGtJbWFnZURhdGEubmV3SW5zdGFuY2UoKTtcbiAgICogICAgaW1hZ2VEYXRhLmdldFBvaW50RGF0YSgpLnNldFNjYWxhcnMoc2NhbGFyQXJyYXkpO1xuICAgKiAgICBpbWFnZURhdGEuc2V0RGltZW5zaW9ucyhnZW9tZXRyeS5kaW1lbnNpb25zKTtcbiAgICogICAgaW1hZ2VEYXRhLnNldFNwYWNpbmcoZ2VvbWV0cnkuc3BhY2luZyk7XG4gICAqICAgIGltYWdlRGF0YS5zZXRPcmlnaW4oZ2VvbWV0cnkub3JpZ2luKTtcbiAgICogICAgaW1hZ2VEYXRhLnNldERpcmVjdGlvbihnZW9tZXRyeS5kaXJlY3Rpb24pO1xuICAgKlxuICAgKiAgICBjb25zdCBtYXBwZXIgPSB2dGsuUmVuZGVyaW5nLkNvcmUudnRrVm9sdW1lTWFwcGVyLm5ld0luc3RhbmNlKCk7XG4gICAqICAgIG1hcHBlci5zZXRJbnB1dERhdGEoaW1hZ2VEYXRhKTtcbiAgICogICAgbWFwcGVyLnNldFNhbXBsZURpc3RhbmNlKDIuKTtcbiAgICpcbiAgICogICAgY29uc3QgYWN0b3IgPSB2dGsuUmVuZGVyaW5nLkNvcmUudnRrVm9sdW1lLm5ld0luc3RhbmNlKCk7XG4gICAqICAgIGFjdG9yLnNldE1hcHBlcihtYXBwZXIpO1xuICAgKlxuICAgKiAgICBhY3RvcnMucHVzaChhY3Rvcik7XG4gICAqIH0pO1xuICAgKlxuICAgKiBAcGFyYW0gZGF0YXNldFxuICAgKiBAcmV0dXJuIHt7fX1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU2VnbWVudGF0aW9uLCBudWxsLCBbe1xuICAgIGtleTogXCJnZW5lcmF0ZVNlZ21lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudHMoZGF0YXNldCkge1xuICAgICAgaWYgKGRhdGFzZXQuU2VnbWVudFNlcXVlbmNlLmNvbnN0cnVjdG9yLm5hbWUgIT09IFwiQXJyYXlcIikge1xuICAgICAgICBkYXRhc2V0LlNlZ21lbnRTZXF1ZW5jZSA9IFtkYXRhc2V0LlNlZ21lbnRTZXF1ZW5jZV07XG4gICAgICB9XG5cbiAgICAgIGRhdGFzZXQuU2VnbWVudFNlcXVlbmNlLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgLy8gVE9ETzogb3RoZXIgaW50ZXJlc3RpbmcgZmllbGRzIGNvdWxkIGJlIGV4dHJhY3RlZCBmcm9tIHRoZSBzZWdtZW50XG4gICAgICAgIC8vIFRPRE86IFJlYWQgU2VnbWVudHNPdmVybGF5IGZpZWxkXG4gICAgICAgIC8vIGh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9tZWRpY2FsL2RpY29tL2N1cnJlbnQvb3V0cHV0L2NodG1sL3BhcnQwMy9zZWN0X0MuOC4yMC4yLmh0bWxcbiAgICAgICAgLy8gVE9ETzogTG9va3MgbGlrZSB2dGtDb2xvciBvbmx5IHdhbnRzIFJHQiBpbiAwLTEgdmFsdWVzLlxuICAgICAgICAvLyBXaHkgd2FzIHRoaXMgZXhhbXBsZSBjb252ZXJ0aW5nIHRvIFJHQkEgd2l0aCAwLTI1NSB2YWx1ZXM/XG4gICAgICAgIHZhciBjb2xvciA9IGRpY29tbGFiMlJHQkEoc2VnbWVudC5SZWNvbW1lbmRlZERpc3BsYXlDSUVMYWJWYWx1ZSk7XG4gICAgICAgIHNlZ21lbnRzW3NlZ21lbnQuU2VnbWVudE51bWJlcl0gPSB7XG4gICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgIGZ1bmN0aW9uYWxHcm91cHM6IFtdLFxuICAgICAgICAgIG9mZnNldDogbnVsbCxcbiAgICAgICAgICBzaXplOiBudWxsLFxuICAgICAgICAgIHBpeGVsRGF0YTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSk7IC8vIG1ha2UgYSBsaXN0IG9mIGZ1bmN0aW9uYWwgZ3JvdXBzIHBlciBzZWdtZW50XG5cbiAgICAgIGRhdGFzZXQuUGVyRnJhbWVGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2UuZm9yRWFjaChmdW5jdGlvbiAoZnVuY3Rpb25hbEdyb3VwKSB7XG4gICAgICAgIHZhciBzZWdtZW50TnVtYmVyID0gZnVuY3Rpb25hbEdyb3VwLlNlZ21lbnRJZGVudGlmaWNhdGlvblNlcXVlbmNlLlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyO1xuICAgICAgICBzZWdtZW50c1tzZWdtZW50TnVtYmVyXS5mdW5jdGlvbmFsR3JvdXBzLnB1c2goZnVuY3Rpb25hbEdyb3VwKTtcbiAgICAgIH0pOyAvLyBkZXRlcm1pbmUgcGVyLXNlZ21lbnQgaW5kZXggaW50byB0aGUgcGl4ZWwgZGF0YVxuICAgICAgLy8gVE9ETzogb25seSBoYW5kbGVzIG9uZS1iaXQtcGVyIHBpeGVsXG5cbiAgICAgIHZhciBmcmFtZVNpemUgPSBNYXRoLmNlaWwoZGF0YXNldC5Sb3dzICogZGF0YXNldC5Db2x1bW5zIC8gOCk7XG4gICAgICB2YXIgbmV4dE9mZnNldCA9IDA7XG4gICAgICBPYmplY3Qua2V5cyhzZWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudE51bWJlcikge1xuICAgICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW3NlZ21lbnROdW1iZXJdO1xuICAgICAgICBzZWdtZW50Lm51bWJlck9mRnJhbWVzID0gc2VnbWVudC5mdW5jdGlvbmFsR3JvdXBzLmxlbmd0aDtcbiAgICAgICAgc2VnbWVudC5zaXplID0gc2VnbWVudC5udW1iZXJPZkZyYW1lcyAqIGZyYW1lU2l6ZTtcbiAgICAgICAgc2VnbWVudC5vZmZzZXQgPSBuZXh0T2Zmc2V0O1xuICAgICAgICBuZXh0T2Zmc2V0ID0gc2VnbWVudC5vZmZzZXQgKyBzZWdtZW50LnNpemU7XG4gICAgICAgIHZhciBwYWNrZWRTZWdtZW50ID0gZGF0YXNldC5QaXhlbERhdGEuc2xpY2Uoc2VnbWVudC5vZmZzZXQsIG5leHRPZmZzZXQpO1xuICAgICAgICBzZWdtZW50LnBpeGVsRGF0YSA9IEJpdEFycmF5LnVucGFjayhwYWNrZWRTZWdtZW50KTtcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gZ2VvbWV0cnlGcm9tRnVuY3Rpb25hbEdyb3VwcyhkYXRhc2V0LCBzZWdtZW50LmZ1bmN0aW9uYWxHcm91cHMpO1xuICAgICAgICBzZWdtZW50Lmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VnbWVudGF0aW9uO1xufSgpO1xuXG52YXIgVlRLanMgPSB7XG4gIFNlZ21lbnRhdGlvbjogU2VnbWVudGF0aW9uJDRcbn07XG5cbmZ1bmN0aW9uIGdldFRJRDMwMENvbnRlbnRJdGVtJDEodG9vbCwgdG9vbENsYXNzKSB7XG4gIHZhciBhcmdzID0gdG9vbENsYXNzLmdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHRvb2wpO1xuICBhcmdzLnVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID0gdHJ1ZTtcbiAgcmV0dXJuIG5ldyB0b29sQ2xhc3MuVElEMzAwUmVwcmVzZW50YXRpb24oYXJncyk7XG59XG5cbmZ1bmN0aW9uIGdldE1lYXN1cmVtZW50R3JvdXAkMShncmFwaGljVHlwZSwgbWVhc3VyZW1lbnRzKSB7XG4gIHZhciB0b29sQ2xhc3MgPSBNZWFzdXJlbWVudFJlcG9ydCQxLk1JQ1JPU0NPUFlfVE9PTF9DTEFTU0VTX0JZX1RPT0xfVFlQRVtncmFwaGljVHlwZV07IC8vIExvb3AgdGhyb3VnaCB0aGUgYXJyYXkgb2YgdG9vbCBpbnN0YW5jZXNcbiAgLy8gZm9yIHRoaXMgdG9vbFxuXG4gIHZhciBNZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMubWFwKGZ1bmN0aW9uICh0b29sKSB7XG4gICAgcmV0dXJuIGdldFRJRDMwMENvbnRlbnRJdGVtJDEodG9vbCwgdG9vbENsYXNzKTtcbiAgfSk7XG4gIHJldHVybiBuZXcgVElEMTUwMU1lYXN1cmVtZW50R3JvdXAoTWVhc3VyZW1lbnRzKTtcbn1cblxudmFyIE1lYXN1cmVtZW50UmVwb3J0JDEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZWFzdXJlbWVudFJlcG9ydCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVhc3VyZW1lbnRSZXBvcnQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lYXN1cmVtZW50UmVwb3J0LCBudWxsLCBbe1xuICAgIGtleTogXCJnZW5lcmF0ZVJlcG9ydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJlcG9ydChyb2lzLCBtZXRhZGF0YVByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICAvLyBJbnB1dCBpcyBhbGwgUk9JUyByZXR1cm5lZCB2aWEgdmlld2VyLmdldEFMTFJPSXMoKVxuICAgICAgLy8gbGV0IHJlcG9ydCA9IE1lYXN1cmVtZW50UmVwb3J0LmdlbmVyYXRlUmVwb3J0KHZpZXdlci5nZXRBbGxST0lzKCkpO1xuICAgICAgLy8gU29ydCBhbmQgc3BsaXQgaW50byBhcnJheXMgYnkgc2Nvb3JkM2QuZ3JhcGhpY1R5cGVcbiAgICAgIHZhciBtZWFzdXJlbWVudHNCeUdyYXBoaWNUeXBlID0ge307XG4gICAgICByb2lzLmZvckVhY2goZnVuY3Rpb24gKHJvaSkge1xuICAgICAgICB2YXIgZ3JhcGhpY1R5cGUgPSByb2kuc2Nvb3JkM2QuZ3JhcGhpY1R5cGU7XG5cbiAgICAgICAgaWYgKGdyYXBoaWNUeXBlICE9PSBcIlBPSU5UXCIpIHtcbiAgICAgICAgICAvLyBhZGRpbmcgeiBjb29yZCBhcyAwXG4gICAgICAgICAgcm9pLnNjb29yZDNkLmdyYXBoaWNEYXRhLm1hcChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb29yZC5wdXNoKDApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtZWFzdXJlbWVudHNCeUdyYXBoaWNUeXBlW2dyYXBoaWNUeXBlXSkge1xuICAgICAgICAgIG1lYXN1cmVtZW50c0J5R3JhcGhpY1R5cGVbZ3JhcGhpY1R5cGVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBtZWFzdXJlbWVudHNCeUdyYXBoaWNUeXBlW2dyYXBoaWNUeXBlXS5wdXNoKHJvaS5zY29vcmQzZCk7XG4gICAgICB9KTsgLy8gRm9yIGVhY2ggbWVhc3VyZW1lbnQsIGdldCB0aGUgdXRpbGl0eSBhcmd1bWVudHMgdXNpbmcgdGhlIGFkYXB0ZXIsIGFuZCBjcmVhdGUgVElEMzAwIE1lYXN1cmVtZW50XG4gICAgICAvLyBHcm91cCB0aGVzZSBUSUQzMDAgTWVhc3VyZW1lbnRzIGludG8gYSBUSUQxNTAxIE1lYXN1cmVtZW50IEdyb3VwIChmb3IgZWFjaCBncmFwaGljVHlwZSlcbiAgICAgIC8vIFVzZSBUSUQxNTAwTWVhc3VyZW1lbnRSZXBvcnQgdXRpbGl0eSB0byBjcmVhdGUgYSBzaW5nbGUgcmVwb3J0IGZyb20gdGhlIGNyZWF0ZWQgZ3JvdXBzXG4gICAgICAvLyByZXR1cm4gcmVwb3J0O1xuXG4gICAgICB2YXIgYWxsTWVhc3VyZW1lbnRHcm91cHMgPSBbXTtcbiAgICAgIHZhciBtZWFzdXJlbWVudEdyb3VwcyA9IFtdO1xuICAgICAgT2JqZWN0LmtleXMobWVhc3VyZW1lbnRzQnlHcmFwaGljVHlwZSkuZm9yRWFjaChmdW5jdGlvbiAoZ3JhcGhpY1R5cGUpIHtcbiAgICAgICAgdmFyIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50c0J5R3JhcGhpY1R5cGVbZ3JhcGhpY1R5cGVdO1xuICAgICAgICB2YXIgZ3JvdXAgPSBnZXRNZWFzdXJlbWVudEdyb3VwJDEoZ3JhcGhpY1R5cGUsIG1lYXN1cmVtZW50cyk7XG5cbiAgICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgICAgbWVhc3VyZW1lbnRHcm91cHMucHVzaChncm91cCk7XG4gICAgICAgIH1cblxuICAgICAgICBhbGxNZWFzdXJlbWVudEdyb3VwcyA9IGFsbE1lYXN1cmVtZW50R3JvdXBzLmNvbmNhdChtZWFzdXJlbWVudEdyb3Vwcyk7XG4gICAgICB9KTtcbiAgICAgIHZhciBNZWFzdXJlbWVudFJlcG9ydCA9IG5ldyBUSUQxNTAwTWVhc3VyZW1lbnRSZXBvcnQoYWxsTWVhc3VyZW1lbnRHcm91cHMsIG9wdGlvbnMpOyAvLyBUT0RPOiB3aGF0IGlzIHRoZSBjb3JyZWN0IG1ldGFoZWFkZXJcbiAgICAgIC8vIGh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9tZWRpY2FsL0RpY29tL2N1cnJlbnQvb3V0cHV0L2NodG1sL3BhcnQxMC9jaGFwdGVyXzcuaHRtbFxuICAgICAgLy8gVE9ETzogbW92ZSBtZXRhIGNyZWF0aW9uIHRvIGhhcHBlbiBpbiBkZXJpdmF0aW9ucy5qc1xuXG4gICAgICB2YXIgZmlsZU1ldGFJbmZvcm1hdGlvblZlcnNpb25BcnJheSA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgICAgZmlsZU1ldGFJbmZvcm1hdGlvblZlcnNpb25BcnJheVsxXSA9IDE7IC8vIFRPRE86IEZpbmQgb3V0IGhvdyB0byByZWZlcmVuY2UgdGhlIGRhdGEgZnJvbSBkaWNvbS1taWNyb3Njb3B5LXZpZXdlclxuXG4gICAgICB2YXIgc3R1ZHlJbnN0YW5jZVVJRCA9IFwiMTIuNFwiO1xuICAgICAgdmFyIHNlcmllc0luc3RhbmNlVUlEID0gXCIxMi40XCI7XG4gICAgICB2YXIgZGVyaXZhdGlvblNvdXJjZURhdGFzZXQgPSB7XG4gICAgICAgIFN0dWR5SW5zdGFuY2VVSUQ6IHN0dWR5SW5zdGFuY2VVSUQsXG4gICAgICAgIFNlcmllc0luc3RhbmNlVUlEOiBzZXJpZXNJbnN0YW5jZVVJRCAvL1NPUEluc3RhbmNlVUlEOiBzb3BJbnN0YW5jZVVJRCwgLy8gVE9ETzogTmVjZXNzYXJ5P1xuICAgICAgICAvL1NPUENsYXNzVUlEOiBzb3BDbGFzc1VJRCxcblxuICAgICAgfTtcbiAgICAgIHZhciBfbWV0YSA9IHtcbiAgICAgICAgRmlsZU1ldGFJbmZvcm1hdGlvblZlcnNpb246IHtcbiAgICAgICAgICBWYWx1ZTogW2ZpbGVNZXRhSW5mb3JtYXRpb25WZXJzaW9uQXJyYXkuYnVmZmVyXSxcbiAgICAgICAgICB2cjogXCJPQlwiXG4gICAgICAgIH0sXG4gICAgICAgIC8vTWVkaWFTdG9yYWdlU09QQ2xhc3NVSURcbiAgICAgICAgLy9NZWRpYVN0b3JhZ2VTT1BJbnN0YW5jZVVJRDogc29wQ29tbW9uTW9kdWxlLnNvcEluc3RhbmNlVUlELFxuICAgICAgICBUcmFuc2ZlclN5bnRheFVJRDoge1xuICAgICAgICAgIFZhbHVlOiBbXCIxLjIuODQwLjEwMDA4LjEuMi4xXCJdLFxuICAgICAgICAgIHZyOiBcIlVJXCJcbiAgICAgICAgfSxcbiAgICAgICAgSW1wbGVtZW50YXRpb25DbGFzc1VJRDoge1xuICAgICAgICAgIFZhbHVlOiBbRGljb21NZXRhRGljdGlvbmFyeS51aWQoKV0sXG4gICAgICAgICAgLy8gVE9ETzogY291bGQgYmUgZ2l0IGhhc2ggb3Igb3RoZXIgdmFsaWQgaWRcbiAgICAgICAgICB2cjogXCJVSVwiXG4gICAgICAgIH0sXG4gICAgICAgIEltcGxlbWVudGF0aW9uVmVyc2lvbk5hbWU6IHtcbiAgICAgICAgICBWYWx1ZTogW1wiZGNtanNcIl0sXG4gICAgICAgICAgdnI6IFwiU0hcIlxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIF92ck1hcCA9IHtcbiAgICAgICAgUGl4ZWxEYXRhOiBcIk9XXCJcbiAgICAgIH07XG4gICAgICBkZXJpdmF0aW9uU291cmNlRGF0YXNldC5fbWV0YSA9IF9tZXRhO1xuICAgICAgZGVyaXZhdGlvblNvdXJjZURhdGFzZXQuX3ZyTWFwID0gX3ZyTWFwO1xuICAgICAgdmFyIHJlcG9ydCA9IG5ldyBTdHJ1Y3R1cmVkUmVwb3J0KFtkZXJpdmF0aW9uU291cmNlRGF0YXNldF0pO1xuICAgICAgdmFyIGNvbnRlbnRJdGVtID0gTWVhc3VyZW1lbnRSZXBvcnQuY29udGVudEl0ZW0oZGVyaXZhdGlvblNvdXJjZURhdGFzZXQpOyAvLyBNZXJnZSB0aGUgZGVyaXZlZCBkYXRhc2V0IHdpdGggdGhlIGNvbnRlbnQgZnJvbSB0aGUgTWVhc3VyZW1lbnQgUmVwb3J0XG5cbiAgICAgIHJlcG9ydC5kYXRhc2V0ID0gT2JqZWN0LmFzc2lnbihyZXBvcnQuZGF0YXNldCwgY29udGVudEl0ZW0pO1xuICAgICAgcmVwb3J0LmRhdGFzZXQuX21ldGEgPSBfbWV0YTtcbiAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgfSAvL0BUb0RvXG5cbiAgfSwge1xuICAgIGtleTogXCJnZW5lcmF0ZVRvb2xTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVRvb2xTdGF0ZShkYXRhc2V0KSB7XG4gICAgICAvLyBGb3Igbm93LCBiYWlsIG91dCBpZiB0aGUgZGF0YXNldCBpcyBub3QgYSBUSUQxNTAwIFNSIHdpdGggbGVuZ3RoIG1lYXN1cmVtZW50c1xuICAgICAgaWYgKGRhdGFzZXQuQ29udGVudFRlbXBsYXRlU2VxdWVuY2UuVGVtcGxhdGVJZGVudGlmaWVyICE9PSBcIjE1MDBcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHBhY2thZ2UgY2FuIGN1cnJlbnRseSBvbmx5IGludGVycHJldCBESUNPTSBTUiBUSUQgMTUwMFwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFJFUE9SVCA9IFwiSW1hZ2luZyBNZWFzdXJlbWVudHNcIjtcbiAgICAgIHZhciBHUk9VUCA9IFwiTWVhc3VyZW1lbnQgR3JvdXBcIjsgLy8gU3BsaXQgdGhlIGltYWdpbmdNZWFzdXJlbWVudENvbnRlbnQgaW50byBtZWFzdXJlbWVudCBncm91cHMgYnkgdGhlaXIgY29kZSBtZWFuaW5nXG5cbiAgICAgIHZhciBpbWFnaW5nTWVhc3VyZW1lbnRDb250ZW50ID0gdG9BcnJheShkYXRhc2V0LkNvbnRlbnRTZXF1ZW5jZSkuZmluZChjb2RlTWVhbmluZ0VxdWFscyhSRVBPUlQpKTsgLy8gUmV0cmlldmUgdGhlIE1lYXN1cmVtZW50cyB0aGVtc2VsdmVzXG5cbiAgICAgIHZhciBtZWFzdXJlbWVudEdyb3VwQ29udGVudCA9IHRvQXJyYXkoaW1hZ2luZ01lYXN1cmVtZW50Q29udGVudC5Db250ZW50U2VxdWVuY2UpLmZpbmQoY29kZU1lYW5pbmdFcXVhbHMoR1JPVVApKTsgLy8gLy8gRm9yIGVhY2ggb2YgdGhlIHN1cHBvcnRlZCBtZWFzdXJlbWVudCB0eXBlcywgY29tcHV0ZSB0aGUgbWVhc3VyZW1lbnQgZGF0YVxuXG4gICAgICB2YXIgbWVhc3VyZW1lbnREYXRhID0ge307XG4gICAgICBPYmplY3Qua2V5cyhNZWFzdXJlbWVudFJlcG9ydC5NSUNST1NDT1BZX1RPT0xfQ0xBU1NFU19CWV9VVElMSVRZX1RZUEUpLmZvckVhY2goZnVuY3Rpb24gKG1lYXN1cmVtZW50VHlwZSkge1xuICAgICAgICAvLyBGaW5kIHN1cHBvcnRlZCBtZWFzdXJlbWVudCB0eXBlcyBpbiB0aGUgU3RydWN0dXJlZCBSZXBvcnRcbiAgICAgICAgdmFyIG1lYXN1cmVtZW50R3JvdXBzID0gdG9BcnJheShtZWFzdXJlbWVudEdyb3VwQ29udGVudC5Db250ZW50U2VxdWVuY2UpO1xuICAgICAgICB2YXIgbWVhc3VyZW1lbnRDb250ZW50ID0gbWVhc3VyZW1lbnRHcm91cHMuZmlsdGVyKGdyYXBoaWNUeXBlRXF1YWxzKG1lYXN1cmVtZW50VHlwZS50b1VwcGVyQ2FzZSgpKSk7XG5cbiAgICAgICAgaWYgKCFtZWFzdXJlbWVudENvbnRlbnQgfHwgbWVhc3VyZW1lbnRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b29sQ2xhc3MgPSBNZWFzdXJlbWVudFJlcG9ydC5NSUNST1NDT1BZX1RPT0xfQ0xBU1NFU19CWV9VVElMSVRZX1RZUEVbbWVhc3VyZW1lbnRUeXBlXTtcbiAgICAgICAgdmFyIHRvb2xUeXBlID0gdG9vbENsYXNzLnRvb2xUeXBlO1xuXG4gICAgICAgIGlmICghdG9vbENsYXNzLmdldE1lYXN1cmVtZW50RGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1JQ1JPU0NPUFkgVG9vbCBBZGFwdGVycyBtdXN0IGRlZmluZSBhIGdldE1lYXN1cmVtZW50RGF0YSBzdGF0aWMgbWV0aG9kLlwiKTtcbiAgICAgICAgfSAvLyBtZWFzdXJlbWVudENvbnRlbnQgPSBtZWFzdXJlbWVudENvbnRlbnQubWFwKGl0ZW0gPT4gaXRlbS5Db250ZW50U2VxdWVuY2UuR3JhcGhpY0RhdGEpXG4gICAgICAgIC8vICAgICAuZmlsdGVyKChncmFwaGljRGF0YSwgaW5kZXgsIHNlbGYpID0+IHNlbGYuaW5kZXhPZihncmFwaGljRGF0YSkgPT09IGluZGV4KVxuICAgICAgICAvLyBtZWFzdXJlbWVudERhdGFbdG9vbFR5cGVdID0gbmV3IEFycmF5KClcblxuXG4gICAgICAgIG1lYXN1cmVtZW50RGF0YVt0b29sVHlwZV0gPSB0b29sQ2xhc3MuZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCk7IC8vIG1lYXN1cmVtZW50Q29udGVudC5mb3JFYWNoKG1lYXN1cmVtZW50ID0+e1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyBSZXRyaWV2ZSBMZW5ndGggTWVhc3VyZW1lbnQgRGF0YVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWVhc3VyZW1lbnREYXRhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWdpc3RlclRvb2xcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJUb29sKHRvb2xDbGFzcykge1xuICAgICAgTWVhc3VyZW1lbnRSZXBvcnQuTUlDUk9TQ09QWV9UT09MX0NMQVNTRVNfQllfVVRJTElUWV9UWVBFW3Rvb2xDbGFzcy51dGlsaXR5VG9vbFR5cGVdID0gdG9vbENsYXNzO1xuICAgICAgTWVhc3VyZW1lbnRSZXBvcnQuTUlDUk9TQ09QWV9UT09MX0NMQVNTRVNfQllfVE9PTF9UWVBFW3Rvb2xDbGFzcy5ncmFwaGljVHlwZV0gPSB0b29sQ2xhc3M7XG4gICAgICBNZWFzdXJlbWVudFJlcG9ydC5NRUFTVVJFTUVOVF9CWV9UT09MVFlQRVt0b29sQ2xhc3MuZ3JhcGhpY1R5cGVdID0gdG9vbENsYXNzLnV0aWxpdHlUb29sVHlwZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVhc3VyZW1lbnRSZXBvcnQ7XG59KCk7XG5NZWFzdXJlbWVudFJlcG9ydCQxLk1FQVNVUkVNRU5UX0JZX1RPT0xUWVBFID0ge307XG5NZWFzdXJlbWVudFJlcG9ydCQxLk1JQ1JPU0NPUFlfVE9PTF9DTEFTU0VTX0JZX1VUSUxJVFlfVFlQRSA9IHt9O1xuTWVhc3VyZW1lbnRSZXBvcnQkMS5NSUNST1NDT1BZX1RPT0xfQ0xBU1NFU19CWV9UT09MX1RZUEUgPSB7fTtcblxudmFyIFBvbHlsaW5lJDEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2x5bGluZSQkMSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9seWxpbmUkJDEpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvbHlsaW5lJCQxLCBudWxsLCBbe1xuICAgIGtleTogXCJnZXRNZWFzdXJlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCkge1xuICAgICAgLy8gcmVtb3ZpbmcgZHVwbGljYXRpb24gYW5kIEdldHRpbmcgb25seSB0aGUgZ3JhcGhpY0RhdGEgaW5mb3JtYXRpb25cbiAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50Q29udGVudC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uQ29udGVudFNlcXVlbmNlLkdyYXBoaWNEYXRhO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgcmV0dXJuICFzLmhhcyhqKSAmJiBzLmFkZChqKTtcbiAgICAgICAgICB9KEpTT04uc3RyaW5naWZ5KGEpKTtcbiAgICAgICAgfTtcbiAgICAgIH0obmV3IFNldCgpKSk7IC8vIENodW5raW5nIHRoZSBhcnJheSBpbnRvIHNpemUgb2YgdGhyZWVcblxuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50Lm1hcChmdW5jdGlvbiAobWVhc3VyZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50LnJlZHVjZShmdW5jdGlvbiAoYWxsLCBvbmUsIGkpIHtcbiAgICAgICAgICB2YXIgY2ggPSBNYXRoLmZsb29yKGkgLyAzKTtcbiAgICAgICAgICBhbGxbY2hdID0gW10uY29uY2F0KGFsbFtjaF0gfHwgW10sIG9uZSk7XG4gICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHNjb29yZDNkKSB7XG4gICAgICBpZiAoc2Nvb3JkM2QuZ3JhcGhpY1R5cGUgIT09IFwiUE9MWUxJTkVcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZSBleHBlY3RlZCBhIFBPTFlMSU5FIGdyYXBoaWNUeXBlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnRzID0gc2Nvb3JkM2QuZ3JhcGhpY0RhdGE7XG4gICAgICB2YXIgbGVuZ3RocyA9IDE7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb2ludHM6IHBvaW50cyxcbiAgICAgICAgbGVuZ3RoczogbGVuZ3Roc1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9seWxpbmUkJDE7XG59KCk7XG5cblBvbHlsaW5lJDEuZ3JhcGhpY1R5cGUgPSBcIlBPTFlMSU5FXCI7XG5Qb2x5bGluZSQxLnRvb2xUeXBlID0gXCJQb2x5bGluZVwiO1xuUG9seWxpbmUkMS51dGlsaXR5VG9vbFR5cGUgPSBcIlBvbHlsaW5lXCI7XG5Qb2x5bGluZSQxLlRJRDMwMFJlcHJlc2VudGF0aW9uID0gUG9seWxpbmU7XG5NZWFzdXJlbWVudFJlcG9ydCQxLnJlZ2lzdGVyVG9vbChQb2x5bGluZSQxKTtcblxuLyoqXG4gKiBFeHBhbmQgYW4gYXJyYXkgb2YgcG9pbnRzIHN0b3JlZCBhcyBvYmplY3RzIGludG9cbiAqIGEgZmxhdHRlbmVkIGFycmF5IG9mIHBvaW50c1xuICpcbiAqIEBwYXJhbSBwb2ludHMgW3t4OiAwLCB5OiAxfSwge3g6IDEsIHk6IDJ9XSBvciBbe3g6IDAsIHk6IDEsIHo6IDB9LCB7eDogMSwgeTogMiwgejogMH1dXG4gKiBAcmV0dXJuIHtBcnJheX0gW3BvaW50MXgsIHBvaW50MXksIHBvaW50MngsIHBvaW50MnldIG9yIFtwb2ludDF4LCBwb2ludDF5LCBwb2ludDF6LCBwb2ludDJ4LCBwb2ludDJ5LCBwb2ludDJ6XVxuICovXG5cbmZ1bmN0aW9uIGV4cGFuZFBvaW50cyQxKHBvaW50cykge1xuICB2YXIgYWxsUG9pbnRzID0gW107XG4gIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGFsbFBvaW50cy5wdXNoKHBvaW50WzBdKTtcbiAgICBhbGxQb2ludHMucHVzaChwb2ludFsxXSk7XG5cbiAgICBpZiAocG9pbnRbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxsUG9pbnRzLnB1c2gocG9pbnRbMl0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhbGxQb2ludHM7XG59XG5cbnZhciBQb2x5Z29uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVElEMzAwTWVhc3VyZW1lbnQpIHtcbiAgX2luaGVyaXRzKFBvbHlnb24sIF9USUQzMDBNZWFzdXJlbWVudCk7XG5cbiAgZnVuY3Rpb24gUG9seWdvbihfcmVmKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIHBvaW50cyA9IF9yZWYucG9pbnRzLFxuICAgICAgICBsZW5ndGhzID0gX3JlZi5sZW5ndGhzLFxuICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBfcmVmLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZSxcbiAgICAgICAgX3JlZiR1c2UzRFNwYXRpYWxDb29yID0gX3JlZi51c2UzRFNwYXRpYWxDb29yZGluYXRlcyxcbiAgICAgICAgdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPSBfcmVmJHVzZTNEU3BhdGlhbENvb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiR1c2UzRFNwYXRpYWxDb29yO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvbHlnb24pO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9seWdvbikuY2FsbCh0aGlzKSk7XG4gICAgX3RoaXMucG9pbnRzID0gcG9pbnRzO1xuICAgIF90aGlzLmxlbmd0aHMgPSBsZW5ndGhzO1xuICAgIF90aGlzLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZTtcbiAgICBfdGhpcy51c2UzRFNwYXRpYWxDb29yZGluYXRlcyA9IHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb2x5Z29uLCBbe1xuICAgIGtleTogXCJjb250ZW50SXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb250ZW50SXRlbSgpIHtcbiAgICAgIHZhciBwb2ludHMgPSB0aGlzLnBvaW50cyxcbiAgICAgICAgICBsZW5ndGhzID0gdGhpcy5sZW5ndGhzLFxuICAgICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IHRoaXMuUmVmZXJlbmNlZFNPUFNlcXVlbmNlLFxuICAgICAgICAgIF90aGlzJHVzZTNEU3BhdGlhbENvbyA9IHRoaXMudXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPSBfdGhpcyR1c2UzRFNwYXRpYWxDb28gPT09IHZvaWQgMCA/IGZhbHNlIDogX3RoaXMkdXNlM0RTcGF0aWFsQ29vO1xuICAgICAgdmFyIHBlcmltZXRlciA9IHt9O1xuICAgICAgdmFyIEdyYXBoaWNEYXRhID0gZXhwYW5kUG9pbnRzJDEocG9pbnRzKTtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVEVYVFwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwMzlcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBUZXh0VmFsdWU6IFwid2ViIGFubm90YXRpb25cIlxuICAgICAgfSwge1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkhBUyBPQlMgQ09OVEVYVFwiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiVUlEUkVGXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIjExMjA0MFwiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiVHJhY2tpbmcgVW5pcXVlIElkZW50aWZpZXJcIlxuICAgICAgICB9LFxuICAgICAgICBVSUQ6IERpY29tTWV0YURpY3Rpb25hcnkudWlkKClcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiQ09ERVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMjEwNzFcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkZpbmRpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBDb25jZXB0Q29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIlNBTVBMRUZJTkRJTkdcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIjk5ZGNtanNcIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJTYW1wbGUgRmluZGluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiTlVNXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIkctQTE5N1wiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiU1JUXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiUGVyaW1ldGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgTWVhc3VyZWRWYWx1ZVNlcXVlbmNlOiB7XG4gICAgICAgICAgTWVhc3VyZW1lbnRVbml0c0NvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIm1tXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlVDVU1cIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZVZlcnNpb246IFwiMS40XCIsXG4gICAgICAgICAgICBDb2RlTWVhbmluZzogXCJtaWxsaW1ldGVyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIE51bWVyaWNWYWx1ZTogcGVyaW1ldGVyXG4gICAgICAgIH0sXG4gICAgICAgIENvbnRlbnRTZXF1ZW5jZToge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiSU5GRVJSRUQgRlJPTVwiLFxuICAgICAgICAgIFZhbHVlVHlwZTogdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPyBcIlNDT09SRDNEXCIgOiBcIlNDT09SRFwiLFxuICAgICAgICAgIEdyYXBoaWNUeXBlOiBcIlBPTFlHT05cIixcbiAgICAgICAgICBHcmFwaGljRGF0YTogR3JhcGhpY0RhdGEsXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiU0VMRUNURUQgRlJPTVwiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIkNPTlRBSU5TXCIsXG4gICAgICAgIFZhbHVlVHlwZTogXCJOVU1cIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiRy1BMTY2XCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJTUlRcIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJBcmVhXCJcbiAgICAgICAgfSxcbiAgICAgICAgTWVhc3VyZWRWYWx1ZVNlcXVlbmNlOiB7XG4gICAgICAgICAgTWVhc3VyZW1lbnRVbml0c0NvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIm1tMlwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJVQ1VNXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVWZXJzaW9uOiBcIjEuNFwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU3F1YXJlTWlsbGlNZXRlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBOdW1lcmljVmFsdWU6IHBlcmltZXRlclxuICAgICAgICB9LFxuICAgICAgICBDb250ZW50U2VxdWVuY2U6IHtcbiAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIklORkVSUkVEIEZST01cIixcbiAgICAgICAgICBWYWx1ZVR5cGU6IHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID8gXCJTQ09PUkQzRFwiIDogXCJTQ09PUkRcIixcbiAgICAgICAgICBHcmFwaGljVHlwZTogXCJQT0xZR09OXCIsXG4gICAgICAgICAgR3JhcGhpY0RhdGE6IEdyYXBoaWNEYXRhLFxuICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZTogdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPyB1bmRlZmluZWQgOiB7XG4gICAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIlNFTEVDVEVEIEZST01cIixcbiAgICAgICAgICAgIFZhbHVlVHlwZTogXCJJTUFHRVwiLFxuICAgICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlOiBSZWZlcmVuY2VkU09QU2VxdWVuY2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb2x5Z29uO1xufShUSUQzMDBNZWFzdXJlbWVudCk7XG5cbnZhciBQb2x5Z29uJDEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2x5Z29uJCQxKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb2x5Z29uJCQxKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb2x5Z29uJCQxLCBudWxsLCBbe1xuICAgIGtleTogXCJnZXRNZWFzdXJlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCkge1xuICAgICAgLy8gcmVtb3ZpbmcgZHVwbGljYXRpb24gYW5kIEdldHRpbmcgb25seSB0aGUgZ3JhcGhpY0RhdGEgaW5mb3JtYXRpb25cbiAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50Q29udGVudC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uQ29udGVudFNlcXVlbmNlLkdyYXBoaWNEYXRhO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgcmV0dXJuICFzLmhhcyhqKSAmJiBzLmFkZChqKTtcbiAgICAgICAgICB9KEpTT04uc3RyaW5naWZ5KGEpKTtcbiAgICAgICAgfTtcbiAgICAgIH0obmV3IFNldCgpKSk7IC8vIENodW5raW5nIHRoZSBhcnJheSBpbnRvIHNpemUgb2YgdGhyZWVcblxuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50Lm1hcChmdW5jdGlvbiAobWVhc3VyZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50LnJlZHVjZShmdW5jdGlvbiAoYWxsLCBvbmUsIGkpIHtcbiAgICAgICAgICB2YXIgY2ggPSBNYXRoLmZsb29yKGkgLyAzKTtcbiAgICAgICAgICBhbGxbY2hdID0gW10uY29uY2F0KGFsbFtjaF0gfHwgW10sIG9uZSk7XG4gICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHNjb29yZDNkKSB7XG4gICAgICBpZiAoc2Nvb3JkM2QuZ3JhcGhpY1R5cGUgIT09IFwiUE9MWUdPTlwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlIGV4cGVjdGVkIGEgUE9MWUdPTiBncmFwaGljVHlwZVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvaW50cyA9IHNjb29yZDNkLmdyYXBoaWNEYXRhO1xuICAgICAgdmFyIGxlbmd0aHMgPSAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnRzOiBwb2ludHMsXG4gICAgICAgIGxlbmd0aHM6IGxlbmd0aHNcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvbHlnb24kJDE7XG59KCk7XG5cblBvbHlnb24kMS5ncmFwaGljVHlwZSA9IFwiUE9MWUdPTlwiO1xuUG9seWdvbiQxLnRvb2xUeXBlID0gXCJQb2x5Z29uXCI7XG5Qb2x5Z29uJDEudXRpbGl0eVRvb2xUeXBlID0gXCJQb2x5Z29uXCI7XG5Qb2x5Z29uJDEuVElEMzAwUmVwcmVzZW50YXRpb24gPSBQb2x5Z29uO1xuTWVhc3VyZW1lbnRSZXBvcnQkMS5yZWdpc3RlclRvb2woUG9seWdvbiQxKTtcblxudmFyIFBvaW50ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVElEMzAwTWVhc3VyZW1lbnQpIHtcbiAgX2luaGVyaXRzKFBvaW50LCBfVElEMzAwTWVhc3VyZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvaW50KF9yZWYpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgcG9pbnRzID0gX3JlZi5wb2ludHMsXG4gICAgICAgIGxlbmd0aHMgPSBfcmVmLmxlbmd0aHMsXG4gICAgICAgIFJlZmVyZW5jZWRTT1BTZXF1ZW5jZSA9IF9yZWYuUmVmZXJlbmNlZFNPUFNlcXVlbmNlLFxuICAgICAgICBfcmVmJHVzZTNEU3BhdGlhbENvb3IgPSBfcmVmLnVzZTNEU3BhdGlhbENvb3JkaW5hdGVzLFxuICAgICAgICB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA9IF9yZWYkdXNlM0RTcGF0aWFsQ29vciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHVzZTNEU3BhdGlhbENvb3I7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9pbnQpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9pbnQpLmNhbGwodGhpcykpO1xuICAgIF90aGlzLnBvaW50cyA9IHBvaW50cztcbiAgICBfdGhpcy5sZW5ndGhzID0gbGVuZ3RocztcbiAgICBfdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBSZWZlcmVuY2VkU09QU2VxdWVuY2U7XG4gICAgX3RoaXMudXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPSB1c2UzRFNwYXRpYWxDb29yZGluYXRlcztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9pbnQsIFt7XG4gICAga2V5OiBcImNvbnRlbnRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRJdGVtKCkge1xuICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzLFxuICAgICAgICAgIGxlbmd0aHMgPSB0aGlzLmxlbmd0aHMsXG4gICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gdGhpcy5SZWZlcmVuY2VkU09QU2VxdWVuY2UsXG4gICAgICAgICAgX3RoaXMkdXNlM0RTcGF0aWFsQ29vID0gdGhpcy51c2UzRFNwYXRpYWxDb29yZGluYXRlcyxcbiAgICAgICAgICB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA9IF90aGlzJHVzZTNEU3BhdGlhbENvbyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfdGhpcyR1c2UzRFNwYXRpYWxDb287XG4gICAgICB2YXIgcGVyaW1ldGVyID0ge307XG4gICAgICB2YXIgR3JhcGhpY0RhdGEgPSBwb2ludHNbMF07XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlRFWFRcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTEyMDM5XCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJUcmFja2luZyBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVGV4dFZhbHVlOiBcIndlYiBhbm5vdGF0aW9uXCJcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlVJRFJFRlwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwNDBcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIFVuaXF1ZSBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVUlEOiBEaWNvbU1ldGFEaWN0aW9uYXJ5LnVpZCgpXG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIkNPREVcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTIxMDcxXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJGaW5kaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgQ29uY2VwdENvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJTQU1QTEVGSU5ESU5HXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCI5OWRjbWpzXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU2FtcGxlIEZpbmRpbmdcIlxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIk5VTVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJHLUExOTdcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlNSVFwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlBlcmltZXRlclwiIC8vIFRPRE86IExvb2sgdGhpcyB1cCBmcm9tIGEgQ29kZSBNZWFuaW5nIGRpY3Rpb25hcnlcblxuICAgICAgICB9LFxuICAgICAgICBNZWFzdXJlZFZhbHVlU2VxdWVuY2U6IHtcbiAgICAgICAgICBNZWFzdXJlbWVudFVuaXRzQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwibW1cIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiVUNVTVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIxLjRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIm1pbGxpbWV0ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgTnVtZXJpY1ZhbHVlOiBwZXJpbWV0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IFwiU0NPT1JEM0RcIiA6IFwiU0NPT1JEXCIsXG4gICAgICAgICAgR3JhcGhpY1R5cGU6IFwiUE9JTlRcIixcbiAgICAgICAgICBHcmFwaGljRGF0YTogR3JhcGhpY0RhdGEsXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiU0VMRUNURUQgRlJPTVwiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAvLyBUT0RPOiBUaGlzIGZlZWxzIHdlaXJkIHRvIHJlcGVhdCB0aGUgR3JhcGhpY0RhdGFcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJDT05UQUlOU1wiLFxuICAgICAgICBWYWx1ZVR5cGU6IFwiTlVNXCIsXG4gICAgICAgIENvbmNlcHROYW1lQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgQ29kZVZhbHVlOiBcIkctQTE2NlwiLFxuICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiU1JUXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiQXJlYVwiXG4gICAgICAgIH0sXG4gICAgICAgIE1lYXN1cmVkVmFsdWVTZXF1ZW5jZToge1xuICAgICAgICAgIE1lYXN1cmVtZW50VW5pdHNDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICAgIENvZGVWYWx1ZTogXCJtbTJcIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiVUNVTVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIxLjRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlNxdWFyZU1pbGxpTWV0ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgTnVtZXJpY1ZhbHVlOiBwZXJpbWV0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IFwiU0NPT1JEM0RcIiA6IFwiU0NPT1JEXCIsXG4gICAgICAgICAgR3JhcGhpY1R5cGU6IFwiUE9JTlRcIixcbiAgICAgICAgICBHcmFwaGljRGF0YTogR3JhcGhpY0RhdGEsXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiU0VMRUNURUQgRlJPTVwiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvaW50O1xufShUSUQzMDBNZWFzdXJlbWVudCk7XG5cbnZhciBQb2ludCQxID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUG9pbnQkJDEoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvaW50JCQxKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb2ludCQkMSwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZ2V0TWVhc3VyZW1lbnREYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1lYXN1cmVtZW50RGF0YShtZWFzdXJlbWVudENvbnRlbnQpIHtcbiAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50Q29udGVudC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uQ29udGVudFNlcXVlbmNlLkdyYXBoaWNEYXRhO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWVhc3VyZW1lbnQuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgcmV0dXJuICFzLmhhcyhqKSAmJiBzLmFkZChqKTtcbiAgICAgICAgICB9KEpTT04uc3RyaW5naWZ5KGEpKTtcbiAgICAgICAgfTtcbiAgICAgIH0obmV3IFNldCgpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHNjb29yZDNkKSB7XG4gICAgICBpZiAoc2Nvb3JkM2QuZ3JhcGhpY1R5cGUgIT09IFwiUE9JTlRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZSBleHBlY3RlZCBhIFBPSU5UIGdyYXBoaWNUeXBlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnRzID0gW3Njb29yZDNkLmdyYXBoaWNEYXRhXTtcbiAgICAgIHZhciBsZW5ndGhzID0gMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50czogcG9pbnRzLFxuICAgICAgICBsZW5ndGhzOiBsZW5ndGhzXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb2ludCQkMTtcbn0oKTtcblxuUG9pbnQkMS5ncmFwaGljVHlwZSA9IFwiUE9JTlRcIjtcblBvaW50JDEudG9vbFR5cGUgPSBcIlBvaW50XCI7XG5Qb2ludCQxLnV0aWxpdHlUb29sVHlwZSA9IFwiUG9pbnRcIjtcblBvaW50JDEuVElEMzAwUmVwcmVzZW50YXRpb24gPSBQb2ludDtcbk1lYXN1cmVtZW50UmVwb3J0JDEucmVnaXN0ZXJUb29sKFBvaW50JDEpO1xuXG4vKipcbiAqIEV4cGFuZCBhbiBhcnJheSBvZiBwb2ludHMgc3RvcmVkIGFzIG9iamVjdHMgaW50b1xuICogYSBmbGF0dGVuZWQgYXJyYXkgb2YgcG9pbnRzXG4gKlxuICogQHBhcmFtIHBvaW50cyBbe3g6IDAsIHk6IDF9LCB7eDogMSwgeTogMn1dIG9yIFt7eDogMCwgeTogMSwgejogMH0sIHt4OiAxLCB5OiAyLCB6OiAwfV1cbiAqIEByZXR1cm4ge0FycmF5fSBbcG9pbnQxeCwgcG9pbnQxeSwgcG9pbnQyeCwgcG9pbnQyeV0gb3IgW3BvaW50MXgsIHBvaW50MXksIHBvaW50MXosIHBvaW50MngsIHBvaW50MnksIHBvaW50MnpdXG4gKi9cblxuZnVuY3Rpb24gZXhwYW5kUG9pbnRzJDIocG9pbnRzKSB7XG4gIHZhciBhbGxQb2ludHMgPSBbXTtcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgYWxsUG9pbnRzLnB1c2gocG9pbnRbMF0pO1xuICAgIGFsbFBvaW50cy5wdXNoKHBvaW50WzFdKTtcbiAgICBhbGxQb2ludHMucHVzaChwb2ludFsyXSk7XG4gIH0pO1xuICByZXR1cm4gYWxsUG9pbnRzO1xufVxuXG52YXIgQ2lyY2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVElEMzAwTWVhc3VyZW1lbnQpIHtcbiAgX2luaGVyaXRzKENpcmNsZSwgX1RJRDMwME1lYXN1cmVtZW50KTtcblxuICBmdW5jdGlvbiBDaXJjbGUoX3JlZikge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBwb2ludHMgPSBfcmVmLnBvaW50cyxcbiAgICAgICAgbGVuZ3RocyA9IF9yZWYubGVuZ3RocyxcbiAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gX3JlZi5SZWZlcmVuY2VkU09QU2VxdWVuY2UsXG4gICAgICAgIF9yZWYkdXNlM0RTcGF0aWFsQ29vciA9IF9yZWYudXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMsXG4gICAgICAgIHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID0gX3JlZiR1c2UzRFNwYXRpYWxDb29yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkdXNlM0RTcGF0aWFsQ29vcjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaXJjbGUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ2lyY2xlKS5jYWxsKHRoaXMpKTtcbiAgICBfdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgX3RoaXMubGVuZ3RocyA9IGxlbmd0aHM7XG4gICAgX3RoaXMuUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gUmVmZXJlbmNlZFNPUFNlcXVlbmNlO1xuICAgIF90aGlzLnVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID0gdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXM7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENpcmNsZSwgW3tcbiAgICBrZXk6IFwiY29udGVudEl0ZW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udGVudEl0ZW0oKSB7XG4gICAgICB2YXIgcG9pbnRzID0gdGhpcy5wb2ludHMsXG4gICAgICAgICAgbGVuZ3RocyA9IHRoaXMubGVuZ3RocyxcbiAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2UgPSB0aGlzLlJlZmVyZW5jZWRTT1BTZXF1ZW5jZSxcbiAgICAgICAgICBfdGhpcyR1c2UzRFNwYXRpYWxDb28gPSB0aGlzLnVzZTNEU3BhdGlhbENvb3JkaW5hdGVzLFxuICAgICAgICAgIHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID0gX3RoaXMkdXNlM0RTcGF0aWFsQ29vID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHVzZTNEU3BhdGlhbENvbzsgLy8gQ29tYmluZSBhbGwgbGVuZ3RocyB0byBzYXZlIHRoZSBwZXJpbWV0ZXJcbiAgICAgIC8vIEBUb0RPIFRoZSBwZXJtaXRlciBoYXMgdG8gYmUgaW1wbGVtZW50ZWRcbiAgICAgIC8vIGNvbnN0IHJlZHVjZXIgPSAoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4gYWNjdW11bGF0b3IgKyBjdXJyZW50VmFsdWU7XG4gICAgICAvLyBjb25zdCBwZXJpbWV0ZXIgPSBsZW5ndGhzLnJlZHVjZShyZWR1Y2VyKTtcblxuICAgICAgdmFyIHBlcmltZXRlciA9IHt9O1xuICAgICAgdmFyIEdyYXBoaWNEYXRhID0gZXhwYW5kUG9pbnRzJDIocG9pbnRzKTsgLy8gVE9ETzogQWRkIE1lYW4gYW5kIFNURGV2IHZhbHVlIG9mIChtb2RhbGl0eT8pIHBpeGVsc1xuXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlRFWFRcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTEyMDM5XCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJUcmFja2luZyBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVGV4dFZhbHVlOiBcIndlYiBhbm5vdGF0aW9uXCJcbiAgICAgIH0sIHtcbiAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIlVJRFJFRlwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCIxMTIwNDBcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlRyYWNraW5nIFVuaXF1ZSBJZGVudGlmaWVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgVUlEOiBEaWNvbU1ldGFEaWN0aW9uYXJ5LnVpZCgpXG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIkNPREVcIixcbiAgICAgICAgQ29uY2VwdE5hbWVDb2RlU2VxdWVuY2U6IHtcbiAgICAgICAgICBDb2RlVmFsdWU6IFwiMTIxMDcxXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBDb2RlTWVhbmluZzogXCJGaW5kaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgQ29uY2VwdENvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJTQU1QTEVGSU5ESU5HXCIsXG4gICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCI5OWRjbWpzXCIsXG4gICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU2FtcGxlIEZpbmRpbmdcIlxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIk5VTVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJHLUExOTdcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlNSVFwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIlBlcmltZXRlclwiIC8vIFRPRE86IExvb2sgdGhpcyB1cCBmcm9tIGEgQ29kZSBNZWFuaW5nIGRpY3Rpb25hcnlcblxuICAgICAgICB9LFxuICAgICAgICBNZWFzdXJlZFZhbHVlU2VxdWVuY2U6IHtcbiAgICAgICAgICBNZWFzdXJlbWVudFVuaXRzQ29kZVNlcXVlbmNlOiB7XG4gICAgICAgICAgICBDb2RlVmFsdWU6IFwibW1cIixcbiAgICAgICAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IFwiVUNVTVwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lVmVyc2lvbjogXCIxLjRcIixcbiAgICAgICAgICAgIENvZGVNZWFuaW5nOiBcIm1pbGxpbWV0ZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgTnVtZXJpY1ZhbHVlOiBwZXJpbWV0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgQ29udGVudFNlcXVlbmNlOiB7XG4gICAgICAgICAgUmVsYXRpb25zaGlwVHlwZTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gICAgICAgICAgVmFsdWVUeXBlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IFwiU0NPT1JEM0RcIiA6IFwiU0NPT1JEXCIsXG4gICAgICAgICAgR3JhcGhpY1R5cGU6IFwiQ0lSQ0xFXCIsXG4gICAgICAgICAgR3JhcGhpY0RhdGE6IEdyYXBoaWNEYXRhLFxuICAgICAgICAgIENvbnRlbnRTZXF1ZW5jZTogdXNlM0RTcGF0aWFsQ29vcmRpbmF0ZXMgPyB1bmRlZmluZWQgOiB7XG4gICAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIlNFTEVDVEVEIEZST01cIixcbiAgICAgICAgICAgIFZhbHVlVHlwZTogXCJJTUFHRVwiLFxuICAgICAgICAgICAgUmVmZXJlbmNlZFNPUFNlcXVlbmNlOiBSZWZlcmVuY2VkU09QU2VxdWVuY2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBmZWVscyB3ZWlyZCB0byByZXBlYXQgdGhlIEdyYXBoaWNEYXRhXG4gICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiQ09OVEFJTlNcIixcbiAgICAgICAgVmFsdWVUeXBlOiBcIk5VTVwiLFxuICAgICAgICBDb25jZXB0TmFtZUNvZGVTZXF1ZW5jZToge1xuICAgICAgICAgIENvZGVWYWx1ZTogXCJHLUExNjZcIixcbiAgICAgICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiBcIlNSVFwiLFxuICAgICAgICAgIENvZGVNZWFuaW5nOiBcIkFyZWFcIiAvLyBUT0RPOiBMb29rIHRoaXMgdXAgZnJvbSBhIENvZGUgTWVhbmluZyBkaWN0aW9uYXJ5XG5cbiAgICAgICAgfSxcbiAgICAgICAgTWVhc3VyZWRWYWx1ZVNlcXVlbmNlOiB7XG4gICAgICAgICAgTWVhc3VyZW1lbnRVbml0c0NvZGVTZXF1ZW5jZToge1xuICAgICAgICAgICAgQ29kZVZhbHVlOiBcIm1tMlwiLFxuICAgICAgICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogXCJVQ1VNXCIsXG4gICAgICAgICAgICBDb2RpbmdTY2hlbWVWZXJzaW9uOiBcIjEuNFwiLFxuICAgICAgICAgICAgQ29kZU1lYW5pbmc6IFwiU3F1YXJlTWlsbGlNZXRlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBOdW1lcmljVmFsdWU6IHBlcmltZXRlclxuICAgICAgICB9LFxuICAgICAgICBDb250ZW50U2VxdWVuY2U6IHtcbiAgICAgICAgICBSZWxhdGlvbnNoaXBUeXBlOiBcIklORkVSUkVEIEZST01cIixcbiAgICAgICAgICBWYWx1ZVR5cGU6IHVzZTNEU3BhdGlhbENvb3JkaW5hdGVzID8gXCJTQ09PUkQzRFwiIDogXCJTQ09PUkRcIixcbiAgICAgICAgICBHcmFwaGljVHlwZTogXCJDSVJDTEVcIixcbiAgICAgICAgICBHcmFwaGljRGF0YTogR3JhcGhpY0RhdGEsXG4gICAgICAgICAgQ29udGVudFNlcXVlbmNlOiB1c2UzRFNwYXRpYWxDb29yZGluYXRlcyA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIFJlbGF0aW9uc2hpcFR5cGU6IFwiU0VMRUNURUQgRlJPTVwiLFxuICAgICAgICAgICAgVmFsdWVUeXBlOiBcIklNQUdFXCIsXG4gICAgICAgICAgICBSZWZlcmVuY2VkU09QU2VxdWVuY2U6IFJlZmVyZW5jZWRTT1BTZXF1ZW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENpcmNsZTtcbn0oVElEMzAwTWVhc3VyZW1lbnQpO1xuXG52YXIgQ2lyY2xlJDEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDaXJjbGUkJDEoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENpcmNsZSQkMSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2lyY2xlJCQxLCBudWxsLCBbe1xuICAgIGtleTogXCJnZXRNZWFzdXJlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnREYXRhKG1lYXN1cmVtZW50Q29udGVudCkge1xuICAgICAgLy8gcmVtb3ZpbmcgZHVwbGljYXRpb24gYW5kIEdldHRpbmcgb25seSB0aGUgZ3JhcGhpY0RhdGEgaW5mb3JtYXRpb25cbiAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50Q29udGVudC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uQ29udGVudFNlcXVlbmNlLkdyYXBoaWNEYXRhO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgcmV0dXJuICFzLmhhcyhqKSAmJiBzLmFkZChqKTtcbiAgICAgICAgICB9KEpTT04uc3RyaW5naWZ5KGEpKTtcbiAgICAgICAgfTtcbiAgICAgIH0obmV3IFNldCgpKSk7IC8vIENodW5raW5nIHRoZSBhcnJheSBpbnRvIHNpemUgb2YgdGhyZWVcblxuICAgICAgcmV0dXJuIG1lYXN1cmVtZW50Lm1hcChmdW5jdGlvbiAobWVhc3VyZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50LnJlZHVjZShmdW5jdGlvbiAoYWxsLCBvbmUsIGkpIHtcbiAgICAgICAgICB2YXIgY2ggPSBNYXRoLmZsb29yKGkgLyAzKTtcbiAgICAgICAgICBhbGxbY2hdID0gW10uY29uY2F0KGFsbFtjaF0gfHwgW10sIG9uZSk7XG4gICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRJRDMwMFJlcHJlc2VudGF0aW9uQXJndW1lbnRzKHNjb29yZDNkKSB7XG4gICAgICBpZiAoc2Nvb3JkM2QuZ3JhcGhpY1R5cGUgIT09IFwiQ0lSQ0xFXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2UgZXhwZWN0ZWQgYSBDSVJDTEUgZ3JhcGhpY1R5cGVcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludHMgPSBzY29vcmQzZC5ncmFwaGljRGF0YTtcbiAgICAgIHZhciBsZW5ndGhzID0gMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50czogcG9pbnRzLFxuICAgICAgICBsZW5ndGhzOiBsZW5ndGhzXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaXJjbGUkJDE7XG59KCk7XG5cbkNpcmNsZSQxLmdyYXBoaWNUeXBlID0gXCJDSVJDTEVcIjtcbkNpcmNsZSQxLnRvb2xUeXBlID0gXCJDaXJjbGVcIjtcbkNpcmNsZSQxLnV0aWxpdHlUb29sVHlwZSA9IFwiQ2lyY2xlXCI7XG5DaXJjbGUkMS5USUQzMDBSZXByZXNlbnRhdGlvbiA9IENpcmNsZTtcbk1lYXN1cmVtZW50UmVwb3J0JDEucmVnaXN0ZXJUb29sKENpcmNsZSQxKTtcblxudmFyIERJQ09NTWljcm9zY29weVZpZXdlciA9IHtcbiAgUG9seWxpbmU6IFBvbHlsaW5lJDEsXG4gIFBvbHlnb246IFBvbHlnb24kMSxcbiAgUG9pbnQ6IFBvaW50JDEsXG4gIENpcmNsZTogQ2lyY2xlJDEsXG4gIE1lYXN1cmVtZW50UmVwb3J0OiBNZWFzdXJlbWVudFJlcG9ydCQxXG59O1xuXG52YXIgYWRhcHRlcnMgPSB7XG4gIENvcm5lcnN0b25lOiBDb3JuZXJzdG9uZSxcbiAgVlRLanM6IFZUS2pzLFxuICBESUNPTU1pY3Jvc2NvcHlWaWV3ZXI6IERJQ09NTWljcm9zY29weVZpZXdlclxufTtcblxudmFyIFRJRDE1MDAgPSB7XG4gIFRJRDE1MDBNZWFzdXJlbWVudFJlcG9ydDogVElEMTUwME1lYXN1cmVtZW50UmVwb3J0LFxuICBUSUQxNTAxTWVhc3VyZW1lbnRHcm91cDogVElEMTUwMU1lYXN1cmVtZW50R3JvdXBcbn07XG5cbi8vIC0gQ29ybmVyc3RvbmUgUHJvYmVcbi8vIE5vdGU6IE9ISUYgY3VycmVudGx5IHVzZXMgQ29ybmVyc3RvbmUncyAnZHJhZ1Byb2JlJy4gV2UgbmVlZCB0byBhZGQgdGhlIHJlZ3VsYXIgUHJvYmUgdG9vbCwgd2hpY2ggZHJvcHMgYSBzaW5nbGUgcG9pbnQuXG4vL1xuLy8gSGllcmFyY2h5XG4vLyBUSUQgMTUwMCBNZWFzdXJlbWVudFJlcG9ydFxuLy8gLS1USUQgMTUwMSBNZWFzdXJlbWVudCBHcm91cFxuLy8gLS0tTWVhc3VyZW1lbnQgR3JvdXAgKERDTSAxMjUwMDcpXG4vLyAtLS0tVElEIDMwMCBNZWFzdXJlbWVudFxuLy8gLS0tLS0tU0NPT1JELiBHcmFwaGljIFR5cGU6IFBPSU5UXG4vL1xuLy9cbi8vIC0gQ29ybmVyc3RvbmUgRWxsaXBzZTpcbi8vXG4vLyBIaWVyYXJjaHlcbi8vIFRJRCAxNTAwIE1lYXN1cmVtZW50UmVwb3J0XG4vLyAtVElEIDE0MTAgUGxhbmFyIFJPSSBNZWFzdXJlbWVudHNcbi8vIC0tVElEIDE1MDEgTWVhc3VyZW1lbnQgR3JvdXBcbi8vIC0tLU1lYXN1cmVtZW50IEdyb3VwIChEQ00gMTI1MDA3KVxuLy8gLS0tLVRJRCAzMDAgTWVhc3VyZW1lbnRcbi8vIC0tLS0tLVNDT09SRC4gR3JhcGhpYyBUeXBlOiBFTExJUFNFXG4vLyAgICAgICAgKGZ0cDovL2RpY29tLm5lbWEub3JnL01FRElDQUwvZGljb20vY3VycmVudC9vdXRwdXQvY2h0bWwvcGFydDAzL3NlY3RfQy4xMC41Lmh0bWwpXG4vL1xuLy8gSWYgR3JhcGhpYyBUeXBlICgwMDcwLDAwMjMpIGlzIEVMTElQU0UsIHRoZW4gZXhhY3RseSBmb3VyIHBvaW50cyBzaGFsbCBiZSBwcmVzZW50OyB0aGUgZmlyc3QgdHdvIHBvaW50cyBhcmUgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgdGhlIGVuZHBvaW50cyBvZiB0aGUgbWFqb3IgYXhpcyBhbmQgdGhlIHNlY29uZCB0d28gcG9pbnRzIGFzIHRoZSBlbmRwb2ludHMgb2YgdGhlIG1pbm9yIGF4aXMgb2YgYW4gZWxsaXBzZSwgc29tZSBmb3JtIG9mIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCByZXByZXNlbnRhdGlvbiBvZiB3aGljaCBpcyB0byBiZSBkcmF3bi5cbi8vXG4vLyBUSUQgMTQwMSBBcmVhIE1lYXN1cmVtZW50OiBodHRwOi8vZGljb20ubmVtYS5vcmcvbWVkaWNhbC9kaWNvbS9jdXJyZW50L291dHB1dC9odG1sL3BhcnQxNi5odG1sI3NlY3RfVElEXzE0MDFcbi8vIFNob3VsZCBiZSBhIHNpYmxpbmcgb2YgdGhlIFNDT09SRFxuLy8gU2hvdWxkIHNwZWNpZnkgdGhlIE1lYW4gTW9kYWxpdHkgUGl4ZWwgVmFsdWUgbWVhc3VyZWQgaW4gd2hhdGV2ZXIgdW5pdHMgdGhlIGltYWdlIGlzIGluXG4vLyBTaG91bGQgc3BlY2lmeSB0aGUgU3RhbmRhcmQgRGV2aWF0aW9uIE1vZGFsaXR5IFBpeGVsIFZhbHVlIG1lYXN1cmVkIGluIHdoYXRldmVyIHVuaXRzIHRoZSBpbWFnZSBpcyBpblxuLy9cbi8vXG4vLyAtIENvcm5lcnN0b25lIFJlY3RhbmdsZSBST0lcbi8vXG4vLyBIaWVyYXJjaHlcbi8vIFRJRCAxNTAwIE1lYXN1cmVtZW50UmVwb3J0XG4vLyAtLVRJRCAxNTAxIE1lYXN1cmVtZW50IEdyb3VwXG4vLyAtLS1NZWFzdXJlbWVudCBHcm91cCAoRENNIDEyNTAwNylcbi8vIC0tLS1USUQgMzAwIE1lYXN1cmVtZW50XG4vLyAtLS0tLS1TQ09PUkQuIEdyYXBoaWMgVHlwZTogUE9MWUxJTkVcbi8vIC0tLS0tLSBVc2UgY29uY2VwdCBjb3JyZXNwb25kaW5nIHRvIFJlY3RhbmdsZSBtZWFzdXJlbWVudFxuLy9cbi8vICAgICAgICAgICAgICAgICBodHRwOi8vZGljb20ubmVtYS5vcmcvbWVkaWNhbC9kaWNvbS9jdXJyZW50L291dHB1dC9odG1sL3BhcnQxNi5odG1sI3NlY3RfVElEXzQwMTlcbi8vXG4vLyBPUlxuLy8gTm90ZTogVGhpcyBzaG91bGQgYmUgdGhlIHNhbWUgYXMgYSBGcmVlaGFuZCBST0ksIG1vcmUgb3IgbGVzcy4gV2UgYWRkIGEgVElEIDQwMTk6IEFsZ29yaXRobSBJZGVudGlmaWNhdGlvbiBmbGFnIHRvIHNwZWNpZnkgdGhhdCB0aGlzIHdhcyBjcmVhdGVkIChhbmQgc2hvdWxkIGJlIHJlaHlkcmF0ZWQpIGludG8gYSBSZWN0YW5nbGUgUk9JLlxuLy8gVE9ETzogU2hvdWxkIHdlIHVzZSBhIERlcml2YXRpb24gaW5zdGVhZD8gaHR0cDovL2RpY29tLm5lbWEub3JnL21lZGljYWwvZGljb20vY3VycmVudC9vdXRwdXQvaHRtbC9wYXJ0MTYuaHRtbCNEQ01fMTIxNDAxXG4vLyBTaG91bGQgc3BlY2lmeSB0aGUgQXJlYSBtZWFzdXJlZCBpbiBtbcuGMiwgaW5jbHVkaW5nIHRoZSB1bml0cyBpbiBVQ1VNXG4vLyBTaG91bGQgc3BlY2lmeSB0aGUgTWVhbiBNb2RhbGl0eSBQaXhlbCBWYWx1ZSBtZWFzdXJlZCBpbiB3aGF0ZXZlciB1bml0cyB0aGUgaW1hZ2UgaXMgaW5cbi8vIFNob3VsZCBzcGVjaWZ5IHRoZSBTdGFuZGFyZCBEZXZpYXRpb24gTW9kYWxpdHkgUGl4ZWwgVmFsdWUgbWVhc3VyZWQgaW4gd2hhdGV2ZXIgdW5pdHMgdGhlIGltYWdlIGlzIGluXG4vL1xuLy9cbi8vIC0gQ29ybmVyc3RvbmUgU2ltcGxlIEFuZ2xlIHRvb2xcbi8vXG4vLyBIaWVyYXJjaHlcbi8vIFRJRCAxNTAwIE1lYXN1cmVtZW50UmVwb3J0XG4vLyAtLVRJRCAxNTAxIE1lYXN1cmVtZW50IEdyb3VwXG4vLyAtLS1NZWFzdXJlbWVudCBHcm91cCAoRENNIDEyNTAwNylcbi8vIC0tLS1USUQgMzAwIE1lYXN1cmVtZW50XG4vLyAtLS0tLS1TQ09PUkQuIEdyYXBoaWMgVHlwZTogUE9MWUxJTkVcbi8vICAgICAgICAoZnRwOi8vZGljb20ubmVtYS5vcmcvTUVESUNBTC9kaWNvbS9jdXJyZW50L291dHB1dC9jaHRtbC9wYXJ0MDMvc2VjdF9DLjEwLjUuaHRtbClcbi8vIC0tLS1USUQgMzAwIE1lYXN1cmVtZW50XG4vLyAtLS0tLS1TQ09PUkQuIEdyYXBoaWMgVHlwZTogUE9MWUxJTkVcbi8vICAgICAgICAoZnRwOi8vZGljb20ubmVtYS5vcmcvTUVESUNBTC9kaWNvbS9jdXJyZW50L291dHB1dC9jaHRtbC9wYXJ0MDMvc2VjdF9DLjEwLjUuaHRtbClcbi8vXG4vLyAtLS0tLS0gVXNlIGNvbmNlcHQgY29ycmVzcG9uZGluZyB0byBBbmdsZSBtZWFzdXJlbWVudFxuLy9cbi8vIFR3byBsaW5lcyBzcGVjaWZ5IHRoZSBhbmdsZVxuLy8gU2hvdWxkIHNwZWNpZnkgdGhlIEFuZ2xlIG1lYXN1cmVkIGluIERlZ3JlZXMsIGluY2x1ZGluZyB0aGUgdW5pdHMgaW4gVUNVTVxuLy9cblxudmFyIFRJRDMwMCA9IHtcbiAgVElEMzAwTWVhc3VyZW1lbnQ6IFRJRDMwME1lYXN1cmVtZW50LFxuICBMZW5ndGg6IExlbmd0aCxcbiAgQmlkaXJlY3Rpb25hbDogQmlkaXJlY3Rpb25hbCxcbiAgUG9seWxpbmU6IFBvbHlsaW5lXG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIFN0cmluZy5cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYXJyYXkgdGhhdCBzaG91bGQgYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IGFycmF5IG9mZnNldCBpbiBjYXNlIG9ubHkgc3Vic2V0IG9mIGFycmF5IGl0ZW1zIHNob3VsZCBiZSBleHRyYWN0ZWQgKGRlZmF1bHQ6IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbGltaXQgbWF4aW11bSBudW1iZXIgb2YgYXJyYXkgaXRlbXMgdGhhdCBzaG91bGQgYmUgZXh0cmFjdGVkIChkZWZhdWx0cyB0byBsZW5ndGggb2YgYXJyYXkpXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB1aW50OEFycmF5VG9TdHJpbmcoYXJyLCBvZmZzZXQsIGxpbWl0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICBsaW1pdCA9IGxpbWl0IHx8IGFyci5sZW5ndGggLSBvZmZzZXQ7XG4gIHZhciBzdHIgPSBcIlwiO1xuXG4gIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBvZmZzZXQgKyBsaW1pdDsgaSsrKSB7XG4gICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyW2ldKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgU3RyaW5nIHRvIGEgVWludDhBcnJheS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpbmdUb1VpbnQ4QXJyYXkoc3RyKSB7XG4gIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcblxuICBmb3IgKHZhciBpID0gMCwgaiA9IHN0ci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBhcnJbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG4vKipcbiAqIElkZW50aWZpZXMgdGhlIGJvdW5kYXJ5IGluIGEgbXVsdGlwYXJ0L3JlbGF0ZWQgbWVzc2FnZSBoZWFkZXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyIG1lc3NhZ2UgaGVhZGVyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBib3VuZGFyeVxuICovXG5cblxuZnVuY3Rpb24gaWRlbnRpZnlCb3VuZGFyeShoZWFkZXIpIHtcbiAgdmFyIHBhcnRzID0gaGVhZGVyLnNwbGl0KFwiXFxyXFxuXCIpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFydHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgIHJldHVybiBwYXJ0c1tpXTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiB0b2tlbiBpcyBjb250YWluZWQgYnkgYSBtZXNzYWdlIGF0IGEgZ2l2ZW4gb2Zmc2V0LlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBtZXNzYWdlIG1lc3NhZ2UgY29udGVudFxuICogQHBhcmFtIHtVaW50OEFycmF5fSB0b2tlbiBzdWJzdHJpbmcgdGhhdCBzaG91bGQgYmUgcHJlc2VudFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBvZmZzZXQgaW4gbWVzc2FnZSBjb250ZW50IGZyb20gd2hlcmUgc2VhcmNoIHNob3VsZCBzdGFydFxuICogQHJldHVybnMge0Jvb2xlYW59IHdoZXRoZXIgbWVzc2FnZSBjb250YWlucyB0b2tlbiBhdCBvZmZzZXRcbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbnRhaW5zVG9rZW4obWVzc2FnZSwgdG9rZW4pIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcblxuICBpZiAob2Zmc2V0ICsgdG9rZW4ubGVuZ3RoID4gbWVzc2FnZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaW5kZXggPSBvZmZzZXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0b2tlbltpXSAhPT0gbWVzc2FnZVtpbmRleCsrXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBGaW5kcyBhIGdpdmVuIHRva2VuIGluIGEgbWVzc2FnZSBhdCBhIGdpdmVuIG9mZnNldC5cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gbWVzc2FnZSBtZXNzYWdlIGNvbnRlbnRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdG9rZW4gc3Vic3RyaW5nIHRoYXQgc2hvdWxkIGJlIGZvdW5kXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IG1lc3NhZ2UgYm9keSBvZmZzZXQgZnJvbSB3aGVyZSBzZWFyY2ggc2hvdWxkIHN0YXJ0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gd2hldGhlciBtZXNzYWdlIGhhcyBhIHBhcnQgYXQgZ2l2ZW4gb2Zmc2V0IG9yIG5vdFxuICovXG5cblxuZnVuY3Rpb24gZmluZFRva2VuKG1lc3NhZ2UsIHRva2VuKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gIHZhciBtYXhTZWFyY2hMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHNlYXJjaExlbmd0aCA9IG1lc3NhZ2UubGVuZ3RoO1xuXG4gIGlmIChtYXhTZWFyY2hMZW5ndGgpIHtcbiAgICBzZWFyY2hMZW5ndGggPSBNYXRoLm1pbihvZmZzZXQgKyBtYXhTZWFyY2hMZW5ndGgsIG1lc3NhZ2UubGVuZ3RoKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBzZWFyY2hMZW5ndGg7IGkrKykge1xuICAgIC8vIElmIHRoZSBmaXJzdCB2YWx1ZSBvZiB0aGUgbWVzc2FnZSBtYXRjaGVzXG4gICAgLy8gdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSB0b2tlbiwgY2hlY2sgaWZcbiAgICAvLyB0aGlzIGlzIHRoZSBmdWxsIHRva2VuLlxuICAgIGlmIChtZXNzYWdlW2ldID09PSB0b2tlblswXSkge1xuICAgICAgaWYgKGNvbnRhaW5zVG9rZW4obWVzc2FnZSwgdG9rZW4sIGkpKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTXVsdGlwYXJ0RW5jb2RlZERhdGFcbiAqIEBwcm9wZXJ0eSB7QXJyYXlCdWZmZXJ9IGRhdGEgVGhlIGVuY29kZWQgTXVsdGlwYXJ0IERhdGFcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBib3VuZGFyeSBUaGUgYm91bmRhcnkgdXNlZCB0byBkaXZpZGUgcGllY2VzIG9mIHRoZSBlbmNvZGVkIGRhdGFcbiAqL1xuXG4vKipcbiAqIEVuY29kZSBvbmUgb3IgbW9yZSBESUNPTSBkYXRhc2V0cyBpbnRvIGEgc2luZ2xlIGJvZHkgc28gaXQgY2FuIGJlXG4gKiBzZW50IHVzaW5nIHRoZSBNdWx0aXBhcnQgQ29udGVudC1UeXBlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJbXX0gZGF0YXNldHMgQXJyYXkgY29udGFpbmluZyBlYWNoIGZpbGUgdG8gYmUgZW5jb2RlZCBpbiB0aGUgbXVsdGlwYXJ0IGJvZHksIHBhc3NlZCBhcyBBcnJheUJ1ZmZlcnMuXG4gKiBAcGFyYW0ge1N0cmluZ30gW2JvdW5kYXJ5XSBPcHRpb25hbCBzdHJpbmcgdG8gZGVmaW5lIGEgYm91bmRhcnkgYmV0d2VlbiBlYWNoIHBhcnQgb2YgdGhlIG11bHRpcGFydCBib2R5LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQsIGEgcmFuZG9tIEdVSUQgd2lsbCBiZSBnZW5lcmF0ZWQuXG4gKiBAcmV0dXJuIHtNdWx0aXBhcnRFbmNvZGVkRGF0YX0gVGhlIE11bHRpcGFydCBlbmNvZGVkIGRhdGEgcmV0dXJuZWQgYXMgYW4gT2JqZWN0LiBUaGlzIGNvbnRhaW5zIGJvdGggdGhlIGRhdGEgaXRzZWxmLCBhbmQgdGhlIGJvdW5kYXJ5IHN0cmluZyB1c2VkIHRvIGRpdmlkZSBpdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG11bHRpcGFydEVuY29kZShkYXRhc2V0cykge1xuICB2YXIgYm91bmRhcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGd1aWQoKTtcbiAgdmFyIGNvbnRlbnRUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcImFwcGxpY2F0aW9uL2RpY29tXCI7XG4gIHZhciBjb250ZW50VHlwZVN0cmluZyA9IFwiQ29udGVudC1UeXBlOiBcIi5jb25jYXQoY29udGVudFR5cGUpO1xuICB2YXIgaGVhZGVyID0gXCJcXHJcXG4tLVwiLmNvbmNhdChib3VuZGFyeSwgXCJcXHJcXG5cIikuY29uY2F0KGNvbnRlbnRUeXBlU3RyaW5nLCBcIlxcclxcblxcclxcblwiKTtcbiAgdmFyIGZvb3RlciA9IFwiXFxyXFxuLS1cIi5jb25jYXQoYm91bmRhcnksIFwiLS1cIik7XG4gIHZhciBoZWFkZXJBcnJheSA9IHN0cmluZ1RvVWludDhBcnJheShoZWFkZXIpO1xuICB2YXIgZm9vdGVyQXJyYXkgPSBzdHJpbmdUb1VpbnQ4QXJyYXkoZm9vdGVyKTtcbiAgdmFyIGhlYWRlckxlbmd0aCA9IGhlYWRlckFycmF5Lmxlbmd0aDtcbiAgdmFyIGZvb3Rlckxlbmd0aCA9IGZvb3RlckFycmF5Lmxlbmd0aDtcbiAgdmFyIGxlbmd0aCA9IDA7IC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgbGVuZ3RoIGZvciB0aGUgZmluYWwgYXJyYXlcblxuICB2YXIgY29udGVudEFycmF5cyA9IGRhdGFzZXRzLm1hcChmdW5jdGlvbiAoZGF0YXNldEJ1ZmZlcikge1xuICAgIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhc2V0QnVmZmVyKTtcbiAgICB2YXIgY29udGVudExlbmd0aCA9IGNvbnRlbnRBcnJheS5sZW5ndGg7XG4gICAgbGVuZ3RoICs9IGhlYWRlckxlbmd0aCArIGNvbnRlbnRMZW5ndGggKyBmb290ZXJMZW5ndGg7XG4gICAgcmV0dXJuIGNvbnRlbnRBcnJheTtcbiAgfSk7IC8vIEFsbG9jYXRlIHRoZSBhcnJheVxuXG4gIHZhciBtdWx0aXBhcnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7IC8vIFNldCB0aGUgaW5pdGlhbCBoZWFkZXJcblxuICBtdWx0aXBhcnRBcnJheS5zZXQoaGVhZGVyQXJyYXksIDApOyAvLyBXcml0ZSBlYWNoIGRhdGFzZXQgaW50byB0aGUgbXVsdGlwYXJ0IGFycmF5XG5cbiAgdmFyIHBvc2l0aW9uID0gMDtcbiAgY29udGVudEFycmF5cy5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50QXJyYXkpIHtcbiAgICB2YXIgY29udGVudExlbmd0aCA9IGNvbnRlbnRBcnJheS5sZW5ndGg7XG4gICAgbXVsdGlwYXJ0QXJyYXkuc2V0KGhlYWRlckFycmF5LCBwb3NpdGlvbik7XG4gICAgbXVsdGlwYXJ0QXJyYXkuc2V0KGNvbnRlbnRBcnJheSwgcG9zaXRpb24gKyBoZWFkZXJMZW5ndGgpO1xuICAgIHBvc2l0aW9uICs9IGhlYWRlckxlbmd0aCArIGNvbnRlbnRBcnJheS5sZW5ndGg7XG4gIH0pO1xuICBtdWx0aXBhcnRBcnJheS5zZXQoZm9vdGVyQXJyYXksIHBvc2l0aW9uKTtcbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBtdWx0aXBhcnRBcnJheS5idWZmZXIsXG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5XG4gIH07XG59XG4vKipcbiAqIERlY29kZSBhIE11bHRpcGFydCBlbmNvZGVkIEFycmF5QnVmZmVyIGFuZCByZXR1cm4gdGhlIGNvbXBvbmVudHMgYXMgYW4gQXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gcmVzcG9uc2UgRGF0YSBlbmNvZGVkIGFzIGEgJ211bHRpcGFydC9yZWxhdGVkJyBtZXNzYWdlXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBjb250ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBtdWx0aXBhcnREZWNvZGUocmVzcG9uc2UpIHtcbiAgdmFyIG1lc3NhZ2UgPSBuZXcgVWludDhBcnJheShyZXNwb25zZSk7XG4gIC8qIFNldCBhIG1heGltdW0gbGVuZ3RoIHRvIHNlYXJjaCBmb3IgdGhlIGhlYWRlciBib3VuZGFyaWVzLCBvdGhlcndpc2VcbiAgICAgZmluZFRva2VuIGNhbiBydW4gZm9yIGEgbG9uZyB0aW1lXG4gICovXG5cbiAgdmFyIG1heFNlYXJjaExlbmd0aCA9IDEwMDA7IC8vIEZpcnN0IGxvb2sgZm9yIHRoZSBtdWx0aXBhcnQgbWltZSBoZWFkZXJcblxuICB2YXIgc2VwYXJhdG9yID0gc3RyaW5nVG9VaW50OEFycmF5KFwiXFxyXFxuXFxyXFxuXCIpO1xuICB2YXIgaGVhZGVySW5kZXggPSBmaW5kVG9rZW4obWVzc2FnZSwgc2VwYXJhdG9yLCAwLCBtYXhTZWFyY2hMZW5ndGgpO1xuXG4gIGlmIChoZWFkZXJJbmRleCA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNwb25zZSBtZXNzYWdlIGhhcyBubyBtdWx0aXBhcnQgbWltZSBoZWFkZXJcIik7XG4gIH1cblxuICB2YXIgaGVhZGVyID0gdWludDhBcnJheVRvU3RyaW5nKG1lc3NhZ2UsIDAsIGhlYWRlckluZGV4KTtcbiAgdmFyIGJvdW5kYXJ5U3RyaW5nID0gaWRlbnRpZnlCb3VuZGFyeShoZWFkZXIpO1xuXG4gIGlmICghYm91bmRhcnlTdHJpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXIgb2YgcmVzcG9uc2UgbWVzc2FnZSBkb2VzIG5vdCBzcGVjaWZ5IGJvdW5kYXJ5XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJ5ID0gc3RyaW5nVG9VaW50OEFycmF5KGJvdW5kYXJ5U3RyaW5nKTtcbiAgdmFyIGNvbXBvbmVudHMgPSBbXTtcbiAgdmFyIG9mZnNldCA9IGhlYWRlckluZGV4ICsgc2VwYXJhdG9yLmxlbmd0aDsgLy8gTG9vcCB1bnRpbCB3ZSBjYW5ub3QgZmluZCBhbnkgbW9yZSBib3VuZGFyaWVzXG5cbiAgdmFyIGJvdW5kYXJ5SW5kZXg7XG5cbiAgd2hpbGUgKGJvdW5kYXJ5SW5kZXggIT09IC0xKSB7XG4gICAgLy8gU2VhcmNoIGZvciB0aGUgbmV4dCBib3VuZGFyeSBpbiB0aGUgbWVzc2FnZSwgc3RhcnRpbmdcbiAgICAvLyBmcm9tIHRoZSBjdXJyZW50IG9mZnNldCBwb3NpdGlvblxuICAgIGJvdW5kYXJ5SW5kZXggPSBmaW5kVG9rZW4obWVzc2FnZSwgYm91bmRhcnksIG9mZnNldCk7IC8vIElmIG5vIGZ1cnRoZXIgYm91bmRhcmllcyBhcmUgZm91bmQsIHN0b3AgaGVyZS5cblxuICAgIGlmIChib3VuZGFyeUluZGV4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfSAvLyBFeHRyYWN0IGRhdGEgZnJvbSByZXNwb25zZSBtZXNzYWdlLCBleGNsdWRpbmcgXCJcXHJcXG5cIlxuXG5cbiAgICB2YXIgc3BhY2luZ0xlbmd0aCA9IDI7XG4gICAgdmFyIGxlbmd0aCA9IGJvdW5kYXJ5SW5kZXggLSBvZmZzZXQgLSBzcGFjaW5nTGVuZ3RoO1xuICAgIHZhciBkYXRhID0gcmVzcG9uc2Uuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpOyAvLyBBZGQgdGhlIGRhdGEgdG8gdGhlIGFycmF5IG9mIHJlc3VsdHNcblxuICAgIGNvbXBvbmVudHMucHVzaChkYXRhKTsgLy8gZmluZCB0aGUgZW5kIG9mIHRoZSBib3VuZGFyeVxuXG4gICAgdmFyIGJvdW5kYXJ5RW5kID0gZmluZFRva2VuKG1lc3NhZ2UsIHNlcGFyYXRvciwgYm91bmRhcnlJbmRleCArIDEsIG1heFNlYXJjaExlbmd0aCk7XG4gICAgaWYgKGJvdW5kYXJ5RW5kID09PSAtMSkgYnJlYWs7IC8vIE1vdmUgdGhlIG9mZnNldCB0byB0aGUgZW5kIG9mIHRoZSBpZGVudGlmaWVkIGJvdW5kYXJ5XG5cbiAgICBvZmZzZXQgPSBib3VuZGFyeUVuZCArIHNlcGFyYXRvci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gY29tcG9uZW50cztcbn1cbi8qKlxuICogQ3JlYXRlIGEgcmFuZG9tIEdVSURcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBndWlkKCkge1xuICBmdW5jdGlvbiBzNCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIHJldHVybiBzNCgpICsgczQoKSArIFwiLVwiICsgczQoKSArIFwiLVwiICsgczQoKSArIFwiLVwiICsgczQoKSArIFwiLVwiICsgczQoKSArIHM0KCkgKyBzNCgpO1xufVxuXG52YXIgbWVzc2FnZSA9IHtcbiAgY29udGFpbnNUb2tlbjogY29udGFpbnNUb2tlbixcbiAgZmluZFRva2VuOiBmaW5kVG9rZW4sXG4gIGlkZW50aWZ5Qm91bmRhcnk6IGlkZW50aWZ5Qm91bmRhcnksXG4gIHVpbnQ4QXJyYXlUb1N0cmluZzogdWludDhBcnJheVRvU3RyaW5nLFxuICBzdHJpbmdUb1VpbnQ4QXJyYXk6IHN0cmluZ1RvVWludDhBcnJheSxcbiAgbXVsdGlwYXJ0RW5jb2RlOiBtdWx0aXBhcnRFbmNvZGUsXG4gIG11bHRpcGFydERlY29kZTogbXVsdGlwYXJ0RGVjb2RlLFxuICBndWlkOiBndWlkXG59O1xuXG52YXIgdXRpbGl0aWVzID0ge1xuICBUSUQxNTAwOiBUSUQxNTAwLFxuICBUSUQzMDA6IFRJRDMwMCxcbiAgbWVzc2FnZTogbWVzc2FnZVxufTtcblxudmFyIENvZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2RlKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29kZSk7XG5cbiAgICB0aGlzW192YWx1ZV0gPSBvcHRpb25zLnZhbHVlO1xuICAgIHRoaXNbX21lYW5pbmddID0gb3B0aW9ucy5tZWFuaW5nO1xuICAgIHRoaXNbX3NjaGVtZURlc2lnbmF0b3JdID0gb3B0aW9ucy5zY2hlbWVEZXNpZ25hdG9yO1xuICAgIHRoaXNbX3NjaGVtZVZlcnNpb25dID0gb3B0aW9ucy5zY2hlbWVWZXJzaW9uIHx8IG51bGw7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29kZSwgW3tcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzW192YWx1ZV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1lYW5pbmdcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzW19tZWFuaW5nXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2NoZW1lRGVzaWduYXRvclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXNbX3NjaGVtZURlc2lnbmF0b3JdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzY2hlbWVWZXJzaW9uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpc1tfc2NoZW1lVmVyc2lvbl07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvZGU7XG59KCk7XG5cbnZhciBDb2RlZENvbmNlcHQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2RlZENvbmNlcHQob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlZENvbmNlcHQpO1xuXG4gICAgaWYgKG9wdGlvbnMudmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgaXMgcmVxdWlyZWQgZm9yIENvZGVkQ29uY2VwdC5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWVhbmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ21lYW5pbmcnIGlzIHJlcXVpcmVkIGZvciBDb2RlZENvbmNlcHQuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjaGVtZURlc2lnbmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzY2hlbWVEZXNpZ25hdG9yJyBpcyByZXF1aXJlZCBmb3IgQ29kZWRDb25jZXB0LlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLkNvZGVWYWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgdGhpcy5Db2RlTWVhbmluZyA9IG9wdGlvbnMubWVhbmluZztcbiAgICB0aGlzLkNvZGluZ1NjaGVtZURlc2lnbmF0b3IgPSBvcHRpb25zLnNjaGVtZURlc2lnbmF0b3I7XG5cbiAgICBpZiAoXCJzY2hlbWVWZXJzaW9uXCIgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5Db2RpbmdTY2hlbWVWZXJzaW9uID0gb3B0aW9ucy5zY2hlbWVWZXJzaW9uO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2RlZENvbmNlcHQsIFt7XG4gICAga2V5OiBcImVxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICAgIGlmIChvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZSAmJiBvdGhlci5zY2hlbWVEZXNpZ25hdG9yID09PSB0aGlzLnNjaGVtZURlc2lnbmF0b3IpIHtcbiAgICAgICAgaWYgKG90aGVyLnNjaGVtZVZlcnNpb24gJiYgdGhpcy5zY2hlbWVWZXJzaW9uKSB7XG4gICAgICAgICAgcmV0dXJuIG90aGVyLnNjaGVtZVZlcnNpb24gPT09IHRoaXMuc2NoZW1lVmVyc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5Db2RlVmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1lYW5pbmdcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLkNvZGVNZWFuaW5nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzY2hlbWVEZXNpZ25hdG9yXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5Db2RpbmdTY2hlbWVEZXNpZ25hdG9yO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzY2hlbWVWZXJzaW9uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5Db2RpbmdTY2hlbWVWZXJzaW9uO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2RlZENvbmNlcHQ7XG59KCk7XG5cbnZhciBjb2RpbmcgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdENvZGU6IENvZGUsXG5cdENvZGVkQ29uY2VwdDogQ29kZWRDb25jZXB0XG59KTtcblxudmFyIFZhbHVlVHlwZXMgPSB7XG4gIENPREU6IFwiQ09ERVwiLFxuICBDT01QT1NJVEU6IFwiQ09NUE9TSVRFXCIsXG4gIENPTlRBSU5FUjogXCJDT05UQUlORVJcIixcbiAgREFURTogXCJEQVRFXCIsXG4gIERBVEVUSU1FOiBcIkRBVEVUSU1FXCIsXG4gIElNQUdFOiBcIklNQUdFXCIsXG4gIE5VTTogXCJOVU1cIixcbiAgUE5BTUU6IFwiUE5BTUVcIixcbiAgU0NPT1JEOiBcIlNDT09SRFwiLFxuICBTQ09PUkQzRDogXCJTQ09PUkQzRFwiLFxuICBUQ09PUkQ6IFwiVENPT1JEXCIsXG4gIFRFWFQ6IFwiVEVYVFwiLFxuICBUSU1FOiBcIlRJTUVcIixcbiAgVUlEUkVGOiBcIlVJRFJFRlwiLFxuICBXQVZFRk9STTogXCJXQVZFRk9STVwiXG59O1xuT2JqZWN0LmZyZWV6ZShWYWx1ZVR5cGVzKTtcbnZhciBHcmFwaGljVHlwZXMgPSB7XG4gIENJUkNMRTogXCJDSVJDTEVcIixcbiAgRUxMSVBTRTogXCJFTExJUFNFXCIsXG4gIEVMTElQU09JRDogXCJFTExJUFNPSURcIixcbiAgTVVMVElQT0lOVDogXCJNVUxUSVBPSU5UXCIsXG4gIFBPSU5UOiBcIlBPSU5UXCIsXG4gIFBPTFlMSU5FOiBcIlBPTFlMSU5FXCJcbn07XG5PYmplY3QuZnJlZXplKEdyYXBoaWNUeXBlcyk7XG52YXIgR3JhcGhpY1R5cGVzM0QgPSB7XG4gIEVMTElQU0U6IFwiRUxMSVBTRVwiLFxuICBFTExJUFNPSUQ6IFwiRUxMSVBTT0lEXCIsXG4gIE1VTFRJUE9JTlQ6IFwiTVVMVElQT0lOVFwiLFxuICBQT0lOVDogXCJQT0lOVFwiLFxuICBQT0xZTElORTogXCJQT0xZTElORVwiLFxuICBQT0xZR09OOiBcIlBPTFlHT05cIlxufTtcbk9iamVjdC5mcmVlemUoR3JhcGhpY1R5cGVzM0QpO1xudmFyIFRlbXBvcmFsUmFuZ2VUeXBlcyA9IHtcbiAgQkVHSU46IFwiQkVHSU5cIixcbiAgRU5EOiBcIkVORFwiLFxuICBNVUxUSVBPSU5UOiBcIk1VTFRJUE9JTlRcIixcbiAgTVVMVElTRUdNRU5UOiBcIk1VTFRJU0VHTUVOVFwiLFxuICBQT0lOVDogXCJQT0lOVFwiLFxuICBTRUdNRU5UOiBcIlNFR01FTlRcIlxufTtcbk9iamVjdC5mcmVlemUoVGVtcG9yYWxSYW5nZVR5cGVzKTtcbnZhciBSZWxhdGlvbnNoaXBUeXBlcyA9IHtcbiAgQ09OVEFJTlM6IFwiQ09OVEFJTlNcIixcbiAgSEFTX0FDUV9DT05URU5UOiBcIkhBUyBBQ1EgQ09OVEVOVFwiLFxuICBIQVNfQ09OQ0VQVF9NT0Q6IFwiSEFTIENPTkNFUFQgTU9EXCIsXG4gIEhBU19PQlNfQ09OVEVYVDogXCJIQVMgT0JTIENPTlRFWFRcIixcbiAgSEFTX1BST1BFUlRJRVM6IFwiSEFTIFBST1BFUlRJRVNcIixcbiAgSU5GRVJSRURfRlJPTTogXCJJTkZFUlJFRCBGUk9NXCIsXG4gIFNFTEVDVEVEX0ZST006IFwiU0VMRUNURUQgRlJPTVwiXG59O1xuT2JqZWN0LmZyZWV6ZShSZWxhdGlvbnNoaXBUeXBlcyk7XG52YXIgUGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbnMgPSB7XG4gIEZSQU1FOiBcIkZSQU1FXCIsXG4gIFZPTFVNRTogXCJWT0xVTUVcIlxufTtcbk9iamVjdC5mcmVlemUoUmVsYXRpb25zaGlwVHlwZXMpO1xuXG5mdW5jdGlvbiBpc0Zsb2F0KG4pIHtcbiAgcmV0dXJuIG4gPT09ICtuICYmIG4gIT09IChuIHwgMCk7XG59XG5cbmZ1bmN0aW9uIHplcm9QYWQodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA+IDkgPyBcIlwiIDogXCIwXCIpICsgdmFsdWU7XG59XG5cbmZ1bmN0aW9uIFRNKGRhdGUpIHtcbiAgLy8gJUglTSVTLiVmXG4gIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgdmFyIG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgdmFyIHNlY29uZHMgPSBkYXRlLmdldFNlY29uZHMoKTtcbiAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiB6ZXJvUGFkKGhvdXJzKSArIHplcm9QYWQobWludXRlcykgKyB6ZXJvUGFkKHNlY29uZHMpICsgbWlsbGlzZWNvbmRzO1xufVxuXG5mdW5jdGlvbiBEQShkYXRlKSB7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gIHJldHVybiB5ZWFyICsgemVyb1BhZChtb250aCkgKyB6ZXJvUGFkKGRheSk7XG59XG5cbmZ1bmN0aW9uIERUKGRhdGUpIHtcbiAgcmV0dXJuIERBKGRhdGUpICsgVE0oZGF0ZSk7XG59XG5cbnZhciBDb250ZW50U2VxdWVuY2UkMSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0cyhDb250ZW50U2VxdWVuY2UsIF9BcnJheSk7XG5cbiAgZnVuY3Rpb24gQ29udGVudFNlcXVlbmNlKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRlbnRTZXF1ZW5jZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKENvbnRlbnRTZXF1ZW5jZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICB9IC8vIGZpbHRlckJ5KG9wdGlvbnMpIHtcbiAgLy8gfVxuXG5cbiAgcmV0dXJuIENvbnRlbnRTZXF1ZW5jZTtcbn0oX3dyYXBOYXRpdmVTdXBlcihBcnJheSkpO1xuXG52YXIgQ29udGVudEl0ZW0gPSBmdW5jdGlvbiBDb250ZW50SXRlbShvcHRpb25zKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZW50SXRlbSk7XG5cbiAgaWYgKG9wdGlvbnMubmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICduYW1lJyBpcyByZXF1aXJlZCBmb3IgQ29udGVudEl0ZW0uXCIpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubmFtZS5jb25zdHJ1Y3RvciAhPT0gQ29kZWRDb25jZXB0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICduYW1lJyBtdXN0IGhhdmUgdHlwZSBDb2RlZENvbmNlcHQuXCIpO1xuICB9XG5cbiAgdGhpcy5Db25jZXB0TmFtZUNvZGVTZXF1ZW5jZSA9IFtvcHRpb25zLm5hbWVdO1xuXG4gIGlmIChvcHRpb25zLnZhbHVlVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZVR5cGUnIGlzIHJlcXVpcmVkIGZvciBDb250ZW50SXRlbS5cIik7XG4gIH1cblxuICBpZiAoIShPYmplY3QudmFsdWVzKFZhbHVlVHlwZXMpLmluZGV4T2Yob3B0aW9ucy52YWx1ZVR5cGUpICE9PSAtMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIHR5cGUgXCIuY29uY2F0KG9wdGlvbnMudmFsdWVUeXBlKSk7XG4gIH1cblxuICB0aGlzLlZhbHVlVHlwZSA9IG9wdGlvbnMudmFsdWVUeXBlO1xuXG4gIGlmIChvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghKE9iamVjdC52YWx1ZXMoUmVsYXRpb25zaGlwVHlwZXMpLmluZGV4T2Yob3B0aW9ucy5yZWxhdGlvbnNoaXBUeXBlKSAhPT0gLTEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJlbGF0aW9uc2hpcCB0eXBlIFwiLmNvbmNhdChvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGVzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5SZWxhdGlvbnNoaXBUeXBlID0gb3B0aW9ucy5yZWxhdGlvbnNoaXBUeXBlO1xuICB9IC8vIFRPRE86IHJlbGF0aW9uc2hpcCB0eXBlIGlzIHJlcXVpcmVkXG5cbn0gLy8gZ2V0Q29udGVudEl0ZW1zKG9wdGlvbnMpIHtcbi8vICAgLy8gVE9ETzogZmlsdGVyIGJ5IG5hbWUsIHZhbHVlIHR5cGUgYW5kIHJlbGF0aW9uc2hpcCB0eXBlXG4vLyAgIHJldHVybiB0aGlzLkNvbnRlbnRTZXF1ZW5jZTtcbi8vIH1cbjtcblxudmFyIENvZGVDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtKSB7XG4gIF9pbmhlcml0cyhDb2RlQ29udGVudEl0ZW0sIF9Db250ZW50SXRlbSk7XG5cbiAgZnVuY3Rpb24gQ29kZUNvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29kZUNvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENvZGVDb250ZW50SXRlbSkuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGUsXG4gICAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZXMuQ09ERVxuICAgIH0pKTtcblxuICAgIGlmIChvcHRpb25zLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndmFsdWUnIGlzIHJlcXVpcmVkIGZvciBDb2RlQ29udGVudEl0ZW0uXCIpO1xuICAgIH1cblxuICAgIGlmICghKG9wdGlvbnMudmFsdWUgfHwgb3B0aW9ucy52YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQ29kZWRDb25jZXB0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgbXVzdCBoYXZlIHR5cGUgQ29kZWRDb25jZXB0LlwiKTtcbiAgICB9XG5cbiAgICBfdGhpcy5Db25jZXB0Q29kZVNlcXVlbmNlID0gW29wdGlvbnMudmFsdWVdO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBDb2RlQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIFRleHRDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtMikge1xuICBfaW5oZXJpdHMoVGV4dENvbnRlbnRJdGVtLCBfQ29udGVudEl0ZW0yKTtcblxuICBmdW5jdGlvbiBUZXh0Q29udGVudEl0ZW0ob3B0aW9ucykge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dENvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUZXh0Q29udGVudEl0ZW0pLmNhbGwodGhpcywge1xuICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogb3B0aW9ucy5yZWxhdGlvbnNoaXBUeXBlLFxuICAgICAgdmFsdWVUeXBlOiBWYWx1ZVR5cGVzLlRFWFRcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlJyBpcyByZXF1aXJlZCBmb3IgVGV4dENvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLnZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgbXVzdCBoYXZlIHR5cGUgU3RyaW5nLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczIuVGV4dFZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgcmV0dXJuIFRleHRDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgUE5hbWVDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtMykge1xuICBfaW5oZXJpdHMoUE5hbWVDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtMyk7XG5cbiAgZnVuY3Rpb24gUE5hbWVDb250ZW50SXRlbShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQTmFtZUNvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzMyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQTmFtZUNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5QTkFNRVxuICAgIH0pKTtcblxuICAgIGlmIChvcHRpb25zLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndmFsdWUnIGlzIHJlcXVpcmVkIGZvciBQTmFtZUNvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLnZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgbXVzdCBoYXZlIHR5cGUgU3RyaW5nLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczMuUGVyc29uTmFtZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHJldHVybiBQTmFtZUNvbnRlbnRJdGVtO1xufShDb250ZW50SXRlbSk7XG5cbnZhciBUaW1lQ29udGVudEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250ZW50SXRlbTQpIHtcbiAgX2luaGVyaXRzKFRpbWVDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtNCk7XG5cbiAgZnVuY3Rpb24gVGltZUNvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVDb250ZW50SXRlbSk7XG5cbiAgICBfdGhpczQgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGltZUNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5USU1FXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMudmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgaXMgcmVxdWlyZWQgZm9yIFRpbWVDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLnZhbHVlKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnZhbHVlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndmFsdWUnIG11c3QgaGF2ZSB0eXBlIERhdGUuXCIpO1xuICAgIH1cblxuICAgIF90aGlzNC5UaW1lID0gVE0ob3B0aW9ucy52YWx1ZSk7XG4gICAgcmV0dXJuIF90aGlzNDtcbiAgfVxuXG4gIHJldHVybiBUaW1lQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIERhdGVDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtNSkge1xuICBfaW5oZXJpdHMoRGF0ZUNvbnRlbnRJdGVtLCBfQ29udGVudEl0ZW01KTtcblxuICBmdW5jdGlvbiBEYXRlQ29udGVudEl0ZW0ob3B0aW9ucykge1xuICAgIHZhciBfdGhpczU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZUNvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzNSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEYXRlQ29udGVudEl0ZW0pLmNhbGwodGhpcywge1xuICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogb3B0aW9ucy5yZWxhdGlvbnNoaXBUeXBlLFxuICAgICAgdmFsdWVUeXBlOiBWYWx1ZVR5cGVzLkRBVEVcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlJyBpcyByZXF1aXJlZCBmb3IgRGF0ZUNvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMudmFsdWUpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMudmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgbXVzdCBoYXZlIHR5cGUgRGF0ZS5cIik7XG4gICAgfVxuXG4gICAgX3RoaXM1LkRhdGUgPSBEQShvcHRpb25zLnZhbHVlKTtcbiAgICByZXR1cm4gX3RoaXM1O1xuICB9XG5cbiAgcmV0dXJuIERhdGVDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgRGF0ZVRpbWVDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtNikge1xuICBfaW5oZXJpdHMoRGF0ZVRpbWVDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtNik7XG5cbiAgZnVuY3Rpb24gRGF0ZVRpbWVDb250ZW50SXRlbShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzNjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlVGltZUNvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzNiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEYXRlVGltZUNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5EQVRFVElNRVxuICAgIH0pKTtcblxuICAgIGlmIChvcHRpb25zLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndmFsdWUnIGlzIHJlcXVpcmVkIGZvciBEYXRlVGltZUNvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMudmFsdWUpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMudmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZScgbXVzdCBoYXZlIHR5cGUgRGF0ZS5cIik7XG4gICAgfVxuXG4gICAgX3RoaXM2LkRhdGVUaW1lID0gRFQob3Rpb25zLnZhbHVlKTtcbiAgICByZXR1cm4gX3RoaXM2O1xuICB9XG5cbiAgcmV0dXJuIERhdGVUaW1lQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIFVJRFJlZkNvbnRlbnRJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGVudEl0ZW03KSB7XG4gIF9pbmhlcml0cyhVSURSZWZDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtNyk7XG5cbiAgZnVuY3Rpb24gVUlEUmVmQ29udGVudEl0ZW0ob3B0aW9ucykge1xuICAgIHZhciBfdGhpczc7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVUlEUmVmQ29udGVudEl0ZW0pO1xuXG4gICAgX3RoaXM3ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVJRFJlZkNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5VSURSRUZcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlJyBpcyByZXF1aXJlZCBmb3IgVUlEUmVmQ29udGVudEl0ZW0uXCIpO1xuICAgIH1cblxuICAgIGlmICghKHR5cGVvZiBvcHRpb25zLnZhbHVlID09PSBcInN0cmluZ1wiIHx8IG9wdGlvbnMudmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlJyBtdXN0IGhhdmUgdHlwZSBTdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIF90aGlzNy5VSUQgPSBvcHRpb25zLnZhbHVlO1xuICAgIHJldHVybiBfdGhpczc7XG4gIH1cblxuICByZXR1cm4gVUlEUmVmQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIE51bUNvbnRlbnRJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGVudEl0ZW04KSB7XG4gIF9pbmhlcml0cyhOdW1Db250ZW50SXRlbSwgX0NvbnRlbnRJdGVtOCk7XG5cbiAgZnVuY3Rpb24gTnVtQ29udGVudEl0ZW0ob3B0aW9ucykge1xuICAgIHZhciBfdGhpczg7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVtQ29udGVudEl0ZW0pO1xuXG4gICAgX3RoaXM4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE51bUNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5OVU1cbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy52YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBvcHRpb25zLnZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlJyBtdXN0IGhhdmUgdHlwZSBOdW1iZXIuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy51bml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd1bml0JyBpcyByZXF1aXJlZCBmb3IgTnVtQ29udGVudEl0ZW0gd2l0aCAndmFsdWUnLlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW0gPSB7fTtcbiAgICAgIGl0ZW0uTnVtZXJpY1ZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblxuICAgICAgaWYgKGlzRmxvYXQob3B0aW9ucy52YWx1ZSkpIHtcbiAgICAgICAgaXRlbS5GbG9hdGluZ1BvaW50VmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpdGVtLk1lYXN1cmVtZW50VW5pdHNDb2RlU2VxdWVuY2UgPSBvcHRpb25zLnVuaXQ7XG4gICAgICBfdGhpczguTWVhc3VyZWRWYWx1ZVNlcXVlbmNlID0gW2l0ZW1dO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5xdWFsaWZpZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEob3B0aW9ucy5xdWFsaWZpZXIgfHwgb3B0aW9ucy5xdWFsaWZpZXIuY29uc3RydWN0b3IgPT09IENvZGVkQ29uY2VwdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdxdWFsaWZpZXInIG11c3QgaGF2ZSB0eXBlIENvZGVkQ29uY2VwdC5cIik7XG4gICAgICB9XG5cbiAgICAgIF90aGlzOC5OdW1lcmljVmFsdWVRdWFsaWZpZXJDb2RlU2VxdWVuY2UgPSBbb3B0aW9ucy5xdWFsaWZpZXJdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFaXRoZXIgb3B0aW9uICd2YWx1ZScgb3IgJ3F1YWxpZmllcicgaXMgcmVxdWlyZWQgZm9yIE51bUNvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM4O1xuICB9XG5cbiAgcmV0dXJuIE51bUNvbnRlbnRJdGVtO1xufShDb250ZW50SXRlbSk7XG5cbnZhciBDb250YWluZXJDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtOSkge1xuICBfaW5oZXJpdHMoQ29udGFpbmVyQ29udGVudEl0ZW0sIF9Db250ZW50SXRlbTkpO1xuXG4gIGZ1bmN0aW9uIENvbnRhaW5lckNvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM5O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhaW5lckNvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzOSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDb250YWluZXJDb250ZW50SXRlbSkuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGUsXG4gICAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZXMuQ09OVEFJTkVSXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMuaXNDb250ZW50Q29udGludW91cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpczkuQ29udGludWl0eU9mQ29udGVudCA9IFwiQ09OVElOVU9VU1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczkuQ29udGludWl0eU9mQ29udGVudCA9IFwiU0VQQVJBVEVcIjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50ZW1wbGF0ZUlEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKHR5cGVvZiBvcHRpb25zLnRlbXBsYXRlSUQgPT09IFwic3RyaW5nXCIgfHwgb3B0aW9ucy50ZW1wbGF0ZUlEIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RlbXBsYXRlSUQnIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtID0ge307XG4gICAgICBpdGVtLk1hcHBpbmdSZXNvdXJjZSA9IFwiRENNUlwiO1xuICAgICAgaXRlbS5UZW1wbGF0ZUlkZW50aWZpZXIgPSBvcHRpb25zLnRlbXBsYXRlSUQ7XG4gICAgICBfdGhpczkuQ29udGVudFRlbXBsYXRlU2VxdWVuY2UgPSBbaXRlbV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzOTtcbiAgfVxuXG4gIHJldHVybiBDb250YWluZXJDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgQ29tcG9zaXRlQ29udGVudEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250ZW50SXRlbTEwKSB7XG4gIF9pbmhlcml0cyhDb21wb3NpdGVDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtMTApO1xuXG4gIGZ1bmN0aW9uIENvbXBvc2l0ZUNvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxMDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb3NpdGVDb250ZW50SXRlbSk7XG5cbiAgICBfdGhpczEwID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENvbXBvc2l0ZUNvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5DT01QT1NJVEVcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkU09QQ2xhc3NVSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkU09QQ2xhc3NVSUQnIGlzIHJlcXVpcmVkIGZvciBDb21wb3NpdGVDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEJyBpcyByZXF1aXJlZCBmb3IgQ29tcG9zaXRlQ29udGVudEl0ZW0uXCIpO1xuICAgIH1cblxuICAgIGlmICghKHR5cGVvZiBvcHRpb25zLnJlZmVyZW5jZWRTT1BDbGFzc1VJRCA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLnJlZmVyZW5jZWRTT1BDbGFzc1VJRCBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNPUENsYXNzVUlEJyBtdXN0IGhhdmUgdHlwZSBTdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIGlmICghKHR5cGVvZiBvcHRpb25zLnJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLnJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEJyBtdXN0IGhhdmUgdHlwZSBTdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0ge307XG4gICAgaXRlbS5SZWZlcmVuY2VkU09QQ2xhc3NVSUQgPSBvcHRpb25zLnJlZmVyZW5jZWRTT1BDbGFzc1VJRDtcbiAgICBpdGVtLlJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCA9IG9wdGlvbnMucmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEO1xuICAgIF90aGlzMTAuUmVmZXJlbmNlU09QU2VxdWVuY2UgPSBbaXRlbV07XG4gICAgcmV0dXJuIF90aGlzMTA7XG4gIH1cblxuICByZXR1cm4gQ29tcG9zaXRlQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIEltYWdlQ29udGVudEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250ZW50SXRlbTExKSB7XG4gIF9pbmhlcml0cyhJbWFnZUNvbnRlbnRJdGVtLCBfQ29udGVudEl0ZW0xMSk7XG5cbiAgZnVuY3Rpb24gSW1hZ2VDb250ZW50SXRlbShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTE7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2VDb250ZW50SXRlbSk7XG5cbiAgICBfdGhpczExID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEltYWdlQ29udGVudEl0ZW0pLmNhbGwodGhpcywge1xuICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogb3B0aW9ucy5yZWxhdGlvbnNoaXBUeXBlLFxuICAgICAgdmFsdWVUeXBlOiBWYWx1ZVR5cGVzLklNQUdFXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFNPUENsYXNzVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNPUENsYXNzVUlEJyBpcyByZXF1aXJlZCBmb3IgSW1hZ2VDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEJyBpcyByZXF1aXJlZCBmb3IgSW1hZ2VDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEodHlwZW9mIG9wdGlvbnMucmVmZXJlbmNlZFNPUENsYXNzVUlEID09PSBcInN0cmluZ1wiIHx8IG9wdGlvbnMucmVmZXJlbmNlZFNPUENsYXNzVUlEIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkU09QQ2xhc3NVSUQnIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEodHlwZW9mIG9wdGlvbnMucmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID09PSBcInN0cmluZ1wiIHx8IG9wdGlvbnMucmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQnIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgdmFyIGl0ZW0gPSB7fTtcbiAgICBpdGVtLlJlZmVyZW5jZWRTT1BDbGFzc1VJRCA9IG9wdGlvbnMucmVmZXJlbmNlZFNPUENsYXNzVUlEO1xuICAgIGl0ZW0uUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID0gb3B0aW9ucy5yZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQ7XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkRnJhbWVOdW1iZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5yZWZlcmVuY2VkRnJhbWVOdW1iZXJzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnJlZmVyZW5jZWRGcmFtZU51bWJlcnMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkRnJhbWVOdW1iZXJzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgICB9IC8vIEZJWE1FOiB2YWx1ZSBtdWx0aXBsaWNpdHlcblxuXG4gICAgICBpdGVtLlJlZmVyZW5jZWRGcmFtZU51bWJlciA9IG9wdGlvbnMucmVmZXJlbmNlZEZyYW1lTnVtYmVycztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkRnJhbWVTZWdtZW50TnVtYmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudE51bWJlcnMpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMucmVmZXJlbmNlZFNlZ21lbnROdW1iZXJzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNlZ21lbnROdW1iZXJzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgICB9IC8vIEZJWE1FOiB2YWx1ZSBtdWx0aXBsaWNpdHlcblxuXG4gICAgICBpdGVtLlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyID0gb3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudE51bWJlcnM7XG4gICAgfVxuXG4gICAgX3RoaXMxMS5SZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBbaXRlbV07XG4gICAgcmV0dXJuIF90aGlzMTE7XG4gIH1cblxuICByZXR1cm4gSW1hZ2VDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgU2Nvb3JkQ29udGVudEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250ZW50SXRlbTEyKSB7XG4gIF9pbmhlcml0cyhTY29vcmRDb250ZW50SXRlbSwgX0NvbnRlbnRJdGVtMTIpO1xuXG4gIGZ1bmN0aW9uIFNjb29yZENvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxMjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY29vcmRDb250ZW50SXRlbSk7XG5cbiAgICBfdGhpczEyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNjb29yZENvbnRlbnRJdGVtKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IG9wdGlvbnMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlcy5TQ09PUkRcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy5ncmFwaGljVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2dyYXBoaWNUeXBlJyBpcyByZXF1aXJlZCBmb3IgU2Nvb3JkQ29udGVudEl0ZW0uXCIpO1xuICAgIH1cblxuICAgIGlmICghKHR5cGVvZiBvcHRpb25zLmdyYXBoaWNUeXBlID09PSBcInN0cmluZ1wiIHx8IG9wdGlvbnMuZ3JhcGhpY1R5cGUgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2dyYXBoaWNUeXBlJyBvZiBTY29vcmRDb250ZW50SXRlbSBtdXN0IGhhdmUgdHlwZSBTdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdyYXBoaWNEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnZ3JhcGhpY0RhdGEnIGlzIHJlcXVpcmVkIGZvciBTY29vcmRDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLmdyYXBoaWNEYXRhKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLmdyYXBoaWNEYXRhIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2dyYXBoaWNEYXRhJyBvZiBTY29vcmRDb250ZW50SXRlbSBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC52YWx1ZXMoR3JhcGhpY1R5cGVzKS5pbmRleE9mKG9wdGlvbnMuZ3JhcGhpY1R5cGUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBncmFwaGljIHR5cGUgJ1wiLmNvbmNhdChvcHRpb25zLmdyYXBoaWNUeXBlLCBcIicuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ncmFwaGljRGF0YVswXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBvcHRpb25zLmdyYXBoaWNEYXRhID0gW10uY29uY2F0LmFwcGx5KFtdLCBvcHRpb25zLmdyYXBoaWNEYXRhKTtcbiAgICB9XG5cbiAgICBfdGhpczEyLkdyYXBoaWNEYXRhID0gb3B0aW9ucy5ncmFwaGljRGF0YTtcbiAgICBvcHRpb25zLnBpeGVsT3JpZ2luSW50ZXJwcmV0YXRpb24gPSBvcHRpb25zLnBpeGVsT3JpZ2luSW50ZXJwcmV0YXRpb24gfHwgUGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbnMuVk9MVU1FO1xuXG4gICAgaWYgKCEodHlwZW9mIG9wdGlvbnMucGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbiA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLnBpeGVsT3JpZ2luSW50ZXJwcmV0YXRpb24gaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3BpeGVsT3JpZ2luSW50ZXJwcmV0YXRpb24nIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC52YWx1ZXMoUGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbnMpLmluZGV4T2Yob3B0aW9ucy5waXhlbE9yaWdpbkludGVycHJldGF0aW9uKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGl4ZWwgb3JpZ2luIGludGVycHJldGF0aW9uICdcIi5jb25jYXQob3B0aW9ucy5waXhlbE9yaWdpbkludGVycHJldGF0aW9uLCBcIicuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5maWR1Y2lhbFVJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy5maWR1Y2lhbFVJRCA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLmZpZHVjaWFsVUlEIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2ZpZHVjaWFsVUlEJyBtdXN0IGhhdmUgdHlwZSBTdHJpbmcuXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczEyLkZpZHVjaWFsVUlEID0gb3B0aW9ucy5maWR1Y2lhbFVJRDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMxMjtcbiAgfVxuXG4gIHJldHVybiBTY29vcmRDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgU2Nvb3JkM0RDb250ZW50SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRJdGVtMTMpIHtcbiAgX2luaGVyaXRzKFNjb29yZDNEQ29udGVudEl0ZW0sIF9Db250ZW50SXRlbTEzKTtcblxuICBmdW5jdGlvbiBTY29vcmQzRENvbnRlbnRJdGVtKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxMztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY29vcmQzRENvbnRlbnRJdGVtKTtcblxuICAgIF90aGlzMTMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2Nvb3JkM0RDb250ZW50SXRlbSkuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGUsXG4gICAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZXMuU0NPT1JEM0RcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy5ncmFwaGljVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2dyYXBoaWNUeXBlJyBpcyByZXF1aXJlZCBmb3IgU2Nvb3JkM0RDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEodHlwZW9mIG9wdGlvbnMuZ3JhcGhpY1R5cGUgPT09IFwic3RyaW5nXCIgfHwgb3B0aW9ucy5ncmFwaGljVHlwZSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnZ3JhcGhpY1R5cGUnIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZ3JhcGhpY0RhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdncmFwaGljRGF0YScgaXMgcmVxdWlyZWQgZm9yIFNjb29yZDNEQ29udGVudEl0ZW0uXCIpO1xuICAgIH1cblxuICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5ncmFwaGljRGF0YSkgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5ncmFwaGljRGF0YSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdncmFwaGljRGF0YScgbXVzdCBoYXZlIHR5cGUgQXJyYXkuXCIpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QudmFsdWVzKEdyYXBoaWNUeXBlczNEKS5pbmRleE9mKG9wdGlvbnMuZ3JhcGhpY1R5cGUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBncmFwaGljIHR5cGUgJ1wiLmNvbmNhdChvcHRpb25zLmdyYXBoaWNUeXBlLCBcIicuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ncmFwaGljRGF0YVswXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBvcHRpb25zLmdyYXBoaWNEYXRhID0gW10uY29uY2F0LmFwcGx5KFtdLCBvcHRpb25zLmdyYXBoaWNEYXRhKTtcbiAgICB9XG5cbiAgICBfdGhpczEzLkdyYXBoaWNUeXBlID0gb3B0aW9ucy5ncmFwaGljVHlwZTtcbiAgICBfdGhpczEzLkdyYXBoaWNEYXRhID0gb3B0aW9ucy5ncmFwaGljRGF0YTtcblxuICAgIGlmIChvcHRpb25zLmZyYW1lT2ZSZWZlcmVuY2VVSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdmcmFtZU9mUmVmZXJlbmNlVUlEJyBpcyByZXF1aXJlZCBmb3IgU2Nvb3JkM0RDb250ZW50SXRlbS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEodHlwZW9mIG9wdGlvbnMuZnJhbWVPZlJlZmVyZW5jZVVJRCA9PT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLmZyYW1lT2ZSZWZlcmVuY2VVSUQgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2ZyYW1lT2ZSZWZlcmVuY2VVSUQnIG11c3QgaGF2ZSB0eXBlIFN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgX3RoaXMxMy5SZWZlcmVuY2VkRnJhbWVPZlJlZmVyZW5jZVVJRCA9IG9wdGlvbnMuZnJhbWVPZlJlZmVyZW5jZVVJRDtcblxuICAgIGlmIChcImZpZHVjaWFsVUlEXCIgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKCEodHlwZW9mIG9wdGlvbnMuZmlkdWNpYWxVSUQgPT09IFwic3RyaW5nXCIgfHwgb3B0aW9ucy5maWR1Y2lhbFVJRCBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdmaWR1Y2lhbFVJRCcgbXVzdCBoYXZlIHR5cGUgU3RyaW5nLlwiKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMxMy5GaWR1Y2lhbFVJRCA9IGZpZHVjaWFsVUlEO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczEzO1xuICB9XG5cbiAgcmV0dXJuIFNjb29yZDNEQ29udGVudEl0ZW07XG59KENvbnRlbnRJdGVtKTtcblxudmFyIFRjb29yZENvbnRlbnRJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGVudEl0ZW0xNCkge1xuICBfaW5oZXJpdHMoVGNvb3JkQ29udGVudEl0ZW0sIF9Db250ZW50SXRlbTE0KTtcblxuICBmdW5jdGlvbiBUY29vcmRDb250ZW50SXRlbShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGNvb3JkQ29udGVudEl0ZW0pO1xuXG4gICAgX3RoaXMxNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUY29vcmRDb250ZW50SXRlbSkuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBvcHRpb25zLnJlbGF0aW9uc2hpcFR5cGUsXG4gICAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZXMuVENPT1JEXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMudGVtcG9yYWxSYW5nZVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd0ZW1wb3JhbFJhbmdlVHlwZScgaXMgcmVxdWlyZWQgZm9yIFRjb29yZENvbnRlbnRJdGVtLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhUZW1wb3JhbFJhbmdlVHlwZXMpLmluZGV4T2Yob3B0aW9ucy50ZW1wb3JhbFJhbmdlVHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRlbXBvcmFsIHJhbmdlIHR5cGUgJ1wiLmNvbmNhdChvcHRpb25zLnRlbXBvcmFsUmFuZ2VUeXBlLCBcIicuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkU2FtcGxlUG9zaXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5yZWZlcmVuY2VkU2FtcGxlUG9zaXRpb25zKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnJlZmVyZW5jZWRTYW1wbGVQb3NpdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkU2FtcGxlUG9zaXRpb25zJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgICB9IC8vIFRPRE86IGVuc3VyZSB2YWx1ZXMgYXJlIGludGVnZXJzXG5cblxuICAgICAgX3RoaXMxNC5SZWZlcmVuY2VkU2FtcGxlUG9zaXRpb25zID0gb3B0aW9ucy5yZWZlcmVuY2VkU2FtcGxlUG9zaXRpb25zO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZWZlcmVuY2VkVGltZU9mZnNldHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLnJlZmVyZW5jZWRUaW1lT2Zmc2V0cykgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5yZWZlcmVuY2VkVGltZU9mZnNldHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkVGltZU9mZnNldHMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICAgIH0gLy8gVE9ETzogZW5zdXJlIHZhbHVlcyBhcmUgZmxvYXRzXG5cblxuICAgICAgX3RoaXMxNC5SZWZlcmVuY2VkVGltZU9mZnNldHMgPSBvcHRpb25zLnJlZmVyZW5jZWRUaW1lT2Zmc2V0cztcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVmZXJlbmNlZERhdGVUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5yZWZlcmVuY2VkRGF0ZVRpbWUpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMucmVmZXJlbmNlZERhdGVUaW1lIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZERhdGVUaW1lJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMTQuUmVmZXJlbmNlZERhdGVUaW1lID0gb3B0aW9ucy5yZWZlcmVuY2VkRGF0ZVRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgaXMgcmVxdWlyZWQgZm9yIFRjb29yZENvbnRlbnRJdGVtOiBcIiArIFwiJ3JlZmVyZW5jZWRTYW1wbGVQb3NpdGlvbnMnLCAncmVmZXJlbmNlZFRpbWVPZmZzZXRzJywgb3IgXCIgKyBcIidyZWZlcmVuY2VkRGF0ZVRpbWUnLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMxNDtcbiAgfVxuXG4gIHJldHVybiBUY29vcmRDb250ZW50SXRlbTtcbn0oQ29udGVudEl0ZW0pO1xuXG52YXIgdmFsdWVUeXBlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0Q29kZUNvbnRlbnRJdGVtOiBDb2RlQ29udGVudEl0ZW0sXG5cdENvbnRhaW5lckNvbnRlbnRJdGVtOiBDb250YWluZXJDb250ZW50SXRlbSxcblx0Q29udGVudFNlcXVlbmNlOiBDb250ZW50U2VxdWVuY2UkMSxcblx0Q29tcG9zaXRlQ29udGVudEl0ZW06IENvbXBvc2l0ZUNvbnRlbnRJdGVtLFxuXHREYXRlQ29udGVudEl0ZW06IERhdGVDb250ZW50SXRlbSxcblx0RGF0ZVRpbWVDb250ZW50SXRlbTogRGF0ZVRpbWVDb250ZW50SXRlbSxcblx0R3JhcGhpY1R5cGVzOiBHcmFwaGljVHlwZXMsXG5cdEdyYXBoaWNUeXBlczNEOiBHcmFwaGljVHlwZXMzRCxcblx0SW1hZ2VDb250ZW50SXRlbTogSW1hZ2VDb250ZW50SXRlbSxcblx0TnVtQ29udGVudEl0ZW06IE51bUNvbnRlbnRJdGVtLFxuXHRQTmFtZUNvbnRlbnRJdGVtOiBQTmFtZUNvbnRlbnRJdGVtLFxuXHRQaXhlbE9yaWdpbkludGVycHJldGF0aW9uczogUGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbnMsXG5cdFJlbGF0aW9uc2hpcFR5cGVzOiBSZWxhdGlvbnNoaXBUeXBlcyxcblx0U2Nvb3JkQ29udGVudEl0ZW06IFNjb29yZENvbnRlbnRJdGVtLFxuXHRTY29vcmQzRENvbnRlbnRJdGVtOiBTY29vcmQzRENvbnRlbnRJdGVtLFxuXHRUY29vcmRDb250ZW50SXRlbTogVGNvb3JkQ29udGVudEl0ZW0sXG5cdFRlbXBvcmFsUmFuZ2VUeXBlczogVGVtcG9yYWxSYW5nZVR5cGVzLFxuXHRUZXh0Q29udGVudEl0ZW06IFRleHRDb250ZW50SXRlbSxcblx0VGltZUNvbnRlbnRJdGVtOiBUaW1lQ29udGVudEl0ZW0sXG5cdFVJRFJlZkNvbnRlbnRJdGVtOiBVSURSZWZDb250ZW50SXRlbSxcblx0VmFsdWVUeXBlczogVmFsdWVUeXBlc1xufSk7XG5cbnZhciBMb25naXR1ZGluYWxUZW1wb3JhbE9mZnNldEZyb21FdmVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX051bUNvbnRlbnRJdGVtKSB7XG4gIF9pbmhlcml0cyhMb25naXR1ZGluYWxUZW1wb3JhbE9mZnNldEZyb21FdmVudCwgX051bUNvbnRlbnRJdGVtKTtcblxuICBmdW5jdGlvbiBMb25naXR1ZGluYWxUZW1wb3JhbE9mZnNldEZyb21FdmVudChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvbmdpdHVkaW5hbFRlbXBvcmFsT2Zmc2V0RnJvbUV2ZW50KTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKExvbmdpdHVkaW5hbFRlbXBvcmFsT2Zmc2V0RnJvbUV2ZW50KS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMjg3NDBcIixcbiAgICAgICAgbWVhbmluZzogXCJMb25naXR1ZGluYWwgVGVtcG9yYWwgT2Zmc2V0IGZyb20gRXZlbnRcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy52YWx1ZSxcbiAgICAgIHVuaXQ6IG9wdGlvbnMudW5pdCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgIH0pKTtcbiAgICBfdGhpcy5Db250ZW50U2VxdWVuY2UgPSBuZXcgQ29udGVudFNlcXVlbmNlJDEoKTtcbiAgICB2YXIgaXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyODc0MVwiLFxuICAgICAgICBtZWFuaW5nOiBcIkxvbmdpdHVkaW5hbCBUZW1wb3JhbCBFdmVudCBUeXBlXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMuZXZlbnRUeXBlLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX0NPTkNFUFRfTU9EXG4gICAgfSk7XG5cbiAgICBfdGhpcy5Db250ZW50U2VxdWVuY2UucHVzaChpdGVtKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBMb25naXR1ZGluYWxUZW1wb3JhbE9mZnNldEZyb21FdmVudDtcbn0oTnVtQ29udGVudEl0ZW0pO1xuXG52YXIgU291cmNlSW1hZ2VGb3JSZWdpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9JbWFnZUNvbnRlbnRJdGVtKSB7XG4gIF9pbmhlcml0cyhTb3VyY2VJbWFnZUZvclJlZ2lvbiwgX0ltYWdlQ29udGVudEl0ZW0pO1xuXG4gIGZ1bmN0aW9uIFNvdXJjZUltYWdlRm9yUmVnaW9uKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU291cmNlSW1hZ2VGb3JSZWdpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTb3VyY2VJbWFnZUZvclJlZ2lvbikuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTIxMzI0XCIsXG4gICAgICAgIG1lYW5pbmc6IFwiU291cmNlIEltYWdlXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgcmVmZXJlbmNlZFNPUENsYXNzVUlEOiBvcHRpb25zLnJlZmVyZW5jZWRTT1BDbGFzc1VJRCxcbiAgICAgIHJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRDogb3B0aW9ucy5yZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQsXG4gICAgICByZWZlcmVuY2VkRnJhbWVOdW1iZXJzOiBvcHRpb25zLnJlZmVyZW5jZWRGcmFtZU51bWJlcnMsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5TRUxFQ1RFRF9GUk9NXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFNvdXJjZUltYWdlRm9yUmVnaW9uO1xufShJbWFnZUNvbnRlbnRJdGVtKTtcblxudmFyIFNvdXJjZUltYWdlRm9yU2VnbWVudGF0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfSW1hZ2VDb250ZW50SXRlbTIpIHtcbiAgX2luaGVyaXRzKFNvdXJjZUltYWdlRm9yU2VnbWVudGF0aW9uLCBfSW1hZ2VDb250ZW50SXRlbTIpO1xuXG4gIGZ1bmN0aW9uIFNvdXJjZUltYWdlRm9yU2VnbWVudGF0aW9uKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU291cmNlSW1hZ2VGb3JTZWdtZW50YXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTb3VyY2VJbWFnZUZvclNlZ21lbnRhdGlvbikuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTIxMjMzXCIsXG4gICAgICAgIG1lYW5pbmc6IFwiU291cmNlIEltYWdlIGZvciBTZWdtZW50YXRpb25cIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICByZWZlcmVuY2VkU09QQ2xhc3NVSUQ6IG9wdGlvbnMucmVmZXJlbmNlZFNPUENsYXNzVUlELFxuICAgICAgcmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEOiBvcHRpb25zLnJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCxcbiAgICAgIHJlZmVyZW5jZWRGcmFtZU51bWJlcnM6IG9wdGlvbnMucmVmZXJlbmNlZEZyYW1lTnVtYmVycyxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLlNFTEVDVEVEX0ZST01cbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gU291cmNlSW1hZ2VGb3JTZWdtZW50YXRpb247XG59KEltYWdlQ29udGVudEl0ZW0pO1xuXG52YXIgU291cmNlU2VyaWVzRm9yU2VnbWVudGF0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVUlEUmVmQ29udGVudEl0ZW0pIHtcbiAgX2luaGVyaXRzKFNvdXJjZVNlcmllc0ZvclNlZ21lbnRhdGlvbiwgX1VJRFJlZkNvbnRlbnRJdGVtKTtcblxuICBmdW5jdGlvbiBTb3VyY2VTZXJpZXNGb3JTZWdtZW50YXRpb24ob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb3VyY2VTZXJpZXNGb3JTZWdtZW50YXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTb3VyY2VTZXJpZXNGb3JTZWdtZW50YXRpb24pLmNhbGwodGhpcywge1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTIzMlwiLFxuICAgICAgICBtZWFuaW5nOiBcIlNvdXJjZSBTZXJpZXMgZm9yIFNlZ21lbnRhdGlvblwiLFxuICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICB9KSxcbiAgICAgIHZhbHVlOiBvcHRpb25zLnJlZmVyZW5jZWRTZXJpZXNJbnN0YW5jZVVJRCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkNPTlRBSU5TXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFNvdXJjZVNlcmllc0ZvclNlZ21lbnRhdGlvbjtcbn0oVUlEUmVmQ29udGVudEl0ZW0pO1xuXG52YXIgSW1hZ2VSZWdpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TY29vcmRDb250ZW50SXRlbSkge1xuICBfaW5oZXJpdHMoSW1hZ2VSZWdpb24sIF9TY29vcmRDb250ZW50SXRlbSk7XG5cbiAgZnVuY3Rpb24gSW1hZ2VSZWdpb24ob3B0aW9ucykge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2VSZWdpb24pO1xuXG4gICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEltYWdlUmVnaW9uKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMTEwMzBcIixcbiAgICAgICAgbWVhbmluZzogXCJJbWFnZSBSZWdpb25cIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICBncmFwaGljVHlwZTogb3B0aW9ucy5ncmFwaGljVHlwZSxcbiAgICAgIGdyYXBoaWNEYXRhOiBvcHRpb25zLmdyYXBoaWNEYXRhLFxuICAgICAgcGl4ZWxPcmlnaW5JbnRlcnByZXRhdGlvbjogb3B0aW9ucy5waXhlbE9yaWdpbkludGVycHJldGF0aW9uLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuQ09OVEFJTlNcbiAgICB9KSk7XG5cbiAgICBpZiAob3B0aW9ucy5ncmFwaGljVHlwZSA9PT0gR3JhcGhpY1R5cGVzLk1VTFRJUE9JTlQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdyYXBoaWMgdHlwZSAnTVVMVElQT0lOVCcgaXMgbm90IHZhbGlkIGZvciByZWdpb24uXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvdXJjZUltYWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IEVycm9yKFwiT3B0aW9uICdzb3VyY2VJbWFnZScgaXMgcmVxdWlyZWQgZm9yIEltYWdlUmVnaW9uLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIShvcHRpb25zLnNvdXJjZUltYWdlIHx8IG9wdGlvbnMuc291cmNlSW1hZ2UuY29uc3RydWN0b3IgPT09IFNvdXJjZUltYWdlRm9yUmVnaW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzb3VyY2VJbWFnZScgb2YgSW1hZ2VSZWdpb24gbXVzdCBoYXZlIHR5cGUgXCIgKyBcIlNvdXJjZUltYWdlRm9yUmVnaW9uLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczIuQ29udGVudFNlcXVlbmNlID0gbmV3IENvbnRlbnRTZXF1ZW5jZSQxKCk7XG5cbiAgICBfdGhpczIuQ29udGVudFNlcXVlbmNlLnB1c2gob3B0aW9ucy5zb3VyY2VJbWFnZSk7XG5cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgcmV0dXJuIEltYWdlUmVnaW9uO1xufShTY29vcmRDb250ZW50SXRlbSk7XG5cbnZhciBJbWFnZVJlZ2lvbjNEID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU2Nvb3JkM0RDb250ZW50SXRlbSkge1xuICBfaW5oZXJpdHMoSW1hZ2VSZWdpb24zRCwgX1Njb29yZDNEQ29udGVudEl0ZW0pO1xuXG4gIGZ1bmN0aW9uIEltYWdlUmVnaW9uM0Qob3B0aW9ucykge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2VSZWdpb24zRCk7XG5cbiAgICBfdGhpczMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSW1hZ2VSZWdpb24zRCkuY2FsbCh0aGlzLCB7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTExMDMwXCIsXG4gICAgICAgIG1lYW5pbmc6IFwiSW1hZ2UgUmVnaW9uXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgZ3JhcGhpY1R5cGU6IG9wdGlvbnMuZ3JhcGhpY1R5cGUsXG4gICAgICBncmFwaGljRGF0YTogb3B0aW9ucy5ncmFwaGljRGF0YSxcbiAgICAgIGZyYW1lT2ZSZWZlcmVuY2VVSUQ6IG9wdGlvbnMuZnJhbWVPZlJlZmVyZW5jZVVJRCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkNPTlRBSU5TXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMuZ3JhcGhpY1R5cGUgPT09IEdyYXBoaWNUeXBlczNELk1VTFRJUE9JTlQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdyYXBoaWMgdHlwZSAnTVVMVElQT0lOVCcgaXMgbm90IHZhbGlkIGZvciByZWdpb24uXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdyYXBoaWNUeXBlID09PSBHcmFwaGljVHlwZXMzRC5FTExJUFNPSUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdyYXBoaWMgdHlwZSAnRUxMSVBTT0lEJyBpcyBub3QgdmFsaWQgZm9yIHJlZ2lvbi5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHJldHVybiBJbWFnZVJlZ2lvbjNEO1xufShTY29vcmQzRENvbnRlbnRJdGVtKTtcblxudmFyIFZvbHVtZVN1cmZhY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TY29vcmQzRENvbnRlbnRJdGVtMikge1xuICBfaW5oZXJpdHMoVm9sdW1lU3VyZmFjZSwgX1Njb29yZDNEQ29udGVudEl0ZW0yKTtcblxuICBmdW5jdGlvbiBWb2x1bWVTdXJmYWNlKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZvbHVtZVN1cmZhY2UpO1xuXG4gICAgX3RoaXM0ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFZvbHVtZVN1cmZhY2UpLmNhbGwodGhpcywge1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTIzMVwiLFxuICAgICAgICBtZWFuaW5nOiBcIlZvbHVtZSBTdXJmYWNlXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgZ3JhcGhpY1R5cGU6IG9wdGlvbnMuZ3JhcGhpY1R5cGUsXG4gICAgICBncmFwaGljRGF0YTogb3B0aW9ucy5ncmFwaGljRGF0YSxcbiAgICAgIGZyYW1lT2ZGZWZlcmVuY2VVSUQ6IG9wdGlvbnMuZnJhbWVPZkZlZmVyZW5jZVVJRCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkNPTlRBSU5TXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMuZ3JhcGhpY1R5cGUgIT09IEdyYXBoaWNUeXBlczNELkVMTElQU09JRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR3JhcGhpYyB0eXBlIGZvciB2b2x1bWUgc3VyZmFjZSBtdXN0IGJlICdFTExJUFNPSUQnLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczQuQ29udGVudFNlcXVlbmNlID0gbmV3IENvbnRlbnRTZXF1ZW5jZSQxKCk7XG5cbiAgICBpZiAob3B0aW9ucy5zb3VyY2VJbWFnZXMpIHtcbiAgICAgIG9wdGlvbnMuc291cmNlSW1hZ2VzLmZvckVhY2goZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIGlmICghKGltYWdlIHx8IGltYWdlLmNvbnN0cnVjdG9yID09PSBTb3VyY2VJbWFnZUZvclJlZ2lvbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ3NvdXJjZUltYWdlcycgb2YgVm9sdW1lU3VyZmFjZSBcIiArIFwibXVzdCBoYXZlIHR5cGUgU291cmNlSW1hZ2VGb3JSZWdpb24uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0LkNvbnRlbnRTZXF1ZW5jZS5wdXNoKGltYWdlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zb3VyY2VTZXJpZXMpIHtcbiAgICAgIGlmICghKG9wdGlvbnMuc291cmNlU2VyaWVzIHx8IG9wdGlvbnMuc291cmNlU2VyaWVzLmNvbnN0cnVjdG9yID09PSBTb3VyY2VTZXJpZXNGb3JSZWdpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc291cmNlU2VyaWVzJyBvZiBWb2x1bWVTdXJmYWNlIFwiICsgXCJtdXN0IGhhdmUgdHlwZSBTb3VyY2VTZXJpZXNGb3JSZWdpb24uXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczQuQ29udGVudFNlcXVlbmNlLnB1c2gob3B0aW9ucy5zb3VyY2VTZXJpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gb3B0aW9ucyBtdXN0IGJlIHByb3ZpZGVkOiBcIiArIFwiJ3NvdXJjZUltYWdlJyBvciAnc291cmNlU2VyaWVzJy5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzNDtcbiAgfVxuXG4gIHJldHVybiBWb2x1bWVTdXJmYWNlO1xufShTY29vcmQzRENvbnRlbnRJdGVtKTtcblxudmFyIFJlZmVyZW5jZWRSZWFsV29ybGRWYWx1ZU1hcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvc2l0ZUNvbnRlbnRJdGVtKSB7XG4gIF9pbmhlcml0cyhSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAsIF9Db21wb3NpdGVDb250ZW50SXRlbSk7XG5cbiAgZnVuY3Rpb24gUmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMjYxMDBcIixcbiAgICAgICAgbWVhbmluZzogXCJSZWFsIFdvcmxkIFZhbHVlIE1hcCB1c2VkIGZvciBtZWFzdXJlbWVudFwiLFxuICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICB9KSxcbiAgICAgIHJlZmVyZW5jZWRTT1BDbGFzc1VJRDogb3B0aW9uLnJlZmVyZW5jZWRTT1BDbGFzc1VJRCxcbiAgICAgIHJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRDogb3B0aW9ucy5yZWZlcmVuY2VkU09QSW5zdGFuY2VVSUQsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5DT05UQUlOU1xuICAgIH0pKTtcbiAgfVxuXG4gIHJldHVybiBSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXA7XG59KENvbXBvc2l0ZUNvbnRlbnRJdGVtKTtcblxudmFyIEZpbmRpbmdTaXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29kZUNvbnRlbnRJdGVtKSB7XG4gIF9pbmhlcml0cyhGaW5kaW5nU2l0ZSwgX0NvZGVDb250ZW50SXRlbSk7XG5cbiAgZnVuY3Rpb24gRmluZGluZ1NpdGUob3B0aW9ucykge1xuICAgIHZhciBfdGhpczU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmluZGluZ1NpdGUpO1xuXG4gICAgX3RoaXM1ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEZpbmRpbmdTaXRlKS5jYWxsKHRoaXMsIHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIzNjM2OTgwMDdcIixcbiAgICAgICAgbWVhbmluZzogXCJGaW5kaW5nIFNpdGVcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJTQ1RcIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5hbmF0b21pY0xvY2F0aW9uLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX0NPTkNFUFRfTU9EXG4gICAgfSkpO1xuICAgIF90aGlzNS5Db250ZW50U2VxdWVuY2UgPSBuZXcgQ29udGVudFNlcXVlbmNlJDEoKTtcblxuICAgIGlmIChvcHRpb25zLmxhdGVyYWxpdHkpIHtcbiAgICAgIHZhciBpdGVtID0gbmV3IENvZGVDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjI3Mjc0MTAwM1wiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiU0NUXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmxhdGVyYWxpdHksXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19DT05DRVBUX01PRFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzNS5Db250ZW50U2VxdWVuY2UucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50b3BvZ3JhcGhpY2FsTW9kaWZpZXIpIHtcbiAgICAgIHZhciBfaXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMDYyMzMwMDZcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlRvcG9ncmFwaGljYWwgTW9kaWZpZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIlNDVFwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy50b3BvZ3JhcGhpY2FsTW9kaWZpZXIsXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19DT05DRVBUX01PRFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzNS5Db250ZW50U2VxdWVuY2UucHVzaChfaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzNTtcbiAgfVxuXG4gIHJldHVybiBGaW5kaW5nU2l0ZTtcbn0oQ29kZUNvbnRlbnRJdGVtKTtcblxudmFyIFJlZmVyZW5jZWRTZWdtZW50YXRpb25GcmFtZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRTZXF1ZW5jZSkge1xuICBfaW5oZXJpdHMoUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lLCBfQ29udGVudFNlcXVlbmNlKTtcblxuICBmdW5jdGlvbiBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUob3B0aW9ucykge1xuICAgIHZhciBfdGhpczY7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lKTtcblxuICAgIGlmIChvcHRpb25zLnNvcENsYXNzVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc29wQ2xhc3NVSUQnIGlzIHJlcXVpcmVkIGZvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcEluc3RhbmNlVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc29wSW5zdGFuY2VVSUQnIGlzIHJlcXVpcmVkIGZvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZyYW1lTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnZnJhbWVOdW1iZXInIGlzIHJlcXVpcmVkIGZvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNlZ21lbnROdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzZWdtZW50TnVtYmVyJyBpcyByZXF1aXJlZCBmb3IgUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lLlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zb3VyY2VJbWFnZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3NvdXJjZUltYWdlJyBpcyByZXF1aXJlZCBmb3IgUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczYgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lKS5jYWxsKHRoaXMpKTtcbiAgICB2YXIgc2VnbWVudGF0aW9uSXRlbSA9IEltYWdlQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTIxNFwiLFxuICAgICAgICBtZWFuaW5nOiBcIlJlZmVyZW5jZWQgU2VnbWVudGF0aW9uIEZyYW1lXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgcmVmZXJlbmNlZFNPUENsYXNzVWlkOiBvcHRpb25zLnNvcENsYXNzVWlkLFxuICAgICAgcmVmZXJlbmNlZFNPUEluc3RhbmNlVWlkOiBvcHRpb25zLnNvcEluc3RhbmNlVWlkLFxuICAgICAgcmVmZXJlbmNlZEZyYW1lTnVtYmVyOiBvcHRpb25zLmZyYW1lTnVtYmVyLFxuICAgICAgcmVmZXJlbmNlZFNlZ21lbnROdW1iZXI6IG9wdGlvbnMuc2VnbWVudE51bWJlclxuICAgIH0pO1xuXG4gICAgX3RoaXM2LnB1c2goc2VnbWVudGF0aW9uSXRlbSk7XG5cbiAgICBpZiAob3B0aW9ucy5zb3VyY2VJbWFnZS5jb25zdHJ1Y3RvciAhPT0gU291cmNlSW1hZ2VGb3JTZWdtZW50YXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc291cmNlSW1hZ2UnIG11c3QgaGF2ZSB0eXBlIFNvdXJjZUltYWdlRm9yU2VnbWVudGF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICBfdGhpczYucHVzaChzb3VyY2VJbWFnZSk7XG5cbiAgICByZXR1cm4gX3RoaXM2O1xuICB9XG5cbiAgcmV0dXJuIFJlZmVyZW5jZWRTZWdtZW50YXRpb25GcmFtZTtcbn0oQ29udGVudFNlcXVlbmNlJDEpO1xuXG52YXIgUmVmZXJlbmNlZFNlZ21lbnRhdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbnRlbnRTZXF1ZW5jZTIpIHtcbiAgX2luaGVyaXRzKFJlZmVyZW5jZWRTZWdtZW50YXRpb24sIF9Db250ZW50U2VxdWVuY2UyKTtcblxuICBmdW5jdGlvbiBSZWZlcmVuY2VkU2VnbWVudGF0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM3O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZmVyZW5jZWRTZWdtZW50YXRpb24pO1xuXG4gICAgaWYgKG9wdGlvbnMuc29wQ2xhc3NVSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzb3BDbGFzc1VJRCcgaXMgcmVxdWlyZWQgZm9yIFJlZmVyZW5jZWRTZWdtZW50YXRpb24uXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcEluc3RhbmNlVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc29wSW5zdGFuY2VVSUQnIGlzIHJlcXVpcmVkIGZvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5mcmFtZU51bWJlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdmcmFtZU51bWJlcnMnIGlzIHJlcXVpcmVkIGZvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWdtZW50TnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc2VnbWVudE51bWJlcicgaXMgcmVxdWlyZWQgZm9yIFJlZmVyZW5jZWRTZWdtZW50YXRpb24uXCIpO1xuICAgIH1cblxuICAgIF90aGlzNyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihSZWZlcmVuY2VkU2VnbWVudGF0aW9uKS5jYWxsKHRoaXMpKTtcbiAgICB2YXIgc2VnbWVudGF0aW9uSXRlbSA9IG5ldyBJbWFnZUNvbnRlbnRJdGVtKHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMjExOTFcIixcbiAgICAgICAgbWVhbmluZzogXCJSZWZlcmVuY2VkIFNlZ21lbnRcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICByZWZlcmVuY2VkU09QQ2xhc3NVaWQ6IG9wdGlvbnMuc29wQ2xhc3NVaWQsXG4gICAgICByZWZlcmVuY2VkU09QSW5zdGFuY2VVaWQ6IG9wdGlvbnMuc29wSW5zdGFuY2VVaWQsXG4gICAgICByZWZlcmVuY2VkRnJhbWVOdW1iZXI6IG9wdGlvbnMuZnJhbWVOdW1iZXJzLFxuICAgICAgcmVmZXJlbmNlZFNlZ21lbnROdW1iZXI6IG9wdGlvbnMuc2VnbWVudE51bWJlclxuICAgIH0pO1xuXG4gICAgX3RoaXM3LnB1c2goc2VnbWVudGF0aW9uSXRlbSk7XG5cbiAgICBpZiAob3B0aW9ucy5zb3VyY2VJbWFnZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy5zb3VyY2VJbWFnZXMuZm9yRWFjaChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgaWYgKCFpbWFnZSB8fCBpbWFnZS5jb25zdHJ1Y3RvciAhPT0gU291cmNlSW1hZ2VGb3JTZWdtZW50YXRpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ3NvdXJjZUltYWdlcycgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIlNvdXJjZUltYWdlRm9yU2VnbWVudGF0aW9uLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNy5wdXNoKGltYWdlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zb3VyY2VTZXJpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbnMuc291cmNlU2VyaWVzLmNvbnN0cnVjdG9yICE9PSBTb3VyY2VTZXJpZXNGb3JTZWdtZW50YXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzb3VyY2VTZXJpZXMnIG11c3QgaGF2ZSB0eXBlIFNvdXJjZVNlcmllc0ZvclNlZ21lbnRhdGlvbi5cIik7XG4gICAgICB9XG5cbiAgICAgIF90aGlzNy5wdXNoKHNvdXJjZVNlcmllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byBvcHRpb25zIG11c3QgYmUgcHJvdmlkZWQ6IFwiICsgXCInc291cmNlSW1hZ2VzJyBvciAnc291cmNlU2VyaWVzJy5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzNztcbiAgfVxuXG4gIHJldHVybiBSZWZlcmVuY2VkU2VnbWVudGF0aW9uO1xufShDb250ZW50U2VxdWVuY2UkMSk7XG5cbnZhciBjb250ZW50SXRlbXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdEZpbmRpbmdTaXRlOiBGaW5kaW5nU2l0ZSxcblx0TG9uZ2l0dWRpbmFsVGVtcG9yYWxPZmZzZXRGcm9tRXZlbnQ6IExvbmdpdHVkaW5hbFRlbXBvcmFsT2Zmc2V0RnJvbUV2ZW50LFxuXHRSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXA6IFJlZmVyZW5jZWRSZWFsV29ybGRWYWx1ZU1hcCxcblx0SW1hZ2VSZWdpb246IEltYWdlUmVnaW9uLFxuXHRJbWFnZVJlZ2lvbjNEOiBJbWFnZVJlZ2lvbjNELFxuXHRSZWZlcmVuY2VkU2VnbWVudGF0aW9uOiBSZWZlcmVuY2VkU2VnbWVudGF0aW9uLFxuXHRSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWU6IFJlZmVyZW5jZWRTZWdtZW50YXRpb25GcmFtZSxcblx0Vm9sdW1lU3VyZmFjZTogVm9sdW1lU3VyZmFjZSxcblx0U291cmNlSW1hZ2VGb3JSZWdpb246IFNvdXJjZUltYWdlRm9yUmVnaW9uLFxuXHRTb3VyY2VJbWFnZUZvclNlZ21lbnRhdGlvbjogU291cmNlSW1hZ2VGb3JTZWdtZW50YXRpb24sXG5cdFNvdXJjZVNlcmllc0ZvclNlZ21lbnRhdGlvbjogU291cmNlU2VyaWVzRm9yU2VnbWVudGF0aW9uXG59KTtcblxudmFyIFRlbXBsYXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGVudFNlcXVlbmNlKSB7XG4gIF9pbmhlcml0cyhUZW1wbGF0ZSwgX0NvbnRlbnRTZXF1ZW5jZSk7XG5cbiAgZnVuY3Rpb24gVGVtcGxhdGUoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGVtcGxhdGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUZW1wbGF0ZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICB9XG5cbiAgcmV0dXJuIFRlbXBsYXRlO1xufShDb250ZW50U2VxdWVuY2UkMSk7XG5cbnZhciBNZWFzdXJlbWVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlKSB7XG4gIF9pbmhlcml0cyhNZWFzdXJlbWVudCwgX1RlbXBsYXRlKTtcblxuICBmdW5jdGlvbiBNZWFzdXJlbWVudChvcHRpb25zKSB7XG4gICAgdmFyIF92YWx1ZUl0ZW0kQ29udGVudFNlcTtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWFzdXJlbWVudCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNZWFzdXJlbWVudCkuY2FsbCh0aGlzKSk7XG4gICAgdmFyIHZhbHVlSXRlbSA9IG5ldyBOdW1Db250ZW50SXRlbSh7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICB2YWx1ZTogb3B0aW9ucy52YWx1ZSxcbiAgICAgIHVuaXQ6IG9wdGlvbnMudW5pdCxcbiAgICAgIHF1YWxpZmllcjogb3B0aW9ucy5xdWFsaWZpZXIsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5DT05UQUlOU1xuICAgIH0pO1xuICAgIHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UgPSBuZXcgQ29udGVudFNlcXVlbmNlJDEoKTtcblxuICAgIGlmIChvcHRpb25zLnRyYWNraW5nSWRlbnRpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RyYWNraW5nSWRlbnRpZmllcicgaXMgcmVxdWlyZWQgZm9yIE1lYXN1cmVtZW50LlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50cmFja2luZ0lkZW50aWZpZXIuY29uc3RydWN0b3IgPT09IFRyYWNraW5nSWRlbnRpZmllcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd0cmFja2luZ0lkZW50aWZpZXInIG11c3QgaGF2ZSB0eXBlIFRyYWNraW5nSWRlbnRpZmllci5cIik7XG4gICAgfVxuXG4gICAgKF92YWx1ZUl0ZW0kQ29udGVudFNlcSA9IHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX3ZhbHVlSXRlbSRDb250ZW50U2VxLCBfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucy50cmFja2luZ0lkZW50aWZpZXIpKTtcblxuICAgIGlmIChvcHRpb25zLm1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbWV0aG9kSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIzNzAxMjkwMDVcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIk1lYXN1cmVtZW50IE1ldGhvZFwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiU0NUXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX0NPTkNFUFRfTU9EXG4gICAgICB9KTtcbiAgICAgIHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChtZXRob2RJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kZXJpdmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBkZXJpdmF0aW9uSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjE0MDFcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRlcml2YXRpb25cIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5kZXJpdmF0aW9uLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfQ09OQ0VQVF9NT0RcbiAgICAgIH0pO1xuICAgICAgdmFsdWVJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKGRlcml2YXRpb25JdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5maW5kaW5nU2l0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLmZpbmRpbmdTaXRlcykgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5maW5kaW5nU2l0ZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdmaW5kaW5nU2l0ZXMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5maW5kaW5nU2l0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l0ZSkge1xuICAgICAgICBpZiAoIXNpdGUgfHwgc2l0ZS5jb25zdHJ1Y3RvciAhPT0gRmluZGluZ1NpdGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ2ZpbmRpbmdTaXRlcycgbXVzdCBoYXZlIHR5cGUgRmluZGluZ1NpdGUuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKHNpdGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX3ZhbHVlSXRlbSRDb250ZW50U2VxMjtcblxuICAgICAgaWYgKG9wdGlvbnMucHJvcGVydGllcy5jb25zdHJ1Y3RvciAhPT0gTWVhc3VyZW1lbnRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncHJvcGVydGllcycgbXVzdCBoYXZlIHR5cGUgTWVhc3VyZW1lbnRQcm9wZXJ0aWVzLlwiKTtcbiAgICAgIH1cblxuICAgICAgKF92YWx1ZUl0ZW0kQ29udGVudFNlcTIgPSB2YWx1ZUl0ZW0uQ29udGVudFNlcXVlbmNlKS5wdXNoLmFwcGx5KF92YWx1ZUl0ZW0kQ29udGVudFNlcTIsIF90b0NvbnN1bWFibGVBcnJheShvcHRpb25zLnByb3BlcnRpZXMpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkUmVnaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkUmVnaW9ucycgbXVzdCBoYXZlIHR5cGUgQXJyYXkuXCIpO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLnJlZmVyZW5jZWRSZWdpb25zLmZvckVhY2goZnVuY3Rpb24gKHJlZ2lvbikge1xuICAgICAgICBpZiAoIXJlZ2lvbiB8fCByZWdpb24uY29uc3RydWN0b3IgIT09IEltYWdlUmVnaW9uICYmIHJlZ2lvbi5jb25zdHJ1Y3RvciAhPT0gSW1hZ2VSZWdpb24zRCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW1zIG9mIG9wdGlvbiAncmVmZXJlbmNlZFJlZ2lvbicgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIkltYWdlUmVnaW9uIG9yIEltYWdlUmVnaW9uM0QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKHJlZ2lvbik7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFZvbHVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkVm9sdW1lLmNvbnN0cnVjdG9yICE9PSBWb2x1bWVTdXJmYWNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFZvbHVtZScgbXVzdCBoYXZlIHR5cGUgVm9sdW1lU3VyZmFjZS5cIik7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChvcHRpb25zLnJlZmVyZW5jZWRWb2x1bWUpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChvcHRpb25zLnJlZmVyZW5jZWRTZWdtZW50YXRpb24uY29uc3RydWN0b3IgIT09IFJlZmVyZW5jZWRTZWdtZW50YXRpb24gJiYgb3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudGF0aW9uLmNvbnN0cnVjdG9yICE9PSBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkU2VnbWVudGF0aW9uJyBtdXN0IGhhdmUgdHlwZSBcIiArIFwiUmVmZXJlbmNlZFNlZ21lbnRhdGlvbiBvciBSZWZlcmVuY2VkU2VnbWVudGF0aW9uRnJhbWUuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZUl0ZW0uQ29udGVudFNlcXVlbmNlLnB1c2gob3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudGF0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwLmNvbnN0cnVjdG9yICE9PSBSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZUl0ZW0uQ29udGVudFNlcXVlbmNlLnB1c2gob3B0aW9ucy5yZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsZ29yaXRobUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfdmFsdWVJdGVtJENvbnRlbnRTZXEzO1xuXG4gICAgICBpZiAob3B0aW9ucy5hbGdvcml0aG1JZC5jb25zdHJ1Y3RvciAhPT0gQWxnb3JpdGhtSWRlbnRpZmljYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdhbGdvcml0aG1JZCcgbXVzdCBoYXZlIHR5cGUgQWxnb3JpdGhtSWRlbnRpZmljYXRpb24uXCIpO1xuICAgICAgfVxuXG4gICAgICAoX3ZhbHVlSXRlbSRDb250ZW50U2VxMyA9IHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX3ZhbHVlSXRlbSRDb250ZW50U2VxMywgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMuYWxnb3JpdGhtSWQpKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKHZhbHVlSXRlbSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gTWVhc3VyZW1lbnQ7XG59KFRlbXBsYXRlKTtcblxudmFyIE1lYXN1cmVtZW50UHJvcGVydGllcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMikge1xuICBfaW5oZXJpdHMoTWVhc3VyZW1lbnRQcm9wZXJ0aWVzLCBfVGVtcGxhdGUyKTtcblxuICBmdW5jdGlvbiBNZWFzdXJlbWVudFByb3BlcnRpZXMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVhc3VyZW1lbnRQcm9wZXJ0aWVzKTtcblxuICAgIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNZWFzdXJlbWVudFByb3BlcnRpZXMpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMubm9ybWFsaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBub3JtYWxpdHlJdGVtID0gbmV3IENvZGVDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTQwMlwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJOb3JtYWxpdHlcIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMubm9ybWFsaXR5LFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfUFJPUEVSVElFU1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMi5wdXNoKG5vcm1hbGl0eUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50U3RhdGlzdGljYWxQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfdGhpczM7XG5cbiAgICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50U3RhdGlzdGljYWxQcm9wZXJ0aWVzLmNvbnN0cnVjdG9yICE9PSBNZWFzdXJlbWVudFN0YXRpc3RpY2FsUHJvcGVydGllcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ21lYXN1cm1lbnRTdGF0aXN0aWNhbFByb3BlcnRpZXMnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJNZWFzdXJlbWVudFN0YXRpc3RpY2FsUHJvcGVydGllcy5cIik7XG4gICAgICB9XG5cbiAgICAgIChfdGhpczMgPSBfdGhpczIpLnB1c2guYXBwbHkoX3RoaXMzLCBfdG9Db25zdW1hYmxlQXJyYXkobWVhc3VyZW1lbnRTdGF0aXN0aWNhbFByb3BlcnRpZXMpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ub3JtYWxSYW5nZVByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF90aGlzNDtcblxuICAgICAgaWYgKG9wdGlvbnMubm9ybWFsUmFuZ2VQcm9wZXJ0aWVzLmNvbnN0cnVjdG9yICE9PSBOb3JtYWxSYW5nZVByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdub3JtYWxSYW5nZVByb3BlcnRpZXMnIG11c3QgaGF2ZSB0eXBlIE5vcm1hbFJhbmdlUHJvcGVydGllcy5cIik7XG4gICAgICB9XG5cbiAgICAgIChfdGhpczQgPSBfdGhpczIpLnB1c2guYXBwbHkoX3RoaXM0LCBfdG9Db25zdW1hYmxlQXJyYXkobm9ybWFsUmFuZ2VQcm9wZXJ0aWVzKSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubGV2ZWxPZlNpZ25pZmljYW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbGV2ZWxPZlNpZ25pZmljYW5jZUl0ZW0gPSBuZXcgQ29kZUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxNDAzXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkxldmVsIG9mIFNpZ25pZmljYW5jZVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5sZXZlbE9mU2lnbmlmaWNhbmNlLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfUFJPUEVSVElFU1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMi5wdXNoKGxldmVsT2ZTaWduaWZpY2FuY2VJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWxlY3Rpb25TdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHNlbGVjdGlvblN0YXR1c0l0ZW0gPSBuZXcgQ29kZUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxNDA0XCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlNlbGVjdGlvbiBTdGF0dXNcIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuc2VsZWN0aW9uU3RhdHVzLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfUFJPUEVSVElFU1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMi5wdXNoKHNlbGVjdGlvblN0YXR1c0l0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVwcGVyTWVhc3VyZW1lbnRVbmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdXBwZXJNZWFzdXJlbWVudFVuY2VydGFpbnR5SXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCJSLTAwMzY0XCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJTUlRcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlJhbmdlIG9mIFVwcGVyIE1lYXN1cmVtZW50IFVuY2VydGFpbnR5XCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnVwcGVyTWVhc3VyZW1lbnRVbmNlcnRhaW50eSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX1BST1BFUlRJRVNcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczIucHVzaCh1cHBlck1lYXN1cmVtZW50VW5jZXJ0YWludHlJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sb3dlck1lYXN1cmVtZW50VW5jZXJ0YWludHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGxvd2VyTWVhc3VyZW1lbnRVbmNlcnRhaW50eUl0ZW0gPSBuZXcgQ29kZUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiUi0wMDM2MlwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiU1JUXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJSYW5nZSBvZiBMb3dlciBNZWFzdXJlbWVudCBVbmNlcnRhaW50eVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5sb3dlck1lYXN1cmVtZW50VW5jZXJ0YWludHksXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19QUk9QRVJUSUVTXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyLnB1c2gobG93ZXJNZWFzdXJlbWVudFVuY2VydGFpbnR5SXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIHJldHVybiBNZWFzdXJlbWVudFByb3BlcnRpZXM7XG59KFRlbXBsYXRlKTtcblxudmFyIE1lYXN1cmVtZW50U3RhdGlzdGljYWxQcm9wZXJ0aWVzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGVtcGxhdGUzKSB7XG4gIF9pbmhlcml0cyhNZWFzdXJlbWVudFN0YXRpc3RpY2FsUHJvcGVydGllcywgX1RlbXBsYXRlMyk7XG5cbiAgZnVuY3Rpb24gTWVhc3VyZW1lbnRTdGF0aXN0aWNhbFByb3BlcnRpZXMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVhc3VyZW1lbnRTdGF0aXN0aWNhbFByb3BlcnRpZXMpO1xuXG4gICAgX3RoaXM1ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1lYXN1cmVtZW50U3RhdGlzdGljYWxQcm9wZXJ0aWVzKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmIChvcHRpb25zLnZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3ZhbHVlcycgaXMgcmVxdWlyZWQgZm9yIE1lYXN1cmVtZW50U3RhdGlzdGljYWxQcm9wZXJ0aWVzLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMudmFsdWVzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZXMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFvcHRpb25zLmNvbmNlcHQgfHwgb3B0aW9ucy5jb25jZXB0LmNvbnN0cnVjdG9yICE9PSBOdW1Db250ZW50SXRlbSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ3ZhbHVlcycgbXVzdCBoYXZlIHR5cGUgTnVtQ29udGVudEl0ZW0uXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczUucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZGVzY3JpcHRpb25JdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTQwNVwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJQb3B1bGF0aW9uIERlc2NyaXB0aW9uXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmF1dGhvcml0eSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX1BST1BFUlRJRVNcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczUucHVzaChhdXRob3JpdHlJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hdXRob3JpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF9hdXRob3JpdHlJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTQwNlwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJQb3B1bGF0aW9uIEF1dGhvcml0eVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5hdXRob3JpdHksXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19QUk9QRVJUSUVTXG4gICAgICB9KTtcblxuICAgICAgX3RoaXM1LnB1c2goX2F1dGhvcml0eUl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczU7XG4gIH1cblxuICByZXR1cm4gTWVhc3VyZW1lbnRTdGF0aXN0aWNhbFByb3BlcnRpZXM7XG59KFRlbXBsYXRlKTtcblxudmFyIE5vcm1hbFJhbmdlUHJvcGVydGllcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlNCkge1xuICBfaW5oZXJpdHMoTm9ybWFsUmFuZ2VQcm9wZXJ0aWVzLCBfVGVtcGxhdGU0KTtcblxuICBmdW5jdGlvbiBOb3JtYWxSYW5nZVByb3BlcnRpZXMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczY7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9ybWFsUmFuZ2VQcm9wZXJ0aWVzKTtcblxuICAgIF90aGlzNiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihOb3JtYWxSYW5nZVByb3BlcnRpZXMpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMudmFsdWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndmFsdWVzJyBpcyByZXF1aXJlZCBmb3IgTm9ybWFsUmFuZ2VQcm9wZXJ0aWVzLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMudmFsdWVzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2YWx1ZXMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFvcHRpb25zLmNvbmNlcHQgfHwgb3B0aW9ucy5jb25jZXB0LmNvbnN0cnVjdG9yICE9PSBOdW1Db250ZW50SXRlbSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ3ZhbHVlcycgbXVzdCBoYXZlIHR5cGUgTnVtQ29udGVudEl0ZW0uXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczYucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZGVzY3JpcHRpb25JdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTQwN1wiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJOb3JtYWwgUmFuZ2UgRGVzY3JpcHRpb25cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuYXV0aG9yaXR5LFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfUFJPUEVSVElFU1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzNi5wdXNoKGF1dGhvcml0eUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmF1dGhvcml0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2F1dGhvcml0eUl0ZW0yID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTQwOFwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJOb3JtYWwgUmFuZ2UgQXV0aG9yaXR5XCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmF1dGhvcml0eSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX1BST1BFUlRJRVNcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczYucHVzaChfYXV0aG9yaXR5SXRlbTIpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczY7XG4gIH1cblxuICByZXR1cm4gTm9ybWFsUmFuZ2VQcm9wZXJ0aWVzO1xufShUZW1wbGF0ZSk7XG5cbnZhciBPYnNlcnZhdGlvbkNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTUpIHtcbiAgX2luaGVyaXRzKE9ic2VydmF0aW9uQ29udGV4dCwgX1RlbXBsYXRlNSk7XG5cbiAgZnVuY3Rpb24gT2JzZXJ2YXRpb25Db250ZXh0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM4O1xuXG4gICAgdmFyIF90aGlzNztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPYnNlcnZhdGlvbkNvbnRleHQpO1xuXG4gICAgX3RoaXM3ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE9ic2VydmF0aW9uQ29udGV4dCkuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAob3B0aW9ucy5vYnNlcnZlclBlcnNvbkNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdvYnNlcnZlclBlcnNvbkNvbnRleHQnIGlzIHJlcXVpcmVkIGZvciBPYnNlcnZhdGlvbkNvbnRleHQuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm9ic2VydmVyUGVyc29uQ29udGV4dC5jb25zdHJ1Y3RvciAhPT0gT2JzZXJ2ZXJDb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ29ic2VydmVyUGVyc29uQ29udGV4dCcgbXVzdCBoYXZlIHR5cGUgT2JzZXJ2ZXJDb250ZXh0XCIpO1xuICAgIH1cblxuICAgIChfdGhpczggPSBfdGhpczcpLnB1c2guYXBwbHkoX3RoaXM4LCBfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucy5vYnNlcnZlclBlcnNvbkNvbnRleHQpKTtcblxuICAgIGlmIChvcHRpb25zLm9ic2VydmVyRGV2aWNlQ29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX3RoaXM5O1xuXG4gICAgICBpZiAob3B0aW9ucy5vYnNlcnZlckRldmljZUNvbnRleHQuY29uc3RydWN0b3IgIT09IE9ic2VydmVyQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ29ic2VydmVyRGV2aWNlQ29udGV4dCcgbXVzdCBoYXZlIHR5cGUgT2JzZXJ2ZXJDb250ZXh0XCIpO1xuICAgICAgfVxuXG4gICAgICAoX3RoaXM5ID0gX3RoaXM3KS5wdXNoLmFwcGx5KF90aGlzOSwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMub2JzZXJ2ZXJEZXZpY2VDb250ZXh0KSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3ViamVjdENvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF90aGlzMTA7XG5cbiAgICAgIGlmIChvcHRpb25zLnN1YmplY3RDb250ZXh0LmNvbnN0cnVjdG9yICE9PSBTdWJqZWN0Q29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3N1YmplY3RDb250ZXh0JyBtdXN0IGhhdmUgdHlwZSBTdWJqZWN0Q29udGV4dFwiKTtcbiAgICAgIH1cblxuICAgICAgKF90aGlzMTAgPSBfdGhpczcpLnB1c2guYXBwbHkoX3RoaXMxMCwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMuc3ViamVjdENvbnRleHQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM3O1xuICB9XG5cbiAgcmV0dXJuIE9ic2VydmF0aW9uQ29udGV4dDtcbn0oVGVtcGxhdGUpO1xuXG52YXIgT2JzZXJ2ZXJDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGVtcGxhdGU2KSB7XG4gIF9pbmhlcml0cyhPYnNlcnZlckNvbnRleHQsIF9UZW1wbGF0ZTYpO1xuXG4gIGZ1bmN0aW9uIE9ic2VydmVyQ29udGV4dChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTI7XG5cbiAgICB2YXIgX3RoaXMxMTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPYnNlcnZlckNvbnRleHQpO1xuXG4gICAgX3RoaXMxMSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihPYnNlcnZlckNvbnRleHQpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMub2JzZXJ2ZXJUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnb2JzZXJ2ZXJUeXBlJyBpcyByZXF1aXJlZCBmb3IgT2JzZXJ2ZXJDb250ZXh0LlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9wdGlvbnMub2JzZXJ2ZXJUeXBlLmNvbnN0cnVjdG9yICE9PSBDb2RlICYmIG9wdGlvbnMub2JzZXJ2ZXJUeXBlLmNvbnN0cnVjdG9yICE9PSBDb2RlZENvbmNlcHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdvYnNlcnZlclR5cGUnIG11c3QgaGF2ZSB0eXBlIENvZGUgb3IgQ29kZWRDb25jZXB0LlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2ZXJUeXBlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTAwNVwiLFxuICAgICAgICBtZWFuaW5nOiBcIk9ic2VydmVyIFR5cGVcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5vYnNlcnZlclR5cGUsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICB9KTtcblxuICAgIF90aGlzMTEucHVzaChvYnNlcnZlclR5cGVJdGVtKTtcblxuICAgIGlmIChvcHRpb25zLm9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnb2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMnIGlzIHJlcXVpcmVkIGZvciBPYnNlcnZlckNvbnRleHQuXCIpO1xuICAgIH0gLy8gRklYTUVcblxuXG4gICAgdmFyIHBlcnNvbiA9IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgdmFsdWU6IFwiMTIxMDA2XCIsXG4gICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgbWVhbmluZzogXCJQZXJzb25cIlxuICAgIH0pO1xuICAgIHZhciBkZXZpY2UgPSBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgIHZhbHVlOiBcIjEyMTAwN1wiLFxuICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgIG1lYW5pbmc6IFwiRGV2aWNlXCJcbiAgICB9KTtcblxuICAgIGlmIChwZXJzb24uZXF1YWxzKG9wdGlvbnMub2JzZXJ2ZXJUeXBlKSkge1xuICAgICAgaWYgKG9wdGlvbnMub2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMuY29uc3RydWN0b3IgIT09IFBlcnNvbk9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnb2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJQZXJzb25PYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcyBmb3IgJ1BlcnNvbicgb2JzZXJ2ZXIgdHlwZS5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkZXZpY2UuZXF1YWxzKG9wdGlvbnMub2JzZXJ2ZXJUeXBlKSkge1xuICAgICAgaWYgKG9wdGlvbnMub2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMuY29uc3RydWN0b3IgIT09IERldmljZU9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnb2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJEZXZpY2VPYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcyBmb3IgJ0RldmljZScgb2JzZXJ2ZXIgdHlwZS5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnb2JlcnZlclR5cGUnIG11c3QgYmUgZWl0aGVyICdQZXJzb24nIG9yICdEZXZpY2UnLlwiKTtcbiAgICB9XG5cbiAgICAoX3RoaXMxMiA9IF90aGlzMTEpLnB1c2guYXBwbHkoX3RoaXMxMiwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMub2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMpKTtcblxuICAgIHJldHVybiBfdGhpczExO1xuICB9XG5cbiAgcmV0dXJuIE9ic2VydmVyQ29udGV4dDtcbn0oVGVtcGxhdGUpO1xuXG52YXIgUGVyc29uT2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTcpIHtcbiAgX2luaGVyaXRzKFBlcnNvbk9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzLCBfVGVtcGxhdGU3KTtcblxuICBmdW5jdGlvbiBQZXJzb25PYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcyhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGVyc29uT2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMpO1xuXG4gICAgX3RoaXMxMyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQZXJzb25PYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcykuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbmFtZScgaXMgcmVxdWlyZWQgZm9yIFBlcnNvbk9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZUl0ZW0gPSBuZXcgUE5hbWVDb250ZW50SXRlbSh7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTIxMDA4XCIsXG4gICAgICAgIG1lYW5pbmc6IFwiUGVyc29uIE9ic2VydmVyIE5hbWVcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5uYW1lLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgfSk7XG5cbiAgICBfdGhpczEzLnB1c2gobmFtZUl0ZW0pO1xuXG4gICAgaWYgKG9wdGlvbnMubG9naW5OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBsb2dpbk5hbWVJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyODc3NFwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiUGVyc29uIE9ic2VydmVyJ3MgTG9naW4gTmFtZVwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmxvZ2luTmFtZSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMxMy5wdXNoKGxvZ2luTmFtZUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm9yZ2FuaXphdGlvbk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG9yZ2FuaXphdGlvbk5hbWVJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTAwOVwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiUGVyc29uIE9ic2VydmVyJ3MgT3JnYW5pemF0aW9uIE5hbWVcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5vcmdhbml6YXRpb25OYW1lLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczEzLnB1c2gob3JnYW5pemF0aW9uTmFtZUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJvbGVJbk9yZ2FuaXphdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcm9sZUluT3JnYW5pemF0aW9uSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwMTBcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlBlcnNvbiBPYnNlcnZlcidzIFJvbGUgaW4gdGhlIE9yZ2FuaXphdGlvblwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnJvbGVJbk9yZ2FuaXphdGlvbixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMxMy5wdXNoKHJvbGVJbk9yZ2FuaXphdGlvbkl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJvbGVJblByb2NlZHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcm9sZUluUHJvY2VkdXJlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwMTFcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlBlcnNvbiBPYnNlcnZlcidzIFJvbGUgaW4gdGhpcyBQcm9jZWR1cmVcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5yb2xlSW5Qcm9jZWR1cmUsXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMTMucHVzaChyb2xlSW5Qcm9jZWR1cmVJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMxMztcbiAgfVxuXG4gIHJldHVybiBQZXJzb25PYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcztcbn0oVGVtcGxhdGUpO1xuXG52YXIgRGV2aWNlT2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTgpIHtcbiAgX2luaGVyaXRzKERldmljZU9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzLCBfVGVtcGxhdGU4KTtcblxuICBmdW5jdGlvbiBEZXZpY2VPYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcyhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV2aWNlT2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMpO1xuXG4gICAgX3RoaXMxNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEZXZpY2VPYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcykuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAob3B0aW9ucy51aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd1aWQnIGlzIHJlcXVpcmVkIGZvciBEZXZpY2VPYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcy5cIik7XG4gICAgfVxuXG4gICAgdmFyIGRldmljZU9ic2VydmVySXRlbSA9IG5ldyBVSURSZWZDb250ZW50SXRlbSh7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTIxMDEyXCIsXG4gICAgICAgIG1lYW5pbmc6IFwiRGV2aWNlIE9ic2VydmVyIFVJRFwiLFxuICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICB9KSxcbiAgICAgIHZhbHVlOiBvcHRpb25zLnVpZCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgIH0pO1xuXG4gICAgX3RoaXMxNC5wdXNoKGRldmljZU9ic2VydmVySXRlbSk7XG5cbiAgICBpZiAob3B0aW9ucy5tYW51ZmFjdHVyZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBtYW51ZmFjdHVyZXJOYW1lSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwMTNcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRldmljZSBPYnNlcnZlciBNYW51ZmFjdHVyZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5tYW51ZmFjdHVyZXJOYW1lLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE0LnB1c2gobWFudWZhY3R1cmVyTmFtZUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1vZGVsTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbW9kZWxOYW1lSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwMTVcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRldmljZSBPYnNlcnZlciBNb2RlbCBOYW1lXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMubW9kZWxOYW1lLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE0LnB1c2gobW9kZWxOYW1lSXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2VyaWFsTnVtYmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBzZXJpYWxOdW1iZXJJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTAxNlwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiRGV2aWNlIE9ic2VydmVyIFNlcmlhbCBOdW1iZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5zZXJpYWxOdW1iZXIsXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMTQucHVzaChzZXJpYWxOdW1iZXJJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5waHlzaWNhbExvY2F0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwaHlzaWNhbExvY2F0aW9uSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwMTdcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRldmljZSBPYnNlcnZlciBQaHlzaWNhbCBMb2NhdGlvbiBEdXJpbmcgT2JzZXJ2YXRpb25cIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5waHlzaWNhbExvY2F0aW9uLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE0LnB1c2gocGh5c2ljYWxMb2NhdGlvbkl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJvbGVJblByb2NlZHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcm9sZUluUHJvY2VkdXJlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMTM4NzZcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRldmljZSBSb2xlIGluIFByb2NlZHVyZVwiLFxuICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnJvbGVJblByb2NlZHVyZSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMxNC5wdXNoKHJvbGVJblByb2NlZHVyZUl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczE0O1xuICB9XG5cbiAgcmV0dXJuIERldmljZU9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzO1xufShUZW1wbGF0ZSk7XG5cbnZhciBTdWJqZWN0Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlOSkge1xuICBfaW5oZXJpdHMoU3ViamVjdENvbnRleHQsIF9UZW1wbGF0ZTkpO1xuXG4gIGZ1bmN0aW9uIFN1YmplY3RDb250ZXh0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxNjtcblxuICAgIHZhciBfdGhpczE1O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YmplY3RDb250ZXh0KTtcblxuICAgIF90aGlzMTUgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU3ViamVjdENvbnRleHQpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMuc3ViamVjdENsYXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc3ViamVjdENsYXNzJyBpcyByZXF1aXJlZCBmb3IgU3ViamVjdENvbnRleHQuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN1YmplY3RDbGFzc1NwZWNpZmljQ29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3N1YmplY3RDbGFzc1NwZWNpZmljQ29udGV4dCcgaXMgcmVxdWlyZWQgZm9yIFN1YmplY3RDb250ZXh0LlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc3ViamVjdENsYXNzSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTAyNFwiLFxuICAgICAgICBtZWFuaW5nOiBcIlN1YmplY3QgQ2xhc3NcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5zdWJqZWN0Q2xhc3MsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICB9KTtcblxuICAgIF90aGlzMTUucHVzaChzdWJqZWN0Q2xhc3NJdGVtKTtcblxuICAgIHZhciBmZXR1cyA9IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgdmFsdWU6IFwiMTIxMDI2IFwiLFxuICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgIG1lYW5pbmc6IFwiRmV0dXNcIlxuICAgIH0pO1xuICAgIHZhciBzcGVjaW1lbiA9IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgdmFsdWU6IFwiMTIxMDI3XCIsXG4gICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgbWVhbmluZzogXCJTcGVjaW1lblwiXG4gICAgfSk7XG4gICAgdmFyIGRldmljZSA9IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgdmFsdWU6IFwiMTIxMTkyXCIsXG4gICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiLFxuICAgICAgbWVhbmluZzogXCJEZXZpY2UgU3ViamVjdFwiXG4gICAgfSk7XG5cbiAgICBpZiAoZmV0dXMuZXF1YWxzKG9wdGlvbnMuc3ViamVjdENsYXNzKSkge1xuICAgICAgaWYgKG9wdGlvbnMuc3ViamVjdENsYXNzU3BlY2lmaWNDb250ZXh0LmNvbnN0cnVjdG9yICE9PSBTdWJqZWN0Q29udGV4dEZldHVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnc3ViamVjdENsYXNzJyBtdXN0IGhhdmUgdHlwZSBcIiArIFwiU3ViamVjdENvbnRleHRGZXR1cyBmb3IgJ0ZldHVzJyBzdWJqZWN0IGNsYXNzLlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNwZWNpbWVuLmVxdWFscyhvcHRpb25zLnN1YmplY3RDbGFzcykpIHtcbiAgICAgIGlmIChvcHRpb25zLnN1YmplY3RDbGFzc1NwZWNpZmljQ29udGV4dC5jb25zdHJ1Y3RvciAhPT0gU3ViamVjdENvbnRleHRTcGVjaW1lbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3N1YmplY3RDbGFzcycgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIlN1YmplY3RDb250ZXh0U3BlY2ltZW4gZm9yICdTcGVjaW1lbicgc3ViamVjdCBjbGFzcy5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkZXZpY2UuZXF1YWxzKG9wdGlvbnMuc3ViamVjdENsYXNzKSkge1xuICAgICAgaWYgKG9wdGlvbnMuc3ViamVjdENsYXNzU3BlY2lmaWNDb250ZXh0LmNvbnN0cnVjdG9yICE9PSBTdWJqZWN0Q29udGV4dERldmljZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3N1YmplY3RDbGFzcycgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIlN1YmplY3RDb250ZXh0RGV2aWNlIGZvciAnRGV2aWNlJyBzdWJqZWN0IGNsYXNzLlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzdWJqZWN0Q2xhc3MnIG11c3QgYmUgZWl0aGVyICdGZXR1cycsICdTcGVjaW1lbicsIG9yICdEZXZpY2UnLlwiKTtcbiAgICB9XG5cbiAgICAoX3RoaXMxNiA9IF90aGlzMTUpLnB1c2guYXBwbHkoX3RoaXMxNiwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMuc3ViamVjdENsYXNzU3BlY2lmaWNDb250ZXh0KSk7XG5cbiAgICByZXR1cm4gX3RoaXMxNTtcbiAgfVxuXG4gIHJldHVybiBTdWJqZWN0Q29udGV4dDtcbn0oVGVtcGxhdGUpO1xuXG52YXIgU3ViamVjdENvbnRleHRGZXR1cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMTApIHtcbiAgX2luaGVyaXRzKFN1YmplY3RDb250ZXh0RmV0dXMsIF9UZW1wbGF0ZTEwKTtcblxuICBmdW5jdGlvbiBTdWJqZWN0Q29udGV4dEZldHVzKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxNztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJqZWN0Q29udGV4dEZldHVzKTtcblxuICAgIF90aGlzMTcgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU3ViamVjdENvbnRleHRGZXR1cykuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAob3B0aW9ucy5zdWJqZWN0SUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzdWJqZWN0SUQnIGlzIHJlcXVpcmVkIGZvciBTdWJqZWN0Q29udGV4dEZldHVzLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc3ViamVjdElkSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTAzMFwiLFxuICAgICAgICBtZWFuaW5nOiBcIlN1YmplY3QgSURcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5zdWJqZWN0SUQsXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICB9KTtcblxuICAgIF90aGlzMTcucHVzaChzdWJqZWN0SWRJdGVtKTtcblxuICAgIHJldHVybiBfdGhpczE3O1xuICB9XG5cbiAgcmV0dXJuIFN1YmplY3RDb250ZXh0RmV0dXM7XG59KFRlbXBsYXRlKTtcblxudmFyIFN1YmplY3RDb250ZXh0U3BlY2ltZW4gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTExKSB7XG4gIF9pbmhlcml0cyhTdWJqZWN0Q29udGV4dFNwZWNpbWVuLCBfVGVtcGxhdGUxMSk7XG5cbiAgZnVuY3Rpb24gU3ViamVjdENvbnRleHRTcGVjaW1lbihvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMTg7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3ViamVjdENvbnRleHRTcGVjaW1lbik7XG5cbiAgICBfdGhpczE4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFN1YmplY3RDb250ZXh0U3BlY2ltZW4pLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMudWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAndWlkJyBpcyByZXF1aXJlZCBmb3IgU3ViamVjdENvbnRleHRTcGVjaW1lbi5cIik7XG4gICAgfVxuXG4gICAgdmFyIHNwZWNpbWVuVWlkSXRlbSA9IG5ldyBVSURSZWZDb250ZW50SXRlbSh7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiMTIxMDM5XCIsXG4gICAgICAgIG1lYW5pbmc6IFwiU3BlY2ltZW4gVUlEXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMudWlkLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgfSk7XG5cbiAgICBfdGhpczE4LnB1c2goc3BlY2ltZW5VaWRJdGVtKTtcblxuICAgIGlmIChvcHRpb25zLmlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHNwZWNpbWVuSWRlbnRpZmllckl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxMDQxXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJTcGVjaW1lbiBJZGVudGlmaWVyXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuaWRlbnRpZmllcixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMxOC5wdXNoKHNwZWNpbWVuSWRlbnRpZmllckl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNvbnRhaW5lcklkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGNvbnRhaW5lcklkZW50aWZpZXJJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjExMTcwMFwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiU3BlY2ltZW4gQ29udGFpbmVyIElkZW50aWZpZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5jb250YWluZXJJZGVudGlmaWVyLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE4LnB1c2goY29udGFpbmVySWRlbnRpZmllckl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNwZWNpbWVuVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgc3BlY2ltZW5UeXBlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCJSLTAwMjU0XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJTcGVjaW1lbiBUeXBlXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuc3BlY2ltZW5UeXBlLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE4LnB1c2goc3BlY2ltZW5UeXBlSXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMTg7XG4gIH1cblxuICByZXR1cm4gU3ViamVjdENvbnRleHRTcGVjaW1lbjtcbn0oVGVtcGxhdGUpO1xuXG52YXIgU3ViamVjdENvbnRleHREZXZpY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTEyKSB7XG4gIF9pbmhlcml0cyhTdWJqZWN0Q29udGV4dERldmljZSwgX1RlbXBsYXRlMTIpO1xuXG4gIGZ1bmN0aW9uIFN1YmplY3RDb250ZXh0RGV2aWNlKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMxOTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJqZWN0Q29udGV4dERldmljZSk7XG5cbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbmFtZScgaXMgcmVxdWlyZWQgZm9yIFN1YmplY3RDb250ZXh0RGV2aWNlLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgZGV2aWNlTmFtZUl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMjExOTNcIixcbiAgICAgICAgbWVhbmluZzogXCJEZXZpY2UgU3ViamVjdCBOYW1lXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgIH0pO1xuXG4gICAgX3RoaXMxOS5wdXNoKGRldmljZU5hbWVJdGVtKTtcblxuICAgIGlmIChvcHRpb25zLnVpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZGV2aWNlVWlkSXRlbSA9IG5ldyBVSURSZWZDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyMTE5OFwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiRGV2aWNlIFN1YmplY3QgVUlEXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMudWlkLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE5LnB1c2goZGV2aWNlVWlkSXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWFudWZhY3R1cmVyTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbWFudWZhY3R1cmVyTmFtZUl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxMTk0XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJEZXZpY2UgU3ViamVjdCBNYW51ZmFjdHVyZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5tYW51ZmFjdHVyZXJOYW1lLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE5LnB1c2gobWFudWZhY3R1cmVyTmFtZUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1vZGVsTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbW9kZWxOYW1lSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjExOTVcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRldmljZSBTdWJqZWN0IE1vZGVsIE5hbWVcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5tb2RlbE5hbWUsXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMTkucHVzaChtb2RlbE5hbWVJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZXJpYWxOdW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHNlcmlhbE51bWJlckl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxMTk2XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJEZXZpY2UgU3ViamVjdCBTZXJpYWwgTnVtYmVyXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuc2VyaWFsTnVtYmVyLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE5LnB1c2goc2VyaWFsTnVtYmVySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucGh5c2ljYWxMb2NhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcGh5c2ljYWxMb2NhdGlvbkl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxMTk3XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJEZXZpY2UgU3ViamVjdCBQaHlzaWNhbCBMb2NhdGlvbiBEdXJpbmcgT2JzZXJ2YXRpb25cIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5waHlzaWNhbExvY2F0aW9uLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczE5LnB1c2gocGh5c2ljYWxMb2NhdGlvbkl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczE5KTtcbiAgfVxuXG4gIHJldHVybiBTdWJqZWN0Q29udGV4dERldmljZTtcbn0oVGVtcGxhdGUpO1xuXG52YXIgTGFuZ3VhZ2VPZkNvbnRlbnRJdGVtQW5kRGVzY2VuZGFudHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTEzKSB7XG4gIF9pbmhlcml0cyhMYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cywgX1RlbXBsYXRlMTMpO1xuXG4gIGZ1bmN0aW9uIExhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyMDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cyk7XG5cbiAgICBfdGhpczIwID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKExhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMubGFuZ3VhZ2UgPSBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiZW4tVVNcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJSRkM1NjQ2XCIsXG4gICAgICAgIG1lYW5pbmc6IFwiRW5nbGlzaCAoVW5pdGVkIFN0YXRlcylcIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGxhbmd1YWdlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyMTA0OVwiLFxuICAgICAgICBtZWFuaW5nOiBcIkxhbmd1YWdlIG9mIENvbnRlbnQgSXRlbSBhbmQgRGVzY2VuZGFudHNcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICB2YWx1ZTogb3B0aW9ucy5sYW5ndWFnZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19DT05DRVBUX01PRFxuICAgIH0pO1xuXG4gICAgX3RoaXMyMC5wdXNoKGxhbmd1YWdlSXRlbSk7XG5cbiAgICByZXR1cm4gX3RoaXMyMDtcbiAgfVxuXG4gIHJldHVybiBMYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cztcbn0oVGVtcGxhdGUpO1xuXG52YXIgX01lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXRpdmVFdmFsdWF0aW9ucyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMTQpIHtcbiAgX2luaGVyaXRzKF9NZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl0aXZlRXZhbHVhdGlvbnMsIF9UZW1wbGF0ZTE0KTtcblxuICBmdW5jdGlvbiBfTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdGl2ZUV2YWx1YXRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX2dyb3VwSXRlbSRDb250ZW50U2VxO1xuXG4gICAgdmFyIF90aGlzMjE7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXRpdmVFdmFsdWF0aW9ucyk7XG5cbiAgICBfdGhpczIxID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKF9NZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl0aXZlRXZhbHVhdGlvbnMpLmNhbGwodGhpcykpO1xuICAgIHZhciBncm91cEl0ZW0gPSBuZXcgQ29udGFpbmVyQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjEyNTAwN1wiLFxuICAgICAgICBtZWFuaW5nOiBcIk1lYXN1cmVtZW50IEdyb3VwXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuQ09OVEFJTlNcbiAgICB9KTtcbiAgICBncm91cEl0ZW0uQ29udGVudFNlcXVlbmNlID0gbmV3IENvbnRlbnRTZXF1ZW5jZSQxKCk7XG5cbiAgICBpZiAob3B0aW9ucy50cmFja2luZ0lkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd0cmFja2luZ0lkZW50aWZpZXInIGlzIHJlcXVpcmVkIGZvciBtZWFzdXJlbWVudHMgZ3JvdXAuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRyYWNraW5nSWRlbnRpZmllci5jb25zdHJ1Y3RvciAhPT0gVHJhY2tpbmdJZGVudGlmaWVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RyYWNraW5nSWRlbnRpZmllcicgbXVzdCBoYXZlIHR5cGUgVHJhY2tpbmdJZGVudGlmaWVyLlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50cmFja2luZ0lkZW50aWZpZXIubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RyYWNraW5nSWRlbnRpZmllcicgbXVzdCBpbmNsdWRlIGEgaHVtYW4gcmVhZGFibGUgdHJhY2tpbmcgXCIgKyBcImlkZW50aWZpZXIgYW5kIGEgdHJhY2tpbmcgdW5pcXVlIGlkZW50aWZpZXIuXCIpO1xuICAgIH1cblxuICAgIChfZ3JvdXBJdGVtJENvbnRlbnRTZXEgPSBncm91cEl0ZW0uQ29udGVudFNlcXVlbmNlKS5wdXNoLmFwcGx5KF9ncm91cEl0ZW0kQ29udGVudFNlcSwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMudHJhY2tpbmdJZGVudGlmaWVyKSk7XG5cbiAgICBpZiAob3B0aW9ucy5zZXNzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBzZXNzaW9uSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCJDNjc0NDdcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkFjdGl2aXR5IFNlc3Npb25cIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIk5DSXRcIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuc2Vzc2lvbixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcbiAgICAgIGdyb3VwSXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChzZXNzaW9uSXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZmluZGluZ1R5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGZpbmRpbmdUeXBlSXRlbSA9IG5ldyBDb2RlQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjEwNzFcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkZpbmRpbmdcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5maW5kaW5nVHlwZSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuQ09OVEFJTlNcbiAgICAgIH0pO1xuICAgICAgZ3JvdXBJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKGZpbmRpbmdUeXBlSXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudGltZVBvaW50Q29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2dyb3VwSXRlbSRDb250ZW50U2VxMjtcblxuICAgICAgaWYgKG9wdGlvbnMudGltZVBvaW50Q29udGV4dC5jb25zdHJ1Y3RvciAhPT0gVGltZVBvaW50Q29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RpbWVQb2ludENvbnRleHQnIG11c3QgaGF2ZSB0eXBlIFRpbWVQb2ludENvbnRleHQuXCIpO1xuICAgICAgfVxuXG4gICAgICAoX2dyb3VwSXRlbSRDb250ZW50U2VxMiA9IGdyb3VwSXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX2dyb3VwSXRlbSRDb250ZW50U2VxMiwgX3RvQ29uc3VtYWJsZUFycmF5KHRpbWVQb2ludENvbnRleHQpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwLmNvbnN0cnVjdG9yICE9PSBSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdyZWZlcmVuY2VkUmVhbFdvcmxkVmFsbGVNYXAnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJSZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXAuXCIpO1xuICAgICAgfVxuXG4gICAgICBncm91cEl0ZW0uQ29udGVudFNlcXVlbmNlLnB1c2gob3B0aW9ucy5yZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMubWVhc3VyZW1lbnRzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLm1lYXN1cmVtZW50cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ21lYXN1cmVtZW50cycgbXVzdCBoYXZlIHR5cGUgQXJyYXkuXCIpO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLm1lYXN1cmVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtZWFzdXJlbWVudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhtZWFzdXJlbWVudCk7XG5cbiAgICAgICAgaWYgKCFtZWFzdXJlbWVudCB8fCBtZWFzdXJlbWVudC5jb25zdHJ1Y3RvciAhPT0gTnVtQ29udGVudEl0ZW0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ21lYXN1cmVtZW50JyBtdXN0IGhhdmUgdHlwZSBOdW1Db250ZW50SXRlbS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBncm91cEl0ZW0uQ29udGVudFNlcXVlbmNlLnB1c2gobWVhc3VyZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9ucykgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5xdWFsaXRhdGl2ZUV2YWx1YXRpb25zIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncXVhbGl0YXRpdmVFdmFsdWF0aW9ucycgbXVzdCBoYXZlIHR5cGUgQXJyYXkuXCIpO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLnF1YWxpdGF0aXZlRXZhbHVhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZXZhbHVhdGlvbikge1xuICAgICAgICBpZiAoIWV2YWx1YXRpb24gfHwgZXZhbHVhdGlvbi5jb25zdHJ1Y3RvciAhPT0gQ29kZUNvbnRlbnRJdGVtKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSXRlbXMgb2Ygb3B0aW9uICdxdWFsaXRhdGl2ZUV2YWx1YXRpb25zJyBtdXN0IGhhdmUgdHlwZSBcIiArIFwiQ29kZUNvbnRlbnRJdGVtLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyb3VwSXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChldmFsdWF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aGlzMjEucHVzaChncm91cEl0ZW0pO1xuXG4gICAgcmV0dXJuIF90aGlzMjE7XG4gIH1cblxuICByZXR1cm4gX01lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXRpdmVFdmFsdWF0aW9ucztcbn0oVGVtcGxhdGUpO1xuXG52YXIgX1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NZWFzdXJlbWVudHNBbmRRdWFsaSkge1xuICBfaW5oZXJpdHMoX1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMsIF9NZWFzdXJlbWVudHNBbmRRdWFsaSk7XG5cbiAgZnVuY3Rpb24gX1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczIyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9ST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zKTtcblxuICAgIF90aGlzMjIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoX1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMpLmNhbGwodGhpcywge1xuICAgICAgdHJhY2tpbmdJZGVudGlmaWVyOiBvcHRpb25zLnRyYWNraW5nSWRlbnRpZmllcixcbiAgICAgIHRpbWVQb2ludENvbnRleHQ6IG9wdGlvbnMudGltZVBvaW50Q29udGV4dCxcbiAgICAgIGZpbmRpbmdUeXBlOiBvcHRpb25zLmZpbmRpbmdUeXBlLFxuICAgICAgc2Vzc2lvbjogb3B0aW9ucy5zZXNzaW9uLFxuICAgICAgbWVhc3VyZW1lbnRzOiBvcHRpb25zLm1lYXN1cmVtZW50cyxcbiAgICAgIHF1YWxpdGF0aXZlRXZhbHVhdGlvbnM6IG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9uc1xuICAgIH0pKTtcbiAgICB2YXIgZ3JvdXBJdGVtID0gX3RoaXMyMlswXTtcbiAgICB2YXIgd2VyZVJlZmVyZW5jZXNQcm92aWRlZCA9IFtvcHRpb25zLnJlZmVyZW5jZWRSZWdpb25zICE9PSB1bmRlZmluZWQsIG9wdGlvbnMucmVmZXJlbmNlZFZvbHVtZSAhPT0gdW5kZWZpbmVkLCBvcHRpb25zLnJlZmVyZW5jZWRTZWdtZW50YXRpb24gIT09IHVuZGVmaW5lZF07XG4gICAgdmFyIG51bVJlZmVyZW5jZXMgPSB3ZXJlUmVmZXJlbmNlc1Byb3ZpZGVkLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH0pO1xuXG4gICAgaWYgKG51bVJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgbXVzdCBiZSBwcm92aWRlZDogXCIgKyBcIidyZWZlcmVuY2VkUmVnaW9ucycsICdyZWZlcmVuY2VkVm9sdW1lJywgb3IgXCIgKyBcIidyZWZlcmVuY2VkU2VnbWVudGF0aW9uJy5cIik7XG4gICAgfSBlbHNlIGlmIChudW1SZWZlcmVuY2VzID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zIHNob3VsZCBiZSBwcm92aWRlZDogXCIgKyBcIidyZWZlcmVuY2VkUmVnaW9ucycsICdyZWZlcmVuY2VkVm9sdW1lJywgb3IgXCIgKyBcIidyZWZlcmVuY2VkU2VnbWVudGF0aW9uJy5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLnJlZmVyZW5jZWRSZWdpb25zKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnJlZmVyZW5jZWRSZWdpb25zIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFJlZ2lvbnMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFJlZ2lvbicgbXVzdCBoYXZlIG5vbi16ZXJvIGxlbmd0aC5cIik7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMuZm9yRWFjaChmdW5jdGlvbiAocmVnaW9uKSB7XG4gICAgICAgIGlmIChyZWdpb24gPT09IHVuZGVmaW5lZCB8fCByZWdpb24uY29uc3RydWN0b3IgIT09IEltYWdlUmVnaW9uICYmIHJlZ2lvbi5jb25zdHJ1Y3RvciAhPT0gSW1hZ2VSZWdpb24zRCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW1zIG9mIG9wdGlvbiAncmVmZXJlbmNlZFJlZ2lvbicgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIkltYWdlUmVnaW9uIG9yIEltYWdlUmVnaW9uM0QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JvdXBJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKHJlZ2lvbik7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFZvbHVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkVm9sdW1lLmNvbnN0cnVjdG9yICE9PSBWb2x1bWVTdXJmYWNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW1zIG9mIG9wdGlvbiAncmVmZXJlbmNlZFZvbHVtZScgbXVzdCBoYXZlIHR5cGUgVm9sdW1lU3VyZmFjZS5cIik7XG4gICAgICB9XG5cbiAgICAgIGdyb3VwSXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChyZWZlcmVuY2VkVm9sdW1lKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVmZXJlbmNlZFNlZ21lbnRhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudGF0aW9uLmNvbnN0cnVjdG9yICE9PSBSZWZlcmVuY2VkU2VnbWVudGF0aW9uICYmIG9wdGlvbnMucmVmZXJlbmNlZFNlZ21lbnRhdGlvbi5jb25zdHJ1Y3RvciAhPT0gUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncmVmZXJlbmNlZFNlZ21lbnRhdGlvbicgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIlJlZmVyZW5jZWRTZWdtZW50YXRpb24gb3IgUmVmZXJlbmNlZFNlZ21lbnRhdGlvbkZyYW1lLlwiKTtcbiAgICAgIH1cblxuICAgICAgZ3JvdXBJdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKHJlZmVyZW5jZWRTZWdtZW50YXRpb24pO1xuICAgIH1cblxuICAgIF90aGlzMjJbMF0gPSBncm91cEl0ZW07XG4gICAgcmV0dXJuIF90aGlzMjI7XG4gIH1cblxuICByZXR1cm4gX1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnM7XG59KF9NZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl0aXZlRXZhbHVhdGlvbnMpO1xuXG52YXIgUGxhbmFyUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JPSU1lYXN1cmVtZW50c0FuZFF1KSB7XG4gIF9pbmhlcml0cyhQbGFuYXJST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zLCBfUk9JTWVhc3VyZW1lbnRzQW5kUXUpO1xuXG4gIGZ1bmN0aW9uIFBsYW5hclJPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbGFuYXJST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zKTtcblxuICAgIHZhciB3ZXJlUmVmZXJlbmNlc1Byb3ZpZGVkID0gW29wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbiAhPT0gdW5kZWZpbmVkLCBvcHRpb25zLnJlZmVyZW5jZWRTZWdtZW50YXRpb24gIT09IHVuZGVmaW5lZF07XG4gICAgdmFyIG51bVJlZmVyZW5jZXMgPSB3ZXJlUmVmZXJlbmNlc1Byb3ZpZGVkLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH0pO1xuXG4gICAgaWYgKG51bVJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgbXVzdCBiZSBwcm92aWRlZDogXCIgKyBcIidyZWZlcmVuY2VkUmVnaW9uJywgJ3JlZmVyZW5jZWRTZWdtZW50YXRpb24nLlwiKTtcbiAgICB9IGVsc2UgaWYgKG51bVJlZmVyZW5jZXMgPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgc2hvdWxkIGJlIHByb3ZpZGVkOiBcIiArIFwiJ3JlZmVyZW5jZWRSZWdpb24nLCAncmVmZXJlbmNlZFNlZ21lbnRhdGlvbicuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGxhbmFyUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucykuY2FsbCh0aGlzLCB7XG4gICAgICB0cmFja2luZ0lkZW50aWZpZXI6IG9wdGlvbnMudHJhY2tpbmdJZGVudGlmaWVyLFxuICAgICAgcmVmZXJlbmNlZFJlZ2lvbnM6IFtvcHRpb25zLnJlZmVyZW5jZWRSZWdpb25dLFxuICAgICAgcmVmZXJlbmNlZFNlZ21lbnRhdGlvbjogb3B0aW9ucy5yZWZlcmVuY2VkU2VnbWVudGF0aW9uLFxuICAgICAgcmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwOiBvcHRpb25zLnJlZmVyZW5jZWRSZWFsV29ybGRWYWx1ZU1hcCxcbiAgICAgIHRpbWVQb2ludENvbnRleHQ6IG9wdGlvbnMudGltZVBvaW50Q29udGV4dCxcbiAgICAgIGZpbmRpbmdUeXBlOiBvcHRpb25zLmZpbmRpbmdUeXBlLFxuICAgICAgc2Vzc2lvbjogb3B0aW9ucy5zZXNzaW9uLFxuICAgICAgbWVhc3VyZW1lbnRzOiBvcHRpb25zLm1lYXN1cmVtZW50cyxcbiAgICAgIHF1YWxpdGF0aXZlRXZhbHVhdGlvbnM6IG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9uc1xuICAgIH0pKTtcbiAgfVxuXG4gIHJldHVybiBQbGFuYXJST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zO1xufShfUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucyk7XG5cbnZhciBWb2x1bWV0cmljUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JPSU1lYXN1cmVtZW50c0FuZFF1Mikge1xuICBfaW5oZXJpdHMoVm9sdW1ldHJpY1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMsIF9ST0lNZWFzdXJlbWVudHNBbmRRdTIpO1xuXG4gIGZ1bmN0aW9uIFZvbHVtZXRyaWNST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVm9sdW1ldHJpY1JPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihWb2x1bWV0cmljUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucykuY2FsbCh0aGlzLCB7XG4gICAgICB0cmFja2luZ0lkZW50aWZpZXI6IG9wdGlvbnMudHJhY2tpbmdJZGVudGlmaWVyLFxuICAgICAgcmVmZXJlbmNlZFJlZ2lvbnM6IG9wdGlvbnMucmVmZXJlbmNlZFJlZ2lvbnMsXG4gICAgICByZWZlcmVuY2VkU2VnbWVudGF0aW9uOiBvcHRpb25zLnJlZmVyZW5jZWRTZWdtZW50YXRpb24sXG4gICAgICByZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXA6IG9wdGlvbnMucmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwLFxuICAgICAgdGltZVBvaW50Q29udGV4dDogb3B0aW9ucy50aW1lUG9pbnRDb250ZXh0LFxuICAgICAgZmluZGluZ1R5cGU6IG9wdGlvbnMuZmluZGluZ1R5cGUsXG4gICAgICBzZXNzaW9uOiBvcHRpb25zLnNlc3Npb24sXG4gICAgICBtZWFzdXJlbWVudHM6IG9wdGlvbnMubWVhc3VyZW1lbnRzLFxuICAgICAgcXVhbGl0YXRpdmVFdmFsdWF0aW9uczogb3B0aW9ucy5xdWFsaXRhdGl2ZUV2YWx1YXRpb25zXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFZvbHVtZXRyaWNST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zO1xufShfUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucyk7XG5cbnZhciBNZWFzdXJlbWVudHNEZXJpdmVkRnJvbU11bHRpcGxlUk9JTWVhc3VyZW1lbnRzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGVtcGxhdGUxNSkge1xuICBfaW5oZXJpdHMoTWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50cywgX1RlbXBsYXRlMTUpO1xuXG4gIGZ1bmN0aW9uIE1lYXN1cmVtZW50c0Rlcml2ZWRGcm9tTXVsdGlwbGVST0lNZWFzdXJlbWVudHMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczIzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lYXN1cmVtZW50c0Rlcml2ZWRGcm9tTXVsdGlwbGVST0lNZWFzdXJlbWVudHMpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGVyaXZhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2Rlcml2YXRpb24nIGlzIHJlcXVpcmVkIGZvciBcIiArIFwiTWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50cy5cIik7XG4gICAgfSAvLyBGSVhNRVxuXG5cbiAgICB2YXIgdmFsdWVJdGVtID0gbmV3IE51bUNvbnRlbnRJdGVtKHtcbiAgICAgIG5hbWU6IG9wdGlvbnMuZGVyaXZhdGlvblxuICAgIH0pO1xuICAgIHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UgPSBuZXcgQ29udGVudFNlcXVlbmNlJDEoKTtcblxuICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50R3JvdXBzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbWVhc3VyZW1lbnRHcm91cHMnIGlzIHJlcXVpcmVkIGZvciBcIiArIFwiTWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50cy5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLm1lYXN1cmVtZW50R3JvdXBzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLm1lYXN1cmVtZW50R3JvdXBzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ21lYXN1cmVtZW50R3JvdXBzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5tZWFzdXJlbWVudEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgdmFyIF92YWx1ZUl0ZW0kQ29udGVudFNlcTQ7XG5cbiAgICAgIGlmICghZ3JvdXAgfHwgZ3JvdXAuY29uc3RydWN0b3IgIT09IFBsYW5hclJPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMgJiYgZ3JvdXAuY29uc3RydWN0b3IgIT09IFZvbHVtZXRyaWNST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW1zIG9mIG9wdGlvbiAnbWVhc3VyZW1lbnRHcm91cHMnIG11c3QgaGF2ZSB0eXBlIFwiICsgXCJQbGFuYXJST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zIG9yIFwiICsgXCJWb2x1bWV0cmljUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9ucy5cIik7XG4gICAgICB9XG5cbiAgICAgIGdyb3VwWzBdLlJlbGF0aW9uc2hpcFR5cGUgPSBcIlItSU5GRVJSRUQgRlJPTVwiO1xuXG4gICAgICAoX3ZhbHVlSXRlbSRDb250ZW50U2VxNCA9IHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX3ZhbHVlSXRlbSRDb250ZW50U2VxNCwgX3RvQ29uc3VtYWJsZUFycmF5KGdyb3VwKSk7XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5tZWFzdXJlbWVudFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF92YWx1ZUl0ZW0kQ29udGVudFNlcTU7XG5cbiAgICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50UHJvcGVydGllcy5jb25zdHJ1Y3RvciAhPT0gTWVhc3VyZW1lbnRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbWVhc3VyZW1lbnRQcm9wZXJ0aWVzJyBtdXN0IGhhdmUgdHlwZSBNZWFzdXJlbWVudFByb3BlcnRpZXMuXCIpO1xuICAgICAgfVxuXG4gICAgICAoX3ZhbHVlSXRlbSRDb250ZW50U2VxNSA9IHZhbHVlSXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX3ZhbHVlSXRlbSRDb250ZW50U2VxNSwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMubWVhc3VyZW1lbnRQcm9wZXJ0aWVzKSk7XG4gICAgfVxuXG4gICAgX3RoaXMyMy5wdXNoKHZhbHVlSXRlbSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMyMyk7XG4gIH1cblxuICByZXR1cm4gTWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50cztcbn0oVGVtcGxhdGUpO1xuXG52YXIgTWVhc3VyZW1lbnRBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01lYXN1cmVtZW50c0FuZFF1YWxpMikge1xuICBfaW5oZXJpdHMoTWVhc3VyZW1lbnRBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25Hcm91cCwgX01lYXN1cmVtZW50c0FuZFF1YWxpMik7XG5cbiAgZnVuY3Rpb24gTWVhc3VyZW1lbnRBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25Hcm91cChvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lYXN1cmVtZW50QW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9uR3JvdXApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNZWFzdXJlbWVudEFuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbkdyb3VwKS5jYWxsKHRoaXMsIHtcbiAgICAgIHRyYWNraW5nSWRlbnRpZmllcjogb3B0aW9ucy50cmFja2luZ0lkZW50aWZpZXIsXG4gICAgICByZWZlcmVuY2VkUmVhbFdvcmxkVmFsdWVNYXA6IG9wdGlvbnMucmVmZXJlbmNlZFJlYWxXb3JsZFZhbHVlTWFwLFxuICAgICAgdGltZVBvaW50Q29udGV4dDogb3B0aW9ucy50aW1lUG9pbnRDb250ZXh0LFxuICAgICAgZmluZGluZ1R5cGU6IG9wdGlvbnMuZmluZGluZ1R5cGUsXG4gICAgICBzZXNzaW9uOiBvcHRpb25zLnNlc3Npb24sXG4gICAgICBtZWFzdXJlbWVudHM6IG9wdGlvbnMubWVhc3VyZW1lbnRzLFxuICAgICAgcXVhbGl0YXRpdmVFdmFsdWF0aW9uczogb3B0aW9ucy5xdWFsaXRhdGl2ZUV2YWx1YXRpb25zXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIE1lYXN1cmVtZW50QW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9uR3JvdXA7XG59KF9NZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl0aXZlRXZhbHVhdGlvbnMpO1xuXG52YXIgUk9JTWVhc3VyZW1lbnRzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfVGVtcGxhdGUxNikge1xuICBfaW5oZXJpdHMoUk9JTWVhc3VyZW1lbnRzLCBfVGVtcGxhdGUxNik7XG5cbiAgZnVuY3Rpb24gUk9JTWVhc3VyZW1lbnRzKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyNDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBST0lNZWFzdXJlbWVudHMpO1xuXG4gICAgX3RoaXMyNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihST0lNZWFzdXJlbWVudHMpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKG9wdGlvbnMubWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBtZXRob2RJdGVtID0gbmV3IENvZGVDb250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjM3MDEyOTAwNVwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiTWVhc3VyZW1lbnQgTWV0aG9kXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJTQ1RcIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfQ09OQ0VQVF9NT0RcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczI0LnB1c2gobWV0aG9kSXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZmluZGluZ1NpdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghKF90eXBlb2Yob3B0aW9ucy5maW5kaW5nU2l0ZXMpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMuZmluZGluZ1NpdGVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnZmluZGluZ1NpdGVzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMuZmluZGluZ1NpdGVzLmZvckVhY2goZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgaWYgKCFzaXRlIHx8IHNpdGUuY29uc3RydWN0b3IgIT09IEZpbmRpbmdTaXRlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSXRlbXMgb2Ygb3B0aW9uICdmaW5kaW5nU2l0ZXMnIG11c3QgaGF2ZSB0eXBlIEZpbmRpbmdTaXRlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMjQucHVzaChzaXRlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lYXN1cmVtZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb25zICdtZWFzdXJlbWVudHMnIGlzIHJlcXVpcmVkIFJPSU1lYXN1cmVtZW50cy5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLm1lYXN1cmVtZW50cykgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5tZWFzdXJlbWVudHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbWVhc3VyZW1lbnRzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWVhc3VyZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdtZWFzdXJlbWVudHMnIG11c3QgaGF2ZSBub24temVybyBsZW5ndGguXCIpO1xuICAgIH1cblxuICAgIG9wdGlvbnMubWVhc3VyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG1lYXN1cmVtZW50KSB7XG4gICAgICBpZiAoIW1lYXN1cmVtZW50IHx8IG1lYXN1cmVtZW50LmNvbnN0cnVjdG9yICE9PSBNZWFzdXJlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtcyBvZiBvcHRpb24gJ21lYXN1cmVtZW50cycgbXVzdCBoYXZlIHR5cGUgTWVhc3VyZW1lbnQuXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczI0LnB1c2gobWVhc3VyZW1lbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpczI0O1xuICB9XG5cbiAgcmV0dXJuIFJPSU1lYXN1cmVtZW50cztcbn0oVGVtcGxhdGUpO1xuXG52YXIgTWVhc3VyZW1lbnRSZXBvcnQkMiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMTcpIHtcbiAgX2luaGVyaXRzKE1lYXN1cmVtZW50UmVwb3J0LCBfVGVtcGxhdGUxNyk7XG5cbiAgZnVuY3Rpb24gTWVhc3VyZW1lbnRSZXBvcnQob3B0aW9ucykge1xuICAgIHZhciBfaXRlbSRDb250ZW50U2VxdWVuY2UsIF9pdGVtJENvbnRlbnRTZXF1ZW5jZTIsIF9pdGVtJENvbnRlbnRTZXF1ZW5jZTM7XG5cbiAgICB2YXIgX3RoaXMyNTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWFzdXJlbWVudFJlcG9ydCk7XG5cbiAgICBfdGhpczI1ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1lYXN1cmVtZW50UmVwb3J0KS5jYWxsKHRoaXMpKTtcblxuICAgIGlmIChvcHRpb25zLm9ic2VydmF0aW9uQ29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ29ic2VydmF0aW9uQ29udGV4dCcgaXMgcmVxdWlyZWQgZm9yIE1lYXN1cmVtZW50UmVwb3J0LlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wcm9jZWR1cmVSZXBvcnRlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3Byb2NlZHVyZVJlcG9ydGVkJyBpcyByZXF1aXJlZCBmb3IgTWVhc3VyZW1lbnRSZXBvcnQuXCIpO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0gbmV3IENvbnRhaW5lckNvbnRlbnRJdGVtKHtcbiAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICB2YWx1ZTogXCIxMjYwMDBcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIixcbiAgICAgICAgbWVhbmluZzogXCJJbWFnaW5nIE1lYXN1cmVtZW50IFJlcG9ydFwiXG4gICAgICB9KSxcbiAgICAgIHRlbXBsYXRlSUQ6IFwiMTUwMFwiXG4gICAgfSk7XG4gICAgaXRlbS5Db250ZW50U2VxdWVuY2UgPSBuZXcgQ29udGVudFNlcXVlbmNlJDEoKTtcblxuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbGFuZ3VhZ2VPZkNvbnRlbnRJdGVtQW5kRGVzY2VuZGFudHMnIGlzIHJlcXVpcmVkIGZvciBcIiArIFwiTWVhc3VyZW1lbnRSZXBvcnQuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzLmNvbnN0cnVjdG9yICE9PSBMYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdsYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cycgbXVzdCBoYXZlIHR5cGUgXCIgKyBcIkxhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzLlwiKTtcbiAgICB9XG5cbiAgICAoX2l0ZW0kQ29udGVudFNlcXVlbmNlID0gaXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX2l0ZW0kQ29udGVudFNlcXVlbmNlLCBfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucy5sYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cykpO1xuXG4gICAgKF9pdGVtJENvbnRlbnRTZXF1ZW5jZTIgPSBpdGVtLkNvbnRlbnRTZXF1ZW5jZSkucHVzaC5hcHBseShfaXRlbSRDb250ZW50U2VxdWVuY2UyLCBfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucy5vYnNlcnZhdGlvbkNvbnRleHQpKTtcblxuICAgIGlmIChvcHRpb25zLnByb2NlZHVyZVJlcG9ydGVkLmNvbnN0cnVjdG9yID09PSBDb2RlZENvbmNlcHQgfHwgb3B0aW9ucy5wcm9jZWR1cmVSZXBvcnRlZC5jb25zdHJ1Y3RvciA9PT0gQ29kZSkge1xuICAgICAgb3B0aW9ucy5wcm9jZWR1cmVSZXBvcnRlZCA9IFtvcHRpb25zLnByb2NlZHVyZVJlcG9ydGVkXTtcbiAgICB9XG5cbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMucHJvY2VkdXJlUmVwb3J0ZWQpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMucHJvY2VkdXJlUmVwb3J0ZWQgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAncHJvY2VkdXJlUmVwb3J0ZWQnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLnByb2NlZHVyZVJlcG9ydGVkLmZvckVhY2goZnVuY3Rpb24gKHByb2NlZHVyZSkge1xuICAgICAgdmFyIHByb2NlZHVyZUl0ZW0gPSBuZXcgQ29kZUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTIxMDU4XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJQcm9jZWR1cmUgcmVwb3J0ZWRcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogcHJvY2VkdXJlLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfQ09OQ0VQVF9NT0RcbiAgICAgIH0pO1xuICAgICAgaXRlbS5Db250ZW50U2VxdWVuY2UucHVzaChwcm9jZWR1cmVJdGVtKTtcbiAgICB9KTtcbiAgICB2YXIgaW1hZ2VMaWJyYXJ5SXRlbSA9IG5ldyBJbWFnZUxpYnJhcnkoKTtcblxuICAgIChfaXRlbSRDb250ZW50U2VxdWVuY2UzID0gaXRlbS5Db250ZW50U2VxdWVuY2UpLnB1c2guYXBwbHkoX2l0ZW0kQ29udGVudFNlcXVlbmNlMywgX3RvQ29uc3VtYWJsZUFycmF5KGltYWdlTGlicmFyeUl0ZW0pKTtcblxuICAgIHZhciB3ZXJlT3B0aW9uc1Byb3ZpZGVkID0gW29wdGlvbnMuaW1hZ2luZ01lYXN1cmVtZW50cyAhPT0gdW5kZWZpbmVkLCBvcHRpb25zLmRlcml2ZWRJbWFnaW5nTWVhc3VyZW1lbnRzICE9PSB1bmRlZmluZWQsIG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9ucyAhPT0gdW5kZWZpbmVkXTtcbiAgICB2YXIgbnVtT3B0aW9uc1Byb3ZpZGVkID0gd2VyZU9wdGlvbnNQcm92aWRlZC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICsgYjtcbiAgICB9KTtcblxuICAgIGlmIChudW1PcHRpb25zUHJvdmlkZWQgPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgc2hvdWxkIGJlIHByb3ZpZGVkOiBcIiArIFwiJ2ltYWdpbmdNZWFzdXJlbWVudHMnLCAnZGVyaXZlZEltYWdpbmdNZWFzdXJlbWVudCcsIFwiICsgXCIncXVhbGl0YXRpdmVFdmFsdWF0aW9ucycuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmltYWdpbmdNZWFzdXJlbWVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGNvbnRhaW5lckl0ZW0gPSBuZXcgQ29udGFpbmVyQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjYwMTBcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkltYWdpbmcgTWVhc3VyZW1lbnRzXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuQ09OVEFJTlNcbiAgICAgIH0pO1xuICAgICAgY29udGFpbmVySXRlbS5Db250ZW50U2VxdWVuY2UgPSBfY29uc3RydWN0KENvbnRlbnRTZXF1ZW5jZSQxLCBfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucy5pbWFnaW5nTWVhc3VyZW1lbnRzKSk7XG4gICAgICBpdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKGNvbnRhaW5lckl0ZW0pO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kZXJpdmVkSW1hZ2luZ01lYXN1cmVtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2NvbnRhaW5lckl0ZW0gPSBuZXcgQ29udGFpbmVyQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjYwMTFcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIkRlcml2ZWQgSW1hZ2luZyBNZWFzdXJlbWVudHNcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5DT05UQUlOU1xuICAgICAgfSk7XG5cbiAgICAgIF9jb250YWluZXJJdGVtLkNvbnRlbnRTZXF1ZW5jZSA9IF9jb25zdHJ1Y3QoQ29udGVudFNlcXVlbmNlJDEsIF90b0NvbnN1bWFibGVBcnJheShvcHRpb25zLmRlcml2ZWRJbWFnaW5nTWVhc3VyZW1lbnRzKSk7XG4gICAgICBpdGVtLkNvbnRlbnRTZXF1ZW5jZS5wdXNoKF9jb250YWluZXJJdGVtKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucXVhbGl0YXRpdmVFdmFsdWF0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2NvbnRhaW5lckl0ZW0yID0gbmV3IENvbnRhaW5lckNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiQzAwMzQzNzVcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlF1YWxpdGF0aXZlIEV2YWx1YXRpb25zXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJVTUxTXCJcbiAgICAgICAgfSksXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkNPTlRBSU5TXG4gICAgICB9KTtcblxuICAgICAgX2NvbnRhaW5lckl0ZW0yLkNvbnRlbnRTZXF1ZW5jZSA9IF9jb25zdHJ1Y3QoQ29udGVudFNlcXVlbmNlJDEsIF90b0NvbnN1bWFibGVBcnJheShvcHRpb25zLnF1YWxpdGF0aXZlRXZhbHVhdGlvbnMpKTtcbiAgICAgIGl0ZW0uQ29udGVudFNlcXVlbmNlLnB1c2goX2NvbnRhaW5lckl0ZW0yKTtcbiAgICB9XG5cbiAgICBfdGhpczI1LnB1c2goaXRlbSk7XG5cbiAgICByZXR1cm4gX3RoaXMyNTtcbiAgfVxuXG4gIHJldHVybiBNZWFzdXJlbWVudFJlcG9ydDtcbn0oVGVtcGxhdGUpO1xuXG52YXIgVGltZVBvaW50Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMTgpIHtcbiAgX2luaGVyaXRzKFRpbWVQb2ludENvbnRleHQsIF9UZW1wbGF0ZTE4KTtcblxuICBmdW5jdGlvbiBUaW1lUG9pbnRDb250ZXh0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyNjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaW1lUG9pbnRDb250ZXh0KTtcblxuICAgIGlmIChvcHRpb25zLnRpbWVQb2ludCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RpbWVQb2ludCcgaXMgcmVxdWlyZWQgZm9yIFRpbWVQb2ludENvbnRleHQuXCIpO1xuICAgIH1cblxuICAgIHZhciB0aW1lUG9pbnRJdGVtID0gbmV3IFRleHRDb250ZW50SXRlbSh7XG4gICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgdmFsdWU6IFwiQzIzNDg3OTJcIixcbiAgICAgICAgbWVhbmluZzogXCJUaW1lIFBvaW50XCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiVU1MU1wiXG4gICAgICB9KSxcbiAgICAgIHZhbHVlOiBvcHRpb25zLnRpbWVQb2ludCxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgIH0pO1xuXG4gICAgX3RoaXMyNi5wdXNoKHRpbWVQb2ludEl0ZW0pO1xuXG4gICAgaWYgKG9wdGlvbnMudGltZVBvaW50VHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdGltZVBvaW50VHlwZUl0ZW0gPSBuZXcgQ29kZUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTI2MDcyXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJUaW1lIFBvaW50IFR5cGVcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy50aW1lUG9pbnRUeXBlLFxuICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5IQVNfT0JTX0NPTlRFWFRcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczI2LnB1c2godGltZVBvaW50VHlwZUl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRpbWVQb2ludE9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB0aW1lUG9pbnRPcmRlckl0ZW0gPSBuZXcgTnVtQ29udGVudEl0ZW0oe1xuICAgICAgICBuYW1lOiBuZXcgQ29kZWRDb25jZXB0KHtcbiAgICAgICAgICB2YWx1ZTogXCIxMjYwNzNcIixcbiAgICAgICAgICBtZWFuaW5nOiBcIlRpbWUgUG9pbnQgT3JkZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy50aW1lUG9pbnRPcmRlcixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyNi5wdXNoKHRpbWVQb2ludE9yZGVySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3ViamVjdFRpbWVQb2ludElkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHN1YmplY3RUaW1lUG9pbnRJZGVudGlmaWVySXRlbSA9IG5ldyBOdW1Db250ZW50SXRlbSh7XG4gICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgIHZhbHVlOiBcIjEyNjA3MFwiLFxuICAgICAgICAgIG1lYW5pbmc6IFwiU3ViamVjdCBUaW1lIFBvaW50IElkZW50aWZpZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5zdWJqZWN0VGltZVBvaW50SWRlbnRpZmllcixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyNi5wdXNoKHN1YmplY3RUaW1lUG9pbnRJZGVudGlmaWVySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucHJvdG9jb2xUaW1lUG9pbnRJZGVudGlmaWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcm90b2NvbFRpbWVQb2ludElkZW50aWZpZXJJdGVtID0gbmV3IE51bUNvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTI2MDcxXCIsXG4gICAgICAgICAgbWVhbmluZzogXCJQcm90b2NvbCBUaW1lIFBvaW50IElkZW50aWZpZXJcIixcbiAgICAgICAgICBzY2hlbWVEZXNpZ25hdG9yOiBcIkRDTVwiXG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5wcm90b2NvbFRpbWVQb2ludElkZW50aWZpZXIsXG4gICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19PQlNfQ09OVEVYVFxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMjYucHVzaChwcm90b2NvbFRpbWVQb2ludElkZW50aWZpZXJJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50ZW1wb3JhbE9mZnNldEZyb21FdmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy50ZW1wb3JhbE9mZnNldEZyb21FdmVudC5jb25zdHJ1Y3RvciAhPT0gTG9uZ2l0dWRpbmFsVGVtcG9yYWxPZmZzZXRGcm9tRXZlbnRDb250ZW50SXRlbSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3RlbXBvcmFsT2Zmc2V0RnJvbUV2ZW50JyBtdXN0IGhhdmUgdHlwZSBcIiArIFwiTG9uZ2l0dWRpbmFsVGVtcG9yYWxPZmZzZXRGcm9tRXZlbnRDb250ZW50SXRlbS5cIik7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMjYucHVzaCh0ZW1wb3JhbE9mZnNldEZyb21FdmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzMjYpO1xuICB9XG5cbiAgcmV0dXJuIFRpbWVQb2ludENvbnRleHQ7XG59KFRlbXBsYXRlKTtcblxudmFyIEltYWdlTGlicmFyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RlbXBsYXRlMTkpIHtcbiAgX2luaGVyaXRzKEltYWdlTGlicmFyeSwgX1RlbXBsYXRlMTkpO1xuXG4gIGZ1bmN0aW9uIEltYWdlTGlicmFyeShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMjc7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2VMaWJyYXJ5KTtcblxuICAgIF90aGlzMjcgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSW1hZ2VMaWJyYXJ5KS5jYWxsKHRoaXMpKTtcbiAgICB2YXIgbGlicmFyeUl0ZW0gPSBuZXcgQ29udGFpbmVyQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjExMTAyOFwiLFxuICAgICAgICBtZWFuaW5nOiBcIkltYWdlIExpYnJhcnlcIixcbiAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgfSksXG4gICAgICByZWxhdGlvbnNoaXBUeXBlOiBSZWxhdGlvbnNoaXBUeXBlcy5DT05UQUlOU1xuICAgIH0pO1xuXG4gICAgX3RoaXMyNy5wdXNoKGxpYnJhcnlJdGVtKTtcblxuICAgIHJldHVybiBfdGhpczI3O1xuICB9XG5cbiAgcmV0dXJuIEltYWdlTGlicmFyeTtcbn0oVGVtcGxhdGUpO1xuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmljYXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTIwKSB7XG4gIF9pbmhlcml0cyhBbGdvcml0aG1JZGVudGlmaWNhdGlvbiwgX1RlbXBsYXRlMjApO1xuXG4gIGZ1bmN0aW9uIEFsZ29yaXRobUlkZW50aWZpY2F0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyODtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbGdvcml0aG1JZGVudGlmaWNhdGlvbik7XG5cbiAgICBfdGhpczI4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFsZ29yaXRobUlkZW50aWZpY2F0aW9uKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmIChvcHRpb25zLm5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICduYW1lJyBpcyByZXF1aXJlZCBmb3IgQWxnb3JpdGhtSWRlbnRpZmljYXRpb24uXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd2ZXJzaW9uJyBpcyByZXF1aXJlZCBmb3IgQWxnb3JpdGhtSWRlbnRpZmljYXRpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBuYW1lSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjExMTAwMVwiLFxuICAgICAgICBtZWFuaW5nOiBcIkFsZ29yaXRobSBOYW1lXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19DT05DRVBUX01PRFxuICAgIH0pO1xuXG4gICAgX3RoaXMyOC5wdXNoKG5hbWVJdGVtKTtcblxuICAgIHZhciB2ZXJzaW9uSXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjExMTAwM1wiLFxuICAgICAgICBtZWFuaW5nOiBcIkFsZ29yaXRobSBWZXJzaW9uXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMudmVyc2lvbixcbiAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFJlbGF0aW9uc2hpcFR5cGVzLkhBU19DT05DRVBUX01PRFxuICAgIH0pO1xuXG4gICAgX3RoaXMyOC5wdXNoKHZlcnNpb25JdGVtKTtcblxuICAgIGlmIChvcHRpb25zLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLnBhcmFtZXRlcnMpID09PSBcIm9iamVjdFwiIHx8IG9wdGlvbnMucGFyYW1ldGVycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3BhcmFtZXRlcnMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5wYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtZXRlcikge1xuICAgICAgICB2YXIgcGFyYW1ldGVySXRlbSA9IG5ldyBUZXh0Q29udGVudEl0ZW0oe1xuICAgICAgICAgIG5hbWU6IG5ldyBDb2RlZENvbmNlcHQoe1xuICAgICAgICAgICAgdmFsdWU6IFwiMTExMDAyXCIsXG4gICAgICAgICAgICBtZWFuaW5nOiBcIkFsZ29yaXRobSBQYXJhbWV0ZXJcIixcbiAgICAgICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB2YWx1ZTogcGFyYW0sXG4gICAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX0NPTkNFUFRfTU9EXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMjgucHVzaChwYXJhbWV0ZXJJdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczI4O1xuICB9XG5cbiAgcmV0dXJuIEFsZ29yaXRobUlkZW50aWZpY2F0aW9uO1xufShUZW1wbGF0ZSk7XG5cbnZhciBUcmFja2luZ0lkZW50aWZpZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9UZW1wbGF0ZTIxKSB7XG4gIF9pbmhlcml0cyhUcmFja2luZ0lkZW50aWZpZXIsIF9UZW1wbGF0ZTIxKTtcblxuICBmdW5jdGlvbiBUcmFja2luZ0lkZW50aWZpZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpczI5O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNraW5nSWRlbnRpZmllcik7XG5cbiAgICBfdGhpczI5ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRyYWNraW5nSWRlbnRpZmllcikuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAob3B0aW9ucy51aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICd1aWQnIGlzIHJlcXVpcmVkIGZvciBUcmFja2luZ0lkZW50aWZpZXIuXCIpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHRyYWNraW5nSWRlbnRpZmllckl0ZW0gPSBuZXcgVGV4dENvbnRlbnRJdGVtKHtcbiAgICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgICAgdmFsdWU6IFwiMTEyMDM5XCIsXG4gICAgICAgICAgbWVhbmluZzogXCJUcmFja2luZyBJZGVudGlmaWVyXCIsXG4gICAgICAgICAgc2NoZW1lRGVzaWduYXRvcjogXCJEQ01cIlxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuaWRlbnRpZmllcixcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyOS5wdXNoKHRyYWNraW5nSWRlbnRpZmllckl0ZW0pO1xuICAgIH1cblxuICAgIHZhciB0cmFja2luZ1VJREl0ZW0gPSBuZXcgVUlEUmVmQ29udGVudEl0ZW0oe1xuICAgICAgbmFtZTogbmV3IENvZGVkQ29uY2VwdCh7XG4gICAgICAgIHZhbHVlOiBcIjExMjA0MFwiLFxuICAgICAgICBtZWFuaW5nOiBcIlRyYWNraW5nIFVuaXF1ZSBJZGVudGlmaWVyXCIsXG4gICAgICAgIHNjaGVtZURlc2lnbmF0b3I6IFwiRENNXCJcbiAgICAgIH0pLFxuICAgICAgdmFsdWU6IG9wdGlvbnMudWlkLFxuICAgICAgcmVsYXRpb25zaGlwVHlwZTogUmVsYXRpb25zaGlwVHlwZXMuSEFTX09CU19DT05URVhUXG4gICAgfSk7XG5cbiAgICBfdGhpczI5LnB1c2godHJhY2tpbmdVSURJdGVtKTtcblxuICAgIHJldHVybiBfdGhpczI5O1xuICB9XG5cbiAgcmV0dXJuIFRyYWNraW5nSWRlbnRpZmllcjtcbn0oVGVtcGxhdGUpO1xuXG52YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRBbGdvcml0aG1JZGVudGlmaWNhdGlvbjogQWxnb3JpdGhtSWRlbnRpZmljYXRpb24sXG5cdERldmljZU9ic2VydmVySWRlbnRpZnlpbmdBdHRyaWJ1dGVzOiBEZXZpY2VPYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlcyxcblx0SW1hZ2VMaWJyYXJ5OiBJbWFnZUxpYnJhcnksXG5cdExhbmd1YWdlT2ZDb250ZW50SXRlbUFuZERlc2NlbmRhbnRzOiBMYW5ndWFnZU9mQ29udGVudEl0ZW1BbmREZXNjZW5kYW50cyxcblx0TWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50LFxuXHRNZWFzdXJlbWVudEFuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbkdyb3VwOiBNZWFzdXJlbWVudEFuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbkdyb3VwLFxuXHRNZWFzdXJlbWVudFJlcG9ydDogTWVhc3VyZW1lbnRSZXBvcnQkMixcblx0TWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50czogTWVhc3VyZW1lbnRzRGVyaXZlZEZyb21NdWx0aXBsZVJPSU1lYXN1cmVtZW50cyxcblx0T2JzZXJ2YXRpb25Db250ZXh0OiBPYnNlcnZhdGlvbkNvbnRleHQsXG5cdE9ic2VydmVyQ29udGV4dDogT2JzZXJ2ZXJDb250ZXh0LFxuXHRQZXJzb25PYnNlcnZlcklkZW50aWZ5aW5nQXR0cmlidXRlczogUGVyc29uT2JzZXJ2ZXJJZGVudGlmeWluZ0F0dHJpYnV0ZXMsXG5cdFBsYW5hclJPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnM6IFBsYW5hclJPSU1lYXN1cmVtZW50c0FuZFF1YWxpdGF0aXZlRXZhbHVhdGlvbnMsXG5cdFJPSU1lYXN1cmVtZW50czogUk9JTWVhc3VyZW1lbnRzLFxuXHRTdWJqZWN0Q29udGV4dDogU3ViamVjdENvbnRleHQsXG5cdFN1YmplY3RDb250ZXh0RGV2aWNlOiBTdWJqZWN0Q29udGV4dERldmljZSxcblx0U3ViamVjdENvbnRleHRGZXR1czogU3ViamVjdENvbnRleHRGZXR1cyxcblx0U3ViamVjdENvbnRleHRTcGVjaW1lbjogU3ViamVjdENvbnRleHRTcGVjaW1lbixcblx0VGltZVBvaW50Q29udGV4dDogVGltZVBvaW50Q29udGV4dCxcblx0VHJhY2tpbmdJZGVudGlmaWVyOiBUcmFja2luZ0lkZW50aWZpZXIsXG5cdFZvbHVtZXRyaWNST0lNZWFzdXJlbWVudHNBbmRRdWFsaXRhdGl2ZUV2YWx1YXRpb25zOiBWb2x1bWV0cmljUk9JTWVhc3VyZW1lbnRzQW5kUXVhbGl0YXRpdmVFdmFsdWF0aW9uc1xufSk7XG5cbnZhciBfYXR0cmlidXRlc1RvSW5jbHVkZSA9IFsvLyBQYXRpZW50XG5cIjAwMDgwMDU0XCIsIFwiMDAwODAxMDBcIiwgXCIwMDA4MDEwMlwiLCBcIjAwMDgwMTAzXCIsIFwiMDAwODAxMDRcIiwgXCIwMDA4MDEwNVwiLCBcIjAwMDgwMTA2XCIsIFwiMDAwODAxMDdcIiwgXCIwMDA4MDEwQlwiLCBcIjAwMDgwMTBEXCIsIFwiMDAwODAxMEZcIiwgXCIwMDA4MDExN1wiLCBcIjAwMDgwMTE4XCIsIFwiMDAwODAxMTlcIiwgXCIwMDA4MDEyMFwiLCBcIjAwMDgwMTIxXCIsIFwiMDAwODAxMjJcIiwgXCIwMDA4MTEyMFwiLCBcIjAwMDgxMTUwXCIsIFwiMDAwODExNTVcIiwgXCIwMDA4MTE2MFwiLCBcIjAwMDgxMTkwXCIsIFwiMDAwODExOTlcIiwgXCIwMDEwMDAxMFwiLCBcIjAwMTAwMDIwXCIsIFwiMDAxMDAwMjFcIiwgXCIwMDEwMDAyMlwiLCBcIjAwMTAwMDI0XCIsIFwiMDAxMDAwMjZcIiwgXCIwMDEwMDAyN1wiLCBcIjAwMTAwMDI4XCIsIFwiMDAxMDAwMzBcIiwgXCIwMDEwMDAzMlwiLCBcIjAwMTAwMDMzXCIsIFwiMDAxMDAwMzRcIiwgXCIwMDEwMDAzNVwiLCBcIjAwMTAwMDQwXCIsIFwiMDAxMDAyMDBcIiwgXCIwMDEwMDIxMlwiLCBcIjAwMTAwMjEzXCIsIFwiMDAxMDAyMTRcIiwgXCIwMDEwMDIxNVwiLCBcIjAwMTAwMjE2XCIsIFwiMDAxMDAyMTdcIiwgXCIwMDEwMDIxOFwiLCBcIjAwMTAwMjE5XCIsIFwiMDAxMDAyMjFcIiwgXCIwMDEwMDIyMlwiLCBcIjAwMTAwMjIzXCIsIFwiMDAxMDAyMjlcIiwgXCIwMDEwMTAwMVwiLCBcIjAwMTAxMDAyXCIsIFwiMDAxMDExMDBcIiwgXCIwMDEwMjE2MFwiLCBcIjAwMTAyMjAxXCIsIFwiMDAxMDIyMDJcIiwgXCIwMDEwMjI5MlwiLCBcIjAwMTAyMjkzXCIsIFwiMDAxMDIyOTRcIiwgXCIwMDEwMjI5NVwiLCBcIjAwMTAyMjk2XCIsIFwiMDAxMDIyOTdcIiwgXCIwMDEwMjI5OFwiLCBcIjAwMTAyMjk5XCIsIFwiMDAxMDQwMDBcIiwgXCIwMDEyMDA2MlwiLCBcIjAwMTIwMDYzXCIsIFwiMDAxMjAwNjRcIiwgXCIwMDIwMDAwRFwiLCBcIjAwNDAwMDMxXCIsIFwiMDA0MDAwMzJcIiwgXCIwMDQwMDAzM1wiLCBcIjAwNDAwMDM1XCIsIFwiMDA0MDAwMzZcIiwgXCIwMDQwMDAzOVwiLCBcIjAwNDAwMDNBXCIsIFwiMDA0MEUwMDFcIiwgXCIwMDQwRTAxMFwiLCBcIjAwNDBFMDIwXCIsIFwiMDA0MEUwMjFcIiwgXCIwMDQwRTAyMlwiLCBcIjAwNDBFMDIzXCIsIFwiMDA0MEUwMjRcIiwgXCIwMDQwRTAyNVwiLCBcIjAwNDBFMDMwXCIsIFwiMDA0MEUwMzFcIiwgXCIwMDYyMDAwQlwiLCBcIjAwODgwMTMwXCIsIFwiMDA4ODAxNDBcIiwgLy8gUGF0aWVudCBTdHVkeVxuXCIwMDA4MDEwMFwiLCBcIjAwMDgwMTAyXCIsIFwiMDAwODAxMDNcIiwgXCIwMDA4MDEwNFwiLCBcIjAwMDgwMTA1XCIsIFwiMDAwODAxMDZcIiwgXCIwMDA4MDEwN1wiLCBcIjAwMDgwMTBCXCIsIFwiMDAwODAxMERcIiwgXCIwMDA4MDEwRlwiLCBcIjAwMDgwMTE3XCIsIFwiMDAwODAxMThcIiwgXCIwMDA4MDExOVwiLCBcIjAwMDgwMTIwXCIsIFwiMDAwODAxMjFcIiwgXCIwMDA4MDEyMlwiLCBcIjAwMDgxMDgwXCIsIFwiMDAwODEwODRcIiwgXCIwMDEwMTAxMFwiLCBcIjAwMTAxMDIwXCIsIFwiMDAxMDEwMjFcIiwgXCIwMDEwMTAyMlwiLCBcIjAwMTAxMDIzXCIsIFwiMDAxMDEwMjRcIiwgXCIwMDEwMTAzMFwiLCBcIjAwMTAyMDAwXCIsIFwiMDAxMDIxMTBcIiwgXCIwMDEwMjE4MFwiLCBcIjAwMTAyMUEwXCIsIFwiMDAxMDIxQjBcIiwgXCIwMDEwMjFDMFwiLCBcIjAwMTAyMUQwXCIsIFwiMDAxMDIyMDNcIiwgXCIwMDM4MDAxMFwiLCBcIjAwMzgwMDE0XCIsIFwiMDAzODAwNjBcIiwgXCIwMDM4MDA2MlwiLCBcIjAwMzgwMDY0XCIsIFwiMDAzODA1MDBcIiwgXCIwMDQwMDAzMVwiLCBcIjAwNDAwMDMyXCIsIFwiMDA0MDAwMzNcIiwgLy8gR2VuZXJhbCBTdHVkeVxuXCIwMDA4MDAyMFwiLCBcIjAwMDgwMDMwXCIsIFwiMDAwODAwNTBcIiwgXCIwMDA4MDA1MVwiLCBcIjAwMDgwMDgwXCIsIFwiMDAwODAwODFcIiwgXCIwMDA4MDA4MlwiLCBcIjAwMDgwMDkwXCIsIFwiMDAwODAwOTZcIiwgXCIwMDA4MDA5Q1wiLCBcIjAwMDgwMDlEXCIsIFwiMDAwODAxMDBcIiwgXCIwMDA4MDEwMlwiLCBcIjAwMDgwMTAzXCIsIFwiMDAwODAxMDRcIiwgXCIwMDA4MDEwNVwiLCBcIjAwMDgwMTA2XCIsIFwiMDAwODAxMDdcIiwgXCIwMDA4MDEwQlwiLCBcIjAwMDgwMTBEXCIsIFwiMDAwODAxMEZcIiwgXCIwMDA4MDExN1wiLCBcIjAwMDgwMTE4XCIsIFwiMDAwODAxMTlcIiwgXCIwMDA4MDEyMFwiLCBcIjAwMDgwMTIxXCIsIFwiMDAwODAxMjJcIiwgXCIwMDA4MTAzMFwiLCBcIjAwMDgxMDMyXCIsIFwiMDAwODEwNDhcIiwgXCIwMDA4MTA0OVwiLCBcIjAwMDgxMDYwXCIsIFwiMDAwODEwNjJcIiwgXCIwMDA4MTExMFwiLCBcIjAwMDgxMTUwXCIsIFwiMDAwODExNTVcIiwgXCIwMDIwMDAwRFwiLCBcIjAwMjAwMDEwXCIsIFwiMDAzMjEwMzRcIiwgXCIwMDQwMDAzMVwiLCBcIjAwNDAwMDMyXCIsIFwiMDA0MDAwMzNcIiwgXCIwMDQwMTAxMlwiLCBcIjAwNDAxMTAxXCIsIFwiMDA0MDExMDJcIiwgXCIwMDQwMTEwM1wiLCBcIjAwNDAxMTA0XCIsIC8vIENsaW5pY2FsIFRyaWFsIFN1YmplY3RcblwiMDAxMjAwMTBcIiwgXCIwMDEyMDAyMFwiLCBcIjAwMTIwMDIxXCIsIFwiMDAxMjAwMzBcIiwgXCIwMDEyMDAzMVwiLCBcIjAwMTIwMDQwXCIsIFwiMDAxMjAwNDJcIiwgXCIwMDEyMDA4MVwiLCBcIjAwMTIwMDgyXCIsIC8vIENsaW5pY2FsIFRyaWFsIFN0dWR5XG5cIjAwMTIwMDIwXCIsIFwiMDAxMjAwNTBcIiwgXCIwMDEyMDA1MVwiLCBcIjAwMTIwMDUyXCIsIFwiMDAxMjAwNTNcIiwgXCIwMDEyMDA4M1wiLCBcIjAwMTIwMDg0XCIsIFwiMDAxMjAwODVcIl07XG5cbnZhciBDb21wcmVoZW5zaXZlM0RTUiA9IGZ1bmN0aW9uIENvbXByZWhlbnNpdmUzRFNSKG9wdGlvbnMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcHJlaGVuc2l2ZTNEU1IpO1xuXG4gIGlmIChvcHRpb25zLmV2aWRlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2V2aWRlbmNlJyBpcyByZXF1aXJlZCBmb3IgQ29tcHJlaGVuc2l2ZTNEU1IuXCIpO1xuICB9XG5cbiAgaWYgKCEoX3R5cGVvZihvcHRpb25zLmV2aWRlbmNlKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLmV2aWRlbmNlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdldmlkZW5jZScgbXVzdCBoYXZlIHR5cGUgQXJyYXkuXCIpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZXZpZGVuY2UubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdldmlkZW5jZScgbXVzdCBoYXZlIG5vbi16ZXJvIGxlbmd0aC5cIik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ2NvbnRlbnQnIGlzIHJlcXVpcmVkIGZvciBDb21wcmVoZW5zaXZlM0RTUi5cIik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zZXJpZXNJbnN0YW5jZVVJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzZXJpZXNJbnN0YW5jZVVJRCcgaXMgcmVxdWlyZWQgZm9yIENvbXByZWhlbnNpdmUzRFNSLlwiKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnNlcmllc051bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzZXJpZXNOdW1iZXInIGlzIHJlcXVpcmVkIGZvciBDb21wcmVoZW5zaXZlM0RTUi5cIik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zZXJpZXNEZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uICdzZXJpZXNEZXNjcmlwdGlvbicgaXMgcmVxdWlyZWQgZm9yIENvbXByZWhlbnNpdmUzRFNSLlwiKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnNvcEluc3RhbmNlVUlEID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3NvcEluc3RhbmNlVUlEJyBpcyByZXF1aXJlZCBmb3IgQ29tcHJlaGVuc2l2ZTNEU1IuXCIpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaW5zdGFuY2VOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnaW5zdGFuY2VOdW1iZXInIGlzIHJlcXVpcmVkIGZvciBDb21wcmVoZW5zaXZlM0RTUi5cIik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5tYW51ZmFjdHVyZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbiAnbWFudWZhY3R1cmVyJyBpcyByZXF1aXJlZCBmb3IgQ29tcHJlaGVuc2l2ZTNEU1IuXCIpO1xuICB9XG5cbiAgdGhpcy5TT1BDbGFzc1VJRCA9IFwiMS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuODguMzRcIjtcbiAgdGhpcy5TT1BJbnN0YW5jZVVJRCA9IG9wdGlvbnMuc29wSW5zdGFuY2VVSUQ7XG4gIHRoaXMuTW9kYWxpdHkgPSBcIlNSXCI7XG4gIHRoaXMuU2VyaWVzRGVzY3JpcHRpb24gPSBvcHRpb25zLnNlcmllc0Rlc2NyaXB0aW9uO1xuICB0aGlzLlNlcmllc0luc3RhbmNlVUlEID0gb3B0aW9ucy5zZXJpZXNJbnN0YW5jZVVJRDtcbiAgdGhpcy5TZXJpZXNOdW1iZXIgPSBvcHRpb25zLnNlcmllc051bWJlcjtcbiAgdGhpcy5JbnN0YW5jZU51bWJlciA9IG9wdGlvbnMuaW5zdGFuY2VOdW1iZXI7XG4gIHRoaXMuTWFudWZhY3R1cmVyID0gb3B0aW9ucy5tYW51ZmFjdHVyZXI7XG5cbiAgaWYgKG9wdGlvbnMuaW5zdGl0dXRpb25OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLkluc3RpdHV0aW9uTmFtZSA9IG9wdGlvbnMuaW5zdGl0dXRpb25OYW1lO1xuXG4gICAgaWYgKG9wdGlvbnMuaW5zdGl0dXRpb25hbERlcGFydG1lbnROYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuSW5zdGl0dXRpb25hbERlcGFydG1lbnROYW1lID0gb3B0aW9ucy5pbnN0aXR1dGlvbkRlcGFydG1lbnROYW1lO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLmlzQ29tcGxldGUpIHtcbiAgICB0aGlzLkNvbXBsZXRpb25GbGFnID0gXCJDT01QTEVURVwiO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuQ29tcGxldGlvbkZsYWcgPSBcIlBBUlRJQUxcIjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlzVmVyaWZpZWQpIHtcbiAgICBpZiAob3B0aW9ucy52ZXJpZnlpbmdPYnNlcnZlck5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmVyaWZ5aW5nIE9ic2VydmVyIE5hbWUgbXVzdCBiZSBzcGVjaWZpZWQgaWYgU1IgZG9jdW1lbnQgXCIgKyBcImhhcyBiZWVuIHZlcmlmaWVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy52ZXJpZnlpbmdPcmdhbml6YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmVyaWZ5aW5nIE9yZ2FuaXphdGlvbiBtdXN0IGJlIHNwZWNpZmllZCBpZiBTUiBkb2N1bWVudCBcIiArIFwiaGFzIGJlZW4gdmVyaWZpZWQuXCIpO1xuICAgIH1cblxuICAgIHRoaXMuVmVyaWZpY2F0aW9uRmxhZyA9IFwiVkVSSUZJRURcIjtcbiAgICB2YXIgb3ZzZXJ2ZXJfaXRlbSA9IHt9O1xuICAgIG92c2VydmVyX2l0ZW0uVmVyaWZ5aW5nT2JzZXJ2ZXJOYW1lID0gb3B0aW9ucy52ZXJpZnlpbmdPYnNlcnZlck5hbWU7XG4gICAgb3ZzZXJ2ZXJfaXRlbS5WZXJpZnlpbmdPcmdhbml6YXRpb24gPSBvcHRpb25zLnZlcmlmeWluZ09yZ2FuaXphdGlvbjtcbiAgICBvdnNlcnZlcl9pdGVtLlZlcmlmaWNhdGlvbkRhdGVUaW1lID0gRGljb21NZXRhRGljdGlvbmFyeS5kYXRlVGltZSgpO1xuICAgIHRoaXMuVmVyaWZ5aW5nT2JzZXJ2ZXJTZXF1ZW5jZSA9IFtvYnNlcnZlcl9pdGVtXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLlZlcmlmaWNhdGlvbkZsYWcgPSBcIlVOVkVSSUZJRURcIjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlzRmluYWwpIHtcbiAgICB0aGlzLlByZWxpbWluYXJ5RmxhZyA9IFwiRklOQUxcIjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLlByZWxpbWluYXJ5RmxhZyA9IFwiUFJFTElNSU5BUllcIjtcbiAgfVxuXG4gIHRoaXMuQ29udGVudERhdGUgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LmRhdGUoKTtcbiAgdGhpcy5Db250ZW50VGltZSA9IERpY29tTWV0YURpY3Rpb25hcnkudGltZSgpO1xuICBPYmplY3Qua2V5cyhvcHRpb25zLmNvbnRlbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICBfdGhpc1trZXl3b3JkXSA9IG9wdGlvbnMuY29udGVudFtrZXl3b3JkXTtcbiAgfSk7XG4gIHZhciBldmlkZW5jZUNvbGxlY3Rpb24gPSB7fTtcbiAgb3B0aW9ucy5ldmlkZW5jZS5mb3JFYWNoKGZ1bmN0aW9uIChldmlkZW5jZSkge1xuICAgIGlmIChldmlkZW5jZS5TdHVkeUluc3RhbmNlVUlEICE9PSBvcHRpb25zLmV2aWRlbmNlWzBdLlN0dWR5SW5zdGFuY2VVSUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZmVyZW5jZWQgZGF0YSBzZXRzIG11c3QgYWxsIGJlbG9uZyB0byB0aGUgc2FtZSBzdHVkeS5cIik7XG4gICAgfVxuXG4gICAgaWYgKCEoZXZpZGVuY2UuU2VyaWVzSW5zdGFuY2VVSUQgaW4gZXZpZGVuY2VDb2xsZWN0aW9uKSkge1xuICAgICAgZXZpZGVuY2VDb2xsZWN0aW9uW2V2aWRlbmNlLlNlcmllc0luc3RhbmNlVUlEXSA9IFtdO1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZUl0ZW0gPSB7fTtcbiAgICBpbnN0YW5jZUl0ZW0uUmVmZXJlbmNlZFNPUENsYXNzVUlEID0gZXZpZGVuY2UuU09QQ2xhc3NVSUQ7XG4gICAgaW5zdGFuY2VJdGVtLlJlZmVyZW5jZWRTT1BJbnN0YW5jZVVJRCA9IGV2aWRlbmNlLlNPUEluc3RhbmNlVUlEO1xuICAgIGV2aWRlbmNlQ29sbGVjdGlvbltldmlkZW5jZS5TZXJpZXNJbnN0YW5jZVVJRF0ucHVzaChpbnN0YW5jZUl0ZW0pO1xuICB9KTtcbiAgdmFyIGV2aWRlbmNlU3R1ZHlJdGVtID0ge307XG4gIGV2aWRlbmNlU3R1ZHlJdGVtLlN0dWR5SW5zdGFuY2VVSUQgPSBvcHRpb25zLmV2aWRlbmNlWzBdLlN0dWR5SW5zdGFuY2VVSUQ7XG4gIGV2aWRlbmNlU3R1ZHlJdGVtLlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZSA9IFtdO1xuICBPYmplY3Qua2V5cyhldmlkZW5jZUNvbGxlY3Rpb24pLmZvckVhY2goZnVuY3Rpb24gKHNlcmllc0luc3RhbmNlVUlEKSB7XG4gICAgdmFyIHNlcmllc0l0ZW0gPSB7fTtcbiAgICBzZXJpZXNJdGVtLlNlcmllc0luc3RhbmNlVUlEID0gc2VyaWVzSW5zdGFuY2VVSUQ7XG4gICAgc2VyaWVzSXRlbS5SZWZlcmVuY2VkU09QU2VxdWVuY2UgPSBldmlkZW5jZUNvbGxlY3Rpb25bc2VyaWVzSW5zdGFuY2VVSURdO1xuICAgIGV2aWRlbmNlU3R1ZHlJdGVtLlJlZmVyZW5jZWRTZXJpZXNTZXF1ZW5jZS5wdXNoKHNlcmllc0l0ZW0pO1xuICB9KTtcblxuICBpZiAob3B0aW9ucy5yZXF1ZXN0ZWRQcm9jZWR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoIShfdHlwZW9mKG9wdGlvbnMucmVxdWVzdGVkUHJvY2VkdXJlcykgPT09IFwib2JqZWN0XCIgfHwgb3B0aW9ucy5yZXF1ZXN0ZWRQcm9jZWR1cmVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3JlcXVlc3RlZFByb2NlZHVyZXMnIG11c3QgaGF2ZSB0eXBlIEFycmF5LlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLlJlZmVyZW5jZWRSZXF1ZXN0U2VxdWVuY2UgPSBfY29uc3RydWN0KENvbnRlbnRTZXF1ZW5jZSwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMucmVxdWVzdGVkUHJvY2VkdXJlcykpO1xuICAgIHRoaXMuQ3VycmVudFJlcXVlc3RlZFByb2NlZHVyZUV2aWRlbmNlU2VxdWVuY2UgPSBbZXZpZGVuY2VTdHVkeUl0ZW1dO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuUGVydGluZW50T3RoZXJFdmlkZW5jZVNlcXVlbmNlID0gW2V2aWRlbmNlU3R1ZHlJdGVtXTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnByZXZpb3VzVmVyc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwcmVDb2xsZWN0aW9uID0ge307XG4gICAgb3B0aW9ucy5wcmV2aW91c1ZlcnNpb25zLmZvckVhY2goZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgIGlmICh2ZXJzaW9uLlN0dWR5SW5zdGFuY2VVSUQgIT0gb3B0aW9ucy5ldmlkZW5jZVswXS5TdHVkeUluc3RhbmNlVUlEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByZXZpb3VzIHZlcnNpb24gZGF0YSBzZXRzIG11c3QgYmVsb25nIHRvIHRoZSBzYW1lIHN0dWR5LlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluc3RhbmNlSXRlbSA9IHt9O1xuICAgICAgaW5zdGFuY2VJdGVtLlJlZmVyZW5jZWRTT1BDbGFzc1VJRCA9IHZlcnNpb24uU09QQ2xhc3NVSUQ7XG4gICAgICBpbnN0YW5jZUl0ZW0uUmVmZXJlbmNlZFNPUEluc3RhbmNlVUlEID0gdmVyc2lvbi5TT1BJbnN0YW5jZVVJRDtcbiAgICAgIHByZUNvbGxlY3Rpb25bdmVyc2lvbi5TZXJpZXNJbnN0YW5jZVVJRF0ucHVzaChpbnN0YW5jZUl0ZW0pO1xuICAgIH0pO1xuICAgIHZhciBwcmVTdHVkeUl0ZW0gPSB7fTtcbiAgICBwcmVTdHVkeUl0ZW0uU3R1ZHlJbnN0YW5jZVVJRCA9IG9wdGlvbnMucHJldmlvdXNWZXJzaW9uc1swXS5TdHVkeUluc3RhbmNlVUlEO1xuICAgIHByZVN0dWR5SXRlbS5SZWZlcmVuY2VkU2VyaWVzU2VxdWVuY2UgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhwcmVDb2xsZWN0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChzZXJpZXNJbnN0YW5jZVVJRCkge1xuICAgICAgdmFyIHNlcmllc0l0ZW0gPSB7fTtcbiAgICAgIHNlcmllc0l0ZW0uU2VyaWVzSW5zdGFuY2VVSUQgPSBzZXJpZXNJbnN0YW5jZVVJRDtcbiAgICAgIHNlcmllc0l0ZW0uUmVmZXJlbmNlZFNPUFNlcXVlbmNlID0gcHJlQ29sbGVjdGlvbltzZXJpZXNJbnN0YW5jZVVJRF07XG4gICAgICBwcmVTdHVkeUl0ZW0uUmVmZXJlbmNlZFNlcmllc1NlcXVlbmNlLnB1c2goc2VyaWVzSXRlbSk7XG4gICAgfSk7XG4gICAgdGhpcy5QcmVkZWNlc3NvckRvY3VtZW50c1NlcXVlbmNlID0gW3ByZVN0dWR5SXRlbV07XG4gIH1cblxuICBpZiAob3B0aW9ucy5wZXJmb3JtZWRQcm9jZWR1cmVDb2RlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCEoX3R5cGVvZihvcHRpb25zLnBlcmZvcm1lZFByb2NlZHVyZUNvZGVzKSA9PT0gXCJvYmplY3RcIiB8fCBvcHRpb25zLnBlcmZvcm1lZFByb2NlZHVyZUNvZGVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gJ3BlcmZvcm1lZFByb2NlZHVyZUNvZGVzJyBtdXN0IGhhdmUgdHlwZSBBcnJheS5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5QZXJmb3JtZWRQcm9jZWR1cmVDb2RlU2VxdWVuY2UgPSBfY29uc3RydWN0KENvbnRlbnRTZXF1ZW5jZSwgX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMucGVyZm9ybWVkUHJvY2VkdXJlQ29kZXMpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLlBlcmZvcm1lZFByb2NlZHVyZUNvZGVTZXF1ZW5jZSA9IFtdO1xuICB9XG5cbiAgdGhpcy5SZWZlcmVuY2VkUGVyZm9ybWVkUHJvY2VkdXJlU3RlcFNlcXVlbmNlID0gW107XG5cbiAgX2F0dHJpYnV0ZXNUb0luY2x1ZGUuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgdmFyIGtleSA9IERpY29tTWV0YURpY3Rpb25hcnkucHVuY3R1YXRlVGFnKHRhZyk7XG4gICAgdmFyIGVsZW1lbnQgPSBEaWNvbU1ldGFEaWN0aW9uYXJ5LmRpY3Rpb25hcnlba2V5XTtcblxuICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBrZXl3b3JkID0gZWxlbWVudC5uYW1lO1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9ucy5ldmlkZW5jZVswXVtrZXl3b3JkXTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3RoaXNba2V5d29yZF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGRvY3VtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0Q29tcHJlaGVuc2l2ZTNEU1I6IENvbXByZWhlbnNpdmUzRFNSXG59KTtcblxudmFyIHNyID0ge1xuICBjb2Rpbmc6IGNvZGluZyxcbiAgY29udGVudEl0ZW1zOiBjb250ZW50SXRlbXMsXG4gIGRvY3VtZW50czogZG9jdW1lbnRzLFxuICB0ZW1wbGF0ZXM6IHRlbXBsYXRlcyxcbiAgdmFsdWVUeXBlczogdmFsdWVUeXBlc1xufTtcblxudmFyIGRhdGEgPSB7XG4gIEJpdEFycmF5OiBCaXRBcnJheSxcbiAgUmVhZEJ1ZmZlclN0cmVhbTogUmVhZEJ1ZmZlclN0cmVhbSxcbiAgV3JpdGVCdWZmZXJTdHJlYW06IFdyaXRlQnVmZmVyU3RyZWFtLFxuICBEaWNvbURpY3Q6IERpY29tRGljdCxcbiAgRGljb21NZXNzYWdlOiBEaWNvbU1lc3NhZ2UsXG4gIERpY29tTWV0YURpY3Rpb25hcnk6IERpY29tTWV0YURpY3Rpb25hcnksXG4gIFRhZzogVGFnLFxuICBWYWx1ZVJlcHJlc2VudGF0aW9uOiBWYWx1ZVJlcHJlc2VudGF0aW9uLFxuICBDb2xvcnM6IENvbG9ycyxcbiAgZGF0YXNldFRvRGljdDogZGF0YXNldFRvRGljdCxcbiAgZGF0YXNldFRvQnVmZmVyOiBkYXRhc2V0VG9CdWZmZXIsXG4gIGRhdGFzZXRUb0Jsb2I6IGRhdGFzZXRUb0Jsb2Jcbn07XG52YXIgZGVyaXZhdGlvbnMgPSB7XG4gIERlcml2ZWREYXRhc2V0OiBEZXJpdmVkRGF0YXNldCxcbiAgRGVyaXZlZFBpeGVsczogRGVyaXZlZFBpeGVscyxcbiAgRGVyaXZlZEltYWdlOiBEZXJpdmVkSW1hZ2UsXG4gIFNlZ21lbnRhdGlvbjogU2VnbWVudGF0aW9uLFxuICBTdHJ1Y3R1cmVkUmVwb3J0OiBTdHJ1Y3R1cmVkUmVwb3J0LFxuICBQYXJhbWV0cmljTWFwOiBQYXJhbWV0cmljTWFwXG59O1xudmFyIG5vcm1hbGl6ZXJzID0ge1xuICBOb3JtYWxpemVyOiBOb3JtYWxpemVyLFxuICBJbWFnZU5vcm1hbGl6ZXI6IEltYWdlTm9ybWFsaXplcixcbiAgTVJJbWFnZU5vcm1hbGl6ZXI6IE1SSW1hZ2VOb3JtYWxpemVyLFxuICBFbmhhbmNlZE1SSW1hZ2VOb3JtYWxpemVyOiBFbmhhbmNlZE1SSW1hZ2VOb3JtYWxpemVyLFxuICBFbmhhbmNlZFVTVm9sdW1lTm9ybWFsaXplcjogRW5oYW5jZWRVU1ZvbHVtZU5vcm1hbGl6ZXIsXG4gIENUSW1hZ2VOb3JtYWxpemVyOiBDVEltYWdlTm9ybWFsaXplcixcbiAgUEVUSW1hZ2VOb3JtYWxpemVyOiBQRVRJbWFnZU5vcm1hbGl6ZXIsXG4gIFNFR0ltYWdlTm9ybWFsaXplcjogU0VHSW1hZ2VOb3JtYWxpemVyLFxuICBEU1JOb3JtYWxpemVyOiBEU1JOb3JtYWxpemVyXG59O1xuXG5leHBvcnQgeyBkYXRhLCBkZXJpdmF0aW9ucywgbm9ybWFsaXplcnMsIGFkYXB0ZXJzLCB1dGlsaXRpZXMsIERJQ09NV0VCLCBzciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGNtamUuZXMuanMubWFwXG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgZ2wtbWF0cml4IC0gSGlnaCBwZXJmb3JtYW5jZSBtYXRyaXggYW5kIHZlY3RvciBvcGVyYXRpb25zXG4gKiBAYXV0aG9yIEJyYW5kb24gSm9uZXNcbiAqIEBhdXRob3IgQ29saW4gTWFjS2VuemllIElWXG4gKiBAdmVyc2lvbiAyLjMuMlxuICovXG5cbi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG4vLyBFTkQgSEVBREVSXG5cbmV4cG9ydHMuZ2xNYXRyaXggPSByZXF1aXJlKFwiLi9nbC1tYXRyaXgvY29tbW9uLmpzXCIpO1xuZXhwb3J0cy5tYXQyID0gcmVxdWlyZShcIi4vZ2wtbWF0cml4L21hdDIuanNcIik7XG5leHBvcnRzLm1hdDJkID0gcmVxdWlyZShcIi4vZ2wtbWF0cml4L21hdDJkLmpzXCIpO1xuZXhwb3J0cy5tYXQzID0gcmVxdWlyZShcIi4vZ2wtbWF0cml4L21hdDMuanNcIik7XG5leHBvcnRzLm1hdDQgPSByZXF1aXJlKFwiLi9nbC1tYXRyaXgvbWF0NC5qc1wiKTtcbmV4cG9ydHMucXVhdCA9IHJlcXVpcmUoXCIuL2dsLW1hdHJpeC9xdWF0LmpzXCIpO1xuZXhwb3J0cy52ZWMyID0gcmVxdWlyZShcIi4vZ2wtbWF0cml4L3ZlYzIuanNcIik7XG5leHBvcnRzLnZlYzMgPSByZXF1aXJlKFwiLi9nbC1tYXRyaXgvdmVjMy5qc1wiKTtcbmV4cG9ydHMudmVjNCA9IHJlcXVpcmUoXCIuL2dsLW1hdHJpeC92ZWM0LmpzXCIpOyIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbi8qKlxuICogQGNsYXNzIENvbW1vbiB1dGlsaXRpZXNcbiAqIEBuYW1lIGdsTWF0cml4XG4gKi9cbnZhciBnbE1hdHJpeCA9IHt9O1xuXG4vLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xuZ2xNYXRyaXguRVBTSUxPTiA9IDAuMDAwMDAxO1xuZ2xNYXRyaXguQVJSQVlfVFlQRSA9ICh0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykgPyBGbG9hdDMyQXJyYXkgOiBBcnJheTtcbmdsTWF0cml4LlJBTkRPTSA9IE1hdGgucmFuZG9tO1xuZ2xNYXRyaXguRU5BQkxFX1NJTUQgPSBmYWxzZTtcblxuLy8gQ2FwYWJpbGl0eSBkZXRlY3Rpb25cbmdsTWF0cml4LlNJTURfQVZBSUxBQkxFID0gKGdsTWF0cml4LkFSUkFZX1RZUEUgPT09IEZsb2F0MzJBcnJheSkgJiYgKCdTSU1EJyBpbiB0aGlzKTtcbmdsTWF0cml4LlVTRV9TSU1EID0gZ2xNYXRyaXguRU5BQkxFX1NJTUQgJiYgZ2xNYXRyaXguU0lNRF9BVkFJTEFCTEU7XG5cbi8qKlxuICogU2V0cyB0aGUgdHlwZSBvZiBhcnJheSB1c2VkIHdoZW4gY3JlYXRpbmcgbmV3IHZlY3RvcnMgYW5kIG1hdHJpY2VzXG4gKlxuICogQHBhcmFtIHtUeXBlfSB0eXBlIEFycmF5IHR5cGUsIHN1Y2ggYXMgRmxvYXQzMkFycmF5IG9yIEFycmF5XG4gKi9cbmdsTWF0cml4LnNldE1hdHJpeEFycmF5VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBnbE1hdHJpeC5BUlJBWV9UWVBFID0gdHlwZTtcbn1cblxudmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XG5cbi8qKlxuKiBDb252ZXJ0IERlZ3JlZSBUbyBSYWRpYW5cbipcbiogQHBhcmFtIHtOdW1iZXJ9IEFuZ2xlIGluIERlZ3JlZXNcbiovXG5nbE1hdHJpeC50b1JhZGlhbiA9IGZ1bmN0aW9uKGEpe1xuICAgICByZXR1cm4gYSAqIGRlZ3JlZTtcbn1cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXG4gKiBvciByZWxhdGl2ZSB0b2xlcmFuY2Ugb2YgZ2xNYXRyaXguRVBTSUxPTiAoYW4gYWJzb2x1dGUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIHZhbHVlcyBsZXNzIFxuICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxuICogXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXG4gKiBAcGFyYW0ge051bWJlcn0gYiBUaGUgc2Vjb25kIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZ2xNYXRyaXguZXF1YWxzID0gZnVuY3Rpb24oYSwgYikge1xuXHRyZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdsTWF0cml4O1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxudmFyIGdsTWF0cml4ID0gcmVxdWlyZShcIi4vY29tbW9uLmpzXCIpO1xuXG4vKipcbiAqIEBjbGFzcyAyeDIgTWF0cml4XG4gKiBAbmFtZSBtYXQyXG4gKi9cbnZhciBtYXQyID0ge307XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQyXG4gKlxuICogQHJldHVybnMge21hdDJ9IGEgbmV3IDJ4MiBtYXRyaXhcbiAqL1xubWF0Mi5jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gICAgb3V0WzBdID0gMTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0Mn0gYSBuZXcgMngyIG1hdHJpeFxuICovXG5tYXQyLmNsb25lID0gZnVuY3Rpb24oYSkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQyIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbm1hdDIuY29weSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2V0IGEgbWF0MiB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5pZGVudGl0eSA9IGZ1bmN0aW9uKG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDIgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHJldHVybnMge21hdDJ9IG91dCBBIG5ldyAyeDIgbWF0cml4XG4gKi9cbm1hdDIuZnJvbVZhbHVlcyA9IGZ1bmN0aW9uKG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgICBvdXRbMF0gPSBtMDA7XG4gICAgb3V0WzFdID0gbTAxO1xuICAgIG91dFsyXSA9IG0xMDtcbiAgICBvdXRbM10gPSBtMTE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5zZXQgPSBmdW5jdGlvbihvdXQsIG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTEwO1xuICAgIG91dFszXSA9IG0xMTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi50cmFuc3Bvc2UgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgICB2YXIgYTEgPSBhWzFdO1xuICAgICAgICBvdXRbMV0gPSBhWzJdO1xuICAgICAgICBvdXRbMl0gPSBhMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICBvdXRbMV0gPSBhWzJdO1xuICAgICAgICBvdXRbMl0gPSBhWzFdO1xuICAgICAgICBvdXRbM10gPSBhWzNdO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5pbnZlcnQgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICB2YXIgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLFxuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICAgICAgZGV0ID0gYTAgKiBhMyAtIGEyICogYTE7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuICAgIFxuICAgIG91dFswXSA9ICBhMyAqIGRldDtcbiAgICBvdXRbMV0gPSAtYTEgKiBkZXQ7XG4gICAgb3V0WzJdID0gLWEyICogZGV0O1xuICAgIG91dFszXSA9ICBhMCAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5hZGpvaW50ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgLy8gQ2FjaGluZyB0aGlzIHZhbHVlIGlzIG5lc3NlY2FyeSBpZiBvdXQgPT0gYVxuICAgIHZhciBhMCA9IGFbMF07XG4gICAgb3V0WzBdID0gIGFbM107XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgb3V0WzJdID0gLWFbMl07XG4gICAgb3V0WzNdID0gIGEwO1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cbm1hdDIuZGV0ZXJtaW5hbnQgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBhWzBdICogYVszXSAtIGFbMl0gKiBhWzFdO1xufTtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQyJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbm1hdDIubXVsdGlwbHkgPSBmdW5jdGlvbiAob3V0LCBhLCBiKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXTtcbiAgICB2YXIgYjAgPSBiWzBdLCBiMSA9IGJbMV0sIGIyID0gYlsyXSwgYjMgPSBiWzNdO1xuICAgIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xuICAgIG91dFsxXSA9IGExICogYjAgKyBhMyAqIGIxO1xuICAgIG91dFsyXSA9IGEwICogYjIgKyBhMiAqIGIzO1xuICAgIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5tYXQyLm11bCA9IG1hdDIubXVsdGlwbHk7XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdDIgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5yb3RhdGUgPSBmdW5jdGlvbiAob3V0LCBhLCByYWQpIHtcbiAgICB2YXIgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLFxuICAgICAgICBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgb3V0WzBdID0gYTAgKiAgYyArIGEyICogcztcbiAgICBvdXRbMV0gPSBhMSAqICBjICsgYTMgKiBzO1xuICAgIG91dFsyXSA9IGEwICogLXMgKyBhMiAqIGM7XG4gICAgb3V0WzNdID0gYTEgKiAtcyArIGEzICogYztcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDIgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICoqL1xubWF0Mi5zY2FsZSA9IGZ1bmN0aW9uKG91dCwgYSwgdikge1xuICAgIHZhciBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM10sXG4gICAgICAgIHYwID0gdlswXSwgdjEgPSB2WzFdO1xuICAgIG91dFswXSA9IGEwICogdjA7XG4gICAgb3V0WzFdID0gYTEgKiB2MDtcbiAgICBvdXRbMl0gPSBhMiAqIHYxO1xuICAgIG91dFszXSA9IGEzICogdjE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQyLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDIucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgbWF0MiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5mcm9tUm90YXRpb24gPSBmdW5jdGlvbihvdXQsIHJhZCkge1xuICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgb3V0WzBdID0gYztcbiAgICBvdXRbMV0gPSBzO1xuICAgIG91dFsyXSA9IC1zO1xuICAgIG91dFszXSA9IGM7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0Mi5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7dmVjMn0gdiBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5tYXQyLmZyb21TY2FsaW5nID0gZnVuY3Rpb24ob3V0LCB2KSB7XG4gICAgb3V0WzBdID0gdlswXTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gdlsxXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBtYXQgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xubWF0Mi5zdHIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAnbWF0MignICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcpJztcbn07XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cbm1hdDIuZnJvYiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuKE1hdGguc3FydChNYXRoLnBvdyhhWzBdLCAyKSArIE1hdGgucG93KGFbMV0sIDIpICsgTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSkpXG59O1xuXG4vKipcbiAqIFJldHVybnMgTCwgRCBhbmQgVSBtYXRyaWNlcyAoTG93ZXIgdHJpYW5ndWxhciwgRGlhZ29uYWwgYW5kIFVwcGVyIHRyaWFuZ3VsYXIpIGJ5IGZhY3Rvcml6aW5nIHRoZSBpbnB1dCBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gTCB0aGUgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXggXG4gKiBAcGFyYW0ge21hdDJ9IEQgdGhlIGRpYWdvbmFsIG1hdHJpeCBcbiAqIEBwYXJhbSB7bWF0Mn0gVSB0aGUgdXBwZXIgdHJpYW5ndWxhciBtYXRyaXggXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGlucHV0IG1hdHJpeCB0byBmYWN0b3JpemVcbiAqL1xuXG5tYXQyLkxEVSA9IGZ1bmN0aW9uIChMLCBELCBVLCBhKSB7IFxuICAgIExbMl0gPSBhWzJdL2FbMF07IFxuICAgIFVbMF0gPSBhWzBdOyBcbiAgICBVWzFdID0gYVsxXTsgXG4gICAgVVszXSA9IGFbM10gLSBMWzJdICogVVsxXTsgXG4gICAgcmV0dXJuIFtMLCBELCBVXTsgICAgICAgXG59OyBcblxuLyoqXG4gKiBBZGRzIHR3byBtYXQyJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbm1hdDIuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbm1hdDIuc3VidHJhY3QgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xubWF0Mi5zdWIgPSBtYXQyLnN1YnRyYWN0O1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xubWF0Mi5leGFjdEVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM107XG59O1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xubWF0Mi5lcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM107XG4gICAgdmFyIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXTtcbiAgICByZXR1cm4gKE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkpO1xufTtcblxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xubWF0Mi5tdWx0aXBseVNjYWxhciA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDIncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbm1hdDIubXVsdGlwbHlTY2FsYXJBbmRBZGQgPSBmdW5jdGlvbihvdXQsIGEsIGIsIHNjYWxlKSB7XG4gICAgb3V0WzBdID0gYVswXSArIChiWzBdICogc2NhbGUpO1xuICAgIG91dFsxXSA9IGFbMV0gKyAoYlsxXSAqIHNjYWxlKTtcbiAgICBvdXRbMl0gPSBhWzJdICsgKGJbMl0gKiBzY2FsZSk7XG4gICAgb3V0WzNdID0gYVszXSArIChiWzNdICogc2NhbGUpO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdDI7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEJyYW5kb24gSm9uZXMsIENvbGluIE1hY0tlbnppZSBJVi5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLiAqL1xuXG52YXIgZ2xNYXRyaXggPSByZXF1aXJlKFwiLi9jb21tb24uanNcIik7XG5cbi8qKlxuICogQGNsYXNzIDJ4MyBNYXRyaXhcbiAqIEBuYW1lIG1hdDJkXG4gKiBcbiAqIEBkZXNjcmlwdGlvbiBcbiAqIEEgbWF0MmQgY29udGFpbnMgc2l4IGVsZW1lbnRzIGRlZmluZWQgYXM6XG4gKiA8cHJlPlxuICogW2EsIGMsIHR4LFxuICogIGIsIGQsIHR5XVxuICogPC9wcmU+XG4gKiBUaGlzIGlzIGEgc2hvcnQgZm9ybSBmb3IgdGhlIDN4MyBtYXRyaXg6XG4gKiA8cHJlPlxuICogW2EsIGMsIHR4LFxuICogIGIsIGQsIHR5LFxuICogIDAsIDAsIDFdXG4gKiA8L3ByZT5cbiAqIFRoZSBsYXN0IHJvdyBpcyBpZ25vcmVkIHNvIHRoZSBhcnJheSBpcyBzaG9ydGVyIGFuZCBvcGVyYXRpb25zIGFyZSBmYXN0ZXIuXG4gKi9cbnZhciBtYXQyZCA9IHt9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MmRcbiAqXG4gKiBAcmV0dXJucyB7bWF0MmR9IGEgbmV3IDJ4MyBtYXRyaXhcbiAqL1xubWF0MmQuY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDE7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MmQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XG4gKi9cbm1hdDJkLmNsb25lID0gZnVuY3Rpb24oYSkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MmQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xubWF0MmQuY29weSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNldCBhIG1hdDJkIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbm1hdDJkLmlkZW50aXR5ID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgb3V0WzBdID0gMTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMTtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDJkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIENvbXBvbmVudCBBIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgQ29tcG9uZW50IEIgKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gYyBDb21wb25lbnQgQyAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBkIENvbXBvbmVudCBEIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IHR4IENvbXBvbmVudCBUWCAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eSBDb21wb25lbnQgVFkgKGluZGV4IDUpXG4gKiBAcmV0dXJucyB7bWF0MmR9IEEgbmV3IG1hdDJkXG4gKi9cbm1hdDJkLmZyb21WYWx1ZXMgPSBmdW5jdGlvbihhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNik7XG4gICAgb3V0WzBdID0gYTtcbiAgICBvdXRbMV0gPSBiO1xuICAgIG91dFsyXSA9IGM7XG4gICAgb3V0WzNdID0gZDtcbiAgICBvdXRbNF0gPSB0eDtcbiAgICBvdXRbNV0gPSB0eTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQyZCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIENvbXBvbmVudCBCIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IGMgQ29tcG9uZW50IEMgKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eCBDb21wb25lbnQgVFggKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gdHkgQ29tcG9uZW50IFRZIChpbmRleCA1KVxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xubWF0MmQuc2V0ID0gZnVuY3Rpb24ob3V0LCBhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICBvdXRbMF0gPSBhO1xuICAgIG91dFsxXSA9IGI7XG4gICAgb3V0WzJdID0gYztcbiAgICBvdXRbM10gPSBkO1xuICAgIG91dFs0XSA9IHR4O1xuICAgIG91dFs1XSA9IHR5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEludmVydHMgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xubWF0MmQuaW52ZXJ0ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgdmFyIGFhID0gYVswXSwgYWIgPSBhWzFdLCBhYyA9IGFbMl0sIGFkID0gYVszXSxcbiAgICAgICAgYXR4ID0gYVs0XSwgYXR5ID0gYVs1XTtcblxuICAgIHZhciBkZXQgPSBhYSAqIGFkIC0gYWIgKiBhYztcbiAgICBpZighZGV0KXtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IGFkICogZGV0O1xuICAgIG91dFsxXSA9IC1hYiAqIGRldDtcbiAgICBvdXRbMl0gPSAtYWMgKiBkZXQ7XG4gICAgb3V0WzNdID0gYWEgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGFjICogYXR5IC0gYWQgKiBhdHgpICogZGV0O1xuICAgIG91dFs1XSA9IChhYiAqIGF0eCAtIGFhICogYXR5KSAqIGRldDtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5tYXQyZC5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsxXSAqIGFbMl07XG59O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDJkJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5tYXQyZC5tdWx0aXBseSA9IGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcbiAgICB2YXIgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLCBhNCA9IGFbNF0sIGE1ID0gYVs1XSxcbiAgICAgICAgYjAgPSBiWzBdLCBiMSA9IGJbMV0sIGIyID0gYlsyXSwgYjMgPSBiWzNdLCBiNCA9IGJbNF0sIGI1ID0gYls1XTtcbiAgICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcbiAgICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcbiAgICBvdXRbMl0gPSBhMCAqIGIyICsgYTIgKiBiMztcbiAgICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcbiAgICBvdXRbNF0gPSBhMCAqIGI0ICsgYTIgKiBiNSArIGE0O1xuICAgIG91dFs1XSA9IGExICogYjQgKyBhMyAqIGI1ICsgYTU7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQyZC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5tYXQyZC5tdWwgPSBtYXQyZC5tdWx0aXBseTtcblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MmQgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xubWF0MmQucm90YXRlID0gZnVuY3Rpb24gKG91dCwgYSwgcmFkKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV0sXG4gICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgICBvdXRbMF0gPSBhMCAqICBjICsgYTIgKiBzO1xuICAgIG91dFsxXSA9IGExICogIGMgKyBhMyAqIHM7XG4gICAgb3V0WzJdID0gYTAgKiAtcyArIGEyICogYztcbiAgICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xuICAgIG91dFs0XSA9IGE0O1xuICAgIG91dFs1XSA9IGE1O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MmQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICoqL1xubWF0MmQuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIHYpIHtcbiAgICB2YXIgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLCBhNCA9IGFbNF0sIGE1ID0gYVs1XSxcbiAgICAgICAgdjAgPSB2WzBdLCB2MSA9IHZbMV07XG4gICAgb3V0WzBdID0gYTAgKiB2MDtcbiAgICBvdXRbMV0gPSBhMSAqIHYwO1xuICAgIG91dFsyXSA9IGEyICogdjE7XG4gICAgb3V0WzNdID0gYTMgKiB2MTtcbiAgICBvdXRbNF0gPSBhNDtcbiAgICBvdXRbNV0gPSBhNTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBtYXQyZCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHRyYW5zbGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICoqL1xubWF0MmQudHJhbnNsYXRlID0gZnVuY3Rpb24ob3V0LCBhLCB2KSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV0sXG4gICAgICAgIHYwID0gdlswXSwgdjEgPSB2WzFdO1xuICAgIG91dFswXSA9IGEwO1xuICAgIG91dFsxXSA9IGExO1xuICAgIG91dFsyXSA9IGEyO1xuICAgIG91dFszXSA9IGEzO1xuICAgIG91dFs0XSA9IGEwICogdjAgKyBhMiAqIHYxICsgYTQ7XG4gICAgb3V0WzVdID0gYTEgKiB2MCArIGEzICogdjEgKyBhNTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDJkLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbm1hdDJkLmZyb21Sb3RhdGlvbiA9IGZ1bmN0aW9uKG91dCwgcmFkKSB7XG4gICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLCBjID0gTWF0aC5jb3MocmFkKTtcbiAgICBvdXRbMF0gPSBjO1xuICAgIG91dFsxXSA9IHM7XG4gICAgb3V0WzJdID0gLXM7XG4gICAgb3V0WzNdID0gYztcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDJkLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IG1hdDJkIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbm1hdDJkLmZyb21TY2FsaW5nID0gZnVuY3Rpb24ob3V0LCB2KSB7XG4gICAgb3V0WzBdID0gdlswXTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gdlsxXTtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyZC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7dmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbm1hdDJkLmZyb21UcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKG91dCwgdikge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDE7XG4gICAgb3V0WzRdID0gdlswXTtcbiAgICBvdXRbNV0gPSB2WzFdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHttYXQyZH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5tYXQyZC5zdHIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAnbWF0MmQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIFxuICAgICAgICAgICAgICAgICAgICBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcpJztcbn07XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xubWF0MmQuZnJvYiA9IGZ1bmN0aW9uIChhKSB7IFxuICAgIHJldHVybihNYXRoLnNxcnQoTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSArIE1hdGgucG93KGFbMl0sIDIpICsgTWF0aC5wb3coYVszXSwgMikgKyBNYXRoLnBvdyhhWzRdLCAyKSArIE1hdGgucG93KGFbNV0sIDIpICsgMSkpXG59OyBcblxuLyoqXG4gKiBBZGRzIHR3byBtYXQyZCdzXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xubWF0MmQuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5tYXQyZC5zdWJ0cmFjdCA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0MmQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xubWF0MmQuc3ViID0gbWF0MmQuc3VidHJhY3Q7XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbm1hdDJkLm11bHRpcGx5U2NhbGFyID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MmQncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5tYXQyZC5tdWx0aXBseVNjYWxhckFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICBvdXRbM10gPSBhWzNdICsgKGJbM10gKiBzY2FsZSk7XG4gICAgb3V0WzRdID0gYVs0XSArIChiWzRdICogc2NhbGUpO1xuICAgIG91dFs1XSA9IGFbNV0gKyAoYls1XSAqIHNjYWxlKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHttYXQyZH0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHttYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xubWF0MmQuZXhhY3RFcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbm1hdDJkLmVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV07XG4gICAgdmFyIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXSwgYjQgPSBiWzRdLCBiNSA9IGJbNV07XG4gICAgcmV0dXJuIChNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0MmQ7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEJyYW5kb24gSm9uZXMsIENvbGluIE1hY0tlbnppZSBJVi5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLiAqL1xuXG52YXIgZ2xNYXRyaXggPSByZXF1aXJlKFwiLi9jb21tb24uanNcIik7XG5cbi8qKlxuICogQGNsYXNzIDN4MyBNYXRyaXhcbiAqIEBuYW1lIG1hdDNcbiAqL1xudmFyIG1hdDMgPSB7fTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDNcbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxuICovXG5tYXQzLmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDE7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDb3BpZXMgdGhlIHVwcGVyLWxlZnQgM3gzIHZhbHVlcyBpbnRvIHRoZSBnaXZlbiBtYXQzLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgM3gzIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuZnJvbU1hdDQgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzRdO1xuICAgIG91dFs0XSA9IGFbNV07XG4gICAgb3V0WzVdID0gYVs2XTtcbiAgICBvdXRbNl0gPSBhWzhdO1xuICAgIG91dFs3XSA9IGFbOV07XG4gICAgb3V0WzhdID0gYVsxMF07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcbiAqL1xubWF0My5jbG9uZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My5jb3B5ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDMgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHJldHVybnMge21hdDN9IEEgbmV3IG1hdDNcbiAqL1xubWF0My5mcm9tVmFsdWVzID0gZnVuY3Rpb24obTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgICBvdXRbMF0gPSBtMDA7XG4gICAgb3V0WzFdID0gbTAxO1xuICAgIG91dFsyXSA9IG0wMjtcbiAgICBvdXRbM10gPSBtMTA7XG4gICAgb3V0WzRdID0gbTExO1xuICAgIG91dFs1XSA9IG0xMjtcbiAgICBvdXRbNl0gPSBtMjA7XG4gICAgb3V0WzddID0gbTIxO1xuICAgIG91dFs4XSA9IG0yMjtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5tYXQzLnNldCA9IGZ1bmN0aW9uKG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0xMDtcbiAgICBvdXRbNF0gPSBtMTE7XG4gICAgb3V0WzVdID0gbTEyO1xuICAgIG91dFs2XSA9IG0yMDtcbiAgICBvdXRbN10gPSBtMjE7XG4gICAgb3V0WzhdID0gbTIyO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNldCBhIG1hdDMgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuaWRlbnRpdHkgPSBmdW5jdGlvbihvdXQpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDE7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMudHJhbnNwb3NlID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGlmIChvdXQgPT09IGEpIHtcbiAgICAgICAgdmFyIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGExMiA9IGFbNV07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGEwMTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYTAyO1xuICAgICAgICBvdXRbN10gPSBhMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYVsxXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYVsyXTtcbiAgICAgICAgb3V0WzddID0gYVs1XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuaW52ZXJ0ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sIGExMSA9IGFbNF0sIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sIGEyMSA9IGFbN10sIGEyMiA9IGFbOF0sXG5cbiAgICAgICAgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxLFxuICAgICAgICBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwLFxuICAgICAgICBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjAsXG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgICAgICBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgICBpZiAoIWRldCkgeyBcbiAgICAgICAgcmV0dXJuIG51bGw7IFxuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSBiMDEgKiBkZXQ7XG4gICAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogZGV0O1xuICAgIG91dFszXSA9IGIxMSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgICBvdXRbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBkZXQ7XG4gICAgb3V0WzZdID0gYjIxICogZGV0O1xuICAgIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGRldDtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuYWRqb2ludCA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIHZhciBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLCBhMTEgPSBhWzRdLCBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLCBhMjEgPSBhWzddLCBhMjIgPSBhWzhdO1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGEyMiAtIGExMiAqIGEyMSk7XG4gICAgb3V0WzFdID0gKGEwMiAqIGEyMSAtIGEwMSAqIGEyMik7XG4gICAgb3V0WzJdID0gKGEwMSAqIGExMiAtIGEwMiAqIGExMSk7XG4gICAgb3V0WzNdID0gKGExMiAqIGEyMCAtIGExMCAqIGEyMik7XG4gICAgb3V0WzRdID0gKGEwMCAqIGEyMiAtIGEwMiAqIGEyMCk7XG4gICAgb3V0WzVdID0gKGEwMiAqIGExMCAtIGEwMCAqIGExMik7XG4gICAgb3V0WzZdID0gKGExMCAqIGEyMSAtIGExMSAqIGEyMCk7XG4gICAgb3V0WzddID0gKGEwMSAqIGEyMCAtIGEwMCAqIGEyMSk7XG4gICAgb3V0WzhdID0gKGEwMCAqIGExMSAtIGEwMSAqIGExMCk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cbm1hdDMuZGV0ZXJtaW5hbnQgPSBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLCBhMTEgPSBhWzRdLCBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLCBhMjEgPSBhWzddLCBhMjIgPSBhWzhdO1xuXG4gICAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG59O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My5tdWx0aXBseSA9IGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcbiAgICB2YXIgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSxcbiAgICAgICAgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XSxcbiAgICAgICAgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XSxcblxuICAgICAgICBiMDAgPSBiWzBdLCBiMDEgPSBiWzFdLCBiMDIgPSBiWzJdLFxuICAgICAgICBiMTAgPSBiWzNdLCBiMTEgPSBiWzRdLCBiMTIgPSBiWzVdLFxuICAgICAgICBiMjAgPSBiWzZdLCBiMjEgPSBiWzddLCBiMjIgPSBiWzhdO1xuXG4gICAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICAgIG91dFsxXSA9IGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMTtcbiAgICBvdXRbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjI7XG5cbiAgICBvdXRbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XG4gICAgb3V0WzRdID0gYjEwICogYTAxICsgYjExICogYTExICsgYjEyICogYTIxO1xuICAgIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcblxuICAgIG91dFs2XSA9IGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMDtcbiAgICBvdXRbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gICAgb3V0WzhdID0gYjIwICogYTAyICsgYjIxICogYTEyICsgYjIyICogYTIyO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0My5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5tYXQzLm11bCA9IG1hdDMubXVsdGlwbHk7XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My50cmFuc2xhdGUgPSBmdW5jdGlvbihvdXQsIGEsIHYpIHtcbiAgICB2YXIgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSxcbiAgICAgICAgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XSxcbiAgICAgICAgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XSxcbiAgICAgICAgeCA9IHZbMF0sIHkgPSB2WzFdO1xuXG4gICAgb3V0WzBdID0gYTAwO1xuICAgIG91dFsxXSA9IGEwMTtcbiAgICBvdXRbMl0gPSBhMDI7XG5cbiAgICBvdXRbM10gPSBhMTA7XG4gICAgb3V0WzRdID0gYTExO1xuICAgIG91dFs1XSA9IGExMjtcblxuICAgIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xuICAgIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xuICAgIG91dFs4XSA9IHggKiBhMDIgKyB5ICogYTEyICsgYTIyO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMucm90YXRlID0gZnVuY3Rpb24gKG91dCwgYSwgcmFkKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sIGExMSA9IGFbNF0sIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sIGEyMSA9IGFbN10sIGEyMiA9IGFbOF0sXG5cbiAgICAgICAgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYyAqIGEwMCArIHMgKiBhMTA7XG4gICAgb3V0WzFdID0gYyAqIGEwMSArIHMgKiBhMTE7XG4gICAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG5cbiAgICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcbiAgICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcbiAgICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcblxuICAgIG91dFs2XSA9IGEyMDtcbiAgICBvdXRbN10gPSBhMjE7XG4gICAgb3V0WzhdID0gYTIyO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5tYXQzLnNjYWxlID0gZnVuY3Rpb24ob3V0LCBhLCB2KSB7XG4gICAgdmFyIHggPSB2WzBdLCB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IHggKiBhWzBdO1xuICAgIG91dFsxXSA9IHggKiBhWzFdO1xuICAgIG91dFsyXSA9IHggKiBhWzJdO1xuXG4gICAgb3V0WzNdID0geSAqIGFbM107XG4gICAgb3V0WzRdID0geSAqIGFbNF07XG4gICAgb3V0WzVdID0geSAqIGFbNV07XG5cbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHt2ZWMyfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5tYXQzLmZyb21UcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKG91dCwgdikge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMTtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IHZbMF07XG4gICAgb3V0WzddID0gdlsxXTtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My5mcm9tUm90YXRpb24gPSBmdW5jdGlvbihvdXQsIHJhZCkge1xuICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKSwgYyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXRbMF0gPSBjO1xuICAgIG91dFsxXSA9IHM7XG4gICAgb3V0WzJdID0gMDtcblxuICAgIG91dFszXSA9IC1zO1xuICAgIG91dFs0XSA9IGM7XG4gICAgb3V0WzVdID0gMDtcblxuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My5mcm9tU2NhbGluZyA9IGZ1bmN0aW9uKG91dCwgdikge1xuICAgIG91dFswXSA9IHZbMF07XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuXG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSB2WzFdO1xuICAgIG91dFs1XSA9IDA7XG5cbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gY29weVxuICogQHJldHVybnMge21hdDN9IG91dFxuICoqL1xubWF0My5mcm9tTWF0MmQgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gMDtcblxuICAgIG91dFszXSA9IGFbMl07XG4gICAgb3V0WzRdID0gYVszXTtcbiAgICBvdXRbNV0gPSAwO1xuXG4gICAgb3V0WzZdID0gYVs0XTtcbiAgICBvdXRbN10gPSBhWzVdO1xuICAgIG91dFs4XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuKiBDYWxjdWxhdGVzIGEgM3gzIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4qXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4qXG4qIEByZXR1cm5zIHttYXQzfSBvdXRcbiovXG5tYXQzLmZyb21RdWF0ID0gZnVuY3Rpb24gKG91dCwgcSkge1xuICAgIHZhciB4ID0gcVswXSwgeSA9IHFbMV0sIHogPSBxWzJdLCB3ID0gcVszXSxcbiAgICAgICAgeDIgPSB4ICsgeCxcbiAgICAgICAgeTIgPSB5ICsgeSxcbiAgICAgICAgejIgPSB6ICsgeixcblxuICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgeXggPSB5ICogeDIsXG4gICAgICAgIHl5ID0geSAqIHkyLFxuICAgICAgICB6eCA9IHogKiB4MixcbiAgICAgICAgenkgPSB6ICogeTIsXG4gICAgICAgIHp6ID0geiAqIHoyLFxuICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgd3kgPSB3ICogeTIsXG4gICAgICAgIHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzNdID0geXggLSB3ejtcbiAgICBvdXRbNl0gPSB6eCArIHd5O1xuXG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbNF0gPSAxIC0geHggLSB6ejtcbiAgICBvdXRbN10gPSB6eSAtIHd4O1xuXG4gICAgb3V0WzJdID0genggLSB3eTtcbiAgICBvdXRbNV0gPSB6eSArIHd4O1xuICAgIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuKiBDYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XG4qXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiogQHBhcmFtIHttYXQ0fSBhIE1hdDQgdG8gZGVyaXZlIHRoZSBub3JtYWwgbWF0cml4IGZyb21cbipcbiogQHJldHVybnMge21hdDN9IG91dFxuKi9cbm1hdDMubm9ybWFsRnJvbU1hdDQgPSBmdW5jdGlvbiAob3V0LCBhKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM10sXG4gICAgICAgIGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN10sXG4gICAgICAgIGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXSxcbiAgICAgICAgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV0sXG5cbiAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxuICAgICAgICBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsXG4gICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCxcbiAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxuICAgICAgICBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsXG4gICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMixcbiAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxuICAgICAgICBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsXG4gICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCxcbiAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxuICAgICAgICBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsXG4gICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMixcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgICAgIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7IFxuICAgICAgICByZXR1cm4gbnVsbDsgXG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICAgIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzNdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG5cbiAgICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBtYXQgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xubWF0My5zdHIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAnbWF0MygnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgXG4gICAgICAgICAgICAgICAgICAgIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJywgJyArIFxuICAgICAgICAgICAgICAgICAgICBhWzZdICsgJywgJyArIGFbN10gKyAnLCAnICsgYVs4XSArICcpJztcbn07XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cbm1hdDMuZnJvYiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuKE1hdGguc3FydChNYXRoLnBvdyhhWzBdLCAyKSArIE1hdGgucG93KGFbMV0sIDIpICsgTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSArIE1hdGgucG93KGFbNF0sIDIpICsgTWF0aC5wb3coYVs1XSwgMikgKyBNYXRoLnBvdyhhWzZdLCAyKSArIE1hdGgucG93KGFbN10sIDIpICsgTWF0aC5wb3coYVs4XSwgMikpKVxufTtcblxuLyoqXG4gKiBBZGRzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbm1hdDMuc3VidHJhY3QgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDMuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xubWF0My5zdWIgPSBtYXQzLnN1YnRyYWN0O1xuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5tYXQzLm11bHRpcGx5U2NhbGFyID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xubWF0My5tdWx0aXBseVNjYWxhckFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICBvdXRbM10gPSBhWzNdICsgKGJbM10gKiBzY2FsZSk7XG4gICAgb3V0WzRdID0gYVs0XSArIChiWzRdICogc2NhbGUpO1xuICAgIG91dFs1XSA9IGFbNV0gKyAoYls1XSAqIHNjYWxlKTtcbiAgICBvdXRbNl0gPSBhWzZdICsgKGJbNl0gKiBzY2FsZSk7XG4gICAgb3V0WzddID0gYVs3XSArIChiWzddICogc2NhbGUpO1xuICAgIG91dFs4XSA9IGFbOF0gKyAoYls4XSAqIHNjYWxlKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLypcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xubWF0My5leGFjdEVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIFxuICAgICAgICAgICBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJlxuICAgICAgICAgICBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHttYXQzfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5tYXQzLmVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV0sIGE2ID0gYVs2XSwgYTcgPSBhWzddLCBhOCA9IGFbOF07XG4gICAgdmFyIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXSwgYjQgPSBiWzRdLCBiNSA9IGJbNV0sIGI2ID0gYVs2XSwgYjcgPSBiWzddLCBiOCA9IGJbOF07XG4gICAgcmV0dXJuIChNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhNyAtIGI3KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTgpLCBNYXRoLmFicyhiOCkpKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBtYXQzO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxudmFyIGdsTWF0cml4ID0gcmVxdWlyZShcIi4vY29tbW9uLmpzXCIpO1xuXG4vKipcbiAqIEBjbGFzcyA0eDQgTWF0cml4XG4gKiBAbmFtZSBtYXQ0XG4gKi9cbnZhciBtYXQ0ID0ge1xuICBzY2FsYXI6IHt9LFxuICBTSU1EOiB7fSxcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQ0XG4gKlxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xubWF0NC5jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAxO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDE7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xubWF0NC5jbG9uZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIG91dFs5XSA9IGFbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5jb3B5ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgb3V0WzldID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbWF0NCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTAzIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDMgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDUpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDYpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEzIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDMgcG9zaXRpb24gKGluZGV4IDcpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDgpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDkpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDEwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMyBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzAgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMTIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMxIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDEgcG9zaXRpb24gKGluZGV4IDEzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMiBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzMgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTUpXG4gKiBAcmV0dXJucyB7bWF0NH0gQSBuZXcgbWF0NFxuICovXG5tYXQ0LmZyb21WYWx1ZXMgPSBmdW5jdGlvbihtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0wMztcbiAgICBvdXRbNF0gPSBtMTA7XG4gICAgb3V0WzVdID0gbTExO1xuICAgIG91dFs2XSA9IG0xMjtcbiAgICBvdXRbN10gPSBtMTM7XG4gICAgb3V0WzhdID0gbTIwO1xuICAgIG91dFs5XSA9IG0yMTtcbiAgICBvdXRbMTBdID0gbTIyO1xuICAgIG91dFsxMV0gPSBtMjM7XG4gICAgb3V0WzEyXSA9IG0zMDtcbiAgICBvdXRbMTNdID0gbTMxO1xuICAgIG91dFsxNF0gPSBtMzI7XG4gICAgb3V0WzE1XSA9IG0zMztcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNldCA9IGZ1bmN0aW9uKG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgb3V0WzBdID0gbTAwO1xuICAgIG91dFsxXSA9IG0wMTtcbiAgICBvdXRbMl0gPSBtMDI7XG4gICAgb3V0WzNdID0gbTAzO1xuICAgIG91dFs0XSA9IG0xMDtcbiAgICBvdXRbNV0gPSBtMTE7XG4gICAgb3V0WzZdID0gbTEyO1xuICAgIG91dFs3XSA9IG0xMztcbiAgICBvdXRbOF0gPSBtMjA7XG4gICAgb3V0WzldID0gbTIxO1xuICAgIG91dFsxMF0gPSBtMjI7XG4gICAgb3V0WzExXSA9IG0yMztcbiAgICBvdXRbMTJdID0gbTMwO1xuICAgIG91dFsxM10gPSBtMzE7XG4gICAgb3V0WzE0XSA9IG0zMjtcbiAgICBvdXRbMTVdID0gbTMzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG5cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5pZGVudGl0eSA9IGZ1bmN0aW9uKG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAxO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDE7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0IG5vdCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNjYWxhci50cmFuc3Bvc2UgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgICB2YXIgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXSxcbiAgICAgICAgICAgIGExMiA9IGFbNl0sIGExMyA9IGFbN10sXG4gICAgICAgICAgICBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMV0gPSBhWzRdO1xuICAgICAgICBvdXRbMl0gPSBhWzhdO1xuICAgICAgICBvdXRbM10gPSBhWzEyXTtcbiAgICAgICAgb3V0WzRdID0gYTAxO1xuICAgICAgICBvdXRbNl0gPSBhWzldO1xuICAgICAgICBvdXRbN10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzhdID0gYTAyO1xuICAgICAgICBvdXRbOV0gPSBhMTI7XG4gICAgICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzEyXSA9IGEwMztcbiAgICAgICAgb3V0WzEzXSA9IGExMztcbiAgICAgICAgb3V0WzE0XSA9IGEyMztcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICBvdXRbMV0gPSBhWzRdO1xuICAgICAgICBvdXRbMl0gPSBhWzhdO1xuICAgICAgICBvdXRbM10gPSBhWzEyXTtcbiAgICAgICAgb3V0WzRdID0gYVsxXTtcbiAgICAgICAgb3V0WzVdID0gYVs1XTtcbiAgICAgICAgb3V0WzZdID0gYVs5XTtcbiAgICAgICAgb3V0WzddID0gYVsxM107XG4gICAgICAgIG91dFs4XSA9IGFbMl07XG4gICAgICAgIG91dFs5XSA9IGFbNl07XG4gICAgICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTJdID0gYVszXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbN107XG4gICAgICAgIG91dFsxNF0gPSBhWzExXTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQudHJhbnNwb3NlID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgdmFyIGEwLCBhMSwgYTIsIGEzLFxuICAgICAgICB0bXAwMSwgdG1wMjMsXG4gICAgICAgIG91dDAsIG91dDEsIG91dDIsIG91dDM7XG5cbiAgICBhMCA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYSwgMCk7XG4gICAgYTEgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDQpO1xuICAgIGEyID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCA4KTtcbiAgICBhMyA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYSwgMTIpO1xuXG4gICAgdG1wMDEgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKGEwLCBhMSwgMCwgMSwgNCwgNSk7XG4gICAgdG1wMjMgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKGEyLCBhMywgMCwgMSwgNCwgNSk7XG4gICAgb3V0MCAgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKHRtcDAxLCB0bXAyMywgMCwgMiwgNCwgNik7XG4gICAgb3V0MSAgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKHRtcDAxLCB0bXAyMywgMSwgMywgNSwgNyk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCAwLCAgb3V0MCk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCA0LCAgb3V0MSk7XG5cbiAgICB0bXAwMSA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUoYTAsIGExLCAyLCAzLCA2LCA3KTtcbiAgICB0bXAyMyA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUoYTIsIGEzLCAyLCAzLCA2LCA3KTtcbiAgICBvdXQyICA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUodG1wMDEsIHRtcDIzLCAwLCAyLCA0LCA2KTtcbiAgICBvdXQzICA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUodG1wMDEsIHRtcDIzLCAxLCAzLCA1LCA3KTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDgsICBvdXQyKTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDEyLCBvdXQzKTtcblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zcHNlIGEgbWF0NCB1c2luZyBTSU1EIGlmIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC50cmFuc3Bvc2UgPSBnbE1hdHJpeC5VU0VfU0lNRCA/IG1hdDQuU0lNRC50cmFuc3Bvc2UgOiBtYXQ0LnNjYWxhci50cmFuc3Bvc2U7XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDQgbm90IHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuc2NhbGFyLmludmVydCA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIHZhciBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLCBhMDMgPSBhWzNdLFxuICAgICAgICBhMTAgPSBhWzRdLCBhMTEgPSBhWzVdLCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddLFxuICAgICAgICBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV0sXG4gICAgICAgIGEzMCA9IGFbMTJdLCBhMzEgPSBhWzEzXSwgYTMyID0gYVsxNF0sIGEzMyA9IGFbMTVdLFxuXG4gICAgICAgIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMCxcbiAgICAgICAgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwLFxuICAgICAgICBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTAsXG4gICAgICAgIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMSxcbiAgICAgICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLFxuICAgICAgICBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTIsXG4gICAgICAgIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMCxcbiAgICAgICAgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwLFxuICAgICAgICBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzAsXG4gICAgICAgIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMSxcbiAgICAgICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLFxuICAgICAgICBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzIsXG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgICAgICBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQuaW52ZXJ0ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gIHZhciByb3cwLCByb3cxLCByb3cyLCByb3czLFxuICAgICAgdG1wMSxcbiAgICAgIG1pbm9yMCwgbWlub3IxLCBtaW5vcjIsIG1pbm9yMyxcbiAgICAgIGRldCxcbiAgICAgIGEwID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAwKSxcbiAgICAgIGExID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCA0KSxcbiAgICAgIGEyID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCA4KSxcbiAgICAgIGEzID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAxMik7XG5cbiAgLy8gQ29tcHV0ZSBtYXRyaXggYWRqdWdhdGVcbiAgdG1wMSA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUoYTAsIGExLCAwLCAxLCA0LCA1KTtcbiAgcm93MSA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUoYTIsIGEzLCAwLCAxLCA0LCA1KTtcbiAgcm93MCA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUodG1wMSwgcm93MSwgMCwgMiwgNCwgNik7XG4gIHJvdzEgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKHJvdzEsIHRtcDEsIDEsIDMsIDUsIDcpO1xuICB0bXAxID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZShhMCwgYTEsIDIsIDMsIDYsIDcpO1xuICByb3czID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZShhMiwgYTMsIDIsIDMsIDYsIDcpO1xuICByb3cyID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZSh0bXAxLCByb3czLCAwLCAyLCA0LCA2KTtcbiAgcm93MyA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUocm93MywgdG1wMSwgMSwgMywgNSwgNyk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MSwgdG1wMSk7XG4gIG1pbm9yMSA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCB0bXAxKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAyLCAzLCAwLCAxKTtcbiAgbWlub3IwID0gU0lNRC5GbG9hdDMyeDQuc3ViKFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCB0bXAxKSwgbWlub3IwKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3ViKFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCB0bXAxKSwgbWlub3IxKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZShtaW5vcjEsIDIsIDMsIDAsIDEpO1xuXG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCByb3cyKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAxLCAwLCAzLCAyKTtcbiAgbWlub3IwID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3czLCB0bXAxKSwgbWlub3IwKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHRtcDEpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IwLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSkpO1xuICBtaW5vcjMgPSBTSU1ELkZsb2F0MzJ4NC5zdWIoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHRtcDEpLCBtaW5vcjMpO1xuICBtaW5vcjMgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKG1pbm9yMywgMiwgMywgMCwgMSk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUocm93MSwgMiwgMywgMCwgMSksIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICByb3cyICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHJvdzIsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHRtcDEpLCBtaW5vcjApO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgdG1wMSk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMiwgMywgMCwgMSk7XG4gIG1pbm9yMCA9IFNJTUQuRmxvYXQzMng0LnN1YihtaW5vcjAsIFNJTUQuRmxvYXQzMng0Lm11bChyb3cyLCB0bXAxKSk7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUobWlub3IyLCAyLCAzLCAwLCAxKTtcblxuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgcm93MSk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMSwgMCwgMywgMik7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LmFkZChTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMyA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MiwgdG1wMSksIG1pbm9yMyk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMiwgMywgMCwgMSk7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMyA9IFNJTUQuRmxvYXQzMng0LnN1YihtaW5vcjMsIFNJTUQuRmxvYXQzMng0Lm11bChyb3cyLCB0bXAxKSk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICBtaW5vcjEgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IxLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MiwgdG1wMSkpO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzEsIHRtcDEpLCBtaW5vcjIpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjEgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHRtcDEpLCBtaW5vcjEpO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IyLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MSwgdG1wMSkpO1xuXG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCByb3cyKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAxLCAwLCAzLCAyKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3czLCB0bXAxKSwgbWlub3IxKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQuc3ViKG1pbm9yMywgU0lNRC5GbG9hdDMyeDQubXVsKHJvdzEsIHRtcDEpKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAyLCAzLCAwLCAxKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3ViKG1pbm9yMSwgU0lNRC5GbG9hdDMyeDQubXVsKHJvdzMsIHRtcDEpKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCB0bXAxKSwgbWlub3IzKTtcblxuICAvLyBDb21wdXRlIG1hdHJpeCBkZXRlcm1pbmFudFxuICBkZXQgICA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCBtaW5vcjApO1xuICBkZXQgICA9IFNJTUQuRmxvYXQzMng0LmFkZChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGRldCwgMiwgMywgMCwgMSksIGRldCk7XG4gIGRldCAgID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoZGV0LCAxLCAwLCAzLCAyKSwgZGV0KTtcbiAgdG1wMSAgPSBTSU1ELkZsb2F0MzJ4NC5yZWNpcHJvY2FsQXBwcm94aW1hdGlvbihkZXQpO1xuICBkZXQgICA9IFNJTUQuRmxvYXQzMng0LnN1YihcbiAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LmFkZCh0bXAxLCB0bXAxKSxcbiAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChkZXQsIFNJTUQuRmxvYXQzMng0Lm11bCh0bXAxLCB0bXAxKSkpO1xuICBkZXQgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoZGV0LCAwLCAwLCAwLCAwKTtcbiAgaWYgKCFkZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ29tcHV0ZSBtYXRyaXggaW52ZXJzZVxuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDAsICBTSU1ELkZsb2F0MzJ4NC5tdWwoZGV0LCBtaW5vcjApKTtcbiAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCA0LCAgU0lNRC5GbG9hdDMyeDQubXVsKGRldCwgbWlub3IxKSk7XG4gIFNJTUQuRmxvYXQzMng0LnN0b3JlKG91dCwgOCwgIFNJTUQuRmxvYXQzMng0Lm11bChkZXQsIG1pbm9yMikpO1xuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDEyLCBTSU1ELkZsb2F0MzJ4NC5tdWwoZGV0LCBtaW5vcjMpKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NCB1c2luZyBTSU1EIGlmIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5pbnZlcnQgPSBnbE1hdHJpeC5VU0VfU0lNRCA/IG1hdDQuU0lNRC5pbnZlcnQgOiBtYXQ0LnNjYWxhci5pbnZlcnQ7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQ0IG5vdCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNjYWxhci5hZGpvaW50ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM10sXG4gICAgICAgIGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN10sXG4gICAgICAgIGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXSxcbiAgICAgICAgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV07XG5cbiAgICBvdXRbMF0gID0gIChhMTEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICAgIG91dFsxXSAgPSAtKGEwMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSk7XG4gICAgb3V0WzJdICA9ICAoYTAxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTEgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgICBvdXRbM10gID0gLShhMDEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICAgIG91dFs0XSAgPSAtKGExMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSk7XG4gICAgb3V0WzVdICA9ICAoYTAwICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpKTtcbiAgICBvdXRbNl0gID0gLShhMDAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICAgIG91dFs3XSAgPSAgKGEwMCAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpIC0gYTEwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikgKyBhMjAgKiAoYTAyICogYTEzIC0gYTAzICogYTEyKSk7XG4gICAgb3V0WzhdICA9ICAoYTEwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMzIC0gYTEzICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjMgLSBhMTMgKiBhMjEpKTtcbiAgICBvdXRbOV0gID0gLShhMDAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkpO1xuICAgIG91dFsxMF0gPSAgKGEwMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMyAtIGEwMyAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKSk7XG4gICAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcbiAgICBvdXRbMTJdID0gLShhMTAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkpO1xuICAgIG91dFsxM10gPSAgKGEwMCAqIChhMjEgKiBhMzIgLSBhMjIgKiBhMzEpIC0gYTIwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKSk7XG4gICAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcbiAgICBvdXRbMTVdID0gIChhMDAgKiAoYTExICogYTIyIC0gYTEyICogYTIxKSAtIGExMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpICsgYTIwICogKGEwMSAqIGExMiAtIGEwMiAqIGExMSkpO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0NCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQuYWRqb2ludCA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICB2YXIgYTAsIGExLCBhMiwgYTM7XG4gIHZhciByb3cwLCByb3cxLCByb3cyLCByb3czO1xuICB2YXIgdG1wMTtcbiAgdmFyIG1pbm9yMCwgbWlub3IxLCBtaW5vcjIsIG1pbm9yMztcblxuICB2YXIgYTAgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDApO1xuICB2YXIgYTEgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDQpO1xuICB2YXIgYTIgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDgpO1xuICB2YXIgYTMgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDEyKTtcblxuICAvLyBUcmFuc3Bvc2UgdGhlIHNvdXJjZSBtYXRyaXguICBTb3J0IG9mLiAgTm90IGEgdHJ1ZSB0cmFuc3Bvc2Ugb3BlcmF0aW9uXG4gIHRtcDEgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKGEwLCBhMSwgMCwgMSwgNCwgNSk7XG4gIHJvdzEgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKGEyLCBhMywgMCwgMSwgNCwgNSk7XG4gIHJvdzAgPSBTSU1ELkZsb2F0MzJ4NC5zaHVmZmxlKHRtcDEsIHJvdzEsIDAsIDIsIDQsIDYpO1xuICByb3cxID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZShyb3cxLCB0bXAxLCAxLCAzLCA1LCA3KTtcblxuICB0bXAxID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZShhMCwgYTEsIDIsIDMsIDYsIDcpO1xuICByb3czID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZShhMiwgYTMsIDIsIDMsIDYsIDcpO1xuICByb3cyID0gU0lNRC5GbG9hdDMyeDQuc2h1ZmZsZSh0bXAxLCByb3czLCAwLCAyLCA0LCA2KTtcbiAgcm93MyA9IFNJTUQuRmxvYXQzMng0LnNodWZmbGUocm93MywgdG1wMSwgMSwgMywgNSwgNyk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MSwgdG1wMSk7XG4gIG1pbm9yMSA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCB0bXAxKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAyLCAzLCAwLCAxKTtcbiAgbWlub3IwID0gU0lNRC5GbG9hdDMyeDQuc3ViKFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCB0bXAxKSwgbWlub3IwKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3ViKFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCB0bXAxKSwgbWlub3IxKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZShtaW5vcjEsIDIsIDMsIDAsIDEpO1xuXG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCByb3cyKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAxLCAwLCAzLCAyKTtcbiAgbWlub3IwID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3czLCB0bXAxKSwgbWlub3IwKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHRtcDEpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IwLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSkpO1xuICBtaW5vcjMgPSBTSU1ELkZsb2F0MzJ4NC5zdWIoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHRtcDEpLCBtaW5vcjMpO1xuICBtaW5vcjMgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKG1pbm9yMywgMiwgMywgMCwgMSk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUocm93MSwgMiwgMywgMCwgMSksIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICByb3cyICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHJvdzIsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjAgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHRtcDEpLCBtaW5vcjApO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgdG1wMSk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMiwgMywgMCwgMSk7XG4gIG1pbm9yMCA9IFNJTUQuRmxvYXQzMng0LnN1YihtaW5vcjAsIFNJTUQuRmxvYXQzMng0Lm11bChyb3cyLCB0bXAxKSk7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUobWlub3IyLCAyLCAzLCAwLCAxKTtcblxuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MCwgcm93MSk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMSwgMCwgMywgMik7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LmFkZChTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMyA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MiwgdG1wMSksIG1pbm9yMyk7XG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodG1wMSwgMiwgMywgMCwgMSk7XG4gIG1pbm9yMiA9IFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwocm93MywgdG1wMSksIG1pbm9yMik7XG4gIG1pbm9yMyA9IFNJTUQuRmxvYXQzMng0LnN1YihtaW5vcjMsIFNJTUQuRmxvYXQzMng0Lm11bChyb3cyLCB0bXAxKSk7XG5cbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQubXVsKHJvdzAsIHJvdzMpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDEsIDAsIDMsIDIpO1xuICBtaW5vcjEgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IxLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MiwgdG1wMSkpO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzEsIHRtcDEpLCBtaW5vcjIpO1xuICB0bXAxICAgPSBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHRtcDEsIDIsIDMsIDAsIDEpO1xuICBtaW5vcjEgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKHJvdzIsIHRtcDEpLCBtaW5vcjEpO1xuICBtaW5vcjIgPSBTSU1ELkZsb2F0MzJ4NC5zdWIobWlub3IyLCBTSU1ELkZsb2F0MzJ4NC5tdWwocm93MSwgdG1wMSkpO1xuXG4gIHRtcDEgICA9IFNJTUQuRmxvYXQzMng0Lm11bChyb3cwLCByb3cyKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAxLCAwLCAzLCAyKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3czLCB0bXAxKSwgbWlub3IxKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQuc3ViKG1pbm9yMywgU0lNRC5GbG9hdDMyeDQubXVsKHJvdzEsIHRtcDEpKTtcbiAgdG1wMSAgID0gU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh0bXAxLCAyLCAzLCAwLCAxKTtcbiAgbWlub3IxID0gU0lNRC5GbG9hdDMyeDQuc3ViKG1pbm9yMSwgU0lNRC5GbG9hdDMyeDQubXVsKHJvdzMsIHRtcDEpKTtcbiAgbWlub3IzID0gU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChyb3cxLCB0bXAxKSwgbWlub3IzKTtcblxuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDAsICBtaW5vcjApO1xuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDQsICBtaW5vcjEpO1xuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDgsICBtaW5vcjIpO1xuICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDEyLCBtaW5vcjMpO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDQgdXNpbmcgU0lNRCBpZiBhdmFpbGFibGUgYW5kIGVuYWJsZWRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbiBtYXQ0LmFkam9pbnQgPSBnbE1hdHJpeC5VU0VfU0lNRCA/IG1hdDQuU0lNRC5hZGpvaW50IDogbWF0NC5zY2FsYXIuYWRqb2ludDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xubWF0NC5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM10sXG4gICAgICAgIGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN10sXG4gICAgICAgIGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXSxcbiAgICAgICAgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV0sXG5cbiAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxuICAgICAgICBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsXG4gICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCxcbiAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxuICAgICAgICBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsXG4gICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMixcbiAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxuICAgICAgICBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsXG4gICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCxcbiAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxuICAgICAgICBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsXG4gICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xufTtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0J3MgZXhwbGljaXRseSB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZCwgbXVzdCBiZSBhIEZsb2F0MzJBcnJheVxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZCwgbXVzdCBiZSBhIEZsb2F0MzJBcnJheVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQubXVsdGlwbHkgPSBmdW5jdGlvbiAob3V0LCBhLCBiKSB7XG4gICAgdmFyIGEwID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAwKTtcbiAgICB2YXIgYTEgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDQpO1xuICAgIHZhciBhMiA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYSwgOCk7XG4gICAgdmFyIGEzID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAxMik7XG5cbiAgICB2YXIgYjAgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGIsIDApO1xuICAgIHZhciBvdXQwID0gU0lNRC5GbG9hdDMyeDQuYWRkKFxuICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIwLCAwLCAwLCAwLCAwKSwgYTApLFxuICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjAsIDEsIDEsIDEsIDEpLCBhMSksXG4gICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIwLCAyLCAyLCAyLCAyKSwgYTIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjAsIDMsIDMsIDMsIDMpLCBhMykpKSk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCAwLCBvdXQwKTtcblxuICAgIHZhciBiMSA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYiwgNCk7XG4gICAgdmFyIG91dDEgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoXG4gICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjEsIDAsIDAsIDAsIDApLCBhMCksXG4gICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5tdWwoU0lNRC5GbG9hdDMyeDQuc3dpenpsZShiMSwgMSwgMSwgMSwgMSksIGExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjEsIDIsIDIsIDIsIDIpLCBhMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5tdWwoU0lNRC5GbG9hdDMyeDQuc3dpenpsZShiMSwgMywgMywgMywgMyksIGEzKSkpKTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDQsIG91dDEpO1xuXG4gICAgdmFyIGIyID0gU0lNRC5GbG9hdDMyeDQubG9hZChiLCA4KTtcbiAgICB2YXIgb3V0MiA9IFNJTUQuRmxvYXQzMng0LmFkZChcbiAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5tdWwoU0lNRC5GbG9hdDMyeDQuc3dpenpsZShiMiwgMCwgMCwgMCwgMCksIGEwKSxcbiAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIyLCAxLCAxLCAxLCAxKSwgYTEpLFxuICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjIsIDIsIDIsIDIsIDIpLCBhMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQubXVsKFNJTUQuRmxvYXQzMng0LnN3aXp6bGUoYjIsIDMsIDMsIDMsIDMpLCBhMykpKSk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCA4LCBvdXQyKTtcblxuICAgIHZhciBiMyA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYiwgMTIpO1xuICAgIHZhciBvdXQzID0gU0lNRC5GbG9hdDMyeDQuYWRkKFxuICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIzLCAwLCAwLCAwLCAwKSwgYTApLFxuICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIzLCAxLCAxLCAxLCAxKSwgYTEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIzLCAyLCAyLCAyLCAyKSwgYTIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0Lm11bChTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKGIzLCAzLCAzLCAzLCAzKSwgYTMpKSkpO1xuICAgIFNJTUQuRmxvYXQzMng0LnN0b3JlKG91dCwgMTIsIG91dDMpO1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0NCdzIGV4cGxpY2l0bHkgbm90IHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuc2NhbGFyLm11bHRpcGx5ID0gZnVuY3Rpb24gKG91dCwgYSwgYikge1xuICAgIHZhciBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLCBhMDMgPSBhWzNdLFxuICAgICAgICBhMTAgPSBhWzRdLCBhMTEgPSBhWzVdLCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddLFxuICAgICAgICBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV0sXG4gICAgICAgIGEzMCA9IGFbMTJdLCBhMzEgPSBhWzEzXSwgYTMyID0gYVsxNF0sIGEzMyA9IGFbMTVdO1xuXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgdmFyIGIwICA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM107XG4gICAgb3V0WzBdID0gYjAqYTAwICsgYjEqYTEwICsgYjIqYTIwICsgYjMqYTMwO1xuICAgIG91dFsxXSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTtcbiAgICBvdXRbMl0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7XG4gICAgb3V0WzNdID0gYjAqYTAzICsgYjEqYTEzICsgYjIqYTIzICsgYjMqYTMzO1xuXG4gICAgYjAgPSBiWzRdOyBiMSA9IGJbNV07IGIyID0gYls2XTsgYjMgPSBiWzddO1xuICAgIG91dFs0XSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgICBvdXRbNV0gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gICAgb3V0WzZdID0gYjAqYTAyICsgYjEqYTEyICsgYjIqYTIyICsgYjMqYTMyO1xuICAgIG91dFs3XSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMztcblxuICAgIGIwID0gYls4XTsgYjEgPSBiWzldOyBiMiA9IGJbMTBdOyBiMyA9IGJbMTFdO1xuICAgIG91dFs4XSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgICBvdXRbOV0gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gICAgb3V0WzEwXSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICBvdXRbMTFdID0gYjAqYTAzICsgYjEqYTEzICsgYjIqYTIzICsgYjMqYTMzO1xuXG4gICAgYjAgPSBiWzEyXTsgYjEgPSBiWzEzXTsgYjIgPSBiWzE0XTsgYjMgPSBiWzE1XTtcbiAgICBvdXRbMTJdID0gYjAqYTAwICsgYjEqYTEwICsgYjIqYTIwICsgYjMqYTMwO1xuICAgIG91dFsxM10gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gICAgb3V0WzE0XSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICBvdXRbMTVdID0gYjAqYTAzICsgYjEqYTEzICsgYjIqYTIzICsgYjMqYTMzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDQncyB1c2luZyBTSU1EIGlmIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5tdWx0aXBseSA9IGdsTWF0cml4LlVTRV9TSU1EID8gbWF0NC5TSU1ELm11bHRpcGx5IDogbWF0NC5zY2FsYXIubXVsdGlwbHk7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cbm1hdDQubXVsID0gbWF0NC5tdWx0aXBseTtcblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3Igbm90IHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNjYWxhci50cmFuc2xhdGUgPSBmdW5jdGlvbiAob3V0LCBhLCB2KSB7XG4gICAgdmFyIHggPSB2WzBdLCB5ID0gdlsxXSwgeiA9IHZbMl0sXG4gICAgICAgIGEwMCwgYTAxLCBhMDIsIGEwMyxcbiAgICAgICAgYTEwLCBhMTEsIGExMiwgYTEzLFxuICAgICAgICBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGEwMCA9IGFbMF07IGEwMSA9IGFbMV07IGEwMiA9IGFbMl07IGEwMyA9IGFbM107XG4gICAgICAgIGExMCA9IGFbNF07IGExMSA9IGFbNV07IGExMiA9IGFbNl07IGExMyA9IGFbN107XG4gICAgICAgIGEyMCA9IGFbOF07IGEyMSA9IGFbOV07IGEyMiA9IGFbMTBdOyBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMF0gPSBhMDA7IG91dFsxXSA9IGEwMTsgb3V0WzJdID0gYTAyOyBvdXRbM10gPSBhMDM7XG4gICAgICAgIG91dFs0XSA9IGExMDsgb3V0WzVdID0gYTExOyBvdXRbNl0gPSBhMTI7IG91dFs3XSA9IGExMztcbiAgICAgICAgb3V0WzhdID0gYTIwOyBvdXRbOV0gPSBhMjE7IG91dFsxMF0gPSBhMjI7IG91dFsxMV0gPSBhMjM7XG5cbiAgICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZXMgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3IgdXNpbmcgU0lNRFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuU0lNRC50cmFuc2xhdGUgPSBmdW5jdGlvbiAob3V0LCBhLCB2KSB7XG4gICAgdmFyIGEwID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAwKSxcbiAgICAgICAgYTEgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDQpLFxuICAgICAgICBhMiA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYSwgOCksXG4gICAgICAgIGEzID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAxMiksXG4gICAgICAgIHZlYyA9IFNJTUQuRmxvYXQzMng0KHZbMF0sIHZbMV0sIHZbMl0gLCAwKTtcblxuICAgIGlmIChhICE9PSBvdXQpIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTsgb3V0WzFdID0gYVsxXTsgb3V0WzJdID0gYVsyXTsgb3V0WzNdID0gYVszXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTsgb3V0WzVdID0gYVs1XTsgb3V0WzZdID0gYVs2XTsgb3V0WzddID0gYVs3XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTsgb3V0WzldID0gYVs5XTsgb3V0WzEwXSA9IGFbMTBdOyBvdXRbMTFdID0gYVsxMV07XG4gICAgfVxuXG4gICAgYTAgPSBTSU1ELkZsb2F0MzJ4NC5tdWwoYTAsIFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodmVjLCAwLCAwLCAwLCAwKSk7XG4gICAgYTEgPSBTSU1ELkZsb2F0MzJ4NC5tdWwoYTEsIFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodmVjLCAxLCAxLCAxLCAxKSk7XG4gICAgYTIgPSBTSU1ELkZsb2F0MzJ4NC5tdWwoYTIsIFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodmVjLCAyLCAyLCAyLCAyKSk7XG5cbiAgICB2YXIgdDAgPSBTSU1ELkZsb2F0MzJ4NC5hZGQoYTAsIFNJTUQuRmxvYXQzMng0LmFkZChhMSwgU0lNRC5GbG9hdDMyeDQuYWRkKGEyLCBhMykpKTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDEyLCB0MCk7XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yIHVzaW5nIFNJTUQgaWYgYXZhaWxhYmxlIGFuZCBlbmFibGVkXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC50cmFuc2xhdGUgPSBnbE1hdHJpeC5VU0VfU0lNRCA/IG1hdDQuU0lNRC50cmFuc2xhdGUgOiBtYXQ0LnNjYWxhci50cmFuc2xhdGU7XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIG5vdCB1c2luZyB2ZWN0b3JpemF0aW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICoqL1xubWF0NC5zY2FsYXIuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIHYpIHtcbiAgICB2YXIgeCA9IHZbMF0sIHkgPSB2WzFdLCB6ID0gdlsyXTtcblxuICAgIG91dFswXSA9IGFbMF0gKiB4O1xuICAgIG91dFsxXSA9IGFbMV0gKiB4O1xuICAgIG91dFsyXSA9IGFbMl0gKiB4O1xuICAgIG91dFszXSA9IGFbM10gKiB4O1xuICAgIG91dFs0XSA9IGFbNF0gKiB5O1xuICAgIG91dFs1XSA9IGFbNV0gKiB5O1xuICAgIG91dFs2XSA9IGFbNl0gKiB5O1xuICAgIG91dFs3XSA9IGFbN10gKiB5O1xuICAgIG91dFs4XSA9IGFbOF0gKiB6O1xuICAgIG91dFs5XSA9IGFbOV0gKiB6O1xuICAgIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gICAgb3V0WzExXSA9IGFbMTFdICogejtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIHVzaW5nIHZlY3Rvcml6YXRpb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7dmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5tYXQ0LlNJTUQuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIHYpIHtcbiAgICB2YXIgYTAsIGExLCBhMjtcbiAgICB2YXIgdmVjID0gU0lNRC5GbG9hdDMyeDQodlswXSwgdlsxXSwgdlsyXSwgMCk7XG5cbiAgICBhMCA9IFNJTUQuRmxvYXQzMng0LmxvYWQoYSwgMCk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUoXG4gICAgICAgIG91dCwgMCwgU0lNRC5GbG9hdDMyeDQubXVsKGEwLCBTSU1ELkZsb2F0MzJ4NC5zd2l6emxlKHZlYywgMCwgMCwgMCwgMCkpKTtcblxuICAgIGExID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCA0KTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShcbiAgICAgICAgb3V0LCA0LCBTSU1ELkZsb2F0MzJ4NC5tdWwoYTEsIFNJTUQuRmxvYXQzMng0LnN3aXp6bGUodmVjLCAxLCAxLCAxLCAxKSkpO1xuXG4gICAgYTIgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDgpO1xuICAgIFNJTUQuRmxvYXQzMng0LnN0b3JlKFxuICAgICAgICBvdXQsIDgsIFNJTUQuRmxvYXQzMng0Lm11bChhMiwgU0lNRC5GbG9hdDMyeDQuc3dpenpsZSh2ZWMsIDIsIDIsIDIsIDIpKSk7XG5cbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIHVzaW5nIFNJTUQgaWYgYXZhaWxhYmxlIGFuZCBlbmFibGVkXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNjYWxlID0gZ2xNYXRyaXguVVNFX1NJTUQgPyBtYXQ0LlNJTUQuc2NhbGUgOiBtYXQ0LnNjYWxhci5zY2FsZTtcblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQucm90YXRlID0gZnVuY3Rpb24gKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gICAgdmFyIHggPSBheGlzWzBdLCB5ID0gYXhpc1sxXSwgeiA9IGF4aXNbMl0sXG4gICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopLFxuICAgICAgICBzLCBjLCB0LFxuICAgICAgICBhMDAsIGEwMSwgYTAyLCBhMDMsXG4gICAgICAgIGExMCwgYTExLCBhMTIsIGExMyxcbiAgICAgICAgYTIwLCBhMjEsIGEyMiwgYTIzLFxuICAgICAgICBiMDAsIGIwMSwgYjAyLFxuICAgICAgICBiMTAsIGIxMSwgYjEyLFxuICAgICAgICBiMjAsIGIyMSwgYjIyO1xuXG4gICAgaWYgKE1hdGguYWJzKGxlbikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgdCA9IDEgLSBjO1xuXG4gICAgYTAwID0gYVswXTsgYTAxID0gYVsxXTsgYTAyID0gYVsyXTsgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdOyBhMTEgPSBhWzVdOyBhMTIgPSBhWzZdOyBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07IGEyMSA9IGFbOV07IGEyMiA9IGFbMTBdOyBhMjMgPSBhWzExXTtcblxuICAgIC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudHMgb2YgdGhlIHJvdGF0aW9uIG1hdHJpeFxuICAgIGIwMCA9IHggKiB4ICogdCArIGM7IGIwMSA9IHkgKiB4ICogdCArIHogKiBzOyBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBiMTAgPSB4ICogeSAqIHQgLSB6ICogczsgYjExID0geSAqIHkgKiB0ICsgYzsgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gICAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7IGIyMSA9IHkgKiB6ICogdCAtIHggKiBzOyBiMjIgPSB6ICogeiAqIHQgKyBjO1xuXG4gICAgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gICAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xuICAgIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcbiAgICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gICAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xuICAgIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gICAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xuICAgIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gICAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcbiAgICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuXG4gICAgaWYgKGEgIT09IG91dCkgeyAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzIG5vdCB1c2luZyBTSU1EXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5zY2FsYXIucm90YXRlWCA9IGZ1bmN0aW9uIChvdXQsIGEsIHJhZCkge1xuICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCksXG4gICAgICAgIGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN10sXG4gICAgICAgIGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcblxuICAgIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgICAgICBvdXRbMF0gID0gYVswXTtcbiAgICAgICAgb3V0WzFdICA9IGFbMV07XG4gICAgICAgIG91dFsyXSAgPSBhWzJdO1xuICAgICAgICBvdXRbM10gID0gYVszXTtcbiAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBvdXRbNF0gPSBhMTAgKiBjICsgYTIwICogcztcbiAgICBvdXRbNV0gPSBhMTEgKiBjICsgYTIxICogcztcbiAgICBvdXRbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgICBvdXRbN10gPSBhMTMgKiBjICsgYTIzICogcztcbiAgICBvdXRbOF0gPSBhMjAgKiBjIC0gYTEwICogcztcbiAgICBvdXRbOV0gPSBhMjEgKiBjIC0gYTExICogcztcbiAgICBvdXRbMTBdID0gYTIyICogYyAtIGExMiAqIHM7XG4gICAgb3V0WzExXSA9IGEyMyAqIGMgLSBhMTMgKiBzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzIHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQucm90YXRlWCA9IGZ1bmN0aW9uIChvdXQsIGEsIHJhZCkge1xuICAgIHZhciBzID0gU0lNRC5GbG9hdDMyeDQuc3BsYXQoTWF0aC5zaW4ocmFkKSksXG4gICAgICAgIGMgPSBTSU1ELkZsb2F0MzJ4NC5zcGxhdChNYXRoLmNvcyhyYWQpKTtcblxuICAgIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgICAgb3V0WzBdICA9IGFbMF07XG4gICAgICBvdXRbMV0gID0gYVsxXTtcbiAgICAgIG91dFsyXSAgPSBhWzJdO1xuICAgICAgb3V0WzNdICA9IGFbM107XG4gICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIHZhciBhXzEgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDQpO1xuICAgIHZhciBhXzIgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDgpO1xuICAgIFNJTUQuRmxvYXQzMng0LnN0b3JlKG91dCwgNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5hZGQoU0lNRC5GbG9hdDMyeDQubXVsKGFfMSwgYyksIFNJTUQuRmxvYXQzMng0Lm11bChhXzIsIHMpKSk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LnN1YihTSU1ELkZsb2F0MzJ4NC5tdWwoYV8yLCBjKSwgU0lNRC5GbG9hdDMyeDQubXVsKGFfMSwgcykpKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpcyB1c2luZyBTSU1EIGlmIGF2YWlsYWJlIGFuZCBlbmFibGVkXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5yb3RhdGVYID0gZ2xNYXRyaXguVVNFX1NJTUQgPyBtYXQ0LlNJTUQucm90YXRlWCA6IG1hdDQuc2NhbGFyLnJvdGF0ZVg7XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMgbm90IHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnNjYWxhci5yb3RhdGVZID0gZnVuY3Rpb24gKG91dCwgYSwgcmFkKSB7XG4gICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKSxcbiAgICAgICAgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXSxcbiAgICAgICAgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgaWYgKGEgIT09IG91dCkgeyAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgICAgIG91dFs0XSAgPSBhWzRdO1xuICAgICAgICBvdXRbNV0gID0gYVs1XTtcbiAgICAgICAgb3V0WzZdICA9IGFbNl07XG4gICAgICAgIG91dFs3XSAgPSBhWzddO1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xuICAgIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xuICAgIG91dFsyXSA9IGEwMiAqIGMgLSBhMjIgKiBzO1xuICAgIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xuICAgIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xuICAgIG91dFs5XSA9IGEwMSAqIHMgKyBhMjEgKiBjO1xuICAgIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMgdXNpbmcgU0lNRFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuU0lNRC5yb3RhdGVZID0gZnVuY3Rpb24gKG91dCwgYSwgcmFkKSB7XG4gICAgdmFyIHMgPSBTSU1ELkZsb2F0MzJ4NC5zcGxhdChNYXRoLnNpbihyYWQpKSxcbiAgICAgICAgYyA9IFNJTUQuRmxvYXQzMng0LnNwbGF0KE1hdGguY29zKHJhZCkpO1xuXG4gICAgaWYgKGEgIT09IG91dCkgeyAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgICAgIG91dFs0XSAgPSBhWzRdO1xuICAgICAgICBvdXRbNV0gID0gYVs1XTtcbiAgICAgICAgb3V0WzZdICA9IGFbNl07XG4gICAgICAgIG91dFs3XSAgPSBhWzddO1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIHZhciBhXzAgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDApO1xuICAgIHZhciBhXzIgPSBTSU1ELkZsb2F0MzJ4NC5sb2FkKGEsIDgpO1xuICAgIFNJTUQuRmxvYXQzMng0LnN0b3JlKG91dCwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5zdWIoU0lNRC5GbG9hdDMyeDQubXVsKGFfMCwgYyksIFNJTUQuRmxvYXQzMng0Lm11bChhXzIsIHMpKSk7XG4gICAgU0lNRC5GbG9hdDMyeDQuc3RvcmUob3V0LCA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgIFNJTUQuRmxvYXQzMng0LmFkZChTSU1ELkZsb2F0MzJ4NC5tdWwoYV8wLCBzKSwgU0lNRC5GbG9hdDMyeDQubXVsKGFfMiwgYykpKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpcyBpZiBTSU1EIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbiBtYXQ0LnJvdGF0ZVkgPSBnbE1hdHJpeC5VU0VfU0lNRCA/IG1hdDQuU0lNRC5yb3RhdGVZIDogbWF0NC5zY2FsYXIucm90YXRlWTtcblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpcyBub3QgdXNpbmcgU0lNRFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuc2NhbGFyLnJvdGF0ZVogPSBmdW5jdGlvbiAob3V0LCBhLCByYWQpIHtcbiAgICB2YXIgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpLFxuICAgICAgICBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdLFxuICAgICAgICBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuXG4gICAgaWYgKGEgIT09IG91dCkgeyAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgICAgICBvdXRbOF0gID0gYVs4XTtcbiAgICAgICAgb3V0WzldICA9IGFbOV07XG4gICAgICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICAgICAgb3V0WzExXSA9IGFbMTFdO1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSA9IGEwMCAqIGMgKyBhMTAgKiBzO1xuICAgIG91dFsxXSA9IGEwMSAqIGMgKyBhMTEgKiBzO1xuICAgIG91dFsyXSA9IGEwMiAqIGMgKyBhMTIgKiBzO1xuICAgIG91dFszXSA9IGEwMyAqIGMgKyBhMTMgKiBzO1xuICAgIG91dFs0XSA9IGExMCAqIGMgLSBhMDAgKiBzO1xuICAgIG91dFs1XSA9IGExMSAqIGMgLSBhMDEgKiBzO1xuICAgIG91dFs2XSA9IGExMiAqIGMgLSBhMDIgKiBzO1xuICAgIG91dFs3XSA9IGExMyAqIGMgLSBhMDMgKiBzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzIHVzaW5nIFNJTURcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LlNJTUQucm90YXRlWiA9IGZ1bmN0aW9uIChvdXQsIGEsIHJhZCkge1xuICAgIHZhciBzID0gU0lNRC5GbG9hdDMyeDQuc3BsYXQoTWF0aC5zaW4ocmFkKSksXG4gICAgICAgIGMgPSBTSU1ELkZsb2F0MzJ4NC5zcGxhdChNYXRoLmNvcyhyYWQpKTtcblxuICAgIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgICAgb3V0WzhdICA9IGFbOF07XG4gICAgICAgIG91dFs5XSAgPSBhWzldO1xuICAgICAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgICAgIG91dFsxMV0gPSBhWzExXTtcbiAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICB2YXIgYV8wID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCAwKTtcbiAgICB2YXIgYV8xID0gU0lNRC5GbG9hdDMyeDQubG9hZChhLCA0KTtcbiAgICBTSU1ELkZsb2F0MzJ4NC5zdG9yZShvdXQsIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgU0lNRC5GbG9hdDMyeDQuYWRkKFNJTUQuRmxvYXQzMng0Lm11bChhXzAsIGMpLCBTSU1ELkZsb2F0MzJ4NC5tdWwoYV8xLCBzKSkpO1xuICAgIFNJTUQuRmxvYXQzMng0LnN0b3JlKG91dCwgNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBTSU1ELkZsb2F0MzJ4NC5zdWIoU0lNRC5GbG9hdDMyeDQubXVsKGFfMSwgYyksIFNJTUQuRmxvYXQzMng0Lm11bChhXzAsIHMpKSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXMgaWYgU0lNRCBhdmFpbGFibGUgYW5kIGVuYWJsZWRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG4gbWF0NC5yb3RhdGVaID0gZ2xNYXRyaXguVVNFX1NJTUQgPyBtYXQ0LlNJTUQucm90YXRlWiA6IG1hdDQuc2NhbGFyLnJvdGF0ZVo7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5mcm9tVHJhbnNsYXRpb24gPSBmdW5jdGlvbihvdXQsIHYpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gMTtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAxO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSB2WzBdO1xuICAgIG91dFsxM10gPSB2WzFdO1xuICAgIG91dFsxNF0gPSB2WzJdO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzN9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5mcm9tU2NhbGluZyA9IGZ1bmN0aW9uKG91dCwgdikge1xuICAgIG91dFswXSA9IHZbMF07XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSB2WzFdO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IHZbMl07XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZSBhcm91bmQgYSBnaXZlbiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZShkZXN0LCBkZXN0LCByYWQsIGF4aXMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LmZyb21Sb3RhdGlvbiA9IGZ1bmN0aW9uKG91dCwgcmFkLCBheGlzKSB7XG4gICAgdmFyIHggPSBheGlzWzBdLCB5ID0gYXhpc1sxXSwgeiA9IGF4aXNbMl0sXG4gICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopLFxuICAgICAgICBzLCBjLCB0O1xuXG4gICAgaWYgKE1hdGguYWJzKGxlbikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgdCA9IDEgLSBjO1xuXG4gICAgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBvdXRbMF0gPSB4ICogeCAqIHQgKyBjO1xuICAgIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIG91dFsyXSA9IHogKiB4ICogdCAtIHkgKiBzO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gICAgb3V0WzVdID0geSAqIHkgKiB0ICsgYztcbiAgICBvdXRbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIG91dFs5XSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICAgIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5yb3RhdGVYKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5mcm9tWFJvdGF0aW9uID0gZnVuY3Rpb24ob3V0LCByYWQpIHtcbiAgICB2YXIgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSAgPSAxO1xuICAgIG91dFsxXSAgPSAwO1xuICAgIG91dFsyXSAgPSAwO1xuICAgIG91dFszXSAgPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gYztcbiAgICBvdXRbNl0gPSBzO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAtcztcbiAgICBvdXRbMTBdID0gYztcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgICBvdXRbMTVdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuZnJvbVlSb3RhdGlvbiA9IGZ1bmN0aW9uKG91dCwgcmFkKSB7XG4gICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBvdXRbMF0gID0gYztcbiAgICBvdXRbMV0gID0gMDtcbiAgICBvdXRbMl0gID0gLXM7XG4gICAgb3V0WzNdICA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAxO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSBzO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IGM7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LmZyb21aUm90YXRpb24gPSBmdW5jdGlvbihvdXQsIHJhZCkge1xuICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAgb3V0WzBdICA9IGM7XG4gICAgb3V0WzFdICA9IHM7XG4gICAgb3V0WzJdICA9IDA7XG4gICAgb3V0WzNdICA9IDA7XG4gICAgb3V0WzRdID0gLXM7XG4gICAgb3V0WzVdID0gYztcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAxO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIHZhciBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbiA9IGZ1bmN0aW9uIChvdXQsIHEsIHYpIHtcbiAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgICB2YXIgeCA9IHFbMF0sIHkgPSBxWzFdLCB6ID0gcVsyXSwgdyA9IHFbM10sXG4gICAgICAgIHgyID0geCArIHgsXG4gICAgICAgIHkyID0geSArIHksXG4gICAgICAgIHoyID0geiArIHosXG5cbiAgICAgICAgeHggPSB4ICogeDIsXG4gICAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgICB4eiA9IHggKiB6MixcbiAgICAgICAgeXkgPSB5ICogeTIsXG4gICAgICAgIHl6ID0geSAqIHoyLFxuICAgICAgICB6eiA9IHogKiB6MixcbiAgICAgICAgd3ggPSB3ICogeDIsXG4gICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgb3V0WzFdID0geHkgKyB3ejtcbiAgICBvdXRbMl0gPSB4eiAtIHd5O1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0geHkgLSB3ejtcbiAgICBvdXRbNV0gPSAxIC0gKHh4ICsgenopO1xuICAgIG91dFs2XSA9IHl6ICsgd3g7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSB4eiArIHd5O1xuICAgIG91dFs5XSA9IHl6IC0gd3g7XG4gICAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IHZbMF07XG4gICAgb3V0WzEzXSA9IHZbMV07XG4gICAgb3V0WzE0XSA9IHZbMl07XG4gICAgb3V0WzE1XSA9IDE7XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5tYXQ0LmdldFRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKG91dCwgbWF0KSB7XG4gIG91dFswXSA9IG1hdFsxMl07XG4gIG91dFsxXSA9IG1hdFsxM107XG4gIG91dFsyXSA9IG1hdFsxNF07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbmFsIGNvbXBvbmVudFxuICogIG9mIGEgdHJhbnNmb3JtYXRpb24gbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoXG4gKiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sIHRoZSByZXR1cm5lZCBxdWF0ZXJuaW9uIHdpbGwgYmUgdGhlXG4gKiAgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtIHtxdWF0fSBvdXQgUXVhdGVybmlvbiB0byByZWNlaXZlIHRoZSByb3RhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxuICovXG5tYXQ0LmdldFJvdGF0aW9uID0gZnVuY3Rpb24gKG91dCwgbWF0KSB7XG4gIC8vIEFsZ29yaXRobSB0YWtlbiBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG4gIHZhciB0cmFjZSA9IG1hdFswXSArIG1hdFs1XSArIG1hdFsxMF07XG4gIHZhciBTID0gMDtcblxuICBpZiAodHJhY2UgPiAwKSB7IFxuICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICBvdXRbMF0gPSAobWF0WzZdIC0gbWF0WzldKSAvIFM7XG4gICAgb3V0WzFdID0gKG1hdFs4XSAtIG1hdFsyXSkgLyBTOyBcbiAgICBvdXRbMl0gPSAobWF0WzFdIC0gbWF0WzRdKSAvIFM7IFxuICB9IGVsc2UgaWYgKChtYXRbMF0gPiBtYXRbNV0pJihtYXRbMF0gPiBtYXRbMTBdKSkgeyBcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIG1hdFswXSAtIG1hdFs1XSAtIG1hdFsxMF0pICogMjtcbiAgICBvdXRbM10gPSAobWF0WzZdIC0gbWF0WzldKSAvIFM7XG4gICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgb3V0WzFdID0gKG1hdFsxXSArIG1hdFs0XSkgLyBTOyBcbiAgICBvdXRbMl0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7IFxuICB9IGVsc2UgaWYgKG1hdFs1XSA+IG1hdFsxMF0pIHsgXG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbNV0gLSBtYXRbMF0gLSBtYXRbMTBdKSAqIDI7XG4gICAgb3V0WzNdID0gKG1hdFs4XSAtIG1hdFsyXSkgLyBTO1xuICAgIG91dFswXSA9IChtYXRbMV0gKyBtYXRbNF0pIC8gUzsgXG4gICAgb3V0WzFdID0gMC4yNSAqIFM7XG4gICAgb3V0WzJdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTOyBcbiAgfSBlbHNlIHsgXG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbMTBdIC0gbWF0WzBdIC0gbWF0WzVdKSAqIDI7XG4gICAgb3V0WzNdID0gKG1hdFsxXSAtIG1hdFs0XSkgLyBTO1xuICAgIG91dFswXSA9IChtYXRbOF0gKyBtYXRbMl0pIC8gUztcbiAgICBvdXRbMV0gPSAobWF0WzZdICsgbWF0WzldKSAvIFM7XG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICB2YXIgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUgPSBmdW5jdGlvbiAob3V0LCBxLCB2LCBzKSB7XG4gICAgLy8gUXVhdGVybmlvbiBtYXRoXG4gICAgdmFyIHggPSBxWzBdLCB5ID0gcVsxXSwgeiA9IHFbMl0sIHcgPSBxWzNdLFxuICAgICAgICB4MiA9IHggKyB4LFxuICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICB6MiA9IHogKyB6LFxuXG4gICAgICAgIHh4ID0geCAqIHgyLFxuICAgICAgICB4eSA9IHggKiB5MixcbiAgICAgICAgeHogPSB4ICogejIsXG4gICAgICAgIHl5ID0geSAqIHkyLFxuICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgenogPSB6ICogejIsXG4gICAgICAgIHd4ID0gdyAqIHgyLFxuICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgd3ogPSB3ICogejIsXG4gICAgICAgIHN4ID0gc1swXSxcbiAgICAgICAgc3kgPSBzWzFdLFxuICAgICAgICBzeiA9IHNbMl07XG5cbiAgICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICAgIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gICAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gICAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSB2WzBdO1xuICAgIG91dFsxM10gPSB2WzFdO1xuICAgIG91dFsxNF0gPSB2WzJdO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XG4gKiAgICAgdmFyIHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luID0gZnVuY3Rpb24gKG91dCwgcSwgdiwgcywgbykge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLCB5ID0gcVsxXSwgeiA9IHFbMl0sIHcgPSBxWzNdLFxuICAgICAgeDIgPSB4ICsgeCxcbiAgICAgIHkyID0geSArIHksXG4gICAgICB6MiA9IHogKyB6LFxuXG4gICAgICB4eCA9IHggKiB4MixcbiAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgeHogPSB4ICogejIsXG4gICAgICB5eSA9IHkgKiB5MixcbiAgICAgIHl6ID0geSAqIHoyLFxuICAgICAgenogPSB6ICogejIsXG4gICAgICB3eCA9IHcgKiB4MixcbiAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgd3ogPSB3ICogejIsXG5cbiAgICAgIHN4ID0gc1swXSxcbiAgICAgIHN5ID0gc1sxXSxcbiAgICAgIHN6ID0gc1syXSxcblxuICAgICAgb3ggPSBvWzBdLFxuICAgICAgb3kgPSBvWzFdLFxuICAgICAgb3ogPSBvWzJdO1xuXG4gIG91dFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgb3V0WzJdID0gKHh6IC0gd3kpICogc3g7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICBvdXRbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgb3V0WzZdID0gKHl6ICsgd3gpICogc3k7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICBvdXRbOV0gPSAoeXogLSB3eCkgKiBzejtcbiAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF0gKyBveCAtIChvdXRbMF0gKiBveCArIG91dFs0XSAqIG95ICsgb3V0WzhdICogb3opO1xuICBvdXRbMTNdID0gdlsxXSArIG95IC0gKG91dFsxXSAqIG94ICsgb3V0WzVdICogb3kgKyBvdXRbOV0gKiBveik7XG4gIG91dFsxNF0gPSB2WzJdICsgb3ogLSAob3V0WzJdICogb3ggKyBvdXRbNl0gKiBveSArIG91dFsxMF0gKiBveik7XG4gIG91dFsxNV0gPSAxO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSA0eDQgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuZnJvbVF1YXQgPSBmdW5jdGlvbiAob3V0LCBxKSB7XG4gICAgdmFyIHggPSBxWzBdLCB5ID0gcVsxXSwgeiA9IHFbMl0sIHcgPSBxWzNdLFxuICAgICAgICB4MiA9IHggKyB4LFxuICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICB6MiA9IHogKyB6LFxuXG4gICAgICAgIHh4ID0geCAqIHgyLFxuICAgICAgICB5eCA9IHkgKiB4MixcbiAgICAgICAgeXkgPSB5ICogeTIsXG4gICAgICAgIHp4ID0geiAqIHgyLFxuICAgICAgICB6eSA9IHogKiB5MixcbiAgICAgICAgenogPSB6ICogejIsXG4gICAgICAgIHd4ID0gdyAqIHgyLFxuICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgd3ogPSB3ICogejI7XG5cbiAgICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvdXRbMV0gPSB5eCArIHd6O1xuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzNdID0gMDtcblxuICAgIG91dFs0XSA9IHl4IC0gd3o7XG4gICAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzZdID0genkgKyB3eDtcbiAgICBvdXRbN10gPSAwO1xuXG4gICAgb3V0WzhdID0genggKyB3eTtcbiAgICBvdXRbOV0gPSB6eSAtIHd4O1xuICAgIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgICBvdXRbMTFdID0gMDtcblxuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgZnJ1c3R1bSBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtOdW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuZnJ1c3R1bSA9IGZ1bmN0aW9uIChvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gICAgdmFyIHJsID0gMSAvIChyaWdodCAtIGxlZnQpLFxuICAgICAgICB0YiA9IDEgLyAodG9wIC0gYm90dG9tKSxcbiAgICAgICAgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IChuZWFyICogMikgKiBybDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IChuZWFyICogMikgKiB0YjtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gKHJpZ2h0ICsgbGVmdCkgKiBybDtcbiAgICBvdXRbOV0gPSAodG9wICsgYm90dG9tKSAqIHRiO1xuICAgIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgICBvdXRbMTFdID0gLTE7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IChmYXIgKiBuZWFyICogMikgKiBuZjtcbiAgICBvdXRbMTVdID0gMDtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnBlcnNwZWN0aXZlID0gZnVuY3Rpb24gKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcbiAgICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgICAgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSBmO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxMV0gPSAtMTtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gKDIgKiBmYXIgKiBuZWFyKSAqIG5mO1xuICAgIG91dFsxNV0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0LnBlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3ID0gZnVuY3Rpb24gKG91dCwgZm92LCBuZWFyLCBmYXIpIHtcbiAgICB2YXIgdXBUYW4gPSBNYXRoLnRhbihmb3YudXBEZWdyZWVzICogTWF0aC5QSS8xODAuMCksXG4gICAgICAgIGRvd25UYW4gPSBNYXRoLnRhbihmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJLzE4MC4wKSxcbiAgICAgICAgbGVmdFRhbiA9IE1hdGgudGFuKGZvdi5sZWZ0RGVncmVlcyAqIE1hdGguUEkvMTgwLjApLFxuICAgICAgICByaWdodFRhbiA9IE1hdGgudGFuKGZvdi5yaWdodERlZ3JlZXMgKiBNYXRoLlBJLzE4MC4wKSxcbiAgICAgICAgeFNjYWxlID0gMi4wIC8gKGxlZnRUYW4gKyByaWdodFRhbiksXG4gICAgICAgIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuXG4gICAgb3V0WzBdID0geFNjYWxlO1xuICAgIG91dFsxXSA9IDAuMDtcbiAgICBvdXRbMl0gPSAwLjA7XG4gICAgb3V0WzNdID0gMC4wO1xuICAgIG91dFs0XSA9IDAuMDtcbiAgICBvdXRbNV0gPSB5U2NhbGU7XG4gICAgb3V0WzZdID0gMC4wO1xuICAgIG91dFs3XSA9IDAuMDtcbiAgICBvdXRbOF0gPSAtKChsZWZ0VGFuIC0gcmlnaHRUYW4pICogeFNjYWxlICogMC41KTtcbiAgICBvdXRbOV0gPSAoKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjUpO1xuICAgIG91dFsxMF0gPSBmYXIgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzExXSA9IC0xLjA7XG4gICAgb3V0WzEyXSA9IDAuMDtcbiAgICBvdXRbMTNdID0gMC4wO1xuICAgIG91dFsxNF0gPSAoZmFyICogbmVhcikgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzE1XSA9IDAuMDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQub3J0aG8gPSBmdW5jdGlvbiAob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICAgIHZhciBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KSxcbiAgICAgICAgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCksXG4gICAgICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMF0gPSAtMiAqIGxyO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gLTIgKiBidDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAyICogbmY7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG4gICAgb3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XG4gICAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxuICogQHBhcmFtIHt2ZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5sb29rQXQgPSBmdW5jdGlvbiAob3V0LCBleWUsIGNlbnRlciwgdXApIHtcbiAgICB2YXIgeDAsIHgxLCB4MiwgeTAsIHkxLCB5MiwgejAsIHoxLCB6MiwgbGVuLFxuICAgICAgICBleWV4ID0gZXllWzBdLFxuICAgICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgICB1cHggPSB1cFswXSxcbiAgICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICAgIHVweiA9IHVwWzJdLFxuICAgICAgICBjZW50ZXJ4ID0gY2VudGVyWzBdLFxuICAgICAgICBjZW50ZXJ5ID0gY2VudGVyWzFdLFxuICAgICAgICBjZW50ZXJ6ID0gY2VudGVyWzJdO1xuXG4gICAgaWYgKE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IGdsTWF0cml4LkVQU0lMT04gJiZcbiAgICAgICAgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJlxuICAgICAgICBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgICAgIHJldHVybiBtYXQ0LmlkZW50aXR5KG91dCk7XG4gICAgfVxuXG4gICAgejAgPSBleWV4IC0gY2VudGVyeDtcbiAgICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xuICAgIHoyID0gZXlleiAtIGNlbnRlcno7XG5cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KHowICogejAgKyB6MSAqIHoxICsgejIgKiB6Mik7XG4gICAgejAgKj0gbGVuO1xuICAgIHoxICo9IGxlbjtcbiAgICB6MiAqPSBsZW47XG5cbiAgICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XG4gICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xuICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgICBsZW4gPSBNYXRoLnNxcnQoeDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyKTtcbiAgICBpZiAoIWxlbikge1xuICAgICAgICB4MCA9IDA7XG4gICAgICAgIHgxID0gMDtcbiAgICAgICAgeDIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgIHgwICo9IGxlbjtcbiAgICAgICAgeDEgKj0gbGVuO1xuICAgICAgICB4MiAqPSBsZW47XG4gICAgfVxuXG4gICAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgICB5MSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICAgIHkyID0gejAgKiB4MSAtIHoxICogeDA7XG5cbiAgICBsZW4gPSBNYXRoLnNxcnQoeTAgKiB5MCArIHkxICogeTEgKyB5MiAqIHkyKTtcbiAgICBpZiAoIWxlbikge1xuICAgICAgICB5MCA9IDA7XG4gICAgICAgIHkxID0gMDtcbiAgICAgICAgeTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgIHkwICo9IGxlbjtcbiAgICAgICAgeTEgKj0gbGVuO1xuICAgICAgICB5MiAqPSBsZW47XG4gICAgfVxuXG4gICAgb3V0WzBdID0geDA7XG4gICAgb3V0WzFdID0geTA7XG4gICAgb3V0WzJdID0gejA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSB4MTtcbiAgICBvdXRbNV0gPSB5MTtcbiAgICBvdXRbNl0gPSB6MTtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IHgyO1xuICAgIG91dFs5XSA9IHkyO1xuICAgIG91dFsxMF0gPSB6MjtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICAgIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XG4gICAgb3V0WzE0XSA9IC0oejAgKiBleWV4ICsgejEgKiBleWV5ICsgejIgKiBleWV6KTtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xubWF0NC5zdHIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAnbWF0NCgnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcsICcgK1xuICAgICAgICAgICAgICAgICAgICBhWzRdICsgJywgJyArIGFbNV0gKyAnLCAnICsgYVs2XSArICcsICcgKyBhWzddICsgJywgJyArXG4gICAgICAgICAgICAgICAgICAgIGFbOF0gKyAnLCAnICsgYVs5XSArICcsICcgKyBhWzEwXSArICcsICcgKyBhWzExXSArICcsICcgK1xuICAgICAgICAgICAgICAgICAgICBhWzEyXSArICcsICcgKyBhWzEzXSArICcsICcgKyBhWzE0XSArICcsICcgKyBhWzE1XSArICcpJztcbn07XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cbm1hdDQuZnJvYiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuKE1hdGguc3FydChNYXRoLnBvdyhhWzBdLCAyKSArIE1hdGgucG93KGFbMV0sIDIpICsgTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSArIE1hdGgucG93KGFbNF0sIDIpICsgTWF0aC5wb3coYVs1XSwgMikgKyBNYXRoLnBvdyhhWzZdLCAyKSArIE1hdGgucG93KGFbN10sIDIpICsgTWF0aC5wb3coYVs4XSwgMikgKyBNYXRoLnBvdyhhWzldLCAyKSArIE1hdGgucG93KGFbMTBdLCAyKSArIE1hdGgucG93KGFbMTFdLCAyKSArIE1hdGgucG93KGFbMTJdLCAyKSArIE1hdGgucG93KGFbMTNdLCAyKSArIE1hdGgucG93KGFbMTRdLCAyKSArIE1hdGgucG93KGFbMTVdLCAyKSApKVxufTtcblxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgb3V0WzldID0gYVs5XSArIGJbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbm1hdDQuc3VidHJhY3QgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xubWF0NC5zdWIgPSBtYXQ0LnN1YnRyYWN0O1xuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5tYXQ0Lm11bHRpcGx5U2NhbGFyID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgb3V0WzldID0gYVs5XSAqIGI7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogYjtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICAgIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gICAgb3V0WzEzXSA9IGFbMTNdICogYjtcbiAgICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICAgIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gbWF0NCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xubWF0NC5tdWx0aXBseVNjYWxhckFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICBvdXRbM10gPSBhWzNdICsgKGJbM10gKiBzY2FsZSk7XG4gICAgb3V0WzRdID0gYVs0XSArIChiWzRdICogc2NhbGUpO1xuICAgIG91dFs1XSA9IGFbNV0gKyAoYls1XSAqIHNjYWxlKTtcbiAgICBvdXRbNl0gPSBhWzZdICsgKGJbNl0gKiBzY2FsZSk7XG4gICAgb3V0WzddID0gYVs3XSArIChiWzddICogc2NhbGUpO1xuICAgIG91dFs4XSA9IGFbOF0gKyAoYls4XSAqIHNjYWxlKTtcbiAgICBvdXRbOV0gPSBhWzldICsgKGJbOV0gKiBzY2FsZSk7XG4gICAgb3V0WzEwXSA9IGFbMTBdICsgKGJbMTBdICogc2NhbGUpO1xuICAgIG91dFsxMV0gPSBhWzExXSArIChiWzExXSAqIHNjYWxlKTtcbiAgICBvdXRbMTJdID0gYVsxMl0gKyAoYlsxMl0gKiBzY2FsZSk7XG4gICAgb3V0WzEzXSA9IGFbMTNdICsgKGJbMTNdICogc2NhbGUpO1xuICAgIG91dFsxNF0gPSBhWzE0XSArIChiWzE0XSAqIHNjYWxlKTtcbiAgICBvdXRbMTVdID0gYVsxNV0gKyAoYlsxNV0gKiBzY2FsZSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHttYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5tYXQ0LmV4YWN0RXF1YWxzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBcbiAgICAgICAgICAgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBcbiAgICAgICAgICAgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiZcbiAgICAgICAgICAgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge21hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbm1hdDQuZXF1YWxzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgYTAgID0gYVswXSwgIGExICA9IGFbMV0sICBhMiAgPSBhWzJdLCAgYTMgID0gYVszXSxcbiAgICAgICAgYTQgID0gYVs0XSwgIGE1ICA9IGFbNV0sICBhNiAgPSBhWzZdLCAgYTcgID0gYVs3XSwgXG4gICAgICAgIGE4ICA9IGFbOF0sICBhOSAgPSBhWzldLCAgYTEwID0gYVsxMF0sIGExMSA9IGFbMTFdLCBcbiAgICAgICAgYTEyID0gYVsxMl0sIGExMyA9IGFbMTNdLCBhMTQgPSBhWzE0XSwgYTE1ID0gYVsxNV07XG5cbiAgICB2YXIgYjAgID0gYlswXSwgIGIxICA9IGJbMV0sICBiMiAgPSBiWzJdLCAgYjMgID0gYlszXSxcbiAgICAgICAgYjQgID0gYls0XSwgIGI1ICA9IGJbNV0sICBiNiAgPSBiWzZdLCAgYjcgID0gYls3XSwgXG4gICAgICAgIGI4ICA9IGJbOF0sICBiOSAgPSBiWzldLCAgYjEwID0gYlsxMF0sIGIxMSA9IGJbMTFdLCBcbiAgICAgICAgYjEyID0gYlsxMl0sIGIxMyA9IGJbMTNdLCBiMTQgPSBiWzE0XSwgYjE1ID0gYlsxNV07XG5cbiAgICByZXR1cm4gKE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE2IC0gYjYpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGE5IC0gYjkpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOSksIE1hdGguYWJzKGI5KSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMCksIE1hdGguYWJzKGIxMCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMTEgLSBiMTEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoYTEyIC0gYjEyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEyKSwgTWF0aC5hYnMoYjEyKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMyksIE1hdGguYWJzKGIxMykpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMTQgLSBiMTQpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoYTE1IC0gYjE1KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE1KSwgTWF0aC5hYnMoYjE1KSkpO1xufTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gbWF0NDtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbnZhciBnbE1hdHJpeCA9IHJlcXVpcmUoXCIuL2NvbW1vbi5qc1wiKTtcbnZhciBtYXQzID0gcmVxdWlyZShcIi4vbWF0My5qc1wiKTtcbnZhciB2ZWMzID0gcmVxdWlyZShcIi4vdmVjMy5qc1wiKTtcbnZhciB2ZWM0ID0gcmVxdWlyZShcIi4vdmVjNC5qc1wiKTtcblxuLyoqXG4gKiBAY2xhc3MgUXVhdGVybmlvblxuICogQG5hbWUgcXVhdFxuICovXG52YXIgcXVhdCA9IHt9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgcXVhdFxuICpcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXG4gKi9cbnF1YXQuY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2V0cyBhIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IHRoZSBzaG9ydGVzdCByb3RhdGlvbiBmcm9tIG9uZVxuICogdmVjdG9yIHRvIGFub3RoZXIuXG4gKlxuICogQm90aCB2ZWN0b3JzIGFyZSBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoLlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvbi5cbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgZGVzdGluYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbnF1YXQucm90YXRpb25UbyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdG1wdmVjMyA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdmFyIHhVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygxLDAsMCk7XG4gICAgdmFyIHlVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygwLDEsMCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgICAgIHZhciBkb3QgPSB2ZWMzLmRvdChhLCBiKTtcbiAgICAgICAgaWYgKGRvdCA8IC0wLjk5OTk5OSkge1xuICAgICAgICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCB4VW5pdFZlYzMsIGEpO1xuICAgICAgICAgICAgaWYgKHZlYzMubGVuZ3RoKHRtcHZlYzMpIDwgMC4wMDAwMDEpXG4gICAgICAgICAgICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xuICAgICAgICAgICAgdmVjMy5ub3JtYWxpemUodG1wdmVjMywgdG1wdmVjMyk7XG4gICAgICAgICAgICBxdWF0LnNldEF4aXNBbmdsZShvdXQsIHRtcHZlYzMsIE1hdGguUEkpO1xuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfSBlbHNlIGlmIChkb3QgPiAwLjk5OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gMDtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICAgICAgb3V0WzNdID0gMTtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIGEsIGIpO1xuICAgICAgICAgICAgb3V0WzBdID0gdG1wdmVjM1swXTtcbiAgICAgICAgICAgIG91dFsxXSA9IHRtcHZlYzNbMV07XG4gICAgICAgICAgICBvdXRbMl0gPSB0bXB2ZWMzWzJdO1xuICAgICAgICAgICAgb3V0WzNdID0gMSArIGRvdDtcbiAgICAgICAgICAgIHJldHVybiBxdWF0Lm5vcm1hbGl6ZShvdXQsIG91dCk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiB3aXRoIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlblxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXG4gKiBwZXJwZW5kaWN1bGFyIHRvIGFsbCBvdGhlciBzcGVjaWZpZWQgYXhlcy5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHZpZXcgIHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSB2aWV3aW5nIGRpcmVjdGlvblxuICogQHBhcmFtIHt2ZWMzfSByaWdodCB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJyaWdodFwiIGRpcmVjdGlvblxuICogQHBhcmFtIHt2ZWMzfSB1cCAgICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJ1cFwiIGRpcmVjdGlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LnNldEF4ZXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XG4gICAgICAgIG1hdHJbMF0gPSByaWdodFswXTtcbiAgICAgICAgbWF0clszXSA9IHJpZ2h0WzFdO1xuICAgICAgICBtYXRyWzZdID0gcmlnaHRbMl07XG5cbiAgICAgICAgbWF0clsxXSA9IHVwWzBdO1xuICAgICAgICBtYXRyWzRdID0gdXBbMV07XG4gICAgICAgIG1hdHJbN10gPSB1cFsyXTtcblxuICAgICAgICBtYXRyWzJdID0gLXZpZXdbMF07XG4gICAgICAgIG1hdHJbNV0gPSAtdmlld1sxXTtcbiAgICAgICAgbWF0cls4XSA9IC12aWV3WzJdO1xuXG4gICAgICAgIHJldHVybiBxdWF0Lm5vcm1hbGl6ZShvdXQsIHF1YXQuZnJvbU1hdDMob3V0LCBtYXRyKSk7XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxuICogQGZ1bmN0aW9uXG4gKi9cbnF1YXQuY2xvbmUgPSB2ZWM0LmNsb25lO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5xdWF0LmZyb21WYWx1ZXMgPSB2ZWM0LmZyb21WYWx1ZXM7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbnF1YXQuY29weSA9IHZlYzQuY29weTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5zZXQgPSB2ZWM0LnNldDtcblxuLyoqXG4gKiBTZXQgYSBxdWF0IHRvIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbnF1YXQuaWRlbnRpdHkgPSBmdW5jdGlvbihvdXQpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIGFyb3VuZCB3aGljaCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqKi9cbnF1YXQuc2V0QXhpc0FuZ2xlID0gZnVuY3Rpb24ob3V0LCBheGlzLCByYWQpIHtcbiAgICByYWQgPSByYWQgKiAwLjU7XG4gICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIG91dFswXSA9IHMgKiBheGlzWzBdO1xuICAgIG91dFsxXSA9IHMgKiBheGlzWzFdO1xuICAgIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICAgIG91dFszXSA9IE1hdGguY29zKHJhZCk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgcm90YXRpb24gYXhpcyBhbmQgYW5nbGUgZm9yIGEgZ2l2ZW5cbiAqICBxdWF0ZXJuaW9uLiBJZiBhIHF1YXRlcm5pb24gaXMgY3JlYXRlZCB3aXRoXG4gKiAgc2V0QXhpc0FuZ2xlLCB0aGlzIG1ldGhvZCB3aWxsIHJldHVybiB0aGUgc2FtZVxuICogIHZhbHVlcyBhcyBwcm92aWRpZWQgaW4gdGhlIG9yaWdpbmFsIHBhcmFtZXRlciBsaXN0XG4gKiAgT1IgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdmFsdWVzLlxuICogRXhhbXBsZTogVGhlIHF1YXRlcm5pb24gZm9ybWVkIGJ5IGF4aXMgWzAsIDAsIDFdIGFuZFxuICogIGFuZ2xlIC05MCBpcyB0aGUgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBmb3JtZWQgYnlcbiAqICBbMCwgMCwgMV0gYW5kIDI3MC4gVGhpcyBtZXRob2QgZmF2b3JzIHRoZSBsYXR0ZXIuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXRfYXhpcyAgVmVjdG9yIHJlY2VpdmluZyB0aGUgYXhpcyBvZiByb3RhdGlvblxuICogQHBhcmFtICB7cXVhdH0gcSAgICAgUXVhdGVybmlvbiB0byBiZSBkZWNvbXBvc2VkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBBbmdsZSwgaW4gcmFkaWFucywgb2YgdGhlIHJvdGF0aW9uXG4gKi9cbnF1YXQuZ2V0QXhpc0FuZ2xlID0gZnVuY3Rpb24ob3V0X2F4aXMsIHEpIHtcbiAgICB2YXIgcmFkID0gTWF0aC5hY29zKHFbM10pICogMi4wO1xuICAgIHZhciBzID0gTWF0aC5zaW4ocmFkIC8gMi4wKTtcbiAgICBpZiAocyAhPSAwLjApIHtcbiAgICAgICAgb3V0X2F4aXNbMF0gPSBxWzBdIC8gcztcbiAgICAgICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcbiAgICAgICAgb3V0X2F4aXNbMl0gPSBxWzJdIC8gcztcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBzIGlzIHplcm8sIHJldHVybiBhbnkgYXhpcyAobm8gcm90YXRpb24gLSBheGlzIGRvZXMgbm90IG1hdHRlcilcbiAgICAgICAgb3V0X2F4aXNbMF0gPSAxO1xuICAgICAgICBvdXRfYXhpc1sxXSA9IDA7XG4gICAgICAgIG91dF9heGlzWzJdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHJhZDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5xdWF0LmFkZCA9IHZlYzQuYWRkO1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbnF1YXQubXVsdGlwbHkgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICB2YXIgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSwgYXcgPSBhWzNdLFxuICAgICAgICBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdLCBidyA9IGJbM107XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5xdWF0Lm11bCA9IHF1YXQubXVsdGlwbHk7XG5cbi8qKlxuICogU2NhbGVzIGEgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5zY2FsZSA9IHZlYzQuc2NhbGU7XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LnJvdGF0ZVggPSBmdW5jdGlvbiAob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41OyBcblxuICAgIHZhciBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM10sXG4gICAgICAgIGJ4ID0gTWF0aC5zaW4ocmFkKSwgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYng7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gICAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYng7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBZIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LnJvdGF0ZVkgPSBmdW5jdGlvbiAob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41OyBcblxuICAgIHZhciBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM10sXG4gICAgICAgIGJ5ID0gTWF0aC5zaW4ocmFkKSwgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF5ICogYnk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LnJvdGF0ZVogPSBmdW5jdGlvbiAob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41OyBcblxuICAgIHZhciBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM10sXG4gICAgICAgIGJ6ID0gTWF0aC5zaW4ocmFkKSwgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gICAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0IGZyb20gdGhlIFgsIFksIGFuZCBaIGNvbXBvbmVudHMuXG4gKiBBc3N1bWVzIHRoYXQgcXVhdGVybmlvbiBpcyAxIHVuaXQgaW4gbGVuZ3RoLlxuICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LmNhbGN1bGF0ZVcgPSBmdW5jdGlvbiAob3V0LCBhKSB7XG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl07XG5cbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgb3V0WzJdID0gejtcbiAgICBvdXRbM10gPSBNYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICogQGZ1bmN0aW9uXG4gKi9cbnF1YXQuZG90ID0gdmVjNC5kb3Q7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbnF1YXQubGVycCA9IHZlYzQubGVycDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xucXVhdC5zbGVycCA9IGZ1bmN0aW9uIChvdXQsIGEsIGIsIHQpIHtcbiAgICAvLyBiZW5jaG1hcmtzOlxuICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG5cbiAgICB2YXIgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSwgYXcgPSBhWzNdLFxuICAgICAgICBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdLCBidyA9IGJbM107XG5cbiAgICB2YXIgICAgICAgIG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxO1xuXG4gICAgLy8gY2FsYyBjb3NpbmVcbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG4gICAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gICAgaWYgKCBjb3NvbSA8IDAuMCApIHtcbiAgICAgICAgY29zb20gPSAtY29zb207XG4gICAgICAgIGJ4ID0gLSBieDtcbiAgICAgICAgYnkgPSAtIGJ5O1xuICAgICAgICBieiA9IC0gYno7XG4gICAgICAgIGJ3ID0gLSBidztcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuICAgIGlmICggKDEuMCAtIGNvc29tKSA+IDAuMDAwMDAxICkge1xuICAgICAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcbiAgICAgICAgb21lZ2EgID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgICAgc2lub20gID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7ICAgICAgICBcbiAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZSBcbiAgICAgICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgICBcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbnF1YXQuc3FsZXJwID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlbXAxID0gcXVhdC5jcmVhdGUoKTtcbiAgdmFyIHRlbXAyID0gcXVhdC5jcmVhdGUoKTtcbiAgXG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gICAgcXVhdC5zbGVycCh0ZW1wMSwgYSwgZCwgdCk7XG4gICAgcXVhdC5zbGVycCh0ZW1wMiwgYiwgYywgdCk7XG4gICAgcXVhdC5zbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTtcbiAgICBcbiAgICByZXR1cm4gb3V0O1xuICB9O1xufSgpKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xucXVhdC5pbnZlcnQgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICB2YXIgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLFxuICAgICAgICBkb3QgPSBhMCphMCArIGExKmExICsgYTIqYTIgKyBhMyphMyxcbiAgICAgICAgaW52RG90ID0gZG90ID8gMS4wL2RvdCA6IDA7XG4gICAgXG4gICAgLy8gVE9ETzogV291bGQgYmUgZmFzdGVyIHRvIHJldHVybiBbMCwwLDAsMF0gaW1tZWRpYXRlbHkgaWYgZG90ID09IDBcblxuICAgIG91dFswXSA9IC1hMCppbnZEb3Q7XG4gICAgb3V0WzFdID0gLWExKmludkRvdDtcbiAgICBvdXRbMl0gPSAtYTIqaW52RG90O1xuICAgIG91dFszXSA9IGEzKmludkRvdDtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb25qdWdhdGUgb2YgYSBxdWF0XG4gKiBJZiB0aGUgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGNvbmp1Z2F0ZSBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5xdWF0LmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIChvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5sZW5ndGggPSB2ZWM0Lmxlbmd0aDtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbnF1YXQubGVuID0gcXVhdC5sZW5ndGg7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqIEBmdW5jdGlvblxuICovXG5xdWF0LnNxdWFyZWRMZW5ndGggPSB2ZWM0LnNxdWFyZWRMZW5ndGg7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0LnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5zcXJMZW4gPSBxdWF0LnNxdWFyZWRMZW5ndGg7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5ub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxuICpcbiAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXG4gKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge21hdDN9IG0gcm90YXRpb24gbWF0cml4XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xucXVhdC5mcm9tTWF0MyA9IGZ1bmN0aW9uKG91dCwgbSkge1xuICAgIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXG4gICAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG4gICAgdmFyIGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTtcbiAgICB2YXIgZlJvb3Q7XG5cbiAgICBpZiAoIGZUcmFjZSA+IDAuMCApIHtcbiAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAgLy8gMndcbiAgICAgICAgb3V0WzNdID0gMC41ICogZlJvb3Q7XG4gICAgICAgIGZSb290ID0gMC41L2ZSb290OyAgLy8gMS8oNHcpXG4gICAgICAgIG91dFswXSA9IChtWzVdLW1bN10pKmZSb290O1xuICAgICAgICBvdXRbMV0gPSAobVs2XS1tWzJdKSpmUm9vdDtcbiAgICAgICAgb3V0WzJdID0gKG1bMV0tbVszXSkqZlJvb3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIGlmICggbVs0XSA+IG1bMF0gKVxuICAgICAgICAgIGkgPSAxO1xuICAgICAgICBpZiAoIG1bOF0gPiBtW2kqMytpXSApXG4gICAgICAgICAgaSA9IDI7XG4gICAgICAgIHZhciBqID0gKGkrMSklMztcbiAgICAgICAgdmFyIGsgPSAoaSsyKSUzO1xuICAgICAgICBcbiAgICAgICAgZlJvb3QgPSBNYXRoLnNxcnQobVtpKjMraV0tbVtqKjMral0tbVtrKjMra10gKyAxLjApO1xuICAgICAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICAgICAgb3V0WzNdID0gKG1baiozK2tdIC0gbVtrKjMral0pICogZlJvb3Q7XG4gICAgICAgIG91dFtqXSA9IChtW2oqMytpXSArIG1baSozK2pdKSAqIGZSb290O1xuICAgICAgICBvdXRba10gPSAobVtrKjMraV0gKyBtW2kqMytrXSkgKiBmUm9vdDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHF1YXRlbmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gdmVjIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXG4gKi9cbnF1YXQuc3RyID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gJ3F1YXQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnKSc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHF1YXRlcm5pb25zIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgVGhlIGZpcnN0IHF1YXRlcm5pb24uXG4gKiBAcGFyYW0ge3F1YXR9IGIgVGhlIHNlY29uZCBxdWF0ZXJuaW9uLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbnF1YXQuZXhhY3RFcXVhbHMgPSB2ZWM0LmV4YWN0RXF1YWxzO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHF1YXRlcm5pb25zIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7cXVhdH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5xdWF0LmVxdWFscyA9IHZlYzQuZXF1YWxzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHF1YXQ7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEJyYW5kb24gSm9uZXMsIENvbGluIE1hY0tlbnppZSBJVi5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLiAqL1xuXG52YXIgZ2xNYXRyaXggPSByZXF1aXJlKFwiLi9jb21tb24uanNcIik7XG5cbi8qKlxuICogQGNsYXNzIDIgRGltZW5zaW9uYWwgVmVjdG9yXG4gKiBAbmFtZSB2ZWMyXG4gKi9cbnZhciB2ZWMyID0ge307XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjMlxuICpcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xudmVjMi5jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xudmVjMi5jbG9uZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xudmVjMi5mcm9tVmFsdWVzID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzIgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5jb3B5ID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5zZXQgPSBmdW5jdGlvbihvdXQsIHgsIHkpIHtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLmFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLnN1YnRyYWN0ID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzIuc3ViID0gdmVjMi5zdWJ0cmFjdDtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIubXVsdGlwbHkgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xudmVjMi5tdWwgPSB2ZWMyLm11bHRpcGx5O1xuXG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5kaXZpZGUgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzIuZGl2ID0gdmVjMi5kaXZpZGU7XG5cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5jZWlsID0gZnVuY3Rpb24gKG91dCwgYSkge1xuICAgIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBmbG9vclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLmZsb29yID0gZnVuY3Rpb24gKG91dCwgYSkge1xuICAgIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gICAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIubWluID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gICAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLm1heCA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICAgIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gcm91bmRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5yb3VuZCA9IGZ1bmN0aW9uIChvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICAgIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5zY2FsZUFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG52ZWMyLmRpc3RhbmNlID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICAgIHkgPSBiWzFdIC0gYVsxXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMyLmRpc3QgPSB2ZWMyLmRpc3RhbmNlO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xudmVjMi5zcXVhcmVkRGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICAgIHJldHVybiB4KnggKyB5Knk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkRGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xudmVjMi5zcXJEaXN0ID0gdmVjMi5zcXVhcmVkRGlzdGFuY2U7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xudmVjMi5sZW5ndGggPSBmdW5jdGlvbiAoYSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkpO1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzIubGVuID0gdmVjMi5sZW5ndGg7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xudmVjMi5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdO1xuICAgIHJldHVybiB4KnggKyB5Knk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkTGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzIuc3FyTGVuID0gdmVjMi5zcXVhcmVkTGVuZ3RoO1xuXG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIubmVnYXRlID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gLWFbMF07XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5pbnZlcnNlID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gIG91dFswXSA9IDEuMCAvIGFbMF07XG4gIG91dFsxXSA9IDEuMCAvIGFbMV07XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5ub3JtYWxpemUgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICB2YXIgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdO1xuICAgIHZhciBsZW4gPSB4KnggKyB5Knk7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICAgICAgICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cbnZlYzIuZG90ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzInc1xuICogTm90ZSB0aGF0IHRoZSBjcm9zcyBwcm9kdWN0IG11c3QgYnkgZGVmaW5pdGlvbiBwcm9kdWNlIGEgM0QgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMyLmNyb3NzID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xuICAgIG91dFswXSA9IG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gejtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi5sZXJwID0gZnVuY3Rpb24gKG91dCwgYSwgYiwgdCkge1xuICAgIHZhciBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXTtcbiAgICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVdIExlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHZlY3Rvci4gSWYgb21taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLnJhbmRvbSA9IGZ1bmN0aW9uIChvdXQsIHNjYWxlKSB7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gICAgdmFyIHIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XG4gICAgb3V0WzBdID0gTWF0aC5jb3MocikgKiBzY2FsZTtcbiAgICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDJ9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIudHJhbnNmb3JtTWF0MiA9IGZ1bmN0aW9uKG91dCwgYSwgbSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV07XG4gICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeTtcbiAgICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQyZH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xudmVjMi50cmFuc2Zvcm1NYXQyZCA9IGZ1bmN0aW9uKG91dCwgYSwgbSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV07XG4gICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeSArIG1bNV07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0M1xuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbnZlYzIudHJhbnNmb3JtTWF0MyA9IGZ1bmN0aW9uKG91dCwgYSwgbSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV07XG4gICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XG4gICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0NFxuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMCdcbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG52ZWMyLnRyYW5zZm9ybU1hdDQgPSBmdW5jdGlvbihvdXQsIGEsIG0pIHtcbiAgICB2YXIgeCA9IGFbMF0sIFxuICAgICAgICB5ID0gYVsxXTtcbiAgICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XG4gICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMycy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMyLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjMnMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzIuZm9yRWFjaCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdmVjID0gdmVjMi5jcmVhdGUoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICAgICAgdmFyIGksIGw7XG4gICAgICAgIGlmKCFzdHJpZGUpIHtcbiAgICAgICAgICAgIHN0cmlkZSA9IDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZighb2Zmc2V0KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZihjb3VudCkge1xuICAgICAgICAgICAgbCA9IE1hdGgubWluKChjb3VudCAqIHN0cmlkZSkgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIHZlY1swXSA9IGFbaV07IHZlY1sxXSA9IGFbaSsxXTtcbiAgICAgICAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgICAgICAgYVtpXSA9IHZlY1swXTsgYVtpKzFdID0gdmVjWzFdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYTtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWMyfSB2ZWMgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xudmVjMi5zdHIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAndmVjMignICsgYVswXSArICcsICcgKyBhWzFdICsgJyknO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGV4YWN0bHkgaGF2ZSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG52ZWMyLmV4YWN0RXF1YWxzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG52ZWMyLmVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdO1xuICAgIHZhciBiMCA9IGJbMF0sIGIxID0gYlsxXTtcbiAgICByZXR1cm4gKE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2ZWMyO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxudmFyIGdsTWF0cml4ID0gcmVxdWlyZShcIi4vY29tbW9uLmpzXCIpO1xuXG4vKipcbiAqIEBjbGFzcyAzIERpbWVuc2lvbmFsIFZlY3RvclxuICogQG5hbWUgdmVjM1xuICovXG52YXIgdmVjMyA9IHt9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzNcbiAqXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cbnZlYzMuY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xudmVjMy5jbG9uZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xudmVjMy5mcm9tVmFsdWVzID0gZnVuY3Rpb24oeCwgeSwgeikge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgb3V0WzJdID0gejtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLmNvcHkgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLnNldCA9IGZ1bmN0aW9uKG91dCwgeCwgeSwgeikge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5hZGQgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5zdWJ0cmFjdCA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLnN1YiA9IHZlYzMuc3VidHJhY3Q7XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLm11bHRpcGx5ID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzMubXVsID0gdmVjMy5tdWx0aXBseTtcblxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuZGl2aWRlID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLmRpdiA9IHZlYzMuZGl2aWRlO1xuXG4vKipcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuY2VpbCA9IGZ1bmN0aW9uIChvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gICAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICAgIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuZmxvb3IgPSBmdW5jdGlvbiAob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICAgIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLm1pbiA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICAgIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICAgIG91dFsyXSA9IE1hdGgubWluKGFbMl0sIGJbMl0pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5tYXggPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMucm91bmQgPSBmdW5jdGlvbiAob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICAgIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5zY2FsZUFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xudmVjMy5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgICB5ID0gYlsxXSAtIGFbMV0sXG4gICAgICAgIHogPSBiWzJdIC0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeik7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLmRpc3QgPSB2ZWMzLmRpc3RhbmNlO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xudmVjMy5zcXVhcmVkRGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgICAgeSA9IGJbMV0gLSBhWzFdLFxuICAgICAgICB6ID0gYlsyXSAtIGFbMl07XG4gICAgcmV0dXJuIHgqeCArIHkqeSArIHoqejtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLnNxckRpc3QgPSB2ZWMzLnNxdWFyZWREaXN0YW5jZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG52ZWMzLmxlbmd0aCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzMubGVuID0gdmVjMy5sZW5ndGg7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xudmVjMy5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXTtcbiAgICByZXR1cm4geCp4ICsgeSp5ICsgeip6O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLnNxckxlbiA9IHZlYzMuc3F1YXJlZExlbmd0aDtcblxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLm5lZ2F0ZSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIG91dFswXSA9IC1hWzBdO1xuICAgIG91dFsxXSA9IC1hWzFdO1xuICAgIG91dFsyXSA9IC1hWzJdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuaW52ZXJzZSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMubm9ybWFsaXplID0gZnVuY3Rpb24ob3V0LCBhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgdmFyIGxlbiA9IHgqeCArIHkqeSArIHoqejtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBsZW47XG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBsZW47XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xudmVjMy5kb3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMuY3Jvc3MgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICB2YXIgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSxcbiAgICAgICAgYnggPSBiWzBdLCBieSA9IGJbMV0sIGJ6ID0gYlsyXTtcblxuICAgIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF6ICogYnggLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLmxlcnAgPSBmdW5jdGlvbiAob3V0LCBhLCBiLCB0KSB7XG4gICAgdmFyIGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl07XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgYSBoZXJtaXRlIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5oZXJtaXRlID0gZnVuY3Rpb24gKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQsXG4gICAgICBmYWN0b3IxID0gZmFjdG9yVGltZXMyICogKDIgKiB0IC0gMykgKyAxLFxuICAgICAgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0LFxuICAgICAgZmFjdG9yMyA9IGZhY3RvclRpbWVzMiAqICh0IC0gMSksXG4gICAgICBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogKDMgLSAyICogdCk7XG4gIFxuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuICBcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgYSBiZXppZXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYyB0aGUgdGhpcmQgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLmJlemllciA9IGZ1bmN0aW9uIChvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGludmVyc2VGYWN0b3IgPSAxIC0gdCxcbiAgICAgIGludmVyc2VGYWN0b3JUaW1lc1R3byA9IGludmVyc2VGYWN0b3IgKiBpbnZlcnNlRmFjdG9yLFxuICAgICAgZmFjdG9yVGltZXMyID0gdCAqIHQsXG4gICAgICBmYWN0b3IxID0gaW52ZXJzZUZhY3RvclRpbWVzVHdvICogaW52ZXJzZUZhY3RvcixcbiAgICAgIGZhY3RvcjIgPSAzICogdCAqIGludmVyc2VGYWN0b3JUaW1lc1R3byxcbiAgICAgIGZhY3RvcjMgPSAzICogZmFjdG9yVGltZXMyICogaW52ZXJzZUZhY3RvcixcbiAgICAgIGZhY3RvcjQgPSBmYWN0b3JUaW1lczIgKiB0O1xuICBcbiAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XG4gIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcbiAgXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMucmFuZG9tID0gZnVuY3Rpb24gKG91dCwgc2NhbGUpIHtcbiAgICBzY2FsZSA9IHNjYWxlIHx8IDEuMDtcblxuICAgIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICAgIHZhciB6ID0gKGdsTWF0cml4LlJBTkRPTSgpICogMi4wKSAtIDEuMDtcbiAgICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMC16KnopICogc2NhbGU7XG5cbiAgICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHpTY2FsZTtcbiAgICBvdXRbMl0gPSB6ICogc2NhbGU7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0NC5cbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLnRyYW5zZm9ybU1hdDQgPSBmdW5jdGlvbihvdXQsIGEsIG0pIHtcbiAgICB2YXIgeCA9IGFbMF0sIHkgPSBhWzFdLCB6ID0gYVsyXSxcbiAgICAgICAgdyA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XTtcbiAgICB3ID0gdyB8fCAxLjA7XG4gICAgb3V0WzBdID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAvIHc7XG4gICAgb3V0WzFdID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeiArIG1bMTNdKSAvIHc7XG4gICAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgLyB3O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQ0fSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMudHJhbnNmb3JtTWF0MyA9IGZ1bmN0aW9uKG91dCwgYSwgbSkge1xuICAgIHZhciB4ID0gYVswXSwgeSA9IGFbMV0sIHogPSBhWzJdO1xuICAgIG91dFswXSA9IHggKiBtWzBdICsgeSAqIG1bM10gKyB6ICogbVs2XTtcbiAgICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gICAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG52ZWMzLnRyYW5zZm9ybVF1YXQgPSBmdW5jdGlvbihvdXQsIGEsIHEpIHtcbiAgICAvLyBiZW5jaG1hcmtzOiBodHRwOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9uc1xuXG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl0sXG4gICAgICAgIHF4ID0gcVswXSwgcXkgPSBxWzFdLCBxeiA9IHFbMl0sIHF3ID0gcVszXSxcblxuICAgICAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICAgICAgICBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeSxcbiAgICAgICAgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHosXG4gICAgICAgIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4LFxuICAgICAgICBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cbiAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG4gICAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgICBvdXRbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xuICAgIG91dFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeC1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbnZlYzMucm90YXRlWCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgYyl7XG4gICB2YXIgcCA9IFtdLCByPVtdO1xuXHQgIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cblx0ICBwWzBdID0gYVswXSAtIGJbMF07XG5cdCAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBcdHBbMl0gPSBhWzJdIC0gYlsyXTtcblxuXHQgIC8vcGVyZm9ybSByb3RhdGlvblxuXHQgIHJbMF0gPSBwWzBdO1xuXHQgIHJbMV0gPSBwWzFdKk1hdGguY29zKGMpIC0gcFsyXSpNYXRoLnNpbihjKTtcblx0ICByWzJdID0gcFsxXSpNYXRoLnNpbihjKSArIHBbMl0qTWF0aC5jb3MoYyk7XG5cblx0ICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG5cdCAgb3V0WzBdID0gclswXSArIGJbMF07XG5cdCAgb3V0WzFdID0gclsxXSArIGJbMV07XG5cdCAgb3V0WzJdID0gclsyXSArIGJbMl07XG5cbiAgXHRyZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB5LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5yb3RhdGVZID0gZnVuY3Rpb24ob3V0LCBhLCBiLCBjKXtcbiAgXHR2YXIgcCA9IFtdLCByPVtdO1xuICBcdC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgXHRwWzBdID0gYVswXSAtIGJbMF07XG4gIFx0cFsxXSA9IGFbMV0gLSBiWzFdO1xuICBcdHBbMl0gPSBhWzJdIC0gYlsyXTtcbiAgXG4gIFx0Ly9wZXJmb3JtIHJvdGF0aW9uXG4gIFx0clswXSA9IHBbMl0qTWF0aC5zaW4oYykgKyBwWzBdKk1hdGguY29zKGMpO1xuICBcdHJbMV0gPSBwWzFdO1xuICBcdHJbMl0gPSBwWzJdKk1hdGguY29zKGMpIC0gcFswXSpNYXRoLnNpbihjKTtcbiAgXG4gIFx0Ly90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuICBcdG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBcdG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBcdG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICBcbiAgXHRyZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB6LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xudmVjMy5yb3RhdGVaID0gZnVuY3Rpb24ob3V0LCBhLCBiLCBjKXtcbiAgXHR2YXIgcCA9IFtdLCByPVtdO1xuICBcdC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgXHRwWzBdID0gYVswXSAtIGJbMF07XG4gIFx0cFsxXSA9IGFbMV0gLSBiWzFdO1xuICBcdHBbMl0gPSBhWzJdIC0gYlsyXTtcbiAgXG4gIFx0Ly9wZXJmb3JtIHJvdGF0aW9uXG4gIFx0clswXSA9IHBbMF0qTWF0aC5jb3MoYykgLSBwWzFdKk1hdGguc2luKGMpO1xuICBcdHJbMV0gPSBwWzBdKk1hdGguc2luKGMpICsgcFsxXSpNYXRoLmNvcyhjKTtcbiAgXHRyWzJdID0gcFsyXTtcbiAgXG4gIFx0Ly90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuICBcdG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBcdG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBcdG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICBcbiAgXHRyZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjM3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYSB0aGUgYXJyYXkgb2YgdmVjdG9ycyB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjMy4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gY291bnQgTnVtYmVyIG9mIHZlYzNzIHRvIGl0ZXJhdGUgb3Zlci4gSWYgMCBpdGVyYXRlcyBvdmVyIGVudGlyZSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXG4gKiBAcmV0dXJucyB7QXJyYXl9IGFcbiAqIEBmdW5jdGlvblxuICovXG52ZWMzLmZvckVhY2ggPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZlYyA9IHZlYzMuY3JlYXRlKCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgICAgIHZhciBpLCBsO1xuICAgICAgICBpZighc3RyaWRlKSB7XG4gICAgICAgICAgICBzdHJpZGUgPSAzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIW9mZnNldCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoY291bnQpIHtcbiAgICAgICAgICAgIGwgPSBNYXRoLm1pbigoY291bnQgKiBzdHJpZGUpICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsID0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICB2ZWNbMF0gPSBhW2ldOyB2ZWNbMV0gPSBhW2krMV07IHZlY1syXSA9IGFbaSsyXTtcbiAgICAgICAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgICAgICAgYVtpXSA9IHZlY1swXTsgYVtpKzFdID0gdmVjWzFdOyBhW2krMl0gPSB2ZWNbMl07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICovXG52ZWMzLmFuZ2xlID0gZnVuY3Rpb24oYSwgYikge1xuICAgXG4gICAgdmFyIHRlbXBBID0gdmVjMy5mcm9tVmFsdWVzKGFbMF0sIGFbMV0sIGFbMl0pO1xuICAgIHZhciB0ZW1wQiA9IHZlYzMuZnJvbVZhbHVlcyhiWzBdLCBiWzFdLCBiWzJdKTtcbiBcbiAgICB2ZWMzLm5vcm1hbGl6ZSh0ZW1wQSwgdGVtcEEpO1xuICAgIHZlYzMubm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XG4gXG4gICAgdmFyIGNvc2luZSA9IHZlYzMuZG90KHRlbXBBLCB0ZW1wQik7XG5cbiAgICBpZihjb3NpbmUgPiAxLjApe1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XG4gICAgfSAgICAgXG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG52ZWMzLnN0ciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuICd2ZWMzKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcpJztcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xudmVjMy5leGFjdEVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG52ZWMzLmVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl07XG4gICAgdmFyIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl07XG4gICAgcmV0dXJuIChNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdmVjMztcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbnZhciBnbE1hdHJpeCA9IHJlcXVpcmUoXCIuL2NvbW1vbi5qc1wiKTtcblxuLyoqXG4gKiBAY2xhc3MgNCBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBuYW1lIHZlYzRcbiAqL1xudmFyIHZlYzQgPSB7fTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XG4gKlxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG52ZWM0LmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjNCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcbiAqL1xudmVjNC5jbG9uZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcbiAqL1xudmVjNC5mcm9tVmFsdWVzID0gZnVuY3Rpb24oeCwgeSwgeiwgdykge1xuICAgIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgb3V0WzJdID0gejtcbiAgICBvdXRbM10gPSB3O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWM0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQuY29weSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQuc2V0ID0gZnVuY3Rpb24ob3V0LCB4LCB5LCB6LCB3KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgb3V0WzNdID0gdztcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQuc3VidHJhY3QgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xudmVjNC5zdWIgPSB2ZWM0LnN1YnRyYWN0O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5tdWx0aXBseSA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKiBiWzNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWM0Lm11bCA9IHZlYzQubXVsdGlwbHk7XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0LmRpdmlkZSA9IGZ1bmN0aW9uKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLyBiWzNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXZpZGV9XG4gKiBAZnVuY3Rpb25cbiAqL1xudmVjNC5kaXYgPSB2ZWM0LmRpdmlkZTtcblxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2VpbFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0LmNlaWwgPSBmdW5jdGlvbiAob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xuICAgIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XG4gICAgb3V0WzNdID0gTWF0aC5jZWlsKGFbM10pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5mbG9vciA9IGZ1bmN0aW9uIChvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICAgIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gICAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcbiAgICBvdXRbM10gPSBNYXRoLmZsb29yKGFbM10pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5taW4gPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgICBvdXRbM10gPSBNYXRoLm1pbihhWzNdLCBiWzNdKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQubWF4ID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gICAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gICAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XG4gICAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0LnJvdW5kID0gZnVuY3Rpb24gKG91dCwgYSkge1xuICAgIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gICAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xuICAgIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjNCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbnZlYzQuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICBvdXRbM10gPSBhWzNdICogYjtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5zY2FsZUFuZEFkZCA9IGZ1bmN0aW9uKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICBvdXRbM10gPSBhWzNdICsgKGJbM10gKiBzY2FsZSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbnZlYzQuZGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgICAgeSA9IGJbMV0gLSBhWzFdLFxuICAgICAgICB6ID0gYlsyXSAtIGFbMl0sXG4gICAgICAgIHcgPSBiWzNdIC0gYVszXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeiArIHcqdyk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG52ZWM0LmRpc3QgPSB2ZWM0LmRpc3RhbmNlO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xudmVjNC5zcXVhcmVkRGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgICAgeSA9IGJbMV0gLSBhWzFdLFxuICAgICAgICB6ID0gYlsyXSAtIGFbMl0sXG4gICAgICAgIHcgPSBiWzNdIC0gYVszXTtcbiAgICByZXR1cm4geCp4ICsgeSp5ICsgeip6ICsgdyp3O1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzQuc3FyRGlzdCA9IHZlYzQuc3F1YXJlZERpc3RhbmNlO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbnZlYzQubGVuZ3RoID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXSxcbiAgICAgICAgdyA9IGFbM107XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnogKyB3KncpO1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzQubGVuID0gdmVjNC5sZW5ndGg7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xudmVjNC5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXSxcbiAgICAgICAgdyA9IGFbM107XG4gICAgcmV0dXJuIHgqeCArIHkqeSArIHoqeiArIHcqdztcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xudmVjNC5zcXJMZW4gPSB2ZWM0LnNxdWFyZWRMZW5ndGg7XG5cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5uZWdhdGUgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICBvdXRbM10gPSAtYVszXTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0LmludmVyc2UgPSBmdW5jdGlvbihvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgb3V0WzNdID0gMS4wIC8gYVszXTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0Lm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdLFxuICAgICAgICB3ID0gYVszXTtcbiAgICB2YXIgbGVuID0geCp4ICsgeSp5ICsgeip6ICsgdyp3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICAgICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICAgICAgb3V0WzFdID0geSAqIGxlbjtcbiAgICAgICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICAgICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG52ZWM0LmRvdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5sZXJwID0gZnVuY3Rpb24gKG91dCwgYSwgYiwgdCkge1xuICAgIHZhciBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC5yYW5kb20gPSBmdW5jdGlvbiAob3V0LCBzY2FsZSkge1xuICAgIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuXG4gICAgLy9UT0RPOiBUaGlzIGlzIGEgcHJldHR5IGF3ZnVsIHdheSBvZiBkb2luZyB0aGlzLiBGaW5kIHNvbWV0aGluZyBiZXR0ZXIuXG4gICAgb3V0WzBdID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gICAgb3V0WzFdID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gICAgb3V0WzJdID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gICAgb3V0WzNdID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gICAgdmVjNC5ub3JtYWxpemUob3V0LCBvdXQpO1xuICAgIHZlYzQuc2NhbGUob3V0LCBvdXQsIHNjYWxlKTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBtYXQ0LlxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xudmVjNC50cmFuc2Zvcm1NYXQ0ID0gZnVuY3Rpb24ob3V0LCBhLCBtKSB7XG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl0sIHcgPSBhWzNdO1xuICAgIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdICogdztcbiAgICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSAqIHc7XG4gICAgb3V0WzJdID0gbVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdICogdztcbiAgICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0gKiB3O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzQgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG52ZWM0LnRyYW5zZm9ybVF1YXQgPSBmdW5jdGlvbihvdXQsIGEsIHEpIHtcbiAgICB2YXIgeCA9IGFbMF0sIHkgPSBhWzFdLCB6ID0gYVsyXSxcbiAgICAgICAgcXggPSBxWzBdLCBxeSA9IHFbMV0sIHF6ID0gcVsyXSwgcXcgPSBxWzNdLFxuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG4gICAgICAgIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5LFxuICAgICAgICBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogeixcbiAgICAgICAgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHgsXG4gICAgICAgIGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICBvdXRbMF0gPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICAgIG91dFsxXSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XG4gICAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWM0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWM0LiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjNHMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cbnZlYzQuZm9yRWFjaCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdmVjID0gdmVjNC5jcmVhdGUoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICAgICAgdmFyIGksIGw7XG4gICAgICAgIGlmKCFzdHJpZGUpIHtcbiAgICAgICAgICAgIHN0cmlkZSA9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZighb2Zmc2V0KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZihjb3VudCkge1xuICAgICAgICAgICAgbCA9IE1hdGgubWluKChjb3VudCAqIHN0cmlkZSkgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIHZlY1swXSA9IGFbaV07IHZlY1sxXSA9IGFbaSsxXTsgdmVjWzJdID0gYVtpKzJdOyB2ZWNbM10gPSBhW2krM107XG4gICAgICAgICAgICBmbih2ZWMsIHZlYywgYXJnKTtcbiAgICAgICAgICAgIGFbaV0gPSB2ZWNbMF07IGFbaSsxXSA9IHZlY1sxXTsgYVtpKzJdID0gdmVjWzJdOyBhW2krM10gPSB2ZWNbM107XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IHZlYyB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG52ZWM0LnN0ciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuICd2ZWM0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG52ZWM0LmV4YWN0RXF1YWxzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xudmVjNC5lcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM107XG4gICAgdmFyIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXTtcbiAgICByZXR1cm4gKE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2ZWM0O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IGdsQ29uc3RhbnRzIGZyb20gXCIuL2dsQ29uc3RhbnRzXCI7XG5cbi8vIHBvcHVsYXRlcyBGaWVsZHMgd2l0aCBkYXRhIGJhc2VkIG9uIGlucHV0c1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VuZXJhdG9yIHtcbiAgLy8gVE9ETzogdW5pZnkgd2l0aCBTcGFjZVxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnVzZUludGVnZXJUZXh0dXJlcyA9IEdlbmVyYXRvci51c2VJbnRlZ2VyVGV4dHVyZXM7XG4gICAgdGhpcy5nbCA9IG9wdGlvbnMuZ2w7XG4gICAgdGhpcy51bmlmb3JtcyA9IG9wdGlvbnMudW5pZm9ybXMgfHwge307XG4gICAgdGhpcy5pbnB1dEZpZWxkcyA9IG9wdGlvbnMuaW5wdXRGaWVsZHMgfHwgW107XG4gICAgdGhpcy5vdXRwdXRGaWVsZHMgPSBvcHRpb25zLm91dHB1dEZpZWxkcyB8fCBbXTtcbiAgICB0aGlzLnByb2dyYW0gPSB1bmRlZmluZWQ7XG5cbiAgICAvLyAqIGZvciBub3csIGFsbCBQaXhlbERhdGEgaW4gZGF0YXNldHMgaXMgb2YgdHlwZSBzaG9ydFxuICAgIC8vICogcGl4ZWwgcmVhZGJhY2sgb2YgZmxvYXQgdGV4dHVyZXMgcmVxdWlyZXMgY2FzdGluZ1xuICAgIC8vICogZ2wgbWF5IGFsbG93IHJlYWQgYmFjayBvZiBzaW5nbGUgY29tcG9uZW50LCBidXQgbWF5IG9ubHkgZG8gcmdiYVxuICAgIC8vIFRPRE86IHN1cHBvcnQgZm9yIHJlYWRpbmcgYmFjayB0cmFuc2Zvcm0gYXJyYXlzXG4gICAgdGhpcy5zbGljZVZpZXdBcnJheVR5cGUgPSBJbnQxNkFycmF5O1xuICAgIHRoaXMuc2xpY2VWaWV3Qnl0ZXNQZXJFbGVtZW50ID0gMjtcbiAgICBpZiAodGhpcy51c2VJbnRlZ2VyVGV4dHVyZXMpIHtcbiAgICAgIHRoaXMuc2FtcGxlclR5cGUgPSBcImlzYW1wbGVyM0RcIjtcbiAgICAgIHRoaXMuYnVmZmVyVHlwZSA9IFwiaW50XCI7XG4gICAgICB0aGlzLnJlYWRQaXhlbHNGb3JtYXQgPSB0aGlzLmdsLlJFRF9JTlRFR0VSO1xuICAgICAgdGhpcy5yZWFkUGl4ZWxzVHlwZSA9IHRoaXMuZ2wuU0hPUlQ7XG4gICAgICB0aGlzLmZhbGxiYWNrU2xpY2VWaWV3c0FycmF5VHlwZSA9IEludDMyQXJyYXk7XG4gICAgICB0aGlzLmZhbGxiYWNrTnVtYmVyT2ZDb21wb25lbnRzID0gNDtcbiAgICAgIHRoaXMuZmFsbGJhY2tSZWFkUGl4ZWxzRm9ybWF0ID0gdGhpcy5nbC5SR0JBX0lOVEVHRVI7XG4gICAgICB0aGlzLmZhbGxiYWNrUmVhZFBpeGVsc1R5cGUgPSB0aGlzLmdsLklOVDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zYW1wbGVyVHlwZSA9IFwic2FtcGxlcjNEXCI7XG4gICAgICB0aGlzLmJ1ZmZlclR5cGUgPSBcImZsb2F0XCI7XG4gICAgICB0aGlzLnJlYWRQaXhlbHNGb3JtYXQgPSB0aGlzLmdsLlJFRDtcbiAgICAgIHRoaXMucmVhZFBpeGVsc1R5cGUgPSB0aGlzLmdsLkZMT0FUO1xuICAgICAgdGhpcy5mYWxsYmFja1NsaWNlVmlld3NBcnJheVR5cGUgPSBGbG9hdDMyQXJyYXk7XG4gICAgICB0aGlzLmZhbGxiYWNrTnVtYmVyT2ZDb21wb25lbnRzID0gNDtcbiAgICAgIHRoaXMuZmFsbGJhY2tSZWFkUGl4ZWxzRm9ybWF0ID0gdGhpcy5nbC5SR0JBO1xuICAgICAgdGhpcy5mYWxsYmFja1JlYWRQaXhlbHNUeXBlID0gdGhpcy5nbC5GTE9BVDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBuZWVkIHRvIGNvbnNpZGVyIHJlc2NhbGVJbnRlcmNlcHQvcmVzY2FsZVNsb3BlIHdoZW5cbiAgICAvLyB3cml0aW5nIG91dCB0byBpbWFnZSB0ZXh0dXJlc1xuICB9XG5cbiAgLy8gdXRpbGl0eSBmb3IgcHJpbnRpbmcgbXVsdGlsaW5lIHN0cmluZ3MgZm9yIGRlYnVnZ2luZ1xuICBsb2dXaXRoTGluZU51bWJlcnMoc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVOdW1iZXIgPSAxO1xuXG4gICAgc3RyaW5nLnNwbGl0KFwiXFxuXCIpLmZvckVhY2gobGluZSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhsaW5lTnVtYmVyLCBsaW5lKTtcbiAgICAgIGxpbmVOdW1iZXIgKz0gMTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHV0aWxpdHkgZm9yIHByaW50aW5nIGh1bWFuIHJlYWRhYmxlIGNvZGVzXG4gIC8vIFRPRE86IGNvdWxkIGNhY2hlIHRoZSBtYXBwaW5nLCBidXQgc2luY2UgdGhpcyBpcyBvbmx5XG4gIC8vIGZvciBlcnJvciBtZXNzYWdlcyBwZXJmb3JtYW5jZSBpcyBub3QgY3JpdGljYWxcbiAgc3RhdGljIGdsQ29uc3RhbnROYW1lKGNhbmRpZGF0ZVZhbHVlKSB7XG4gICAgbGV0IG5hbWU7XG5cbiAgICBPYmplY3QuZW50cmllcyhnbENvbnN0YW50cykuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gZW50cnk7XG5cbiAgICAgIGlmIChjYW5kaWRhdGVWYWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgbmFtZSA9IGtleTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuR2VuZXJhdG9yLnVzZUludGVnZXJUZXh0dXJlcyA9IGZhbHNlOyAvLyBkZWZhdWx0XG4iLCJpbXBvcnQgUHJvZ3JhbW1hdGljR2VuZXJhdG9yIGZyb20gXCIuL1Byb2dyYW1tYXRpY0dlbmVyYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm93Q3V0R2VuZXJhdG9yIGV4dGVuZHMgUHJvZ3JhbW1hdGljR2VuZXJhdG9yIHtcbiAgLy8gUGVyZm9ybXMgb24gaXRlcmF0aW9uIG9mIEdyb3dDdXQuXG4gIC8vIGlucHV0RmllbGRzIGFyZTpcbiAgLy8gLSAwIGdyYXlzY2FsZSBpbWFnZVxuICAvLyAtIDEgY3VycmVudCBsYWJlbCBpbWFnZVxuICAvLyAtIDIgY3VycmVudCBzdHJlbmd0aCBpbWFnZVxuICAvLyBvdXRwdXRGaWVsZHMgYXJlOlxuICAvLyAtIDAgbmV3IGxhYmVsIGltYWdlXG4gIC8vIC0gMSBuZXcgc3RyZW5ndGggaW1hZ2VcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy51bmlmb3Jtcy5pdGVyYXRpb24gPSB7IHR5cGU6IFwiMWlcIiwgdmFsdWU6IDAgfTtcbiAgICB0aGlzLnVuaWZvcm1zLml0ZXJhdGlvbnMgPSB7IHR5cGU6IFwiMWlcIiwgdmFsdWU6IDAgfTtcbiAgfVxuXG4gIGhlYWRlclNvdXJjZSgpIHtcbiAgICByZXR1cm4gYCR7c3VwZXIuaGVhZGVyU291cmNlKCl9XG4gICAgICAgIGNvbnN0IGludCBzbGljZU1vZGUgPSAxOyAvLyB1c2VkIGZvciB0ZXh0dXJlIHNhbXBsaW5nIChnZXQgdmFsdWUgbm90IHRyYW5zZmVyIGZ1bmN0aW9uKVxuICAgICAgYDtcbiAgfVxuXG4gIHVwZGF0ZVByb2dyYW0oKSB7XG4gICAgLy8gcmVjcmVhdGUgdGhlIHByb2dyYW0gYW5kIHRleHR1cmVzIGZvciB0aGUgY3VycmVudCBmaWVsZCBsaXN0XG4gICAgc3VwZXIudXBkYXRlUHJvZ3JhbSgpO1xuICB9XG5cbiAgX2ZyYWdtZW50U2hhZGVyU291cmNlKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmhlYWRlclNvdXJjZSgpfVxuICAgICAgICAvLyB0aGVzZSBhcmUgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb25zIGZvciBzYW1wbGVWb2x1bWUqXG4gICAgICAgIC8vIGFuZCB0cmFuc2ZlckZ1bmN0aW9uKlxuICAgICAgICAvLyB0aGF0IGRlZmluZSBhIGZpZWxkIGF0IGEgc2FtcGxlIHBvaW50IGluIHNwYWNlXG4gICAgICAgICR7ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UgPSBcIlwiO1xuXG4gICAgICAgICAgdGhpcy5pbnB1dEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgIHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UgKz0gZmllbGQudHJhbnNmb3JtU2hhZGVyU291cmNlKCk7XG4gICAgICAgICAgICBwZXJGaWVsZFNhbXBsaW5nU2hhZGVyU291cmNlICs9IGZpZWxkLnNhbXBsaW5nU2hhZGVyU291cmNlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2U7XG4gICAgICAgIH0uYmluZCh0aGlzKSgpfVxuICBcbiAgICAgICAgI2RlZmluZSBNQVhfU1RSRU5HVEggJHt0aGlzLmJ1ZmZlclR5cGV9KDEwMDAwKVxuICBcbiAgICAgICAgdW5pZm9ybSBpbnQgaXRlcmF0aW9ucztcbiAgICAgICAgdW5pZm9ybSBpbnQgaXRlcmF0aW9uO1xuICBcbiAgICAgICAgdW5pZm9ybSAke3RoaXMuc2FtcGxlclR5cGV9IGlucHV0VGV4dHVyZTA7IC8vIGJhY2tncm91bmRcbiAgICAgICAgdW5pZm9ybSAke3RoaXMuc2FtcGxlclR5cGV9IGlucHV0VGV4dHVyZTE7IC8vIGxhYmVsXG4gICAgICAgIHVuaWZvcm0gJHt0aGlzLnNhbXBsZXJUeXBlfSBpbnB1dFRleHR1cmUyOyAvLyBzdHJlbmd0aFxuICBcbiAgICAgICAgaW4gdmVjMyBpbnRlcnBvbGF0ZWRUZXh0dXJlQ29vcmRpbmF0ZTtcbiAgXG4gICAgICAgIGxheW91dChsb2NhdGlvbiA9IDApIG91dCAke3RoaXMuYnVmZmVyVHlwZX0gbGFiZWw7XG4gICAgICAgIGxheW91dChsb2NhdGlvbiA9IDEpIG91dCAke3RoaXMuYnVmZmVyVHlwZX0gc3RyZW5ndGg7XG4gIFxuICAgICAgICB2b2lkIG1haW4oKVxuICAgICAgICB7XG4gICAgICAgICAgaXZlYzMgc2l6ZSA9IHRleHR1cmVTaXplKGlucHV0VGV4dHVyZTAsIDApO1xuICAgICAgICAgIGl2ZWMzIHRleGVsSW5kZXggPSBpdmVjMyhmbG9vcihpbnRlcnBvbGF0ZWRUZXh0dXJlQ29vcmRpbmF0ZSAqIHZlYzMoc2l6ZSkpKTtcbiAgICAgICAgICAke1xuICAgICAgICAgICAgdGhpcy5idWZmZXJUeXBlXG4gICAgICAgICAgfSBiYWNrZ3JvdW5kID0gdGV4ZWxGZXRjaChpbnB1dFRleHR1cmUwLCB0ZXhlbEluZGV4LCAwKS5yO1xuICBcbiAgICAgICAgICBpZiAoaXRlcmF0aW9uID09IDApIHtcbiAgICAgICAgICAgIGlmIChiYWNrZ3JvdW5kIDwgJHt0aGlzLmJ1ZmZlclR5cGV9KDEwKSkge1xuICAgICAgICAgICAgICBsYWJlbCA9ICR7dGhpcy5idWZmZXJUeXBlfSgzMCk7XG4gICAgICAgICAgICAgIHN0cmVuZ3RoID0gTUFYX1NUUkVOR1RIO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiYWNrZ3JvdW5kID4gJHt0aGlzLmJ1ZmZlclR5cGV9KDEwMCkpIHtcbiAgICAgICAgICAgICAgbGFiZWwgPSAke3RoaXMuYnVmZmVyVHlwZX0oMTAwKTtcbiAgICAgICAgICAgICAgc3RyZW5ndGggPSBNQVhfU1RSRU5HVEg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsYWJlbCA9ICR7dGhpcy5idWZmZXJUeXBlfSgwKTtcbiAgICAgICAgICAgICAgc3RyZW5ndGggPSAke3RoaXMuYnVmZmVyVHlwZX0oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhYmVsID0gdGV4ZWxGZXRjaChpbnB1dFRleHR1cmUxLCB0ZXhlbEluZGV4LCAwKS5yO1xuICAgICAgICAgICAgc3RyZW5ndGggPSB0ZXhlbEZldGNoKGlucHV0VGV4dHVyZTIsIHRleGVsSW5kZXgsIDApLnI7XG4gICAgICAgICAgICBmb3IgKGludCBrID0gLTE7IGsgPD0gMTsgaysrKSB7XG4gICAgICAgICAgICAgIGZvciAoaW50IGogPSAtMTsgaiA8PSAxOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gLTE7IGkgPD0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaSAhPSAwICYmIGogIT0gMCAmJiBrICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaXZlYzMgbmVpZ2hib3JJbmRleCA9IHRleGVsSW5kZXggKyBpdmVjMyhpLGosayk7XG4gICAgICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0gbmVpZ2hib3JCYWNrZ3JvdW5kID0gdGV4ZWxGZXRjaChpbnB1dFRleHR1cmUwLCBuZWlnaGJvckluZGV4LCAwKS5yO1xuICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyVHlwZVxuICAgICAgICAgICAgICAgICAgICB9IG5laWdoYm9yU3RyZW5ndGggPSB0ZXhlbEZldGNoKGlucHV0VGV4dHVyZTIsIG5laWdoYm9ySW5kZXgsIDApLnI7XG4gICAgICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0gc3RyZW5ndGhDb3N0ID0gYWJzKG5laWdoYm9yQmFja2dyb3VuZCAtIGJhY2tncm91bmQpO1xuICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyVHlwZVxuICAgICAgICAgICAgICAgICAgICB9IHRha2VvdmVyU3RyZW5ndGggPSBuZWlnaGJvclN0cmVuZ3RoIC0gc3RyZW5ndGhDb3N0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFrZW92ZXJTdHJlbmd0aCA+IHN0cmVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggPSB0YWtlb3ZlclN0cmVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gdGV4ZWxGZXRjaChpbnB1dFRleHR1cmUxLCBuZWlnaGJvckluZGV4LCAwKS5yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgR2VuZXJhdG9yIGZyb20gXCIuL0dlbmVyYXRvclwiO1xuXG4vLyBVc2VzIGEgR0wgcHJvZ3JhbSB0byBnZW5lcmF0ZSBmaWVsZHNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyYW1tYXRpY0dlbmVyYXRvciBleHRlbmRzIEdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIGxldCBnbCA9IHRoaXMuZ2w7XG5cbiAgICB0aGlzLm91dHB1dEZpZWxkcy5mb3JFYWNoKG91dHB1dEZpZWxkID0+IHtcbiAgICAgIG91dHB1dEZpZWxkLmdlbmVyYXRvciA9IHRoaXM7XG4gICAgfSk7XG5cbiAgICAvLyBidWZmZXJzIGZvciB0aGUgdGV4dHVyZWQgcGxhbmUgaW4gbm9ybWFsaXplZCAoY2xpcCkgc3BhY2VcbiAgICBsZXQgcmVuZGVySW1hZ2VWZXJ0aWNlcyA9IFstMSwgLTEsIDAsIDEsIC0xLCAwLCAtMSwgMSwgMCwgMSwgMSwgMF07XG5cbiAgICB0aGlzLnJlbmRlckltYWdlQ29vcmRpbmF0ZXNCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5yZW5kZXJJbWFnZUNvb3JkaW5hdGVzQnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKFxuICAgICAgZ2wuQVJSQVlfQlVGRkVSLFxuICAgICAgbmV3IEZsb2F0MzJBcnJheShyZW5kZXJJbWFnZVZlcnRpY2VzKSxcbiAgICAgIGdsLlNUQVRJQ19EUkFXXG4gICAgKTtcblxuICAgIGxldCByZW5kZXJJbWFnZVRleHR1cmVDb29yZGluYXRlcyA9IFswLCAwLCAxLCAwLCAwLCAxLCAxLCAxXTtcblxuICAgIHRoaXMucmVuZGVySW1hZ2VUZXh1cmVDb29yZGluYXRlc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnJlbmRlckltYWdlVGV4dXJlQ29vcmRpbmF0ZXNCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoXG4gICAgICBnbC5BUlJBWV9CVUZGRVIsXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHJlbmRlckltYWdlVGV4dHVyZUNvb3JkaW5hdGVzKSxcbiAgICAgIGdsLlNUQVRJQ19EUkFXXG4gICAgKTtcblxuICAgIC8vIGZyYW1lYnVmZmVyIHRvIGF0dGFjaCB0ZXh0dXJlIGxheWVyIGZvciBnZW5lcmF0aW5nIGEgc2xpY2VcbiAgICB0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgfVxuXG4gIGhlYWRlclNvdXJjZSgpIHtcbiAgICByZXR1cm4gYCN2ZXJzaW9uIDMwMCBlc1xuICAgICAgICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICAgICAgICBwcmVjaXNpb24gaGlnaHAgaW50O1xuICAgICAgICAgIHByZWNpc2lvbiBoaWdocCBzYW1wbGVyM0Q7XG4gICAgICAgICAgcHJlY2lzaW9uIGhpZ2hwIGlzYW1wbGVyM0Q7XG4gICAgICAgIGA7XG4gIH1cblxuICBfdmVydGV4U2hhZGVyU291cmNlKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmhlYWRlclNvdXJjZSgpfVxuICAgICAgICAgIGxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgY29vcmRpbmF0ZTtcbiAgICAgICAgICBsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMyIHRleHR1cmVDb29yZGluYXRlO1xuICAgICAgICAgIHVuaWZvcm0gZmxvYXQgc2xpY2U7XG4gICAgICAgICAgb3V0IHZlYzMgaW50ZXJwb2xhdGVkVGV4dHVyZUNvb3JkaW5hdGU7XG4gICAgICAgICAgdm9pZCBtYWluKClcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHZlYzModGV4dHVyZUNvb3JkaW5hdGUsIHNsaWNlKTtcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChjb29yZGluYXRlLCAxLik7XG4gICAgICAgICAgfVxuICAgICAgICBgO1xuICB9XG5cbiAgX2ZyYWdtZW50U2hhZGVyU291cmNlKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmhlYWRlclNvdXJjZSgpfVxuICAgICAgICAgIC8vIHRvIGJlIG92ZXJyaWRkZW4gYnkgY29uY3JldGUgc3ViY2xhc3NcbiAgICAgICAgYDtcbiAgfVxuXG4gIHVwZGF0ZVByb2dyYW0oKSB7XG4gICAgLy8gcmVjcmVhdGUgdGhlIHByb2dyYW1cbiAgICBsZXQgZ2wgPSB0aGlzLmdsO1xuXG4gICAgaWYgKHRoaXMucHJvZ3JhbSkge1xuICAgICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgIH1cblxuICAgIHRoaXMudmVydGV4U2hhZGVyU291cmNlID0gdGhpcy5fdmVydGV4U2hhZGVyU291cmNlKCk7XG4gICAgdGhpcy5mcmFnbWVudFNoYWRlclNvdXJjZSA9IHRoaXMuX2ZyYWdtZW50U2hhZGVyU291cmNlKCk7XG5cbiAgICAvLyB0aGUgcHJvZ3JhbSBhbmQgc2hhZGVyc1xuICAgIHRoaXMucHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICB0aGlzLnZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICBnbC5zaGFkZXJTb3VyY2UodGhpcy52ZXJ0ZXhTaGFkZXIsIHRoaXMudmVydGV4U2hhZGVyU291cmNlKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcih0aGlzLnZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICB0aGlzLmxvZ1dpdGhMaW5lTnVtYmVycyh0aGlzLnZlcnRleFNoYWRlclNvdXJjZSk7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGNvbXBpbGUgdmVydGV4U2hhZGVyXCIpO1xuICAgICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLnZlcnRleFNoYWRlcikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgZ2wuc2hhZGVyU291cmNlKHRoaXMuZnJhZ21lbnRTaGFkZXIsIHRoaXMuZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIodGhpcy5mcmFnbWVudFNoYWRlcik7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIodGhpcy5mcmFnbWVudFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICB0aGlzLmxvZ1dpdGhMaW5lTnVtYmVycyh0aGlzLmZyYWdtZW50U2hhZGVyU291cmNlKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgY29tcGlsZSBmcmFnbWVudFNoYWRlclwiKTtcbiAgICAgIGNvbnNvbGUubG9nKGdsLmdldFNoYWRlckluZm9Mb2codGhpcy5mcmFnbWVudFNoYWRlcikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB0aGlzLnZlcnRleFNoYWRlcik7XG4gICAgZ2wuZGVsZXRlU2hhZGVyKHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB0aGlzLmZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5kZWxldGVTaGFkZXIodGhpcy5mcmFnbWVudFNoYWRlcik7XG4gICAgZ2wubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgIHRoaXMubG9nV2l0aExpbmVOdW1iZXJzKHRoaXMuZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBsaW5rIHByb2dyYW1cIik7XG4gICAgICBjb25zb2xlLmxvZyhnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhY3RpdmF0ZSB0aGUgaW5wdXRzXG4gICAgdGhpcy5pbnB1dEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIGlmIChmaWVsZC5uZWVkc1VwZGF0ZSgpKSB7XG4gICAgICAgIGZpZWxkLmZpZWxkVG9UZXh0dXJlKGdsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9zZXRVbmlmb3JtKGtleSwgdW5pZm9ybSkge1xuICAgIGxldCBnbCA9IHRoaXMuZ2w7XG4gICAgbGV0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwga2V5KTtcblxuICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgIC8vIGZvciBub3csIGRvbid0IHdhcm4gZm9yIHRoaXMgc2luY2UgdGhlIGZpZWxkIHN1cGVyY2xhc3NcbiAgICAgIC8vIGRlY2xhcmVzIHZpc3VhbGl6YXRpb24gdW5pZm9ybXMgd2hpY2ggbWF5IG5vdCBiZSByZWZlcmVuY2VkXG4gICAgICAvLyBpbiBnZW5lcmF0b3IgY29kZS4gIFRoaXMgY291bGQgYmUgYSBzb3VyY2Ugb2YgY29uZnVzaW9uXG4gICAgICAvLyBpZiB1bmlmb3JtcyBhcmVuJ3QgZm91bmQgaW4gdGhlIHNoYWRlciBjb2RlLlxuICAgICAgLy8gVE9ETzogYWRkIGEgdmVyYm9zZSBtb2RlIGZvciBkaWFnbm9zdGljcyBhbmQgZGVidWdnaW5nXG4gICAgICAvLyBjb25zb2xlLmVycm9yKCdObyB1bmlmb3JtIGxvY2F0aW9uIGZvcicsIGtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCIzZnZcIikge1xuICAgICAgZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1bmlmb3JtLnR5cGUgPT09IFwiM2l2XCIpIHtcbiAgICAgIGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHVuaWZvcm0udmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybS50eXBlID09PSBcIjRmdlwiKSB7XG4gICAgICBnbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCI0aXZcIikge1xuICAgICAgZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1bmlmb3JtLnR5cGUgPT09IFwiMWZcIikge1xuICAgICAgZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCIxdWlcIikge1xuICAgICAgZ2wudW5pZm9ybTF1aShsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1bmlmb3JtLnR5cGUgPT09IFwiMWlcIikge1xuICAgICAgZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCJNYXRyaXgzZnZcIikge1xuICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZ2wuRkFMU0UsIHVuaWZvcm0udmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybS50eXBlID09PSBcIk1hdHJpeDRmdlwiKSB7XG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBnbC5GQUxTRSwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3Qgc2V0IHVuaWZvcm1cIiwga2V5LCB1bmlmb3JtKTtcbiAgfVxuXG4gIGdlbmVyYXRlKCkge1xuICAgIGxldCBnbCA9IHRoaXMuZ2w7XG4gICAgbGV0IG91dHB1dEZpZWxkMCA9IHRoaXMub3V0cHV0RmllbGRzWzBdO1xuXG4gICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuXG4gICAgZ2wudmlld3BvcnQoXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIG91dHB1dEZpZWxkMC5waXhlbERpbWVuc2lvbnNbMF0sXG4gICAgICBvdXRwdXRGaWVsZDAucGl4ZWxEaW1lbnNpb25zWzFdXG4gICAgKTtcblxuICAgIC8vIHRoZSBjb29yZGluYXRlIGF0dHJpYnV0ZVxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnJlbmRlckltYWdlQ29vcmRpbmF0ZXNCdWZmZXIpO1xuICAgIGxldCBjb29yZGluYXRlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIFwiY29vcmRpbmF0ZVwiKTtcblxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGNvb3JkaW5hdGVMb2NhdGlvbik7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihjb29yZGluYXRlTG9jYXRpb24sIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAvLyB0aGUgdGV4dHVyZUNvb3JkaW5hdGUgYXR0cmlidXRlXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMucmVuZGVySW1hZ2VUZXh1cmVDb29yZGluYXRlc0J1ZmZlcik7XG4gICAgbGV0IHRleHR1cmVDb29yZGluYXRlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMucHJvZ3JhbSxcbiAgICAgIFwidGV4dHVyZUNvb3JkaW5hdGVcIlxuICAgICk7XG5cbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXh0dXJlQ29vcmRpbmF0ZUxvY2F0aW9uKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRleHR1cmVDb29yZGluYXRlTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAvLyB0aGUgb3ZlcmFsbCBhcHBsaWNhdGlvbiB1bmlmb3JtcywgYW5kIHRoZSBwZXItZmllbGQgdW5pZm9ybXNcbiAgICBPYmplY3Qua2V5cyh0aGlzLnVuaWZvcm1zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0aGlzLl9zZXRVbmlmb3JtKGtleSwgdGhpcy51bmlmb3Jtc1trZXldKTtcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0RmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgbGV0IHVuaWZvcm1zID0gZmllbGQudW5pZm9ybXMoKTtcblxuICAgICAgT2JqZWN0LmtleXModW5pZm9ybXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgdGhpcy5fc2V0VW5pZm9ybShrZXksIHVuaWZvcm1zW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhY3RpdmF0ZSBhbnkgZmllbGQgdGV4dHVyZXNcbiAgICBsZXQgdGV4dHVyZUluZGV4ID0gMDtcblxuICAgIHRoaXMuaW5wdXRGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdGV4dHVyZUluZGV4KTtcbiAgICAgIGlmIChmaWVsZC50ZXh0dXJlKSB7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfM0QsIGZpZWxkLnRleHR1cmUpO1xuICAgICAgfVxuICAgICAgbGV0IHRleHR1cmVTeW1ib2wgPSBcImlucHV0VGV4dHVyZVwiICsgdGV4dHVyZUluZGV4O1xuICAgICAgbGV0IHNhbXBsZXJMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHRleHR1cmVTeW1ib2wpO1xuXG4gICAgICBnbC51bmlmb3JtMWkoc2FtcGxlckxvY2F0aW9uLCB0ZXh0dXJlSW5kZXgpO1xuICAgICAgdGV4dHVyZUluZGV4Kys7XG4gICAgfSk7XG5cbiAgICAvLyBnZW5lcmF0ZSB0aGUgb3V0cHV0IGJ5IGludm9raW5nIHRoZSBwcm9ncmFtIG9uY2UgcGVyIHNsaWNlXG4gICAgbGV0IG1pcG1hcExldmVsID0gMDtcbiAgICBsZXQgc2xpY2VVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcInNsaWNlXCIpO1xuICAgIGxldCBmcmFtZXMgPSBvdXRwdXRGaWVsZDAucGl4ZWxEaW1lbnNpb25zWzJdO1xuICAgIGxldCBmYWxsYmFja1NsaWNlVmlld3MgPSB7fTtcblxuICAgIGZvciAobGV0IHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgZnJhbWVzOyBzbGljZUluZGV4KyspIHtcbiAgICAgIGxldCBzbGljZSA9ICgwLjUgKyBzbGljZUluZGV4KSAvIGZyYW1lcztcblxuICAgICAgZ2wudW5pZm9ybTFmKHNsaWNlVW5pZm9ybUxvY2F0aW9uLCBzbGljZSk7XG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuICAgICAgbGV0IGRyYXdCdWZmZXJzID0gW107XG4gICAgICBsZXQgYXR0YWNobWVudCA9IDA7XG5cbiAgICAgIHRoaXMub3V0cHV0RmllbGRzLmZvckVhY2gob3V0cHV0RmllbGQgPT4ge1xuICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllcihcbiAgICAgICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGF0dGFjaG1lbnQsXG4gICAgICAgICAgb3V0cHV0RmllbGQudGV4dHVyZSxcbiAgICAgICAgICBtaXBtYXBMZXZlbCxcbiAgICAgICAgICBzbGljZUluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGRyYXdCdWZmZXJzLnB1c2goZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBhdHRhY2htZW50KTtcbiAgICAgICAgYXR0YWNobWVudCsrO1xuICAgICAgfSk7XG4gICAgICBnbC5kcmF3QnVmZmVycyhkcmF3QnVmZmVycyk7XG4gICAgICBsZXQgc3RhdHVzID0gZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUik7XG5cbiAgICAgIGlmIChzdGF0dXMgIT09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJJbmNvbXBsZXRlIGZyYW1lYnVmZmVyOiBcIiArIEdlbmVyYXRvci5nbENvbnN0YW50TmFtZShzdGF0dXMpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcblxuICAgICAgLy9cbiAgICAgIC8vIG9wdGlvbmFsIHJlYWRiYWNrIG9mIHJlbmRlcmVkIHRleHR1cmUgd2hlbiBnZW5lcmF0ZWRQaXhlbERhdGEgZXhpc3RzXG4gICAgICAvLyAtIGF0dGVtcHQgdG8gcmVhZCBuYXRpdmUgcGl4ZWxzLCBidXQgZmFsbGJhY2sgdG8gcmdiYSBpZiBuZWVkZWRcbiAgICAgIC8vXG4gICAgICBhdHRhY2htZW50ID0gMDtcbiAgICAgIHRoaXMub3V0cHV0RmllbGRzLmZvckVhY2gob3V0cHV0RmllbGQgPT4ge1xuICAgICAgICBpZiAob3V0cHV0RmllbGQuZ2VuZXJhdGVkUGl4ZWxEYXRhKSB7XG4gICAgICAgICAgbGV0IFt3LCBoXSA9IFtvdXRwdXRGaWVsZC5kYXRhc2V0LkNvbHVtbnMsIG91dHB1dEZpZWxkLmRhdGFzZXQuUm93c107XG4gICAgICAgICAgbGV0IHNsaWNlUGl4ZWxDb3VudCA9IHcgKiBoO1xuICAgICAgICAgIGxldCBzbGljZUJ5dGVTdGFydCA9XG4gICAgICAgICAgICBzbGljZUluZGV4ICogc2xpY2VQaXhlbENvdW50ICogdGhpcy5zbGljZVZpZXdCeXRlc1BlckVsZW1lbnQ7XG4gICAgICAgICAgbGV0IHNsaWNlVmlldyA9IG5ldyB0aGlzLnNsaWNlVmlld0FycmF5VHlwZShcbiAgICAgICAgICAgIG91dHB1dEZpZWxkLmdlbmVyYXRlZFBpeGVsRGF0YSxcbiAgICAgICAgICAgIHNsaWNlQnl0ZVN0YXJ0LFxuICAgICAgICAgICAgc2xpY2VQaXhlbENvdW50XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGdsLnJlYWRCdWZmZXIoZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBhdHRhY2htZW50KTtcbiAgICAgICAgICBsZXQgc3VwcG9ydGVkRm9ybWF0ID0gZ2wuZ2V0UGFyYW1ldGVyKFxuICAgICAgICAgICAgZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVRcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCBzdXBwb3J0ZWRUeXBlID0gZ2wuZ2V0UGFyYW1ldGVyKFxuICAgICAgICAgICAgZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN1cHBvcnRlZEZvcm1hdCAhPT0gdGhpcy5yZWFkUGl4ZWxzRm9ybWF0IHx8XG4gICAgICAgICAgICBzdXBwb3J0ZWRUeXBlICE9PSB0aGlzLnJlYWRQaXhlbHNUeXBlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoIWZhbGxiYWNrU2xpY2VWaWV3c1thdHRhY2htZW50XSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBcIkZyYW1lYnVmZmVyIHJlYWQgbm90IHN1cHBvcnRlZCwgdXNpbmcgc2xvd2VyIGZhbGxiYWNrIG1ldGhvZFwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGZhbGxiYWNrU2xpY2VWaWV3c1tcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50XG4gICAgICAgICAgICAgIF0gPSBuZXcgdGhpcy5mYWxsYmFja1NsaWNlVmlld3NBcnJheVR5cGUoXG4gICAgICAgICAgICAgICAgdGhpcy5mYWxsYmFja051bWJlck9mQ29tcG9uZW50cyAqIHNsaWNlUGl4ZWxDb3VudFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZhbGxiYWNrU2xpY2VWaWV3ID0gZmFsbGJhY2tTbGljZVZpZXdzW2F0dGFjaG1lbnRdO1xuXG4gICAgICAgICAgICBnbC5yZWFkUGl4ZWxzKFxuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICB3LFxuICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICB0aGlzLmZhbGxiYWNrUmVhZFBpeGVsc0Zvcm1hdCxcbiAgICAgICAgICAgICAgdGhpcy5mYWxsYmFja1JlYWRQaXhlbHNUeXBlLFxuICAgICAgICAgICAgICBmYWxsYmFja1NsaWNlVmlld1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzbGljZVBpeGVsQ291bnQ7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgc2xpY2VWaWV3W2luZGV4XSA9XG4gICAgICAgICAgICAgICAgZmFsbGJhY2tTbGljZVZpZXdbdGhpcy5mYWxsYmFja051bWJlck9mQ29tcG9uZW50cyAqIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2wucmVhZFBpeGVscyhcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgdyxcbiAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgdGhpcy5yZWFkUGl4ZWxzRm9ybWF0LFxuICAgICAgICAgICAgICB0aGlzLnJlYWRQaXhlbHNUeXBlLFxuICAgICAgICAgICAgICBzbGljZVZpZXdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dGFjaG1lbnQrKztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFByb2dyYW1tYXRpY0dlbmVyYXRvciBmcm9tIFwiLi9Qcm9ncmFtbWF0aWNHZW5lcmF0b3JcIjtcbmltcG9ydCBsaW5lYXIgZnJvbSBcIi4vbGluZWFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJheUNhc3RSZW5kZXJlciBleHRlbmRzIFByb2dyYW1tYXRpY0dlbmVyYXRvciB7XG4gIC8vIExhc3QgbGluayBpbiBhIGNoYWluLCByZW5kZXJzIHRvIHRoZSBkZWZhdWx0IGZyYW1lIGJ1ZmZlclxuICAvLyB1c2luZyByYXkgY2FzdCBzaGFkZXIgcHJvZ3JhbVxuICAvL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmNhbnZhcyA9IG9wdGlvbnMuY2FudmFzO1xuICAgIHRoaXMucmF5Q29tcG9zaXRpbmcgPSBvcHRpb25zLnJheUNvbXBvc2l0aW5nIHx8IFwiaW50ZWdyYXRpb25cIjtcbiAgICBpZiAoISh0aGlzLnJheUNvbXBvc2l0aW5nIGluIFtcImludGVncmF0aW9uXCIsIFwibWF4aW11bVwiLCBcIm1pbmltdW1cIl0pKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgVW5rbm93biByYXlDb21wb3NpdGluZyBvcHRpb24gJHt0aGlzLnJheUNvbXBvc2l0aW5nfSwgdXNpbmcgaW50ZWdyYXRpb25gXG4gICAgICApO1xuICAgICAgdGhpcy5yYXlDb21wb3NpdGluZyA9IFwiaW50ZWdyYXRpb25cIjtcbiAgICB9XG4gICAgdGhpcy5tYXhpbXVtQ29tcG9zaXRpbmdGaWVsZCA9IG9wdGlvbnMubWF4aW11bUNvbXBvc2l0aW5nRmllbGQgfHwgMDtcbiAgICB0aGlzLnJlbmRlclJlcXVlc3RUaW1lb3V0ID0gb3B0aW9ucy5yZW5kZXJSZXF1ZXN0VGltZW91dCB8fCAxMDA7XG5cbiAgICB0aGlzLnBlbmRpbmdSZW5kZXJSZXF1ZXN0ID0gZmFsc2U7IC8vIGEgaGFuZGxlIHRvIHRoZSBvbmdvaW5nIHJlbmRlclxuICAgIHRoaXMucmVxdWVzdEFub3RoZXJSZW5kZXIgPSBmYWxzZTsgLy8gdHJpZ2dlciBhbm90aGVyIHdoZW4gdGhpcyBjb21wbGV0ZXNcblxuICAgIHRoaXMuc3luY1JlYXNvbnMgPSB7fTtcbiAgICB0aGlzLnN5bmNSZWFzb25zW3RoaXMuZ2wuQUxSRUFEWV9TSUdOQUxFRF0gPSBcIkFMUkVBRFlfU0lHTkFMRURcIjtcbiAgICB0aGlzLnN5bmNSZWFzb25zW3RoaXMuZ2wuVElNRU9VVF9FWFBJUkVEXSA9IFwiVElNRU9VVF9FWFBJUkVEXCI7XG4gICAgdGhpcy5zeW5jUmVhc29uc1t0aGlzLmdsLkNPTkRJVElPTl9TQVRJU0ZJRURdID0gXCJDT05ESVRJT05fU0FUSVNGSUVEXCI7XG4gICAgdGhpcy5zeW5jUmVhc29uc1t0aGlzLmdsLldBSVRfRkFJTEVEXSA9IFwiV0FJVF9GQUlMRURcIjtcbiAgfVxuXG4gIHVwZGF0ZVByb2dyYW0oKSB7XG4gICAgLy8gcmVjcmVhdGUgdGhlIHByb2dyYW0gYW5kIHRleHR1cmVzIGZvciB0aGUgY3VycmVudCBmaWVsZCBsaXN0XG4gICAgc3VwZXIudXBkYXRlUHJvZ3JhbSgpO1xuXG4gICAgLy8gcmVjYWxjdWxhdGUgY2VudGVyIGFuZCBib3VuZHNcbiAgICBsZXQgbGFyZ2UgPSBsaW5lYXIuTEFSR0VfTlVNQkVSO1xuXG4gICAgdGhpcy5ib3VuZHMgPSB7IG1pbjogW2xhcmdlLCBsYXJnZSwgbGFyZ2VdLCBtYXg6IFstbGFyZ2UsIC1sYXJnZSwgLWxhcmdlXSB9O1xuICAgIHRoaXMuaW5wdXRGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBbMCwgMSwgMl0uZm9yRWFjaChlID0+IHtcbiAgICAgICAgdGhpcy5ib3VuZHMubWluW2VdID0gTWF0aC5taW4odGhpcy5ib3VuZHMubWluW2VdLCBmaWVsZC5ib3VuZHMubWluW2VdKTtcbiAgICAgICAgdGhpcy5ib3VuZHMubWF4W2VdID0gTWF0aC5tYXgodGhpcy5ib3VuZHMubWF4W2VdLCBmaWVsZC5ib3VuZHMubWF4W2VdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuY2VudGVyID0gWzAsIDAsIDBdO1xuICAgIFswLCAxLCAyXS5mb3JFYWNoKGUgPT4ge1xuICAgICAgdGhpcy5jZW50ZXJbZV0gPSAodGhpcy5ib3VuZHMubWluW2VdICsgdGhpcy5ib3VuZHMubWF4W2VdKSAvIDI7XG4gICAgfSk7XG4gIH1cblxuICByZXF1ZXN0UmVuZGVyKHZpZXcpIHtcbiAgICBpZiAodmlldykge1xuICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB9XG4gICAgaWYgKHRoaXMucGVuZGluZ1JlbmRlclJlcXVlc3QpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic2tpcHBpbmcgcmVuZGVyIC0gcGVuZGluZyByZXF1ZXN0XCIpO1xuICAgICAgdGhpcy5yZXF1ZXN0QW5vdGhlclJlbmRlciA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ1JlbmRlclJlcXVlc3QgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKFxuICAgICAgdGhpcy5fcmVuZGVyLmJpbmQodGhpcylcbiAgICApO1xuICB9XG5cbiAgX3JlbmRlcigpIHtcbiAgICB0aGlzLnBlbmRpbmdSZW5kZXJSZXF1ZXN0ID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmdsKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInNraXBwaW5nIHJlbmRlciAtIG5vIGdsIGNvbnRleHRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy52aWV3KSB7XG4gICAgICBjb25zb2xlLmxvZyhcInNraXBwaW5nIHJlbmRlciAtIG5vIHZpZXdcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHByZXZpb3VzIHJlbmRlciBpcyBmaW5pc2hlZFxuICAgIGlmIChmYWxzZSkge1xuICAgICAgbGV0IHN5bmMgPSB0aGlzLmdsLmZlbmNlU3luYyh0aGlzLmdsLlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFLCAwKTtcbiAgICAgIGxldCByZWFzb24gPSB0aGlzLmdsLmNsaWVudFdhaXRTeW5jKFxuICAgICAgICBzeW5jLFxuICAgICAgICB0aGlzLmdsLlNZTkNfRkxVU0hfQ09NTUFORFNfQklULFxuICAgICAgICAxZTZcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZWFzb24gPT09IHRoaXMuZ2wuVElNRU9VVF9FWFBJUkVEKSB7XG4gICAgICAgIC8vIHRoZSBwcmV2aW91cyByZW5kZXIgaXMgbm90IHlldCBmaW5pc2hlZCwgc28gcmUtaXNzdWUgcmVxdWVzdFxuICAgICAgICB0aGlzLnJlcXVlc3RSZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2codGhpcy5zeW5jUmVhc29uc1tTdHJpbmcocmVhc29uKV0pO1xuICAgIH1cblxuICAgIGxldCBnbCA9IHRoaXMuZ2w7XG5cbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpOyAvLyBkcmF3IHRvIHRoZSBtYWluIGZyYW1lYnVmZmVyIVxuICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cbiAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG5cbiAgICAvLyB0aGUgY29vcmRpbmF0ZSBhdHRyaWJ1dGVcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5yZW5kZXJJbWFnZUNvb3JkaW5hdGVzQnVmZmVyKTtcbiAgICBsZXQgY29vcmRpbmF0ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImNvb3JkaW5hdGVcIik7XG5cbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjb29yZGluYXRlTG9jYXRpb24pO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoY29vcmRpbmF0ZUxvY2F0aW9uLCAzLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgLy8gdGhlIHRleHR1cmVDb29yZGluYXRlIGF0dHJpYnV0ZVxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnJlbmRlckltYWdlVGV4dXJlQ29vcmRpbmF0ZXNCdWZmZXIpO1xuICAgIGxldCB0ZXh0dXJlQ29vcmRpbmF0ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLnByb2dyYW0sXG4gICAgICBcInRleHR1cmVDb29yZGluYXRlXCJcbiAgICApO1xuXG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGV4dHVyZUNvb3JkaW5hdGVMb2NhdGlvbik7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0ZXh0dXJlQ29vcmRpbmF0ZUxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgLy8gdGhlIG92ZXJhbGwgYXBwbGljYXRpb24gdW5pZm9ybXMsIGFuZCB0aGUgcGVyLWZpZWxkIHVuaWZvcm1zXG4gICAgT2JqZWN0LmtleXModGhpcy51bmlmb3JtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy5fc2V0VW5pZm9ybShrZXksIHRoaXMudW5pZm9ybXNba2V5XSk7XG4gICAgfSk7XG4gICAgbGV0IHVuaWZvcm1zID0gdGhpcy52aWV3LnVuaWZvcm1zKCk7XG5cbiAgICBPYmplY3Qua2V5cyh1bmlmb3JtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy5fc2V0VW5pZm9ybShrZXksIHVuaWZvcm1zW2tleV0pO1xuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBsZXQgdW5pZm9ybXMgPSBmaWVsZC51bmlmb3JtcygpO1xuXG4gICAgICBPYmplY3Qua2V5cyh1bmlmb3JtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLl9zZXRVbmlmb3JtKGtleSwgdW5pZm9ybXNba2V5XSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIGFjdGl2YXRlIGFueSBmaWVsZCB0ZXh0dXJlc1xuICAgIHRoaXMuaW5wdXRGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgZmllbGQuaWQpO1xuICAgICAgaWYgKGZpZWxkLnRleHR1cmUpIHtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8zRCwgZmllbGQudGV4dHVyZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcblxuICAgIC8vIGlmIGFuIGV2ZW50IHJlcXVlc3RlZCBhIHJlbmRlciB3aGlsZSBnbCB3YXMgd29ya2luZywgcmVxdWVzdCBhbm90aGVyXG4gICAgaWYgKHRoaXMucmVxdWVzdEFub3RoZXJSZW5kZXIpIHtcbiAgICAgIHRoaXMucmVxdWVzdEFub3RoZXJSZW5kZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVxdWVzdFJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UoKSB7XG4gICAgbGV0IHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UgPSBcIlwiO1xuXG4gICAgdGhpcy5pbnB1dEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2UgKz0gZmllbGQudHJhbnNmb3JtU2hhZGVyU291cmNlKCk7XG4gICAgICBwZXJGaWVsZFNhbXBsaW5nU2hhZGVyU291cmNlICs9IGZpZWxkLnNhbXBsaW5nU2hhZGVyU291cmNlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBlckZpZWxkU2FtcGxpbmdTaGFkZXJTb3VyY2U7XG4gIH1cblxuICBwZXJGaWVsZENvbXBvc2l0aW5nU2hhZGVyU291cmNlKCkge1xuICAgIGxldCBzb3VyY2UgPSBcIlwiO1xuXG4gICAgdGhpcy5pbnB1dEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIHNvdXJjZSArPSBgXG4gICAgICAgICAgICBpZiAodmlzaWJsZSR7ZmllbGQuaWR9ID4gMCkge1xuICAgICAgICAgICAgICAvLyBhY2N1bXVsYXRlIHBlci1maWVsZCBvcGFjaXRpZXMgYW5kIGxpdCBjb2xvcnNcbiAgICAgICAgICAgICAgc2FtcGxlRmllbGQke2ZpZWxkLmlkfSh0ZXh0dXJlVW5pdCR7ZmllbGQuaWR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVQb2ludCwgZ3JhZGllbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVWYWx1ZSwgbm9ybWFsLCBncmFkaWVudE1hZ25pdHVkZSk7XG4gICAgICAgICAgICAgIHRyYW5zZmVyRnVuY3Rpb24ke2ZpZWxkLmlkfShzYW1wbGVWYWx1ZSwgZ3JhZGllbnRNYWduaXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLCBmaWVsZE9wYWNpdHkpO1xuICAgICAgICAgICAgICBjb2xvclN1bSArPSBjb2xvcjtcbiAgICAgICAgICAgICAgbGl0Q29sb3IgKz0gZmllbGRPcGFjaXR5ICogbGlnaHRpbmdNb2RlbChzYW1wbGVQb2ludCwgbm9ybWFsLCBjb2xvciwgdmlld1BvaW50KTtcbiAgICAgICAgICAgICAgb3BhY2l0eSArPSBmaWVsZE9wYWNpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZpZWxkQ29tcG9zaXRpbmdTaGFkZXJTb3VyY2UoKSB7XG4gICAgbGV0IGZpZWxkQ29tcG9zaXRpbmdTaGFkZXJTb3VyY2UgPSBgXG4gICAgICAgICAgICB2ZWMzIG5vcm1hbDtcbiAgICAgICAgICAgIGZsb2F0IGdyYWRpZW50TWFnbml0dWRlO1xuICAgICAgICAgICAgdmVjMyBjb2xvcjtcbiAgICAgICAgICAgIGZsb2F0IG9wYWNpdHkgPSAwLjtcbiAgICAgICAgICAgIHZlYzMgbGl0Q29sb3IgPSB2ZWMzKDAuKTtcbiAgICAgICAgICAgIGZsb2F0IGZpZWxkT3BhY2l0eSA9IDAuO1xuICAgICAgICAgICAgdmVjMyBmaWVsZExpdENvbG9yID0gdmVjMygwLik7XG4gICAgICAgICAgICB2ZWMzIGNvbG9yU3VtID0gdmVjMygwLik7XG4gIFxuICAgICAgICAgICAgJHt0aGlzLnBlckZpZWxkQ29tcG9zaXRpbmdTaGFkZXJTb3VyY2UoKX1cbiAgXG4gICAgICAgICAgICAvLyBub3JtYWxpemUgYmFjayBzbyB0aGF0IGxpdENvbG9yIGlzIG1lYW4gb2YgYWxsIGlucHV0RmllbGRzIHdlaWdodGVkIGJ5IG9wYWNpdHlcbiAgICAgICAgICAgIGxpdENvbG9yIC89IG9wYWNpdHk7XG4gICAgICBgO1xuXG4gICAgcmV0dXJuIGZpZWxkQ29tcG9zaXRpbmdTaGFkZXJTb3VyY2U7XG4gIH1cblxuICByYXlDb21wb3NpdGluZ1NoYWRlclNvdXJjZSgpIHtcbiAgICBpZiAodGhpcy5yYXlDb21wb3NpdGluZyA9PT0gXCJpbnRlZ3JhdGlvblwiKSB7XG4gICAgICByZXR1cm4gYFxuICAgICAgICAgIC8vIGh0dHA6Ly9ncmFwaGljc3J1bm5lci5ibG9nc3BvdC5jb20vMjAwOS8wMS92b2x1bWUtcmVuZGVyaW5nLTEwMS5odG1sXG4gICAgICAgICAgaWYgKG9wYWNpdHkgPiAwLikge1xuICAgICAgICAgICAgb3BhY2l0eSAqPSBhZGp1c3RlZFN0ZXA7XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwucmdiICs9ICgxLiAtIGludGVncmF0ZWRQaXhlbC5hKSAqIG9wYWNpdHkgKiBsaXRDb2xvcjtcbiAgICAgICAgICAgIGludGVncmF0ZWRQaXhlbC5hICs9ICgxLiAtIGludGVncmF0ZWRQaXhlbC5hKSAqIG9wYWNpdHk7XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwgPSBjbGFtcChpbnRlZ3JhdGVkUGl4ZWwsIDAuMDAwMSwgMC45OTk5KTtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIGlmIChzbGljZU1vZGUgPT0gMSkge1xuICAgICAgICAgICAgaW50ZWdyYXRlZFBpeGVsLnJnYiA9IGNvbG9yU3VtO1xuICAgICAgICAgICAgaW50ZWdyYXRlZFBpeGVsLmEgPSAxLjtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIHRDdXJyZW50ICs9IGFkanVzdGVkU3RlcDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRDdXJyZW50ID49IHRGYXIgIC8vIHN0ZXBwZWQgb3V0IG9mIHRoZSB2b2x1bWVcbiAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICB0Q3VycmVudCA+PSB2aWV3RmFyIC8vIGZhciBjbGlwIHBsYW5lXG4gICAgICAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgaW50ZWdyYXRlZFBpeGVsLmEgPj0gLjk5ICAvLyBwaXhlbCBpcyBzYXR1cmF0ZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGJyZWFrOyAvLyB3ZSBjYW4gc3RvcCBub3dcbiAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJheUNvbXBvc2l0aW5nID09PSBcIm1heGltdW1cIikge1xuICAgICAgcmV0dXJuIGBcbiAgXG4gICAgICAgICAgLy8gTUlQIHJlbmRlcmluZyB1c2luZyBhbHBoYSB0byBzdG9yZSBtYXggcGl4ZWwgdmFsdWVcbiAgICAgICAgICAvLyAtIHJlLXNhbXBsZSBzZWxlY3RlZCBmaWVsZFxuICAgICAgICAgIC8vIC0gaWYgaXRzIHIgY29tcG9uZW50IGlzIG1heCwgdGhlbiB1c2Ugc3VtbWVkIGNvbG9yIGZvciB0aGlzIHNhbXBsZSBwb2ludFxuICAgICAgICAgIHNhbXBsZUZpZWxkJHt0aGlzLm1heGltdW1Db21wb3NpdGluZ0ZpZWxkfSh0ZXh0dXJlVW5pdCR7dGhpcy5tYXhpbXVtQ29tcG9zaXRpbmdGaWVsZH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlUG9pbnQsIGdyYWRpZW50U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVWYWx1ZSwgbm9ybWFsLCBncmFkaWVudE1hZ25pdHVkZSk7XG4gICAgICAgICAgdHJhbnNmZXJGdW5jdGlvbiR7dGhpcy5tYXhpbXVtQ29tcG9zaXRpbmdGaWVsZH0oc2FtcGxlVmFsdWUsIGdyYWRpZW50TWFnbml0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLCBmaWVsZE9wYWNpdHkpO1xuICAgICAgICAgIGlmIChzYW1wbGVWYWx1ZSA+IGludGVncmF0ZWRQaXhlbC5hKSB7XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwucmdiID0gY29sb3JTdW07XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwuYSA9IHNhbXBsZVZhbHVlO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgaWYgKHNsaWNlTW9kZSA9PSAxKSB7XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwucmdiID0gY29sb3JTdW07XG4gICAgICAgICAgICBpbnRlZ3JhdGVkUGl4ZWwuYSA9IDEuO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgdEN1cnJlbnQgKz0gYWRqdXN0ZWRTdGVwO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdEN1cnJlbnQgPj0gdEZhciAgLy8gc3RlcHBlZCBvdXQgb2YgdGhlIHZvbHVtZVxuICAgICAgICAgICAgICAgIHx8XG4gICAgICAgICAgICAgIHRDdXJyZW50ID49IHZpZXdGYXIgLy8gZmFyIGNsaXAgcGxhbmVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGludGVncmF0ZWRQaXhlbC5hID0gMS47IC8vIGFsd2F5cyByZXR1cm5zIGEgZnVsbHkgb3BhcXVlIHZhbHVlIG9mIHRoZSBtYXggc2FtcGxlXG4gICAgICAgICAgICBicmVhazsgLy8gd2UgY2FuIHN0b3Agbm93XG4gICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgX3ZlcnRleFNoYWRlclNvdXJjZSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5oZWFkZXJTb3VyY2UoKX1cbiAgICAgICAgaW4gdmVjMyBjb29yZGluYXRlO1xuICAgICAgICBpbiB2ZWMyIHRleHR1cmVDb29yZGluYXRlO1xuICAgICAgICBvdXQgdmVjMyBpbnRlcnBvbGF0ZWRUZXh0dXJlQ29vcmRpbmF0ZTtcbiAgICAgICAgdm9pZCBtYWluKClcbiAgICAgICAge1xuICAgICAgICAgIGludGVycG9sYXRlZFRleHR1cmVDb29yZGluYXRlID0gdmVjMyh0ZXh0dXJlQ29vcmRpbmF0ZSwgLjUpO1xuICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChjb29yZGluYXRlLCAxLik7XG4gICAgICAgIH1cbiAgICAgIGA7XG4gIH1cblxuICBfZnJhZ21lbnRTaGFkZXJTb3VyY2UoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuaGVhZGVyU291cmNlKCl9XG4gIFxuICAgICAgICB1bmlmb3JtIHZlYzMgcG9pbnRMaWdodDtcbiAgICAgICAgdW5pZm9ybSB2ZWMzIHZpZXdQb2ludDtcbiAgICAgICAgdW5pZm9ybSB2ZWMzIHZpZXdOb3JtYWw7XG4gICAgICAgIHVuaWZvcm0gdmVjMyB2aWV3UmlnaHQ7XG4gICAgICAgIHVuaWZvcm0gdmVjMyB2aWV3VXA7XG4gICAgICAgIHVuaWZvcm0gZmxvYXQgaGFsZlNpblZpZXdBbmdsZTtcbiAgICAgICAgdW5pZm9ybSB2ZWMzIHZpZXdCb3hNaW47XG4gICAgICAgIHVuaWZvcm0gdmVjMyB2aWV3Qm94TWF4O1xuICAgICAgICB1bmlmb3JtIGZsb2F0IHZpZXdOZWFyO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IHZpZXdGYXI7XG4gICAgICAgIHVuaWZvcm0gZmxvYXQgZ3JhZGllbnRTaXplO1xuICAgICAgICB1bmlmb3JtIGludCByYXlNYXhTdGVwcztcbiAgICAgICAgdW5pZm9ybSBmbG9hdCBzYW1wbGVTdGVwO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IHJlbmRlckNhbnZhc1dpZHRoO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IHJlbmRlckNhbnZhc0hlaWdodDtcbiAgICAgICAgdW5pZm9ybSBpbnQgc2xpY2VNb2RlO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IEthbWJpZW50OyAvLyBUT0RPOiBtb3ZlIHRvIHBlci1maWVsZFxuICAgICAgICB1bmlmb3JtIGZsb2F0IEtkaWZmdXNlO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IEtzcGVjdWxhcjtcbiAgICAgICAgdW5pZm9ybSBmbG9hdCBTaGluaW5lc3M7XG4gIFxuICAgICAgICBib29sIGludGVyc2VjdEJveChjb25zdCBpbiB2ZWMzIHJheU9yaWdpbiwgY29uc3QgaW4gdmVjMyByYXlEaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIHZlYzMgYm94TWluLCBjb25zdCBpbiB2ZWMzIGJveE1heCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IGZsb2F0IHROZWFyLCBvdXQgZmxvYXQgdEZhcilcbiAgICAgICAgICAvLyBpbnRlcnNlY3QgcmF5IHdpdGggYSBib3hcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm96b3JnaS9WVEtNdWx0aVZvbHVtZVJheUNhc3Rlci9ibG9iL21hc3Rlci9SRUFETUUucGRmXG4gICAgICAgICAgLy8gaHR0cDovL3d3dy5zaWdncmFwaC5vcmcvZWR1Y2F0aW9uL21hdGVyaWFscy9IeXBlckdyYXBoL3JheXRyYWNlL3J0aW50ZXIzLmh0bVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjb21wdXRlIGludGVyc2VjdGlvbiBvZiByYXkgd2l0aCBhbGwgc2l4IGJib3ggcGxhbmVzXG4gICAgICAgICAgICB2ZWMzIGludlJheSA9IHZlYzMoMS4pIC8gcmF5RGlyZWN0aW9uO1xuICAgICAgICAgICAgdmVjMyB0Qm90ID0gaW52UmF5ICogKGJveE1pbiAtIHJheU9yaWdpbik7XG4gICAgICAgICAgICB2ZWMzIHRUb3AgPSBpbnZSYXkgKiAoYm94TWF4IC0gcmF5T3JpZ2luKTtcbiAgXG4gICAgICAgICAgICAvLyByZS1vcmRlciBpbnRlcnNlY3Rpb25zIHRvIGZpbmQgc21hbGxlc3QgYW5kIGxhcmdlc3Qgb24gZWFjaCBheGlzXG4gICAgICAgICAgICB2ZWMzIHRNaW4gPSBtaW4odFRvcCwgdEJvdCk7XG4gICAgICAgICAgICB2ZWMzIHRNYXggPSBtYXgodFRvcCwgdEJvdCk7XG4gIFxuICAgICAgICAgICAgLy8gZmluZCB0aGUgbGFyZ2VzdCB0TWluIGFuZCB0aGUgc21hbGxlc3QgdE1heFxuICAgICAgICAgICAgZmxvYXQgbGFyZ2VzdF90TWluID0gbWF4KG1heCh0TWluLngsIHRNaW4ueSksIG1heCh0TWluLngsIHRNaW4ueikpO1xuICAgICAgICAgICAgZmxvYXQgc21hbGxlc3RfdE1heCA9IG1pbihtaW4odE1heC54LCB0TWF4LnkpLCBtaW4odE1heC54LCB0TWF4LnopKTtcbiAgXG4gICAgICAgICAgICB0TmVhciA9IGxhcmdlc3RfdE1pbjtcbiAgICAgICAgICAgIHRGYXIgPSBzbWFsbGVzdF90TWF4O1xuICBcbiAgICAgICAgICAgIHJldHVybiBzbWFsbGVzdF90TWF4ID4gbGFyZ2VzdF90TWluO1xuICAgICAgICB9XG4gIFxuICAgICAgICB2ZWMzIGxpZ2h0aW5nTW9kZWwoIGluIHZlYzMgc2FtcGxlUG9pbnQsIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIGNvbG9yLCBpbiB2ZWMzIHZpZXdQb2ludCApXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBQaG9uZyBsaWdodGluZ1xuICAgICAgICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGhvbmdfcmVmbGVjdGlvbl9tb2RlbFxuICAgICAgICAgIHZlYzMgQ2FtYmllbnQgPSBjb2xvcjtcbiAgICAgICAgICB2ZWMzIENkaWZmdXNlID0gY29sb3I7XG4gICAgICAgICAgdmVjMyBDc3BlY3VsYXIgPSB2ZWMzKDEuLDEuLDEuKTtcbiAgXG4gICAgICAgICAgdmVjMyBsaXRDb2xvciA9IEthbWJpZW50ICogQ2FtYmllbnQ7XG4gICAgICAgICAgdmVjMyBwb2ludFRvRXllID0gbm9ybWFsaXplKHZpZXdQb2ludCAtIHNhbXBsZVBvaW50KTtcbiAgXG4gICAgICAgICAgaWYgKGRvdChwb2ludFRvRXllLCBub3JtYWwpID4gMC4pIHtcbiAgICAgICAgICAgIHZlYzMgcG9pbnRUb0xpZ2h0ID0gbm9ybWFsaXplKHBvaW50TGlnaHQgLSBzYW1wbGVQb2ludCk7XG4gICAgICAgICAgICBmbG9hdCBsaWdodERvdCA9IGRvdChwb2ludFRvTGlnaHQsbm9ybWFsKTtcbiAgICAgICAgICAgIHZlYzMgbGlnaHRSZWZsZWN0aW9uID0gcmVmbGVjdChwb2ludFRvTGlnaHQsbm9ybWFsKTtcbiAgICAgICAgICAgIGZsb2F0IHJlZmxlY3REb3QgPSBkb3QobGlnaHRSZWZsZWN0aW9uLHBvaW50VG9FeWUpO1xuICAgICAgICAgICAgaWYgKGxpZ2h0RG90ID4gMC4pIHtcbiAgICAgICAgICAgICAgbGl0Q29sb3IgKz0gS2RpZmZ1c2UgKiBsaWdodERvdCAqIENkaWZmdXNlO1xuICAgICAgICAgICAgICBsaXRDb2xvciArPSBLc3BlY3VsYXIgKiBwb3coIGFicyhyZWZsZWN0RG90KSwgU2hpbmluZXNzICkgKiBDc3BlY3VsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjbGFtcChsaXRDb2xvciwgMC4sIDEuKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gdGhlc2UgYXJlIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9ucyBmb3Igc2FtcGxlVm9sdW1lKiBhbmQgdHJhbnNmZXJGdW5jdGlvbipcbiAgICAgICAgLy8gdGhhdCBkZWZpbmUgYSBmaWVsZCBhdCBhIHNhbXBsZSBwb2ludCBpbiBzcGFjZVxuICAgICAgICAke3RoaXMucGVyRmllbGRTYW1wbGluZ1NoYWRlclNvdXJjZSgpfVxuICBcbiAgICAgICAgLy8gZmllbGQgcmF5IGNhc3RlciAtIHN0YXJ0cyBmcm9tIHRoZSBmcm9udCBhbmQgY29sbGVjdHMgY29sb3IgYW5kIG9wYWNpdHlcbiAgICAgICAgLy8gY29udHJpYnV0aW9ucyB1bnRpbCBmdWxseSBzYXR1cmF0ZWQuXG4gICAgICAgIC8vIFNhbXBsZSBjb29yZGluYXRlIGlzIDAtPjEgdGV4dHVyZSBzcGFjZVxuICAgICAgICAvL1xuICAgICAgICB2ZWM0IHJheUNhc3QoIGluIHZlYzMgc2FtcGxlQ29vcmRpbmF0ZSApXG4gICAgICAgIHtcbiAgICAgICAgICB2ZWM0IGJhY2tncm91bmRSR0JBID0gdmVjNCguMjUsIC4yNSwgLjI1LCAxLik7XG4gIFxuICAgICAgICAgIGZsb2F0IGFzcGVjdCA9IHJlbmRlckNhbnZhc1dpZHRoIC8gcmVuZGVyQ2FudmFzSGVpZ2h0O1xuICAgICAgICAgIHZlYzIgbm9ybWFsaXplZENvb3JkaW5hdGUgPSAyLiAqIChzYW1wbGVDb29yZGluYXRlLnN0IC0uNSk7XG4gICAgICAgICAgbm9ybWFsaXplZENvb3JkaW5hdGUucyAqPSBhc3BlY3Q7XG4gIFxuICAgICAgICAgIC8vIGNhbGN1bGF0ZSBleWUgcmF5IGluIHdvcmxkIHNwYWNlXG4gICAgICAgICAgdmVjMyBleWVSYXlEaXJlY3Rpb247XG4gIFxuICAgICAgICAgIC8vIHx8dmlld05vcm1hbCArIHUgKiB2aWV3UmlnaHQgKyB2ICogdmlld1VwfHxcbiAgICAgICAgICBleWVSYXlEaXJlY3Rpb24gPSBub3JtYWxpemUgKCB2aWV3Tm9ybWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdmlld1JpZ2h0ICogaGFsZlNpblZpZXdBbmdsZSAqIG5vcm1hbGl6ZWRDb29yZGluYXRlLnhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB2aWV3VXAgKiBoYWxmU2luVmlld0FuZ2xlICogbm9ybWFsaXplZENvb3JkaW5hdGUueSApO1xuICBcbiAgICAgICAgICAvLyBzaG91bGQgYmUgcmlnaHQgLSBUT0RPOiBkb3VibGVjaGVjayB3aGVuIHRyaWxpbmVhciBpbnRlcnBvbGF0aW9uIGlzIGZpeGVkXG4gICAgICAgICAgZmxvYXQgYWRqdXN0bWVudCA9IGRvdCAobm9ybWFsaXplKHZpZXdOb3JtYWwpLCBleWVSYXlEaXJlY3Rpb24pO1xuICAgICAgICAgIGZsb2F0IGFkanVzdGVkU3RlcCA9IHNhbXBsZVN0ZXAgKiBhZGp1c3RtZW50O1xuICBcbiAgICAgICAgICAvLyBmaW5kIGludGVyc2VjdGlvbiB3aXRoIGJveCwgcG9zc2libHkgdGVybWluYXRlIGVhcmx5XG4gICAgICAgICAgZmxvYXQgdE5lYXIsIHRGYXI7XG4gICAgICAgICAgYm9vbCBoaXQgPSBpbnRlcnNlY3RCb3goIHZpZXdQb2ludCwgZXllUmF5RGlyZWN0aW9uLCB2aWV3Qm94TWluLCB2aWV3Qm94TWF4LCB0TmVhciwgdEZhciApO1xuICAgICAgICAgIGlmICghaGl0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGJhY2tncm91bmRSR0JBKTtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIHROZWFyID0gbWF4KHROZWFyLCAwLik7XG4gICAgICAgICAgdE5lYXIgPSBtYXgodE5lYXIsIHZpZXdOZWFyKTsgLy8gbmVhciBjbGlwcGluZyBwbGFuZVxuICAgICAgICAgIHROZWFyIC89IGFkanVzdG1lbnQ7XG4gIFxuICAgICAgICAgIC8vIG1hcmNoIGFsb25nIHJheSBmcm9tIGZyb250LCBhY2N1bXVsYXRpbmcgY29sb3IgYW5kIG9wYWNpdHlcbiAgICAgICAgICB2ZWM0IGludGVncmF0ZWRQaXhlbCA9IHZlYzQoMC4pO1xuICAgICAgICAgIGZsb2F0IHRDdXJyZW50ID0gdE5lYXI7XG4gICAgICAgICAgZmxvYXQgc2FtcGxlVmFsdWU7XG4gICAgICAgICAgaW50IHJheVN0ZXA7XG4gICAgICAgICAgZm9yKHJheVN0ZXAgPSAwOyByYXlTdGVwIDwgcmF5TWF4U3RlcHM7IHJheVN0ZXArKykge1xuICBcbiAgICAgICAgICAgIHZlYzMgc2FtcGxlUG9pbnQgPSB2aWV3UG9pbnQgKyBleWVSYXlEaXJlY3Rpb24gKiB0Q3VycmVudDtcbiAgXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBjb2RlIHRoYXQgY29tcG9zaXRlcyB0b2dldGhlciBzYW1wbGVzXG4gICAgICAgICAgICAvLyBmcm9tIGFsbCB0aGUgaW5wdXRGaWVsZHMgaW4gdGhlIHNwYWNlXG4gICAgICAgICAgICAke3RoaXMuZmllbGRDb21wb3NpdGluZ1NoYWRlclNvdXJjZSgpfVxuICBcbiAgICAgICAgICAgICR7dGhpcy5yYXlDb21wb3NpdGluZ1NoYWRlclNvdXJjZSgpfVxuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgcmV0dXJuKHZlYzQobWl4KGJhY2tncm91bmRSR0JBLnJnYiwgaW50ZWdyYXRlZFBpeGVsLnJnYiwgaW50ZWdyYXRlZFBpeGVsLmEpLCAxLikpO1xuICAgICAgICB9XG4gIFxuICAgICAgICBpbiB2ZWMzIGludGVycG9sYXRlZFRleHR1cmVDb29yZGluYXRlO1xuICAgICAgICBvdXQgdmVjNCBmcmFnbWVudENvbG9yO1xuICAgICAgICB2b2lkIG1haW4oKVxuICAgICAgICB7XG4gICAgICAgICAgZnJhZ21lbnRDb2xvciA9IHJheUNhc3QoaW50ZXJwb2xhdGVkVGV4dHVyZUNvb3JkaW5hdGUpO1xuICAgICAgICB9XG4gIFxuICAgICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IGxpbmVhciBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlldyB7XG4gIC8vIEFsbCB0aGUgcGFyYW1ldGVycyBvZiB0aGUgdmlldyAoY2FtZXJhIHBsdXMgcGxhbmVzIGFuZCBvdGhlciBvcHRpb25zKVxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBsZXQgYyA9IGxpbmVhci52Y2xvbmU7XG5cbiAgICB0aGlzLnZpZXdQb2ludCA9IGMob3B0aW9ucy52aWV3UG9pbnQpIHx8IFswLCAwLCAtMzBdO1xuICAgIHRoaXMudmlld05vcm1hbCA9IGxpbmVhci52bm9ybWFsaXplKG9wdGlvbnMudmlld05vcm1hbCB8fCBbMCwgMCwgMS41XSk7XG4gICAgdGhpcy52aWV3VXAgPSBsaW5lYXIudm5vcm1hbGl6ZShvcHRpb25zLnZpZXdVcCB8fCBbMCwgLTEsIDBdKTtcbiAgICB0aGlzLnZpZXdEaXN0YW5jZSA9IG9wdGlvbnMudmlld0Rpc3RhbmNlIHx8IGxpbmVhci52bGVuZ3RoKHRoaXMudmlld1BvaW50KTtcbiAgICB0aGlzLnZpZXdCb3hNaW4gPSBjKG9wdGlvbnMudmlld0JveE1pbikgfHwgWy0zLCAtMywgLTNdO1xuICAgIHRoaXMudmlld0JveE1heCA9IGMob3B0aW9ucy52aWV3Qm94TWF4KSB8fCBbMywgMywgM107XG4gICAgdGhpcy52aWV3QW5nbGUgPSBvcHRpb25zLnZpZXdBbmdsZSB8fCAzMDtcbiAgICB0aGlzLnZpZXdOZWFyID0gMDtcbiAgICB0aGlzLnZpZXdGYXIgPSAzZTM4OyAvLyBiYXNpY2FsbHkgZmxvYXQgbWF4XG5cbiAgICB0aGlzLmxvb2soKTtcbiAgfVxuXG4gIHVuaWZvcm1zKCkge1xuICAgIGxldCBoYWxmU2luVmlld0FuZ2xlID0gMC41ICogTWF0aC5zaW4oKHRoaXMudmlld0FuZ2xlICogTWF0aC5QSSkgLyAxODApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZXdQb2ludDogeyB0eXBlOiBcIjNmdlwiLCB2YWx1ZTogdGhpcy52aWV3UG9pbnQgfSxcbiAgICAgIHZpZXdOb3JtYWw6IHsgdHlwZTogXCIzZnZcIiwgdmFsdWU6IHRoaXMudmlld05vcm1hbCB9LFxuICAgICAgdmlld1JpZ2h0OiB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiB0aGlzLnZpZXdSaWdodCB9LFxuICAgICAgdmlld1VwOiB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiB0aGlzLnZpZXdVcCB9LFxuICAgICAgdmlld0JveE1pbjogeyB0eXBlOiBcIjNmdlwiLCB2YWx1ZTogdGhpcy52aWV3Qm94TWluIH0sXG4gICAgICB2aWV3Qm94TWF4OiB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiB0aGlzLnZpZXdCb3hNYXggfSxcbiAgICAgIGhhbGZTaW5WaWV3QW5nbGU6IHsgdHlwZTogXCIxZlwiLCB2YWx1ZTogaGFsZlNpblZpZXdBbmdsZSB9LFxuICAgICAgdmlld05lYXI6IHsgdHlwZTogXCIxZlwiLCB2YWx1ZTogdGhpcy52aWV3TmVhciB9LFxuICAgICAgdmlld0ZhcjogeyB0eXBlOiBcIjFmXCIsIHZhbHVlOiB0aGlzLnZpZXdGYXIgfVxuICAgIH07XG4gIH1cblxuICB0YXJnZXQoKSB7XG4gICAgdGhpcy52aWV3Tm9ybWFsID0gbGluZWFyLnZub3JtYWxpemUodGhpcy52aWV3Tm9ybWFsKTtcbiAgICByZXR1cm4gbGluZWFyLnZwbHVzKFxuICAgICAgdGhpcy52aWV3UG9pbnQsXG4gICAgICBsaW5lYXIudnNjYWxlKHRoaXMudmlld05vcm1hbCwgdGhpcy52aWV3RGlzdGFuY2UpXG4gICAgKTtcbiAgfVxuXG4gIGxvb2sob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGF0ID0gb3B0aW9ucy5hdCB8fCB0aGlzLnRhcmdldCgpO1xuICAgIGxldCBmcm9tID0gb3B0aW9ucy5mcm9tIHx8IHRoaXMudmlld1BvaW50O1xuICAgIGxldCB1cCA9IG9wdGlvbnMudXAgfHwgdGhpcy52aWV3VXA7XG4gICAgbGV0IGJvdW5kcyA9IG9wdGlvbnMuYm91bmRzO1xuXG4gICAgaWYgKGJvdW5kcykge1xuICAgICAgdGhpcy52aWV3Qm94TWluID0gYm91bmRzLm1pbjtcbiAgICAgIHRoaXMudmlld0JveE1heCA9IGJvdW5kcy5tYXg7XG4gICAgfVxuICAgIHRoaXMudmlld05vcm1hbCA9IGxpbmVhci52bm9ybWFsaXplKGxpbmVhci52bWludXMoYXQsIGZyb20pKTtcbiAgICB0aGlzLnZpZXdSaWdodCA9IGxpbmVhci52bm9ybWFsaXplKGxpbmVhci52Y3Jvc3ModGhpcy52aWV3Tm9ybWFsLCB1cCkpO1xuICAgIHRoaXMudmlld1VwID0gbGluZWFyLnZjcm9zcyh0aGlzLnZpZXdSaWdodCwgdGhpcy52aWV3Tm9ybWFsKTtcbiAgICB0aGlzLnZpZXdQb2ludCA9IGxpbmVhci52Y2xvbmUoZnJvbSk7XG4gICAgdGhpcy52aWV3RGlzdGFuY2UgPSBsaW5lYXIudmRpc3RhbmNlKGF0LCBmcm9tKTtcbiAgfVxuXG4gIHNsaWNlKG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBwbGFuZSA9IG9wdGlvbnMucGxhbmUgfHwgXCJheGlhbFwiO1xuICAgIGxldCBvZmZzZXQgPSBvcHRpb25zLm9mZnNldCB8fCAwLjU7XG4gICAgbGV0IHRoaWNrbmVzcyA9IG9wdGlvbnMudGhpY2tuZXNzIHx8IDA7XG4gICAgbGV0IGJvdW5kcyA9IG9wdGlvbnMuYm91bmRzIHx8IHtcbiAgICAgIG1pbjogdGhpcy52aWV3Qm94TWluLFxuICAgICAgbWF4OiB0aGlzLnZpZXdCb3hNYXhcbiAgICB9O1xuICAgIGxldCBtYWduaWZpY2F0aW9uID0gb3B0aW9ucy5tYWduaWZpY2F0aW9uIHx8IDE7XG4gICAgbGV0IHRhcmdldCA9XG4gICAgICBvcHRpb25zLnRhcmdldCB8fFxuICAgICAgbGluZWFyLnZzY2FsZShsaW5lYXIudnBsdXMoYm91bmRzLm1pbiwgYm91bmRzLm1heCksIG9mZnNldCk7XG4gICAgbGV0IGV4dGVudCA9IG9wdGlvbnMuZXh0ZW50IHx8IGxpbmVhci52bWludXMoYm91bmRzLm1heCwgYm91bmRzLm1pbik7XG5cbiAgICAvLyBUT0RPOiBkb3VibGVjaGVjayB0aGVzZSB3aXRoIFNsaWNlclxuICAgIHN3aXRjaCAocGxhbmUpIHtcbiAgICAgIGNhc2UgXCJheGlhbFwiOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gbG9va2luZyBmcm9tIGJlbG93IGF0IExQUyBzbGljZVxuICAgICAgICAgIHRoaXMudmlld1JpZ2h0ID0gWzEsIDAsIDBdO1xuICAgICAgICAgIHRoaXMudmlld1VwID0gWzAsIC0xLCAwXTtcbiAgICAgICAgICB0aGlzLnZpZXdOb3JtYWwgPSBbMCwgMCwgMV07XG4gICAgICAgICAgdGhpcy52aWV3UG9pbnQgPSBbMCwgMCwgLTFdO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNhZ2l0dGFsXCI6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBub3NlIHBvaW50aW5nIGxlZnRcbiAgICAgICAgICB0aGlzLnZpZXdSaWdodCA9IFswLCAxLCAwXTtcbiAgICAgICAgICB0aGlzLnZpZXdVcCA9IFswLCAwLCAxXTtcbiAgICAgICAgICB0aGlzLnZpZXdOb3JtYWwgPSBbLTEsIDAsIDBdO1xuICAgICAgICAgIHRoaXMudmlld1BvaW50ID0gWzEsIDAsIDBdO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNvcm9uYWxcIjpcbiAgICAgICAge1xuICAgICAgICAgIHRoaXMudmlld1JpZ2h0ID0gWzEsIDAsIDBdO1xuICAgICAgICAgIHRoaXMudmlld1VwID0gWzAsIDAsIDFdO1xuICAgICAgICAgIHRoaXMudmlld05vcm1hbCA9IFswLCAxLCAwXTtcbiAgICAgICAgICB0aGlzLnZpZXdQb2ludCA9IFswLCAtMSwgMF07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVW5rbm93biBzbGljZSBwbGFuZVwiLCBwbGFuZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGV4dGVudFJpZ2h0ID0gbGluZWFyLnZsZW5ndGgobGluZWFyLnZkb3QoZXh0ZW50LCB0aGlzLnZpZXdSaWdodCkpO1xuICAgIGxldCB3aW5kb3dSaWdodCA9IGV4dGVudFJpZ2h0IC8gbWFnbmlmaWNhdGlvbjtcblxuICAgIHRoaXMudmlld0Rpc3RhbmNlID1cbiAgICAgIHdpbmRvd1JpZ2h0IC8gTWF0aC50YW4oKHRoaXMudmlld0FuZ2xlICogTWF0aC5QSSkgLyAxODApO1xuICAgIGxldCB2aWV3T2Zmc2V0ID0gbGluZWFyLnZzY2FsZSh0aGlzLnZpZXdQb2ludCwgdGhpcy52aWV3RGlzdGFuY2UpO1xuXG4gICAgdGhpcy52aWV3UG9pbnQgPSBsaW5lYXIudnBsdXModGFyZ2V0LCB2aWV3T2Zmc2V0KTtcblxuICAgIHRoaXMudmlld05lYXIgPSB0aGlzLnZpZXdEaXN0YW5jZSAtIDAuNSAqIHRoaWNrbmVzcztcbiAgICB0aGlzLnZpZXdGYXIgPSB0aGlzLnZpZXdEaXN0YW5jZSArIDAuNSAqIHRoaWNrbmVzcztcbiAgfVxuXG4gIG9yYml0KHJpZ2h0d2FyZCwgdXB3YXJkKSB7XG4gICAgbGV0IHRhcmdldCA9IHRoaXMudGFyZ2V0KCk7XG4gICAgbGV0IHZUYXJnZXRUb09yaWdpbiA9IGxpbmVhci52c2NhbGUodGFyZ2V0LCAtMSk7XG4gICAgbGV0IG1UYXJnZXRUb09yaWdpbiA9IGxpbmVhci5tdHJhbnNsYXRlKHZUYXJnZXRUb09yaWdpbik7XG4gICAgbGV0IG1BYm91dFVwID0gbGluZWFyLm1yb3RhdGUodGhpcy52aWV3VXAsIHJpZ2h0d2FyZCk7XG4gICAgbGV0IG1BYm91dFJpZ2h0ID0gbGluZWFyLm1yb3RhdGUodGhpcy52aWV3UmlnaHQsIHVwd2FyZCk7XG4gICAgbGV0IG1UYXJnZXRGcm9tT3JpZ2luID0gbGluZWFyLm10cmFuc2xhdGUodGhpcy50YXJnZXQoKSk7XG4gICAgbGV0IHJvdGF0aW9uID0gbGluZWFyLm1tdWx0aXBseShcbiAgICAgIG1UYXJnZXRGcm9tT3JpZ2luLFxuICAgICAgbGluZWFyLm1tdWx0aXBseShtQWJvdXRSaWdodCwgbGluZWFyLm1tdWx0aXBseShtQWJvdXRVcCwgbVRhcmdldFRvT3JpZ2luKSlcbiAgICApO1xuICAgIGxldCBuZXdWaWV3UG9pbnQgPSBsaW5lYXJcbiAgICAgIC5tdm11bHRpcGx5KHJvdGF0aW9uLCBbLi4udGhpcy52aWV3UG9pbnQsIDFdKVxuICAgICAgLnNsaWNlKDAsIDMpO1xuXG4gICAgdGhpcy5sb29rKHsgZnJvbTogbmV3Vmlld1BvaW50LCBhdDogdGFyZ2V0IH0pO1xuICB9XG59XG4iLCJpbXBvcnQgSW1hZ2VGaWVsZCBmcm9tIFwiLi9JbWFnZUZpZWxkXCI7XG5pbXBvcnQgU2VnbWVudGF0aW9uRmllbGQgZnJvbSBcIi4vU2VnbWVudGF0aW9uRmllbGRcIjtcbmltcG9ydCBUcmFuc2Zvcm1GaWVsZCBmcm9tIFwiLi9UcmFuc2Zvcm1GaWVsZFwiO1xuaW1wb3J0IGRjbWpzIGZyb20gXCJkY21qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWVsZCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMudXNlSW50ZWdlclRleHR1cmVzID0gRmllbGQudXNlSW50ZWdlclRleHR1cmVzO1xuICAgIHRoaXMuaWQgPSBGaWVsZC5uZXh0SWQ7XG4gICAgdGhpcy50ZXh0dXJlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubW9kaWZpZWRUaW1lID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB0aGlzLnVwZGF0ZWRUaW1lID0gMDtcbiAgICB0aGlzLmJvdW5kcyA9IHVuZGVmaW5lZDsgLy8gdGhlIHNwYXRpYWwgZXh0ZW50IG9mIHRoZSBmaWVsZC5cbiAgICAvLyB1bmRlZmluZWQgbWVhbnMgdGhlcmUgaXMgbm8gYm91bmQsIG90aGVyd2lzZVxuICAgIC8vIGFuIG9iamVjdCB3aXRoIG1pbiBhbmQgbWF4XG5cbiAgICAvLyB2aWV3aW5nIHBhcmFtZXRlcnNcbiAgICB0aGlzLnZpc2libGUgPSAxOyAvLyBpbnRlZ2VyIHNvIGl0IGNhbiBiZSBwYXNzZWQgYXMgYSB1bmlmb3JtXG4gICAgdGhpcy5yZ2JhID0gb3B0aW9ucy5yZ2JhIHx8IFsxLCAxLCAxLCAxXTsgLy8gYmFzZSBjb2xvclxuICAgIHRoaXMucmdiYSA9IHRoaXMucmdiYS5tYXAoZSA9PiBlICogMS4wMDAwMSk7IC8vIGhhY2sgdG8gbWFrZSBpdCBmbG9hdGluZyBwb2ludFxuICAgIHRoaXMuZ3JhZGllbnRPcGFjaXR5U2NhbGUgPSBvcHRpb25zLmdyYWRpZW50T3BhY2l0eVNjYWxlIHx8IDAuMDAwNTtcblxuICAgIHRoaXMuZ2VuZXJhdG9yID0gb3B0aW9ucy5nZW5lcmF0b3IgfHwgdW5kZWZpbmVkOyAvLyB0aGUgZ2VuZXJhdG9yIHRoYXQgcG9wdWxhdGVzIHRoZSB0ZXh0dXJlXG5cbiAgICAvLyB0cmFuc2Zvcm0gcGFyYW1ldGVyc1xuICAgIHRoaXMudHJhbnNmb3JtR2FpbiA9IG9wdGlvbnMudHJhbnNmb3JtR2FpbiB8fCAxOyAvLyBmb3IgdmlzdWFsaXppbmcvYW5pbWF0aW5nL2V4YWdnZXJhdGluZyB0cmFuc2Zvcm1cbiAgICB0aGlzLnRyYW5zZm9ybUZpZWxkID0gdW5kZWZpbmVkOyAvLyB0aGUgZmllbGQgdGhhdCBkZWZpbmVzIHRoZSBkZWZvcm1hdGlvblxuXG4gICAgaWYgKHRoaXMudXNlSW50ZWdlclRleHR1cmVzKSB7XG4gICAgICB0aGlzLnNhbXBsZXJUeXBlID0gXCJpc2FtcGxlcjNEXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2FtcGxlclR5cGUgPSBcInNhbXBsZXIzRFwiO1xuICAgIH1cblxuICAgIEZpZWxkLm5leHRJZCsrOyAvLyBrZWVwIHRyYWNrIG9mIElEcyBzdGF0aWNhbGx5IGZvciBjbGFzc1xuICB9XG5cbiAgYW5hbHl6ZSgpIHtcbiAgICAvLyBjYWxjdWxhdGUgdGhpbmdzIGxpa2UgYm91bmRzIGZyb20gdGhlIGNvbnN0cnVjdG9yIGlucHV0XG4gICAgLy8gLSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIGZpbmFsIGNvbmNyZXRlIHN1YnR5cGUgYW5kXG4gICAgLy8gICBldmVyeSBzdWJjbGFzcyBjYWxscyB0aGUgc3VwZXJjbGFzc1xuICB9XG5cbiAgLy8gdXNlciBvZiB0aGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIG1vZGlmaWVkXG4gIC8vIGFmdGVyIG1ha2luZyBjaGFuZ2VzIHRoYXQgcmVxdWlyZSB1cGRhdGluZyB0aGUgZ2wgcmVwcmVzZW50YXRpb25cbiAgbW9kaWZpZWQoKSB7XG4gICAgdGhpcy5tb2RpZmllZFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7IC8vIFRPRE86IG1heWJlIHVzZSBpbmNyZW1lbnRpbmcgTnVtYmVyXG4gIH1cblxuICB1cGRhdGVkKCkge1xuICAgIHRoaXMudXBkYXRlZFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gIH1cblxuICBuZWVkc1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVkVGltZSA8IHRoaXMubW9kaWZpZWRUaW1lO1xuICB9XG5cbiAgLy8gU2hhZGVyU291cmNlcyByZXR1cm4gYSBzdHJpbmcgd2l0aCB0aGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50ZWQgaW4gR0xTTFxuICB0cmFuc2Zvcm1TaGFkZXJTb3VyY2UoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNmb3JtRmllbGQpIHtcbiAgICAgIHJldHVybiBgXG4gICAgICAgICAgdW5pZm9ybSBmbG9hdCB0cmFuc2Zvcm1HYWluJHt0aGlzLmlkfTtcbiAgICAgICAgICB2ZWMzIHRyYW5zZm9ybVBvaW50JHt0aGlzLmlkfShjb25zdCBpbiB2ZWMzIHNhbXBsZVBvaW50KVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZlYzMgdHJhbnNmb3JtU1RQUG9pbnQgPSBwYXRpZW50VG9UZXh0dXJlJHt0aGlzLnRyYW5zZm9ybUZpZWxkLmlkfShzYW1wbGVQb2ludCk7XG4gICAgICAgICAgICB2ZWMzIGRpc3BsYWNlbWVudCA9IHRleHR1cmUodGV4dHVyZVVuaXQke3RoaXMudHJhbnNmb3JtRmllbGQuaWR9LCB0cmFuc2Zvcm1TVFBQb2ludCkueHl6O1xuICAgICAgICAgICAgcmV0dXJuKHNhbXBsZVBvaW50ICsgdHJhbnNmb3JtR2FpbiR7dGhpcy5pZH0gKiBkaXNwbGFjZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIGBcbiAgICAgICAgICB2ZWMzIHRyYW5zZm9ybVBvaW50JHt0aGlzLmlkfShjb25zdCBpbiB2ZWMzIHNhbXBsZVBvaW50KVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybihzYW1wbGVQb2ludCk7XG4gICAgICAgICAgfVxuICAgICAgICBgO1xuICB9XG5cbiAgc2FtcGxpbmdTaGFkZXJTb3VyY2UoKSB7XG4gICAgLy8gcmV0dXJuIGEgc3RyaW5nIHdpdGggdGhlc2UgZnVuY3Rpb25zIGltcGxlbWVudGVkIGluIEdMU0xcbiAgICByZXR1cm4gYFxuICAgICAgICB2b2lkIHRyYW5zZmVyRnVuY3Rpb24ke3RoaXMuaWR9IChjb25zdCBpbiBmbG9hdCBzYW1wbGVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW4gZmxvYXQgZ3JhZGllbnRNYWduaXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCB2ZWMzIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgb3BhY2l0eSlcbiAgICAgICAge1xuICAgICAgICB9XG4gICAgICAgIHZvaWQgc2FtcGxlRmllbGQke3RoaXMuaWR9IChjb25zdCBpbiAke3RoaXMuc2FtcGxlclR5cGV9IHRleHR1cmVVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW4gdmVjMyBzYW1wbGVQb2ludFBhdGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbiBmbG9hdCBncmFkaWVudFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBub3JtYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgZ3JhZGllbnRNYWduaXR1ZGUpXG4gICAgICAgIHtcbiAgICAgICAgfVxuICAgICAgYDtcbiAgfVxuXG4gIHVuaWZvcm1zKCkge1xuICAgIC8vIHJldHVybiBhbiBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgdW5pZm9ybSB2YWx1ZXNcbiAgICBsZXQgdSA9IHt9O1xuXG4gICAgdVtcInZpc2libGVcIiArIHRoaXMuaWRdID0geyB0eXBlOiBcIjFpXCIsIHZhbHVlOiB0aGlzLnZpc2libGUgfTtcbiAgICB1W1wicmdiYVwiICsgdGhpcy5pZF0gPSB7IHR5cGU6IFwiNGZ2XCIsIHZhbHVlOiB0aGlzLnJnYmEgfTtcbiAgICB1W1wiZ3JhZGllbnRPcGFjaXR5U2NhbGVcIiArIHRoaXMuaWRdID0ge1xuICAgICAgdHlwZTogXCIxZlwiLFxuICAgICAgdmFsdWU6IHRoaXMuZ3JhZGllbnRPcGFjaXR5U2NhbGVcbiAgICB9O1xuICAgIHVbXCJ0ZXh0dXJlVW5pdFwiICsgdGhpcy5pZF0gPSB7IHR5cGU6IFwiMWlcIiwgdmFsdWU6IHRoaXMuaWQgfTtcbiAgICBpZiAodGhpcy50cmFuc2Zvcm1GaWVsZCkge1xuICAgICAgdVtcInRyYW5zZm9ybUdhaW5cIiArIHRoaXMuaWRdID0geyB0eXBlOiBcIjFmXCIsIHZhbHVlOiB0aGlzLnRyYW5zZm9ybUdhaW4gfTtcbiAgICB9XG4gICAgcmV0dXJuIHU7XG4gIH1cblxuICBmaWVsZFRvVGV4dHVyZShnbCkge1xuICAgIC8vIGVuc3VyZSB0aGUgZmllbGQgZGF0YSBpcyBzdG9yZWQgaW4gdGhlIHRleHR1cmVcbiAgICAvLyB1bml0IGFzc29jaWF0ZWQgd2l0aCB0aGlzLmlkIGluIHRoZSBnbCBjb250ZXh0XG4gICAgLy8gcmV0dXJucyB0cnVlIGlmIHN1YmNsYXNzIGFsc28gbmVlZHMgdG8gdXBkYXRlLlxuICAgIC8vIEZpbmFsIGNoaWxkIGNsYXNzIHNob3VsZCBjYWxsIHRoaXMudXBkYXRlZCgpLlxuICAgIGxldCBuZWVkc1VwZGF0ZSA9IHRoaXMubmVlZHNVcGRhdGUoKTtcblxuICAgIGlmIChuZWVkc1VwZGF0ZSkge1xuICAgICAgaWYgKHRoaXMudGV4dHVyZSkge1xuICAgICAgICBnbC5kZWxldGVUZXh0dXJlKHRoaXMudGV4dHVyZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdGhpcy5pZCk7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzNELCB0aGlzLnRleHR1cmUpO1xuICAgIH1cbiAgICByZXR1cm4gbmVlZHNVcGRhdGU7XG4gIH1cbn1cbkZpZWxkLm5leHRJZCA9IDA7IC8vIFRPRE86IGZvciBub3cgdGhpcyBpcyB0ZXh0dXJlIHVuaXRcbkZpZWxkLnVzZUludGVnZXJUZXh0dXJlcyA9IGZhbHNlOyAvLyBkZWZhdWx0LCBidXQgcG9zc2libHkgb3ZlcnJpZGRlbiBiYXNlZCBvbiBnbCBlbnZcblxuLy8gYXJyYXkgb2YgZmllbGRzIGZyb20gZGF0YXNldFxuRmllbGQuZnJvbURhdGFzZXQgPSBmdW5jdGlvbihkYXRhc2V0KSB7XG4gIGxldCBmaWVsZHMgPSBbXTtcbiAgbGV0IHNvcENsYXNzTmFtZSA9XG4gICAgZGNtanMuZGF0YS5EaWNvbU1ldGFEaWN0aW9uYXJ5LnNvcENsYXNzTmFtZXNCeVVJRFtkYXRhc2V0LlNPUENsYXNzVUlEXTtcblxuICBzd2l0Y2ggKHNvcENsYXNzTmFtZSkge1xuICAgIGNhc2UgXCJDVEltYWdlXCI6XG4gICAgY2FzZSBcIk1SSW1hZ2VcIjpcbiAgICBjYXNlIFwiRW5oYW5jZWRDVEltYWdlXCI6XG4gICAgY2FzZSBcIkxlZ2FjeUNvbnZlcnRlZEVuaGFuY2VkQ1RJbWFnZVwiOlxuICAgIGNhc2UgXCJVbHRyYXNvdW5kTXVsdGlmcmFtZUltYWdlXCI6XG4gICAgY2FzZSBcIkVuaGFuY2VkTVJJbWFnZVwiOlxuICAgIGNhc2UgXCJNUlNwZWN0cm9zY29weVwiOlxuICAgIGNhc2UgXCJFbmhhbmNlZE1SQ29sb3JJbWFnZVwiOlxuICAgIGNhc2UgXCJMZWdhY3lDb252ZXJ0ZWRFbmhhbmNlZE1SSW1hZ2VcIjpcbiAgICBjYXNlIFwiVWx0cmFzb3VuZEltYWdlXCI6XG4gICAgY2FzZSBcIkVuaGFuY2VkVVNWb2x1bWVcIjpcbiAgICBjYXNlIFwiU2Vjb25kYXJ5Q2FwdHVyZUltYWdlXCI6XG4gICAgY2FzZSBcIlVTSW1hZ2VcIjpcbiAgICBjYXNlIFwiUEVUSW1hZ2VcIjpcbiAgICBjYXNlIFwiRW5oYW5jZWRQRVRJbWFnZVwiOlxuICAgIGNhc2UgXCJMZWdhY3lDb252ZXJ0ZWRFbmhhbmNlZFBFVEltYWdlXCI6XG4gICAgICB7XG4gICAgICAgIGZpZWxkcyA9IFtuZXcgSW1hZ2VGaWVsZCh7IGRhdGFzZXQgfSldO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNlZ21lbnRhdGlvblwiOlxuICAgICAge1xuICAgICAgICBmaWVsZHMgPSBTZWdtZW50YXRpb25GaWVsZC5maWVsZHNGcm9tRGF0YXNldCh7IGRhdGFzZXQgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRGVmb3JtYWJsZVNwYXRpYWxSZWdpc3RyYXRpb25cIjpcbiAgICAgIHtcbiAgICAgICAgZmllbGRzID0gW25ldyBUcmFuc2Zvcm1GaWVsZCh7IGRhdGFzZXQgfSldO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBwcm9jZXNzIHRoaXMgZGF0YXNldCB0eXBlIFwiLCBkYXRhc2V0KTtcbiAgICB9XG5cbiAgICAvKiBUT0RPXG4gICAgICAgXCJSYXcgRGF0YVwiLFxuICAgICAgIFwiU3BhdGlhbCBSZWdpc3RyYXRpb25cIixcbiAgICAgICBcIlNwYXRpYWwgRmlkdWNpYWxzXCIsXG4gICAgICAgXCJSZWFsIFdvcmxkIFZhbHVlIE1hcHBpbmdcIixcbiAgICAgICBcIkJhc2ljVGV4dFNSXCIsXG4gICAgICAgXCJFbmhhbmNlZFNSXCIsXG4gICAgICAgXCJDb21wcmVoZW5zaXZlU1JcIixcbiAgICAgKi9cbiAgfVxuICByZXR1cm4gZmllbGRzO1xufTtcbiIsImltcG9ydCBQaXhlbEZpZWxkIGZyb20gXCIuL1BpeGVsRmllbGQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VGaWVsZCBleHRlbmRzIFBpeGVsRmllbGQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmFuYWx5emUoKTtcbiAgfVxuXG4gIGFuYWx5emUoKSB7XG4gICAgc3VwZXIuYW5hbHl6ZSgpO1xuICAgIHRoaXMud2luZG93Q2VudGVyID0gTnVtYmVyKHRoaXMuZGF0YXNldC5XaW5kb3dDZW50ZXJbMF0pO1xuICAgIHRoaXMud2luZG93V2lkdGggPSBOdW1iZXIodGhpcy5kYXRhc2V0LldpbmRvd1dpZHRoWzBdKTtcbiAgICB0aGlzLnJlc2NhbGVJbnRlcmNlcHQgPSBOdW1iZXIodGhpcy5kYXRhc2V0LlJlc2NhbGVJbnRlcmNlcHQpO1xuICAgIHRoaXMucmVzY2FsZVNsb3BlID0gTnVtYmVyKHRoaXMuZGF0YXNldC5SZXNjYWxlU2xvcGUpO1xuICAgIHRoaXMuc2FtcGxlc1BlclBpeGVsID0gTnVtYmVyKHRoaXMuZGF0YXNldC5TYW1wbGVzUGVyUGl4ZWwpO1xuXG4gICAgaWYgKHRoaXMuZGF0YXNldC5CaXRzQWxsb2NhdGVkICE9PSAxNikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbiBvbmx5IGhhbmRsZSAxNiBiaXQgZGF0YVwiKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzLmRhdGFzZXQuU2FtcGxlc1BlclBpeGVsIGluIFsxLCAzXSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW4gb25seSBoYW5kbGUgMSBvciAzIHNhbXBsZXMgcGVyIHBpeGVsXCIpO1xuICAgIH1cblxuICAgIC8vIGFycmF5IG9mIGNvbnRyb2wgcG9pbnRzIGluIGZvcm0gW3ZhbHVlLCB7ciwgZywgYiwgYX1dXG4gICAgdGhpcy50cmFuc2ZlckZ1bmN0aW9uID0gW1xuICAgICAgWzAsIHsgcjogMCwgZzogMCwgYjogMCwgYTogMCB9XSxcbiAgICAgIFsxLCB7IHI6IDEsIGc6IDEsIGI6IDEsIGE6IDEgfV1cbiAgICBdO1xuICB9XG5cbiAgc3RhdGlzdGljcyhvcHRpb25zID0ge30pIHtcbiAgICBsZXQgc3RhdGlzdGljcyA9IHt9O1xuXG4gICAgc3RhdGlzdGljcy5iaW5zID0gb3B0aW9ucy5iaW5zIHx8IDI1NjtcbiAgICBsZXQgc2FtcGxlcyA9IG9wdGlvbnMuc2FtcGxlcyB8fCAxMDAwO1xuXG4gICAgbGV0IGltYWdlQXJyYXk7XG5cbiAgICBpZiAodGhpcy5kYXRhc2V0LlBpeGVsUmVwcmVzZW50YXRpb24gPT09IDEpIHtcbiAgICAgIGltYWdlQXJyYXkgPSBuZXcgSW50MTZBcnJheSh0aGlzLmRhdGFzZXQuUGl4ZWxEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VBcnJheSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLmRhdGFzZXQuUGl4ZWxEYXRhKTtcbiAgICB9XG5cbiAgICBsZXQgbWluID0gM2UzODtcbiAgICBsZXQgbWF4ID0gLTNlMzg7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2FtcGxlczsgaW5kZXgrKykge1xuICAgICAgbGV0IHNhbXBsZUluZGV4ID0gTWF0aC5mbG9vcihpbWFnZUFycmF5Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpO1xuXG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGltYWdlQXJyYXlbc2FtcGxlSW5kZXhdKTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgaW1hZ2VBcnJheVtzYW1wbGVJbmRleF0pO1xuICAgIH1cbiAgICBzdGF0aXN0aWNzLnJhbmdlID0geyBtaW4sIG1heCB9O1xuXG4gICAgbGV0IGhpc3RvZ3JhbSA9IG5ldyBJbnQzMkFycmF5KHN0YXRpc3RpY3MuYmlucyk7XG4gICAgbGV0IGJpblNjYWxlID0gc3RhdGlzdGljcy5iaW5zIC8gKG1heCAtIG1pbik7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2FtcGxlczsgaW5kZXgrKykge1xuICAgICAgbGV0IHNhbXBsZUluZGV4ID0gTWF0aC5mbG9vcihpbWFnZUFycmF5Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpO1xuICAgICAgbGV0IGJpbiA9IE1hdGguZmxvb3IoKGltYWdlQXJyYXlbc2FtcGxlSW5kZXhdIC0gbWluKSAqIGJpblNjYWxlKTtcblxuICAgICAgaGlzdG9ncmFtW2Jpbl0gKz0gMTtcbiAgICB9XG4gICAgc3RhdGlzdGljcy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XG5cbiAgICBzdGF0aXN0aWNzLm1heEJpbiA9IDA7XG4gICAgc3RhdGlzdGljcy5tYXhCaW5WYWx1ZSA9IDA7XG4gICAgZm9yIChsZXQgYmluID0gMDsgYmluIDwgc3RhdGlzdGljcy5iaW5zOyBiaW4rKykge1xuICAgICAgaWYgKHN0YXRpc3RpY3MuaGlzdG9ncmFtW2Jpbl0gPiBzdGF0aXN0aWNzLm1heEJpblZhbHVlKSB7XG4gICAgICAgIHN0YXRpc3RpY3MubWF4QmluID0gYmluO1xuICAgICAgICBzdGF0aXN0aWNzLm1heEJpblZhbHVlID0gc3RhdGlzdGljcy5oaXN0b2dyYW1bYmluXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGlzdGljcztcbiAgfVxuXG4gIHVuaWZvcm1zKCkge1xuICAgIC8vIFRPRE86IG5lZWQgdG8gYmUga2V5ZWQgdG8gaWQgKGluIGEgc3RydWN0KVxuICAgIGxldCB1ID0gc3VwZXIudW5pZm9ybXMoKTtcblxuICAgIHVbXCJ3aW5kb3dDZW50ZXJcIiArIHRoaXMuaWRdID0geyB0eXBlOiBcIjFmXCIsIHZhbHVlOiB0aGlzLndpbmRvd0NlbnRlciB9O1xuICAgIHVbXCJ3aW5kb3dXaWR0aFwiICsgdGhpcy5pZF0gPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IHRoaXMud2luZG93V2lkdGggfTtcbiAgICB1W1wicmVzY2FsZVNsb3BlXCIgKyB0aGlzLmlkXSA9IHsgdHlwZTogXCIxZlwiLCB2YWx1ZTogdGhpcy5yZXNjYWxlU2xvcGUgfTtcbiAgICB1W1wicmVzY2FsZUludGVyY2VwdFwiICsgdGhpcy5pZF0gPSB7XG4gICAgICB0eXBlOiBcIjFmXCIsXG4gICAgICB2YWx1ZTogdGhpcy5yZXNjYWxlSW50ZXJjZXB0XG4gICAgfTtcbiAgICAvLyBhZGQgdHJhbnNmZXIgZnVuY3Rpb24gY29udHJvbCBwb2ludCB1bmlmb3Jtc1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRyYW5zZmVyRnVuY3Rpb24ubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBsZXQgW3ZhbHVlLCByZ2JhXSA9IHRoaXMudHJhbnNmZXJGdW5jdGlvbltpbmRleF07XG5cbiAgICAgIHJnYmEgPSBbcmdiYS5yLCByZ2JhLmcsIHJnYmEuYiwgcmdiYS5hXTtcbiAgICAgIHVbXCJ0ZmNwXCIgKyB0aGlzLmlkICsgXCJ2YWx1ZVwiICsgaW5kZXhdID0geyB0eXBlOiBcIjFmXCIsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgdVtcInRmY3BcIiArIHRoaXMuaWQgKyBcInJnYmFcIiArIGluZGV4XSA9IHsgdHlwZTogXCI0ZnZcIiwgdmFsdWU6IHJnYmEgfTtcbiAgICB9XG4gICAgcmV0dXJuIHU7XG4gIH1cblxuICByZXNjYWxlU291cmNlKCkge1xuICAgIHJldHVybiBgXG4gICAgICAgIHVuaWZvcm0gZmxvYXQgcmVzY2FsZVNsb3BlJHt0aGlzLmlkfTtcbiAgICAgICAgdW5pZm9ybSBmbG9hdCByZXNjYWxlSW50ZXJjZXB0JHt0aGlzLmlkfTtcbiAgICAgICAgZmxvYXQgcmVzY2FsZSR7dGhpcy5pZH0oY29uc3QgaW4gZmxvYXQgc2FtcGxlVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4ocmVzY2FsZVNsb3BlJHt0aGlzLmlkfSAqIHNhbXBsZVZhbHVlICsgcmVzY2FsZUludGVyY2VwdCR7dGhpcy5pZH0pO1xuICAgICAgICB9XG4gICAgICBgO1xuICB9XG5cbiAgdHJhbnNmZXJGdW5jdGlvbkNvbnRyb2xQb2ludFVuaWZvcm1Tb3VyY2UoKSB7XG4gICAgbGV0IHVuaWZvcm1Tb3VyY2UgPSBcIlxcblwiO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMudHJhbnNmZXJGdW5jdGlvbi5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHVuaWZvcm1Tb3VyY2UgKz0gYHVuaWZvcm0gZmxvYXQgdGZjcCR7dGhpcy5pZH12YWx1ZSR7aW5kZXh9O1xcbmA7XG4gICAgICB1bmlmb3JtU291cmNlICs9IGB1bmlmb3JtIHZlYzQgdGZjcCR7dGhpcy5pZH1yZ2JhJHtpbmRleH07XFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHVuaWZvcm1Tb3VyY2U7XG4gIH1cblxuICB0cmFuc2ZlckZ1bmN0aW9uQ29udHJvbFBvaW50TG9va3VwU291cmNlKCkge1xuICAgIGxldCBsb29rdXBTb3VyY2UgPSBcIlxcblwiO1xuICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICBsb29rdXBTb3VyY2UgKz0gYFxuICAgICAgICBpZiAocGl4ZWxWYWx1ZSA8IHRmY3Ake3RoaXMuaWR9dmFsdWUke2luZGV4fSkge1xuICAgICAgICAgIGNvbG9yID0gdGZjcCR7dGhpcy5pZH1yZ2JhJHtpbmRleH0ucmdiO1xuICAgICAgICAgIG9wYWNpdHkgPSB0ZmNwJHt0aGlzLmlkfXJnYmEke2luZGV4fS5hO1xuICAgICAgICB9XFxuYDtcbiAgICBmb3IgKGluZGV4ID0gMTsgaW5kZXggPCB0aGlzLnRyYW5zZmVyRnVuY3Rpb24ubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBsb29rdXBTb3VyY2UgKz0gYFxuICAgICAgICAgIGVsc2UgaWYgKHBpeGVsVmFsdWUgPCB0ZmNwJHt0aGlzLmlkfXZhbHVlJHtpbmRleH0pIHtcbiAgICAgICAgICAgIGZsb2F0IHByb3BvcnRpb24gPSAocGl4ZWxWYWx1ZSAtIHRmY3Ake3RoaXMuaWR9dmFsdWUke2luZGV4IC0gMX0pIC9cbiAgICAgICAgICAgICAgKHRmY3Ake3RoaXMuaWR9dmFsdWUke2luZGV4fSAtIHRmY3Ake3RoaXMuaWR9dmFsdWUke2luZGV4IC0gMX0pO1xuICAgICAgICAgICAgY29sb3IgPSBtaXgoIHRmY3Ake3RoaXMuaWR9cmdiYSR7aW5kZXggLSAxfS5yZ2IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGZjcCR7dGhpcy5pZH1yZ2JhJHtpbmRleH0ucmdiLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb24gKTtcbiAgICAgICAgICAgIG9wYWNpdHkgPSBtaXgoIHRmY3Ake3RoaXMuaWR9cmdiYSR7aW5kZXggLSAxfS5hLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGZjcCR7dGhpcy5pZH1yZ2JhJHtpbmRleH0uYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb24gKTtcbiAgICAgICAgICB9XFxuYDtcbiAgICB9XG4gICAgbG9va3VwU291cmNlICs9IGBcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29sb3IgPSB0ZmNwJHt0aGlzLmlkfXJnYmEke2luZGV4IC0gMX0ucmdiO1xuICAgICAgICB9XFxuYDtcbiAgICByZXR1cm4gbG9va3VwU291cmNlO1xuICB9XG5cbiAgdHJhbnNmZXJGdW5jdGlvblNvdXJjZSgpIHtcbiAgICByZXR1cm4gYFxuICAgICAgICB1bmlmb3JtIGZsb2F0IHdpbmRvd0NlbnRlciR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gZmxvYXQgd2luZG93V2lkdGgke3RoaXMuaWR9O1xuICAgICAgICB1bmlmb3JtIHZlYzQgcmdiYSR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gZmxvYXQgZ3JhZGllbnRPcGFjaXR5U2NhbGUke3RoaXMuaWR9O1xuICAgICAgICAke3RoaXMudHJhbnNmZXJGdW5jdGlvbkNvbnRyb2xQb2ludFVuaWZvcm1Tb3VyY2UoKX1cbiAgICAgICAgdm9pZCB0cmFuc2ZlckZ1bmN0aW9uJHt0aGlzLmlkfSAoY29uc3QgaW4gZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIGZsb2F0IGdyYWRpZW50TWFnbml0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IGZsb2F0IG9wYWNpdHkpXG4gICAgICAgIHtcbiAgICAgICAgICBmbG9hdCBwaXhlbFZhbHVlID0gMC41ICtcbiAgICAgICAgICAgICAgICAgIChzYW1wbGVWYWx1ZSAtICh3aW5kb3dDZW50ZXIke3RoaXMuaWR9LTAuNSkpXG4gICAgICAgICAgICAgICAgICAgIC8gKHdpbmRvd1dpZHRoJHt0aGlzLmlkfS0xLik7XG4gICAgICAgICAgcGl4ZWxWYWx1ZSA9IGNsYW1wKCBwaXhlbFZhbHVlLCAwLiwgMS4gKTtcbiAgXG4gICAgICAgICAgaWYgKHNsaWNlTW9kZSA9PSAxKSB7XG4gICAgICAgICAgICBjb2xvciA9IHZlYzMocGl4ZWxWYWx1ZSk7XG4gICAgICAgICAgICBvcGFjaXR5ID0gcmdiYSR7dGhpcy5pZH0uYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHt0aGlzLnRyYW5zZmVyRnVuY3Rpb25Db250cm9sUG9pbnRMb29rdXBTb3VyY2UoKX1cbiAgICAgICAgICAgIGZsb2F0IGdyYWRpZW50Q29udHJpYnV0aW9uID0gZ3JhZGllbnRNYWduaXR1ZGUgKiBncmFkaWVudE9wYWNpdHlTY2FsZSR7XG4gICAgICAgICAgICAgIHRoaXMuaWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb2xvciArPSBncmFkaWVudENvbnRyaWJ1dGlvbiAqIHJnYmEke3RoaXMuaWR9LnJnYjtcbiAgICAgICAgICAgIG9wYWNpdHkgKz0gZ3JhZGllbnRDb250cmlidXRpb247XG4gICAgICAgICAgICBvcGFjaXR5ICo9IHJnYmEke3RoaXMuaWR9LmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbG9yICo9IHJnYmEke3RoaXMuaWR9LnJnYjtcbiAgICAgICAgfVxuICAgICAgYDtcbiAgfVxuXG4gIGZpZWxkVG9UZXh0dXJlKGdsKSB7XG4gICAgLy8gYWxsb2NhdGUgYW5kIGZpbGwgYSBmbG9hdCAzRCB0ZXh0dXJlIGZvciB0aGUgaW1hZ2UgZGF0YS5cbiAgICAvLyBjYW5ub3QgYmUgc3ViY2xhc3NlZC5cbiAgICBsZXQgbmVlZHNVcGRhdGUgPSBzdXBlci5maWVsZFRvVGV4dHVyZShnbCk7XG5cbiAgICBpZiAobmVlZHNVcGRhdGUpIHtcbiAgICAgIGxldCBpbWFnZUFycmF5O1xuXG4gICAgICBpZiAodGhpcy5kYXRhc2V0LlBpeGVsUmVwcmVzZW50YXRpb24gPT09IDEpIHtcbiAgICAgICAgaW1hZ2VBcnJheSA9IG5ldyBJbnQxNkFycmF5KHRoaXMuZGF0YXNldC5QaXhlbERhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VBcnJheSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLmRhdGFzZXQuUGl4ZWxEYXRhKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGltYWdlVGV4dHVyZUFycmF5O1xuICAgICAgbGV0IHBpeGVsSW50ZXJuYWxGb3JtYXQ7IC8vIGZvcm1hdCBvZiB0aGUgdGFyZ2V0IHRleHR1cmVcbiAgICAgIGxldCBwaXhlbEZvcm1hdDsgLy8gZm9ybWF0IG9mIHRoZSBwYXNzZWQgYXJyYXlcbiAgICAgIGxldCBwaXhlbFR5cGU7IC8vIGRhdGEgdHlwZSBvZiBwYXNzZWQgYXJyYXlcbiAgICAgIGxldCB0ZXh0dXJlRmlsdGVycztcblxuICAgICAgaWYgKHRoaXMudXNlSW50ZWdlclRleHR1cmVzKSB7XG4gICAgICAgIGltYWdlVGV4dHVyZUFycmF5ID0gbmV3IEludDE2QXJyYXkoaW1hZ2VBcnJheSk7XG4gICAgICAgIHBpeGVsSW50ZXJuYWxGb3JtYXQgPSBnbC5SMTZJO1xuICAgICAgICBwaXhlbEZvcm1hdCA9IGdsLlJFRF9JTlRFR0VSO1xuICAgICAgICBwaXhlbFR5cGUgPSBnbC5TSE9SVDtcbiAgICAgICAgdGV4dHVyZUZpbHRlcnMgPSBnbC5ORUFSRVNUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VUZXh0dXJlQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGltYWdlQXJyYXkpO1xuICAgICAgICBwaXhlbEludGVybmFsRm9ybWF0ID0gZ2wuUjE2RjtcbiAgICAgICAgcGl4ZWxGb3JtYXQgPSBnbC5SRUQ7XG4gICAgICAgIHBpeGVsVHlwZSA9IGdsLkZMT0FUO1xuICAgICAgICB0ZXh0dXJlRmlsdGVycyA9IGdsLkxJTkVBUjtcbiAgICAgIH1cblxuICAgICAgbGV0IFt3LCBoLCBkXSA9IHRoaXMucGl4ZWxEaW1lbnNpb25zO1xuXG4gICAgICBnbC50ZXhTdG9yYWdlM0QoZ2wuVEVYVFVSRV8zRCwgMSwgcGl4ZWxJbnRlcm5hbEZvcm1hdCwgdywgaCwgZCk7XG4gICAgICBpZiAoIXRoaXMuZ2VuZXJhdG9yKSB7XG4gICAgICAgIC8vIG9ubHkgdHJhbnNmZXIgdGhlIGRhdGEgaWYgdGhlcmUncyBubyBnZW5lcmF0b3IgdGhhdCB3aWxsIGZpbGwgaXQgaW5cbiAgICAgICAgZ2wudGV4U3ViSW1hZ2UzRChcbiAgICAgICAgICBnbC5URVhUVVJFXzNELFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsIC8vIGxldmVsLCBvZmZzZXRzXG4gICAgICAgICAgdyxcbiAgICAgICAgICBoLFxuICAgICAgICAgIGQsXG4gICAgICAgICAgcGl4ZWxGb3JtYXQsXG4gICAgICAgICAgcGl4ZWxUeXBlLFxuICAgICAgICAgIGltYWdlVGV4dHVyZUFycmF5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGV4dHVyZUZpbHRlcnMpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzNELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIHRleHR1cmVGaWx0ZXJzKTtcbiAgICAgIHRoaXMudXBkYXRlZCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IEZpZWxkIGZyb20gXCIuL0ZpZWxkXCI7XG5pbXBvcnQgeyBtYXQ0LCB2ZWMzLCB2ZWM0IH0gZnJvbSBcImdsLW1hdHJpeFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaXhlbEZpZWxkIGV4dGVuZHMgRmllbGQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmRhdGFzZXQgPSBvcHRpb25zLmRhdGFzZXQgfHwge307XG4gIH1cblxuICBkaW1lbnNpb25zKCkge1xuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmRhdGFzZXQuQ29sdW1ucyxcbiAgICAgIHRoaXMuZGF0YXNldC5Sb3dzLFxuICAgICAgdGhpcy5kYXRhc2V0Lk51bWJlck9mRnJhbWVzXG4gICAgXS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIG9yaWVudGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLlBsYW5lT3JpZW50YXRpb24uSW1hZ2VPcmllbnRhdGlvblBhdGllbnQubWFwKFxuICAgICAgTnVtYmVyXG4gICAgKTtcbiAgfVxuXG4gIHNsaWNlU3RlcEZyb21PcmllbnRhdGlvbihvcmllbnRhdGlvbikge1xuICAgIGxldCBjb2x1bW5TdGVwVG9QYXRpZW50ID0gdmVjMy5mcm9tVmFsdWVzKC4uLm9yaWVudGF0aW9uLnNsaWNlKDAsIDMpKTtcbiAgICBsZXQgcm93U3RlcFRvUGF0aWVudCA9IHZlYzMuZnJvbVZhbHVlcyguLi5vcmllbnRhdGlvbi5zbGljZSgzLCA2KSk7XG4gICAgbGV0IHNsaWNlU3RlcFRvUGF0aWVudCA9IHZlYzMuY3JlYXRlKCk7XG5cbiAgICB2ZWMzLmNyb3NzKHNsaWNlU3RlcFRvUGF0aWVudCwgY29sdW1uU3RlcFRvUGF0aWVudCwgcm93U3RlcFRvUGF0aWVudCk7XG4gICAgcmV0dXJuIHNsaWNlU3RlcFRvUGF0aWVudDtcbiAgfVxuXG4gIHNwYWNpbmcoKSB7XG4gICAgbGV0IHBpeGVsTWVhc3VyZXMgPSB0aGlzLmRhdGFzZXQuU2hhcmVkRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlXG4gICAgICAuUGl4ZWxNZWFzdXJlc1NlcXVlbmNlO1xuXG4gICAgLy8gTkI6IERJQ09NIFBpeGVsU3BhY2luZyBpcyBkZWZpbmVkIGFzIFJvdyB0aGVuIENvbHVtbiwgdW5saWtlIEltYWdlT3JpZW50YXRpb25QYXRpZW50XG4gICAgLy8gQ29udmVudGlvbiBmb3IgZmllbGRzIGlzIGFsd2F5cyB0aGF0IHBpeGVsIHNwYWNlIGlzIGNvbHVtbiwgcm93LCBzbGljZSBzbyB3ZSBzd2FwXG4gICAgLy8gdGhlIGZpcnN0IHR3byBlbnRyaWVzIGhlcmUuXG4gICAgcmV0dXJuIFtcbiAgICAgIHBpeGVsTWVhc3VyZXMuUGl4ZWxTcGFjaW5nWzFdLFxuICAgICAgcGl4ZWxNZWFzdXJlcy5QaXhlbFNwYWNpbmdbMF0sXG4gICAgICBwaXhlbE1lYXN1cmVzLlNwYWNpbmdCZXR3ZWVuU2xpY2VzXG4gICAgXS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIHBvc2l0aW9uKGZyYW1lKSB7XG4gICAgZnJhbWUgPSBmcmFtZSB8fCAwO1xuICAgIGxldCBwZXJGcmFtZUdyb3VwcyA9IHRoaXMuZGF0YXNldC5QZXJGcmFtZUZ1bmN0aW9uYWxHcm91cHNTZXF1ZW5jZTtcblxuICAgIHJldHVybiBwZXJGcmFtZUdyb3Vwc1tmcmFtZV0uUGxhbmVQb3NpdGlvbi5JbWFnZVBvc2l0aW9uUGF0aWVudC5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGFuYWx5emUoKSB7XG4gICAgc3VwZXIuYW5hbHl6ZSgpO1xuICAgIC8vIGV4YW1pbmUgdGhlIGRhdGFzZXQgYW5kIGNhbGN1bGF0ZSBpbnRlcm1lZGlhdGUgdmFsdWVzIG5lZWRlZCBmb3IgcmVuZGVyaW5nXG4gICAgLy8gVE9ETzogcGF0aWVudFRvUGl4ZWwgYW5kIHJlbGF0ZWQgbWF0cmljZXMgc2hvdWxkIGJlIGdlbmVyYWxpemVkIHRvIGZ1bmN0aW9ucy5cbiAgICAvLyBUT0RPOiB0cmFuc2ZlciBmdW5jdGlvbiBwYXJhbWV0ZXJzIGNvdWxkIGJlIHRleHR1cmVzLlxuXG4gICAgdGhpcy5waXhlbERpbWVuc2lvbnMgPSB0aGlzLmRpbWVuc2lvbnMoKTtcblxuICAgIGxldCBbXG4gICAgICBzcGFjaW5nQmV0d2VlbkNvbHVtbnMsXG4gICAgICBzcGFjaW5nQmV0d2VlblJvd3MsXG4gICAgICBzcGFjaW5nQmV0d2VlblNsaWNlc1xuICAgIF0gPSB0aGlzLnNwYWNpbmcoKTtcblxuICAgIGxldCBvcmllbnRhdGlvbiA9IHRoaXMub3JpZW50YXRpb24oKTtcbiAgICBsZXQgc2xpY2VTdGVwVG9QYXRpZW50ID0gdGhpcy5zbGljZVN0ZXBGcm9tT3JpZW50YXRpb24ob3JpZW50YXRpb24pO1xuICAgIGxldCBjb2x1bW5TdGVwVG9QYXRpZW50ID0gdmVjMy5mcm9tVmFsdWVzKC4uLm9yaWVudGF0aW9uLnNsaWNlKDAsIDMpKTtcbiAgICBsZXQgcm93U3RlcFRvUGF0aWVudCA9IHZlYzMuZnJvbVZhbHVlcyguLi5vcmllbnRhdGlvbi5zbGljZSgzLCA2KSk7XG5cbiAgICB2ZWMzLnNjYWxlKGNvbHVtblN0ZXBUb1BhdGllbnQsIGNvbHVtblN0ZXBUb1BhdGllbnQsIHNwYWNpbmdCZXR3ZWVuQ29sdW1ucyk7XG4gICAgdmVjMy5zY2FsZShyb3dTdGVwVG9QYXRpZW50LCByb3dTdGVwVG9QYXRpZW50LCBzcGFjaW5nQmV0d2VlblJvd3MpO1xuICAgIHZlYzMuc2NhbGUoc2xpY2VTdGVwVG9QYXRpZW50LCBzbGljZVN0ZXBUb1BhdGllbnQsIHNwYWNpbmdCZXR3ZWVuU2xpY2VzKTtcblxuICAgIGxldCBvcmlnaW4gPSB2ZWMzLmZyb21WYWx1ZXMoLi4udGhpcy5wb3NpdGlvbigwKSk7XG5cbiAgICBpZiAodGhpcy5waXhlbERpbWVuc2lvbnNbMl0gPiAxKSB7XG4gICAgICBsZXQgcG9zaXRpb24xID0gdmVjMy5mcm9tVmFsdWVzKC4uLnRoaXMucG9zaXRpb24oMSkpO1xuICAgICAgbGV0IG9yaWdpblRvUG9zaXRpb24xID0gdmVjMy5jcmVhdGUoKTtcblxuICAgICAgdmVjMy5zdWJ0cmFjdChvcmlnaW5Ub1Bvc2l0aW9uMSwgcG9zaXRpb24xLCBvcmlnaW4pO1xuICAgICAgaWYgKHZlYzMuZG90KHNsaWNlU3RlcFRvUGF0aWVudCwgb3JpZ2luVG9Qb3NpdGlvbjEpIDwgMCkge1xuICAgICAgICB2ZWMzLnNjYWxlKHNsaWNlU3RlcFRvUGF0aWVudCwgc2xpY2VTdGVwVG9QYXRpZW50LCAtMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbWF0cml4IGZyb20gcGl4ZWwgY29vcmRpbmF0ZXMgSUpLICgwIHRvIE4tMSkgdG8gc2FtcGxpbmcgc3BhY2UgKHBhdGllbnQsIG1tKSBhbmQgaW52ZXJzZVxuICAgIHRoaXMucGl4ZWxUb1BhdGllbnQgPSBtYXQ0LmZyb21WYWx1ZXMoXG4gICAgICAuLi5jb2x1bW5TdGVwVG9QYXRpZW50LFxuICAgICAgMCxcbiAgICAgIC4uLnJvd1N0ZXBUb1BhdGllbnQsXG4gICAgICAwLFxuICAgICAgLi4uc2xpY2VTdGVwVG9QYXRpZW50LFxuICAgICAgMCxcbiAgICAgIC4uLm9yaWdpbixcbiAgICAgIDFcbiAgICApO1xuICAgIGxldCBwYXRpZW50VG9QaXhlbCA9IG1hdDQuY3JlYXRlKCk7XG5cbiAgICBtYXQ0LmludmVydChwYXRpZW50VG9QaXhlbCwgdGhpcy5waXhlbFRvUGF0aWVudCk7XG4gICAgdGhpcy5wYXRpZW50VG9QaXhlbCA9IHBhdGllbnRUb1BpeGVsLnZhbHVlT2YoKTtcblxuICAgIC8vIFRPRE86XG4gICAgLy8gdGhlIGludmVyc2UgdHJhbnNwb3NlIG9mIHRoZSB1cHBlciAzeDMgb2YgdGhlIHBpeGVsVG9QYXRpZW50IG1hdHJpeCxcbiAgICAvLyB3aGljaCBpcyB0aGUgdHJhbnNwb3NlIG9mIHRoZSB1cHBlciAzeDMgb2YgdGhlIHBhdGllbnRUb1BpeGVsIG1hdHJpeFxuICAgIC8qXG4gICAgICBsZXQgcCA9IHRoaXMucGF0aWVudFRvUGl4ZWw7XG4gICAgICB0aGlzLm5vcm1hbFBpeGVsVG9QYXRpZW50ID0gW1xuICAgICAgICBwWzBdWzBdLCBwWzBdWzFdLCBwWzBdWzJdLFxuICAgICAgICBwWzFdWzBdLCBwWzFdWzFdLCBwWzFdWzJdLFxuICAgICAgICBwWzJdWzBdLCBwWzJdWzFdLCBwWzJdWzJdLFxuICAgICAgXTtcbiAgICAgICovXG5cbiAgICAvLyB0aGUgYm91bmRzIGFyZSB0aGUgb3V0ZXIgY29ybmVycyBvZiB0aGUgdmVyeSBmaXJzdCBhbmQgdmVyeSBsYXN0XG4gICAgLy8gcGl4ZWxzIG9mIHRoZSBkYXRhc2V0IG1lYXN1cmVkIGluIHBpeGVsIHNwYWNlXG4gICAgbGV0IGhhbGZTcGFjaW5ncyA9IHZlYzQuZnJvbVZhbHVlcygwLjUsIDAuNSwgMC41LCAwKTtcblxuICAgIHZlYzQudHJhbnNmb3JtTWF0NChoYWxmU3BhY2luZ3MsIGhhbGZTcGFjaW5ncywgdGhpcy5waXhlbFRvUGF0aWVudCk7XG4gICAgbGV0IGZpcnN0Q29ybmVyID0gdmVjMy5jcmVhdGUoKTtcblxuICAgIHZlYzMuc3VidHJhY3QoZmlyc3RDb3JuZXIsIG9yaWdpbiwgaGFsZlNwYWNpbmdzKTtcbiAgICBsZXQgZGltZW5zaW9ucyA9IHZlYzQuZnJvbVZhbHVlcyguLi50aGlzLnBpeGVsRGltZW5zaW9ucywgMSk7XG4gICAgbGV0IHNlY29uZENvcm5lcjQgPSB2ZWM0LmNyZWF0ZSgpO1xuXG4gICAgdmVjNC50cmFuc2Zvcm1NYXQ0KHNlY29uZENvcm5lcjQsIGRpbWVuc2lvbnMsIHRoaXMucGl4ZWxUb1BhdGllbnQpO1xuICAgIHZlYzQuc3VidHJhY3Qoc2Vjb25kQ29ybmVyNCwgc2Vjb25kQ29ybmVyNCwgaGFsZlNwYWNpbmdzKTtcblxuICAgIGxldCBzZWNvbmRDb3JuZXIgPSB2ZWMzLmZyb21WYWx1ZXMoLi4uc2Vjb25kQ29ybmVyNC52YWx1ZU9mKCkuc2xpY2UoMCwgMykpO1xuICAgIGxldCBtaW4gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIGxldCBtYXggPSB2ZWMzLmNyZWF0ZSgpO1xuXG4gICAgdmVjMy5taW4obWluLCBmaXJzdENvcm5lciwgc2Vjb25kQ29ybmVyKTtcbiAgICB2ZWMzLm1heChtYXgsIGZpcnN0Q29ybmVyLCBzZWNvbmRDb3JuZXIpO1xuICAgIHRoaXMuYm91bmRzID0geyBtaW46IG1pbi52YWx1ZU9mKCksIG1heDogbWF4LnZhbHVlT2YoKSB9O1xuXG4gICAgbGV0IGNlbnRlciA9IHZlYzMuY3JlYXRlKCk7XG5cbiAgICB2ZWMzLmFkZChjZW50ZXIsIG1pbiwgbWF4KTtcbiAgICB2ZWMzLnNjYWxlKGNlbnRlciwgY2VudGVyLCAwLjUpO1xuICAgIHRoaXMuY2VudGVyID0gY2VudGVyLnZhbHVlT2YoKTtcbiAgfVxuXG4gIHVuaWZvcm1zKCkge1xuICAgIGxldCB1ID0gc3VwZXIudW5pZm9ybXMoKTtcblxuICAgIC8vIHVbJ25vcm1hbFBpeGVsVG9QYXRpZW50Jyt0aGlzLmlkXSA9IHt0eXBlOiBcIk1hdHJpeDNmdlwiLCB2YWx1ZTogdGhpcy5ub3JtYWxQaXhlbFRvUGF0aWVudH0sXG4gICAgdVtcInBhdGllbnRUb1BpeGVsXCIgKyB0aGlzLmlkXSA9IHtcbiAgICAgIHR5cGU6IFwiTWF0cml4NGZ2XCIsXG4gICAgICB2YWx1ZTogdGhpcy5wYXRpZW50VG9QaXhlbFxuICAgIH07XG4gICAgdVtcInBpeGVsVG9QYXRpZW50XCIgKyB0aGlzLmlkXSA9IHtcbiAgICAgIHR5cGU6IFwiTWF0cml4NGZ2XCIsXG4gICAgICB2YWx1ZTogdGhpcy5waXhlbFRvUGF0aWVudFxuICAgIH07XG4gICAgdVtcInBpeGVsRGltZW5zaW9uc1wiICsgdGhpcy5pZF0gPSB7XG4gICAgICB0eXBlOiBcIjNpdlwiLFxuICAgICAgdmFsdWU6IHRoaXMucGl4ZWxEaW1lbnNpb25zXG4gICAgfTtcbiAgICBsZXQgcGl4ZWxUb1RleHR1cmUgPSB0aGlzLnBpeGVsRGltZW5zaW9ucy5tYXAoZSA9PiAxIC8gZSk7XG5cbiAgICB1W1wicGl4ZWxUb1RleHR1cmVcIiArIHRoaXMuaWRdID0geyB0eXBlOiBcIjNmdlwiLCB2YWx1ZTogcGl4ZWxUb1RleHR1cmUgfTtcbiAgICByZXR1cm4gdTtcbiAgfVxuXG4gIGZpZWxkVG9UZXh0dXJlKGdsKSB7XG4gICAgLy8gY29tbW9uIHRleHR1cmUgb3BlcmF0aW9ucyBmb3IgYWxsIHBpeGVsLWJhc2VkIGZpZWxkc1xuICAgIGxldCBuZWVkc1VwZGF0ZSA9IHN1cGVyLmZpZWxkVG9UZXh0dXJlKGdsKTtcblxuICAgIGlmIChuZWVkc1VwZGF0ZSkge1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzNELCBnbC5URVhUVVJFX0JBU0VfTEVWRUwsIDApO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzNELCBnbC5URVhUVVJFX01BWF9MRVZFTCwgMCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8zRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzNELCBnbC5URVhUVVJFX1dSQVBfUiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgfVxuICAgIHJldHVybiBuZWVkc1VwZGF0ZTtcbiAgfVxuXG4gIHJlc2NhbGVTb3VyY2UoKSB7XG4gICAgLy8gaWRlbnRpdHksIGJ1dCBvdmVycmlkZGVuIGZvciBpbWFnZXNcbiAgICByZXR1cm4gYFxuICAgICAgICBmbG9hdCByZXNjYWxlJHt0aGlzLmlkfShjb25zdCBpbiBmbG9hdCBzYW1wbGVWYWx1ZSkge1xuICAgICAgICAgIHJldHVybihzYW1wbGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIGA7XG4gIH1cblxuICB0cmFuc2ZlckZ1bmN0aW9uU291cmNlKCkge1xuICAgIC8vIG51bGwsIGJ1dCBvdmVycmlkZGVuIGZvciBpbWFnZXMgYW5kIHNlZ21lbnRhdGlvbnNcbiAgICByZXR1cm4gYFxuICAgICAgICB2b2lkIHRyYW5zZmVyRnVuY3Rpb24ke3RoaXMuaWR9IChjb25zdCBpbiBmbG9hdCBzYW1wbGVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW4gZmxvYXQgZ3JhZGllbnRNYWduaXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCB2ZWMzIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgb3BhY2l0eSlcbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yID0gdmVjMygwLiwgMC4sIDAuKTtcbiAgICAgICAgICBvcGFjaXR5ID0gMC47XG4gICAgICAgIH1cbiAgICAgIGA7XG4gIH1cblxuICBzYW1wbGluZ1NoYWRlclNvdXJjZSgpIHtcbiAgICByZXR1cm4gYFxuICAgICAgICB1bmlmb3JtIGhpZ2hwICR7dGhpcy5zYW1wbGVyVHlwZX0gdGV4dHVyZVVuaXQke3RoaXMuaWR9O1xuICBcbiAgICAgICAgJHt0aGlzLnJlc2NhbGVTb3VyY2UoKX1cbiAgICAgICAgJHt0aGlzLnRyYW5zZmVyRnVuY3Rpb25Tb3VyY2UoKX1cbiAgXG4gICAgICAgIHVuaWZvcm0gaW50IHZpc2libGUke3RoaXMuaWR9O1xuICAgICAgICB1bmlmb3JtIG1hdDQgcGF0aWVudFRvUGl4ZWwke3RoaXMuaWR9O1xuICAgICAgICB1bmlmb3JtIG1hdDQgcGl4ZWxUb1BhdGllbnQke3RoaXMuaWR9O1xuICAgICAgICAvLyB1bmlmb3JtIG1hdDMgbm9ybWFsUGl4ZWxUb1BhdGllbnQke3RoaXMuaWR9OyBub3QgY3VycmVudGx5IHVzZWRcbiAgICAgICAgdW5pZm9ybSBpdmVjMyBwaXhlbERpbWVuc2lvbnMke3RoaXMuaWR9O1xuICBcbiAgICAgICAgdmVjMyBwYXRpZW50VG9UZXh0dXJlJHt0aGlzLmlkfShjb25zdCBpbiB2ZWMzIHBhdGllbnRQb2ludClcbiAgICAgICAge1xuICAgICAgICAgIC8vIHN0cFBvaW50IGlzIGluIDAtMSB0ZXh0dXJlIGNvb3JkaW5hdGVzLCBtZWFuaW5nIHRoYXQgaXRcbiAgICAgICAgICAvLyBpcyB0aGUgcGF0aWVudFRvUGl4ZWwgdHJhbnNmb3JtIHNjYWxlZCBieSB0aGUgaW52ZXJzZVxuICAgICAgICAgIC8vIHBpeGVsIGRpbWVuc2lvbnMuXG4gICAgICAgICAgdmVjMyBwaXhlbERpbWVuc2lvbnMgPSB2ZWMzKHBpeGVsRGltZW5zaW9ucyR7dGhpcy5pZH0pO1xuICAgICAgICAgIHZlYzMgZGltZW5zaW9uc0ludmVyc2UgPSB2ZWMzKDEuKSAvIHBpeGVsRGltZW5zaW9ucztcbiAgICAgICAgICB2ZWMzIHN0cFBvaW50ID0gKHBhdGllbnRUb1BpeGVsJHtcbiAgICAgICAgICAgIHRoaXMuaWRcbiAgICAgICAgICB9ICogdmVjNChwYXRpZW50UG9pbnQsIDEuKSkueHl6O1xuICAgICAgICAgIHN0cFBvaW50ICo9IGRpbWVuc2lvbnNJbnZlcnNlO1xuICAgICAgICAgIHJldHVybihzdHBQb2ludCk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIHZlYzMgdGV4dHVyZVRvUGF0aWVudCR7dGhpcy5pZH0oY29uc3QgaW4gdmVjMyBzdHBQb2ludClcbiAgICAgICAge1xuICAgICAgICAgIC8vIGludmVyc2Ugb3BlcmF0aW9uIG9mIHBhdGllbnRUb1RleHR1cmVcbiAgICAgICAgICB2ZWMzIHBpeGVsRGltZW5zaW9ucyA9IHZlYzMocGl4ZWxEaW1lbnNpb25zJHt0aGlzLmlkfSk7XG4gICAgICAgICAgdmVjMyBwYXRpZW50UG9pbnQgPSAocGl4ZWxUb1BhdGllbnQke1xuICAgICAgICAgICAgdGhpcy5pZFxuICAgICAgICAgIH0gKiB2ZWM0KHBpeGVsRGltZW5zaW9ucyAqIHN0cFBvaW50LCAxLikpLnh5ejtcbiAgICAgICAgICByZXR1cm4ocGF0aWVudFBvaW50KTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgdm9pZCBzYW1wbGVUZXh0dXJlJHt0aGlzLmlkfShjb25zdCBpbiAke3RoaXMuc2FtcGxlclR5cGV9IHRleHR1cmVVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIHZlYzMgcGF0aWVudFBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIGZsb2F0IGdyYWRpZW50U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IHZlYzMgbm9ybWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCBmbG9hdCBncmFkaWVudE1hZ25pdHVkZSlcbiAgICAgICAge1xuICBcbiAgICAgICAgICAjZGVmaW5lIFNBTVBMRShwKSByZXNjYWxlJHtcbiAgICAgICAgICAgIHRoaXMuaWRcbiAgICAgICAgICB9KGZsb2F0KCB0ZXh0dXJlKHRleHR1cmVVbml0LCBwKS5yICkpXG4gIFxuICAgICAgICAgIHZlYzMgc3RwUG9pbnQgPSBwYXRpZW50VG9UZXh0dXJlJHt0aGlzLmlkfShwYXRpZW50UG9pbnQpO1xuICAgICAgICAgIHNhbXBsZVZhbHVlID0gU0FNUExFKHN0cFBvaW50KTtcbiAgXG4gICAgICAgICAgLy8gY2VudHJhbCBkaWZmZXJlbmNlIHNhbXBsZSBncmFkaWVudCAoUCBpcyArMSwgTiBpcyAtMSlcbiAgICAgICAgICAvLyBwIDogcG9pbnQgaW4gcGF0aWVudCBzcGFjZVxuICAgICAgICAgIC8vIG8gOiBvZmZzZXQgdmVjdG9yIGluIHBhdGllbnQgc3BhY2UgYWxvbmcgZGltZW5zaW9uXG4gICAgICAgICAgdmVjMyBzTiA9IHZlYzMoMC4pO1xuICAgICAgICAgIHZlYzMgc1AgPSB2ZWMzKDAuKTtcbiAgICAgICAgICB2ZWMzIG9mZnNldCA9IHZlYzMoMC4pO1xuICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICBvZmZzZXRbaV0gPSBncmFkaWVudFNpemU7XG4gICAgICAgICAgICBzUFtpXSA9IFNBTVBMRShwYXRpZW50VG9UZXh0dXJlJHt0aGlzLmlkfShwYXRpZW50UG9pbnQgKyBvZmZzZXQpKTtcbiAgICAgICAgICAgIG9mZnNldFtpXSA9IC1ncmFkaWVudFNpemU7XG4gICAgICAgICAgICBzTltpXSA9IFNBTVBMRShwYXRpZW50VG9UZXh0dXJlJHt0aGlzLmlkfShwYXRpZW50UG9pbnQgKyBvZmZzZXQpKTtcbiAgICAgICAgICAgIG9mZnNldFtpXSA9IDAuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2ZWMzIGdyYWRpZW50ID0gdmVjMyggKHNQWzBdLXNOWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNQWzFdLXNOWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNQWzJdLXNOWzJdKSApO1xuICAgICAgICAgIGdyYWRpZW50TWFnbml0dWRlID0gbGVuZ3RoKGdyYWRpZW50KTtcbiAgICAgICAgICBub3JtYWwgPSBncmFkaWVudCAqIDEuL2dyYWRpZW50TWFnbml0dWRlO1xuICBcbiAgICAgICAgICAjdW5kZWYgU0FNUExFXG4gICAgICAgIH1cbiAgXG4gICAgICAgIHZvaWQgc2FtcGxlRmllbGQke3RoaXMuaWR9IChjb25zdCBpbiAke3RoaXMuc2FtcGxlclR5cGV9IHRleHR1cmVVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW4gdmVjMyBzYW1wbGVQb2ludFBhdGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbiBmbG9hdCBncmFkaWVudFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBub3JtYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgZ3JhZGllbnRNYWduaXR1ZGUpXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBzYW1wbGVQb2ludCBpcyBpbiBwYXRpZW50IGNvb3JkaW5hdGVzLCBzdHAgaXMgdGV4dHVyZSBjb29yZGluYXRlc1xuICAgICAgICAgIHZlYzMgc2FtcGxlUG9pbnQgPSB0cmFuc2Zvcm1Qb2ludCR7dGhpcy5pZH0oc2FtcGxlUG9pbnRQYXRpZW50KTtcbiAgICAgICAgICB2ZWMzIHN0cFBvaW50ID0gcGF0aWVudFRvVGV4dHVyZSR7dGhpcy5pZH0oc2FtcGxlUG9pbnQpO1xuICBcbiAgICAgICAgICAvLyB0cml2aWFsIHJlamVjdCBvdXRzaWRlXG4gICAgICAgICAgaWYgKGFueShsZXNzVGhhbihzdHBQb2ludCwgdmVjMygwLikpKVxuICAgICAgICAgICAgICAgfHwgYW55KGdyZWF0ZXJUaGFuKHN0cFBvaW50LHZlYzMoMS4pKSkpIHtcbiAgICAgICAgICAgIHNhbXBsZVZhbHVlID0gMC47XG4gICAgICAgICAgICBub3JtYWwgPSB2ZWMzKDAuKTtcbiAgICAgICAgICAgIGdyYWRpZW50TWFnbml0dWRlID0gMC47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNhbXBsZVRleHR1cmUke3RoaXMuaWR9KHRleHR1cmVVbml0LCBzYW1wbGVQb2ludCwgZ3JhZGllbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlVmFsdWUsIG5vcm1hbCwgZ3JhZGllbnRNYWduaXR1ZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IFBpeGVsRmllbGQgZnJvbSBcIi4vUGl4ZWxGaWVsZFwiO1xuaW1wb3J0IGRjbWpzIGZyb20gXCJkY21qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWdtZW50YXRpb25GaWVsZCBleHRlbmRzIFBpeGVsRmllbGQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2FtcGxlclR5cGUgPSBcInNhbXBsZXIzRFwiO1xuXG4gICAgdGhpcy5hbmFseXplKCk7XG4gIH1cblxuICB1bnBhY2soKSB7XG4gICAgLy8gY29udmVydCBCaXRzQWxsb2NhdGVkLCBCaXRzU3RvcmVkID09IDEgZGF0YXNldCB0b1xuICAgIC8vIDAtMjU1IFVpbnQ4QXJyYXkgcGl4ZWwgZGF0YVxuICAgIC8vIFRPRE86IHRoaXMgY291bGQgYmUgbW92ZWQgdG8gdGhlIFNlZ21lbnRhdGlvbk5vcm1hbGl6ZXJcbiAgICAvLyBUT0RPOiBmb3Igc2VnbWVudGF0aW9uIGdlbmVyYXRvcnMgdG8gY3JlYXRlIHZhbGlkIFNlZ21lbnRhdGlvbkZpZWxkc1xuICAgIC8vICAgICAgIHRoaXMgY29kZSB3aWxsIG5lZWQgdG8gYmUgbWFkZSBjb25kaXRpb25hbCBvbiB0aGUgQml0c0FsbG9jYXRlZFxuICAgIGxldCBbY29sdW1ucywgcm93cywgc2xpY2VzXSA9IFtcbiAgICAgIHRoaXMuZGF0YXNldC5Sb3dzLFxuICAgICAgdGhpcy5kYXRhc2V0LkNvbHVtbnMsXG4gICAgICB0aGlzLmRhdGFzZXQuTnVtYmVyT2ZGcmFtZXNcbiAgICBdLm1hcChOdW1iZXIpO1xuICAgIGxldCBzbGljZVNpemUgPSByb3dzICogY29sdW1ucztcbiAgICBsZXQgcGFja2VkUGl4ZWxEYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhc2V0LlBpeGVsRGF0YSk7XG4gICAgbGV0IGJ5dGVzUGVyUGFja2VkUm93ID0gTWF0aC5jZWlsKHJvd3MgLyA4KTtcbiAgICBsZXQgcGFja2VkU2xpY2VTaXplID0gcm93cyAqIGJ5dGVzUGVyUGFja2VkUm93O1xuICAgIGxldCBwaXhlbERhdGEgPSBuZXcgVWludDhBcnJheShzbGljZXMgKiByb3dzICogY29sdW1ucyk7XG5cbiAgICBmb3IgKGxldCBzbGljZSA9IDA7IHNsaWNlIDwgc2xpY2VzOyBzbGljZSsrKSB7XG4gICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dzOyByb3crKykge1xuICAgICAgICBsZXQgcGFja2VkUm93SW5kZXggPSBzbGljZSAqIHBhY2tlZFNsaWNlU2l6ZSArIHJvdyAqIGJ5dGVzUGVyUGFja2VkUm93O1xuXG4gICAgICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IGNvbHVtbnM7IGNvbHVtbisrKSB7XG4gICAgICAgICAgbGV0IGNvbHVtbkJ5dGVJbmRleCA9IE1hdGguZmxvb3IoY29sdW1uIC8gOCk7XG4gICAgICAgICAgbGV0IHBhY2tlZEluZGV4ID0gcGFja2VkUm93SW5kZXggKyBjb2x1bW5CeXRlSW5kZXg7XG4gICAgICAgICAgbGV0IGNvbHVtbkJpdEluZGV4ID0gY29sdW1uICUgODtcbiAgICAgICAgICBsZXQgbWFzayA9IDEgPDwgY29sdW1uQml0SW5kZXg7XG4gICAgICAgICAgbGV0IHVucGFja2VkVmFsdWUgPVxuICAgICAgICAgICAgKHBhY2tlZFBpeGVsRGF0YVtwYWNrZWRJbmRleF0gJiBtYXNrKSA+PiBjb2x1bW5CaXRJbmRleDtcblxuICAgICAgICAgIHBpeGVsRGF0YVtzbGljZSAqIHNsaWNlU2l6ZSArIHJvdyAqIGNvbHVtbnMgKyBjb2x1bW5dID1cbiAgICAgICAgICAgIDI1NSAqIHVucGFja2VkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBpeGVsRGF0YTtcbiAgfVxuXG4gIGFuYWx5emUoKSB7XG4gICAgc3VwZXIuYW5hbHl6ZSgpO1xuXG4gICAgaWYgKHRoaXMuZGF0YXNldC5CaXRzQWxsb2NhdGVkICE9PSAxKSB7XG4gICAgICBjb25zb2xlLndhcm4odGhpcywgXCJDYW4gb25seSByZW5kZXIgMSBiaXQgZGF0YVwiKTtcbiAgICB9XG4gICAgbGV0IHNoYXJlZEdyb3VwcyA9IHRoaXMuZGF0YXNldC5TaGFyZWRGdW5jdGlvbmFsR3JvdXBzU2VxdWVuY2U7XG4gICAgbGV0IHBpeGVsTWVhc3VyZXMgPSBzaGFyZWRHcm91cHMuUGl4ZWxNZWFzdXJlc1NlcXVlbmNlO1xuXG4gICAgaWYgKHBpeGVsTWVhc3VyZXMuU3BhY2luZ0JldHdlZW5TbGljZXMgIT09IHBpeGVsTWVhc3VyZXMuU2xpY2VUaGlja25lc3MpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJTcGFjaW5nQmV0d2VlblNsaWNlcyBhbmQgU2xpY2VUaGlja25lc3Mgc2hvdWxkIGJlIGVxdWFsIGZvciBTRUdcIlxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgcGl4ZWxNZWFzdXJlcy5TcGFjaW5nQmV0d2VlblNsaWNlcyArXG4gICAgICAgICAgXCIgIT09IFwiICtcbiAgICAgICAgICBwaXhlbE1lYXN1cmVzLlNsaWNlVGhpY2tuZXNzXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJnYmEgPSBkY21qcy5kYXRhLkNvbG9ycy5kaWNvbWxhYjJSR0IoXG4gICAgICB0aGlzLmRhdGFzZXQuU2VnbWVudFswXS5SZWNvbW1lbmRlZERpc3BsYXlDSUVMYWJWYWx1ZVxuICAgICk7XG4gICAgdGhpcy5yZ2JhLnB1c2goMSk7XG4gICAgdGhpcy5ncmFkaWVudE9wYWNpdHlTY2FsZSA9IDE7XG4gIH1cblxuICB1bmlmb3JtcygpIHtcbiAgICBsZXQgdSA9IHN1cGVyLnVuaWZvcm1zKCk7XG5cbiAgICByZXR1cm4gdTtcbiAgfVxuXG4gIHRyYW5zZmVyRnVuY3Rpb25Tb3VyY2UoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHJnYmEke3RoaXMuaWR9O1xuICAgICAgICB1bmlmb3JtIGZsb2F0IGdyYWRpZW50T3BhY2l0eVNjYWxlJHt0aGlzLmlkfTtcbiAgICAgICAgdm9pZCB0cmFuc2ZlckZ1bmN0aW9uJHt0aGlzLmlkfSAoY29uc3QgaW4gZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIGZsb2F0IGdyYWRpZW50TWFnbml0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IGZsb2F0IG9wYWNpdHkpXG4gICAgICAgIHtcbiAgICAgICAgICBjb2xvciA9IHZlYzMoMC4sIDAuLCAwLik7XG4gICAgICAgICAgb3BhY2l0eSA9IDAuO1xuICAgICAgICAgIGlmIChzYW1wbGVWYWx1ZSA+IDAuKSB7XG4gICAgICAgICAgICBjb2xvciA9IHNhbXBsZVZhbHVlICogcmdiYSR7dGhpcy5pZH0ucmdiO1xuICAgICAgICAgICAgb3BhY2l0eSA9IHJnYmEke3RoaXMuaWR9LmEgKiBncmFkaWVudE1hZ25pdHVkZSAqIGdyYWRpZW50T3BhY2l0eVNjYWxlJHt0aGlzLmlkfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGA7XG4gIH1cblxuICBmaWVsZFRvVGV4dHVyZShnbCkge1xuICAgIC8vIGNhbm5vdCBiZSBzdWJjbGFzc2VkLlxuICAgIGxldCBuZWVkc1VwZGF0ZSA9IHN1cGVyLmZpZWxkVG9UZXh0dXJlKGdsKTtcblxuICAgIGlmIChuZWVkc1VwZGF0ZSkge1xuICAgICAgbGV0IFt3LCBoLCBkXSA9IHRoaXMucGl4ZWxEaW1lbnNpb25zO1xuICAgICAgbGV0IGJ5dGVBcnJheSA9IHRoaXMudW5wYWNrKCk7IC8vIGZvciBub3csIGRvbid0IHNhdmUgdW5wYWNrZWQgcGl4ZWwgZGF0YVxuXG4gICAgICBnbC50ZXhTdG9yYWdlM0QoZ2wuVEVYVFVSRV8zRCwgMSwgZ2wuUjgsIHcsIGgsIGQpO1xuICAgICAgZ2wudGV4U3ViSW1hZ2UzRChcbiAgICAgICAgZ2wuVEVYVFVSRV8zRCxcbiAgICAgICAgMCwgLy8gbGV2ZWwsIG9mZnNldHNcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgdyxcbiAgICAgICAgaCxcbiAgICAgICAgZCxcbiAgICAgICAgZ2wuUkVELFxuICAgICAgICBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICBieXRlQXJyYXlcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8zRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgdGhpcy51cGRhdGVkKCk7XG4gICAgfVxuICB9XG59XG5cblNlZ21lbnRhdGlvbkZpZWxkLmZpZWxkc0Zyb21EYXRhc2V0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAvLyBtYWtlIG9uZSBkYXRhc2V0IHBlciBzZWdtZW50IGFuZCBhIGNvcnJlc3BvbmRpbmcgZmllbGRcbiAgLy8gQWx3YXlzIHVzZSAxLWJhc2VkIGluZGV4aW5nIGZvciBzZWdtZW50TnVtYmVyXG4gIGlmICghb3B0aW9ucy5kYXRhc2V0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChcbiAgICBvcHRpb25zLmRhdGFzZXQuTnVtYmVyT2ZGcmFtZXMgIT09XG4gICAgb3B0aW9ucy5kYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLmxlbmd0aFxuICApIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgXCJOdW1iZXIgb2YgZnJhbWVzIGRvZXMgbm90IG1hdGNoIG51bWJlciBvZiBmdW5jdGlvbmFsIGdyb3Vwc1wiXG4gICAgKTtcbiAgfVxuICBsZXQgZmllbGRzID0gW107XG4gIC8vIGZpcnN0LCBtYWtlIGEgbmV3IGRhdGFzZXQgcGVyIHNlZ21lbnRcbiAgbGV0IHNlZ21lbnREYXRhc2V0cyA9IFtcIkVtcHR5IERhdGFzZXQgMFwiXTtcbiAgbGV0IGpzb25EYXRhc2V0ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5kYXRhc2V0KTtcbiAgbGV0IHNlZ21lbnRzID0gb3B0aW9ucy5kYXRhc2V0LlNlZ21lbnQ7XG5cbiAgaWYgKCEoc2VnbWVudHMubGVuZ3RoID4gMCkpIHtcbiAgICBzZWdtZW50cyA9IFtvcHRpb25zLmRhdGFzZXQuU2VnbWVudF07XG4gIH1cbiAgc2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBsZXQgc2VnbWVudERhdGFzZXQgPSBKU09OLnBhcnNlKGpzb25EYXRhc2V0KTtcblxuICAgIHNlZ21lbnREYXRhc2V0LlNlZ21lbnQgPSBbc2VnbWVudF07XG4gICAgc2VnbWVudERhdGFzZXRzLnB1c2goc2VnbWVudERhdGFzZXQpO1xuICB9KTtcbiAgLy8gbmV4dCBtYWtlIGEgbGlzdCBvZiBmcmFtZXMgcGVyIHNlZ21lbnRcbiAgbGV0IHNlZ21lbnRHcm91cExpc3RzID0gW1wiRW1wdHkgR3JvdXBMaXN0IDBcIl07XG5cbiAgb3B0aW9ucy5kYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlLmZvckVhY2goZnVuY3Rpb25hbEdyb3VwID0+IHtcbiAgICBsZXQgc2VnbWVudE51bWJlciA9XG4gICAgICBmdW5jdGlvbmFsR3JvdXAuU2VnbWVudElkZW50aWZpY2F0aW9uLlJlZmVyZW5jZWRTZWdtZW50TnVtYmVyO1xuXG4gICAgaWYgKCFzZWdtZW50R3JvdXBMaXN0c1tzZWdtZW50TnVtYmVyXSkge1xuICAgICAgc2VnbWVudEdyb3VwTGlzdHNbc2VnbWVudE51bWJlcl0gPSBbXTtcbiAgICB9XG4gICAgLy8gdGhpcyB3aWxsIGJlIHNlZ21lbnQgMSBvZiBuZXcgZGF0YXNldFxuICAgIGZ1bmN0aW9uYWxHcm91cC5TZWdtZW50SWRlbnRpZmljYXRpb24uUmVmZXJlbmNlZFNlZ21lbnROdW1iZXIgPSAxO1xuICAgIHNlZ21lbnRHcm91cExpc3RzW3NlZ21lbnROdW1iZXJdLnB1c2goZnVuY3Rpb25hbEdyb3VwKTtcbiAgfSk7XG4gIC8vIGRldGVybWluZSBwZXItc2VnbWVudCBpbmRleCBpbnRvIHRoZSBwaXhlbCBkYXRhXG4gIC8vIFRPRE86IG9ubHkgaGFuZGxlcyBvbmUtYml0LXBlciBwaXhlbCwgbGFzdCBieXRlIHBhZGRlZFxuICBsZXQgZnJhbWVTaXplID0gTWF0aC5jZWlsKFxuICAgIChvcHRpb25zLmRhdGFzZXQuUm93cyAqIG9wdGlvbnMuZGF0YXNldC5Db2x1bW5zKSAvIDhcbiAgKTtcbiAgbGV0IHNlZ21lbnRPZmZzZXRzID0gW1wiRW1wdHkgb2Zmc2V0IDBcIiwgMF07XG4gIGxldCBzZWdtZW50U2l6ZXMgPSBbXCJFbXB0eSBzaXplIDBcIl07XG5cbiAgc2VnbWVudEdyb3VwTGlzdHMuc2xpY2UoMSkuZm9yRWFjaChzZWdtZW50R3JvdXBMaXN0ID0+IHtcbiAgICBsZXQgcHJldmlvdXNPZmZzZXQgPSBzZWdtZW50T2Zmc2V0c1tzZWdtZW50T2Zmc2V0cy5sZW5ndGggLSAxXTtcbiAgICBsZXQgbnVtYmVyT2ZGcmFtZXMgPSBzZWdtZW50R3JvdXBMaXN0Lmxlbmd0aDtcblxuICAgIHNlZ21lbnRPZmZzZXRzLnB1c2gocHJldmlvdXNPZmZzZXQgKyBmcmFtZVNpemUgKiBudW1iZXJPZkZyYW1lcyk7XG4gICAgc2VnbWVudFNpemVzLnB1c2goZnJhbWVTaXplICogbnVtYmVyT2ZGcmFtZXMpO1xuICB9KTtcbiAgLy8gTm93IG1ha2UgbmV3IHBlci1mcmFtZSBmdW5jdGlvbmFsIGdyb3VwcyBhbmQgcGl4ZWwgZGF0YSBmb3IgZWFjaCBkYXRhc2V0XG4gIC8vIChza2lwcGluZyB0aGUgZmlyc3Qga25vd24tdG8tYmUtZW1wdHkgc2VnbWVudClcbiAgLy8gVE9ETzogYXNzdW1lcyBmcmFtZXMgYXJlIHNvcnRlZCBhbmQgZmlyc3QgZnJhbWUgaXMgb3JpZ2luIFdSVCBzbGljZSBkaXJlY3Rpb25cbiAgbGV0IHNlZ21lbnROdW1iZXIgPSAxO1xuXG4gIHNlZ21lbnRHcm91cExpc3RzLnNsaWNlKDEpLmZvckVhY2goc2VnbWVudEdyb3VwTGlzdCA9PiB7XG4gICAgbGV0IGRhdGFzZXQgPSBzZWdtZW50RGF0YXNldHNbc2VnbWVudE51bWJlcl07XG5cbiAgICBkYXRhc2V0LlBlckZyYW1lRnVuY3Rpb25hbEdyb3Vwc1NlcXVlbmNlID0gc2VnbWVudEdyb3VwTGlzdDtcbiAgICBsZXQgYmVnaW4gPSBzZWdtZW50T2Zmc2V0c1tzZWdtZW50TnVtYmVyXTtcbiAgICBsZXQgZW5kID0gYmVnaW4gKyBzZWdtZW50U2l6ZXNbc2VnbWVudE51bWJlcl07XG5cbiAgICBkYXRhc2V0Lk51bWJlck9mRnJhbWVzID0gc2VnbWVudEdyb3VwTGlzdHNbc2VnbWVudE51bWJlcl0ubGVuZ3RoO1xuICAgIGRhdGFzZXQuUGl4ZWxEYXRhID0gb3B0aW9ucy5kYXRhc2V0LlBpeGVsRGF0YS5zbGljZShiZWdpbiwgZW5kKTtcbiAgICBmaWVsZHMucHVzaChuZXcgU2VnbWVudGF0aW9uRmllbGQoeyBkYXRhc2V0IH0pKTtcbiAgICBzZWdtZW50TnVtYmVyKys7XG4gIH0pO1xuICByZXR1cm4gZmllbGRzO1xufTtcbiIsImltcG9ydCBQaXhlbEZpZWxkIGZyb20gXCIuL1BpeGVsRmllbGRcIjtcbmltcG9ydCB7IHZlYzMgfSBmcm9tIFwiZ2wtbWF0cml4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zZm9ybUZpZWxkIGV4dGVuZHMgUGl4ZWxGaWVsZCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuYW5hbHl6ZSgpO1xuICB9XG5cbiAgZGltZW5zaW9ucygpIHtcbiAgICBsZXQgZ3JpZCA9IHRoaXMuZGF0YXNldC5EZWZvcm1hYmxlUmVnaXN0cmF0aW9uLkRlZm9ybWFibGVSZWdpc3RyYXRpb25HcmlkO1xuXG4gICAgcmV0dXJuIGdyaWQuR3JpZERpbWVuc2lvbnMubWFwKE51bWJlcik7XG4gIH1cblxuICBvcmllbnRhdGlvbigpIHtcbiAgICBsZXQgZ3JpZCA9IHRoaXMuZGF0YXNldC5EZWZvcm1hYmxlUmVnaXN0cmF0aW9uLkRlZm9ybWFibGVSZWdpc3RyYXRpb25HcmlkO1xuXG4gICAgcmV0dXJuIGdyaWQuSW1hZ2VPcmllbnRhdGlvblBhdGllbnQubWFwKE51bWJlcik7XG4gIH1cblxuICBzcGFjaW5nKCkge1xuICAgIGxldCBncmlkID0gdGhpcy5kYXRhc2V0LkRlZm9ybWFibGVSZWdpc3RyYXRpb24uRGVmb3JtYWJsZVJlZ2lzdHJhdGlvbkdyaWQ7XG5cbiAgICByZXR1cm4gZ3JpZC5HcmlkUmVzb2x1dGlvbi5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIHBvc2l0aW9uKGZyYW1lKSB7XG4gICAgZnJhbWUgPSBmcmFtZSB8fCAwO1xuICAgIGxldCBncmlkID0gdGhpcy5kYXRhc2V0LkRlZm9ybWFibGVSZWdpc3RyYXRpb24uRGVmb3JtYWJsZVJlZ2lzdHJhdGlvbkdyaWQ7XG4gICAgbGV0IG9yaWdpbiA9IGdyaWQuSW1hZ2VQb3NpdGlvblBhdGllbnQubWFwKE51bWJlcik7XG4gICAgbGV0IHNsaWNlU3RlcCA9IHRoaXMuc2xpY2VTdGVwRnJvbU9yaWVudGF0aW9uKHRoaXMub3JpZW50YXRpb24oKSk7XG4gICAgbGV0IHNsaWNlU3BhY2luZyA9IHRoaXMuc3BhY2luZygpWzJdO1xuXG4gICAgdmVjMy5zY2FsZShzbGljZVN0ZXAsIHNsaWNlU3RlcCwgZnJhbWUgKiBzbGljZVNwYWNpbmcpO1xuICAgIGxldCBmcmFtZVBvc2l0aW9uID0gdmVjMy5jcmVhdGUoKTtcblxuICAgIHZlYzMuYWRkKGZyYW1lUG9zaXRpb24sIG9yaWdpbiwgc2xpY2VTdGVwKTtcbiAgICByZXR1cm4gZnJhbWVQb3NpdGlvbjtcbiAgfVxuXG4gIGFuYWx5emUoKSB7XG4gICAgc3VwZXIuYW5hbHl6ZSgpO1xuICB9XG5cbiAgdW5pZm9ybXMoKSB7XG4gICAgLy8gVE9ETzogbmVlZCB0byBiZSBrZXllZCB0byBpZCAoaW4gYSBzdHJ1Y3QpXG4gICAgbGV0IHUgPSBzdXBlci51bmlmb3JtcygpO1xuXG4gICAgcmV0dXJuIHU7XG4gIH1cblxuICBzYW1wbGluZ1NoYWRlclNvdXJjZSgpIHtcbiAgICByZXR1cm4gYFxuICAgICAgICB1bmlmb3JtIGhpZ2hwICR7dGhpcy5zYW1wbGVyVHlwZX0gdGV4dHVyZVVuaXQke3RoaXMuaWR9O1xuICBcbiAgICAgICAgdm9pZCB0cmFuc2ZlckZ1bmN0aW9uJHt0aGlzLmlkfSAoY29uc3QgaW4gZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIGZsb2F0IGdyYWRpZW50TWFnbml0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IGZsb2F0IG9wYWNpdHkpXG4gICAgICAgIHtcbiAgICAgICAgICBjb2xvciA9IHZlYzMoc2FtcGxlVmFsdWUsIDAuNSwgMi4pO1xuICAgICAgICAgIG9wYWNpdHkgPSBncmFkaWVudE1hZ25pdHVkZTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgdW5pZm9ybSBpbnQgdmlzaWJsZSR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gbWF0NCBwYXRpZW50VG9QaXhlbCR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gbWF0NCBwaXhlbFRvUGF0aWVudCR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gbWF0MyBub3JtYWxQaXhlbFRvUGF0aWVudCR7dGhpcy5pZH07XG4gICAgICAgIHVuaWZvcm0gaXZlYzMgcGl4ZWxEaW1lbnNpb25zJHt0aGlzLmlkfTtcbiAgXG4gICAgICAgIHZlYzMgcGF0aWVudFRvVGV4dHVyZSR7dGhpcy5pZH0oY29uc3QgaW4gdmVjMyBwYXRpZW50UG9pbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBzdHBQb2ludCBpcyBpbiAwLTEgdGV4dHVyZSBjb29yZGluYXRlcywgbWVhbmluZyB0aGF0IGl0XG4gICAgICAgICAgLy8gaXMgdGhlIHBhdGllbnRUb1BpeGVsIHRyYW5zZm9ybSBzY2FsZWQgYnkgdGhlIGludmVyc2VcbiAgICAgICAgICAvLyBwaXhlbCBkaW1lbnNpb25zLlxuICAgICAgICAgIHZlYzMgcGl4ZWxEaW1lbnNpb25zID0gdmVjMyhwaXhlbERpbWVuc2lvbnMke3RoaXMuaWR9KTtcbiAgICAgICAgICB2ZWMzIGRpbWVuc2lvbnNJbnZlcnNlID0gdmVjMygxLikgLyBwaXhlbERpbWVuc2lvbnM7XG4gICAgICAgICAgdmVjMyBzdHBQb2ludCA9IChwYXRpZW50VG9QaXhlbCR7dGhpcy5pZH0gKiB2ZWM0KHBhdGllbnRQb2ludCwgMS4pKS54eXo7XG4gICAgICAgICAgc3RwUG9pbnQgKj0gZGltZW5zaW9uc0ludmVyc2U7XG4gICAgICAgICAgcmV0dXJuKHN0cFBvaW50KTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgdmVjMyB0ZXh0dXJlVG9QYXRpZW50JHt0aGlzLmlkfShjb25zdCBpbiB2ZWMzIHN0cFBvaW50KVxuICAgICAgICB7XG4gICAgICAgICAgLy8gaW52ZXJzZSBvcGVyYXRpb24gb2YgcGF0aWVudFRvVGV4dHVyZVxuICAgICAgICAgIHZlYzMgcGl4ZWxEaW1lbnNpb25zID0gdmVjMyhwaXhlbERpbWVuc2lvbnMke3RoaXMuaWR9KTtcbiAgICAgICAgICB2ZWMzIHBhdGllbnRQb2ludCA9IChwaXhlbFRvUGF0aWVudCR7dGhpcy5pZH0gKiB2ZWM0KHBpeGVsRGltZW5zaW9ucyAqIHN0cFBvaW50LCAxLikpLnh5ejtcbiAgICAgICAgICByZXR1cm4ocGF0aWVudFBvaW50KTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgdm9pZCBzYW1wbGVUZXh0dXJlJHt0aGlzLmlkfShjb25zdCBpbiAke3RoaXMuc2FtcGxlclR5cGV9IHRleHR1cmVVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIHZlYzMgcGF0aWVudFBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluIGZsb2F0IGdyYWRpZW50U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0IHZlYzMgbm9ybWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCBmbG9hdCBncmFkaWVudE1hZ25pdHVkZSlcbiAgICAgICAge1xuICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgdmVjMyBzdHBQb2ludCA9IHBhdGllbnRUb1RleHR1cmUke3RoaXMuaWR9KHBhdGllbnRQb2ludCk7XG4gICAgICAgICAgbm9ybWFsID0gdGV4dHVyZSh0ZXh0dXJlVW5pdCwgc3RwUG9pbnQpLnh5ejtcbiAgICAgICAgICBzYW1wbGVWYWx1ZSA9IGxlbmd0aChub3JtYWwpO1xuICAgICAgICAgIGdyYWRpZW50TWFnbml0dWRlID0gc2FtcGxlVmFsdWU7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIHZvaWQgc2FtcGxlRmllbGQke3RoaXMuaWR9IChjb25zdCBpbiAke3RoaXMuc2FtcGxlclR5cGV9IHRleHR1cmVVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW4gdmVjMyBzYW1wbGVQb2ludFBhdGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbiBmbG9hdCBncmFkaWVudFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgc2FtcGxlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjMyBub3JtYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgZ3JhZGllbnRNYWduaXR1ZGUpXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBzYW1wbGVQb2ludCBpcyBpbiBwYXRpZW50IGNvb3JkaW5hdGVzLCBzdHAgaXMgdGV4dHVyZSBjb29yZGluYXRlc1xuICAgICAgICAgIHZlYzMgc2FtcGxlUG9pbnQgPSB0cmFuc2Zvcm1Qb2ludCR7dGhpcy5pZH0oc2FtcGxlUG9pbnRQYXRpZW50KTtcbiAgICAgICAgICB2ZWMzIHN0cFBvaW50ID0gcGF0aWVudFRvVGV4dHVyZSR7dGhpcy5pZH0oc2FtcGxlUG9pbnQpO1xuICBcbiAgICAgICAgICAvLyB0cml2aWFsIHJlamVjdCBvdXRzaWRlXG4gICAgICAgICAgaWYgKGFueShsZXNzVGhhbihzdHBQb2ludCwgdmVjMygwLikpKVxuICAgICAgICAgICAgICAgfHwgYW55KGdyZWF0ZXJUaGFuKHN0cFBvaW50LHZlYzMoMS4pKSkpIHtcbiAgICAgICAgICAgIHNhbXBsZVZhbHVlID0gMC47XG4gICAgICAgICAgICBub3JtYWwgPSB2ZWMzKDAuKTtcbiAgICAgICAgICAgIGdyYWRpZW50TWFnbml0dWRlID0gMC47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNhbXBsZVZhbHVlID0gMTAwLjtcbiAgICAgICAgICAgIG5vcm1hbCA9IHZlYzMoMS4pO1xuICAgICAgICAgICAgZ3JhZGllbnRNYWduaXR1ZGUgPSAxLjtcbiAgICAgICAgICAgIHNhbXBsZVRleHR1cmUke3RoaXMuaWR9KHRleHR1cmVVbml0LCBzYW1wbGVQb2ludCwgZ3JhZGllbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlVmFsdWUsIG5vcm1hbCwgZ3JhZGllbnRNYWduaXR1ZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYDtcbiAgfVxuXG4gIGZpZWxkVG9UZXh0dXJlKGdsKSB7XG4gICAgLy8gYWxsb2NhdGUgYW5kIGZpbGwgYSBmbG9hdCAzRCB0ZXh0dXJlIGZvciB0aGUgaW1hZ2UgZGF0YS5cbiAgICAvLyBjYW5ub3QgYmUgc3ViY2xhc3NlZC5cbiAgICBsZXQgbmVlZHNVcGRhdGUgPSBzdXBlci5maWVsZFRvVGV4dHVyZShnbCk7XG5cbiAgICBpZiAobmVlZHNVcGRhdGUpIHtcbiAgICAgIGxldCBncmlkID0gdGhpcy5kYXRhc2V0LkRlZm9ybWFibGVSZWdpc3RyYXRpb24uRGVmb3JtYWJsZVJlZ2lzdHJhdGlvbkdyaWQ7XG4gICAgICBsZXQgW3csIGgsIGRdID0gdGhpcy5waXhlbERpbWVuc2lvbnM7XG5cbiAgICAgIGdsLnRleFN0b3JhZ2UzRChnbC5URVhUVVJFXzNELCAxLCBnbC5SR0JBMzJGLCB3LCBoLCBkKTtcbiAgICAgIGlmICghdGhpcy5nZW5lcmF0b3IpIHtcbiAgICAgICAgLy8gb25seSB0cmFuc2ZlciB0aGUgZGF0YSBpZiB0aGVyZSdzIG5vIGdlbmVyYXRvciB0aGF0IHdpbGwgZmlsbCBpdCBpblxuICAgICAgICAvLyB0aGUgdGV4dHVyZSBtdXN0IGJlIHJnYmEgc28gaXQgY2FuIGJlIHJlbmRlcmVkIGludG9cbiAgICAgICAgLy8gc28gd2UgbWFrZSBhIG5ldyBidWZmZXIgd2l0aCA0IGNvbXBvbmVudHNcbiAgICAgICAgLy8gVE9ETzogaWYgdGhpcyBiZWNvbWVzIGFuZCBlZmZpY2llbmN5IGlzc3VlIHRoZSBwcm9jZXNzXG4gICAgICAgIC8vIGNvdWxkIGJlIGltcGxlbWVudGVkIGluIGEgc2hhZGVyXG4gICAgICAgIGxldCB2ZWN0b3JDb3VudCA9IHcgKiBoICogZDtcbiAgICAgICAgbGV0IHJnYmFBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodmVjdG9yQ291bnQgKiA0KTtcblxuICAgICAgICBmb3IgKGxldCB2ZWN0b3JJbmRleCA9IDA7IHZlY3RvckluZGV4IDwgdmVjdG9yQ291bnQ7IHZlY3RvckluZGV4KyspIHtcbiAgICAgICAgICByZ2JhQXJyYXlbNCAqIHZlY3RvckluZGV4XSA9IGdyaWQuVmVjdG9yR3JpZERhdGFbMyAqIHZlY3RvckluZGV4XTtcbiAgICAgICAgICByZ2JhQXJyYXlbNCAqIHZlY3RvckluZGV4ICsgMV0gPVxuICAgICAgICAgICAgZ3JpZC5WZWN0b3JHcmlkRGF0YVszICogdmVjdG9ySW5kZXggKyAxXTtcbiAgICAgICAgICByZ2JhQXJyYXlbNCAqIHZlY3RvckluZGV4ICsgMl0gPVxuICAgICAgICAgICAgZ3JpZC5WZWN0b3JHcmlkRGF0YVszICogdmVjdG9ySW5kZXggKyAyXTtcbiAgICAgICAgICByZ2JhQXJyYXlbNCAqIHZlY3RvckluZGV4ICsgM10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGdsLnRleFN1YkltYWdlM0QoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8zRCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLCAvLyBsZXZlbCwgb2Zmc2V0c1xuICAgICAgICAgIHcsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGdsLlJHQkEsXG4gICAgICAgICAgZ2wuRkxPQVQsXG4gICAgICAgICAgcmdiYUFycmF5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8zRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgdGhpcy51cGRhdGVkKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgRmllbGQgZnJvbSBcIi4vRmllbGRcIjtcbmltcG9ydCBJbWFnZUZpZWxkIGZyb20gXCIuL0ltYWdlRmllbGRcIjtcbmltcG9ydCBQaXhlbEZpZWxkIGZyb20gXCIuL1BpeGVsRmllbGRcIjtcbmltcG9ydCBTZWdtZW50YXRpb25GaWVsZCBmcm9tIFwiLi9TZWdtZW50YXRpb25GaWVsZFwiO1xuaW1wb3J0IFRyYW5zZm9ybUZpZWxkIGZyb20gXCIuL1RyYW5zZm9ybUZpZWxkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRmllbGQsXG4gIEltYWdlRmllbGQsXG4gIFBpeGVsRmllbGQsXG4gIFNlZ21lbnRhdGlvbkZpZWxkLFxuICBUcmFuc2Zvcm1GaWVsZFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgQUNUSVZFX0FUVFJJQlVURVM6IDM1NzIxLFxuICBBQ1RJVkVfVEVYVFVSRTogMzQwMTYsXG4gIEFDVElWRV9VTklGT1JNUzogMzU3MTgsXG4gIEFDVElWRV9VTklGT1JNX0JMT0NLUzogMzUzODIsXG4gIEFMSUFTRURfTElORV9XSURUSF9SQU5HRTogMzM5MDIsXG4gIEFMSUFTRURfUE9JTlRfU0laRV9SQU5HRTogMzM5MDEsXG4gIEFMUEhBOiA2NDA2LFxuICBBTFBIQV9CSVRTOiAzNDEzLFxuICBBTFJFQURZX1NJR05BTEVEOiAzNzE0NixcbiAgQUxXQVlTOiA1MTksXG4gIEFOWV9TQU1QTEVTX1BBU1NFRDogMzU4ODcsXG4gIEFOWV9TQU1QTEVTX1BBU1NFRF9DT05TRVJWQVRJVkU6IDM2MjAyLFxuICBBUlJBWV9CVUZGRVI6IDM0OTYyLFxuICBBUlJBWV9CVUZGRVJfQklORElORzogMzQ5NjQsXG4gIEFUVEFDSEVEX1NIQURFUlM6IDM1NzE3LFxuICBCQUNLOiAxMDI5LFxuICBCTEVORDogMzA0MixcbiAgQkxFTkRfQ09MT1I6IDMyNzczLFxuICBCTEVORF9EU1RfQUxQSEE6IDMyOTcwLFxuICBCTEVORF9EU1RfUkdCOiAzMjk2OCxcbiAgQkxFTkRfRVFVQVRJT046IDMyNzc3LFxuICBCTEVORF9FUVVBVElPTl9BTFBIQTogMzQ4NzcsXG4gIEJMRU5EX0VRVUFUSU9OX1JHQjogMzI3NzcsXG4gIEJMRU5EX1NSQ19BTFBIQTogMzI5NzEsXG4gIEJMRU5EX1NSQ19SR0I6IDMyOTY5LFxuICBCTFVFX0JJVFM6IDM0MTIsXG4gIEJPT0w6IDM1NjcwLFxuICBCT09MX1ZFQzI6IDM1NjcxLFxuICBCT09MX1ZFQzM6IDM1NjcyLFxuICBCT09MX1ZFQzQ6IDM1NjczLFxuICBCUk9XU0VSX0RFRkFVTFRfV0VCR0w6IDM3NDQ0LFxuICBCVUZGRVJfU0laRTogMzQ2NjAsXG4gIEJVRkZFUl9VU0FHRTogMzQ2NjEsXG4gIEJZVEU6IDUxMjAsXG4gIENDVzogMjMwNSxcbiAgQ0xBTVBfVE9fRURHRTogMzMwNzEsXG4gIENPTE9SOiA2MTQ0LFxuICBDT0xPUl9BVFRBQ0hNRU5UMDogMzYwNjQsXG4gIENPTE9SX0FUVEFDSE1FTlQxOiAzNjA2NSxcbiAgQ09MT1JfQVRUQUNITUVOVDI6IDM2MDY2LFxuICBDT0xPUl9BVFRBQ0hNRU5UMzogMzYwNjcsXG4gIENPTE9SX0FUVEFDSE1FTlQ0OiAzNjA2OCxcbiAgQ09MT1JfQVRUQUNITUVOVDU6IDM2MDY5LFxuICBDT0xPUl9BVFRBQ0hNRU5UNjogMzYwNzAsXG4gIENPTE9SX0FUVEFDSE1FTlQ3OiAzNjA3MSxcbiAgQ09MT1JfQVRUQUNITUVOVDg6IDM2MDcyLFxuICBDT0xPUl9BVFRBQ0hNRU5UOTogMzYwNzMsXG4gIENPTE9SX0FUVEFDSE1FTlQxMDogMzYwNzQsXG4gIENPTE9SX0FUVEFDSE1FTlQxMTogMzYwNzUsXG4gIENPTE9SX0FUVEFDSE1FTlQxMjogMzYwNzYsXG4gIENPTE9SX0FUVEFDSE1FTlQxMzogMzYwNzcsXG4gIENPTE9SX0FUVEFDSE1FTlQxNDogMzYwNzgsXG4gIENPTE9SX0FUVEFDSE1FTlQxNTogMzYwNzksXG4gIENPTE9SX0JVRkZFUl9CSVQ6IDE2Mzg0LFxuICBDT0xPUl9DTEVBUl9WQUxVRTogMzEwNixcbiAgQ09MT1JfV1JJVEVNQVNLOiAzMTA3LFxuICBDT01QQVJFX1JFRl9UT19URVhUVVJFOiAzNDg5NCxcbiAgQ09NUElMRV9TVEFUVVM6IDM1NzEzLFxuICBDT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUzogMzQ0NjcsXG4gIENPTkRJVElPTl9TQVRJU0ZJRUQ6IDM3MTQ4LFxuICBDT05TVEFOVF9BTFBIQTogMzI3NzEsXG4gIENPTlNUQU5UX0NPTE9SOiAzMjc2OSxcbiAgQ09OVEVYVF9MT1NUX1dFQkdMOiAzNzQ0MixcbiAgQ09QWV9SRUFEX0JVRkZFUjogMzY2NjIsXG4gIENPUFlfUkVBRF9CVUZGRVJfQklORElORzogMzY2NjIsXG4gIENPUFlfV1JJVEVfQlVGRkVSOiAzNjY2MyxcbiAgQ09QWV9XUklURV9CVUZGRVJfQklORElORzogMzY2NjMsXG4gIENVTExfRkFDRTogMjg4NCxcbiAgQ1VMTF9GQUNFX01PREU6IDI4ODUsXG4gIENVUlJFTlRfUFJPR1JBTTogMzU3MjUsXG4gIENVUlJFTlRfUVVFUlk6IDM0OTE3LFxuICBDVVJSRU5UX1ZFUlRFWF9BVFRSSUI6IDM0MzQyLFxuICBDVzogMjMwNCxcbiAgREVDUjogNzY4MyxcbiAgREVDUl9XUkFQOiAzNDA1NixcbiAgREVMRVRFX1NUQVRVUzogMzU3MTIsXG4gIERFUFRIOiA2MTQ1LFxuICBERVBUSDI0X1NURU5DSUw4OiAzNTA1NixcbiAgREVQVEgzMkZfU1RFTkNJTDg6IDM2MDEzLFxuICBERVBUSF9BVFRBQ0hNRU5UOiAzNjA5NixcbiAgREVQVEhfQklUUzogMzQxNCxcbiAgREVQVEhfQlVGRkVSX0JJVDogMjU2LFxuICBERVBUSF9DTEVBUl9WQUxVRTogMjkzMSxcbiAgREVQVEhfQ09NUE9ORU5UOiA2NDAyLFxuICBERVBUSF9DT01QT05FTlQxNjogMzMxODksXG4gIERFUFRIX0NPTVBPTkVOVDI0OiAzMzE5MCxcbiAgREVQVEhfQ09NUE9ORU5UMzJGOiAzNjAxMixcbiAgREVQVEhfRlVOQzogMjkzMixcbiAgREVQVEhfUkFOR0U6IDI5MjgsXG4gIERFUFRIX1NURU5DSUw6IDM0MDQxLFxuICBERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQ6IDMzMzA2LFxuICBERVBUSF9URVNUOiAyOTI5LFxuICBERVBUSF9XUklURU1BU0s6IDI5MzAsXG4gIERJVEhFUjogMzAyNCxcbiAgRE9OVF9DQVJFOiA0MzUyLFxuICBEUkFXX0JVRkZFUjA6IDM0ODUzLFxuICBEUkFXX0JVRkZFUjE6IDM0ODU0LFxuICBEUkFXX0JVRkZFUjI6IDM0ODU1LFxuICBEUkFXX0JVRkZFUjM6IDM0ODU2LFxuICBEUkFXX0JVRkZFUjQ6IDM0ODU3LFxuICBEUkFXX0JVRkZFUjU6IDM0ODU4LFxuICBEUkFXX0JVRkZFUjY6IDM0ODU5LFxuICBEUkFXX0JVRkZFUjc6IDM0ODYwLFxuICBEUkFXX0JVRkZFUjg6IDM0ODYxLFxuICBEUkFXX0JVRkZFUjk6IDM0ODYyLFxuICBEUkFXX0JVRkZFUjEwOiAzNDg2MyxcbiAgRFJBV19CVUZGRVIxMTogMzQ4NjQsXG4gIERSQVdfQlVGRkVSMTI6IDM0ODY1LFxuICBEUkFXX0JVRkZFUjEzOiAzNDg2NixcbiAgRFJBV19CVUZGRVIxNDogMzQ4NjcsXG4gIERSQVdfQlVGRkVSMTU6IDM0ODY4LFxuICBEUkFXX0ZSQU1FQlVGRkVSOiAzNjAwOSxcbiAgRFJBV19GUkFNRUJVRkZFUl9CSU5ESU5HOiAzNjAwNixcbiAgRFNUX0FMUEhBOiA3NzIsXG4gIERTVF9DT0xPUjogNzc0LFxuICBEWU5BTUlDX0NPUFk6IDM1MDUwLFxuICBEWU5BTUlDX0RSQVc6IDM1MDQ4LFxuICBEWU5BTUlDX1JFQUQ6IDM1MDQ5LFxuICBFTEVNRU5UX0FSUkFZX0JVRkZFUjogMzQ5NjMsXG4gIEVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkc6IDM0OTY1LFxuICBFUVVBTDogNTE0LFxuICBGQVNURVNUOiA0MzUzLFxuICBGTE9BVDogNTEyNixcbiAgRkxPQVRfMzJfVU5TSUdORURfSU5UXzI0XzhfUkVWOiAzNjI2OSxcbiAgRkxPQVRfTUFUMjogMzU2NzQsXG4gIEZMT0FUX01BVDJ4MzogMzU2ODUsXG4gIEZMT0FUX01BVDJ4NDogMzU2ODYsXG4gIEZMT0FUX01BVDM6IDM1Njc1LFxuICBGTE9BVF9NQVQzeDI6IDM1Njg3LFxuICBGTE9BVF9NQVQzeDQ6IDM1Njg4LFxuICBGTE9BVF9NQVQ0OiAzNTY3NixcbiAgRkxPQVRfTUFUNHgyOiAzNTY4OSxcbiAgRkxPQVRfTUFUNHgzOiAzNTY5MCxcbiAgRkxPQVRfVkVDMjogMzU2NjQsXG4gIEZMT0FUX1ZFQzM6IDM1NjY1LFxuICBGTE9BVF9WRUM0OiAzNTY2NixcbiAgRlJBR01FTlRfU0hBREVSOiAzNTYzMixcbiAgRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVDogMzU3MjMsXG4gIEZSQU1FQlVGRkVSOiAzNjE2MCxcbiAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9BTFBIQV9TSVpFOiAzMzMwMSxcbiAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9CTFVFX1NJWkU6IDMzMzAwLFxuICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTE9SX0VOQ09ESU5HOiAzMzI5NixcbiAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT01QT05FTlRfVFlQRTogMzMyOTcsXG4gIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfREVQVEhfU0laRTogMzMzMDIsXG4gIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfR1JFRU5fU0laRTogMzMyOTksXG4gIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX05BTUU6IDM2MDQ5LFxuICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9UWVBFOiAzNjA0OCxcbiAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9SRURfU0laRTogMzMyOTgsXG4gIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfU1RFTkNJTF9TSVpFOiAzMzMwMyxcbiAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0NVQkVfTUFQX0ZBQ0U6IDM2MDUxLFxuICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEFZRVI6IDM2MDUyLFxuICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEVWRUw6IDM2MDUwLFxuICBGUkFNRUJVRkZFUl9CSU5ESU5HOiAzNjAwNixcbiAgRlJBTUVCVUZGRVJfQ09NUExFVEU6IDM2MDUzLFxuICBGUkFNRUJVRkZFUl9ERUZBVUxUOiAzMzMwNCxcbiAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UOiAzNjA1NCxcbiAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TOiAzNjA1NyxcbiAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQ6IDM2MDU1LFxuICBGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01VTFRJU0FNUExFOiAzNjE4MixcbiAgRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6IDM2MDYxLFxuICBGUk9OVDogMTAyOCxcbiAgRlJPTlRfQU5EX0JBQ0s6IDEwMzIsXG4gIEZST05UX0ZBQ0U6IDI4ODYsXG4gIEZVTkNfQUREOiAzMjc3NCxcbiAgRlVOQ19SRVZFUlNFX1NVQlRSQUNUOiAzMjc3OSxcbiAgRlVOQ19TVUJUUkFDVDogMzI3NzgsXG4gIEdFTkVSQVRFX01JUE1BUF9ISU5UOiAzMzE3MCxcbiAgR0VRVUFMOiA1MTgsXG4gIEdSRUFURVI6IDUxNixcbiAgR1JFRU5fQklUUzogMzQxMSxcbiAgSEFMRl9GTE9BVDogNTEzMSxcbiAgSElHSF9GTE9BVDogMzYzMzgsXG4gIEhJR0hfSU5UOiAzNjM0MSxcbiAgSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQ6IDM1NzM5LFxuICBJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEU6IDM1NzM4LFxuICBJTkNSOiA3NjgyLFxuICBJTkNSX1dSQVA6IDM0MDU1LFxuICBJTlQ6IDUxMjQsXG4gIElOVEVSTEVBVkVEX0FUVFJJQlM6IDM1OTgwLFxuICBJTlRfMl8xMF8xMF8xMF9SRVY6IDM2MjU1LFxuICBJTlRfU0FNUExFUl8yRDogMzYyOTgsXG4gIElOVF9TQU1QTEVSXzJEX0FSUkFZOiAzNjMwMyxcbiAgSU5UX1NBTVBMRVJfM0Q6IDM2Mjk5LFxuICBJTlRfU0FNUExFUl9DVUJFOiAzNjMwMCxcbiAgSU5UX1ZFQzI6IDM1NjY3LFxuICBJTlRfVkVDMzogMzU2NjgsXG4gIElOVF9WRUM0OiAzNTY2OSxcbiAgSU5WQUxJRF9FTlVNOiAxMjgwLFxuICBJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTjogMTI4NixcbiAgSU5WQUxJRF9JTkRFWDogNDI5NDk2NzI5NSxcbiAgSU5WQUxJRF9PUEVSQVRJT046IDEyODIsXG4gIElOVkFMSURfVkFMVUU6IDEyODEsXG4gIElOVkVSVDogNTM4NixcbiAgS0VFUDogNzY4MCxcbiAgTEVRVUFMOiA1MTUsXG4gIExFU1M6IDUxMyxcbiAgTElORUFSOiA5NzI5LFxuICBMSU5FQVJfTUlQTUFQX0xJTkVBUjogOTk4NyxcbiAgTElORUFSX01JUE1BUF9ORUFSRVNUOiA5OTg1LFxuICBMSU5FUzogMSxcbiAgTElORV9MT09QOiAyLFxuICBMSU5FX1NUUklQOiAzLFxuICBMSU5FX1dJRFRIOiAyODQ5LFxuICBMSU5LX1NUQVRVUzogMzU3MTQsXG4gIExPV19GTE9BVDogMzYzMzYsXG4gIExPV19JTlQ6IDM2MzM5LFxuICBMVU1JTkFOQ0U6IDY0MDksXG4gIExVTUlOQU5DRV9BTFBIQTogNjQxMCxcbiAgTUFYOiAzMjc3NixcbiAgTUFYXzNEX1RFWFRVUkVfU0laRTogMzI4ODMsXG4gIE1BWF9BUlJBWV9URVhUVVJFX0xBWUVSUzogMzUwNzEsXG4gIE1BWF9DTElFTlRfV0FJVF9USU1FT1VUX1dFQkdMOiAzNzQ0NyxcbiAgTUFYX0NPTE9SX0FUVEFDSE1FTlRTOiAzNjA2MyxcbiAgTUFYX0NPTUJJTkVEX0ZSQUdNRU5UX1VOSUZPUk1fQ09NUE9ORU5UUzogMzUzNzksXG4gIE1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTOiAzNTY2MSxcbiAgTUFYX0NPTUJJTkVEX1VOSUZPUk1fQkxPQ0tTOiAzNTM3NCxcbiAgTUFYX0NPTUJJTkVEX1ZFUlRFWF9VTklGT1JNX0NPTVBPTkVOVFM6IDM1Mzc3LFxuICBNQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFOiAzNDA3NixcbiAgTUFYX0RSQVdfQlVGRkVSUzogMzQ4NTIsXG4gIE1BWF9FTEVNRU5UU19JTkRJQ0VTOiAzMzAwMSxcbiAgTUFYX0VMRU1FTlRTX1ZFUlRJQ0VTOiAzMzAwMCxcbiAgTUFYX0VMRU1FTlRfSU5ERVg6IDM2MjAzLFxuICBNQVhfRlJBR01FTlRfSU5QVVRfQ09NUE9ORU5UUzogMzcxNTcsXG4gIE1BWF9GUkFHTUVOVF9VTklGT1JNX0JMT0NLUzogMzUzNzMsXG4gIE1BWF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFM6IDM1NjU3LFxuICBNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTOiAzNjM0OSxcbiAgTUFYX1BST0dSQU1fVEVYRUxfT0ZGU0VUOiAzNTA3NyxcbiAgTUFYX1JFTkRFUkJVRkZFUl9TSVpFOiAzNDAyNCxcbiAgTUFYX1NBTVBMRVM6IDM2MTgzLFxuICBNQVhfU0VSVkVSX1dBSVRfVElNRU9VVDogMzcxMzcsXG4gIE1BWF9URVhUVVJFX0lNQUdFX1VOSVRTOiAzNDkzMCxcbiAgTUFYX1RFWFRVUkVfTE9EX0JJQVM6IDM0MDQ1LFxuICBNQVhfVEVYVFVSRV9TSVpFOiAzMzc5LFxuICBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX0lOVEVSTEVBVkVEX0NPTVBPTkVOVFM6IDM1OTc4LFxuICBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0FUVFJJQlM6IDM1OTc5LFxuICBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0NPTVBPTkVOVFM6IDM1OTY4LFxuICBNQVhfVU5JRk9STV9CTE9DS19TSVpFOiAzNTM3NixcbiAgTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTOiAzNTM3NSxcbiAgTUFYX1ZBUllJTkdfQ09NUE9ORU5UUzogMzU2NTksXG4gIE1BWF9WQVJZSU5HX1ZFQ1RPUlM6IDM2MzQ4LFxuICBNQVhfVkVSVEVYX0FUVFJJQlM6IDM0OTIxLFxuICBNQVhfVkVSVEVYX09VVFBVVF9DT01QT05FTlRTOiAzNzE1NCxcbiAgTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTOiAzNTY2MCxcbiAgTUFYX1ZFUlRFWF9VTklGT1JNX0JMT0NLUzogMzUzNzEsXG4gIE1BWF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTOiAzNTY1OCxcbiAgTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlM6IDM2MzQ3LFxuICBNQVhfVklFV1BPUlRfRElNUzogMzM4NixcbiAgTUVESVVNX0ZMT0FUOiAzNjMzNyxcbiAgTUVESVVNX0lOVDogMzYzNDAsXG4gIE1JTjogMzI3NzUsXG4gIE1JTl9QUk9HUkFNX1RFWEVMX09GRlNFVDogMzUwNzYsXG4gIE1JUlJPUkVEX1JFUEVBVDogMzM2NDgsXG4gIE5FQVJFU1Q6IDk3MjgsXG4gIE5FQVJFU1RfTUlQTUFQX0xJTkVBUjogOTk4NixcbiAgTkVBUkVTVF9NSVBNQVBfTkVBUkVTVDogOTk4NCxcbiAgTkVWRVI6IDUxMixcbiAgTklDRVNUOiA0MzU0LFxuICBOT05FOiAwLFxuICBOT1RFUVVBTDogNTE3LFxuICBOT19FUlJPUjogMCxcbiAgT0JKRUNUX1RZUEU6IDM3MTM4LFxuICBPTkU6IDEsXG4gIE9ORV9NSU5VU19DT05TVEFOVF9BTFBIQTogMzI3NzIsXG4gIE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUjogMzI3NzAsXG4gIE9ORV9NSU5VU19EU1RfQUxQSEE6IDc3MyxcbiAgT05FX01JTlVTX0RTVF9DT0xPUjogNzc1LFxuICBPTkVfTUlOVVNfU1JDX0FMUEhBOiA3NzEsXG4gIE9ORV9NSU5VU19TUkNfQ09MT1I6IDc2OSxcbiAgT1VUX09GX01FTU9SWTogMTI4NSxcbiAgUEFDS19BTElHTk1FTlQ6IDMzMzMsXG4gIFBBQ0tfUk9XX0xFTkdUSDogMzMzMCxcbiAgUEFDS19TS0lQX1BJWEVMUzogMzMzMixcbiAgUEFDS19TS0lQX1JPV1M6IDMzMzEsXG4gIFBJWEVMX1BBQ0tfQlVGRkVSOiAzNTA1MSxcbiAgUElYRUxfUEFDS19CVUZGRVJfQklORElORzogMzUwNTMsXG4gIFBJWEVMX1VOUEFDS19CVUZGRVI6IDM1MDUyLFxuICBQSVhFTF9VTlBBQ0tfQlVGRkVSX0JJTkRJTkc6IDM1MDU1LFxuICBQT0lOVFM6IDAsXG4gIFBPTFlHT05fT0ZGU0VUX0ZBQ1RPUjogMzI4MjQsXG4gIFBPTFlHT05fT0ZGU0VUX0ZJTEw6IDMyODIzLFxuICBQT0xZR09OX09GRlNFVF9VTklUUzogMTA3NTIsXG4gIFFVRVJZX1JFU1VMVDogMzQ5MTgsXG4gIFFVRVJZX1JFU1VMVF9BVkFJTEFCTEU6IDM0OTE5LFxuICBSODogMzMzMjEsXG4gIFI4STogMzMzMjksXG4gIFI4VUk6IDMzMzMwLFxuICBSOF9TTk9STTogMzY3NTYsXG4gIFIxMUZfRzExRl9CMTBGOiAzNTg5OCxcbiAgUjE2RjogMzMzMjUsXG4gIFIxNkk6IDMzMzMxLFxuICBSMTZVSTogMzMzMzIsXG4gIFIzMkY6IDMzMzI2LFxuICBSMzJJOiAzMzMzMyxcbiAgUjMyVUk6IDMzMzM0LFxuICBSQVNURVJJWkVSX0RJU0NBUkQ6IDM1OTc3LFxuICBSRUFEX0JVRkZFUjogMzA3NCxcbiAgUkVBRF9GUkFNRUJVRkZFUjogMzYwMDgsXG4gIFJFQURfRlJBTUVCVUZGRVJfQklORElORzogMzYwMTAsXG4gIFJFRDogNjQwMyxcbiAgUkVEX0JJVFM6IDM0MTAsXG4gIFJFRF9JTlRFR0VSOiAzNjI0NCxcbiAgUkVOREVSQlVGRkVSOiAzNjE2MSxcbiAgUkVOREVSQlVGRkVSX0FMUEhBX1NJWkU6IDM2MTc5LFxuICBSRU5ERVJCVUZGRVJfQklORElORzogMzYwMDcsXG4gIFJFTkRFUkJVRkZFUl9CTFVFX1NJWkU6IDM2MTc4LFxuICBSRU5ERVJCVUZGRVJfREVQVEhfU0laRTogMzYxODAsXG4gIFJFTkRFUkJVRkZFUl9HUkVFTl9TSVpFOiAzNjE3NyxcbiAgUkVOREVSQlVGRkVSX0hFSUdIVDogMzYxNjMsXG4gIFJFTkRFUkJVRkZFUl9JTlRFUk5BTF9GT1JNQVQ6IDM2MTY0LFxuICBSRU5ERVJCVUZGRVJfUkVEX1NJWkU6IDM2MTc2LFxuICBSRU5ERVJCVUZGRVJfU0FNUExFUzogMzYwMTEsXG4gIFJFTkRFUkJVRkZFUl9TVEVOQ0lMX1NJWkU6IDM2MTgxLFxuICBSRU5ERVJCVUZGRVJfV0lEVEg6IDM2MTYyLFxuICBSRU5ERVJFUjogNzkzNyxcbiAgUkVQRUFUOiAxMDQ5NyxcbiAgUkVQTEFDRTogNzY4MSxcbiAgUkc6IDMzMzE5LFxuICBSRzg6IDMzMzIzLFxuICBSRzhJOiAzMzMzNSxcbiAgUkc4VUk6IDMzMzM2LFxuICBSRzhfU05PUk06IDM2NzU3LFxuICBSRzE2RjogMzMzMjcsXG4gIFJHMTZJOiAzMzMzNyxcbiAgUkcxNlVJOiAzMzMzOCxcbiAgUkczMkY6IDMzMzI4LFxuICBSRzMySTogMzMzMzksXG4gIFJHMzJVSTogMzMzNDAsXG4gIFJHQjogNjQwNyxcbiAgUkdCNV9BMTogMzI4NTUsXG4gIFJHQjg6IDMyODQ5LFxuICBSR0I4STogMzYyMzksXG4gIFJHQjhVSTogMzYyMjEsXG4gIFJHQjhfU05PUk06IDM2NzU4LFxuICBSR0I5X0U1OiAzNTkwMSxcbiAgUkdCMTBfQTI6IDMyODU3LFxuICBSR0IxMF9BMlVJOiAzNjk3NSxcbiAgUkdCMTZGOiAzNDg0MyxcbiAgUkdCMTZJOiAzNjIzMyxcbiAgUkdCMTZVSTogMzYyMTUsXG4gIFJHQjMyRjogMzQ4MzcsXG4gIFJHQjMySTogMzYyMjcsXG4gIFJHQjMyVUk6IDM2MjA5LFxuICBSR0I1NjU6IDM2MTk0LFxuICBSR0JBOiA2NDA4LFxuICBSR0JBNDogMzI4NTQsXG4gIFJHQkE4OiAzMjg1NixcbiAgUkdCQThJOiAzNjIzOCxcbiAgUkdCQThVSTogMzYyMjAsXG4gIFJHQkE4X1NOT1JNOiAzNjc1OSxcbiAgUkdCQTE2RjogMzQ4NDIsXG4gIFJHQkExNkk6IDM2MjMyLFxuICBSR0JBMTZVSTogMzYyMTQsXG4gIFJHQkEzMkY6IDM0ODM2LFxuICBSR0JBMzJJOiAzNjIyNixcbiAgUkdCQTMyVUk6IDM2MjA4LFxuICBSR0JBX0lOVEVHRVI6IDM2MjQ5LFxuICBSR0JfSU5URUdFUjogMzYyNDgsXG4gIFJHX0lOVEVHRVI6IDMzMzIwLFxuICBTQU1QTEVSXzJEOiAzNTY3OCxcbiAgU0FNUExFUl8yRF9BUlJBWTogMzYyODksXG4gIFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XOiAzNjI5MixcbiAgU0FNUExFUl8yRF9TSEFET1c6IDM1NjgyLFxuICBTQU1QTEVSXzNEOiAzNTY3OSxcbiAgU0FNUExFUl9CSU5ESU5HOiAzNTA5NyxcbiAgU0FNUExFUl9DVUJFOiAzNTY4MCxcbiAgU0FNUExFUl9DVUJFX1NIQURPVzogMzYyOTMsXG4gIFNBTVBMRVM6IDMyOTM3LFxuICBTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0U6IDMyOTI2LFxuICBTQU1QTEVfQlVGRkVSUzogMzI5MzYsXG4gIFNBTVBMRV9DT1ZFUkFHRTogMzI5MjgsXG4gIFNBTVBMRV9DT1ZFUkFHRV9JTlZFUlQ6IDMyOTM5LFxuICBTQU1QTEVfQ09WRVJBR0VfVkFMVUU6IDMyOTM4LFxuICBTQ0lTU09SX0JPWDogMzA4OCxcbiAgU0NJU1NPUl9URVNUOiAzMDg5LFxuICBTRVBBUkFURV9BVFRSSUJTOiAzNTk4MSxcbiAgU0hBREVSX1RZUEU6IDM1NjYzLFxuICBTSEFESU5HX0xBTkdVQUdFX1ZFUlNJT046IDM1NzI0LFxuICBTSE9SVDogNTEyMixcbiAgU0lHTkFMRUQ6IDM3MTQ1LFxuICBTSUdORURfTk9STUFMSVpFRDogMzY3NjQsXG4gIFNSQ19BTFBIQTogNzcwLFxuICBTUkNfQUxQSEFfU0FUVVJBVEU6IDc3NixcbiAgU1JDX0NPTE9SOiA3NjgsXG4gIFNSR0I6IDM1OTA0LFxuICBTUkdCODogMzU5MDUsXG4gIFNSR0I4X0FMUEhBODogMzU5MDcsXG4gIFNUQVRJQ19DT1BZOiAzNTA0NixcbiAgU1RBVElDX0RSQVc6IDM1MDQ0LFxuICBTVEFUSUNfUkVBRDogMzUwNDUsXG4gIFNURU5DSUw6IDYxNDYsXG4gIFNURU5DSUxfQVRUQUNITUVOVDogMzYxMjgsXG4gIFNURU5DSUxfQkFDS19GQUlMOiAzNDgxNyxcbiAgU1RFTkNJTF9CQUNLX0ZVTkM6IDM0ODE2LFxuICBTVEVOQ0lMX0JBQ0tfUEFTU19ERVBUSF9GQUlMOiAzNDgxOCxcbiAgU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfUEFTUzogMzQ4MTksXG4gIFNURU5DSUxfQkFDS19SRUY6IDM2MDAzLFxuICBTVEVOQ0lMX0JBQ0tfVkFMVUVfTUFTSzogMzYwMDQsXG4gIFNURU5DSUxfQkFDS19XUklURU1BU0s6IDM2MDA1LFxuICBTVEVOQ0lMX0JJVFM6IDM0MTUsXG4gIFNURU5DSUxfQlVGRkVSX0JJVDogMTAyNCxcbiAgU1RFTkNJTF9DTEVBUl9WQUxVRTogMjk2MSxcbiAgU1RFTkNJTF9GQUlMOiAyOTY0LFxuICBTVEVOQ0lMX0ZVTkM6IDI5NjIsXG4gIFNURU5DSUxfSU5ERVg4OiAzNjE2OCxcbiAgU1RFTkNJTF9QQVNTX0RFUFRIX0ZBSUw6IDI5NjUsXG4gIFNURU5DSUxfUEFTU19ERVBUSF9QQVNTOiAyOTY2LFxuICBTVEVOQ0lMX1JFRjogMjk2NyxcbiAgU1RFTkNJTF9URVNUOiAyOTYwLFxuICBTVEVOQ0lMX1ZBTFVFX01BU0s6IDI5NjMsXG4gIFNURU5DSUxfV1JJVEVNQVNLOiAyOTY4LFxuICBTVFJFQU1fQ09QWTogMzUwNDIsXG4gIFNUUkVBTV9EUkFXOiAzNTA0MCxcbiAgU1RSRUFNX1JFQUQ6IDM1MDQxLFxuICBTVUJQSVhFTF9CSVRTOiAzNDA4LFxuICBTWU5DX0NPTkRJVElPTjogMzcxMzksXG4gIFNZTkNfRkVOQ0U6IDM3MTQyLFxuICBTWU5DX0ZMQUdTOiAzNzE0MSxcbiAgU1lOQ19GTFVTSF9DT01NQU5EU19CSVQ6IDEsXG4gIFNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFOiAzNzE0MyxcbiAgU1lOQ19TVEFUVVM6IDM3MTQwLFxuICBURVhUVVJFOiA1ODkwLFxuICBURVhUVVJFMDogMzM5ODQsXG4gIFRFWFRVUkUxOiAzMzk4NSxcbiAgVEVYVFVSRTI6IDMzOTg2LFxuICBURVhUVVJFMzogMzM5ODcsXG4gIFRFWFRVUkU0OiAzMzk4OCxcbiAgVEVYVFVSRTU6IDMzOTg5LFxuICBURVhUVVJFNjogMzM5OTAsXG4gIFRFWFRVUkU3OiAzMzk5MSxcbiAgVEVYVFVSRTg6IDMzOTkyLFxuICBURVhUVVJFOTogMzM5OTMsXG4gIFRFWFRVUkUxMDogMzM5OTQsXG4gIFRFWFRVUkUxMTogMzM5OTUsXG4gIFRFWFRVUkUxMjogMzM5OTYsXG4gIFRFWFRVUkUxMzogMzM5OTcsXG4gIFRFWFRVUkUxNDogMzM5OTgsXG4gIFRFWFRVUkUxNTogMzM5OTksXG4gIFRFWFRVUkUxNjogMzQwMDAsXG4gIFRFWFRVUkUxNzogMzQwMDEsXG4gIFRFWFRVUkUxODogMzQwMDIsXG4gIFRFWFRVUkUxOTogMzQwMDMsXG4gIFRFWFRVUkUyMDogMzQwMDQsXG4gIFRFWFRVUkUyMTogMzQwMDUsXG4gIFRFWFRVUkUyMjogMzQwMDYsXG4gIFRFWFRVUkUyMzogMzQwMDcsXG4gIFRFWFRVUkUyNDogMzQwMDgsXG4gIFRFWFRVUkUyNTogMzQwMDksXG4gIFRFWFRVUkUyNjogMzQwMTAsXG4gIFRFWFRVUkUyNzogMzQwMTEsXG4gIFRFWFRVUkUyODogMzQwMTIsXG4gIFRFWFRVUkUyOTogMzQwMTMsXG4gIFRFWFRVUkUzMDogMzQwMTQsXG4gIFRFWFRVUkUzMTogMzQwMTUsXG4gIFRFWFRVUkVfMkQ6IDM1NTMsXG4gIFRFWFRVUkVfMkRfQVJSQVk6IDM1ODY2LFxuICBURVhUVVJFXzNEOiAzMjg3OSxcbiAgVEVYVFVSRV9CQVNFX0xFVkVMOiAzMzA4NCxcbiAgVEVYVFVSRV9CSU5ESU5HXzJEOiAzMjg3MyxcbiAgVEVYVFVSRV9CSU5ESU5HXzJEX0FSUkFZOiAzNTg2OSxcbiAgVEVYVFVSRV9CSU5ESU5HXzNEOiAzMjg3NCxcbiAgVEVYVFVSRV9CSU5ESU5HX0NVQkVfTUFQOiAzNDA2OCxcbiAgVEVYVFVSRV9DT01QQVJFX0ZVTkM6IDM0ODkzLFxuICBURVhUVVJFX0NPTVBBUkVfTU9ERTogMzQ4OTIsXG4gIFRFWFRVUkVfQ1VCRV9NQVA6IDM0MDY3LFxuICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1g6IDM0MDcwLFxuICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1k6IDM0MDcyLFxuICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1o6IDM0MDc0LFxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1g6IDM0MDY5LFxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1k6IDM0MDcxLFxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1o6IDM0MDczLFxuICBURVhUVVJFX0lNTVVUQUJMRV9GT1JNQVQ6IDM3MTY3LFxuICBURVhUVVJFX0lNTVVUQUJMRV9MRVZFTFM6IDMzNTAzLFxuICBURVhUVVJFX01BR19GSUxURVI6IDEwMjQwLFxuICBURVhUVVJFX01BWF9MRVZFTDogMzMwODUsXG4gIFRFWFRVUkVfTUFYX0xPRDogMzMwODMsXG4gIFRFWFRVUkVfTUlOX0ZJTFRFUjogMTAyNDEsXG4gIFRFWFRVUkVfTUlOX0xPRDogMzMwODIsXG4gIFRFWFRVUkVfV1JBUF9SOiAzMjg4MixcbiAgVEVYVFVSRV9XUkFQX1M6IDEwMjQyLFxuICBURVhUVVJFX1dSQVBfVDogMTAyNDMsXG4gIFRJTUVPVVRfRVhQSVJFRDogMzcxNDcsXG4gIFRJTUVPVVRfSUdOT1JFRDogLTEsXG4gIFRSQU5TRk9STV9GRUVEQkFDSzogMzYzODYsXG4gIFRSQU5TRk9STV9GRUVEQkFDS19BQ1RJVkU6IDM2Mzg4LFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfQklORElORzogMzYzODksXG4gIFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVI6IDM1OTgyLFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX0JJTkRJTkc6IDM1OTgzLFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX01PREU6IDM1OTY3LFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NJWkU6IDM1OTczLFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NUQVJUOiAzNTk3MixcbiAgVFJBTlNGT1JNX0ZFRURCQUNLX1BBVVNFRDogMzYzODcsXG4gIFRSQU5TRk9STV9GRUVEQkFDS19QUklNSVRJVkVTX1dSSVRURU46IDM1OTc2LFxuICBUUkFOU0ZPUk1fRkVFREJBQ0tfVkFSWUlOR1M6IDM1OTcxLFxuICBUUklBTkdMRVM6IDQsXG4gIFRSSUFOR0xFX0ZBTjogNixcbiAgVFJJQU5HTEVfU1RSSVA6IDUsXG4gIFVOSUZPUk1fQVJSQVlfU1RSSURFOiAzNTM4OCxcbiAgVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STVM6IDM1Mzk0LFxuICBVTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNX0lORElDRVM6IDM1Mzk1LFxuICBVTklGT1JNX0JMT0NLX0JJTkRJTkc6IDM1MzkxLFxuICBVTklGT1JNX0JMT0NLX0RBVEFfU0laRTogMzUzOTIsXG4gIFVOSUZPUk1fQkxPQ0tfSU5ERVg6IDM1Mzg2LFxuICBVTklGT1JNX0JMT0NLX1JFRkVSRU5DRURfQllfRlJBR01FTlRfU0hBREVSOiAzNTM5OCxcbiAgVU5JRk9STV9CTE9DS19SRUZFUkVOQ0VEX0JZX1ZFUlRFWF9TSEFERVI6IDM1Mzk2LFxuICBVTklGT1JNX0JVRkZFUjogMzUzNDUsXG4gIFVOSUZPUk1fQlVGRkVSX0JJTkRJTkc6IDM1MzY4LFxuICBVTklGT1JNX0JVRkZFUl9PRkZTRVRfQUxJR05NRU5UOiAzNTM4MCxcbiAgVU5JRk9STV9CVUZGRVJfU0laRTogMzUzNzAsXG4gIFVOSUZPUk1fQlVGRkVSX1NUQVJUOiAzNTM2OSxcbiAgVU5JRk9STV9JU19ST1dfTUFKT1I6IDM1MzkwLFxuICBVTklGT1JNX01BVFJJWF9TVFJJREU6IDM1Mzg5LFxuICBVTklGT1JNX09GRlNFVDogMzUzODcsXG4gIFVOSUZPUk1fU0laRTogMzUzODQsXG4gIFVOSUZPUk1fVFlQRTogMzUzODMsXG4gIFVOUEFDS19BTElHTk1FTlQ6IDMzMTcsXG4gIFVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0w6IDM3NDQzLFxuICBVTlBBQ0tfRkxJUF9ZX1dFQkdMOiAzNzQ0MCxcbiAgVU5QQUNLX0lNQUdFX0hFSUdIVDogMzI4NzgsXG4gIFVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTDogMzc0NDEsXG4gIFVOUEFDS19ST1dfTEVOR1RIOiAzMzE0LFxuICBVTlBBQ0tfU0tJUF9JTUFHRVM6IDMyODc3LFxuICBVTlBBQ0tfU0tJUF9QSVhFTFM6IDMzMTYsXG4gIFVOUEFDS19TS0lQX1JPV1M6IDMzMTUsXG4gIFVOU0lHTkFMRUQ6IDM3MTQ0LFxuICBVTlNJR05FRF9CWVRFOiA1MTIxLFxuICBVTlNJR05FRF9JTlQ6IDUxMjUsXG4gIFVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVjogMzM2NDAsXG4gIFVOU0lHTkVEX0lOVF81XzlfOV85X1JFVjogMzU5MDIsXG4gIFVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVY6IDM1ODk5LFxuICBVTlNJR05FRF9JTlRfMjRfODogMzQwNDIsXG4gIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEOiAzNjMwNixcbiAgVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVk6IDM2MzExLFxuICBVTlNJR05FRF9JTlRfU0FNUExFUl8zRDogMzYzMDcsXG4gIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkU6IDM2MzA4LFxuICBVTlNJR05FRF9JTlRfVkVDMjogMzYyOTQsXG4gIFVOU0lHTkVEX0lOVF9WRUMzOiAzNjI5NSxcbiAgVU5TSUdORURfSU5UX1ZFQzQ6IDM2Mjk2LFxuICBVTlNJR05FRF9OT1JNQUxJWkVEOiAzNTg2MyxcbiAgVU5TSUdORURfU0hPUlQ6IDUxMjMsXG4gIFVOU0lHTkVEX1NIT1JUXzRfNF80XzQ6IDMyODE5LFxuICBVTlNJR05FRF9TSE9SVF81XzVfNV8xOiAzMjgyMCxcbiAgVU5TSUdORURfU0hPUlRfNV82XzU6IDMzNjM1LFxuICBWQUxJREFURV9TVEFUVVM6IDM1NzE1LFxuICBWRU5ET1I6IDc5MzYsXG4gIFZFUlNJT046IDc5MzgsXG4gIFZFUlRFWF9BUlJBWV9CSU5ESU5HOiAzNDIyOSxcbiAgVkVSVEVYX0FUVFJJQl9BUlJBWV9CVUZGRVJfQklORElORzogMzQ5NzUsXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUjogMzUwNzAsXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFRDogMzQzMzgsXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfSU5URUdFUjogMzUwNjksXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfTk9STUFMSVpFRDogMzQ5MjIsXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfUE9JTlRFUjogMzQzNzMsXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfU0laRTogMzQzMzksXG4gIFZFUlRFWF9BVFRSSUJfQVJSQVlfU1RSSURFOiAzNDM0MCxcbiAgVkVSVEVYX0FUVFJJQl9BUlJBWV9UWVBFOiAzNDM0MSxcbiAgVkVSVEVYX1NIQURFUjogMzU2MzMsXG4gIFZJRVdQT1JUOiAyOTc4LFxuICBXQUlUX0ZBSUxFRDogMzcxNDksXG4gIFpFUk86IDBcbn07XG4iLCJpbXBvcnQgVmlldyBmcm9tIFwiLi9WaWV3XCI7XG5pbXBvcnQgUmF5Q2FzdFJlbmRlcmVyIGZyb20gXCIuL1JheUNhc3RSZW5kZXJlclwiO1xuaW1wb3J0IEdlbmVyYXRvciBmcm9tIFwiLi9HZW5lcmF0b3JcIjtcbmltcG9ydCBQcm9ncmFtbWF0aWNHZW5lcmF0b3IgZnJvbSBcIi4vUHJvZ3JhbW1hdGljR2VuZXJhdG9yXCI7XG5pbXBvcnQgR3Jvd0N1dEdlbmVyYXRvciBmcm9tIFwiLi9Hcm93Q3V0R2VuZXJhdG9yXCI7XG5pbXBvcnQgbGluZWFyIGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IGZpZWxkcyBmcm9tIFwiLi9maWVsZHNcIjtcbmltcG9ydCB1bmlmb3JtcyBmcm9tIFwiLi91bmlmb3Jtcy5qc1wiO1xuXG5leHBvcnQge1xuICBWaWV3LFxuICBSYXlDYXN0UmVuZGVyZXIsXG4gIEdlbmVyYXRvcixcbiAgUHJvZ3JhbW1hdGljR2VuZXJhdG9yLFxuICBHcm93Q3V0R2VuZXJhdG9yLFxuICBsaW5lYXIsXG4gIGZpZWxkcyxcbiAgdW5pZm9ybXNcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHZjbG9uZSxcbiAgdmxlbmd0aCxcbiAgdm5vcm1hbGl6ZSxcbiAgdmRpc3RhbmNlLFxuICB2cGx1cyxcbiAgdm1pbnVzLFxuICB2c2NhbGUsXG4gIHZjcm9zcyxcbiAgdmRvdCxcbiAgbWlkZW50aXR5LFxuICBtdHJhbnNsYXRlLFxuICBtc2NhbGUsXG4gIG1yb3RhdGUsXG4gIG1tdWx0aXBseSxcbiAgbXZtdWx0aXBseSxcbiAgTEFSR0VfTlVNQkVSOiAzZTM4LFxuICBTTUFMTF9OVU1CRVI6IDJlLTM4XG59O1xuXG5mdW5jdGlvbiB2Y2xvbmUodikge1xuICByZXR1cm4gdi5zbGljZSgwKTtcbn1cblxuZnVuY3Rpb24gdmxlbmd0aCh2KSB7XG4gIHJldHVybiBNYXRoLnNxcnQodi5tYXAoZSA9PiBlICogZSkucmVkdWNlKChzdW0sIHZhbHVlKSA9PiBzdW0gKyB2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiB2bm9ybWFsaXplKHYpIHtcbiAgcmV0dXJuIHZzY2FsZSh2LCAxIC8gdmxlbmd0aCh2KSk7XG59XG5cbmZ1bmN0aW9uIHZkaXN0YW5jZSh2MSwgdjIpIHtcbiAgcmV0dXJuIHZsZW5ndGgodm1pbnVzKHYyLCB2MSkpO1xufVxuXG5mdW5jdGlvbiB2cGx1cyh2MSwgdjIpIHtcbiAgcmV0dXJuIFt2MVswXSArIHYyWzBdLCB2MVsxXSArIHYyWzFdLCB2MVsyXSArIHYyWzJdXTtcbn1cblxuZnVuY3Rpb24gdm1pbnVzKHYxLCB2Mikge1xuICByZXR1cm4gW3YxWzBdIC0gdjJbMF0sIHYxWzFdIC0gdjJbMV0sIHYxWzJdIC0gdjJbMl1dO1xufVxuXG5mdW5jdGlvbiB2c2NhbGUodjEsIHNjYWxlKSB7XG4gIHJldHVybiBbdjFbMF0gKiBzY2FsZSwgdjFbMV0gKiBzY2FsZSwgdjFbMl0gKiBzY2FsZV07XG59XG5cbmZ1bmN0aW9uIHZjcm9zcyh2MSwgdjIpIHtcbiAgcmV0dXJuIFtcbiAgICB2MVsxXSAqIHYyWzJdIC0gdjFbMl0gKiB2MlsxXSxcbiAgICB2MVsyXSAqIHYyWzBdIC0gdjFbMF0gKiB2MlsyXSxcbiAgICB2MVswXSAqIHYyWzFdIC0gdjFbMV0gKiB2MlswXVxuICBdO1xufVxuXG5mdW5jdGlvbiB2ZG90KHYxLCB2Mikge1xuICByZXR1cm4gW3YxWzBdICogdjJbMF0gKyB2MVsxXSAqIHYyWzFdICsgdjFbMl0gKiB2MlsyXV07XG59XG5cbmZ1bmN0aW9uIG1pZGVudGl0eSgpIHtcbiAgcmV0dXJuIFtbMSwgMCwgMCwgMF0sIFswLCAxLCAwLCAwXSwgWzAsIDAsIDEsIDBdLCBbMCwgMCwgMCwgMV1dO1xufVxuXG5mdW5jdGlvbiBtdHJhbnNsYXRlKHYpIHtcbiAgcmV0dXJuIFtbMSwgMCwgMCwgMF0sIFswLCAxLCAwLCAwXSwgWzAsIDAsIDEsIDBdLCBbdlswXSwgdlsxXSwgdlsyXSwgMV1dO1xufVxuXG5mdW5jdGlvbiBtc2NhbGUodikge1xuICByZXR1cm4gW1t2WzBdLCAwLCAwLCAwXSwgWzAsIHZbMV0sIDAsIDBdLCBbMCwgMCwgdlsyXSwgMF0sIFswLCAwLCAwLCAxXV07XG59XG5cbi8vIHJldHVybiBhIG1hdHJpeCB0byByb3RhdGUgYSBwb2ludCBhcm91bmQgdGhlIGF4aXMgYnkgYW5nbGVcbi8vIGF4aXMgbXVzdCBiZSBub3JtYWxpemVkXG4vLyBhbmdsZSBpcyBpbiBkZWdyZWVzXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb3RhdGlvbl9tYXRyaXgjUm90YXRpb25fbWF0cml4X2Zyb21fYXhpc19hbmRfYW5nbGVcbmZ1bmN0aW9uIG1yb3RhdGUodSwgdGhldGEpIHtcbiAgbGV0IFQgPSAodGhldGEgKiBNYXRoLlBJKSAvIDE4MDtcbiAgbGV0IGNUID0gTWF0aC5jb3MoVCk7XG4gIGxldCBzVCA9IE1hdGguc2luKFQpO1xuXG4gIHJldHVybiBbXG4gICAgW1xuICAgICAgY1QgKyB1WzBdICogdVswXSAqICgxIC0gY1QpLFxuICAgICAgdVsxXSAqIHVbMF0gKiAoMSAtIGNUKSArIHVbMl0gKiBzVCxcbiAgICAgIHVbMl0gKiB1WzBdICogKDEgLSBjVCkgLSB1WzFdICogc1QsXG4gICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICB1WzBdICogdVsxXSAqICgxIC0gY1QpIC0gdVsyXSAqIHNULFxuICAgICAgY1QgKyB1WzFdICogdVsxXSAqICgxIC0gY1QpLFxuICAgICAgdVsyXSAqIHVbMV0gKiAoMSAtIGNUKSArIHVbMF0gKiBzVCxcbiAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgIHVbMF0gKiB1WzJdICogKDEgLSBjVCkgKyB1WzFdICogc1QsXG4gICAgICB1WzFdICogdVsyXSAqICgxIC0gY1QpIC0gdVswXSAqIHNULFxuICAgICAgY1QgKyB1WzJdICogdVsyXSAqICgxIC0gY1QpLFxuICAgICAgMFxuICAgIF0sXG4gICAgWzAsIDAsIDAsIDFdXG4gIF07XG59XG5cbmZ1bmN0aW9uIG1tdWx0aXBseShtMSwgbTIpIHtcbiAgcmV0dXJuIFtcbiAgICBbXG4gICAgICBtMVswXVswXSAqIG0yWzBdWzBdICtcbiAgICAgICAgbTFbMV1bMF0gKiBtMlswXVsxXSArXG4gICAgICAgIG0xWzJdWzBdICogbTJbMF1bMl0gK1xuICAgICAgICBtMVszXVswXSAqIG0yWzBdWzNdLFxuICAgICAgbTFbMF1bMV0gKiBtMlswXVswXSArXG4gICAgICAgIG0xWzFdWzFdICogbTJbMF1bMV0gK1xuICAgICAgICBtMVsyXVsxXSAqIG0yWzBdWzJdICtcbiAgICAgICAgbTFbM11bMV0gKiBtMlswXVszXSxcbiAgICAgIG0xWzBdWzJdICogbTJbMF1bMF0gK1xuICAgICAgICBtMVsxXVsyXSAqIG0yWzBdWzFdICtcbiAgICAgICAgbTFbMl1bMl0gKiBtMlswXVsyXSArXG4gICAgICAgIG0xWzNdWzJdICogbTJbMF1bM10sXG4gICAgICBtMVswXVszXSAqIG0yWzBdWzBdICtcbiAgICAgICAgbTFbMV1bM10gKiBtMlswXVsxXSArXG4gICAgICAgIG0xWzJdWzNdICogbTJbMF1bMl0gK1xuICAgICAgICBtMVszXVszXSAqIG0yWzBdWzNdXG4gICAgXSxcbiAgICBbXG4gICAgICBtMVswXVswXSAqIG0yWzFdWzBdICtcbiAgICAgICAgbTFbMV1bMF0gKiBtMlsxXVsxXSArXG4gICAgICAgIG0xWzJdWzBdICogbTJbMV1bMl0gK1xuICAgICAgICBtMVszXVswXSAqIG0yWzFdWzNdLFxuICAgICAgbTFbMF1bMV0gKiBtMlsxXVswXSArXG4gICAgICAgIG0xWzFdWzFdICogbTJbMV1bMV0gK1xuICAgICAgICBtMVsyXVsxXSAqIG0yWzFdWzJdICtcbiAgICAgICAgbTFbM11bMV0gKiBtMlsxXVszXSxcbiAgICAgIG0xWzBdWzJdICogbTJbMV1bMF0gK1xuICAgICAgICBtMVsxXVsyXSAqIG0yWzFdWzFdICtcbiAgICAgICAgbTFbMl1bMl0gKiBtMlsxXVsyXSArXG4gICAgICAgIG0xWzNdWzJdICogbTJbMV1bM10sXG4gICAgICBtMVswXVszXSAqIG0yWzFdWzBdICtcbiAgICAgICAgbTFbMV1bM10gKiBtMlsxXVsxXSArXG4gICAgICAgIG0xWzJdWzNdICogbTJbMV1bMl0gK1xuICAgICAgICBtMVszXVszXSAqIG0yWzFdWzNdXG4gICAgXSxcbiAgICBbXG4gICAgICBtMVswXVswXSAqIG0yWzJdWzBdICtcbiAgICAgICAgbTFbMV1bMF0gKiBtMlsyXVsxXSArXG4gICAgICAgIG0xWzJdWzBdICogbTJbMl1bMl0gK1xuICAgICAgICBtMVszXVswXSAqIG0yWzJdWzNdLFxuICAgICAgbTFbMF1bMV0gKiBtMlsyXVswXSArXG4gICAgICAgIG0xWzFdWzFdICogbTJbMl1bMV0gK1xuICAgICAgICBtMVsyXVsxXSAqIG0yWzJdWzJdICtcbiAgICAgICAgbTFbM11bMV0gKiBtMlsyXVszXSxcbiAgICAgIG0xWzBdWzJdICogbTJbMl1bMF0gK1xuICAgICAgICBtMVsxXVsyXSAqIG0yWzJdWzFdICtcbiAgICAgICAgbTFbMl1bMl0gKiBtMlsyXVsyXSArXG4gICAgICAgIG0xWzNdWzJdICogbTJbMl1bM10sXG4gICAgICBtMVswXVszXSAqIG0yWzJdWzBdICtcbiAgICAgICAgbTFbMV1bM10gKiBtMlsyXVsxXSArXG4gICAgICAgIG0xWzJdWzNdICogbTJbMl1bMl0gK1xuICAgICAgICBtMVszXVszXSAqIG0yWzJdWzNdXG4gICAgXSxcbiAgICBbXG4gICAgICBtMVswXVswXSAqIG0yWzNdWzBdICtcbiAgICAgICAgbTFbMV1bMF0gKiBtMlszXVsxXSArXG4gICAgICAgIG0xWzJdWzBdICogbTJbM11bMl0gK1xuICAgICAgICBtMVszXVswXSAqIG0yWzNdWzNdLFxuICAgICAgbTFbMF1bMV0gKiBtMlszXVswXSArXG4gICAgICAgIG0xWzFdWzFdICogbTJbM11bMV0gK1xuICAgICAgICBtMVsyXVsxXSAqIG0yWzNdWzJdICtcbiAgICAgICAgbTFbM11bMV0gKiBtMlszXVszXSxcbiAgICAgIG0xWzBdWzJdICogbTJbM11bMF0gK1xuICAgICAgICBtMVsxXVsyXSAqIG0yWzNdWzFdICtcbiAgICAgICAgbTFbMl1bMl0gKiBtMlszXVsyXSArXG4gICAgICAgIG0xWzNdWzJdICogbTJbM11bM10sXG4gICAgICBtMVswXVszXSAqIG0yWzNdWzBdICtcbiAgICAgICAgbTFbMV1bM10gKiBtMlszXVsxXSArXG4gICAgICAgIG0xWzJdWzNdICogbTJbM11bMl0gK1xuICAgICAgICBtMVszXVszXSAqIG0yWzNdWzNdXG4gICAgXVxuICBdO1xufVxuXG5mdW5jdGlvbiBtdm11bHRpcGx5KG0sIHYpIHtcbiAgcmV0dXJuIFtcbiAgICBtWzBdWzBdICogdlswXSArIG1bMV1bMF0gKiB2WzFdICsgbVsyXVswXSAqIHZbMl0gKyBtWzNdWzBdICogdlszXSxcbiAgICBtWzBdWzFdICogdlswXSArIG1bMV1bMV0gKiB2WzFdICsgbVsyXVsxXSAqIHZbMl0gKyBtWzNdWzFdICogdlszXSxcbiAgICBtWzBdWzJdICogdlswXSArIG1bMV1bMl0gKiB2WzFdICsgbVsyXVsyXSAqIHZbMl0gKyBtWzNdWzJdICogdlszXSxcbiAgICBtWzBdWzNdICogdlswXSArIG1bMV1bM10gKiB2WzFdICsgbVsyXVszXSAqIHZbMl0gKyBtWzNdWzNdICogdlszXVxuICBdO1xufVxuIiwiLy8gVE9ETyAtPiBJcyB0aGlzIGV2ZW4gbmVlZGVkLi4uIHJlLWV2YWx1YXRlIHdoZW4gbXkgdW5kZXJzdGFuZGluZyBoYXMgaW5jcmVhc2VkIGEgZmV3IFNURVBzLlxuY2xhc3MgVW5pZm9ybXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnBvaW50TGlnaHQgPSB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiBbMTAwLCAtNDAwLCAxNTAwXSB9O1xuICAgIHRoaXMuZ3JhZGllbnRTaXplID0geyB0eXBlOiBcIjFmXCIsIHZhbHVlOiAxIH07XG4gICAgdGhpcy5yYXlNYXhTdGVwcyA9IHsgdHlwZTogXCIxaVwiLCB2YWx1ZTogMTAwMDAgfTtcbiAgICB0aGlzLnNhbXBsZVN0ZXAgPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IDAuNSB9O1xuICAgIHRoaXMucmVuZGVyQ2FudmFzV2lkdGggPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IDUxMiB9O1xuICAgIHRoaXMucmVuZGVyQ2FudmFzSGVpZ2h0ID0geyB0eXBlOiBcIjFmXCIsIHZhbHVlOiA1MTIgfTtcbiAgICB0aGlzLnNsaWNlTW9kZSA9IHsgdHlwZTogXCIxaVwiLCB2YWx1ZTogMSB9O1xuICAgIHRoaXMuS2FtYmllbnQgPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IDEuNSB9O1xuICAgIHRoaXMuS2RpZmZ1c2UgPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IDAuOTUgfTtcbiAgICB0aGlzLktzcGVjdWxhciA9IHsgdHlwZTogXCIxZlwiLCB2YWx1ZTogMC44IH07XG4gICAgdGhpcy5TaGluaW5lc3MgPSB7IHR5cGU6IFwiMWZcIiwgdmFsdWU6IDEwIH07XG4gIH1cbn1cblxuY29uc3QgdW5pZm9ybXMgPSBuZXcgVW5pZm9ybXMoKTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pZm9ybXM7XG4iXSwic291cmNlUm9vdCI6IiJ9